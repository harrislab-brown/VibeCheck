
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d548  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  0801d818  0801d818  0001e818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801eaa8  0801eaa8  0001faa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801eab0  0801eab0  0001fab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801eab4  0801eab4  0001fab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801eab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001f640  240002fc  0801edb4  000202fc  2**2
                  ALLOC
  8 ._user_heap_stack 00006404  2401f93c  0801edb4  0002093c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a725  00000000  00000000  0002032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007480  00000000  00000000  0005aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002920  00000000  00000000  00061ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fdd  00000000  00000000  000647f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e675  00000000  00000000  000667cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c312  00000000  00000000  000a4e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017321f  00000000  00000000  000e1154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00254373  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c508  00000000  00000000  002543b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  002608c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  00260966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d800 	.word	0x0801d800

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801d800 	.word	0x0801d800

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a ff57 	bl	800b9b0 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801d818 	.word	0x0801d818
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801d820 	.word	0x0801d820
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00a fc0c 	bl	800b9b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f00f feaf 	bl	8010f0c <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00a fbf7 	bl	800b9b0 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00a fbda 	bl	800b9b0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f00f fc92 	bl	8010b30 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00a fbc8 	bl	800b9b0 <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	b470      	push	{r4, r5, r6}
 800122e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001232:	4684      	mov	ip, r0
 8001234:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001236:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123a:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123c:	685e      	ldr	r6, [r3, #4]
 800123e:	4030      	ands	r0, r6
 8001240:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001242:	68d8      	ldr	r0, [r3, #12]
 8001244:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 8001248:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f040 0001 	orr.w	r0, r0, #1
 8001250:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001258:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125a:	b1a2      	cbz	r2, 8001286 <SPI_TxRx_Fast+0x5a>
 800125c:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001260:	6958      	ldr	r0, [r3, #20]
 8001262:	0780      	lsls	r0, r0, #30
 8001264:	d5fc      	bpl.n	8001260 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001266:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800126a:	45b4      	cmp	ip, r6
 800126c:	f883 0020 	strb.w	r0, [r3, #32]
 8001270:	d1f6      	bne.n	8001260 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001272:	440a      	add	r2, r1

	/* FIXME: this can get stuck -- add a timeout or max iteration limit */

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001274:	6958      	ldr	r0, [r3, #20]
 8001276:	07c0      	lsls	r0, r0, #31
 8001278:	d5fc      	bpl.n	8001274 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800127a:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 800127e:	f801 0b01 	strb.w	r0, [r1], #1
 8001282:	4291      	cmp	r1, r2
 8001284:	d1f6      	bne.n	8001274 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 800128e:	61a5      	str	r5, [r4, #24]
}
 8001290:	bc70      	pop	{r4, r5, r6}
 8001292:	4770      	bx	lr
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012a2:	f004 ff4e 	bl	8006142 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24011de0 	.word	0x24011de0

080012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012be:	f005 fd61 	bl	8006d84 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24011e00 	.word	0x24011e00

080012d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80012da:	f005 fd6f 	bl	8006dbc <VibeCheckWaveGen_DMACpltCallback>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24011e00 	.word	0x24011e00

080012ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012fc:	f003 fc51 	bl	8004ba2 <VibeCheckSensor_EXTICallback>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240133cc 	.word	0x240133cc

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001312:	f000 ff23 	bl	800215c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f006 f84d 	bl	80073b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f84d 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800131e:	f000 f8bb 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fdbf 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fd8d 	bl	8001e44 <MX_DMA_Init>
  MX_DAC1_Init();
 800132a:	f000 f9cb 	bl	80016c4 <MX_DAC1_Init>
  MX_I2C2_Init();
 800132e:	f000 fa05 	bl	800173c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001332:	f000 fa43 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001336:	f000 fa97 	bl	8001868 <MX_SPI3_Init>
  MX_SPI4_Init();
 800133a:	f000 faeb 	bl	8001914 <MX_SPI4_Init>
  MX_TIM4_Init();
 800133e:	f000 fc6f 	bl	8001c20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001342:	f000 fbdf 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd31 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800134a:	f000 fb39 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134e:	f000 fb8b 	bl	8001a68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001352:	f000 f8d1 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001356:	f000 f94b 	bl	80015f0 <MX_ADC2_Init>
  MX_UART7_Init();
 800135a:	f000 fcd9 	bl	8001d10 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800135e:	f016 fdf3 	bl	8017f48 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0x84>)
 8001364:	f010 fa4c 	bl	8011800 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x88>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <main+0x8c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <main+0x90>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <main+0x94>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0x98>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <main+0x9c>)
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <main+0xa0>)
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xa4>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa8>)
 8001384:	f001 fe42 	bl	800300c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa8>)
 800138a:	f002 f815 	bl	80033b8 <VibeCheck_Loop>
 800138e:	e7fb      	b.n	8001388 <main+0x7c>
 8001390:	24000734 	.word	0x24000734
 8001394:	24000660 	.word	0x24000660
 8001398:	240005d8 	.word	0x240005d8
 800139c:	24000550 	.word	0x24000550
 80013a0:	40000024 	.word	0x40000024
 80013a4:	240007cc 	.word	0x240007cc
 80013a8:	240003f8 	.word	0x240003f8
 80013ac:	240006e8 	.word	0x240006e8
 80013b0:	24000780 	.word	0x24000780
 80013b4:	240009b8 	.word	0x240009b8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	224c      	movs	r2, #76	@ 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f018 fe7f 	bl	801a0ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f018 fe79 	bl	801a0ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f00b feef 	bl	800d1bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemClock_Config+0xdc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	@ 0x21
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	@ 0x28
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001434:	230c      	movs	r3, #12
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4618      	mov	r0, r3
 8001446:	f00b ff03 	bl	800d250 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 feb0 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f00c fac2 	bl	800da04 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fe95 	bl	80021b4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	@ 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	@ 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f018 fe10 	bl	801a0ca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fe1c 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fe63 	bl	80021b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f018 fdda 	bl	801a0ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <MX_ADC1_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001532:	2204      	movs	r2, #4
 8001534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001544:	2201      	movs	r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800157e:	f006 fa15 	bl	80079ac <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001588:	f000 fe14 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001598:	f007 fa54 	bl	8008a44 <HAL_ADCEx_MultiModeConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 fe07 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_ADC1_Init+0xf0>)
 80015a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_ADC1_Init+0xf4>)
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 80015ca:	f006 fbf7 	bl	8007dbc <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015d4:	f000 fdee 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000318 	.word	0x24000318
 80015e4:	40022000 	.word	0x40022000
 80015e8:	10c00010 	.word	0x10c00010
 80015ec:	47ff0000 	.word	0x47ff0000

080015f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f018 fd64 	bl	801a0ca <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <MX_ADC2_Init+0xc8>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001664:	2201      	movs	r2, #1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800166a:	f006 f99f 	bl	80079ac <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001674:	f000 fd9e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_ADC2_Init+0xcc>)
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC2_Init+0xd0>)
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001688:	2304      	movs	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800169c:	f006 fb8e 	bl	8007dbc <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016a6:	f000 fd85 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000388 	.word	0x24000388
 80016b8:	40022100 	.word	0x40022100
 80016bc:	0c900008 	.word	0x0c900008
 80016c0:	47ff0000 	.word	0x47ff0000

080016c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2224      	movs	r2, #36	@ 0x24
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f018 fcfa 	bl	801a0ca <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_DAC1_Init+0x74>)
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016de:	f007 fc1b 	bl	8008f18 <HAL_DAC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e8:	f000 fd64 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80016f0:	2306      	movs	r3, #6
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_DAC1_Init+0x70>)
 8001708:	f007 fcf2 	bl	80090f0 <HAL_DAC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fd4f 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2210      	movs	r2, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_DAC1_Init+0x70>)
 800171e:	f007 fce7 	bl	80090f0 <HAL_DAC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 fd44 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240003f8 	.word	0x240003f8
 8001738:	40007400 	.word	0x40007400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f00a f94e 	bl	800ba18 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fd17 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f00a f9e1 	bl	800bb50 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f00a fa23 	bl	800bbe6 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fd05 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240004fc 	.word	0x240004fc
 80017b4:	40005800 	.word	0x40005800
 80017b8:	307075b1 	.word	0x307075b1

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800184e:	f00f f84b 	bl	80108e8 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fcac 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000550 	.word	0x24000550
 8001864:	40003800 	.word	0x40003800

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_SPI3_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_SPI3_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_SPI3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_SPI3_Init+0xa4>)
 800189c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018fa:	f00e fff5 	bl	80108e8 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fc56 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240005d8 	.word	0x240005d8
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <MX_SPI4_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a6:	f00e ff9f 	bl	80108e8 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fc00 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000660 	.word	0x24000660
 80019bc:	40013400 	.word	0x40013400

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f00f fea1 	bl	8011752 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fbcd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f010 fe52 	bl	80126d0 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 fbbf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f011 fc94 	bl	8013374 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fbaf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240006e8 	.word	0x240006e8
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f00f fe4f 	bl	8011752 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fb7b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f010 fe00 	bl	80126d0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fb6d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ada:	2320      	movs	r3, #32
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f011 fc44 	bl	8013374 <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fb5f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000734 	.word	0x24000734

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM3_Init+0x118>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b5e:	f00f fdf8 	bl	8011752 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b68:	f000 fb24 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b7a:	f010 fda9 	bl	80126d0 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b84:	f000 fb16 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b8a:	f00f ff3d 	bl	8011a08 <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b94:	f000 fb0e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001ba8:	f011 fbe4 	bl	8013374 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb2:	f000 faff 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bce:	f010 fc6b 	bl	80124a8 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001be4:	f010 fc60 	bl	80124a8 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bee:	f000 fae1 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bfa:	f010 fc55 	bl	80124a8 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001c0a:	f000 fee3 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000780 	.word	0x24000780
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	@ 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <MX_TIM4_Init+0xec>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c78:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c7a:	f00f fd6a 	bl	8011752 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c84:	f000 fa96 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c96:	f010 fd1b 	bl	80126d0 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ca0:	f000 fa88 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001ca6:	f00f feaf 	bl	8011a08 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cb0:	f000 fa80 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cc4:	f011 fb56 	bl	8013374 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fa71 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd2:	2360      	movs	r3, #96	@ 0x60
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cea:	f010 fbdd 	bl	80124a8 <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001cf4:	f000 fa5e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cfa:	f000 fe6b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240007cc 	.word	0x240007cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <MX_UART7_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d3c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d5c:	f011 fbc4 	bl	80134e8 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa25 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d6e:	f012 fcd0 	bl	8014712 <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d80:	f012 fd05 	bl	801478e <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fa13 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d90:	f012 fc86 	bl	80146a0 <HAL_UARTEx_DisableFifoMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000890 	.word	0x24000890
 8001da8:	40007800 	.word	0x40007800

08001dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART1_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df6:	f011 fb77 	bl	80134e8 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f9d8 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e08:	f012 fc83 	bl	8014712 <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f9cf 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e1a:	f012 fcb8 	bl	801478e <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f9c6 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e2a:	f012 fc39 	bl	80146a0 <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000924 	.word	0x24000924
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f006 ffa6 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e72:	200b      	movs	r0, #11
 8001e74:	f006 ffbd 	bl	8008df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f006 ff9e 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f006 ffb5 	bl	8008df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f006 ff96 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f006 ffad 	bl	8008df2 <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a99      	ldr	r2, [pc, #612]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a91      	ldr	r2, [pc, #580]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b87      	ldr	r3, [pc, #540]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b78      	ldr	r3, [pc, #480]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4875      	ldr	r0, [pc, #468]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001f74:	f009 fd1c 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4873      	ldr	r0, [pc, #460]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8001f7e:	f009 fd17 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4872      	ldr	r0, [pc, #456]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f88:	f009 fd12 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	486f      	ldr	r0, [pc, #444]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f92:	f009 fd0d 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	486d      	ldr	r0, [pc, #436]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001f9e:	f009 fd07 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	486c      	ldr	r0, [pc, #432]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8001fa8:	f009 fd02 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	4868      	ldr	r0, [pc, #416]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001fb4:	f009 fcfc 	bl	800b9b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	485e      	ldr	r0, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fce:	f009 fb2f 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4857      	ldr	r0, [pc, #348]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fea:	f009 fb21 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4851      	ldr	r0, [pc, #324]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002006:	f009 fb13 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	484a      	ldr	r0, [pc, #296]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002022:	f009 fb05 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002026:	230b      	movs	r3, #11
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 800203e:	f009 faf7 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8002042:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8002058:	f009 faea 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8002076:	f009 fadb 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800207a:	f240 3306 	movw	r3, #774	@ 0x306
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8002092:	f009 facd 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_GPIO_Init+0x2a8>)
 80020ac:	f009 fac0 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4824      	ldr	r0, [pc, #144]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 80020c8:	f009 fab2 	bl	800b630 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481b      	ldr	r0, [pc, #108]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 80020e6:	f009 faa3 	bl	800b630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2007      	movs	r0, #7
 80020f0:	f006 fe65 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f006 fe7c 	bl	8008df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2008      	movs	r0, #8
 8002100:	f006 fe5d 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002104:	2008      	movs	r0, #8
 8002106:	f006 fe74 	bl	8008df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2009      	movs	r0, #9
 8002110:	f006 fe55 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002114:	2009      	movs	r0, #9
 8002116:	f006 fe6c 	bl	8008df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2017      	movs	r0, #23
 8002120:	f006 fe4d 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002124:	2017      	movs	r0, #23
 8002126:	f006 fe64 	bl	8008df2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f006 fe45 	bl	8008dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	@ 0x28
 8002136:	f006 fe5c 	bl	8008df2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	@ 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	58021000 	.word	0x58021000
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58020c00 	.word	0x58020c00

0800215c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800216e:	f006 fe5b 	bl	8008e28 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800217e:	231f      	movs	r3, #31
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002182:	2387      	movs	r3, #135	@ 0x87
 8002184:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f006 fe79 	bl	8008e98 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021a6:	2004      	movs	r0, #4
 80021a8:	f006 fe56 	bl	8008e58 <HAL_MPU_Enable>

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	745a      	strb	r2, [r3, #17]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7c1b      	ldrb	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <Sequencer_Update+0x76>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02c      	beq.n	800229a <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d927      	bls.n	800229a <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10a      	bne.n	8002296 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7c5b      	ldrb	r3, [r3, #17]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e002      	b.n	8002296 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Sequencer_Update+0x78>
		}
	}

	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	741a      	strb	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	741a      	strb	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x34>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002310:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_MspInit+0x34>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_MspInit+0x34>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002328:	2005      	movs	r0, #5
 800232a:	f006 fd3d 	bl	8008da8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002376:	4a34      	ldr	r2, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <HAL_ADC_MspInit+0x110>)
 80023c0:	f009 f936 	bl	800b630 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c4:	e037      	b.n	8002436 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_MspInit+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d132      	bne.n	8002436 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_ADC_MspInit+0x118>)
 8002432:	f009 f8fd 	bl	800b630 <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	240163fc 	.word	0x240163fc
 8002448:	58024400 	.word	0x58024400
 800244c:	58020800 	.word	0x58020800
 8002450:	40022100 	.word	0x40022100
 8002454:	58020000 	.word	0x58020000

08002458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_DAC_MspInit+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808a 	bne.w	8002590 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DAC_MspInit+0x144>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024b8:	2330      	movs	r3, #48	@ 0x30
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4835      	ldr	r0, [pc, #212]	@ (80025a0 <HAL_DAC_MspInit+0x148>)
 80024cc:	f009 f8b0 	bl	800b630 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d2:	4a35      	ldr	r2, [pc, #212]	@ (80025a8 <HAL_DAC_MspInit+0x150>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d8:	2243      	movs	r2, #67	@ 0x43
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002516:	f006 ffb7 	bl	8009488 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002520:	f7ff fe48 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DAC_MspInit+0x158>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800254a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002576:	f006 ff87 	bl	8009488 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fe18 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007400 	.word	0x40007400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	2400040c 	.word	0x2400040c
 80025a8:	40020010 	.word	0x40020010
 80025ac:	24000484 	.word	0x24000484
 80025b0:	40020028 	.word	0x40020028

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b8      	sub	sp, #224	@ 0xe0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	22b8      	movs	r2, #184	@ 0xb8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f017 fd78 	bl	801a0ca <memset>
  if(hi2c->Instance==I2C2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_I2C_MspInit+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d146      	bne.n	8002672 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025e4:	f04f 0208 	mov.w	r2, #8
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00b fd8e 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002628:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002642:	2304      	movs	r3, #4
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_I2C_MspInit+0xd0>)
 8002650:	f008 ffee 	bl	800b630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	@ 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005800 	.word	0x40005800
 8002680:	58024400 	.word	0x58024400
 8002684:	58020400 	.word	0x58020400

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0bc      	sub	sp, #240	@ 0xf0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	22b8      	movs	r2, #184	@ 0xb8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f017 fd0e 	bl	801a0ca <memset>
  if(hspi->Instance==SPI2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_SPI_MspInit+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d146      	bne.n	8002746 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00b fd25 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80026d8:	f7ff fd6c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026dc:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a67      	ldr	r2, [pc, #412]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002718:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800271c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002732:	2305      	movs	r3, #5
 8002734:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273c:	4619      	mov	r1, r3
 800273e:	4851      	ldr	r0, [pc, #324]	@ (8002884 <HAL_SPI_MspInit+0x1fc>)
 8002740:	f008 ff76 	bl	800b630 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002744:	e096      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_SPI_MspInit+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800275c:	2300      	movs	r3, #0
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f00b fcd9 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002770:	f7ff fd20 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027d4:	4619      	mov	r1, r3
 80027d6:	482d      	ldr	r0, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0x204>)
 80027d8:	f008 ff2a 	bl	800b630 <HAL_GPIO_Init>
}
 80027dc:	e04a      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_SPI_MspInit+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d145      	bne.n	8002874 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	4618      	mov	r0, r3
 8002800:	f00b fc8c 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002862:	2305      	movs	r3, #5
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800286c:	4619      	mov	r1, r3
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <HAL_SPI_MspInit+0x20c>)
 8002870:	f008 fede 	bl	800b630 <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	40003c00 	.word	0x40003c00
 800288c:	58020800 	.word	0x58020800
 8002890:	40013400 	.word	0x40013400
 8002894:	58021000 	.word	0x58021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_TIM_Base_MspInit+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c8:	e074      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a39      	ldr	r2, [pc, #228]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	e05f      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d117      	bne.n	800292e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800291c:	2201      	movs	r2, #1
 800291e:	2101      	movs	r1, #1
 8002920:	201d      	movs	r0, #29
 8002922:	f006 fa4c 	bl	8008dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f006 fa63 	bl	8008df2 <HAL_NVIC_EnableIRQ>
}
 800292c:	e042      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_TIM_Base_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13d      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800295e:	221d      	movs	r2, #29
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800299a:	f006 fd75 	bl	8009488 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029a4:	f7ff fc06 	bl	80021b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	24000818 	.word	0x24000818
 80029d0:	40020040 	.word	0x40020040

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d120      	bne.n	8002a38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <HAL_TIM_MspPostInit+0xc0>)
 8002a32:	f008 fdfd 	bl	800b630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a36:	e024      	b.n	8002a82 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_MspPostInit+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a72:	2302      	movs	r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <HAL_TIM_MspPostInit+0xc8>)
 8002a7e:	f008 fdd7 	bl	800b630 <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	58020c00 	.word	0x58020c00

08002aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	22b8      	movs	r2, #184	@ 0xb8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f017 fb02 	bl	801a0ca <memset>
  if(huart->Instance==UART7)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_UART_MspInit+0x160>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d147      	bne.n	8002b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ad0:	f04f 0202 	mov.w	r2, #2
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00b fb18 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002af2:	f7ff fb5f 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002afc:	4a41      	ldr	r2, [pc, #260]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x168>)
 8002b5a:	f008 fd69 	bl	800b630 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	e04a      	b.n	8002bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d145      	bne.n	8002bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6a:	f04f 0201 	mov.w	r2, #1
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b facb 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b8c:	f7ff fb12 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <HAL_UART_MspInit+0x170>)
 8002bf2:	f008 fd1d 	bl	800b630 <HAL_GPIO_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	@ 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40007800 	.word	0x40007800
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	58020400 	.word	0x58020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f004 fc15 	bl	8007498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f008 feb3 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f008 feac 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c92:	2008      	movs	r0, #8
 8002c94:	f008 fea5 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Stream0_IRQHandler+0x10>)
 8002ca2:	f007 f9b3 	bl	800a00c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400040c 	.word	0x2400040c

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f007 f9a9 	bl	800a00c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000484 	.word	0x24000484

08002cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8002cca:	f007 f99f 	bl	800a00c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000818 	.word	0x24000818

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f008 fe7f 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002ce4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ce8:	f008 fe7b 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f00f facf 	bl	8012298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000780 	.word	0x24000780

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d0c:	f008 fe69 	bl	800b9e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <OTG_HS_IRQHandler+0x10>)
 8002d1a:	f009 f8f1 	bl	800bf00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2401f0ec 	.word	0x2401f0ec

08002d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d42:	f017 fa33 	bl	801a1ac <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2216      	movs	r2, #22
 8002d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_exit>:

void _exit (int status)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ffe7 	bl	8002d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <_exit+0x12>

08002d6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d80:	f3af 8000 	nop.w
 8002d84:	4601      	mov	r1, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60ba      	str	r2, [r7, #8]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dbf0      	blt.n	8002d80 <_read+0x12>
  }

  return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60ba      	str	r2, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf1      	blt.n	8002dba <_write+0x12>
  }
  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f017 f998 	bl	801a1ac <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24050000 	.word	0x24050000
 8002ea8:	00003200 	.word	0x00003200
 8002eac:	24016400 	.word	0x24016400
 8002eb0:	2401f940 	.word	0x2401f940

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <SystemInit+0xd0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <SystemInit+0xd0>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <SystemInit+0xd4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d807      	bhi.n	8002ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <SystemInit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <SystemInit+0xd4>)
 8002ede:	f043 0307 	orr.w	r3, r3, #7
 8002ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <SystemInit+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <SystemInit+0xd8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <SystemInit+0xd8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <SystemInit+0xd8>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <SystemInit+0xd8>)
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <SystemInit+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <SystemInit+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SystemInit+0xd4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <SystemInit+0xd4>)
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <SystemInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SystemInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <SystemInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <SystemInit+0xd8>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <SystemInit+0xe0>)
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <SystemInit+0xd8>)
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <SystemInit+0xe4>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <SystemInit+0xd8>)
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <SystemInit+0xe8>)
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <SystemInit+0xd8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <SystemInit+0xd8>)
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <SystemInit+0xe8>)
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <SystemInit+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <SystemInit+0xd8>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <SystemInit+0xe8>)
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <SystemInit+0xd8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <SystemInit+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <SystemInit+0xd8>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <SystemInit+0xd8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemInit+0xec>)
 8002f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f94:	02020200 	.word	0x02020200
 8002f98:	01ff0000 	.word	0x01ff0000
 8002f9c:	01010280 	.word	0x01010280
 8002fa0:	52004000 	.word	0x52004000

08002fa4 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e019      	b.n	8002ff6 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bfb8      	it	lt
 8002fd4:	425b      	neglt	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3e1      	bcc.n	8002fc2 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	b0e5      	sub	sp, #404	@ 0x194
 8003010:	af10      	add	r7, sp, #64	@ 0x40
 8003012:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8003016:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800301a:	6020      	str	r0, [r4, #0]
 800301c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8003020:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8003024:	6001      	str	r1, [r0, #0]
 8003026:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800302a:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800302e:	600a      	str	r2, [r1, #0]
 8003030:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003034:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003038:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 800303a:	200a      	movs	r0, #10
 800303c:	f004 fa4c 	bl	80074d8 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8003040:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003044:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fa6c 	bl	8005528 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8003050:	4ac6      	ldr	r2, [pc, #792]	@ (800336c <VibeCheck_Init+0x360>)
 8003052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003056:	6810      	ldr	r0, [r2, #0]
 8003058:	6018      	str	r0, [r3, #0]
 800305a:	8891      	ldrh	r1, [r2, #4]
 800305c:	7992      	ldrb	r2, [r2, #6]
 800305e:	8099      	strh	r1, [r3, #4]
 8003060:	719a      	strb	r2, [r3, #6]
 8003062:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8003066:	2239      	movs	r2, #57	@ 0x39
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f017 f82d 	bl	801a0ca <memset>
 8003070:	4bbf      	ldr	r3, [pc, #764]	@ (8003370 <VibeCheck_Init+0x364>)
 8003072:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8003076:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800307a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4bbc      	ldr	r3, [pc, #752]	@ (8003374 <VibeCheck_Init+0x368>)
 8003082:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003084:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8003088:	4abb      	ldr	r2, [pc, #748]	@ (8003378 <VibeCheck_Init+0x36c>)
 800308a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	c303      	stmia	r3!, {r0, r1}
 8003094:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003098:	2238      	movs	r2, #56	@ 0x38
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f017 f814 	bl	801a0ca <memset>
 80030a2:	4bb6      	ldr	r3, [pc, #728]	@ (800337c <VibeCheck_Init+0x370>)
 80030a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 80030a8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4bb3      	ldr	r3, [pc, #716]	@ (8003380 <VibeCheck_Init+0x374>)
 80030b4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 80030b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 80030ba:	4bb2      	ldr	r3, [pc, #712]	@ (8003384 <VibeCheck_Init+0x378>)
 80030bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80030c2:	223c      	movs	r2, #60	@ 0x3c
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f016 ffff 	bl	801a0ca <memset>
 80030cc:	4bae      	ldr	r3, [pc, #696]	@ (8003388 <VibeCheck_Init+0x37c>)
 80030ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 80030d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4bab      	ldr	r3, [pc, #684]	@ (800338c <VibeCheck_Init+0x380>)
 80030de:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 80030e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 80030e4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030e8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80030ec:	4aa8      	ldr	r2, [pc, #672]	@ (8003390 <VibeCheck_Init+0x384>)
 80030ee:	460b      	mov	r3, r1
 80030f0:	6810      	ldr	r0, [r2, #0]
 80030f2:	6018      	str	r0, [r3, #0]
 80030f4:	8890      	ldrh	r0, [r2, #4]
 80030f6:	7992      	ldrb	r2, [r2, #6]
 80030f8:	8098      	strh	r0, [r3, #4]
 80030fa:	719a      	strb	r2, [r3, #6]
 80030fc:	1dcb      	adds	r3, r1, #7
 80030fe:	2239      	movs	r2, #57	@ 0x39
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f016 ffe1 	bl	801a0ca <memset>
 8003108:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800310c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003110:	4aa0      	ldr	r2, [pc, #640]	@ (8003394 <VibeCheck_Init+0x388>)
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003114:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003118:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b9e      	ldr	r3, [pc, #632]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003120:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 8003122:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003126:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800312a:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 800312c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003130:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003134:	681e      	ldr	r6, [r3, #0]
 8003136:	466d      	mov	r5, sp
 8003138:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800314c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003156:	4630      	mov	r0, r6
 8003158:	f002 fb4c 	bl	80057f4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 800315c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003160:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003164:	681e      	ldr	r6, [r3, #0]
 8003166:	466d      	mov	r5, sp
 8003168:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 800316c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800316e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003178:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800317c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003180:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003186:	4630      	mov	r0, r6
 8003188:	f002 fb34 	bl	80057f4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 800318c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003190:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	466d      	mov	r5, sp
 8003198:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 800319c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031b0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	4630      	mov	r0, r6
 80031b8:	f002 fb1c 	bl	80057f4 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 80031bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031cc:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 80031d0:	466d      	mov	r5, sp
 80031d2:	f106 040c 	add.w	r4, r6, #12
 80031d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f002 fb00 	bl	80057f4 <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 80031f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031fc:	4a67      	ldr	r2, [pc, #412]	@ (800339c <VibeCheck_Init+0x390>)
 80031fe:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003200:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003204:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <VibeCheck_Init+0x374>)
 800320c:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 800320e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003212:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003216:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003218:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800321c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003220:	4a5f      	ldr	r2, [pc, #380]	@ (80033a0 <VibeCheck_Init+0x394>)
 8003222:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 8003224:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003228:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b5a      	ldr	r3, [pc, #360]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003230:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003232:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003236:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800323a:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 800323c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003240:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003244:	4a57      	ldr	r2, [pc, #348]	@ (80033a4 <VibeCheck_Init+0x398>)
 8003246:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 8003248:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800324c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003254:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 8003256:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800325a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800325e:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 8003260:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003264:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800326e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003272:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003276:	f002 faf1 	bl	800585c <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 800327a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003288:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800328c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003290:	f002 fae4 	bl	800585c <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003294:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003298:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80032a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80032aa:	f002 fad7 	bl	800585c <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 80032ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <VibeCheck_Init+0x368>)
 80032ba:	4413      	add	r3, r2
 80032bc:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032c0:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80032c4:	6811      	ldr	r1, [r2, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f002 fd8e 	bl	8005de8 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 80032cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003380 <VibeCheck_Init+0x374>)
 80032d8:	4413      	add	r3, r2
 80032da:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80032de:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 80032e2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80032e6:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	6809      	ldr	r1, [r1, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 facc 	bl	800688c <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 80032f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <VibeCheck_Init+0x380>)
 8003300:	4413      	add	r3, r2
 8003302:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fadc 	bl	80038c4 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 800330c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003310:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	481d      	ldr	r0, [pc, #116]	@ (800338c <VibeCheck_Init+0x380>)
 8003318:	4418      	add	r0, r3
 800331a:	2310      	movs	r3, #16
 800331c:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <VibeCheck_Init+0x39c>)
 800331e:	4923      	ldr	r1, [pc, #140]	@ (80033ac <VibeCheck_Init+0x3a0>)
 8003320:	f000 fb83 	bl	8003a2a <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 8003324:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003328:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4817      	ldr	r0, [pc, #92]	@ (800338c <VibeCheck_Init+0x380>)
 8003330:	4418      	add	r0, r3
 8003332:	2304      	movs	r3, #4
 8003334:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <VibeCheck_Init+0x3a4>)
 8003336:	491f      	ldr	r1, [pc, #124]	@ (80033b4 <VibeCheck_Init+0x3a8>)
 8003338:	f000 fbae 	bl	8003a98 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 800333c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003340:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4814      	ldr	r0, [pc, #80]	@ (8003398 <VibeCheck_Init+0x38c>)
 8003348:	4418      	add	r0, r3
 800334a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003354:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8003358:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800335c:	f000 fdb2 	bl	8003ec4 <VibeCheckSensor_Init>
}
 8003360:	bf00      	nop
 8003362:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8003366:	46bd      	mov	sp, r7
 8003368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800336a:	bf00      	nop
 800336c:	0801d828 	.word	0x0801d828
 8003370:	08006389 	.word	0x08006389
 8003374:	00011428 	.word	0x00011428
 8003378:	0801d830 	.word	0x0801d830
 800337c:	0800718d 	.word	0x0800718d
 8003380:	00011448 	.word	0x00011448
 8003384:	00626772 	.word	0x00626772
 8003388:	08003cfd 	.word	0x08003cfd
 800338c:	00012494 	.word	0x00012494
 8003390:	0801d838 	.word	0x0801d838
 8003394:	08005179 	.word	0x08005179
 8003398:	00012a14 	.word	0x00012a14
 800339c:	080072e9 	.word	0x080072e9
 80033a0:	080053c9 	.word	0x080053c9
 80033a4:	0800549d 	.word	0x0800549d
 80033a8:	0801db10 	.word	0x0801db10
 80033ac:	0801dad0 	.word	0x0801dad0
 80033b0:	0801da64 	.word	0x0801da64
 80033b4:	0801da54 	.word	0x0801da54

080033b8 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b08d      	sub	sp, #52	@ 0x34
 80033bc:	af02      	add	r7, sp, #8
 80033be:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 80033c0:	f004 f87e 	bl	80074c0 <HAL_GetTick>
 80033c4:	6238      	str	r0, [r7, #32]


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4b9b      	ldr	r3, [pc, #620]	@ (8003638 <VibeCheck_Loop+0x280>)
 80033ca:	4413      	add	r3, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fafd 	bl	80069cc <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4b99      	ldr	r3, [pc, #612]	@ (800363c <VibeCheck_Loop+0x284>)
 80033d6:	4413      	add	r3, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 faa9 	bl	8003930 <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4b97      	ldr	r3, [pc, #604]	@ (8003640 <VibeCheck_Loop+0x288>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fe89 	bl	80040fc <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 f8e3 	bl	80055b8 <VibeCheckShell_Update>
 80033f2:	4603      	mov	r3, r0
 80033f4:	61fb      	str	r3, [r7, #28]

	/* blink indicator LEDs based on shell status */
	if (shell_status.ihandl_status == VC_SHELL_INPUT_PROCESSED)
 80033f6:	7f3b      	ldrb	r3, [r7, #28]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10e      	bne.n	800341a <VibeCheck_Loop+0x62>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_success_times, led_shell_success_colors, led_shell_success_len);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	488f      	ldr	r0, [pc, #572]	@ (800363c <VibeCheck_Loop+0x284>)
 8003400:	4418      	add	r0, r3
 8003402:	2304      	movs	r3, #4
 8003404:	4a8f      	ldr	r2, [pc, #572]	@ (8003644 <VibeCheck_Loop+0x28c>)
 8003406:	4990      	ldr	r1, [pc, #576]	@ (8003648 <VibeCheck_Loop+0x290>)
 8003408:	f000 fb46 	bl	8003a98 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4b8b      	ldr	r3, [pc, #556]	@ (800363c <VibeCheck_Loop+0x284>)
 8003410:	4413      	add	r3, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb57 	bl	8003ac6 <VibeCheckRGB_StartTopSequence>
 8003418:	e013      	b.n	8003442 <VibeCheck_Loop+0x8a>
	}
	else if (shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_NO_HANDLER || shell_status.ihandl_status == VC_SHELL_INPUT_ERROR_EXECUTING)
 800341a:	7f3b      	ldrb	r3, [r7, #28]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d002      	beq.n	8003426 <VibeCheck_Loop+0x6e>
 8003420:	7f3b      	ldrb	r3, [r7, #28]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d10d      	bne.n	8003442 <VibeCheck_Loop+0x8a>
	{
		VibeCheckRGB_SetTopSequence(&vc->rgb, led_shell_failure_times, led_shell_failure_colors, led_shell_failure_len);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4884      	ldr	r0, [pc, #528]	@ (800363c <VibeCheck_Loop+0x284>)
 800342a:	4418      	add	r0, r3
 800342c:	2304      	movs	r3, #4
 800342e:	4a87      	ldr	r2, [pc, #540]	@ (800364c <VibeCheck_Loop+0x294>)
 8003430:	4987      	ldr	r1, [pc, #540]	@ (8003650 <VibeCheck_Loop+0x298>)
 8003432:	f000 fb31 	bl	8003a98 <VibeCheckRGB_SetTopSequence>
		VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4b80      	ldr	r3, [pc, #512]	@ (800363c <VibeCheck_Loop+0x284>)
 800343a:	4413      	add	r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fb42 	bl	8003ac6 <VibeCheckRGB_StartTopSequence>


	/* send over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f107 0214 	add.w	r2, r7, #20
 8003448:	f107 0118 	add.w	r1, r7, #24
 800344c:	4618      	mov	r0, r3
 800344e:	f002 fa85 	bl	800595c <VibeCheckShell_GetOutput>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00f      	beq.n	8003478 <VibeCheck_Loop+0xc0>
		 * The only real issue is what to do when a data packet wraps the shell output buffer - we need to send this
		 * with a single call to CDC_Transmit_HS but the memory is not contiguous. We fixed this by having the shell
		 * output buffer wrap before getting the next packet so that each packet is continuous in memory
		 */

		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	b292      	uxth	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f014 fe39 	bl	80180d8 <CDC_Transmit_HS>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <VibeCheck_Loop+0xc0>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fac7 	bl	8005a06 <VibeCheckShell_UpdateOutputBuffer>
	}


	/* visualize the acceleration with the RGB LEDs */
	/* TODO: turn off the LEDs when done measuring */
	if (time - time_prev_led_update > 30)
 8003478:	4b76      	ldr	r3, [pc, #472]	@ (8003654 <VibeCheck_Loop+0x29c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b1e      	cmp	r3, #30
 8003482:	f240 81b3 	bls.w	80037ec <VibeCheck_Loop+0x434>
	{
		time_prev_led_update = time;
 8003486:	4a73      	ldr	r2, [pc, #460]	@ (8003654 <VibeCheck_Loop+0x29c>)
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	6013      	str	r3, [r2, #0]

		if (!vc->rgb.top_sequence.is_running)  /* let the top sequence have precedence over the visualization */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8003492:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	@ 0xa0c
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 81a8 	bne.w	80037ec <VibeCheck_Loop+0x434>
		{
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a0:	e1a0      	b.n	80037e4 <VibeCheck_Loop+0x42c>
			{
				if (vc->sensor.status[i].is_connected)
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	18ca      	adds	r2, r1, r3
 80034b0:	4b69      	ldr	r3, [pc, #420]	@ (8003658 <VibeCheck_Loop+0x2a0>)
 80034b2:	4413      	add	r3, r2
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8191 	beq.w	80037de <VibeCheck_Loop+0x426>
				{
					if (vc->sensor.status[i].accel_measuring)
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	18ca      	adds	r2, r1, r3
 80034ca:	4b64      	ldr	r3, [pc, #400]	@ (800365c <VibeCheck_Loop+0x2a4>)
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80cd 	beq.w	8003670 <VibeCheck_Loop+0x2b8>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4858      	ldr	r0, [pc, #352]	@ (800363c <VibeCheck_Loop+0x284>)
 80034da:	4418      	add	r0, r3
 80034dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	189c      	adds	r4, r3, r2
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	18ca      	adds	r2, r1, r3
 80034f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003660 <VibeCheck_Loop+0x2a8>)
 80034f4:	4413      	add	r3, r2
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eef0 7ae7 	vabs.f32	s15, s15
 80034fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003502:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8003630 <VibeCheck_Loop+0x278>
 8003506:	ee27 5b06 	vmul.f64	d5, d7, d6
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	18ca      	adds	r2, r1, r3
 8003518:	4b52      	ldr	r3, [pc, #328]	@ (8003664 <VibeCheck_Loop+0x2ac>)
 800351a:	4413      	add	r3, r2
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003526:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800352a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800352e:	edc7 7a00 	vstr	s15, [r7]
 8003532:	783b      	ldrb	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2300      	movs	r3, #0
 800353c:	4621      	mov	r1, r4
 800353e:	f000 fae2 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	483d      	ldr	r0, [pc, #244]	@ (800363c <VibeCheck_Loop+0x284>)
 8003546:	4418      	add	r0, r3
 8003548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	1c5c      	adds	r4, r3, #1
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	18ca      	adds	r2, r1, r3
 8003560:	4b41      	ldr	r3, [pc, #260]	@ (8003668 <VibeCheck_Loop+0x2b0>)
 8003562:	4413      	add	r3, r2
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eef0 7ae7 	vabs.f32	s15, s15
 800356c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003570:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8003630 <VibeCheck_Loop+0x278>
 8003574:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	18ca      	adds	r2, r1, r3
 8003586:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <VibeCheck_Loop+0x2ac>)
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003594:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003598:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800359c:	edc7 7a00 	vstr	s15, [r7]
 80035a0:	783b      	ldrb	r3, [r7, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2200      	movs	r2, #0
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	4621      	mov	r1, r4
 80035ac:	f000 faab 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4822      	ldr	r0, [pc, #136]	@ (800363c <VibeCheck_Loop+0x284>)
 80035b4:	4418      	add	r0, r3
 80035b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	1c9c      	adds	r4, r3, #2
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	18ca      	adds	r2, r1, r3
 80035ce:	4b27      	ldr	r3, [pc, #156]	@ (800366c <VibeCheck_Loop+0x2b4>)
 80035d0:	4413      	add	r3, r2
 80035d2:	edd3 7a00 	vldr	s15, [r3]
 80035d6:	eef0 7ae7 	vabs.f32	s15, s15
 80035da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035de:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8003630 <VibeCheck_Loop+0x278>
 80035e2:	ee27 5b06 	vmul.f64	d5, d7, d6
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	18ca      	adds	r2, r1, r3
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <VibeCheck_Loop+0x2ac>)
 80035f6:	4413      	add	r3, r2
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003602:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003606:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800360a:	edc7 7a00 	vstr	s15, [r7]
 800360e:	783b      	ldrb	r3, [r7, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	2200      	movs	r2, #0
 8003618:	4621      	mov	r1, r4
 800361a:	f000 fa74 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <VibeCheck_Loop+0x284>)
 8003622:	4413      	add	r3, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fae0 	bl	8003bea <VibeCheckRGB_SendColors>
 800362a:	e0d8      	b.n	80037de <VibeCheck_Loop+0x426>
 800362c:	f3af 8000 	nop.w
 8003630:	00000000 	.word	0x00000000
 8003634:	406fe000 	.word	0x406fe000
 8003638:	00011448 	.word	0x00011448
 800363c:	00012494 	.word	0x00012494
 8003640:	00012a14 	.word	0x00012a14
 8003644:	0801dcd0 	.word	0x0801dcd0
 8003648:	0801dcc0 	.word	0x0801dcc0
 800364c:	0801dd4c 	.word	0x0801dd4c
 8003650:	0801dd3c 	.word	0x0801dd3c
 8003654:	24016404 	.word	0x24016404
 8003658:	00012b10 	.word	0x00012b10
 800365c:	00012b14 	.word	0x00012b14
 8003660:	00012a88 	.word	0x00012a88
 8003664:	00012a24 	.word	0x00012a24
 8003668:	00012a8c 	.word	0x00012a8c
 800366c:	00012a90 	.word	0x00012a90
					}
					else if (vc->sensor.status[i].gyro_measuring)
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	18ca      	adds	r2, r1, r3
 800367e:	4b84      	ldr	r3, [pc, #528]	@ (8003890 <VibeCheck_Loop+0x4d8>)
 8003680:	4413      	add	r3, r2
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80aa 	beq.w	80037de <VibeCheck_Loop+0x426>
					{
						/* write the LEDs */
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4881      	ldr	r0, [pc, #516]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 800368e:	4418      	add	r0, r3
 8003690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	189c      	adds	r4, r3, r2
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	18ca      	adds	r2, r1, r3
 80036a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003898 <VibeCheck_Loop+0x4e0>)
 80036a8:	4413      	add	r3, r2
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	eef0 7ae7 	vabs.f32	s15, s15
 80036b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036b6:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8003888 <VibeCheck_Loop+0x4d0>
 80036ba:	ee27 5b06 	vmul.f64	d5, d7, d6
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	18ca      	adds	r2, r1, r3
 80036cc:	4b73      	ldr	r3, [pc, #460]	@ (800389c <VibeCheck_Loop+0x4e4>)
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80036da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036de:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036e2:	edc7 7a00 	vstr	s15, [r7]
 80036e6:	783b      	ldrb	r3, [r7, #0]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	4621      	mov	r1, r4
 80036f2:	f000 fa08 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4866      	ldr	r0, [pc, #408]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 80036fa:	4418      	add	r0, r3
 80036fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	1c5c      	adds	r4, r3, #1
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	18ca      	adds	r2, r1, r3
 8003714:	4b62      	ldr	r3, [pc, #392]	@ (80038a0 <VibeCheck_Loop+0x4e8>)
 8003716:	4413      	add	r3, r2
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	eef0 7ae7 	vabs.f32	s15, s15
 8003720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003724:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8003888 <VibeCheck_Loop+0x4d0>
 8003728:	ee27 5b06 	vmul.f64	d5, d7, d6
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	18ca      	adds	r2, r1, r3
 800373a:	4b58      	ldr	r3, [pc, #352]	@ (800389c <VibeCheck_Loop+0x4e4>)
 800373c:	4413      	add	r3, r2
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003748:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800374c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003750:	edc7 7a00 	vstr	s15, [r7]
 8003754:	783b      	ldrb	r3, [r7, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2200      	movs	r2, #0
 800375a:	9200      	str	r2, [sp, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	4621      	mov	r1, r4
 8003760:	f000 f9d1 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	484b      	ldr	r0, [pc, #300]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 8003768:	4418      	add	r0, r3
 800376a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	1c9c      	adds	r4, r3, #2
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	18ca      	adds	r2, r1, r3
 8003782:	4b48      	ldr	r3, [pc, #288]	@ (80038a4 <VibeCheck_Loop+0x4ec>)
 8003784:	4413      	add	r3, r2
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	eef0 7ae7 	vabs.f32	s15, s15
 800378e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003792:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 8003888 <VibeCheck_Loop+0x4d0>
 8003796:	ee27 5b06 	vmul.f64	d5, d7, d6
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	18ca      	adds	r2, r1, r3
 80037a8:	4b3c      	ldr	r3, [pc, #240]	@ (800389c <VibeCheck_Loop+0x4e4>)
 80037aa:	4413      	add	r3, r2
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80037b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80037ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80037be:	edc7 7a00 	vstr	s15, [r7]
 80037c2:	783b      	ldrb	r3, [r7, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	2200      	movs	r2, #0
 80037cc:	4621      	mov	r1, r4
 80037ce:	f000 f99a 	bl	8003b06 <VibeCheckRGB_SetColor>
						VibeCheckRGB_SendColors(&vc->rgb);
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 80037d6:	4413      	add	r3, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa06 	bl	8003bea <VibeCheckRGB_SendColors>
			for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	3301      	adds	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f67f ae5b 	bls.w	80034a2 <VibeCheck_Loop+0xea>
	/* use RGB LEDs to indicate when sensors are connected or disconnected */

	/* TODO: make these only affect the LEDs corresponding the recently connected sensor (transparency?) */
	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <VibeCheck_Loop+0x4f0>)
 80037f0:	4413      	add	r3, r2
 80037f2:	f107 020c 	add.w	r2, r7, #12
 80037f6:	f107 0110 	add.w	r1, r7, #16
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 f87f 	bl	80048fe <VibeCheckSensor_ConnectionChanged>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d039      	beq.n	800387a <VibeCheck_Loop+0x4c2>
	{
		if (is_connected)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d017      	beq.n	800383c <VibeCheck_Loop+0x484>
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4821      	ldr	r0, [pc, #132]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 8003810:	4418      	add	r0, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4a25      	ldr	r2, [pc, #148]	@ (80038ac <VibeCheck_Loop+0x4f4>)
 8003816:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a24      	ldr	r2, [pc, #144]	@ (80038b0 <VibeCheck_Loop+0x4f8>)
 800381e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4c23      	ldr	r4, [pc, #140]	@ (80038b4 <VibeCheck_Loop+0x4fc>)
 8003826:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800382a:	f000 f935 	bl	8003a98 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 8003832:	4413      	add	r3, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f000 f946 	bl	8003ac6 <VibeCheckRGB_StartTopSequence>
 800383a:	e016      	b.n	800386a <VibeCheck_Loop+0x4b2>
		}
		else
		{
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4815      	ldr	r0, [pc, #84]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 8003840:	4418      	add	r0, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <VibeCheck_Loop+0x500>)
 8003846:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <VibeCheck_Loop+0x504>)
 800384e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4c1a      	ldr	r4, [pc, #104]	@ (80038c0 <VibeCheck_Loop+0x508>)
 8003856:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800385a:	f000 f91d 	bl	8003a98 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <VibeCheck_Loop+0x4dc>)
 8003862:	4413      	add	r3, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f92e 	bl	8003ac6 <VibeCheckRGB_StartTopSequence>
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <VibeCheck_Loop+0x4f0>)
 800386e:	4413      	add	r3, r2
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f874 	bl	8004962 <VibeCheckSensor_ResetConnectionFlag>
	}
}
 800387a:	bf00      	nop
 800387c:	372c      	adds	r7, #44	@ 0x2c
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	bf00      	nop
 8003884:	f3af 8000 	nop.w
 8003888:	00000000 	.word	0x00000000
 800388c:	406fe000 	.word	0x406fe000
 8003890:	00012b18 	.word	0x00012b18
 8003894:	00012494 	.word	0x00012494
 8003898:	00012a94 	.word	0x00012a94
 800389c:	00012a2c 	.word	0x00012a2c
 80038a0:	00012a98 	.word	0x00012a98
 80038a4:	00012a9c 	.word	0x00012a9c
 80038a8:	00012a14 	.word	0x00012a14
 80038ac:	24000008 	.word	0x24000008
 80038b0:	24000014 	.word	0x24000014
 80038b4:	0801e0a0 	.word	0x0801e0a0
 80038b8:	24000020 	.word	0x24000020
 80038bc:	2400002c 	.word	0x2400002c
 80038c0:	0801e0ac 	.word	0x0801e0ac

080038c4 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fc73 	bl	80021c0 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fc6d 	bl	80021c0 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2202      	movs	r2, #2
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2263      	movs	r2, #99	@ 0x63
 80038f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e008      	b.n	8003914 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	3210      	adds	r2, #16
 8003908:	2100      	movs	r1, #0
 800390a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3301      	adds	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 800391a:	d3f2      	bcc.n	8003902 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f94a 	bl	8003bb6 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f961 	bl	8003bea <VibeCheckRGB_SendColors>
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	@ 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003938:	f003 fdc2 	bl	80074c0 <HAL_GetTick>
 800393c:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003944:	f107 0210 	add.w	r2, r7, #16
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fc6a 	bl	8002224 <Sequencer_Update>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e01e      	b.n	800399a <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	441a      	add	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	441a      	add	r2, r3
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	18ca      	adds	r2, r1, r3
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	8811      	ldrh	r1, [r2, #0]
 800397c:	7892      	ldrb	r2, [r2, #2]
 800397e:	8019      	strh	r1, [r3, #0]
 8003980:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003982:	7b3a      	ldrb	r2, [r7, #12]
 8003984:	7b79      	ldrb	r1, [r7, #13]
 8003986:	7bbb      	ldrb	r3, [r7, #14]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	460b      	mov	r3, r1
 800398c:	69f9      	ldr	r1, [r7, #28]
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8b9 	bl	8003b06 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d9dd      	bls.n	800395c <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f922 	bl	8003bea <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 80039a6:	e03c      	b.n	8003a22 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fc9b 	bl	80022ea <Sequencer_IsRunning>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d133      	bne.n	8003a22 <VibeCheckRGB_Update+0xf2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80039c0:	f107 0210 	add.w	r2, r7, #16
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fc2c 	bl	8002224 <Sequencer_Update>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d027      	beq.n	8003a22 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	e01e      	b.n	8003a16 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	441a      	add	r2, r3
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	441a      	add	r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	18ca      	adds	r2, r1, r3
 80039f2:	f107 0308 	add.w	r3, r7, #8
 80039f6:	8811      	ldrh	r1, [r2, #0]
 80039f8:	7892      	ldrb	r2, [r2, #2]
 80039fa:	8019      	strh	r1, [r3, #0]
 80039fc:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80039fe:	7a3a      	ldrb	r2, [r7, #8]
 8003a00:	7a79      	ldrb	r1, [r7, #9]
 8003a02:	7abb      	ldrb	r3, [r7, #10]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	460b      	mov	r3, r1
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f87b 	bl	8003b06 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	3301      	adds	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d9dd      	bls.n	80039d8 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8e4 	bl	8003bea <VibeCheckRGB_SendColors>
}
 8003a22:	bf00      	nop
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003a46:	2301      	movs	r3, #1
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	f7fe fbd4 	bl	80021f8 <Sequencer_SetSequence>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003a66:	f003 fd2b 	bl	80074c0 <HAL_GetTick>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7fe fc1a 	bl	80022a8 <Sequencer_Start>
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fc20 	bl	80022d0 <Sequencer_Stop>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	f7fe fb9d 	bl	80021f8 <Sequencer_SetSequence>
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 8003ad4:	f003 fcf4 	bl	80074c0 <HAL_GetTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4619      	mov	r1, r3
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7fe fbe3 	bl	80022a8 <Sequencer_Start>
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd90      	pop	{r4, r7, pc}

08003aea <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fbe9 	bl	80022d0 <Sequencer_Stop>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	4611      	mov	r1, r2
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	71fb      	strb	r3, [r7, #7]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d901      	bls.n	8003b26 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003b22:	2308      	movs	r3, #8
 8003b24:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	3304      	adds	r3, #4
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	440b      	add	r3, r1
 8003b44:	3305      	adds	r3, #5
 8003b46:	79ba      	ldrb	r2, [r7, #6]
 8003b48:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	440b      	add	r3, r1
 8003b56:	3306      	adds	r3, #6
 8003b58:	7e3a      	ldrb	r2, [r7, #24]
 8003b5a:	701a      	strb	r2, [r3, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d901      	bls.n	8003b7c <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003b78:	2308      	movs	r3, #8
 8003b7a:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	18ca      	adds	r2, r1, r3
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	3204      	adds	r2, #4
 8003b8e:	8811      	ldrh	r1, [r2, #0]
 8003b90:	7892      	ldrb	r2, [r2, #2]
 8003b92:	8019      	strh	r1, [r3, #0]
 8003b94:	709a      	strb	r2, [r3, #2]
 8003b96:	2300      	movs	r3, #0
 8003b98:	7b3a      	ldrb	r2, [r7, #12]
 8003b9a:	f362 0307 	bfi	r3, r2, #0, #8
 8003b9e:	7b7a      	ldrb	r2, [r7, #13]
 8003ba0:	f362 230f 	bfi	r3, r2, #8, #8
 8003ba4:	7bba      	ldrb	r2, [r7, #14]
 8003ba6:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b086      	sub	sp, #24
 8003bba:	af02      	add	r7, sp, #8
 8003bbc:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e00a      	b.n	8003bda <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2200      	movs	r2, #0
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff99 	bl	8003b06 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d9f1      	bls.n	8003bc4 <VibeCheckRGB_SetAllOff+0xe>
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8003bf2:	23e0      	movs	r3, #224	@ 0xe0
 8003bf4:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e06e      	b.n	8003cda <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e01d      	b.n	8003c3e <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3305      	adds	r3, #5
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	fa42 f303 	asr.w	r3, r2, r3
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <VibeCheckRGB_SendColors+0x3e>
 8003c24:	2130      	movs	r1, #48	@ 0x30
 8003c26:	e000      	b.n	8003c2a <VibeCheckRGB_SendColors+0x40>
 8003c28:	2118      	movs	r1, #24
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	61fa      	str	r2, [r7, #28]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	3310      	adds	r3, #16
 8003c34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1de      	bne.n	8003c02 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003c44:	2308      	movs	r3, #8
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e01d      	b.n	8003c86 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	440b      	add	r3, r1
 8003c56:	3304      	adds	r3, #4
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	fa42 f303 	asr.w	r3, r2, r3
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <VibeCheckRGB_SendColors+0x86>
 8003c6c:	2130      	movs	r1, #48	@ 0x30
 8003c6e:	e000      	b.n	8003c72 <VibeCheckRGB_SendColors+0x88>
 8003c70:	2118      	movs	r1, #24
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	61fa      	str	r2, [r7, #28]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	3310      	adds	r3, #16
 8003c7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1de      	bne.n	8003c4a <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003c8c:	2308      	movs	r3, #8
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e01d      	b.n	8003cce <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3306      	adds	r3, #6
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	fa42 f303 	asr.w	r3, r2, r3
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <VibeCheckRGB_SendColors+0xce>
 8003cb4:	2130      	movs	r1, #48	@ 0x30
 8003cb6:	e000      	b.n	8003cba <VibeCheckRGB_SendColors+0xd0>
 8003cb8:	2118      	movs	r1, #24
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1de      	bne.n	8003c92 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61bb      	str	r3, [r7, #24]
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d98d      	bls.n	8003bfc <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f103 0220 	add.w	r2, r3, #32
 8003cea:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f00e f89e 	bl	8011e30 <HAL_TIM_PWM_Start_DMA>
}
 8003cf4:	bf00      	nop
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b09c      	sub	sp, #112	@ 0x70
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	4619      	mov	r1, r3
 8003d12:	6838      	ldr	r0, [r7, #0]
 8003d14:	f001 feba 	bl	8005a8c <VibeCheckShell_GetNextString>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80c2 	beq.w	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d24:	4962      	ldr	r1, [pc, #392]	@ (8003eb0 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc faf2 	bl	8000310 <strcmp>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d141      	bne.n	8003db6 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003d32:	f107 0320 	add.w	r3, r7, #32
 8003d36:	4619      	mov	r1, r3
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f001 ff1f 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80af 	beq.w	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003d46:	f107 031c 	add.w	r3, r7, #28
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f001 ff15 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a5 	beq.w	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 8003d5a:	f107 0318 	add.w	r3, r7, #24
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f001 ff0b 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 809b 	beq.w	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 8003d6e:	f107 0314 	add.w	r3, r7, #20
 8003d72:	4619      	mov	r1, r3
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	f001 ff01 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8091 	beq.w	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	4618      	mov	r0, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	460b      	mov	r3, r1
 8003d96:	4601      	mov	r1, r0
 8003d98:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003d9a:	f7ff feb4 	bl	8003b06 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 8003d9e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003da0:	f7ff ff23 	bl	8003bea <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003da4:	4943      	ldr	r1, [pc, #268]	@ (8003eb4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f001 ff90 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f002 f80d 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e077      	b.n	8003ea6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dba:	493f      	ldr	r1, [pc, #252]	@ (8003eb8 <VibeCheckRGBCMD_Execute+0x1bc>)
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc faa7 	bl	8000310 <strcmp>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d137      	bne.n	8003e38 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f001 fed4 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d064      	beq.n	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003de0:	f7ff fec2 	bl	8003b68 <VibeCheckRGB_GetColor>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	733a      	strb	r2, [r7, #12]
 8003dea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003dee:	737a      	strb	r2, [r7, #13]
 8003df0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003df4:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 8003df6:	492f      	ldr	r1, [pc, #188]	@ (8003eb4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003df8:	6838      	ldr	r0, [r7, #0]
 8003dfa:	f001 ff67 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8003dfe:	6838      	ldr	r0, [r7, #0]
 8003e00:	f001 ffd6 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8003e04:	7b3b      	ldrb	r3, [r7, #12]
 8003e06:	4619      	mov	r1, r3
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f001 ff9b 	bl	8005d44 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	f001 ffce 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8003e14:	7b7b      	ldrb	r3, [r7, #13]
 8003e16:	4619      	mov	r1, r3
 8003e18:	6838      	ldr	r0, [r7, #0]
 8003e1a:	f001 ff93 	bl	8005d44 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8003e1e:	6838      	ldr	r0, [r7, #0]
 8003e20:	f001 ffc6 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	4619      	mov	r1, r3
 8003e28:	6838      	ldr	r0, [r7, #0]
 8003e2a:	f001 ff8b 	bl	8005d44 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f001 ffcc 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e036      	b.n	8003ea6 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e3c:	491f      	ldr	r1, [pc, #124]	@ (8003ebc <VibeCheckRGBCMD_Execute+0x1c0>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fa66 	bl	8000310 <strcmp>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 8003e4a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e4c:	f7ff fe04 	bl	8003a58 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003e50:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e52:	f7ff fe38 	bl	8003ac6 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e56:	4917      	ldr	r1, [pc, #92]	@ (8003eb4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e58:	6838      	ldr	r0, [r7, #0]
 8003e5a:	f001 ff37 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f001 ffb4 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01e      	b.n	8003ea6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e6c:	4914      	ldr	r1, [pc, #80]	@ (8003ec0 <VibeCheckRGBCMD_Execute+0x1c4>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fa4e 	bl	8000310 <strcmp>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d114      	bne.n	8003ea4 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 8003e7a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e7c:	f7ff fdfe 	bl	8003a7c <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003e80:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e82:	f7ff fe32 	bl	8003aea <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003e86:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e88:	f7ff fe95 	bl	8003bb6 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 8003e8c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003e8e:	f7ff feac 	bl	8003bea <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003e92:	4908      	ldr	r1, [pc, #32]	@ (8003eb4 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003e94:	6838      	ldr	r0, [r7, #0]
 8003e96:	f001 ff19 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	f001 ff96 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3768      	adds	r7, #104	@ 0x68
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	0801d840 	.word	0x0801d840
 8003eb4:	0801d844 	.word	0x0801d844
 8003eb8:	0801d848 	.word	0x0801d848
 8003ebc:	0801d84c 	.word	0x0801d84c
 8003ec0:	0801d854 	.word	0x0801d854

08003ec4 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8003ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec6:	b0a1      	sub	sp, #132	@ 0x84
 8003ec8:	af06      	add	r7, sp, #24
 8003eca:	6178      	str	r0, [r7, #20]
 8003ecc:	6139      	str	r1, [r7, #16]
 8003ece:	60fa      	str	r2, [r7, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	6193      	str	r3, [r2, #24]
	sensor->data_ready = 0;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61d3      	str	r3, [r2, #28]
	sensor->time_prev_update = 0;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6213      	str	r3, [r2, #32]
	sensor->generate_fake_data = 0;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003efc:	461a      	mov	r2, r3
 8003efe:	2300      	movs	r3, #0
 8003f00:	6253      	str	r3, [r2, #36]	@ 0x24

	sensor->time_micros = time_micros;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003f08:	461a      	mov	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	6293      	str	r3, [r2, #40]	@ 0x28

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f12:	e04a      	b.n	8003faa <VibeCheckSensor_Init+0xe6>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 8003f28:	6979      	ldr	r1, [r7, #20]
 8003f2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3304      	adds	r3, #4
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003f3e:	6979      	ldr	r1, [r7, #20]
 8003f40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	330c      	adds	r3, #12
 8003f64:	220d      	movs	r2, #13
 8003f66:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3310      	adds	r3, #16
 8003f78:	2202      	movs	r2, #2
 8003f7a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	220d      	movs	r2, #13
 8003f8e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3318      	adds	r3, #24
 8003fa0:	227d      	movs	r2, #125	@ 0x7d
 8003fa2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003faa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d9b1      	bls.n	8003f14 <VibeCheckSensor_Init+0x50>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003fbe:	4a49      	ldr	r2, [pc, #292]	@ (80040e4 <VibeCheckSensor_Init+0x220>)
 8003fc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003fca:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <VibeCheckSensor_Init+0x224>)
 8003fcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd4:	6018      	str	r0, [r3, #0]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003fda:	4a44      	ldr	r2, [pc, #272]	@ (80040ec <VibeCheckSensor_Init+0x228>)
 8003fdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003fe6:	4a42      	ldr	r2, [pc, #264]	@ (80040f0 <VibeCheckSensor_Init+0x22c>)
 8003fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ff0:	6018      	str	r0, [r3, #0]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003ff6:	4a3f      	ldr	r2, [pc, #252]	@ (80040f4 <VibeCheckSensor_Init+0x230>)
 8003ff8:	f107 0320 	add.w	r3, r7, #32
 8003ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8004002:	4a3d      	ldr	r2, [pc, #244]	@ (80040f8 <VibeCheckSensor_Init+0x234>)
 8004004:	f107 0318 	add.w	r3, r7, #24
 8004008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400c:	6018      	str	r0, [r3, #0]
 800400e:	3304      	adds	r3, #4
 8004010:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004012:	2300      	movs	r3, #0
 8004014:	663b      	str	r3, [r7, #96]	@ 0x60
 8004016:	e05c      	b.n	80040d2 <VibeCheckSensor_Init+0x20e>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8004018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800401a:	4613      	mov	r3, r2
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	3350      	adds	r3, #80	@ 0x50
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	1d1d      	adds	r5, r3, #4
 800402a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	18d6      	adds	r6, r2, r3
 8004038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	3360      	adds	r3, #96	@ 0x60
 800403e:	f107 0208 	add.w	r2, r7, #8
 8004042:	4413      	add	r3, r2
 8004044:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8004048:	607b      	str	r3, [r7, #4]
 800404a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	18cb      	adds	r3, r1, r3
 8004058:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800405c:	6039      	str	r1, [r7, #0]
 800405e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	18c3      	adds	r3, r0, r3
 800406c:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8004070:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	18c3      	adds	r3, r0, r3
 800407e:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8004082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	18c3      	adds	r3, r0, r3
 8004090:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8004094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	18e3      	adds	r3, r4, r3
 80040a2:	f853 4c48 	ldr.w	r4, [r3, #-72]
 80040a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	3360      	adds	r3, #96	@ 0x60
 80040ac:	f107 0c08 	add.w	ip, r7, #8
 80040b0:	4463      	add	r3, ip
 80040b2:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	9403      	str	r4, [sp, #12]
 80040ba:	9002      	str	r0, [sp, #8]
 80040bc:	9101      	str	r1, [sp, #4]
 80040be:	9200      	str	r2, [sp, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4631      	mov	r1, r6
 80040c6:	4628      	mov	r0, r5
 80040c8:	f7fc fcf6 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80040cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ce:	3301      	adds	r3, #1
 80040d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d99f      	bls.n	8004018 <VibeCheckSensor_Init+0x154>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	376c      	adds	r7, #108	@ 0x6c
 80040de:	46bd      	mov	sp, r7
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e2:	bf00      	nop
 80040e4:	0801d85c 	.word	0x0801d85c
 80040e8:	0801d868 	.word	0x0801d868
 80040ec:	0801d870 	.word	0x0801d870
 80040f0:	0801d87c 	.word	0x0801d87c
 80040f4:	0801d884 	.word	0x0801d884
 80040f8:	0801d890 	.word	0x0801d890

080040fc <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004104:	f003 f9dc 	bl	80074c0 <HAL_GetTick>
 8004108:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800411a:	f240 8116 	bls.w	800434a <VibeCheckSensor_Update+0x24e>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e0ac      	b.n	800427e <VibeCheckSensor_Update+0x182>
		{
			if (!sensor->status[i].is_connected)
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	33fc      	adds	r3, #252	@ 0xfc
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d134      	bne.n	80041a4 <VibeCheckSensor_Update+0xa8>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	3350      	adds	r3, #80	@ 0x50
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc fcdd 	bl	8000b0c <LSM6DS3_TestCommunication>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 808f 	beq.w	8004278 <VibeCheckSensor_Update+0x17c>
				{
					sensor->status[i].is_connected = 1;
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	33fc      	adds	r3, #252	@ 0xfc
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 800419a:	69f9      	ldr	r1, [r7, #28]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fbfb 	bl	8004998 <VibeCheckSensor_UpdateSensor>
 80041a2:	e069      	b.n	8004278 <VibeCheckSensor_Update+0x17c>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d130      	bne.n	800421e <VibeCheckSensor_Update+0x122>
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d124      	bne.n	800421e <VibeCheckSensor_Update+0x122>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	3350      	adds	r3, #80	@ 0x50
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fc90 	bl	8000b0c <LSM6DS3_TestCommunication>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d142      	bne.n	8004278 <VibeCheckSensor_Update+0x17c>
					{
						sensor->status[i].is_connected = 0;
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	33fc      	adds	r3, #252	@ 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800421c:	e02c      	b.n	8004278 <VibeCheckSensor_Update+0x17c>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <VibeCheckSensor_Update+0x152>
					{
						sensor->status[i].received_data_flag = 0;
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e014      	b.n	8004278 <VibeCheckSensor_Update+0x17c>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	33fc      	adds	r3, #252	@ 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3301      	adds	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f67f af4f 	bls.w	8004124 <VibeCheckSensor_Update+0x28>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d055      	beq.n	800433e <VibeCheckSensor_Update+0x242>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004354 <VibeCheckSensor_Update+0x258>
 80042a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a4:	eeb0 0a67 	vmov.f32	s0, s15
 80042a8:	f018 fc72 	bl	801cb90 <sinf>
 80042ac:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004354 <VibeCheckSensor_Update+0x258>
 80042be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004358 <VibeCheckSensor_Update+0x25c>
 80042c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ca:	eeb0 0a67 	vmov.f32	s0, s15
 80042ce:	f018 fc5f 	bl	801cb90 <sinf>
 80042d2:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004354 <VibeCheckSensor_Update+0x258>
 80042e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e8:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800435c <VibeCheckSensor_Update+0x260>
 80042ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042f0:	eeb0 0a67 	vmov.f32	s0, s15
 80042f4:	f018 fc4c 	bl	801cb90 <sinf>
 80042f8:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 80042fc:	ed97 1a03 	vldr	s2, [r7, #12]
 8004300:	edd7 0a04 	vldr	s1, [r7, #16]
 8004304:	ed97 0a05 	vldr	s0, [r7, #20]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	2101      	movs	r1, #1
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb98 	bl	8004a42 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8004312:	ed97 1a04 	vldr	s2, [r7, #16]
 8004316:	edd7 0a05 	vldr	s1, [r7, #20]
 800431a:	ed97 0a03 	vldr	s0, [r7, #12]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	2102      	movs	r1, #2
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb8d 	bl	8004a42 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8004328:	ed97 1a05 	vldr	s2, [r7, #20]
 800432c:	edd7 0a03 	vldr	s1, [r7, #12]
 8004330:	ed97 0a04 	vldr	s0, [r7, #16]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	2103      	movs	r1, #3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb82 	bl	8004a42 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004344:	461a      	mov	r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6213      	str	r3, [r2, #32]
	}
}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40c90fd0 	.word	0x40c90fd0
 8004358:	3f860a8b 	.word	0x3f860a8b
 800435c:	40060a8b 	.word	0x40060a8b

08004360 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <VibeCheckSensor_StartAccel+0x14>
 8004370:	2302      	movs	r3, #2
 8004372:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	33fc      	adds	r3, #252	@ 0xfc
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d017      	beq.n	80043ba <VibeCheckSensor_StartAccel+0x5a>
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	3350      	adds	r3, #80	@ 0x50
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	3304      	adds	r3, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fc67 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <VibeCheckSensor_StopAccel+0x14>
 80043e8:	2302      	movs	r3, #2
 80043ea:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	33fc      	adds	r3, #252	@ 0xfc
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d017      	beq.n	8004432 <VibeCheckSensor_StopAccel+0x5a>
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	3350      	adds	r3, #80	@ 0x50
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc fd65 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <VibeCheckSensor_StartGyro+0x14>
 8004460:	2302      	movs	r3, #2
 8004462:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	33fc      	adds	r3, #252	@ 0xfc
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d017      	beq.n	80044aa <VibeCheckSensor_StartGyro+0x5a>
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	3350      	adds	r3, #80	@ 0x50
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fc91 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <VibeCheckSensor_StopGyro+0x14>
 80044d8:	2302      	movs	r3, #2
 80044da:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	33fc      	adds	r3, #252	@ 0xfc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d017      	beq.n	8004522 <VibeCheckSensor_StopGyro+0x5a>
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3350      	adds	r3, #80	@ 0x50
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7fc fcfb 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <VibeCheckSensor_SetAccelODR+0x16>
 8004552:	2302      	movs	r3, #2
 8004554:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	210a      	movs	r1, #10
 800455a:	480a      	ldr	r0, [pc, #40]	@ (8004584 <VibeCheckSensor_SetAccelODR+0x44>)
 800455c:	f7fe fd22 	bl	8002fa4 <FindClosest>
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	330c      	adds	r3, #12
 8004570:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fa0f 	bl	8004998 <VibeCheckSensor_UpdateSensor>
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	0801e0b8 	.word	0x0801e0b8

08004588 <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <VibeCheckSensor_SetGyroODR+0x16>
 800459a:	2302      	movs	r3, #2
 800459c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	210a      	movs	r1, #10
 80045a2:	480a      	ldr	r0, [pc, #40]	@ (80045cc <VibeCheckSensor_SetGyroODR+0x44>)
 80045a4:	f7fe fcfe 	bl	8002fa4 <FindClosest>
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3314      	adds	r3, #20
 80045b8:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f9eb 	bl	8004998 <VibeCheckSensor_UpdateSensor>
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	0801e0b8 	.word	0x0801e0b8

080045d0 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <VibeCheckSensor_SetAccelRange+0x16>
 80045e2:	2302      	movs	r3, #2
 80045e4:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	2104      	movs	r1, #4
 80045ea:	480a      	ldr	r0, [pc, #40]	@ (8004614 <VibeCheckSensor_SetAccelRange+0x44>)
 80045ec:	f7fe fcda 	bl	8002fa4 <FindClosest>
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	3310      	adds	r3, #16
 8004600:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f9c7 	bl	8004998 <VibeCheckSensor_UpdateSensor>
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	0801e0e0 	.word	0x0801e0e0

08004618 <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <VibeCheckSensor_SetGyroRange+0x16>
 800462a:	2302      	movs	r3, #2
 800462c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	2105      	movs	r1, #5
 8004632:	480a      	ldr	r0, [pc, #40]	@ (800465c <VibeCheckSensor_SetGyroRange+0x44>)
 8004634:	f7fe fcb6 	bl	8002fa4 <FindClosest>
 8004638:	68f9      	ldr	r1, [r7, #12]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3318      	adds	r3, #24
 8004648:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f9a3 	bl	8004998 <VibeCheckSensor_UpdateSensor>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	0801e0f0 	.word	0x0801e0f0

08004660 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6178      	str	r0, [r7, #20]
 8004668:	6139      	str	r1, [r7, #16]
 800466a:	ed87 0a03 	vstr	s0, [r7, #12]
 800466e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004672:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <VibeCheckSensor_SetOffsets+0x20>
 800467c:	2302      	movs	r3, #2
 800467e:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004680:	edd7 7a03 	vldr	s15, [r7, #12]
 8004684:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004750 <VibeCheckSensor_SetOffsets+0xf0>
 8004688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	dd01      	ble.n	8004696 <VibeCheckSensor_SetOffsets+0x36>
 8004692:	4b30      	ldr	r3, [pc, #192]	@ (8004754 <VibeCheckSensor_SetOffsets+0xf4>)
 8004694:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 8004696:	edd7 7a03 	vldr	s15, [r7, #12]
 800469a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004758 <VibeCheckSensor_SetOffsets+0xf8>
 800469e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	d501      	bpl.n	80046ac <VibeCheckSensor_SetOffsets+0x4c>
 80046a8:	4b2c      	ldr	r3, [pc, #176]	@ (800475c <VibeCheckSensor_SetOffsets+0xfc>)
 80046aa:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 80046ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80046b0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004750 <VibeCheckSensor_SetOffsets+0xf0>
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	dd01      	ble.n	80046c2 <VibeCheckSensor_SetOffsets+0x62>
 80046be:	4b25      	ldr	r3, [pc, #148]	@ (8004754 <VibeCheckSensor_SetOffsets+0xf4>)
 80046c0:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 80046c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046c6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004758 <VibeCheckSensor_SetOffsets+0xf8>
 80046ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d2:	d501      	bpl.n	80046d8 <VibeCheckSensor_SetOffsets+0x78>
 80046d4:	4b21      	ldr	r3, [pc, #132]	@ (800475c <VibeCheckSensor_SetOffsets+0xfc>)
 80046d6:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 80046d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046dc:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004750 <VibeCheckSensor_SetOffsets+0xf0>
 80046e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e8:	dd01      	ble.n	80046ee <VibeCheckSensor_SetOffsets+0x8e>
 80046ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004754 <VibeCheckSensor_SetOffsets+0xf4>)
 80046ec:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 80046ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80046f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004758 <VibeCheckSensor_SetOffsets+0xf8>
 80046f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fe:	d501      	bpl.n	8004704 <VibeCheckSensor_SetOffsets+0xa4>
 8004700:	4b16      	ldr	r3, [pc, #88]	@ (800475c <VibeCheckSensor_SetOffsets+0xfc>)
 8004702:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3304      	adds	r3, #4
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3308      	adds	r3, #8
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f000 f929 	bl	8004998 <VibeCheckSensor_UpdateSensor>
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	3dfe0000 	.word	0x3dfe0000
 8004754:	3dfe0000 	.word	0x3dfe0000
 8004758:	bdfe0000 	.word	0xbdfe0000
 800475c:	bdfe0000 	.word	0xbdfe0000

08004760 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <VibeCheckSensor_GetAccelODR+0x14>
 8004770:	2302      	movs	r3, #2
 8004772:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	330c      	adds	r3, #12
 8004784:	681b      	ldr	r3, [r3, #0]
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <VibeCheckSensor_GetGyroODR+0x14>
 80047a2:	2302      	movs	r3, #2
 80047a4:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	3314      	adds	r3, #20
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <VibeCheckSensor_GetAccelRange+0x14>
 80047d4:	2302      	movs	r3, #2
 80047d6:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3310      	adds	r3, #16
 80047e8:	681b      	ldr	r3, [r3, #0]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <VibeCheckSensor_GetGyroRange+0x14>
 8004806:	2302      	movs	r3, #2
 8004808:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3318      	adds	r3, #24
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <VibeCheckSensor_GetOffsets+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3304      	adds	r3, #4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3308      	adds	r3, #8
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800489a:	461a      	mov	r2, r3
 800489c:	2301      	movs	r3, #1
 800489e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <VibeCheckSensor_IsConnected+0x14>
 80048dc:	2302      	movs	r3, #2
 80048de:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	33fc      	adds	r3, #252	@ 0xfc
 80048f0:	681b      	ldr	r3, [r3, #0]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 80048fe:	b480      	push	{r7}
 8004900:	b087      	sub	sp, #28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e01e      	b.n	800494e <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00f      	beq.n	8004948 <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	33fc      	adds	r3, #252	@ 0xfc
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
			return 1;
 8004944:	2301      	movs	r3, #1
 8004946:	e006      	b.n	8004956 <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3301      	adds	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d9dd      	bls.n	8004910 <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <VibeCheckSensor_ResetConnectionFlag+0x14>
 8004972:	2302      	movs	r3, #2
 8004974:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <VibeCheckSensor_UpdateSensor+0x14>
 80049a8:	2302      	movs	r3, #2
 80049aa:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	33fc      	adds	r3, #252	@ 0xfc
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03b      	beq.n	8004a3a <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	3350      	adds	r3, #80	@ 0x50
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc f8b3 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	3350      	adds	r3, #80	@ 0x50
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fc f93f 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	3350      	adds	r3, #80	@ 0x50
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fc f9c9 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6178      	str	r0, [r7, #20]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	60fa      	str	r2, [r7, #12]
 8004a4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a52:	edc7 0a01 	vstr	s1, [r7, #4]
 8004a56:	ed87 1a00 	vstr	s2, [r7]
 8004a5a:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8004a74:	7cfa      	ldrb	r2, [r7, #19]
 8004a76:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	6979      	ldr	r1, [r7, #20]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	6979      	ldr	r1, [r7, #20]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	3301      	adds	r3, #1
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8004af8:	6193      	str	r3, [r2, #24]
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004b06:	d106      	bne.n	8004b16 <VibeCheckSensor_AddData+0xd4>
	{
		sensor->data_ready = 1;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2301      	movs	r3, #1
 8004b12:	61d3      	str	r3, [r2, #28]
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 8004b14:	e012      	b.n	8004b3c <VibeCheckSensor_AddData+0xfa>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8004b22:	d10b      	bne.n	8004b3c <VibeCheckSensor_AddData+0xfa>
		sensor->data_ind = 0;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	6193      	str	r3, [r2, #24]
		sensor->data_ready = 1;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b36:	461a      	mov	r2, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	61d3      	str	r3, [r2, #28]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01a      	beq.n	8004b94 <VibeCheckSensor_GetDataReady+0x4c>
	{
		sensor->data_ready = 0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b64:	461a      	mov	r2, r3
 8004b66:	2300      	movs	r3, #0
 8004b68:	61d3      	str	r3, [r2, #28]
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004b76:	d206      	bcs.n	8004b86 <VibeCheckSensor_GetDataReady+0x3e>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 8004b7e:	4413      	add	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e004      	b.n	8004b90 <VibeCheckSensor_GetDataReady+0x48>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	601a      	str	r2, [r3, #0]
		}
		return 1;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <VibeCheckSensor_GetDataReady+0x4e>
	}
	return 0;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	@ 0x28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb2:	e0aa      	b.n	8004d0a <VibeCheckSensor_EXTICallback+0x168>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3364      	adds	r3, #100	@ 0x64
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d146      	bne.n	8004c5a <VibeCheckSensor_EXTICallback+0xb8>
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d03a      	beq.n	8004c5a <VibeCheckSensor_EXTICallback+0xb8>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8004be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	3350      	adds	r3, #80	@ 0x50
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	1d18      	adds	r0, r3, #4
 8004bf6:	f107 0318 	add.w	r3, r7, #24
 8004bfa:	f107 021c 	add.w	r2, r7, #28
 8004bfe:	f107 0120 	add.w	r1, r7, #32
 8004c02:	f7fc f997 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	b2d9      	uxtb	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c26:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c2a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004c2e:	eeb0 1a66 	vmov.f32	s2, s13
 8004c32:	eef0 0a47 	vmov.f32	s1, s14
 8004c36:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff00 	bl	8004a42 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004c54:	2201      	movs	r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
			break;
 8004c58:	e05c      	b.n	8004d14 <VibeCheckSensor_EXTICallback+0x172>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	440b      	add	r3, r1
 8004c68:	336c      	adds	r3, #108	@ 0x6c
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	887a      	ldrh	r2, [r7, #2]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d148      	bne.n	8004d04 <VibeCheckSensor_EXTICallback+0x162>
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03c      	beq.n	8004d04 <VibeCheckSensor_EXTICallback+0x162>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3350      	adds	r3, #80	@ 0x50
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	1d18      	adds	r0, r3, #4
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	f107 0210 	add.w	r2, r7, #16
 8004ca4:	f107 0114 	add.w	r1, r7, #20
 8004ca8:	f7fc f9d2 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	b2d9      	uxtb	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8004cd8:	eeb0 1a66 	vmov.f32	s2, s13
 8004cdc:	eef0 0a47 	vmov.f32	s1, s14
 8004ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff feab 	bl	8004a42 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
			break;
 8004d02:	e007      	b.n	8004d14 <VibeCheckSensor_EXTICallback+0x172>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	f67f af51 	bls.w	8004bb4 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b09c      	sub	sp, #112	@ 0x70
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d2c:	2240      	movs	r2, #64	@ 0x40
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f000 feab 	bl	8005a8c <VibeCheckShell_GetNextString>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80eb 	beq.w	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8004d3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d42:	4977      	ldr	r1, [pc, #476]	@ (8004f20 <VibeCheckSensorCMD_Set+0x204>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fae3 	bl	8000310 <strcmp>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d14f      	bne.n	8004df0 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004d50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d54:	2240      	movs	r2, #64	@ 0x40
 8004d56:	4619      	mov	r1, r3
 8004d58:	68b8      	ldr	r0, [r7, #8]
 8004d5a:	f000 fe97 	bl	8005a8c <VibeCheckShell_GetNextString>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80d7 	beq.w	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004d66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d6a:	496e      	ldr	r1, [pc, #440]	@ (8004f24 <VibeCheckSensorCMD_Set+0x208>)
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb facf 	bl	8000310 <strcmp>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d118      	bne.n	8004daa <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68b8      	ldr	r0, [r7, #8]
 8004d80:	f000 fefc 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80c4 	beq.w	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fbd4 	bl	8004540 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004d98:	4963      	ldr	r1, [pc, #396]	@ (8004f28 <VibeCheckSensorCMD_Set+0x20c>)
 8004d9a:	68b8      	ldr	r0, [r7, #8]
 8004d9c:	f000 ff96 	bl	8005ccc <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004da0:	68b8      	ldr	r0, [r7, #8]
 8004da2:	f001 f813 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0b5      	b.n	8004f16 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004daa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dae:	495f      	ldr	r1, [pc, #380]	@ (8004f2c <VibeCheckSensorCMD_Set+0x210>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb faad 	bl	8000310 <strcmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 80ab 	bne.w	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	68b8      	ldr	r0, [r7, #8]
 8004dc6:	f000 fed9 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a1 	beq.w	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff fbf9 	bl	80045d0 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004dde:	4952      	ldr	r1, [pc, #328]	@ (8004f28 <VibeCheckSensorCMD_Set+0x20c>)
 8004de0:	68b8      	ldr	r0, [r7, #8]
 8004de2:	f000 ff73 	bl	8005ccc <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004de6:	68b8      	ldr	r0, [r7, #8]
 8004de8:	f000 fff0 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e092      	b.n	8004f16 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004df0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004df4:	494e      	ldr	r1, [pc, #312]	@ (8004f30 <VibeCheckSensorCMD_Set+0x214>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fa8a 	bl	8000310 <strcmp>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14b      	bne.n	8004e9a <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004e02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e06:	2240      	movs	r2, #64	@ 0x40
 8004e08:	4619      	mov	r1, r3
 8004e0a:	68b8      	ldr	r0, [r7, #8]
 8004e0c:	f000 fe3e 	bl	8005a8c <VibeCheckShell_GetNextString>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d07e      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 8004e16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e1a:	4942      	ldr	r1, [pc, #264]	@ (8004f24 <VibeCheckSensorCMD_Set+0x208>)
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fa77 	bl	8000310 <strcmp>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d117      	bne.n	8004e58 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8004e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f000 fea4 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d06c      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fba1 	bl	8004588 <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e46:	4938      	ldr	r1, [pc, #224]	@ (8004f28 <VibeCheckSensorCMD_Set+0x20c>)
 8004e48:	68b8      	ldr	r0, [r7, #8]
 8004e4a:	f000 ff3f 	bl	8005ccc <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f000 ffbc 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e05e      	b.n	8004f16 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8004e58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e5c:	4933      	ldr	r1, [pc, #204]	@ (8004f2c <VibeCheckSensorCMD_Set+0x210>)
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fb fa56 	bl	8000310 <strcmp>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d154      	bne.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004e6a:	f107 0320 	add.w	r3, r7, #32
 8004e6e:	4619      	mov	r1, r3
 8004e70:	68b8      	ldr	r0, [r7, #8]
 8004e72:	f000 fe83 	bl	8005b7c <VibeCheckShell_GetNextInt>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d04b      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff fbc8 	bl	8004618 <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004e88:	4927      	ldr	r1, [pc, #156]	@ (8004f28 <VibeCheckSensorCMD_Set+0x20c>)
 8004e8a:	68b8      	ldr	r0, [r7, #8]
 8004e8c:	f000 ff1e 	bl	8005ccc <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004e90:	68b8      	ldr	r0, [r7, #8]
 8004e92:	f000 ff9b 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e03d      	b.n	8004f16 <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004e9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e9e:	4925      	ldr	r1, [pc, #148]	@ (8004f34 <VibeCheckSensorCMD_Set+0x218>)
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fa35 	bl	8000310 <strcmp>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d133      	bne.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004eac:	f107 031c 	add.w	r3, r7, #28
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	68b8      	ldr	r0, [r7, #8]
 8004eb4:	f000 fe7e 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d02a      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004ebe:	f107 0318 	add.w	r3, r7, #24
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	68b8      	ldr	r0, [r7, #8]
 8004ec6:	f000 fe75 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d021      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f000 fe6c 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d018      	beq.n	8004f14 <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 8004ee2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ee6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eea:	edd7 6a05 	vldr	s13, [r7, #20]
 8004eee:	eeb0 1a66 	vmov.f32	s2, s13
 8004ef2:	eef0 0a47 	vmov.f32	s1, s14
 8004ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fbaf 	bl	8004660 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 8004f02:	4909      	ldr	r1, [pc, #36]	@ (8004f28 <VibeCheckSensorCMD_Set+0x20c>)
 8004f04:	68b8      	ldr	r0, [r7, #8]
 8004f06:	f000 fee1 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004f0a:	68b8      	ldr	r0, [r7, #8]
 8004f0c:	f000 ff5e 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3770      	adds	r7, #112	@ 0x70
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	0801d898 	.word	0x0801d898
 8004f24:	0801d8a0 	.word	0x0801d8a0
 8004f28:	0801d8a4 	.word	0x0801d8a4
 8004f2c:	0801d8a8 	.word	0x0801d8a8
 8004f30:	0801d8b0 	.word	0x0801d8b0
 8004f34:	0801d8b8 	.word	0x0801d8b8

08004f38 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b09a      	sub	sp, #104	@ 0x68
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f44:	f107 0320 	add.w	r3, r7, #32
 8004f48:	2240      	movs	r2, #64	@ 0x40
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f000 fd9d 	bl	8005a8c <VibeCheckShell_GetNextString>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80fb 	beq.w	8005150 <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 8004f5a:	f107 0320 	add.w	r3, r7, #32
 8004f5e:	497f      	ldr	r1, [pc, #508]	@ (800515c <VibeCheckSensorCMD_Get+0x224>)
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fb f9d5 	bl	8000310 <strcmp>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d147      	bne.n	8004ffc <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004f6c:	f107 0320 	add.w	r3, r7, #32
 8004f70:	2240      	movs	r2, #64	@ 0x40
 8004f72:	4619      	mov	r1, r3
 8004f74:	68b8      	ldr	r0, [r7, #8]
 8004f76:	f000 fd89 	bl	8005a8c <VibeCheckShell_GetNextString>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80e7 	beq.w	8005150 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8004f82:	f107 0320 	add.w	r3, r7, #32
 8004f86:	4976      	ldr	r1, [pc, #472]	@ (8005160 <VibeCheckSensorCMD_Get+0x228>)
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fb f9c1 	bl	8000310 <strcmp>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d114      	bne.n	8004fbe <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004f94:	4973      	ldr	r1, [pc, #460]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 8004f96:	68b8      	ldr	r0, [r7, #8]
 8004f98:	f000 fe98 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004f9c:	68b8      	ldr	r0, [r7, #8]
 8004f9e:	f000 ff07 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fbdb 	bl	8004760 <VibeCheckSensor_GetAccelODR>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4619      	mov	r1, r3
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f000 fec8 	bl	8005d44 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004fb4:	68b8      	ldr	r0, [r7, #8]
 8004fb6:	f000 ff09 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e0c9      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8004fbe:	f107 0320 	add.w	r3, r7, #32
 8004fc2:	4969      	ldr	r1, [pc, #420]	@ (8005168 <VibeCheckSensorCMD_Get+0x230>)
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb f9a3 	bl	8000310 <strcmp>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 80bf 	bne.w	8005150 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004fd2:	4964      	ldr	r1, [pc, #400]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fe79 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004fda:	68b8      	ldr	r0, [r7, #8]
 8004fdc:	f000 fee8 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff fbee 	bl	80047c4 <VibeCheckSensor_GetAccelRange>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4619      	mov	r1, r3
 8004fec:	68b8      	ldr	r0, [r7, #8]
 8004fee:	f000 fea9 	bl	8005d44 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f000 feea 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0aa      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004ffc:	f107 0320 	add.w	r3, r7, #32
 8005000:	495a      	ldr	r1, [pc, #360]	@ (800516c <VibeCheckSensorCMD_Get+0x234>)
 8005002:	4618      	mov	r0, r3
 8005004:	f7fb f984 	bl	8000310 <strcmp>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d146      	bne.n	800509c <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800500e:	f107 0320 	add.w	r3, r7, #32
 8005012:	2240      	movs	r2, #64	@ 0x40
 8005014:	4619      	mov	r1, r3
 8005016:	68b8      	ldr	r0, [r7, #8]
 8005018:	f000 fd38 	bl	8005a8c <VibeCheckShell_GetNextString>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8096 	beq.w	8005150 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 8005024:	f107 0320 	add.w	r3, r7, #32
 8005028:	494d      	ldr	r1, [pc, #308]	@ (8005160 <VibeCheckSensorCMD_Get+0x228>)
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb f970 	bl	8000310 <strcmp>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d114      	bne.n	8005060 <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005036:	494b      	ldr	r1, [pc, #300]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 8005038:	68b8      	ldr	r0, [r7, #8]
 800503a:	f000 fe47 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800503e:	68b8      	ldr	r0, [r7, #8]
 8005040:	f000 feb6 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff fba3 	bl	8004792 <VibeCheckSensor_GetGyroODR>
 800504c:	4603      	mov	r3, r0
 800504e:	4619      	mov	r1, r3
 8005050:	68b8      	ldr	r0, [r7, #8]
 8005052:	f000 fe77 	bl	8005d44 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005056:	68b8      	ldr	r0, [r7, #8]
 8005058:	f000 feb8 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800505c:	2301      	movs	r3, #1
 800505e:	e078      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8005060:	f107 0320 	add.w	r3, r7, #32
 8005064:	4940      	ldr	r1, [pc, #256]	@ (8005168 <VibeCheckSensorCMD_Get+0x230>)
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb f952 	bl	8000310 <strcmp>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d16e      	bne.n	8005150 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005072:	493c      	ldr	r1, [pc, #240]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 8005074:	68b8      	ldr	r0, [r7, #8]
 8005076:	f000 fe29 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800507a:	68b8      	ldr	r0, [r7, #8]
 800507c:	f000 fe98 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fbb7 	bl	80047f6 <VibeCheckSensor_GetGyroRange>
 8005088:	4603      	mov	r3, r0
 800508a:	4619      	mov	r1, r3
 800508c:	68b8      	ldr	r0, [r7, #8]
 800508e:	f000 fe59 	bl	8005d44 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005092:	68b8      	ldr	r0, [r7, #8]
 8005094:	f000 fe9a 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005098:	2301      	movs	r3, #1
 800509a:	e05a      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 800509c:	f107 0320 	add.w	r3, r7, #32
 80050a0:	4933      	ldr	r1, [pc, #204]	@ (8005170 <VibeCheckSensorCMD_Get+0x238>)
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb f934 	bl	8000310 <strcmp>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d132      	bne.n	8005114 <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 80050ae:	f107 0118 	add.w	r1, r7, #24
 80050b2:	f107 021c 	add.w	r2, r7, #28
 80050b6:	f107 0314 	add.w	r3, r7, #20
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	460b      	mov	r3, r1
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7ff fbb1 	bl	8004828 <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 80050c6:	4927      	ldr	r1, [pc, #156]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 80050c8:	68b8      	ldr	r0, [r7, #8]
 80050ca:	f000 fdff 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80050ce:	68b8      	ldr	r0, [r7, #8]
 80050d0:	f000 fe6e 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 80050d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80050d8:	eeb0 0a67 	vmov.f32	s0, s15
 80050dc:	68b8      	ldr	r0, [r7, #8]
 80050de:	f000 fe49 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80050e2:	68b8      	ldr	r0, [r7, #8]
 80050e4:	f000 fe64 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 80050e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80050ec:	eeb0 0a67 	vmov.f32	s0, s15
 80050f0:	68b8      	ldr	r0, [r7, #8]
 80050f2:	f000 fe3f 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f000 fe5a 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 80050fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8005100:	eeb0 0a67 	vmov.f32	s0, s15
 8005104:	68b8      	ldr	r0, [r7, #8]
 8005106:	f000 fe35 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800510a:	68b8      	ldr	r0, [r7, #8]
 800510c:	f000 fe5e 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005110:	2301      	movs	r3, #1
 8005112:	e01e      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 8005114:	f107 0320 	add.w	r3, r7, #32
 8005118:	4916      	ldr	r1, [pc, #88]	@ (8005174 <VibeCheckSensorCMD_Get+0x23c>)
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb f8f8 	bl	8000310 <strcmp>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d114      	bne.n	8005150 <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005126:	490f      	ldr	r1, [pc, #60]	@ (8005164 <VibeCheckSensorCMD_Get+0x22c>)
 8005128:	68b8      	ldr	r0, [r7, #8]
 800512a:	f000 fdcf 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800512e:	68b8      	ldr	r0, [r7, #8]
 8005130:	f000 fe3e 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fbc8 	bl	80048cc <VibeCheckSensor_IsConnected>
 800513c:	4603      	mov	r3, r0
 800513e:	4619      	mov	r1, r3
 8005140:	68b8      	ldr	r0, [r7, #8]
 8005142:	f000 fdff 	bl	8005d44 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	f000 fe40 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3760      	adds	r7, #96	@ 0x60
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0801d898 	.word	0x0801d898
 8005160:	0801d8a0 	.word	0x0801d8a0
 8005164:	0801d8a4 	.word	0x0801d8a4
 8005168:	0801d8a8 	.word	0x0801d8a8
 800516c:	0801d8b0 	.word	0x0801d8b0
 8005170:	0801d8b8 	.word	0x0801d8b8
 8005174:	0801d8c0 	.word	0x0801d8c0

08005178 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b094      	sub	sp, #80	@ 0x50
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005186:	f107 030c 	add.w	r3, r7, #12
 800518a:	2240      	movs	r2, #64	@ 0x40
 800518c:	4619      	mov	r1, r3
 800518e:	6838      	ldr	r0, [r7, #0]
 8005190:	f000 fc7c 	bl	8005a8c <VibeCheckShell_GetNextString>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8101 	beq.w	800539e <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4981      	ldr	r1, [pc, #516]	@ (80053a8 <VibeCheckSensorCMD_Execute+0x230>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fb f8b4 	bl	8000310 <strcmp>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d135      	bne.n	800521a <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80051ae:	f107 030c 	add.w	r3, r7, #12
 80051b2:	2240      	movs	r2, #64	@ 0x40
 80051b4:	4619      	mov	r1, r3
 80051b6:	6838      	ldr	r0, [r7, #0]
 80051b8:	f000 fc68 	bl	8005a8c <VibeCheckShell_GetNextString>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80ed 	beq.w	800539e <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 80051c4:	f107 030c 	add.w	r3, r7, #12
 80051c8:	4978      	ldr	r1, [pc, #480]	@ (80053ac <VibeCheckSensorCMD_Execute+0x234>)
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fb f8a0 	bl	8000310 <strcmp>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 80051d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80051d8:	f7ff fb58 	bl	800488c <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 80051dc:	4974      	ldr	r1, [pc, #464]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 80051de:	6838      	ldr	r0, [r7, #0]
 80051e0:	f000 fd74 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80051e4:	6838      	ldr	r0, [r7, #0]
 80051e6:	f000 fdf1 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0d8      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 80051ee:	f107 030c 	add.w	r3, r7, #12
 80051f2:	4970      	ldr	r1, [pc, #448]	@ (80053b4 <VibeCheckSensorCMD_Execute+0x23c>)
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f88b 	bl	8000310 <strcmp>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f040 80ce 	bne.w	800539e <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8005202:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005204:	f7ff fb52 	bl	80048ac <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005208:	4969      	ldr	r1, [pc, #420]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 800520a:	6838      	ldr	r0, [r7, #0]
 800520c:	f000 fd5e 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005210:	6838      	ldr	r0, [r7, #0]
 8005212:	f000 fddb 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005216:	2301      	movs	r3, #1
 8005218:	e0c2      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 800521a:	f107 0208 	add.w	r2, r7, #8
 800521e:	f107 030c 	add.w	r3, r7, #12
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fce1 	bl	8005bec <VibeCheckShell_TurnToInt>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80b6 	beq.w	800539e <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005232:	f107 030c 	add.w	r3, r7, #12
 8005236:	2240      	movs	r2, #64	@ 0x40
 8005238:	4619      	mov	r1, r3
 800523a:	6838      	ldr	r0, [r7, #0]
 800523c:	f000 fc26 	bl	8005a8c <VibeCheckShell_GetNextString>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80ab 	beq.w	800539e <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	4957      	ldr	r1, [pc, #348]	@ (80053ac <VibeCheckSensorCMD_Execute+0x234>)
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb f85e 	bl	8000310 <strcmp>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d138      	bne.n	80052cc <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800525a:	f107 030c 	add.w	r3, r7, #12
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	4619      	mov	r1, r3
 8005262:	6838      	ldr	r0, [r7, #0]
 8005264:	f000 fc12 	bl	8005a8c <VibeCheckShell_GetNextString>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8097 	beq.w	800539e <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8005270:	f107 030c 	add.w	r3, r7, #12
 8005274:	4950      	ldr	r1, [pc, #320]	@ (80053b8 <VibeCheckSensorCMD_Execute+0x240>)
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb f84a 	bl	8000310 <strcmp>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4619      	mov	r1, r3
 8005286:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005288:	f7ff f86a 	bl	8004360 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 800528c:	4948      	ldr	r1, [pc, #288]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 800528e:	6838      	ldr	r0, [r7, #0]
 8005290:	f000 fd1c 	bl	8005ccc <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f000 fd99 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
							return 1;
 800529a:	2301      	movs	r3, #1
 800529c:	e080      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 800529e:	f107 030c 	add.w	r3, r7, #12
 80052a2:	4946      	ldr	r1, [pc, #280]	@ (80053bc <VibeCheckSensorCMD_Execute+0x244>)
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb f833 	bl	8000310 <strcmp>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d176      	bne.n	800539e <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80052b6:	f7ff f8cb 	bl	8004450 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 80052ba:	493d      	ldr	r1, [pc, #244]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 80052bc:	6838      	ldr	r0, [r7, #0]
 80052be:	f000 fd05 	bl	8005ccc <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 80052c2:	6838      	ldr	r0, [r7, #0]
 80052c4:	f000 fd82 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
							return 1;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e069      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 80052cc:	f107 030c 	add.w	r3, r7, #12
 80052d0:	4938      	ldr	r1, [pc, #224]	@ (80053b4 <VibeCheckSensorCMD_Execute+0x23c>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f81c 	bl	8000310 <strcmp>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d137      	bne.n	800534e <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	2240      	movs	r2, #64	@ 0x40
 80052e4:	4619      	mov	r1, r3
 80052e6:	6838      	ldr	r0, [r7, #0]
 80052e8:	f000 fbd0 	bl	8005a8c <VibeCheckShell_GetNextString>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d055      	beq.n	800539e <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 80052f2:	f107 030c 	add.w	r3, r7, #12
 80052f6:	4930      	ldr	r1, [pc, #192]	@ (80053b8 <VibeCheckSensorCMD_Execute+0x240>)
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7fb f809 	bl	8000310 <strcmp>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4619      	mov	r1, r3
 8005308:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800530a:	f7ff f865 	bl	80043d8 <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 800530e:	4928      	ldr	r1, [pc, #160]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 8005310:	6838      	ldr	r0, [r7, #0]
 8005312:	f000 fcdb 	bl	8005ccc <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f000 fd58 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
							return 1;
 800531c:	2301      	movs	r3, #1
 800531e:	e03f      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	4925      	ldr	r1, [pc, #148]	@ (80053bc <VibeCheckSensorCMD_Execute+0x244>)
 8005326:	4618      	mov	r0, r3
 8005328:	f7fa fff2 	bl	8000310 <strcmp>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d135      	bne.n	800539e <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4619      	mov	r1, r3
 8005336:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005338:	f7ff f8c6 	bl	80044c8 <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 800533c:	491c      	ldr	r1, [pc, #112]	@ (80053b0 <VibeCheckSensorCMD_Execute+0x238>)
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f000 fcc4 	bl	8005ccc <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005344:	6838      	ldr	r0, [r7, #0]
 8005346:	f000 fd41 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
							return 1;
 800534a:	2301      	movs	r3, #1
 800534c:	e028      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 800534e:	f107 030c 	add.w	r3, r7, #12
 8005352:	491b      	ldr	r1, [pc, #108]	@ (80053c0 <VibeCheckSensorCMD_Execute+0x248>)
 8005354:	4618      	mov	r0, r3
 8005356:	f7fa ffdb 	bl	8000310 <strcmp>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	461a      	mov	r2, r3
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005368:	f7ff fcd8 	bl	8004d1c <VibeCheckSensorCMD_Set>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d015      	beq.n	800539e <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8005372:	2301      	movs	r3, #1
 8005374:	e014      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 8005376:	f107 030c 	add.w	r3, r7, #12
 800537a:	4912      	ldr	r1, [pc, #72]	@ (80053c4 <VibeCheckSensorCMD_Execute+0x24c>)
 800537c:	4618      	mov	r0, r3
 800537e:	f7fa ffc7 	bl	8000310 <strcmp>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	461a      	mov	r2, r3
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005390:	f7ff fdd2 	bl	8004f38 <VibeCheckSensorCMD_Get>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3750      	adds	r7, #80	@ 0x50
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	0801d8cc 	.word	0x0801d8cc
 80053ac:	0801d8d8 	.word	0x0801d8d8
 80053b0:	0801d8a4 	.word	0x0801d8a4
 80053b4:	0801d8e0 	.word	0x0801d8e0
 80053b8:	0801d898 	.word	0x0801d898
 80053bc:	0801d8b0 	.word	0x0801d8b0
 80053c0:	0801d8e8 	.word	0x0801d8e8
 80053c4:	0801d8ec 	.word	0x0801d8ec

080053c8 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 80053d6:	f107 030c 	add.w	r3, r7, #12
 80053da:	4619      	mov	r1, r3
 80053dc:	6938      	ldr	r0, [r7, #16]
 80053de:	f7ff fbb3 	bl	8004b48 <VibeCheckSensor_GetDataReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d051      	beq.n	800548c <VibeCheckSensorSender_Data_Execute+0xc4>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 80053e8:	492b      	ldr	r1, [pc, #172]	@ (8005498 <VibeCheckSensorSender_Data_Execute+0xd0>)
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f000 fc6e 	bl	8005ccc <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80053f0:	6838      	ldr	r0, [r7, #0]
 80053f2:	f000 fcdd 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 80053f6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80053fa:	6838      	ldr	r0, [r7, #0]
 80053fc:	f000 fca2 	bl	8005d44 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]

		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8005404:	e039      	b.n	800547a <VibeCheckSensorSender_Data_Execute+0xb2>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8005406:	6838      	ldr	r0, [r7, #0]
 8005408:	f000 fcd2 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	4619      	mov	r1, r3
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f000 fc95 	bl	8005d44 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 800541a:	6838      	ldr	r0, [r7, #0]
 800541c:	f000 fcc8 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4619      	mov	r1, r3
 8005426:	6838      	ldr	r0, [r7, #0]
 8005428:	f000 fc8c 	bl	8005d44 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 800542c:	6838      	ldr	r0, [r7, #0]
 800542e:	f000 fcbf 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	edd3 7a02 	vldr	s15, [r3, #8]
 8005438:	eeb0 0a67 	vmov.f32	s0, s15
 800543c:	6838      	ldr	r0, [r7, #0]
 800543e:	f000 fc99 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005442:	6838      	ldr	r0, [r7, #0]
 8005444:	f000 fcb4 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	edd3 7a03 	vldr	s15, [r3, #12]
 800544e:	eeb0 0a67 	vmov.f32	s0, s15
 8005452:	6838      	ldr	r0, [r7, #0]
 8005454:	f000 fc8e 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005458:	6838      	ldr	r0, [r7, #0]
 800545a:	f000 fca9 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	edd3 7a04 	vldr	s15, [r3, #16]
 8005464:	eeb0 0a67 	vmov.f32	s0, s15
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	f000 fc83 	bl	8005d74 <VibeCheckShell_PutOutputFloat>


			data++;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3314      	adds	r3, #20
 8005472:	60fb      	str	r3, [r7, #12]
			data_written++;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3301      	adds	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005480:	d3c1      	bcc.n	8005406 <VibeCheckSensorSender_Data_Execute+0x3e>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8005482:	6838      	ldr	r0, [r7, #0]
 8005484:	f000 fca2 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <VibeCheckSensorSender_Data_Execute+0xc6>
	}

	return 0;
 800548c:	2300      	movs	r3, #0

}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	0801d8f0 	.word	0x0801d8f0

0800549c <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 80054aa:	f107 020c 	add.w	r2, r7, #12
 80054ae:	f107 0310 	add.w	r3, r7, #16
 80054b2:	4619      	mov	r1, r3
 80054b4:	6978      	ldr	r0, [r7, #20]
 80054b6:	f7ff fa22 	bl	80048fe <VibeCheckSensor_ConnectionChanged>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d026      	beq.n	800550e <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 80054c0:	4915      	ldr	r1, [pc, #84]	@ (8005518 <VibeCheckSensorSender_Status_Execute+0x7c>)
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	f000 fc02 	bl	8005ccc <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f000 fc71 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 80054ce:	4913      	ldr	r1, [pc, #76]	@ (800551c <VibeCheckSensorSender_Status_Execute+0x80>)
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f000 fbfb 	bl	8005ccc <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 80054d6:	6838      	ldr	r0, [r7, #0]
 80054d8:	f000 fc6a 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4619      	mov	r1, r3
 80054e0:	6838      	ldr	r0, [r7, #0]
 80054e2:	f000 fc2f 	bl	8005d44 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 80054e6:	6838      	ldr	r0, [r7, #0]
 80054e8:	f000 fc62 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 80054f2:	490b      	ldr	r1, [pc, #44]	@ (8005520 <VibeCheckSensorSender_Status_Execute+0x84>)
 80054f4:	6838      	ldr	r0, [r7, #0]
 80054f6:	f000 fbe9 	bl	8005ccc <VibeCheckShell_PutOutputString>
 80054fa:	e003      	b.n	8005504 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 80054fc:	4909      	ldr	r1, [pc, #36]	@ (8005524 <VibeCheckSensorSender_Status_Execute+0x88>)
 80054fe:	6838      	ldr	r0, [r7, #0]
 8005500:	f000 fbe4 	bl	8005ccc <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005504:	6838      	ldr	r0, [r7, #0]
 8005506:	f000 fc61 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
		return 1;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	0801d8f8 	.word	0x0801d8f8
 800551c:	0801d900 	.word	0x0801d900
 8005520:	0801d8c0 	.word	0x0801d8c0
 8005524:	0801d908 	.word	0x0801d908

08005528 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005536:	461a      	mov	r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005542:	461a      	mov	r2, r3
 8005544:	2300      	movs	r3, #0
 8005546:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800554e:	461a      	mov	r2, r3
 8005550:	2300      	movs	r3, #0
 8005552:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6153      	str	r3, [r2, #20]
	shell->output_end = 0;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	6193      	str	r3, [r2, #24]
	shell->output_count = 0;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800558a:	461a      	mov	r2, r3
 800558c:	2300      	movs	r3, #0
 800558e:	61d3      	str	r3, [r2, #28]

	shell->ih_count = 0;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	shell->oh_count = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 80055b8:	b590      	push	{r4, r7, lr}
 80055ba:	b099      	sub	sp, #100	@ 0x64
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 80055c0:	2300      	movs	r3, #0
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d0:	d302      	bcc.n	80055d8 <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8099 	beq.w	8005718 <VibeCheckShell_Update+0x160>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 80055ec:	e094      	b.n	8005718 <VibeCheckShell_Update+0x160>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 80055ee:	f107 030c 	add.w	r3, r7, #12
 80055f2:	2240      	movs	r2, #64	@ 0x40
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fa48 	bl	8005a8c <VibeCheckShell_GetNextString>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d04a      	beq.n	8005698 <VibeCheckShell_Update+0xe0>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005606:	e03e      	b.n	8005686 <VibeCheckShell_Update+0xce>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005608:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800560a:	4613      	mov	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4a74      	ldr	r2, [pc, #464]	@ (80057e4 <VibeCheckShell_Update+0x22c>)
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	f107 020c 	add.w	r2, r7, #12
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f7fa fe75 	bl	8000310 <strcmp>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d11d      	bne.n	8005668 <VibeCheckShell_Update+0xb0>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	18ca      	adds	r2, r1, r3
 800563a:	4b6b      	ldr	r3, [pc, #428]	@ (80057e8 <VibeCheckShell_Update+0x230>)
 800563c:	4413      	add	r3, r2
 800563e:	681c      	ldr	r4, [r3, #0]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	18ca      	adds	r2, r1, r3
 800564e:	4b67      	ldr	r3, [pc, #412]	@ (80057ec <VibeCheckShell_Update+0x234>)
 8005650:	4413      	add	r3, r2
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	47a0      	blx	r4
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d11f      	bne.n	80056a0 <VibeCheckShell_Update+0xe8>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8005660:	2303      	movs	r3, #3
 8005662:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8005666:	e01b      	b.n	80056a0 <VibeCheckShell_Update+0xe8>
				}

				if (i == shell->ih_count - 1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800566e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005672:	3b01      	subs	r3, #1
 8005674:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005676:	429a      	cmp	r2, r3
 8005678:	d102      	bne.n	8005680 <VibeCheckShell_Update+0xc8>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 800567a:	2302      	movs	r3, #2
 800567c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005680:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005682:	3301      	adds	r3, #1
 8005684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800568c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005690:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005692:	429a      	cmp	r2, r3
 8005694:	d3b8      	bcc.n	8005608 <VibeCheckShell_Update+0x50>
 8005696:	e004      	b.n	80056a2 <VibeCheckShell_Update+0xea>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005698:	2302      	movs	r3, #2
 800569a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800569e:	e000      	b.n	80056a2 <VibeCheckShell_Update+0xea>
					break;
 80056a0:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056c2:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	3301      	adds	r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80056d4:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e2:	d105      	bne.n	80056f0 <VibeCheckShell_Update+0x138>
				shell->input_tail = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 80056f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056f4:	4619      	mov	r1, r3
 80056f6:	483e      	ldr	r0, [pc, #248]	@ (80057f0 <VibeCheckShell_Update+0x238>)
 80056f8:	f014 fcef 	bl	801a0da <strchr>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d100      	bne.n	8005704 <VibeCheckShell_Update+0x14c>
		{
 8005702:	e7ce      	b.n	80056a2 <VibeCheckShell_Update+0xea>
				break;  /* found the delimiter */
 8005704:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	3b01      	subs	r3, #1
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005716:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f47f af64 	bne.w	80055ee <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005726:	2300      	movs	r3, #0
 8005728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800572a:	e032      	b.n	8005792 <VibeCheckShell_Update+0x1da>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005730:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005734:	440b      	add	r3, r1
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005740:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005744:	4403      	add	r3, r0
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4618      	mov	r0, r3
 8005750:	4790      	blx	r2
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <VibeCheckShell_Update+0x1d4>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			/* wrap the output buffer if necessary so that an output packet doesn't get split up */
			if (VC_SHELL_IO_BUF_LEN - shell->output_head < VC_SHELL_MAX_OUTPUT_PACKET_LEN)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576e:	d20d      	bcs.n	800578c <VibeCheckShell_Update+0x1d4>
			{
				shell->output_end = shell->output_head;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800577e:	6193      	str	r3, [r2, #24]
				shell->output_head = 0;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6113      	str	r3, [r2, #16]
	for (uint32_t i = 0; i < shell->oh_count; i++)
 800578c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800578e:	3301      	adds	r3, #1
 8005790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005798:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 800579c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800579e:	429a      	cmp	r2, r3
 80057a0:	d3c4      	bcc.n	800572c <VibeCheckShell_Update+0x174>
			}
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ae:	d302      	bcc.n	80057b6 <VibeCheckShell_Update+0x1fe>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80057b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ba:	2300      	movs	r3, #0
 80057bc:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80057c0:	f362 0307 	bfi	r3, r2, #0, #8
 80057c4:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80057c8:	f362 230f 	bfi	r3, r2, #8, #8
 80057cc:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80057d0:	f362 4317 	bfi	r3, r2, #16, #8
 80057d4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80057d8:	f362 631f 	bfi	r3, r2, #24, #8
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3764      	adds	r7, #100	@ 0x64
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd90      	pop	{r4, r7, pc}
 80057e4:	00010020 	.word	0x00010020
 80057e8:	00010060 	.word	0x00010060
 80057ec:	00010064 	.word	0x00010064
 80057f0:	0801d918 	.word	0x0801d918

080057f4 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 0014 	add.w	r0, r7, #20
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800580c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005810:	2b3f      	cmp	r3, #63	@ 0x3f
 8005812:	d819      	bhi.n	8005848 <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800581a:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800581e:	1c53      	adds	r3, r2, #1
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8005826:	f8c1 3220 	str.w	r3, [r1, #544]	@ 0x220
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	18ca      	adds	r2, r1, r3
 8005836:	4b08      	ldr	r3, [pc, #32]	@ (8005858 <VibeCheckShell_RegisterInputHandler+0x64>)
 8005838:	4413      	add	r3, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	2248      	movs	r2, #72	@ 0x48
 8005842:	4619      	mov	r1, r3
 8005844:	f014 fcdf 	bl	801a206 <memcpy>
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005852:	b004      	add	sp, #16
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	00010020 	.word	0x00010020

0800585c <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005870:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8005874:	2b3f      	cmp	r3, #63	@ 0x3f
 8005876:	d816      	bhi.n	80058a6 <VibeCheckShell_RegisterOutputHandler+0x4a>
		shell->output_handlers[shell->oh_count++] = handler;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800587e:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 8005882:	1c53      	adds	r3, r2, #1
 8005884:	68f9      	ldr	r1, [r7, #12]
 8005886:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 800588a:	f8c1 3424 	str.w	r3, [r1, #1060]	@ 0x424
 800588e:	68f9      	ldr	r1, [r7, #12]
 8005890:	f242 2344 	movw	r3, #8772	@ 0x2244
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	3304      	adds	r3, #4
 800589c:	1d3a      	adds	r2, r7, #4
 800589e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a2:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e03e      	b.n	8005944 <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03f      	beq.n	800594e <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80058de:	600a      	str	r2, [r1, #0]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	7811      	ldrb	r1, [r2, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f4:	d105      	bne.n	8005902 <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	3301      	adds	r3, #1
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005912:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	480f      	ldr	r0, [pc, #60]	@ (8005958 <VibeCheckShell_PutInput+0xa4>)
 800591c:	f014 fbdd 	bl	801a0da <strchr>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005936:	60d3      	str	r3, [r2, #12]

			input++;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3301      	adds	r3, #1
 800593c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	429a      	cmp	r2, r3
 800594a:	d3bc      	bcc.n	80058c6 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 800594c:	e000      	b.n	8005950 <VibeCheckShell_PutInput+0x9c>
			break;
 800594e:	bf00      	nop
}
 8005950:	bf00      	nop
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0801d918 	.word	0x0801d918

0800595c <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	uint32_t head = shell->output_head;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	617b      	str	r3, [r7, #20]
	uint32_t tail = shell->output_tail;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	613b      	str	r3, [r7, #16]

	if (head == tail)
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d101      	bne.n	8005988 <VibeCheckShell_GetOutput+0x2c>
		return 0;
 8005984:	2300      	movs	r3, #0
 8005986:	e038      	b.n	80059fa <VibeCheckShell_GetOutput+0x9e>

	if (head > tail)
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d90e      	bls.n	80059ae <VibeCheckShell_GetOutput+0x52>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[tail];
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005996:	4413      	add	r3, r2
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	441a      	add	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	601a      	str	r2, [r3, #0]
		*len = head - tail;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
		return 1;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e025      	b.n	80059fa <VibeCheckShell_GetOutput+0x9e>
	}
	else
	{
		if (shell->output_end)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d011      	beq.n	80059de <VibeCheckShell_GetOutput+0x82>
		{
			/* the output would have wrapped but we caught it - only send up to the delimited end of the output */
			*output = &shell->output[tail];
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	f248 0310 	movw	r3, #32784	@ 0x8010
 80059c0:	4413      	add	r3, r2
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	441a      	add	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	601a      	str	r2, [r3, #0]
			*len = shell->output_end - tail;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
			return 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	e00d      	b.n	80059fa <VibeCheckShell_GetOutput+0x9e>
		}
		else
		{
			/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
			*output = &shell->output[tail];
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	f248 0310 	movw	r3, #32784	@ 0x8010
 80059e4:	4413      	add	r3, r2
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	441a      	add	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	601a      	str	r2, [r3, #0]
			*len = VC_SHELL_IO_BUF_LEN - tail;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
			return 1;
 80059f8:	2301      	movs	r3, #1
		}
	}
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a22:	61d3      	str	r3, [r2, #28]
	shell->output_tail += len;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4413      	add	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a36:	6153      	str	r3, [r2, #20]

	if (shell->output_end)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00c      	beq.n	8005a5e <VibeCheckShell_UpdateOutputBuffer+0x58>
	{
		/* sent a packet which ends in the wrapping boundary region */
		shell->output_end = 0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6153      	str	r3, [r2, #20]
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
	}


}
 8005a5c:	e010      	b.n	8005a80 <VibeCheckShell_UpdateOutputBuffer+0x7a>
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6a:	d309      	bcc.n	8005a80 <VibeCheckShell_UpdateOutputBuffer+0x7a>
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005a7e:	6153      	str	r3, [r2, #20]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e05f      	b.n	8005b5e <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	482f      	ldr	r0, [pc, #188]	@ (8005b70 <VibeCheckShell_GetNextString+0xe4>)
 8005ab2:	f014 fb12 	bl	801a0da <strchr>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
				return 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04d      	b.n	8005b68 <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005acc:	2300      	movs	r3, #0
 8005ace:	e04b      	b.n	8005b68 <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005ae0:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	3301      	adds	r3, #1
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005af2:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b00:	d105      	bne.n	8005b0e <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	4619      	mov	r1, r3
 8005b12:	4818      	ldr	r0, [pc, #96]	@ (8005b74 <VibeCheckShell_GetNextString+0xe8>)
 8005b14:	f014 fae1 	bl	801a0da <strchr>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d01c      	beq.n	8005b5e <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
					return 1;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e01c      	b.n	8005b68 <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	74bb      	strb	r3, [r7, #18]
 8005b32:	7cbb      	ldrb	r3, [r7, #18]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a10      	ldr	r2, [pc, #64]	@ (8005b78 <VibeCheckShell_GetNextString+0xec>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d103      	bne.n	8005b4c <VibeCheckShell_GetNextString+0xc0>
 8005b44:	7cbb      	ldrb	r3, [r7, #18]
 8005b46:	f103 0220 	add.w	r2, r3, #32
 8005b4a:	e000      	b.n	8005b4e <VibeCheckShell_GetNextString+0xc2>
 8005b4c:	7cba      	ldrb	r2, [r7, #18]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	1c59      	adds	r1, r3, #1
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
				i++;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d39b      	bcc.n	8005a9e <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	0801d918 	.word	0x0801d918
 8005b74:	0801d91c 	.word	0x0801d91c
 8005b78:	0801e3c0 	.word	0x0801e3c0

08005b7c <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b092      	sub	sp, #72	@ 0x48
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	2240      	movs	r2, #64	@ 0x40
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ff7c 	bl	8005a8c <VibeCheckShell_GetNextString>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f823 	bl	8005bec <VibeCheckShell_TurnToInt>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	e000      	b.n	8005bac <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3748      	adds	r7, #72	@ 0x48
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b092      	sub	sp, #72	@ 0x48
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005bbe:	f107 0308 	add.w	r3, r7, #8
 8005bc2:	2240      	movs	r2, #64	@ 0x40
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff ff60 	bl	8005a8c <VibeCheckShell_GetNextString>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 8005bd2:	f107 0308 	add.w	r3, r7, #8
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f83d 	bl	8005c58 <VibeCheckShell_TurnToFloat>
 8005bde:	4603      	mov	r3, r0
 8005be0:	e000      	b.n	8005be4 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3748      	adds	r7, #72	@ 0x48
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8005bf6:	4a17      	ldr	r2, [pc, #92]	@ (8005c54 <VibeCheckShell_TurnToInt+0x68>)
 8005bf8:	f107 0308 	add.w	r3, r7, #8
 8005bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e012      	b.n	8005c2e <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f014 fa5e 	bl	801a0da <strchr>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005c24:	2300      	movs	r3, #0
 8005c26:	e010      	b.n	8005c4a <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fa fbce 	bl	80003d0 <strlen>
 8005c34:	4602      	mov	r2, r0
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d3e5      	bcc.n	8005c08 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f012 fea2 	bl	8018986 <atoi>
 8005c42:	4602      	mov	r2, r0
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	601a      	str	r2, [r3, #0]
	return 1;
 8005c48:	2301      	movs	r3, #1
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	0801d920 	.word	0x0801d920

08005c58 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b089      	sub	sp, #36	@ 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 8005c62:	4b19      	ldr	r3, [pc, #100]	@ (8005cc8 <VibeCheckShell_TurnToFloat+0x70>)
 8005c64:	f107 040c 	add.w	r4, r7, #12
 8005c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c6a:	c407      	stmia	r4!, {r0, r1, r2}
 8005c6c:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e012      	b.n	8005c9a <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f107 030c 	add.w	r3, r7, #12
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f014 fa28 	bl	801a0da <strchr>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005c90:	2300      	movs	r3, #0
 8005c92:	e014      	b.n	8005cbe <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fa fb98 	bl	80003d0 <strlen>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d3e5      	bcc.n	8005c74 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f012 fe69 	bl	8018980 <atof>
 8005cae:	eeb0 7b40 	vmov.f64	d7, d0
 8005cb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005cbc:	2301      	movs	r3, #1
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3724      	adds	r7, #36	@ 0x24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	0801d92c 	.word	0x0801d92c

08005ccc <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	while (*str)
 8005cd6:	e029      	b.n	8005d2c <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	1c53      	adds	r3, r2, #1
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	1c59      	adds	r1, r3, #1
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8005cee:	6101      	str	r1, [r0, #16]
 8005cf0:	7811      	ldrb	r1, [r2, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	441a      	add	r2, r3
 8005cf6:	f248 0310 	movw	r3, #32784	@ 0x8010
 8005cfa:	4413      	add	r3, r2
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8005d10:	61d3      	str	r3, [r2, #28]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1e:	d105      	bne.n	8005d2c <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005d26:	461a      	mov	r2, r3
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6113      	str	r3, [r2, #16]
	while (*str)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1d1      	bne.n	8005cd8 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b092      	sub	sp, #72	@ 0x48
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4906      	ldr	r1, [pc, #24]	@ (8005d70 <VibeCheckShell_PutOutputInt+0x2c>)
 8005d56:	4618      	mov	r0, r3
 8005d58:	f014 f954 	bl	801a004 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ffb2 	bl	8005ccc <VibeCheckShell_PutOutputString>
}
 8005d68:	bf00      	nop
 8005d6a:	3748      	adds	r7, #72	@ 0x48
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	0801d93c 	.word	0x0801d93c

08005d74 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b092      	sub	sp, #72	@ 0x48
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%.3f", val);
 8005d80:	edd7 7a00 	vldr	s15, [r7]
 8005d84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d88:	f107 0008 	add.w	r0, r7, #8
 8005d8c:	ec53 2b17 	vmov	r2, r3, d7
 8005d90:	4906      	ldr	r1, [pc, #24]	@ (8005dac <VibeCheckShell_PutOutputFloat+0x38>)
 8005d92:	f014 f937 	bl	801a004 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff95 	bl	8005ccc <VibeCheckShell_PutOutputString>
}
 8005da2:	bf00      	nop
 8005da4:	3748      	adds	r7, #72	@ 0x48
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	0801d940 	.word	0x0801d940

08005db0 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 8005db8:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <VibeCheckShell_PutOutputSeparator+0x18>)
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff86 	bl	8005ccc <VibeCheckShell_PutOutputString>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	0801d948 	.word	0x0801d948

08005dcc <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8005dd4:	4903      	ldr	r1, [pc, #12]	@ (8005de4 <VibeCheckShell_PutOutputDelimiter+0x18>)
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff ff78 	bl	8005ccc <VibeCheckShell_PutOutputString>
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	0801d918 	.word	0x0801d918

08005de8 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005dfe:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005e06:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f640 125f 	movw	r2, #2399	@ 0x95f
 8005e1a:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e22:	eeb0 0a67 	vmov.f32	s0, s15
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f84a 	bl	8005ec0 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e32:	eeb0 0a67 	vmov.f32	s0, s15
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f928 	bl	800608c <VibeCheckStrobe_SetExposure>

}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f00b fd53 	bl	80118fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00b fe35 	bl	8011acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2104      	movs	r1, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f00b fe2f 	bl	8011acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2108      	movs	r1, #8
 8005e74:	4618      	mov	r0, r3
 8005e76:	f00b fe29 	bl	8011acc <HAL_TIM_PWM_Start>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00b fd34 	bl	80118fc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f00b ff32 	bl	8011d04 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2104      	movs	r1, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f00b ff2c 	bl	8011d04 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2108      	movs	r1, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f00b ff26 	bl	8011d04 <HAL_TIM_PWM_Stop>
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005ecc:	edd7 7a00 	vldr	s15, [r7]
 8005ed0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	d502      	bpl.n	8005ee4 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005ede:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ee2:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8005ee4:	edd7 7a00 	vldr	s15, [r7]
 8005ee8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005f54 <VibeCheckStrobe_SetFrequency+0x94>
 8005eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef4:	dd01      	ble.n	8005efa <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 8005ef6:	4b18      	ldr	r3, [pc, #96]	@ (8005f58 <VibeCheckStrobe_SetFrequency+0x98>)
 8005ef8:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 8005efa:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8005f5c <VibeCheckStrobe_SetFrequency+0x9c>
 8005efe:	ed97 7a00 	vldr	s14, [r7]
 8005f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f2e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8005f5c <VibeCheckStrobe_SetFrequency+0x9c>
 8005f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6912      	ldr	r2, [r2, #16]
 8005f46:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	447a0000 	.word	0x447a0000
 8005f58:	447a0000 	.word	0x447a0000
 8005f5c:	47c35000 	.word	0x47c35000

08005f60 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	ee07 3a90 	vmov	s15, r3
}
 8005f70:	eeb0 0a67 	vmov.f32	s0, s15
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005f8c:	edd7 7a00 	vldr	s15, [r7]
 8005f90:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006058 <VibeCheckStrobe_SetPhase+0xd8>
 8005f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9c:	d501      	bpl.n	8005fa2 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800605c <VibeCheckStrobe_SetPhase+0xdc>)
 8005fa0:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8005fa2:	edd7 7a00 	vldr	s15, [r7]
 8005fa6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006060 <VibeCheckStrobe_SetPhase+0xe0>
 8005faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dd01      	ble.n	8005fb8 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006064 <VibeCheckStrobe_SetPhase+0xe4>)
 8005fb6:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8005fbe:	ed97 7a00 	vldr	s14, [r7]
 8005fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fc6:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 8005fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006068 <VibeCheckStrobe_SetPhase+0xe8>
 8005fd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fea:	ee17 3a90 	vmov	r3, s15
 8005fee:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d029      	beq.n	800604a <VibeCheckStrobe_SetPhase+0xca>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d125      	bne.n	800604a <VibeCheckStrobe_SetPhase+0xca>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d121      	bne.n	800604a <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	ed93 7a03 	vldr	s14, [r3, #12]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006022:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006026:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006068 <VibeCheckStrobe_SetPhase+0xe8>
 800602a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800602e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	619a      	str	r2, [r3, #24]
	}
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	c3340000 	.word	0xc3340000
 800605c:	c3340000 	.word	0xc3340000
 8006060:	43340000 	.word	0x43340000
 8006064:	43340000 	.word	0x43340000
 8006068:	43b40000 	.word	0x43b40000

0800606c <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	ee07 3a90 	vmov	s15, r3
}
 800607c:	eeb0 0a67 	vmov.f32	s0, s15
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8006098:	edd7 7a00 	vldr	s15, [r7]
 800609c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006118 <VibeCheckStrobe_SetExposure+0x8c>
 80060a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800611c <VibeCheckStrobe_SetExposure+0x90>
 80060a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b0:	ee17 3a90 	vmov	r3, s15
 80060b4:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d904      	bls.n	80060ce <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060d8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800611c <VibeCheckStrobe_SetExposure+0x90>
 80060dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006120 <VibeCheckStrobe_SetExposure+0x94>
 80060e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	3a83126f 	.word	0x3a83126f
 800611c:	47c35000 	.word	0x47c35000
 8006120:	447a0000 	.word	0x447a0000

08006124 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	ee07 3a90 	vmov	s15, r3
}
 8006134:	eeb0 0a67 	vmov.f32	s0, s15
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6912      	ldr	r2, [r2, #16]
 800615c:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6952      	ldr	r2, [r2, #20]
 8006176:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	619a      	str	r2, [r3, #24]
	}
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b096      	sub	sp, #88	@ 0x58
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800619a:	f107 0318 	add.w	r3, r7, #24
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	4619      	mov	r1, r3
 80061a2:	6838      	ldr	r0, [r7, #0]
 80061a4:	f7ff fc72 	bl	8005a8c <VibeCheckShell_GetNextString>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d065      	beq.n	800627a <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 80061ae:	f107 0318 	add.w	r3, r7, #24
 80061b2:	4934      	ldr	r1, [pc, #208]	@ (8006284 <VibeCheckStrobeCMD_Set+0xf4>)
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fa f8ab 	bl	8000310 <strcmp>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d118      	bne.n	80061f2 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	4619      	mov	r1, r3
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f7ff fcf4 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d053      	beq.n	800627a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 80061d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d6:	eeb0 0a67 	vmov.f32	s0, s15
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fe70 	bl	8005ec0 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80061e0:	4929      	ldr	r1, [pc, #164]	@ (8006288 <VibeCheckStrobeCMD_Set+0xf8>)
 80061e2:	6838      	ldr	r0, [r7, #0]
 80061e4:	f7ff fd72 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80061e8:	6838      	ldr	r0, [r7, #0]
 80061ea:	f7ff fdef 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e044      	b.n	800627c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4925      	ldr	r1, [pc, #148]	@ (800628c <VibeCheckStrobeCMD_Set+0xfc>)
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa f889 	bl	8000310 <strcmp>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d118      	bne.n	8006236 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006204:	f107 0310 	add.w	r3, r7, #16
 8006208:	4619      	mov	r1, r3
 800620a:	6838      	ldr	r0, [r7, #0]
 800620c:	f7ff fcd2 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d031      	beq.n	800627a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8006216:	edd7 7a04 	vldr	s15, [r7, #16]
 800621a:	eeb0 0a67 	vmov.f32	s0, s15
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff feae 	bl	8005f80 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006224:	4918      	ldr	r1, [pc, #96]	@ (8006288 <VibeCheckStrobeCMD_Set+0xf8>)
 8006226:	6838      	ldr	r0, [r7, #0]
 8006228:	f7ff fd50 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800622c:	6838      	ldr	r0, [r7, #0]
 800622e:	f7ff fdcd 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006232:	2301      	movs	r3, #1
 8006234:	e022      	b.n	800627c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8006236:	f107 0318 	add.w	r3, r7, #24
 800623a:	4915      	ldr	r1, [pc, #84]	@ (8006290 <VibeCheckStrobeCMD_Set+0x100>)
 800623c:	4618      	mov	r0, r3
 800623e:	f7fa f867 	bl	8000310 <strcmp>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d118      	bne.n	800627a <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4619      	mov	r1, r3
 800624e:	6838      	ldr	r0, [r7, #0]
 8006250:	f7ff fcb0 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00f      	beq.n	800627a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 800625a:	edd7 7a03 	vldr	s15, [r7, #12]
 800625e:	eeb0 0a67 	vmov.f32	s0, s15
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ff12 	bl	800608c <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006268:	4907      	ldr	r1, [pc, #28]	@ (8006288 <VibeCheckStrobeCMD_Set+0xf8>)
 800626a:	6838      	ldr	r0, [r7, #0]
 800626c:	f7ff fd2e 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f7ff fdab 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3758      	adds	r7, #88	@ 0x58
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	0801d94c 	.word	0x0801d94c
 8006288:	0801d958 	.word	0x0801d958
 800628c:	0801d95c 	.word	0x0801d95c
 8006290:	0801d964 	.word	0x0801d964

08006294 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b092      	sub	sp, #72	@ 0x48
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	2240      	movs	r2, #64	@ 0x40
 80062a4:	4619      	mov	r1, r3
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f7ff fbf0 	bl	8005a8c <VibeCheckShell_GetNextString>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d05c      	beq.n	800636c <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4930      	ldr	r1, [pc, #192]	@ (8006378 <VibeCheckStrobeCMD_Get+0xe4>)
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fa f829 	bl	8000310 <strcmp>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d115      	bne.n	80062f0 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80062c4:	492d      	ldr	r1, [pc, #180]	@ (800637c <VibeCheckStrobeCMD_Get+0xe8>)
 80062c6:	6838      	ldr	r0, [r7, #0]
 80062c8:	f7ff fd00 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80062cc:	6838      	ldr	r0, [r7, #0]
 80062ce:	f7ff fd6f 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fe44 	bl	8005f60 <VibeCheckStrobe_GetFrequency>
 80062d8:	eef0 7a40 	vmov.f32	s15, s0
 80062dc:	eeb0 0a67 	vmov.f32	s0, s15
 80062e0:	6838      	ldr	r0, [r7, #0]
 80062e2:	f7ff fd47 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80062e6:	6838      	ldr	r0, [r7, #0]
 80062e8:	f7ff fd70 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e03e      	b.n	800636e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 80062f0:	f107 0308 	add.w	r3, r7, #8
 80062f4:	4922      	ldr	r1, [pc, #136]	@ (8006380 <VibeCheckStrobeCMD_Get+0xec>)
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fa f80a 	bl	8000310 <strcmp>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d115      	bne.n	800632e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006302:	491e      	ldr	r1, [pc, #120]	@ (800637c <VibeCheckStrobeCMD_Get+0xe8>)
 8006304:	6838      	ldr	r0, [r7, #0]
 8006306:	f7ff fce1 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800630a:	6838      	ldr	r0, [r7, #0]
 800630c:	f7ff fd50 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff feab 	bl	800606c <VibeCheckStrobe_GetPhase>
 8006316:	eef0 7a40 	vmov.f32	s15, s0
 800631a:	eeb0 0a67 	vmov.f32	s0, s15
 800631e:	6838      	ldr	r0, [r7, #0]
 8006320:	f7ff fd28 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006324:	6838      	ldr	r0, [r7, #0]
 8006326:	f7ff fd51 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800632a:	2301      	movs	r3, #1
 800632c:	e01f      	b.n	800636e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4914      	ldr	r1, [pc, #80]	@ (8006384 <VibeCheckStrobeCMD_Get+0xf0>)
 8006334:	4618      	mov	r0, r3
 8006336:	f7f9 ffeb 	bl	8000310 <strcmp>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d115      	bne.n	800636c <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006340:	490e      	ldr	r1, [pc, #56]	@ (800637c <VibeCheckStrobeCMD_Get+0xe8>)
 8006342:	6838      	ldr	r0, [r7, #0]
 8006344:	f7ff fcc2 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006348:	6838      	ldr	r0, [r7, #0]
 800634a:	f7ff fd31 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fee8 	bl	8006124 <VibeCheckStrobe_GetExposure>
 8006354:	eef0 7a40 	vmov.f32	s15, s0
 8006358:	eeb0 0a67 	vmov.f32	s0, s15
 800635c:	6838      	ldr	r0, [r7, #0]
 800635e:	f7ff fd09 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006362:	6838      	ldr	r0, [r7, #0]
 8006364:	f7ff fd32 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3748      	adds	r7, #72	@ 0x48
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	0801d94c 	.word	0x0801d94c
 800637c:	0801d958 	.word	0x0801d958
 8006380:	0801d95c 	.word	0x0801d95c
 8006384:	0801d964 	.word	0x0801d964

08006388 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b094      	sub	sp, #80	@ 0x50
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006396:	f107 030c 	add.w	r3, r7, #12
 800639a:	2240      	movs	r2, #64	@ 0x40
 800639c:	4619      	mov	r1, r3
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f7ff fb74 	bl	8005a8c <VibeCheckShell_GetNextString>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04d      	beq.n	8006446 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 80063aa:	f107 030c 	add.w	r3, r7, #12
 80063ae:	4928      	ldr	r1, [pc, #160]	@ (8006450 <VibeCheckStrobeCMD_Execute+0xc8>)
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7f9 ffad 	bl	8000310 <strcmp>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 80063bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063be:	f7ff fd41 	bl	8005e44 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80063c2:	4924      	ldr	r1, [pc, #144]	@ (8006454 <VibeCheckStrobeCMD_Execute+0xcc>)
 80063c4:	6838      	ldr	r0, [r7, #0]
 80063c6:	f7ff fc81 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80063ca:	6838      	ldr	r0, [r7, #0]
 80063cc:	f7ff fcfe 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e039      	b.n	8006448 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	491f      	ldr	r1, [pc, #124]	@ (8006458 <VibeCheckStrobeCMD_Execute+0xd0>)
 80063da:	4618      	mov	r0, r3
 80063dc:	f7f9 ff98 	bl	8000310 <strcmp>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 80063e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80063e8:	f7ff fd4b 	bl	8005e82 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80063ec:	4919      	ldr	r1, [pc, #100]	@ (8006454 <VibeCheckStrobeCMD_Execute+0xcc>)
 80063ee:	6838      	ldr	r0, [r7, #0]
 80063f0:	f7ff fc6c 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80063f4:	6838      	ldr	r0, [r7, #0]
 80063f6:	f7ff fce9 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e024      	b.n	8006448 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	4916      	ldr	r1, [pc, #88]	@ (800645c <VibeCheckStrobeCMD_Execute+0xd4>)
 8006404:	4618      	mov	r0, r3
 8006406:	f7f9 ff83 	bl	8000310 <strcmp>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006414:	f7ff febc 	bl	8006190 <VibeCheckStrobeCMD_Set>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d013      	beq.n	8006446 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 800641e:	2301      	movs	r3, #1
 8006420:	e012      	b.n	8006448 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8006422:	f107 030c 	add.w	r3, r7, #12
 8006426:	490e      	ldr	r1, [pc, #56]	@ (8006460 <VibeCheckStrobeCMD_Execute+0xd8>)
 8006428:	4618      	mov	r0, r3
 800642a:	f7f9 ff71 	bl	8000310 <strcmp>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d108      	bne.n	8006446 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006438:	f7ff ff2c 	bl	8006294 <VibeCheckStrobeCMD_Get>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3750      	adds	r7, #80	@ 0x50
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	0801d970 	.word	0x0801d970
 8006454:	0801d958 	.word	0x0801d958
 8006458:	0801d978 	.word	0x0801d978
 800645c:	0801d980 	.word	0x0801d980
 8006460:	0801d984 	.word	0x0801d984
 8006464:	00000000 	.word	0x00000000

08006468 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	ed2d 8b02 	vpush	{d8}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e032      	b.n	80064e6 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006480:	edd7 7a01 	vldr	s15, [r7, #4]
 8006484:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006496:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8006508 <ComputeSineWave+0xa0>
 800649a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80064b0:	eeb0 0b47 	vmov.f64	d0, d7
 80064b4:	f016 faf4 	bl	801caa0 <sin>
 80064b8:	eeb0 7b40 	vmov.f64	d7, d0
 80064bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80064c0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80064c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80064c8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8006500 <ComputeSineWave+0x98>
 80064cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1d1a      	adds	r2, r3, #4
 80064d4:	60fa      	str	r2, [r7, #12]
 80064d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80064da:	ee17 2a90 	vmov	r2, s15
 80064de:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3301      	adds	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3c8      	bcc.n	8006480 <ComputeSineWave+0x18>
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	ecbd 8b02 	vpop	{d8}
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	f3af 8000 	nop.w
 8006500:	00000000 	.word	0x00000000
 8006504:	409ffe00 	.word	0x409ffe00
 8006508:	40490fd0 	.word	0x40490fd0

0800650c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e02c      	b.n	800657a <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	429a      	cmp	r2, r3
 8006528:	d212      	bcs.n	8006550 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 800652a:	edd7 7a01 	vldr	s15, [r7, #4]
 800652e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006536:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006590 <ComputeSquareWave+0x84>
 800653a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	60fa      	str	r2, [r7, #12]
 8006544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006548:	ee17 2a90 	vmov	r2, s15
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e011      	b.n	8006574 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8006550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006554:	edd7 7a01 	vldr	s15, [r7, #4]
 8006558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800655c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006590 <ComputeSquareWave+0x84>
 8006560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	60fa      	str	r2, [r7, #12]
 800656a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800656e:	ee17 2a90 	vmov	r2, s15
 8006572:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	3301      	adds	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d3ce      	bcc.n	8006520 <ComputeSquareWave+0x14>
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	44fff000 	.word	0x44fff000

08006594 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e052      	b.n	800664e <ComputeSawWave+0xba>
		if (i < len / 2)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d222      	bcs.n	80065f8 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80065c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065de:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006664 <ComputeSawWave+0xd0>
 80065e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1d1a      	adds	r2, r3, #4
 80065ea:	60fa      	str	r2, [r7, #12]
 80065ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f0:	ee17 2a90 	vmov	r2, s15
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e027      	b.n	8006648 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 80065f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80065fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006616:	edd7 7a01 	vldr	s15, [r7, #4]
 800661a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006628:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800662c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006630:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006664 <ComputeSawWave+0xd0>
 8006634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	1d1a      	adds	r2, r3, #4
 800663c:	60fa      	str	r2, [r7, #12]
 800663e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006642:	ee17 2a90 	vmov	r2, s15
 8006646:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	3301      	adds	r3, #1
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3a8      	bcc.n	80065a8 <ComputeSawWave+0x14>
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	44fff000 	.word	0x44fff000

08006668 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e082      	b.n	8006782 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	089b      	lsrs	r3, r3, #2
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d221      	bcs.n	80066ca <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006692:	edd7 7a01 	vldr	s15, [r7, #4]
 8006696:	ee67 6a27 	vmul.f32	s13, s14, s15
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	ee07 3a90 	vmov	s15, r3
 80066a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066b0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800679c <ComputeTriangleWave+0x134>
 80066b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	60fa      	str	r2, [r7, #12]
 80066be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c2:	ee17 2a90 	vmov	r2, s15
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e058      	b.n	800677c <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4613      	mov	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d227      	bcs.n	800672a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80066da:	edd7 7a01 	vldr	s15, [r7, #4]
 80066de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80066e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80066fa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006708:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800670c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006710:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800679c <ComputeTriangleWave+0x134>
 8006714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	60fa      	str	r2, [r7, #12]
 800671e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006722:	ee17 2a90 	vmov	r2, s15
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e028      	b.n	800677c <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 800672a:	edd7 7a01 	vldr	s15, [r7, #4]
 800672e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800673a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674a:	edd7 7a01 	vldr	s15, [r7, #4]
 800674e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006764:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800679c <ComputeTriangleWave+0x134>
 8006768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	60fa      	str	r2, [r7, #12]
 8006772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006776:	ee17 2a90 	vmov	r2, s15
 800677a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3301      	adds	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	f4ff af78 	bcc.w	800667c <ComputeTriangleWave+0x14>
}
 800678c:	bf00      	nop
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	44fff000 	.word	0x44fff000

080067a0 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e008      	b.n	80067c2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	607a      	str	r2, [r7, #4]
 80067b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80067ba:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3f2      	bcc.n	80067b0 <ComputeNullWave+0x10>
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f4:	7e1b      	ldrb	r3, [r3, #24]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d844      	bhi.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
 80067fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006800 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006811 	.word	0x08006811
 8006804:	0800682b 	.word	0x0800682b
 8006808:	08006845 	.word	0x08006845
 800680c:	0800685f 	.word	0x0800685f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006816:	edd3 7a08 	vldr	s15, [r3, #32]
 800681a:	eeb0 0a67 	vmov.f32	s0, s15
 800681e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f7ff fe20 	bl	8006468 <ComputeSineWave>
			break;
 8006828:	e02c      	b.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006830:	edd3 7a08 	vldr	s15, [r3, #32]
 8006834:	eeb0 0a67 	vmov.f32	s0, s15
 8006838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800683c:	6838      	ldr	r0, [r7, #0]
 800683e:	f7ff fe65 	bl	800650c <ComputeSquareWave>
			break;
 8006842:	e01f      	b.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684a:	edd3 7a08 	vldr	s15, [r3, #32]
 800684e:	eeb0 0a67 	vmov.f32	s0, s15
 8006852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006856:	6838      	ldr	r0, [r7, #0]
 8006858:	f7ff fe9c 	bl	8006594 <ComputeSawWave>
			break;
 800685c:	e012      	b.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006864:	edd3 7a08 	vldr	s15, [r3, #32]
 8006868:	eeb0 0a67 	vmov.f32	s0, s15
 800686c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006870:	6838      	ldr	r0, [r7, #0]
 8006872:	f7ff fef9 	bl	8006668 <ComputeTriangleWave>
			break;
 8006876:	e005      	b.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8006878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800687c:	6838      	ldr	r0, [r7, #0]
 800687e:	f7ff ff8f 	bl	80067a0 <ComputeNullWave>
	}
}
 8006882:	e7ff      	b.n	8006884 <VibeCheckWaveGen_RecomputeWave+0xac>
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b44      	ldr	r3, [pc, #272]	@ (80069c0 <VibeCheckWaveGen_Init+0x134>)
 80068ae:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b6:	461a      	mov	r2, r3
 80068b8:	4b42      	ldr	r3, [pc, #264]	@ (80069c4 <VibeCheckWaveGen_Init+0x138>)
 80068ba:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c2:	2200      	movs	r2, #0
 80068c4:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d8:	461a      	mov	r2, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f0:	461a      	mov	r2, r3
 80068f2:	2300      	movs	r3, #0
 80068f4:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fc:	461a      	mov	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006914:	461a      	mov	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006920:	461a      	mov	r2, r3
 8006922:	2300      	movs	r3, #0
 8006924:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	220b      	movs	r2, #11
 800693a:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006942:	edd3 7a07 	vldr	s15, [r3, #28]
 8006946:	eeb0 0a67 	vmov.f32	s0, s15
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f920 	bl	8006b90 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3308      	adds	r3, #8
 8006954:	4619      	mov	r1, r3
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff3e 	bl	80067d8 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006962:	4619      	mov	r1, r3
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ff37 	bl	80067d8 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6858      	ldr	r0, [r3, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f103 0208 	add.w	r2, r3, #8
 8006974:	2300      	movs	r3, #0
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800697c:	2100      	movs	r1, #0
 800697e:	f002 faed 	bl	8008f5c <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6858      	ldr	r0, [r3, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f103 0208 	add.w	r2, r3, #8
 800698c:	2300      	movs	r3, #0
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006994:	2110      	movs	r1, #16
 8006996:	f002 fae1 	bl	8008f5c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f00a ff2e 	bl	8011800 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2108      	movs	r1, #8
 80069a8:	4807      	ldr	r0, [pc, #28]	@ (80069c8 <VibeCheckWaveGen_Init+0x13c>)
 80069aa:	f005 f801 	bl	800b9b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2102      	movs	r1, #2
 80069b2:	4805      	ldr	r0, [pc, #20]	@ (80069c8 <VibeCheckWaveGen_Init+0x13c>)
 80069b4:	f004 fffc 	bl	800b9b0 <HAL_GPIO_WritePin>
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	43dc0000 	.word	0x43dc0000
 80069c4:	3a83126f 	.word	0x3a83126f
 80069c8:	58020000 	.word	0x58020000

080069cc <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 80069d4:	f000 fd74 	bl	80074c0 <HAL_GetTick>
 80069d8:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2bfa      	cmp	r3, #250	@ 0xfa
 80069e8:	d939      	bls.n	8006a5e <VibeCheckWaveGen_Update+0x92>
 80069ea:	2104      	movs	r1, #4
 80069ec:	4843      	ldr	r0, [pc, #268]	@ (8006afc <VibeCheckWaveGen_Update+0x130>)
 80069ee:	f004 ffc7 	bl	800b980 <HAL_GPIO_ReadPin>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d032      	beq.n	8006a5e <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8006a10:	2200      	movs	r2, #0
 8006a12:	2108      	movs	r1, #8
 8006a14:	4839      	ldr	r0, [pc, #228]	@ (8006afc <VibeCheckWaveGen_Update+0x130>)
 8006a16:	f004 ffcb 	bl	800b9b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2102      	movs	r1, #2
 8006a1e:	4837      	ldr	r0, [pc, #220]	@ (8006afc <VibeCheckWaveGen_Update+0x130>)
 8006a20:	f004 ffc6 	bl	800b9b0 <HAL_GPIO_WritePin>
 8006a24:	e00f      	b.n	8006a46 <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2301      	movs	r3, #1
 8006a30:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8006a32:	2201      	movs	r2, #1
 8006a34:	2108      	movs	r1, #8
 8006a36:	4831      	ldr	r0, [pc, #196]	@ (8006afc <VibeCheckWaveGen_Update+0x130>)
 8006a38:	f004 ffba 	bl	800b9b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	2102      	movs	r1, #2
 8006a40:	482e      	ldr	r0, [pc, #184]	@ (8006afc <VibeCheckWaveGen_Update+0x130>)
 8006a42:	f004 ffb5 	bl	800b9b0 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2301      	movs	r3, #1
 8006a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff feb1 	bl	80067d8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fe9e 	bl	80067d8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006aae:	4413      	add	r3, r2
 8006ab0:	f107 0208 	add.w	r2, r7, #8
 8006ab4:	68f9      	ldr	r1, [r7, #12]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fb fbb4 	bl	8002224 <Sequencer_Update>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d017      	beq.n	8006af2 <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <VibeCheckWaveGen_Update+0x110>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8006b00 <VibeCheckWaveGen_Update+0x134>)
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	edd3 7a00 	vldr	s15, [r3]
 8006ada:	e005      	b.n	8006ae8 <VibeCheckWaveGen_Update+0x11c>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a09      	ldr	r2, [pc, #36]	@ (8006b04 <VibeCheckWaveGen_Update+0x138>)
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	edd3 7a00 	vldr	s15, [r3]
 8006ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f84f 	bl	8006b90 <VibeCheckWaveGen_SetFrequency>
	}

}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	58020000 	.word	0x58020000
 8006b00:	0801e288 	.word	0x0801e288
 8006b04:	0801e16c 	.word	0x0801e16c

08006b08 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d111      	bne.n	8006b40 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b22:	461a      	mov	r2, r3
 8006b24:	2301      	movs	r3, #1
 8006b26:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2301      	movs	r3, #1
 8006b32:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	60d3      	str	r3, [r2, #12]
	}

}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d011      	beq.n	8006b84 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b66:	461a      	mov	r2, r3
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b72:	461a      	mov	r2, r3
 8006b74:	2301      	movs	r3, #1
 8006b76:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2301      	movs	r3, #1
 8006b82:	60d3      	str	r3, [r2, #12]
	}
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 8006b9c:	edd7 7a00 	vldr	s15, [r7]
 8006ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba8:	d502      	bpl.n	8006bb0 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006bb0:	edd7 7a00 	vldr	s15, [r7]
 8006bb4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006c30 <VibeCheckWaveGen_SetFrequency+0xa0>
 8006bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc0:	dd01      	ble.n	8006bc6 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8006bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c34 <VibeCheckWaveGen_SetFrequency+0xa4>)
 8006bc4:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8006bc6:	edd7 7a00 	vldr	s15, [r7]
 8006bca:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006c38 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006bce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bd2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006c3c <VibeCheckWaveGen_SetFrequency+0xac>
 8006bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be6:	ee17 3a90 	vmov	r3, s15
 8006bea:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bfe:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006c3c <VibeCheckWaveGen_SetFrequency+0xac>
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c06:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8006c38 <VibeCheckWaveGen_SetFrequency+0xa8>
 8006c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c14:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	46989600 	.word	0x46989600
 8006c34:	46989600 	.word	0x46989600
 8006c38:	44000000 	.word	0x44000000
 8006c3c:	4b989680 	.word	0x4b989680

08006c40 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	ee07 3a90 	vmov	s15, r3
}
 8006c54:	eeb0 0a67 	vmov.f32	s0, s15
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 8006c6e:	edd7 7a00 	vldr	s15, [r7]
 8006c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7a:	d502      	bpl.n	8006c82 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 8006c82:	edd7 7a00 	vldr	s15, [r7]
 8006c86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	dd02      	ble.n	8006c9a <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8006c94:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006c98:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cac:	461a      	mov	r2, r3
 8006cae:	2301      	movs	r3, #1
 8006cb0:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2301      	movs	r3, #1
 8006cbc:	60d3      	str	r3, [r2, #12]
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	ee07 3a90 	vmov	s15, r3
}
 8006cde:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfe:	461a      	mov	r2, r3
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d16:	461a      	mov	r2, r3
 8006d18:	2301      	movs	r3, #1
 8006d1a:	60d3      	str	r3, [r2, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d36:	7e1b      	ldrb	r3, [r3, #24]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d60:	461a      	mov	r2, r3
 8006d62:	2300      	movs	r3, #0
 8006d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	601a      	str	r2, [r3, #0]
		return 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006daa:	461a      	mov	r2, r3
 8006dac:	2301      	movs	r3, #1
 8006dae:	6113      	str	r3, [r2, #16]
	}
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de2:	461a      	mov	r2, r3
 8006de4:	2301      	movs	r3, #1
 8006de6:	6153      	str	r3, [r2, #20]
	}
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006e02:	4413      	add	r3, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fb f9db 	bl	80021c0 <Sequencer_Init>
	if (wavegen->demo_num)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006e1c:	4418      	add	r0, r3
 8006e1e:	2301      	movs	r3, #1
 8006e20:	221a      	movs	r2, #26
 8006e22:	4916      	ldr	r1, [pc, #88]	@ (8006e7c <VibeCheckWaveGen_StartDemo+0x88>)
 8006e24:	f7fb f9e8 	bl	80021f8 <Sequencer_SetSequence>
 8006e28:	e008      	b.n	8006e3c <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f241 0038 	movw	r0, #4152	@ 0x1038
 8006e30:	4418      	add	r0, r3
 8006e32:	2301      	movs	r3, #1
 8006e34:	222d      	movs	r2, #45	@ 0x2d
 8006e36:	4912      	ldr	r1, [pc, #72]	@ (8006e80 <VibeCheckWaveGen_StartDemo+0x8c>)
 8006e38:	f7fb f9de 	bl	80021f8 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bf0c      	ite	eq
 8006e48:	2301      	moveq	r3, #1
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e56:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f241 0438 	movw	r4, #4152	@ 0x1038
 8006e5e:	441c      	add	r4, r3
 8006e60:	f000 fb2e 	bl	80074c0 <HAL_GetTick>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4619      	mov	r1, r3
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7fb fa1d 	bl	80022a8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fe4a 	bl	8006b08 <VibeCheckWaveGen_Start>
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd90      	pop	{r4, r7, pc}
 8006e7c:	0801e104 	.word	0x0801e104
 8006e80:	0801e1d4 	.word	0x0801e1d4

08006e84 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fe5d 	bl	8006b4c <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006e98:	4413      	add	r3, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fb fa18 	bl	80022d0 <Sequencer_Stop>
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b094      	sub	sp, #80	@ 0x50
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006eb2:	f107 0310 	add.w	r3, r7, #16
 8006eb6:	2240      	movs	r2, #64	@ 0x40
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6838      	ldr	r0, [r7, #0]
 8006ebc:	f7fe fde6 	bl	8005a8c <VibeCheckShell_GetNextString>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 80b0 	beq.w	8007028 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	4959      	ldr	r1, [pc, #356]	@ (8007034 <VibeCheckWaveGenCMD_Set+0x18c>)
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 fa1e 	bl	8000310 <strcmp>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d119      	bne.n	8006f0e <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6838      	ldr	r0, [r7, #0]
 8006ee2:	f7fe fe67 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 809d 	beq.w	8007028 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 8006eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fe4a 	bl	8006b90 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006efc:	494e      	ldr	r1, [pc, #312]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8006efe:	6838      	ldr	r0, [r7, #0]
 8006f00:	f7fe fee4 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006f04:	6838      	ldr	r0, [r7, #0]
 8006f06:	f7fe ff61 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e08d      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8006f0e:	f107 0310 	add.w	r3, r7, #16
 8006f12:	494a      	ldr	r1, [pc, #296]	@ (800703c <VibeCheckWaveGenCMD_Set+0x194>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 f9fb 	bl	8000310 <strcmp>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d118      	bne.n	8006f52 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	4619      	mov	r1, r3
 8006f26:	6838      	ldr	r0, [r7, #0]
 8006f28:	f7fe fe44 	bl	8005bb4 <VibeCheckShell_GetNextFloat>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d07a      	beq.n	8007028 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8006f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f36:	eeb0 0a67 	vmov.f32	s0, s15
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fe91 	bl	8006c62 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006f40:	493d      	ldr	r1, [pc, #244]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f42:	6838      	ldr	r0, [r7, #0]
 8006f44:	f7fe fec2 	bl	8005ccc <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006f48:	6838      	ldr	r0, [r7, #0]
 8006f4a:	f7fe ff3f 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e06b      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8006f52:	f107 0310 	add.w	r3, r7, #16
 8006f56:	493a      	ldr	r1, [pc, #232]	@ (8007040 <VibeCheckWaveGenCMD_Set+0x198>)
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7f9 f9d9 	bl	8000310 <strcmp>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d161      	bne.n	8007028 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006f64:	f107 0310 	add.w	r3, r7, #16
 8006f68:	2240      	movs	r2, #64	@ 0x40
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	f7fe fd8d 	bl	8005a8c <VibeCheckShell_GetNextString>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d057      	beq.n	8007028 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4931      	ldr	r1, [pc, #196]	@ (8007044 <VibeCheckWaveGenCMD_Set+0x19c>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 f9c6 	bl	8000310 <strcmp>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fead 	bl	8006cec <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006f92:	4929      	ldr	r1, [pc, #164]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8006f94:	6838      	ldr	r0, [r7, #0]
 8006f96:	f7fe fe99 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006f9a:	6838      	ldr	r0, [r7, #0]
 8006f9c:	f7fe ff16 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e042      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8006fa4:	f107 0310 	add.w	r3, r7, #16
 8006fa8:	4927      	ldr	r1, [pc, #156]	@ (8007048 <VibeCheckWaveGenCMD_Set+0x1a0>)
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7f9 f9b0 	bl	8000310 <strcmp>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fe97 	bl	8006cec <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fbe:	491e      	ldr	r1, [pc, #120]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fc0:	6838      	ldr	r0, [r7, #0]
 8006fc2:	f7fe fe83 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006fc6:	6838      	ldr	r0, [r7, #0]
 8006fc8:	f7fe ff00 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e02c      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006fd0:	f107 0310 	add.w	r3, r7, #16
 8006fd4:	491d      	ldr	r1, [pc, #116]	@ (800704c <VibeCheckWaveGenCMD_Set+0x1a4>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7f9 f99a 	bl	8000310 <strcmp>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10c      	bne.n	8006ffc <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8006fe2:	2102      	movs	r1, #2
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fe81 	bl	8006cec <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006fea:	4913      	ldr	r1, [pc, #76]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f7fe fe6d 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006ff2:	6838      	ldr	r0, [r7, #0]
 8006ff4:	f7fe feea 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e016      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 8006ffc:	f107 0310 	add.w	r3, r7, #16
 8007000:	4913      	ldr	r1, [pc, #76]	@ (8007050 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 f984 	bl	8000310 <strcmp>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10c      	bne.n	8007028 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 800700e:	2103      	movs	r1, #3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fe6b 	bl	8006cec <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007016:	4908      	ldr	r1, [pc, #32]	@ (8007038 <VibeCheckWaveGenCMD_Set+0x190>)
 8007018:	6838      	ldr	r0, [r7, #0]
 800701a:	f7fe fe57 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800701e:	6838      	ldr	r0, [r7, #0]
 8007020:	f7fe fed4 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3750      	adds	r7, #80	@ 0x50
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	0801d988 	.word	0x0801d988
 8007038:	0801d994 	.word	0x0801d994
 800703c:	0801d998 	.word	0x0801d998
 8007040:	0801d9a4 	.word	0x0801d9a4
 8007044:	0801d9b0 	.word	0x0801d9b0
 8007048:	0801d9b8 	.word	0x0801d9b8
 800704c:	0801d9c0 	.word	0x0801d9c0
 8007050:	0801d9c4 	.word	0x0801d9c4

08007054 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b092      	sub	sp, #72	@ 0x48
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	2240      	movs	r2, #64	@ 0x40
 8007064:	4619      	mov	r1, r3
 8007066:	6838      	ldr	r0, [r7, #0]
 8007068:	f7fe fd10 	bl	8005a8c <VibeCheckShell_GetNextString>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d077      	beq.n	8007162 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8007072:	f107 0308 	add.w	r3, r7, #8
 8007076:	493d      	ldr	r1, [pc, #244]	@ (800716c <VibeCheckWaveGenCMD_Get+0x118>)
 8007078:	4618      	mov	r0, r3
 800707a:	f7f9 f949 	bl	8000310 <strcmp>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d115      	bne.n	80070b0 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007084:	493a      	ldr	r1, [pc, #232]	@ (8007170 <VibeCheckWaveGenCMD_Get+0x11c>)
 8007086:	6838      	ldr	r0, [r7, #0]
 8007088:	f7fe fe20 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800708c:	6838      	ldr	r0, [r7, #0]
 800708e:	f7fe fe8f 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff fdd4 	bl	8006c40 <VibeCheckWaveGen_GetFrequency>
 8007098:	eef0 7a40 	vmov.f32	s15, s0
 800709c:	eeb0 0a67 	vmov.f32	s0, s15
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f7fe fe67 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80070a6:	6838      	ldr	r0, [r7, #0]
 80070a8:	f7fe fe90 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e059      	b.n	8007164 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 80070b0:	f107 0308 	add.w	r3, r7, #8
 80070b4:	492f      	ldr	r1, [pc, #188]	@ (8007174 <VibeCheckWaveGenCMD_Get+0x120>)
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7f9 f92a 	bl	8000310 <strcmp>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d115      	bne.n	80070ee <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80070c2:	492b      	ldr	r1, [pc, #172]	@ (8007170 <VibeCheckWaveGenCMD_Get+0x11c>)
 80070c4:	6838      	ldr	r0, [r7, #0]
 80070c6:	f7fe fe01 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	f7fe fe70 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff fdfa 	bl	8006cca <VibeCheckWaveGen_GetAmplitude>
 80070d6:	eef0 7a40 	vmov.f32	s15, s0
 80070da:	eeb0 0a67 	vmov.f32	s0, s15
 80070de:	6838      	ldr	r0, [r7, #0]
 80070e0:	f7fe fe48 	bl	8005d74 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80070e4:	6838      	ldr	r0, [r7, #0]
 80070e6:	f7fe fe71 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e03a      	b.n	8007164 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4921      	ldr	r1, [pc, #132]	@ (8007178 <VibeCheckWaveGenCMD_Get+0x124>)
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7f9 f90b 	bl	8000310 <strcmp>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d130      	bne.n	8007162 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007100:	491b      	ldr	r1, [pc, #108]	@ (8007170 <VibeCheckWaveGenCMD_Get+0x11c>)
 8007102:	6838      	ldr	r0, [r7, #0]
 8007104:	f7fe fde2 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007108:	6838      	ldr	r0, [r7, #0]
 800710a:	f7fe fe51 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fe0a 	bl	8006d28 <VibeCheckWaveGen_GetWaveform>
 8007114:	4603      	mov	r3, r0
 8007116:	2b03      	cmp	r3, #3
 8007118:	d81e      	bhi.n	8007158 <VibeCheckWaveGenCMD_Get+0x104>
 800711a:	a201      	add	r2, pc, #4	@ (adr r2, 8007120 <VibeCheckWaveGenCMD_Get+0xcc>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007131 	.word	0x08007131
 8007124:	0800713b 	.word	0x0800713b
 8007128:	08007145 	.word	0x08007145
 800712c:	0800714f 	.word	0x0800714f
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8007130:	4912      	ldr	r1, [pc, #72]	@ (800717c <VibeCheckWaveGenCMD_Get+0x128>)
 8007132:	6838      	ldr	r0, [r7, #0]
 8007134:	f7fe fdca 	bl	8005ccc <VibeCheckShell_PutOutputString>
				break;
 8007138:	e00e      	b.n	8007158 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 800713a:	4911      	ldr	r1, [pc, #68]	@ (8007180 <VibeCheckWaveGenCMD_Get+0x12c>)
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	f7fe fdc5 	bl	8005ccc <VibeCheckShell_PutOutputString>
				break;
 8007142:	e009      	b.n	8007158 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8007144:	490f      	ldr	r1, [pc, #60]	@ (8007184 <VibeCheckWaveGenCMD_Get+0x130>)
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	f7fe fdc0 	bl	8005ccc <VibeCheckShell_PutOutputString>
				break;
 800714c:	e004      	b.n	8007158 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 800714e:	490e      	ldr	r1, [pc, #56]	@ (8007188 <VibeCheckWaveGenCMD_Get+0x134>)
 8007150:	6838      	ldr	r0, [r7, #0]
 8007152:	f7fe fdbb 	bl	8005ccc <VibeCheckShell_PutOutputString>
				break;
 8007156:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f7fe fe37 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3748      	adds	r7, #72	@ 0x48
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	0801d988 	.word	0x0801d988
 8007170:	0801d994 	.word	0x0801d994
 8007174:	0801d998 	.word	0x0801d998
 8007178:	0801d9a4 	.word	0x0801d9a4
 800717c:	0801d9b0 	.word	0x0801d9b0
 8007180:	0801d9b8 	.word	0x0801d9b8
 8007184:	0801d9c0 	.word	0x0801d9c0
 8007188:	0801d9c4 	.word	0x0801d9c4

0800718c <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b094      	sub	sp, #80	@ 0x50
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800719a:	f107 030c 	add.w	r3, r7, #12
 800719e:	2240      	movs	r2, #64	@ 0x40
 80071a0:	4619      	mov	r1, r3
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f7fe fc72 	bl	8005a8c <VibeCheckShell_GetNextString>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 808b 	beq.w	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	4946      	ldr	r1, [pc, #280]	@ (80072d0 <VibeCheckWaveGenCMD_Execute+0x144>)
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7f9 f8aa 	bl	8000310 <strcmp>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 80071c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071c4:	f7ff fca0 	bl	8006b08 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 80071c8:	4942      	ldr	r1, [pc, #264]	@ (80072d4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80071ca:	6838      	ldr	r0, [r7, #0]
 80071cc:	f7fe fd7e 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80071d0:	6838      	ldr	r0, [r7, #0]
 80071d2:	f7fe fdfb 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e076      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 80071da:	f107 030c 	add.w	r3, r7, #12
 80071de:	493e      	ldr	r1, [pc, #248]	@ (80072d8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7f9 f895 	bl	8000310 <strcmp>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 80071ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80071ee:	f7ff fcad 	bl	8006b4c <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 80071f2:	4938      	ldr	r1, [pc, #224]	@ (80072d4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f7fe fd69 	bl	8005ccc <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80071fa:	6838      	ldr	r0, [r7, #0]
 80071fc:	f7fe fde6 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007200:	2301      	movs	r3, #1
 8007202:	e061      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8007204:	f107 030c 	add.w	r3, r7, #12
 8007208:	4934      	ldr	r1, [pc, #208]	@ (80072dc <VibeCheckWaveGenCMD_Execute+0x150>)
 800720a:	4618      	mov	r0, r3
 800720c:	f7f9 f880 	bl	8000310 <strcmp>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d108      	bne.n	8007228 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800721a:	f7ff fe45 	bl	8006ea8 <VibeCheckWaveGenCMD_Set>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d050      	beq.n	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007224:	2301      	movs	r3, #1
 8007226:	e04f      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8007228:	f107 030c 	add.w	r3, r7, #12
 800722c:	492c      	ldr	r1, [pc, #176]	@ (80072e0 <VibeCheckWaveGenCMD_Execute+0x154>)
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 f86e 	bl	8000310 <strcmp>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800723e:	f7ff ff09 	bl	8007054 <VibeCheckWaveGenCMD_Get>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d03e      	beq.n	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007248:	2301      	movs	r3, #1
 800724a:	e03d      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	4924      	ldr	r1, [pc, #144]	@ (80072e4 <VibeCheckWaveGenCMD_Execute+0x158>)
 8007252:	4618      	mov	r0, r3
 8007254:	f7f9 f85c 	bl	8000310 <strcmp>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d133      	bne.n	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	2240      	movs	r2, #64	@ 0x40
 8007264:	4619      	mov	r1, r3
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f7fe fc10 	bl	8005a8c <VibeCheckShell_GetNextString>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d029      	beq.n	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	4916      	ldr	r1, [pc, #88]	@ (80072d0 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007278:	4618      	mov	r0, r3
 800727a:	f7f9 f849 	bl	8000310 <strcmp>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8007284:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007286:	f7ff fdb5 	bl	8006df4 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 800728a:	4912      	ldr	r1, [pc, #72]	@ (80072d4 <VibeCheckWaveGenCMD_Execute+0x148>)
 800728c:	6838      	ldr	r0, [r7, #0]
 800728e:	f7fe fd1d 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007292:	6838      	ldr	r0, [r7, #0]
 8007294:	f7fe fd9a 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007298:	2301      	movs	r3, #1
 800729a:	e015      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 800729c:	f107 030c 	add.w	r3, r7, #12
 80072a0:	490d      	ldr	r1, [pc, #52]	@ (80072d8 <VibeCheckWaveGenCMD_Execute+0x14c>)
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f9 f834 	bl	8000310 <strcmp>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 80072ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80072b0:	f7ff fde8 	bl	8006e84 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 80072b4:	4907      	ldr	r1, [pc, #28]	@ (80072d4 <VibeCheckWaveGenCMD_Execute+0x148>)
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f7fe fd08 	bl	8005ccc <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80072bc:	6838      	ldr	r0, [r7, #0]
 80072be:	f7fe fd85 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3750      	adds	r7, #80	@ 0x50
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	0801d9d0 	.word	0x0801d9d0
 80072d4:	0801d994 	.word	0x0801d994
 80072d8:	0801d9d8 	.word	0x0801d9d8
 80072dc:	0801d9e0 	.word	0x0801d9e0
 80072e0:	0801d9e4 	.word	0x0801d9e4
 80072e4:	0801d9e8 	.word	0x0801d9e8

080072e8 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4619      	mov	r1, r3
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fd21 	bl	8006d44 <VibeCheckWaveGen_WasMuteButtonPressed>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01e      	beq.n	8007346 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8007308:	4911      	ldr	r1, [pc, #68]	@ (8007350 <VibeCheckWaveGenSender_Execute+0x68>)
 800730a:	6838      	ldr	r0, [r7, #0]
 800730c:	f7fe fcde 	bl	8005ccc <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8007310:	6838      	ldr	r0, [r7, #0]
 8007312:	f7fe fd4d 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 8007316:	490f      	ldr	r1, [pc, #60]	@ (8007354 <VibeCheckWaveGenSender_Execute+0x6c>)
 8007318:	6838      	ldr	r0, [r7, #0]
 800731a:	f7fe fcd7 	bl	8005ccc <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 800731e:	6838      	ldr	r0, [r7, #0]
 8007320:	f7fe fd46 	bl	8005db0 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 800732a:	490b      	ldr	r1, [pc, #44]	@ (8007358 <VibeCheckWaveGenSender_Execute+0x70>)
 800732c:	6838      	ldr	r0, [r7, #0]
 800732e:	f7fe fccd 	bl	8005ccc <VibeCheckShell_PutOutputString>
 8007332:	e003      	b.n	800733c <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8007334:	4909      	ldr	r1, [pc, #36]	@ (800735c <VibeCheckWaveGenSender_Execute+0x74>)
 8007336:	6838      	ldr	r0, [r7, #0]
 8007338:	f7fe fcc8 	bl	8005ccc <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 800733c:	6838      	ldr	r0, [r7, #0]
 800733e:	f7fe fd45 	bl	8005dcc <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	0801d9f0 	.word	0x0801d9f0
 8007354:	0801d9f8 	.word	0x0801d9f8
 8007358:	0801da00 	.word	0x0801da00
 800735c:	0801da08 	.word	0x0801da08

08007360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007398 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007364:	f7fb fda6 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007368:	480c      	ldr	r0, [pc, #48]	@ (800739c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800736a:	490d      	ldr	r1, [pc, #52]	@ (80073a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800736c:	4a0d      	ldr	r2, [pc, #52]	@ (80073a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800736e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007370:	e002      	b.n	8007378 <LoopCopyDataInit>

08007372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007376:	3304      	adds	r3, #4

08007378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800737a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800737c:	d3f9      	bcc.n	8007372 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800737e:	4a0a      	ldr	r2, [pc, #40]	@ (80073a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007380:	4c0a      	ldr	r4, [pc, #40]	@ (80073ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8007382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007384:	e001      	b.n	800738a <LoopFillZerobss>

08007386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007388:	3204      	adds	r2, #4

0800738a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800738a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800738c:	d3fb      	bcc.n	8007386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800738e:	f012 ff13 	bl	801a1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007392:	f7f9 ffbb 	bl	800130c <main>
  bx  lr
 8007396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007398:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800739c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80073a0:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 80073a4:	0801eab8 	.word	0x0801eab8
  ldr r2, =_sbss
 80073a8:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 80073ac:	2401f93c 	.word	0x2401f93c

080073b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80073b0:	e7fe      	b.n	80073b0 <ADC3_IRQHandler>
	...

080073b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073ba:	2003      	movs	r0, #3
 80073bc:	f001 fcf4 	bl	8008da8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073c0:	f006 fcd6 	bl	800dd70 <HAL_RCC_GetSysClockFreq>
 80073c4:	4602      	mov	r2, r0
 80073c6:	4b15      	ldr	r3, [pc, #84]	@ (800741c <HAL_Init+0x68>)
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	0a1b      	lsrs	r3, r3, #8
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	4913      	ldr	r1, [pc, #76]	@ (8007420 <HAL_Init+0x6c>)
 80073d2:	5ccb      	ldrb	r3, [r1, r3]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	fa22 f303 	lsr.w	r3, r2, r3
 80073dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073de:	4b0f      	ldr	r3, [pc, #60]	@ (800741c <HAL_Init+0x68>)
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007420 <HAL_Init+0x6c>)
 80073e8:	5cd3      	ldrb	r3, [r2, r3]
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
 80073f4:	4a0b      	ldr	r2, [pc, #44]	@ (8007424 <HAL_Init+0x70>)
 80073f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007428 <HAL_Init+0x74>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073fe:	2002      	movs	r0, #2
 8007400:	f000 f814 	bl	800742c <HAL_InitTick>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e002      	b.n	8007414 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800740e:	f7fa ff79 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	58024400 	.word	0x58024400
 8007420:	0801da44 	.word	0x0801da44
 8007424:	24000004 	.word	0x24000004
 8007428:	24000000 	.word	0x24000000

0800742c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007434:	4b15      	ldr	r3, [pc, #84]	@ (800748c <HAL_InitTick+0x60>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e021      	b.n	8007484 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007440:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <HAL_InitTick+0x64>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b11      	ldr	r3, [pc, #68]	@ (800748c <HAL_InitTick+0x60>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	4619      	mov	r1, r3
 800744a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800744e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007452:	fbb2 f3f3 	udiv	r3, r2, r3
 8007456:	4618      	mov	r0, r3
 8007458:	f001 fcd9 	bl	8008e0e <HAL_SYSTICK_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e00e      	b.n	8007484 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b0f      	cmp	r3, #15
 800746a:	d80a      	bhi.n	8007482 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800746c:	2200      	movs	r2, #0
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	f001 fca3 	bl	8008dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007478:	4a06      	ldr	r2, [pc, #24]	@ (8007494 <HAL_InitTick+0x68>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e000      	b.n	8007484 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	2400003c 	.word	0x2400003c
 8007490:	24000000 	.word	0x24000000
 8007494:	24000038 	.word	0x24000038

08007498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800749c:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <HAL_IncTick+0x20>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <HAL_IncTick+0x24>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4413      	add	r3, r2
 80074a8:	4a04      	ldr	r2, [pc, #16]	@ (80074bc <HAL_IncTick+0x24>)
 80074aa:	6013      	str	r3, [r2, #0]
}
 80074ac:	bf00      	nop
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	2400003c 	.word	0x2400003c
 80074bc:	24016408 	.word	0x24016408

080074c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  return uwTick;
 80074c4:	4b03      	ldr	r3, [pc, #12]	@ (80074d4 <HAL_GetTick+0x14>)
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	24016408 	.word	0x24016408

080074d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80074e0:	f7ff ffee 	bl	80074c0 <HAL_GetTick>
 80074e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d005      	beq.n	80074fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <HAL_Delay+0x44>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80074fe:	bf00      	nop
 8007500:	f7ff ffde 	bl	80074c0 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	429a      	cmp	r2, r3
 800750e:	d8f7      	bhi.n	8007500 <HAL_Delay+0x28>
  {
  }
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2400003c 	.word	0x2400003c

08007520 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	609a      	str	r2, [r3, #8]
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	609a      	str	r2, [r3, #8]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3360      	adds	r3, #96	@ 0x60
 800759a:	461a      	mov	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <LL_ADC_SetOffset+0x60>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d10b      	bne.n	80075c4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80075c2:	e00b      	b.n	80075dc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	430b      	orrs	r3, r1
 80075d6:	431a      	orrs	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	601a      	str	r2, [r3, #0]
}
 80075dc:	bf00      	nop
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	58026000 	.word	0x58026000

080075ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3360      	adds	r3, #96	@ 0x60
 80075fa:	461a      	mov	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 031f 	and.w	r3, r3, #31
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	fa01 f303 	lsl.w	r3, r1, r3
 8007638:	431a      	orrs	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	611a      	str	r2, [r3, #16]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a0c      	ldr	r2, [pc, #48]	@ (800768c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00e      	beq.n	800767e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3360      	adds	r3, #96	@ 0x60
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	431a      	orrs	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	601a      	str	r2, [r3, #0]
  }
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	58026000 	.word	0x58026000

08007690 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a0c      	ldr	r2, [pc, #48]	@ (80076d0 <LL_ADC_SetOffsetSaturation+0x40>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10e      	bne.n	80076c2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3360      	adds	r3, #96	@ 0x60
 80076a8:	461a      	mov	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	431a      	orrs	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	58026000 	.word	0x58026000

080076d4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007714 <LL_ADC_SetOffsetSign+0x40>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10e      	bne.n	8007706 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3360      	adds	r3, #96	@ 0x60
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	431a      	orrs	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	58026000 	.word	0x58026000

08007718 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3360      	adds	r3, #96	@ 0x60
 8007728:	461a      	mov	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a0c      	ldr	r2, [pc, #48]	@ (8007768 <LL_ADC_SetOffsetState+0x50>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d108      	bne.n	800774c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	431a      	orrs	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800774a:	e007      	b.n	800775c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	431a      	orrs	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	601a      	str	r2, [r3, #0]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58026000 	.word	0x58026000

0800776c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3330      	adds	r3, #48	@ 0x30
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	4413      	add	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	211f      	movs	r1, #31
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	401a      	ands	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	0e9b      	lsrs	r3, r3, #26
 80077a4:	f003 011f 	and.w	r1, r3, #31
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 031f 	and.w	r3, r3, #31
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	431a      	orrs	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3314      	adds	r3, #20
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	0e5b      	lsrs	r3, r3, #25
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	4413      	add	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2107      	movs	r1, #7
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	43db      	mvns	r3, r3
 80077f8:	401a      	ands	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	0d1b      	lsrs	r3, r3, #20
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	fa01 f303 	lsl.w	r3, r1, r3
 8007808:	431a      	orrs	r2, r3
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a1a      	ldr	r2, [pc, #104]	@ (8007894 <LL_ADC_SetChannelSingleDiff+0x78>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d115      	bne.n	800785c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800783c:	43db      	mvns	r3, r3
 800783e:	401a      	ands	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0318 	and.w	r3, r3, #24
 8007846:	4914      	ldr	r1, [pc, #80]	@ (8007898 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007848:	40d9      	lsrs	r1, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	400b      	ands	r3, r1
 800784e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007852:	431a      	orrs	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800785a:	e014      	b.n	8007886 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007868:	43db      	mvns	r3, r3
 800786a:	401a      	ands	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f003 0318 	and.w	r3, r3, #24
 8007872:	4909      	ldr	r1, [pc, #36]	@ (8007898 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007874:	40d9      	lsrs	r1, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	400b      	ands	r3, r1
 800787a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800787e:	431a      	orrs	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	58026000 	.word	0x58026000
 8007898:	000fffff 	.word	0x000fffff

0800789c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	4b04      	ldr	r3, [pc, #16]	@ (80078bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6093      	str	r3, [r2, #8]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	5fffffc0 	.word	0x5fffffc0

080078c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d4:	d101      	bne.n	80078da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <LL_ADC_EnableInternalRegulator+0x24>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	6fffffc0 	.word	0x6fffffc0

08007910 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007924:	d101      	bne.n	800792a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <LL_ADC_IsEnabled+0x18>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <LL_ADC_IsEnabled+0x1a>
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	2b04      	cmp	r3, #4
 8007970:	d101      	bne.n	8007976 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b08      	cmp	r3, #8
 8007996:	d101      	bne.n	800799c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b089      	sub	sp, #36	@ 0x24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e1ee      	b.n	8007da4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d109      	bne.n	80079e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fa fcb1 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff ff67 	bl	80078c0 <LL_ADC_IsDeepPowerDownEnabled>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff ff4d 	bl	800789c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff ff82 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d114      	bne.n	8007a3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff66 	bl	80078e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8007c58 <HAL_ADC_Init+0x2ac>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	099b      	lsrs	r3, r3, #6
 8007a22:	4a8e      	ldr	r2, [pc, #568]	@ (8007c5c <HAL_ADC_Init+0x2b0>)
 8007a24:	fba2 2303 	umull	r2, r3, r2, r3
 8007a28:	099b      	lsrs	r3, r3, #6
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a2e:	e002      	b.n	8007a36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f9      	bne.n	8007a30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ff65 	bl	8007910 <LL_ADC_IsInternalRegulatorEnabled>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10d      	bne.n	8007a68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a50:	f043 0210 	orr.w	r2, r3, #16
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a5c:	f043 0201 	orr.w	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff ff76 	bl	800795e <LL_ADC_REG_IsConversionOngoing>
 8007a72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8188 	bne.w	8007d92 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 8184 	bne.w	8007d92 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a8e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007a92:	f043 0202 	orr.w	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff ff4a 	bl	8007938 <LL_ADC_IsEnabled>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d136      	bne.n	8007b18 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a6c      	ldr	r2, [pc, #432]	@ (8007c60 <HAL_ADC_Init+0x2b4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_ADC_Init+0x112>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8007c64 <HAL_ADC_Init+0x2b8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d10e      	bne.n	8007adc <HAL_ADC_Init+0x130>
 8007abe:	4868      	ldr	r0, [pc, #416]	@ (8007c60 <HAL_ADC_Init+0x2b4>)
 8007ac0:	f7ff ff3a 	bl	8007938 <LL_ADC_IsEnabled>
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4867      	ldr	r0, [pc, #412]	@ (8007c64 <HAL_ADC_Init+0x2b8>)
 8007ac8:	f7ff ff36 	bl	8007938 <LL_ADC_IsEnabled>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4323      	orrs	r3, r4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2301      	moveq	r3, #1
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	e008      	b.n	8007aee <HAL_ADC_Init+0x142>
 8007adc:	4862      	ldr	r0, [pc, #392]	@ (8007c68 <HAL_ADC_Init+0x2bc>)
 8007ade:	f7ff ff2b 	bl	8007938 <LL_ADC_IsEnabled>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d012      	beq.n	8007b18 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a5a      	ldr	r2, [pc, #360]	@ (8007c60 <HAL_ADC_Init+0x2b4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_ADC_Init+0x15a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a58      	ldr	r2, [pc, #352]	@ (8007c64 <HAL_ADC_Init+0x2b8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d101      	bne.n	8007b0a <HAL_ADC_Init+0x15e>
 8007b06:	4a59      	ldr	r2, [pc, #356]	@ (8007c6c <HAL_ADC_Init+0x2c0>)
 8007b08:	e000      	b.n	8007b0c <HAL_ADC_Init+0x160>
 8007b0a:	4a59      	ldr	r2, [pc, #356]	@ (8007c70 <HAL_ADC_Init+0x2c4>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f7ff fd04 	bl	8007520 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a52      	ldr	r2, [pc, #328]	@ (8007c68 <HAL_ADC_Init+0x2bc>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d129      	bne.n	8007b76 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7e5b      	ldrb	r3, [r3, #25]
 8007b26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b2c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007b32:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d013      	beq.n	8007b64 <HAL_ADC_Init+0x1b8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b0c      	cmp	r3, #12
 8007b42:	d00d      	beq.n	8007b60 <HAL_ADC_Init+0x1b4>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b1c      	cmp	r3, #28
 8007b4a:	d007      	beq.n	8007b5c <HAL_ADC_Init+0x1b0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b18      	cmp	r3, #24
 8007b52:	d101      	bne.n	8007b58 <HAL_ADC_Init+0x1ac>
 8007b54:	2318      	movs	r3, #24
 8007b56:	e006      	b.n	8007b66 <HAL_ADC_Init+0x1ba>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e004      	b.n	8007b66 <HAL_ADC_Init+0x1ba>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	e002      	b.n	8007b66 <HAL_ADC_Init+0x1ba>
 8007b60:	2308      	movs	r3, #8
 8007b62:	e000      	b.n	8007b66 <HAL_ADC_Init+0x1ba>
 8007b64:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007b66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007b70:	4313      	orrs	r3, r2
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	e00e      	b.n	8007b94 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7e5b      	ldrb	r3, [r3, #25]
 8007b7a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b80:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007b86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d106      	bne.n	8007bac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	045b      	lsls	r3, r3, #17
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d009      	beq.n	8007bc8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a26      	ldr	r2, [pc, #152]	@ (8007c68 <HAL_ADC_Init+0x2bc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d115      	bne.n	8007bfe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	4b26      	ldr	r3, [pc, #152]	@ (8007c74 <HAL_ADC_Init+0x2c8>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	430b      	orrs	r3, r1
 8007be4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	611a      	str	r2, [r3, #16]
 8007bfc:	e009      	b.n	8007c12 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	4b1c      	ldr	r3, [pc, #112]	@ (8007c78 <HAL_ADC_Init+0x2cc>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6812      	ldr	r2, [r2, #0]
 8007c0c:	69b9      	ldr	r1, [r7, #24]
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fea1 	bl	800795e <LL_ADC_REG_IsConversionOngoing>
 8007c1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff feae 	bl	8007984 <LL_ADC_INJ_IsConversionOngoing>
 8007c28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f040 808e 	bne.w	8007d4e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 808a 	bne.w	8007d4e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c68 <HAL_ADC_Init+0x2bc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d11b      	bne.n	8007c7c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e1b      	ldrb	r3, [r3, #24]
 8007c48:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c50:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e018      	b.n	8007c8a <HAL_ADC_Init+0x2de>
 8007c58:	24000000 	.word	0x24000000
 8007c5c:	053e2d63 	.word	0x053e2d63
 8007c60:	40022000 	.word	0x40022000
 8007c64:	40022100 	.word	0x40022100
 8007c68:	58026000 	.word	0x58026000
 8007c6c:	40022300 	.word	0x40022300
 8007c70:	58026300 	.word	0x58026300
 8007c74:	fff04007 	.word	0xfff04007
 8007c78:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7e1b      	ldrb	r3, [r3, #24]
 8007c80:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	4b46      	ldr	r3, [pc, #280]	@ (8007dac <HAL_ADC_Init+0x400>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	69b9      	ldr	r1, [r7, #24]
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d137      	bne.n	8007d18 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8007db0 <HAL_ADC_Init+0x404>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d116      	bne.n	8007ce6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8007db4 <HAL_ADC_Init+0x408>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007cca:	4311      	orrs	r1, r2
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007cd0:	4311      	orrs	r1, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	611a      	str	r2, [r3, #16]
 8007ce4:	e020      	b.n	8007d28 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	4b32      	ldr	r3, [pc, #200]	@ (8007db8 <HAL_ADC_Init+0x40c>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007cf4:	3a01      	subs	r2, #1
 8007cf6:	0411      	lsls	r1, r2, #16
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007cfc:	4311      	orrs	r1, r2
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d02:	4311      	orrs	r1, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	611a      	str	r2, [r3, #16]
 8007d16:	e007      	b.n	8007d28 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1b      	ldr	r2, [pc, #108]	@ (8007db0 <HAL_ADC_Init+0x404>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d002      	beq.n	8007d4e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fd67 	bl	800881c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10c      	bne.n	8007d70 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	f023 010f 	bic.w	r1, r3, #15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	1e5a      	subs	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d6e:	e007      	b.n	8007d80 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 020f 	bic.w	r2, r2, #15
 8007d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	f043 0201 	orr.w	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007d90:	e007      	b.n	8007da2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d96:	f043 0210 	orr.w	r2, r3, #16
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007da2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3724      	adds	r7, #36	@ 0x24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd90      	pop	{r4, r7, pc}
 8007dac:	ffffbffc 	.word	0xffffbffc
 8007db0:	58026000 	.word	0x58026000
 8007db4:	fc00f81f 	.word	0xfc00f81f
 8007db8:	fc00f81e 	.word	0xfc00f81e

08007dbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b0b9      	sub	sp, #228	@ 0xe4
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	4aab      	ldr	r2, [pc, #684]	@ (800808c <HAL_ADC_ConfigChannel+0x2d0>)
 8007dde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d102      	bne.n	8007df0 <HAL_ADC_ConfigChannel+0x34>
 8007dea:	2302      	movs	r3, #2
 8007dec:	f000 bcfe 	b.w	80087ec <HAL_ADC_ConfigChannel+0xa30>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff fdae 	bl	800795e <LL_ADC_REG_IsConversionOngoing>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f040 84e2 	bne.w	80087ce <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	db38      	blt.n	8007e84 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a9e      	ldr	r2, [pc, #632]	@ (8008090 <HAL_ADC_ConfigChannel+0x2d4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d033      	beq.n	8007e84 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d108      	bne.n	8007e3a <HAL_ADC_ConfigChannel+0x7e>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	0e9b      	lsrs	r3, r3, #26
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2201      	movs	r2, #1
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	e01d      	b.n	8007e76 <HAL_ADC_ConfigChannel+0xba>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e46:	fa93 f3a3 	rbit	r3, r3
 8007e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8007e5e:	2320      	movs	r3, #32
 8007e60:	e004      	b.n	8007e6c <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8007e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e66:	fab3 f383 	clz	r3, r3
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2201      	movs	r2, #1
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	69d1      	ldr	r1, [r2, #28]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6812      	ldr	r2, [r2, #0]
 8007e80:	430b      	orrs	r3, r1
 8007e82:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	6859      	ldr	r1, [r3, #4]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f7ff fc6b 	bl	800776c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fd5f 	bl	800795e <LL_ADC_REG_IsConversionOngoing>
 8007ea0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7ff fd6b 	bl	8007984 <LL_ADC_INJ_IsConversionOngoing>
 8007eae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f040 8270 	bne.w	800839c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ebc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f040 826b 	bne.w	800839c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6819      	ldr	r1, [r3, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7ff fc76 	bl	80077c4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a6c      	ldr	r2, [pc, #432]	@ (8008090 <HAL_ADC_ConfigChannel+0x2d4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10d      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007efc:	e032      	b.n	8007f64 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007efe:	4b65      	ldr	r3, [pc, #404]	@ (8008094 <HAL_ADC_ConfigChannel+0x2d8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f0a:	d10b      	bne.n	8007f24 <HAL_ADC_ConfigChannel+0x168>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695a      	ldr	r2, [r3, #20]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	e01d      	b.n	8007f60 <HAL_ADC_ConfigChannel+0x1a4>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0310 	and.w	r3, r3, #16
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <HAL_ADC_ConfigChannel+0x18e>
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	e00a      	b.n	8007f60 <HAL_ADC_ConfigChannel+0x1a4>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	089b      	lsrs	r3, r3, #2
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d048      	beq.n	8007ffe <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6919      	ldr	r1, [r3, #16]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f7c:	f7ff fb04 	bl	8007588 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a42      	ldr	r2, [pc, #264]	@ (8008090 <HAL_ADC_ConfigChannel+0x2d4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d119      	bne.n	8007fbe <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6919      	ldr	r1, [r3, #16]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7ff fb9c 	bl	80076d4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	6919      	ldr	r1, [r3, #16]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d102      	bne.n	8007fb4 <HAL_ADC_ConfigChannel+0x1f8>
 8007fae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fb2:	e000      	b.n	8007fb6 <HAL_ADC_ConfigChannel+0x1fa>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7ff fb6a 	bl	8007690 <LL_ADC_SetOffsetSaturation>
 8007fbc:	e1ee      	b.n	800839c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6919      	ldr	r1, [r3, #16]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <HAL_ADC_ConfigChannel+0x21a>
 8007fd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007fd4:	e000      	b.n	8007fd8 <HAL_ADC_ConfigChannel+0x21c>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f7ff fb37 	bl	800764c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6919      	ldr	r1, [r3, #16]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	7e1b      	ldrb	r3, [r3, #24]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d102      	bne.n	8007ff4 <HAL_ADC_ConfigChannel+0x238>
 8007fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ff2:	e000      	b.n	8007ff6 <HAL_ADC_ConfigChannel+0x23a>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7ff fb0e 	bl	8007618 <LL_ADC_SetDataRightShift>
 8007ffc:	e1ce      	b.n	800839c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a23      	ldr	r2, [pc, #140]	@ (8008090 <HAL_ADC_ConfigChannel+0x2d4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	f040 8181 	bne.w	800830c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff faeb 	bl	80075ec <LL_ADC_GetOffsetChannel>
 8008016:	4603      	mov	r3, r0
 8008018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <HAL_ADC_ConfigChannel+0x27a>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2100      	movs	r1, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fae0 	bl	80075ec <LL_ADC_GetOffsetChannel>
 800802c:	4603      	mov	r3, r0
 800802e:	0e9b      	lsrs	r3, r3, #26
 8008030:	f003 021f 	and.w	r2, r3, #31
 8008034:	e01e      	b.n	8008074 <HAL_ADC_ConfigChannel+0x2b8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fad5 	bl	80075ec <LL_ADC_GetOffsetChannel>
 8008042:	4603      	mov	r3, r0
 8008044:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800804c:	fa93 f3a3 	rbit	r3, r3
 8008050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8008054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008058:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800805c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8008064:	2320      	movs	r3, #32
 8008066:	e004      	b.n	8008072 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8008068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <HAL_ADC_ConfigChannel+0x2dc>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	0e9b      	lsrs	r3, r3, #26
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	e01e      	b.n	80080ca <HAL_ADC_ConfigChannel+0x30e>
 800808c:	47ff0000 	.word	0x47ff0000
 8008090:	58026000 	.word	0x58026000
 8008094:	5c001000 	.word	0x5c001000
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a4:	fa93 f3a3 	rbit	r3, r3
 80080a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80080ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80080b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80080bc:	2320      	movs	r3, #32
 80080be:	e004      	b.n	80080ca <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80080c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080c4:	fab3 f383 	clz	r3, r3
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d106      	bne.n	80080dc <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fb1e 	bl	8007718 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2101      	movs	r1, #1
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fa82 	bl	80075ec <LL_ADC_GetOffsetChannel>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <HAL_ADC_ConfigChannel+0x34c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2101      	movs	r1, #1
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fa77 	bl	80075ec <LL_ADC_GetOffsetChannel>
 80080fe:	4603      	mov	r3, r0
 8008100:	0e9b      	lsrs	r3, r3, #26
 8008102:	f003 021f 	and.w	r2, r3, #31
 8008106:	e01e      	b.n	8008146 <HAL_ADC_ConfigChannel+0x38a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2101      	movs	r1, #1
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fa6c 	bl	80075ec <LL_ADC_GetOffsetChannel>
 8008114:	4603      	mov	r3, r0
 8008116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800811e:	fa93 f3a3 	rbit	r3, r3
 8008122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8008126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800812a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800812e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8008136:	2320      	movs	r3, #32
 8008138:	e004      	b.n	8008144 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800813a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800813e:	fab3 f383 	clz	r3, r3
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800814e:	2b00      	cmp	r3, #0
 8008150:	d105      	bne.n	800815e <HAL_ADC_ConfigChannel+0x3a2>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	0e9b      	lsrs	r3, r3, #26
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	e018      	b.n	8008190 <HAL_ADC_ConfigChannel+0x3d4>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008166:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800816a:	fa93 f3a3 	rbit	r3, r3
 800816e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8008172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800817a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8008182:	2320      	movs	r3, #32
 8008184:	e004      	b.n	8008190 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8008186:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800818a:	fab3 f383 	clz	r3, r3
 800818e:	b2db      	uxtb	r3, r3
 8008190:	429a      	cmp	r2, r3
 8008192:	d106      	bne.n	80081a2 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	2101      	movs	r1, #1
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fabb 	bl	8007718 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2102      	movs	r1, #2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fa1f 	bl	80075ec <LL_ADC_GetOffsetChannel>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x412>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2102      	movs	r1, #2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fa14 	bl	80075ec <LL_ADC_GetOffsetChannel>
 80081c4:	4603      	mov	r3, r0
 80081c6:	0e9b      	lsrs	r3, r3, #26
 80081c8:	f003 021f 	and.w	r2, r3, #31
 80081cc:	e01e      	b.n	800820c <HAL_ADC_ConfigChannel+0x450>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2102      	movs	r1, #2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fa09 	bl	80075ec <LL_ADC_GetOffsetChannel>
 80081da:	4603      	mov	r3, r0
 80081dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081e4:	fa93 f3a3 	rbit	r3, r3
 80081e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80081ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80081f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80081fc:	2320      	movs	r3, #32
 80081fe:	e004      	b.n	800820a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8008200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008204:	fab3 f383 	clz	r3, r3
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008214:	2b00      	cmp	r3, #0
 8008216:	d105      	bne.n	8008224 <HAL_ADC_ConfigChannel+0x468>
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	0e9b      	lsrs	r3, r3, #26
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	e014      	b.n	800824e <HAL_ADC_ConfigChannel+0x492>
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800822c:	fa93 f3a3 	rbit	r3, r3
 8008230:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008240:	2320      	movs	r3, #32
 8008242:	e004      	b.n	800824e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008244:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008248:	fab3 f383 	clz	r3, r3
 800824c:	b2db      	uxtb	r3, r3
 800824e:	429a      	cmp	r2, r3
 8008250:	d106      	bne.n	8008260 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2200      	movs	r2, #0
 8008258:	2102      	movs	r1, #2
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fa5c 	bl	8007718 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2103      	movs	r1, #3
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff f9c0 	bl	80075ec <LL_ADC_GetOffsetChannel>
 800826c:	4603      	mov	r3, r0
 800826e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <HAL_ADC_ConfigChannel+0x4d0>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2103      	movs	r1, #3
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff f9b5 	bl	80075ec <LL_ADC_GetOffsetChannel>
 8008282:	4603      	mov	r3, r0
 8008284:	0e9b      	lsrs	r3, r3, #26
 8008286:	f003 021f 	and.w	r2, r3, #31
 800828a:	e017      	b.n	80082bc <HAL_ADC_ConfigChannel+0x500>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2103      	movs	r1, #3
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff f9aa 	bl	80075ec <LL_ADC_GetOffsetChannel>
 8008298:	4603      	mov	r3, r0
 800829a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800829c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800829e:	fa93 f3a3 	rbit	r3, r3
 80082a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80082a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082a6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80082a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80082ae:	2320      	movs	r3, #32
 80082b0:	e003      	b.n	80082ba <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80082b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082b4:	fab3 f383 	clz	r3, r3
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_ADC_ConfigChannel+0x518>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	0e9b      	lsrs	r3, r3, #26
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	e011      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x53c>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082dc:	fa93 f3a3 	rbit	r3, r3
 80082e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80082e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80082e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80082ec:	2320      	movs	r3, #32
 80082ee:	e003      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80082f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d14f      	bne.n	800839c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2200      	movs	r2, #0
 8008302:	2103      	movs	r1, #3
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fa07 	bl	8007718 <LL_ADC_SetOffsetState>
 800830a:	e047      	b.n	800839c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	069b      	lsls	r3, r3, #26
 800831c:	429a      	cmp	r2, r3
 800831e:	d107      	bne.n	8008330 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800832e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008336:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	069b      	lsls	r3, r3, #26
 8008340:	429a      	cmp	r2, r3
 8008342:	d107      	bne.n	8008354 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008352:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800835a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	069b      	lsls	r3, r3, #26
 8008364:	429a      	cmp	r2, r3
 8008366:	d107      	bne.n	8008378 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008376:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800837e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	069b      	lsls	r3, r3, #26
 8008388:	429a      	cmp	r2, r3
 800838a:	d107      	bne.n	800839c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800839a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fac9 	bl	8007938 <LL_ADC_IsEnabled>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f040 8219 	bne.w	80087e0 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6819      	ldr	r1, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f7ff fa2e 	bl	800781c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	4aa1      	ldr	r2, [pc, #644]	@ (800864c <HAL_ADC_ConfigChannel+0x890>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	f040 812e 	bne.w	8008628 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10b      	bne.n	80083f4 <HAL_ADC_ConfigChannel+0x638>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	0e9b      	lsrs	r3, r3, #26
 80083e2:	3301      	adds	r3, #1
 80083e4:	f003 031f 	and.w	r3, r3, #31
 80083e8:	2b09      	cmp	r3, #9
 80083ea:	bf94      	ite	ls
 80083ec:	2301      	movls	r3, #1
 80083ee:	2300      	movhi	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	e019      	b.n	8008428 <HAL_ADC_ConfigChannel+0x66c>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083fc:	fa93 f3a3 	rbit	r3, r3
 8008400:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008404:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800840c:	2320      	movs	r3, #32
 800840e:	e003      	b.n	8008418 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008412:	fab3 f383 	clz	r3, r3
 8008416:	b2db      	uxtb	r3, r3
 8008418:	3301      	adds	r3, #1
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	2b09      	cmp	r3, #9
 8008420:	bf94      	ite	ls
 8008422:	2301      	movls	r3, #1
 8008424:	2300      	movhi	r3, #0
 8008426:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008428:	2b00      	cmp	r3, #0
 800842a:	d079      	beq.n	8008520 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008434:	2b00      	cmp	r3, #0
 8008436:	d107      	bne.n	8008448 <HAL_ADC_ConfigChannel+0x68c>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	0e9b      	lsrs	r3, r3, #26
 800843e:	3301      	adds	r3, #1
 8008440:	069b      	lsls	r3, r3, #26
 8008442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008446:	e015      	b.n	8008474 <HAL_ADC_ConfigChannel+0x6b8>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800844e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008450:	fa93 f3a3 	rbit	r3, r3
 8008454:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008458:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800845a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008460:	2320      	movs	r3, #32
 8008462:	e003      	b.n	800846c <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008466:	fab3 f383 	clz	r3, r3
 800846a:	b2db      	uxtb	r3, r3
 800846c:	3301      	adds	r3, #1
 800846e:	069b      	lsls	r3, r3, #26
 8008470:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847c:	2b00      	cmp	r3, #0
 800847e:	d109      	bne.n	8008494 <HAL_ADC_ConfigChannel+0x6d8>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	0e9b      	lsrs	r3, r3, #26
 8008486:	3301      	adds	r3, #1
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	2101      	movs	r1, #1
 800848e:	fa01 f303 	lsl.w	r3, r1, r3
 8008492:	e017      	b.n	80084c4 <HAL_ADC_ConfigChannel+0x708>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800849c:	fa93 f3a3 	rbit	r3, r3
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80084a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80084a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80084ac:	2320      	movs	r3, #32
 80084ae:	e003      	b.n	80084b8 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80084b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b2:	fab3 f383 	clz	r3, r3
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	3301      	adds	r3, #1
 80084ba:	f003 031f 	and.w	r3, r3, #31
 80084be:	2101      	movs	r1, #1
 80084c0:	fa01 f303 	lsl.w	r3, r1, r3
 80084c4:	ea42 0103 	orr.w	r1, r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <HAL_ADC_ConfigChannel+0x72e>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	0e9b      	lsrs	r3, r3, #26
 80084da:	3301      	adds	r3, #1
 80084dc:	f003 021f 	and.w	r2, r3, #31
 80084e0:	4613      	mov	r3, r2
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	4413      	add	r3, r2
 80084e6:	051b      	lsls	r3, r3, #20
 80084e8:	e018      	b.n	800851c <HAL_ADC_ConfigChannel+0x760>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f2:	fa93 f3a3 	rbit	r3, r3
 80084f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80084f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80084fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008502:	2320      	movs	r3, #32
 8008504:	e003      	b.n	800850e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	fab3 f383 	clz	r3, r3
 800850c:	b2db      	uxtb	r3, r3
 800850e:	3301      	adds	r3, #1
 8008510:	f003 021f 	and.w	r2, r3, #31
 8008514:	4613      	mov	r3, r2
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	4413      	add	r3, r2
 800851a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800851c:	430b      	orrs	r3, r1
 800851e:	e07e      	b.n	800861e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <HAL_ADC_ConfigChannel+0x780>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	0e9b      	lsrs	r3, r3, #26
 8008532:	3301      	adds	r3, #1
 8008534:	069b      	lsls	r3, r3, #26
 8008536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800853a:	e015      	b.n	8008568 <HAL_ADC_ConfigChannel+0x7ac>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	fa93 f3a3 	rbit	r3, r3
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008554:	2320      	movs	r3, #32
 8008556:	e003      	b.n	8008560 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	fab3 f383 	clz	r3, r3
 800855e:	b2db      	uxtb	r3, r3
 8008560:	3301      	adds	r3, #1
 8008562:	069b      	lsls	r3, r3, #26
 8008564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <HAL_ADC_ConfigChannel+0x7cc>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	0e9b      	lsrs	r3, r3, #26
 800857a:	3301      	adds	r3, #1
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	2101      	movs	r1, #1
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	e017      	b.n	80085b8 <HAL_ADC_ConfigChannel+0x7fc>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	fa93 f3a3 	rbit	r3, r3
 8008594:	61bb      	str	r3, [r7, #24]
  return result;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80085a0:	2320      	movs	r3, #32
 80085a2:	e003      	b.n	80085ac <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	fab3 f383 	clz	r3, r3
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	3301      	adds	r3, #1
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	2101      	movs	r1, #1
 80085b4:	fa01 f303 	lsl.w	r3, r1, r3
 80085b8:	ea42 0103 	orr.w	r1, r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10d      	bne.n	80085e4 <HAL_ADC_ConfigChannel+0x828>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	0e9b      	lsrs	r3, r3, #26
 80085ce:	3301      	adds	r3, #1
 80085d0:	f003 021f 	and.w	r2, r3, #31
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	3b1e      	subs	r3, #30
 80085dc:	051b      	lsls	r3, r3, #20
 80085de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80085e2:	e01b      	b.n	800861c <HAL_ADC_ConfigChannel+0x860>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	fa93 f3a3 	rbit	r3, r3
 80085f0:	60fb      	str	r3, [r7, #12]
  return result;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80085fc:	2320      	movs	r3, #32
 80085fe:	e003      	b.n	8008608 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	fab3 f383 	clz	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	3301      	adds	r3, #1
 800860a:	f003 021f 	and.w	r2, r3, #31
 800860e:	4613      	mov	r3, r2
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	4413      	add	r3, r2
 8008614:	3b1e      	subs	r3, #30
 8008616:	051b      	lsls	r3, r3, #20
 8008618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800861c:	430b      	orrs	r3, r1
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	6892      	ldr	r2, [r2, #8]
 8008622:	4619      	mov	r1, r3
 8008624:	f7ff f8ce 	bl	80077c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f280 80d7 	bge.w	80087e0 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a06      	ldr	r2, [pc, #24]	@ (8008650 <HAL_ADC_ConfigChannel+0x894>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_ADC_ConfigChannel+0x88a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a04      	ldr	r2, [pc, #16]	@ (8008654 <HAL_ADC_ConfigChannel+0x898>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d10a      	bne.n	800865c <HAL_ADC_ConfigChannel+0x8a0>
 8008646:	4b04      	ldr	r3, [pc, #16]	@ (8008658 <HAL_ADC_ConfigChannel+0x89c>)
 8008648:	e009      	b.n	800865e <HAL_ADC_ConfigChannel+0x8a2>
 800864a:	bf00      	nop
 800864c:	47ff0000 	.word	0x47ff0000
 8008650:	40022000 	.word	0x40022000
 8008654:	40022100 	.word	0x40022100
 8008658:	40022300 	.word	0x40022300
 800865c:	4b65      	ldr	r3, [pc, #404]	@ (80087f4 <HAL_ADC_ConfigChannel+0xa38>)
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe ff84 	bl	800756c <LL_ADC_GetCommonPathInternalCh>
 8008664:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a62      	ldr	r2, [pc, #392]	@ (80087f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d004      	beq.n	800867c <HAL_ADC_ConfigChannel+0x8c0>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a61      	ldr	r2, [pc, #388]	@ (80087fc <HAL_ADC_ConfigChannel+0xa40>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d10e      	bne.n	800869a <HAL_ADC_ConfigChannel+0x8de>
 800867c:	485e      	ldr	r0, [pc, #376]	@ (80087f8 <HAL_ADC_ConfigChannel+0xa3c>)
 800867e:	f7ff f95b 	bl	8007938 <LL_ADC_IsEnabled>
 8008682:	4604      	mov	r4, r0
 8008684:	485d      	ldr	r0, [pc, #372]	@ (80087fc <HAL_ADC_ConfigChannel+0xa40>)
 8008686:	f7ff f957 	bl	8007938 <LL_ADC_IsEnabled>
 800868a:	4603      	mov	r3, r0
 800868c:	4323      	orrs	r3, r4
 800868e:	2b00      	cmp	r3, #0
 8008690:	bf0c      	ite	eq
 8008692:	2301      	moveq	r3, #1
 8008694:	2300      	movne	r3, #0
 8008696:	b2db      	uxtb	r3, r3
 8008698:	e008      	b.n	80086ac <HAL_ADC_ConfigChannel+0x8f0>
 800869a:	4859      	ldr	r0, [pc, #356]	@ (8008800 <HAL_ADC_ConfigChannel+0xa44>)
 800869c:	f7ff f94c 	bl	8007938 <LL_ADC_IsEnabled>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8084 	beq.w	80087ba <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a53      	ldr	r2, [pc, #332]	@ (8008804 <HAL_ADC_ConfigChannel+0xa48>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d132      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x966>
 80086bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d12c      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a4c      	ldr	r2, [pc, #304]	@ (8008800 <HAL_ADC_ConfigChannel+0xa44>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	f040 8086 	bne.w	80087e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a47      	ldr	r2, [pc, #284]	@ (80087f8 <HAL_ADC_ConfigChannel+0xa3c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_ADC_ConfigChannel+0x92c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a46      	ldr	r2, [pc, #280]	@ (80087fc <HAL_ADC_ConfigChannel+0xa40>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d101      	bne.n	80086ec <HAL_ADC_ConfigChannel+0x930>
 80086e8:	4a47      	ldr	r2, [pc, #284]	@ (8008808 <HAL_ADC_ConfigChannel+0xa4c>)
 80086ea:	e000      	b.n	80086ee <HAL_ADC_ConfigChannel+0x932>
 80086ec:	4a41      	ldr	r2, [pc, #260]	@ (80087f4 <HAL_ADC_ConfigChannel+0xa38>)
 80086ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f7fe ff24 	bl	8007546 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086fe:	4b43      	ldr	r3, [pc, #268]	@ (800880c <HAL_ADC_ConfigChannel+0xa50>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	099b      	lsrs	r3, r3, #6
 8008704:	4a42      	ldr	r2, [pc, #264]	@ (8008810 <HAL_ADC_ConfigChannel+0xa54>)
 8008706:	fba2 2303 	umull	r2, r3, r2, r3
 800870a:	099b      	lsrs	r3, r3, #6
 800870c:	3301      	adds	r3, #1
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008712:	e002      	b.n	800871a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3b01      	subs	r3, #1
 8008718:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f9      	bne.n	8008714 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008720:	e05e      	b.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3b      	ldr	r2, [pc, #236]	@ (8008814 <HAL_ADC_ConfigChannel+0xa58>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d120      	bne.n	800876e <HAL_ADC_ConfigChannel+0x9b2>
 800872c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11a      	bne.n	800876e <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	@ (8008800 <HAL_ADC_ConfigChannel+0xa44>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d14e      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2c      	ldr	r2, [pc, #176]	@ (80087f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d004      	beq.n	8008756 <HAL_ADC_ConfigChannel+0x99a>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2a      	ldr	r2, [pc, #168]	@ (80087fc <HAL_ADC_ConfigChannel+0xa40>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d101      	bne.n	800875a <HAL_ADC_ConfigChannel+0x99e>
 8008756:	4a2c      	ldr	r2, [pc, #176]	@ (8008808 <HAL_ADC_ConfigChannel+0xa4c>)
 8008758:	e000      	b.n	800875c <HAL_ADC_ConfigChannel+0x9a0>
 800875a:	4a26      	ldr	r2, [pc, #152]	@ (80087f4 <HAL_ADC_ConfigChannel+0xa38>)
 800875c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe feed 	bl	8007546 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800876c:	e038      	b.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a29      	ldr	r2, [pc, #164]	@ (8008818 <HAL_ADC_ConfigChannel+0xa5c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d133      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
 8008778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800877c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d12d      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1d      	ldr	r2, [pc, #116]	@ (8008800 <HAL_ADC_ConfigChannel+0xa44>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d128      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d004      	beq.n	80087a2 <HAL_ADC_ConfigChannel+0x9e6>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a17      	ldr	r2, [pc, #92]	@ (80087fc <HAL_ADC_ConfigChannel+0xa40>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d101      	bne.n	80087a6 <HAL_ADC_ConfigChannel+0x9ea>
 80087a2:	4a19      	ldr	r2, [pc, #100]	@ (8008808 <HAL_ADC_ConfigChannel+0xa4c>)
 80087a4:	e000      	b.n	80087a8 <HAL_ADC_ConfigChannel+0x9ec>
 80087a6:	4a13      	ldr	r2, [pc, #76]	@ (80087f4 <HAL_ADC_ConfigChannel+0xa38>)
 80087a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fe fec7 	bl	8007546 <LL_ADC_SetCommonPathInternalCh>
 80087b8:	e012      	b.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087be:	f043 0220 	orr.w	r2, r3, #32
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80087cc:	e008      	b.n	80087e0 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80087e8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	37e4      	adds	r7, #228	@ 0xe4
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd90      	pop	{r4, r7, pc}
 80087f4:	58026300 	.word	0x58026300
 80087f8:	40022000 	.word	0x40022000
 80087fc:	40022100 	.word	0x40022100
 8008800:	58026000 	.word	0x58026000
 8008804:	c7520000 	.word	0xc7520000
 8008808:	40022300 	.word	0x40022300
 800880c:	24000000 	.word	0x24000000
 8008810:	053e2d63 	.word	0x053e2d63
 8008814:	c3210000 	.word	0xc3210000
 8008818:	cb840000 	.word	0xcb840000

0800881c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a6c      	ldr	r2, [pc, #432]	@ (80089dc <ADC_ConfigureBoostMode+0x1c0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d004      	beq.n	8008838 <ADC_ConfigureBoostMode+0x1c>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a6b      	ldr	r2, [pc, #428]	@ (80089e0 <ADC_ConfigureBoostMode+0x1c4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d109      	bne.n	800884c <ADC_ConfigureBoostMode+0x30>
 8008838:	4b6a      	ldr	r3, [pc, #424]	@ (80089e4 <ADC_ConfigureBoostMode+0x1c8>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008840:	2b00      	cmp	r3, #0
 8008842:	bf14      	ite	ne
 8008844:	2301      	movne	r3, #1
 8008846:	2300      	moveq	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	e008      	b.n	800885e <ADC_ConfigureBoostMode+0x42>
 800884c:	4b66      	ldr	r3, [pc, #408]	@ (80089e8 <ADC_ConfigureBoostMode+0x1cc>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008854:	2b00      	cmp	r3, #0
 8008856:	bf14      	ite	ne
 8008858:	2301      	movne	r3, #1
 800885a:	2300      	moveq	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01c      	beq.n	800889c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008862:	f005 fbff 	bl	800e064 <HAL_RCC_GetHCLKFreq>
 8008866:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008870:	d010      	beq.n	8008894 <ADC_ConfigureBoostMode+0x78>
 8008872:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008876:	d873      	bhi.n	8008960 <ADC_ConfigureBoostMode+0x144>
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800887c:	d002      	beq.n	8008884 <ADC_ConfigureBoostMode+0x68>
 800887e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008882:	d16d      	bne.n	8008960 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	60fb      	str	r3, [r7, #12]
        break;
 8008892:	e068      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	089b      	lsrs	r3, r3, #2
 8008898:	60fb      	str	r3, [r7, #12]
        break;
 800889a:	e064      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800889c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80088a0:	f04f 0100 	mov.w	r1, #0
 80088a4:	f006 fdda 	bl	800f45c <HAL_RCCEx_GetPeriphCLKFreq>
 80088a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80088b2:	d051      	beq.n	8008958 <ADC_ConfigureBoostMode+0x13c>
 80088b4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80088b8:	d854      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088ba:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80088be:	d047      	beq.n	8008950 <ADC_ConfigureBoostMode+0x134>
 80088c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80088c4:	d84e      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088c6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80088ca:	d03d      	beq.n	8008948 <ADC_ConfigureBoostMode+0x12c>
 80088cc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80088d0:	d848      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088d6:	d033      	beq.n	8008940 <ADC_ConfigureBoostMode+0x124>
 80088d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088dc:	d842      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088de:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088e2:	d029      	beq.n	8008938 <ADC_ConfigureBoostMode+0x11c>
 80088e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80088e8:	d83c      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088ea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088ee:	d01a      	beq.n	8008926 <ADC_ConfigureBoostMode+0x10a>
 80088f0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80088f4:	d836      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 80088f6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80088fa:	d014      	beq.n	8008926 <ADC_ConfigureBoostMode+0x10a>
 80088fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008900:	d830      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 8008902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008906:	d00e      	beq.n	8008926 <ADC_ConfigureBoostMode+0x10a>
 8008908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800890c:	d82a      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 800890e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008912:	d008      	beq.n	8008926 <ADC_ConfigureBoostMode+0x10a>
 8008914:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008918:	d824      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x148>
 800891a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800891e:	d002      	beq.n	8008926 <ADC_ConfigureBoostMode+0x10a>
 8008920:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008924:	d11e      	bne.n	8008964 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	0c9b      	lsrs	r3, r3, #18
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	fbb2 f3f3 	udiv	r3, r2, r3
 8008934:	60fb      	str	r3, [r7, #12]
        break;
 8008936:	e016      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	091b      	lsrs	r3, r3, #4
 800893c:	60fb      	str	r3, [r7, #12]
        break;
 800893e:	e012      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	60fb      	str	r3, [r7, #12]
        break;
 8008946:	e00e      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	099b      	lsrs	r3, r3, #6
 800894c:	60fb      	str	r3, [r7, #12]
        break;
 800894e:	e00a      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	09db      	lsrs	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
        break;
 8008956:	e006      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0a1b      	lsrs	r3, r3, #8
 800895c:	60fb      	str	r3, [r7, #12]
        break;
 800895e:	e002      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
        break;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008964:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a1f      	ldr	r2, [pc, #124]	@ (80089ec <ADC_ConfigureBoostMode+0x1d0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d808      	bhi.n	8008986 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008982:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008984:	e025      	b.n	80089d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a19      	ldr	r2, [pc, #100]	@ (80089f0 <ADC_ConfigureBoostMode+0x1d4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d80a      	bhi.n	80089a4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089a0:	609a      	str	r2, [r3, #8]
}
 80089a2:	e016      	b.n	80089d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a13      	ldr	r2, [pc, #76]	@ (80089f4 <ADC_ConfigureBoostMode+0x1d8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d80a      	bhi.n	80089c2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089be:	609a      	str	r2, [r3, #8]
}
 80089c0:	e007      	b.n	80089d2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80089d0:	609a      	str	r2, [r3, #8]
}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	40022000 	.word	0x40022000
 80089e0:	40022100 	.word	0x40022100
 80089e4:	40022300 	.word	0x40022300
 80089e8:	58026300 	.word	0x58026300
 80089ec:	005f5e10 	.word	0x005f5e10
 80089f0:	00bebc20 	.word	0x00bebc20
 80089f4:	017d7840 	.word	0x017d7840

080089f8 <LL_ADC_IsEnabled>:
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <LL_ADC_IsEnabled+0x18>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e000      	b.n	8008a12 <LL_ADC_IsEnabled+0x1a>
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d101      	bne.n	8008a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008a44:	b590      	push	{r4, r7, lr}
 8008a46:	b0a3      	sub	sp, #140	@ 0x8c
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e0c1      	b.n	8008be6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d102      	bne.n	8008a82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e001      	b.n	8008a86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10b      	bne.n	8008aa4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a90:	f043 0220 	orr.w	r2, r3, #32
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e0a0      	b.n	8008be6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff ffb9 	bl	8008a1e <LL_ADC_REG_IsConversionOngoing>
 8008aac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff ffb2 	bl	8008a1e <LL_ADC_REG_IsConversionOngoing>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8081 	bne.w	8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d17c      	bne.n	8008bc4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a48      	ldr	r2, [pc, #288]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d004      	beq.n	8008ade <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a46      	ldr	r2, [pc, #280]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d101      	bne.n	8008ae2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008ade:	4b46      	ldr	r3, [pc, #280]	@ (8008bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008ae0:	e000      	b.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008ae2:	4b46      	ldr	r3, [pc, #280]	@ (8008bfc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d039      	beq.n	8008b62 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008aee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008afe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a3a      	ldr	r2, [pc, #232]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d004      	beq.n	8008b14 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a39      	ldr	r2, [pc, #228]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d10e      	bne.n	8008b32 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008b14:	4836      	ldr	r0, [pc, #216]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b16:	f7ff ff6f 	bl	80089f8 <LL_ADC_IsEnabled>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4835      	ldr	r0, [pc, #212]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b1e:	f7ff ff6b 	bl	80089f8 <LL_ADC_IsEnabled>
 8008b22:	4603      	mov	r3, r0
 8008b24:	4323      	orrs	r3, r4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bf0c      	ite	eq
 8008b2a:	2301      	moveq	r3, #1
 8008b2c:	2300      	movne	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	e008      	b.n	8008b44 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008b32:	4833      	ldr	r0, [pc, #204]	@ (8008c00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008b34:	f7ff ff60 	bl	80089f8 <LL_ADC_IsEnabled>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d047      	beq.n	8008bd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	6811      	ldr	r1, [r2, #0]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	6892      	ldr	r2, [r2, #8]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b60:	e03a      	b.n	8008bd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008b6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008b6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d004      	beq.n	8008b82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d10e      	bne.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008b82:	481b      	ldr	r0, [pc, #108]	@ (8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b84:	f7ff ff38 	bl	80089f8 <LL_ADC_IsEnabled>
 8008b88:	4604      	mov	r4, r0
 8008b8a:	481a      	ldr	r0, [pc, #104]	@ (8008bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b8c:	f7ff ff34 	bl	80089f8 <LL_ADC_IsEnabled>
 8008b90:	4603      	mov	r3, r0
 8008b92:	4323      	orrs	r3, r4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	e008      	b.n	8008bb2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008ba0:	4817      	ldr	r0, [pc, #92]	@ (8008c00 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008ba2:	f7ff ff29 	bl	80089f8 <LL_ADC_IsEnabled>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bf0c      	ite	eq
 8008bac:	2301      	moveq	r3, #1
 8008bae:	2300      	movne	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d010      	beq.n	8008bd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008bc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008bc2:	e009      	b.n	8008bd8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bc8:	f043 0220 	orr.w	r2, r3, #32
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008bd6:	e000      	b.n	8008bda <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008be2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	378c      	adds	r7, #140	@ 0x8c
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40022000 	.word	0x40022000
 8008bf4:	40022100 	.word	0x40022100
 8008bf8:	40022300 	.word	0x40022300
 8008bfc:	58026300 	.word	0x58026300
 8008c00:	58026000 	.word	0x58026000
 8008c04:	fffff0e0 	.word	0xfffff0e0

08008c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c18:	4b0b      	ldr	r3, [pc, #44]	@ (8008c48 <__NVIC_SetPriorityGrouping+0x40>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008c24:	4013      	ands	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008c30:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <__NVIC_SetPriorityGrouping+0x44>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c36:	4a04      	ldr	r2, [pc, #16]	@ (8008c48 <__NVIC_SetPriorityGrouping+0x40>)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	60d3      	str	r3, [r2, #12]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	e000ed00 	.word	0xe000ed00
 8008c4c:	05fa0000 	.word	0x05fa0000

08008c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c50:	b480      	push	{r7}
 8008c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c54:	4b04      	ldr	r3, [pc, #16]	@ (8008c68 <__NVIC_GetPriorityGrouping+0x18>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	0a1b      	lsrs	r3, r3, #8
 8008c5a:	f003 0307 	and.w	r3, r3, #7
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	e000ed00 	.word	0xe000ed00

08008c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	db0b      	blt.n	8008c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c7e:	88fb      	ldrh	r3, [r7, #6]
 8008c80:	f003 021f 	and.w	r2, r3, #31
 8008c84:	4907      	ldr	r1, [pc, #28]	@ (8008ca4 <__NVIC_EnableIRQ+0x38>)
 8008c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	2001      	movs	r0, #1
 8008c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8008c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	e000e100 	.word	0xe000e100

08008ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db0a      	blt.n	8008cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	490c      	ldr	r1, [pc, #48]	@ (8008cf4 <__NVIC_SetPriority+0x4c>)
 8008cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cc6:	0112      	lsls	r2, r2, #4
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	440b      	add	r3, r1
 8008ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008cd0:	e00a      	b.n	8008ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	4908      	ldr	r1, [pc, #32]	@ (8008cf8 <__NVIC_SetPriority+0x50>)
 8008cd8:	88fb      	ldrh	r3, [r7, #6]
 8008cda:	f003 030f 	and.w	r3, r3, #15
 8008cde:	3b04      	subs	r3, #4
 8008ce0:	0112      	lsls	r2, r2, #4
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	761a      	strb	r2, [r3, #24]
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	e000e100 	.word	0xe000e100
 8008cf8:	e000ed00 	.word	0xe000ed00

08008cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b089      	sub	sp, #36	@ 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f1c3 0307 	rsb	r3, r3, #7
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	bf28      	it	cs
 8008d1a:	2304      	movcs	r3, #4
 8008d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	3304      	adds	r3, #4
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d902      	bls.n	8008d2c <NVIC_EncodePriority+0x30>
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3b03      	subs	r3, #3
 8008d2a:	e000      	b.n	8008d2e <NVIC_EncodePriority+0x32>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d30:	f04f 32ff 	mov.w	r2, #4294967295
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43da      	mvns	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	401a      	ands	r2, r3
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d44:	f04f 31ff 	mov.w	r1, #4294967295
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4e:	43d9      	mvns	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d54:	4313      	orrs	r3, r2
         );
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3724      	adds	r7, #36	@ 0x24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
	...

08008d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d74:	d301      	bcc.n	8008d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d76:	2301      	movs	r3, #1
 8008d78:	e00f      	b.n	8008d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008da4 <SysTick_Config+0x40>)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d82:	210f      	movs	r1, #15
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	f7ff ff8e 	bl	8008ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d8c:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <SysTick_Config+0x40>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d92:	4b04      	ldr	r3, [pc, #16]	@ (8008da4 <SysTick_Config+0x40>)
 8008d94:	2207      	movs	r2, #7
 8008d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	e000e010 	.word	0xe000e010

08008da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7ff ff29 	bl	8008c08 <__NVIC_SetPriorityGrouping>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
 8008dca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008dcc:	f7ff ff40 	bl	8008c50 <__NVIC_GetPriorityGrouping>
 8008dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f7ff ff90 	bl	8008cfc <NVIC_EncodePriority>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff ff5f 	bl	8008ca8 <__NVIC_SetPriority>
}
 8008dea:	bf00      	nop
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	4603      	mov	r3, r0
 8008dfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff ff33 	bl	8008c6c <__NVIC_EnableIRQ>
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ffa4 	bl	8008d64 <SysTick_Config>
 8008e1c:	4603      	mov	r3, r0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8008e2c:	f3bf 8f5f 	dmb	sy
}
 8008e30:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008e32:	4b07      	ldr	r3, [pc, #28]	@ (8008e50 <HAL_MPU_Disable+0x28>)
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	4a06      	ldr	r2, [pc, #24]	@ (8008e50 <HAL_MPU_Disable+0x28>)
 8008e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e3c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8008e3e:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <HAL_MPU_Disable+0x2c>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	605a      	str	r2, [r3, #4]
}
 8008e44:	bf00      	nop
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	e000ed00 	.word	0xe000ed00
 8008e54:	e000ed90 	.word	0xe000ed90

08008e58 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008e60:	4a0b      	ldr	r2, [pc, #44]	@ (8008e90 <HAL_MPU_Enable+0x38>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e94 <HAL_MPU_Enable+0x3c>)
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6e:	4a09      	ldr	r2, [pc, #36]	@ (8008e94 <HAL_MPU_Enable+0x3c>)
 8008e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e74:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008e76:	f3bf 8f4f 	dsb	sy
}
 8008e7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e7c:	f3bf 8f6f 	isb	sy
}
 8008e80:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000ed90 	.word	0xe000ed90
 8008e94:	e000ed00 	.word	0xe000ed00

08008e98 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	785a      	ldrb	r2, [r3, #1]
 8008ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f14 <HAL_MPU_ConfigRegion+0x7c>)
 8008ea6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f14 <HAL_MPU_ConfigRegion+0x7c>)
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	4a19      	ldr	r2, [pc, #100]	@ (8008f14 <HAL_MPU_ConfigRegion+0x7c>)
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008eb4:	4a17      	ldr	r2, [pc, #92]	@ (8008f14 <HAL_MPU_ConfigRegion+0x7c>)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7b1b      	ldrb	r3, [r3, #12]
 8008ec0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7adb      	ldrb	r3, [r3, #11]
 8008ec6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7a9b      	ldrb	r3, [r3, #10]
 8008ece:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	7b5b      	ldrb	r3, [r3, #13]
 8008ed6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7b9b      	ldrb	r3, [r3, #14]
 8008ede:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7bdb      	ldrb	r3, [r3, #15]
 8008ee6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7a5b      	ldrb	r3, [r3, #9]
 8008eee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7a1b      	ldrb	r3, [r3, #8]
 8008ef6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008ef8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008f00:	4a04      	ldr	r2, [pc, #16]	@ (8008f14 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008f02:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008f04:	6113      	str	r3, [r2, #16]
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	e000ed90 	.word	0xe000ed90

08008f18 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e014      	b.n	8008f54 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	791b      	ldrb	r3, [r3, #4]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d105      	bne.n	8008f40 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7f9 fa8c 	bl	8002458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2202      	movs	r2, #2
 8008f44:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e0a2      	b.n	80090ba <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	795b      	ldrb	r3, [r3, #5]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d101      	bne.n	8008f80 <HAL_DAC_Start_DMA+0x24>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e09c      	b.n	80090ba <HAL_DAC_Start_DMA+0x15e>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d129      	bne.n	8008fe6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	4a4b      	ldr	r2, [pc, #300]	@ (80090c4 <HAL_DAC_Start_DMA+0x168>)
 8008f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80090c8 <HAL_DAC_Start_DMA+0x16c>)
 8008fa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	4a49      	ldr	r2, [pc, #292]	@ (80090cc <HAL_DAC_Start_DMA+0x170>)
 8008fa8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008fb8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <HAL_DAC_Start_DMA+0x6c>
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d005      	beq.n	8008fd2 <HAL_DAC_Start_DMA+0x76>
 8008fc6:	e009      	b.n	8008fdc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3308      	adds	r3, #8
 8008fce:	613b      	str	r3, [r7, #16]
        break;
 8008fd0:	e033      	b.n	800903a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	613b      	str	r3, [r7, #16]
        break;
 8008fda:	e02e      	b.n	800903a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3310      	adds	r3, #16
 8008fe2:	613b      	str	r3, [r7, #16]
        break;
 8008fe4:	e029      	b.n	800903a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	4a39      	ldr	r2, [pc, #228]	@ (80090d0 <HAL_DAC_Start_DMA+0x174>)
 8008fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	4a38      	ldr	r2, [pc, #224]	@ (80090d4 <HAL_DAC_Start_DMA+0x178>)
 8008ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4a37      	ldr	r2, [pc, #220]	@ (80090d8 <HAL_DAC_Start_DMA+0x17c>)
 8008ffc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800900c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_DAC_Start_DMA+0xc0>
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	2b04      	cmp	r3, #4
 8009018:	d005      	beq.n	8009026 <HAL_DAC_Start_DMA+0xca>
 800901a:	e009      	b.n	8009030 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3314      	adds	r3, #20
 8009022:	613b      	str	r3, [r7, #16]
        break;
 8009024:	e009      	b.n	800903a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3318      	adds	r3, #24
 800902c:	613b      	str	r3, [r7, #16]
        break;
 800902e:	e004      	b.n	800903a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	331c      	adds	r3, #28
 8009036:	613b      	str	r3, [r7, #16]
        break;
 8009038:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d111      	bne.n	8009064 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800904e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6898      	ldr	r0, [r3, #8]
 8009054:	6879      	ldr	r1, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	f000 fd6d 	bl	8009b38 <HAL_DMA_Start_IT>
 800905e:	4603      	mov	r3, r0
 8009060:	75fb      	strb	r3, [r7, #23]
 8009062:	e010      	b.n	8009086 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8009072:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68d8      	ldr	r0, [r3, #12]
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	f000 fd5b 	bl	8009b38 <HAL_DMA_Start_IT>
 8009082:	4603      	mov	r3, r0
 8009084:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10c      	bne.n	80090ac <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6819      	ldr	r1, [r3, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2201      	movs	r2, #1
 80090a0:	409a      	lsls	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e005      	b.n	80090b8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f043 0204 	orr.w	r2, r3, #4
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	08009375 	.word	0x08009375
 80090c8:	08009397 	.word	0x08009397
 80090cc:	080093b3 	.word	0x080093b3
 80090d0:	0800941d 	.word	0x0800941d
 80090d4:	0800943f 	.word	0x0800943f
 80090d8:	0800945b 	.word	0x0800945b

080090dc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08a      	sub	sp, #40	@ 0x28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <HAL_DAC_ConfigChannel+0x1e>
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e12a      	b.n	8009368 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	795b      	ldrb	r3, [r3, #5]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_DAC_ConfigChannel+0x2e>
 800911a:	2302      	movs	r3, #2
 800911c:	e124      	b.n	8009368 <HAL_DAC_ConfigChannel+0x278>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2202      	movs	r2, #2
 8009128:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b04      	cmp	r3, #4
 8009130:	d17a      	bne.n	8009228 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009132:	f7fe f9c5 	bl	80074c0 <HAL_GetTick>
 8009136:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d13d      	bne.n	80091ba <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800913e:	e018      	b.n	8009172 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009140:	f7fe f9be 	bl	80074c0 <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b01      	cmp	r3, #1
 800914c:	d911      	bls.n	8009172 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009154:	4b86      	ldr	r3, [pc, #536]	@ (8009370 <HAL_DAC_ConfigChannel+0x280>)
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	f043 0208 	orr.w	r2, r3, #8
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2203      	movs	r2, #3
 800916c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e0fa      	b.n	8009368 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009178:	4b7d      	ldr	r3, [pc, #500]	@ (8009370 <HAL_DAC_ConfigChannel+0x280>)
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1df      	bne.n	8009140 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	6992      	ldr	r2, [r2, #24]
 8009188:	641a      	str	r2, [r3, #64]	@ 0x40
 800918a:	e020      	b.n	80091ce <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800918c:	f7fe f998 	bl	80074c0 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b01      	cmp	r3, #1
 8009198:	d90f      	bls.n	80091ba <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	da0a      	bge.n	80091ba <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f043 0208 	orr.w	r2, r3, #8
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2203      	movs	r2, #3
 80091b4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e0d6      	b.n	8009368 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dbe3      	blt.n	800918c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	6992      	ldr	r2, [r2, #24]
 80091cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80091de:	fa01 f303 	lsl.w	r3, r1, r3
 80091e2:	43db      	mvns	r3, r3
 80091e4:	ea02 0103 	and.w	r1, r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	409a      	lsls	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	21ff      	movs	r1, #255	@ 0xff
 800920a:	fa01 f303 	lsl.w	r3, r1, r3
 800920e:	43db      	mvns	r3, r3
 8009210:	ea02 0103 	and.w	r1, r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6a1a      	ldr	r2, [r3, #32]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f003 0310 	and.w	r3, r3, #16
 800921e:	409a      	lsls	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d11d      	bne.n	800926c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009236:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	221f      	movs	r2, #31
 8009240:	fa02 f303 	lsl.w	r3, r2, r3
 8009244:	43db      	mvns	r3, r3
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	4013      	ands	r3, r2
 800924a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	fa02 f303 	lsl.w	r3, r2, r3
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	4313      	orrs	r3, r2
 8009262:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2207      	movs	r2, #7
 800927c:	fa02 f303 	lsl.w	r3, r2, r3
 8009280:	43db      	mvns	r3, r3
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	4013      	ands	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d102      	bne.n	8009296 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8009290:	2300      	movs	r3, #0
 8009292:	627b      	str	r3, [r7, #36]	@ 0x24
 8009294:	e00f      	b.n	80092b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d102      	bne.n	80092a4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800929e:	2301      	movs	r3, #1
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a2:	e008      	b.n	80092b6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80092ac:	2301      	movs	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80092b0:	e001      	b.n	80092b6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	4313      	orrs	r3, r2
 80092c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f003 0310 	and.w	r3, r3, #16
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6819      	ldr	r1, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	43da      	mvns	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	400a      	ands	r2, r1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f003 0310 	and.w	r3, r3, #16
 800930c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8009310:	fa02 f303 	lsl.w	r3, r2, r3
 8009314:	43db      	mvns	r3, r3
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	4013      	ands	r3, r2
 800931a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	fa02 f303 	lsl.w	r3, r2, r3
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	4313      	orrs	r3, r2
 8009332:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f003 0310 	and.w	r3, r3, #16
 8009348:	22c0      	movs	r2, #192	@ 0xc0
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43da      	mvns	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	400a      	ands	r2, r1
 8009356:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009364:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009368:	4618      	mov	r0, r3
 800936a:	3728      	adds	r7, #40	@ 0x28
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20008000 	.word	0x20008000

08009374 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7f7 ffa4 	bl	80012d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	711a      	strb	r2, [r3, #4]
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7f7 ff85 	bl	80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f043 0204 	orr.w	r2, r3, #4
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f7ff fe85 	bl	80090dc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	711a      	strb	r2, [r3, #4]
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009428:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f7ff ffd8 	bl	80093e0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	711a      	strb	r2, [r3, #4]
}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7ff ffd1 	bl	80093f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009452:	bf00      	nop
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	f043 0204 	orr.w	r2, r3, #4
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff ffc7 	bl	8009408 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	711a      	strb	r2, [r3, #4]
}
 8009480:	bf00      	nop
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009490:	f7fe f816 	bl	80074c0 <HAL_GetTick>
 8009494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e312      	b.n	8009ac6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a66      	ldr	r2, [pc, #408]	@ (8009640 <HAL_DMA_Init+0x1b8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d04a      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a65      	ldr	r2, [pc, #404]	@ (8009644 <HAL_DMA_Init+0x1bc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d045      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a63      	ldr	r2, [pc, #396]	@ (8009648 <HAL_DMA_Init+0x1c0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d040      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a62      	ldr	r2, [pc, #392]	@ (800964c <HAL_DMA_Init+0x1c4>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d03b      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a60      	ldr	r2, [pc, #384]	@ (8009650 <HAL_DMA_Init+0x1c8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d036      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a5f      	ldr	r2, [pc, #380]	@ (8009654 <HAL_DMA_Init+0x1cc>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d031      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a5d      	ldr	r2, [pc, #372]	@ (8009658 <HAL_DMA_Init+0x1d0>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d02c      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a5c      	ldr	r2, [pc, #368]	@ (800965c <HAL_DMA_Init+0x1d4>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d027      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a5a      	ldr	r2, [pc, #360]	@ (8009660 <HAL_DMA_Init+0x1d8>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d022      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a59      	ldr	r2, [pc, #356]	@ (8009664 <HAL_DMA_Init+0x1dc>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d01d      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a57      	ldr	r2, [pc, #348]	@ (8009668 <HAL_DMA_Init+0x1e0>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d018      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a56      	ldr	r2, [pc, #344]	@ (800966c <HAL_DMA_Init+0x1e4>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d013      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a54      	ldr	r2, [pc, #336]	@ (8009670 <HAL_DMA_Init+0x1e8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d00e      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a53      	ldr	r2, [pc, #332]	@ (8009674 <HAL_DMA_Init+0x1ec>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d009      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a51      	ldr	r2, [pc, #324]	@ (8009678 <HAL_DMA_Init+0x1f0>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d004      	beq.n	8009540 <HAL_DMA_Init+0xb8>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a50      	ldr	r2, [pc, #320]	@ (800967c <HAL_DMA_Init+0x1f4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d101      	bne.n	8009544 <HAL_DMA_Init+0xbc>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <HAL_DMA_Init+0xbe>
 8009544:	2300      	movs	r3, #0
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 813c 	beq.w	80097c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a37      	ldr	r2, [pc, #220]	@ (8009640 <HAL_DMA_Init+0x1b8>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d04a      	beq.n	80095fc <HAL_DMA_Init+0x174>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a36      	ldr	r2, [pc, #216]	@ (8009644 <HAL_DMA_Init+0x1bc>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d045      	beq.n	80095fc <HAL_DMA_Init+0x174>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a34      	ldr	r2, [pc, #208]	@ (8009648 <HAL_DMA_Init+0x1c0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d040      	beq.n	80095fc <HAL_DMA_Init+0x174>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a33      	ldr	r2, [pc, #204]	@ (800964c <HAL_DMA_Init+0x1c4>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d03b      	beq.n	80095fc <HAL_DMA_Init+0x174>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a31      	ldr	r2, [pc, #196]	@ (8009650 <HAL_DMA_Init+0x1c8>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d036      	beq.n	80095fc <HAL_DMA_Init+0x174>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a30      	ldr	r2, [pc, #192]	@ (8009654 <HAL_DMA_Init+0x1cc>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d031      	beq.n	80095fc <HAL_DMA_Init+0x174>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a2e      	ldr	r2, [pc, #184]	@ (8009658 <HAL_DMA_Init+0x1d0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d02c      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a2d      	ldr	r2, [pc, #180]	@ (800965c <HAL_DMA_Init+0x1d4>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d027      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a2b      	ldr	r2, [pc, #172]	@ (8009660 <HAL_DMA_Init+0x1d8>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d022      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009664 <HAL_DMA_Init+0x1dc>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d01d      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a28      	ldr	r2, [pc, #160]	@ (8009668 <HAL_DMA_Init+0x1e0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d018      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a27      	ldr	r2, [pc, #156]	@ (800966c <HAL_DMA_Init+0x1e4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d013      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a25      	ldr	r2, [pc, #148]	@ (8009670 <HAL_DMA_Init+0x1e8>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00e      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a24      	ldr	r2, [pc, #144]	@ (8009674 <HAL_DMA_Init+0x1ec>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d009      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a22      	ldr	r2, [pc, #136]	@ (8009678 <HAL_DMA_Init+0x1f0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d004      	beq.n	80095fc <HAL_DMA_Init+0x174>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a21      	ldr	r2, [pc, #132]	@ (800967c <HAL_DMA_Init+0x1f4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d108      	bne.n	800960e <HAL_DMA_Init+0x186>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0201 	bic.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e007      	b.n	800961e <HAL_DMA_Init+0x196>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f022 0201 	bic.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800961e:	e02f      	b.n	8009680 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009620:	f7fd ff4e 	bl	80074c0 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b05      	cmp	r3, #5
 800962c:	d928      	bls.n	8009680 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2203      	movs	r2, #3
 8009638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e242      	b.n	8009ac6 <HAL_DMA_Init+0x63e>
 8009640:	40020010 	.word	0x40020010
 8009644:	40020028 	.word	0x40020028
 8009648:	40020040 	.word	0x40020040
 800964c:	40020058 	.word	0x40020058
 8009650:	40020070 	.word	0x40020070
 8009654:	40020088 	.word	0x40020088
 8009658:	400200a0 	.word	0x400200a0
 800965c:	400200b8 	.word	0x400200b8
 8009660:	40020410 	.word	0x40020410
 8009664:	40020428 	.word	0x40020428
 8009668:	40020440 	.word	0x40020440
 800966c:	40020458 	.word	0x40020458
 8009670:	40020470 	.word	0x40020470
 8009674:	40020488 	.word	0x40020488
 8009678:	400204a0 	.word	0x400204a0
 800967c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1c8      	bne.n	8009620 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4b83      	ldr	r3, [pc, #524]	@ (80098a8 <HAL_DMA_Init+0x420>)
 800969a:	4013      	ands	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80096a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d107      	bne.n	80096e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096dc:	4313      	orrs	r3, r2
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b28      	cmp	r3, #40	@ 0x28
 80096ea:	d903      	bls.n	80096f4 <HAL_DMA_Init+0x26c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80096f2:	d91f      	bls.n	8009734 <HAL_DMA_Init+0x2ac>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80096fa:	d903      	bls.n	8009704 <HAL_DMA_Init+0x27c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b42      	cmp	r3, #66	@ 0x42
 8009702:	d917      	bls.n	8009734 <HAL_DMA_Init+0x2ac>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b46      	cmp	r3, #70	@ 0x46
 800970a:	d903      	bls.n	8009714 <HAL_DMA_Init+0x28c>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	2b48      	cmp	r3, #72	@ 0x48
 8009712:	d90f      	bls.n	8009734 <HAL_DMA_Init+0x2ac>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	2b4e      	cmp	r3, #78	@ 0x4e
 800971a:	d903      	bls.n	8009724 <HAL_DMA_Init+0x29c>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b52      	cmp	r3, #82	@ 0x52
 8009722:	d907      	bls.n	8009734 <HAL_DMA_Init+0x2ac>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	2b73      	cmp	r3, #115	@ 0x73
 800972a:	d905      	bls.n	8009738 <HAL_DMA_Init+0x2b0>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	2b77      	cmp	r3, #119	@ 0x77
 8009732:	d801      	bhi.n	8009738 <HAL_DMA_Init+0x2b0>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <HAL_DMA_Init+0x2b2>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009744:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	4313      	orrs	r3, r2
 8009766:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800976c:	2b04      	cmp	r3, #4
 800976e:	d117      	bne.n	80097a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00e      	beq.n	80097a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fdca 	bl	800b31c <DMA_CheckFifoParam>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d008      	beq.n	80097a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2240      	movs	r2, #64	@ 0x40
 8009792:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e192      	b.n	8009ac6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fd05 	bl	800b1b8 <DMA_CalcBaseAndBitshift>
 80097ae:	4603      	mov	r3, r0
 80097b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	223f      	movs	r2, #63	@ 0x3f
 80097bc:	409a      	lsls	r2, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	609a      	str	r2, [r3, #8]
 80097c2:	e0c8      	b.n	8009956 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a38      	ldr	r2, [pc, #224]	@ (80098ac <HAL_DMA_Init+0x424>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d022      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a37      	ldr	r2, [pc, #220]	@ (80098b0 <HAL_DMA_Init+0x428>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d01d      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a35      	ldr	r2, [pc, #212]	@ (80098b4 <HAL_DMA_Init+0x42c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d018      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a34      	ldr	r2, [pc, #208]	@ (80098b8 <HAL_DMA_Init+0x430>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d013      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a32      	ldr	r2, [pc, #200]	@ (80098bc <HAL_DMA_Init+0x434>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00e      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a31      	ldr	r2, [pc, #196]	@ (80098c0 <HAL_DMA_Init+0x438>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d009      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a2f      	ldr	r2, [pc, #188]	@ (80098c4 <HAL_DMA_Init+0x43c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <HAL_DMA_Init+0x38c>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a2e      	ldr	r2, [pc, #184]	@ (80098c8 <HAL_DMA_Init+0x440>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d101      	bne.n	8009818 <HAL_DMA_Init+0x390>
 8009814:	2301      	movs	r3, #1
 8009816:	e000      	b.n	800981a <HAL_DMA_Init+0x392>
 8009818:	2300      	movs	r3, #0
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8092 	beq.w	8009944 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a21      	ldr	r2, [pc, #132]	@ (80098ac <HAL_DMA_Init+0x424>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d021      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a20      	ldr	r2, [pc, #128]	@ (80098b0 <HAL_DMA_Init+0x428>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d01c      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1e      	ldr	r2, [pc, #120]	@ (80098b4 <HAL_DMA_Init+0x42c>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d017      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <HAL_DMA_Init+0x430>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d012      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1b      	ldr	r2, [pc, #108]	@ (80098bc <HAL_DMA_Init+0x434>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00d      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1a      	ldr	r2, [pc, #104]	@ (80098c0 <HAL_DMA_Init+0x438>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d008      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a18      	ldr	r2, [pc, #96]	@ (80098c4 <HAL_DMA_Init+0x43c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d003      	beq.n	800986e <HAL_DMA_Init+0x3e6>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a17      	ldr	r2, [pc, #92]	@ (80098c8 <HAL_DMA_Init+0x440>)
 800986c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2202      	movs	r2, #2
 8009872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4b10      	ldr	r3, [pc, #64]	@ (80098cc <HAL_DMA_Init+0x444>)
 800988a:	4013      	ands	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b40      	cmp	r3, #64	@ 0x40
 8009894:	d01c      	beq.n	80098d0 <HAL_DMA_Init+0x448>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b80      	cmp	r3, #128	@ 0x80
 800989c:	d102      	bne.n	80098a4 <HAL_DMA_Init+0x41c>
 800989e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80098a2:	e016      	b.n	80098d2 <HAL_DMA_Init+0x44a>
 80098a4:	2300      	movs	r3, #0
 80098a6:	e014      	b.n	80098d2 <HAL_DMA_Init+0x44a>
 80098a8:	fe10803f 	.word	0xfe10803f
 80098ac:	58025408 	.word	0x58025408
 80098b0:	5802541c 	.word	0x5802541c
 80098b4:	58025430 	.word	0x58025430
 80098b8:	58025444 	.word	0x58025444
 80098bc:	58025458 	.word	0x58025458
 80098c0:	5802546c 	.word	0x5802546c
 80098c4:	58025480 	.word	0x58025480
 80098c8:	58025494 	.word	0x58025494
 80098cc:	fffe000f 	.word	0xfffe000f
 80098d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68d2      	ldr	r2, [r2, #12]
 80098d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80098e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	69db      	ldr	r3, [r3, #28]
 80098f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009900:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	4b6e      	ldr	r3, [pc, #440]	@ (8009ad0 <HAL_DMA_Init+0x648>)
 8009918:	4413      	add	r3, r2
 800991a:	4a6e      	ldr	r2, [pc, #440]	@ (8009ad4 <HAL_DMA_Init+0x64c>)
 800991c:	fba2 2303 	umull	r2, r3, r2, r3
 8009920:	091b      	lsrs	r3, r3, #4
 8009922:	009a      	lsls	r2, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 fc45 	bl	800b1b8 <DMA_CalcBaseAndBitshift>
 800992e:	4603      	mov	r3, r0
 8009930:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2201      	movs	r2, #1
 800993c:	409a      	lsls	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	e008      	b.n	8009956 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2240      	movs	r2, #64	@ 0x40
 8009948:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2203      	movs	r2, #3
 800994e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e0b7      	b.n	8009ac6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a5f      	ldr	r2, [pc, #380]	@ (8009ad8 <HAL_DMA_Init+0x650>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d072      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a5d      	ldr	r2, [pc, #372]	@ (8009adc <HAL_DMA_Init+0x654>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d06d      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a5c      	ldr	r2, [pc, #368]	@ (8009ae0 <HAL_DMA_Init+0x658>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d068      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a5a      	ldr	r2, [pc, #360]	@ (8009ae4 <HAL_DMA_Init+0x65c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d063      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a59      	ldr	r2, [pc, #356]	@ (8009ae8 <HAL_DMA_Init+0x660>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d05e      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a57      	ldr	r2, [pc, #348]	@ (8009aec <HAL_DMA_Init+0x664>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d059      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a56      	ldr	r2, [pc, #344]	@ (8009af0 <HAL_DMA_Init+0x668>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d054      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a54      	ldr	r2, [pc, #336]	@ (8009af4 <HAL_DMA_Init+0x66c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d04f      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a53      	ldr	r2, [pc, #332]	@ (8009af8 <HAL_DMA_Init+0x670>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d04a      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a51      	ldr	r2, [pc, #324]	@ (8009afc <HAL_DMA_Init+0x674>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d045      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a50      	ldr	r2, [pc, #320]	@ (8009b00 <HAL_DMA_Init+0x678>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d040      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a4e      	ldr	r2, [pc, #312]	@ (8009b04 <HAL_DMA_Init+0x67c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d03b      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a4d      	ldr	r2, [pc, #308]	@ (8009b08 <HAL_DMA_Init+0x680>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d036      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a4b      	ldr	r2, [pc, #300]	@ (8009b0c <HAL_DMA_Init+0x684>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d031      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a4a      	ldr	r2, [pc, #296]	@ (8009b10 <HAL_DMA_Init+0x688>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d02c      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a48      	ldr	r2, [pc, #288]	@ (8009b14 <HAL_DMA_Init+0x68c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d027      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a47      	ldr	r2, [pc, #284]	@ (8009b18 <HAL_DMA_Init+0x690>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d022      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a45      	ldr	r2, [pc, #276]	@ (8009b1c <HAL_DMA_Init+0x694>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01d      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a44      	ldr	r2, [pc, #272]	@ (8009b20 <HAL_DMA_Init+0x698>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d018      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a42      	ldr	r2, [pc, #264]	@ (8009b24 <HAL_DMA_Init+0x69c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d013      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a41      	ldr	r2, [pc, #260]	@ (8009b28 <HAL_DMA_Init+0x6a0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b2c <HAL_DMA_Init+0x6a4>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a3e      	ldr	r2, [pc, #248]	@ (8009b30 <HAL_DMA_Init+0x6a8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_DMA_Init+0x5be>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a3c      	ldr	r2, [pc, #240]	@ (8009b34 <HAL_DMA_Init+0x6ac>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d101      	bne.n	8009a4a <HAL_DMA_Init+0x5c2>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <HAL_DMA_Init+0x5c4>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d032      	beq.n	8009ab6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f001 fcdf 	bl	800b414 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	2b80      	cmp	r3, #128	@ 0x80
 8009a5c:	d102      	bne.n	8009a64 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009a78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d010      	beq.n	8009aa4 <HAL_DMA_Init+0x61c>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2b08      	cmp	r3, #8
 8009a88:	d80c      	bhi.n	8009aa4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 fd5c 	bl	800b548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	e008      	b.n	8009ab6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	a7fdabf8 	.word	0xa7fdabf8
 8009ad4:	cccccccd 	.word	0xcccccccd
 8009ad8:	40020010 	.word	0x40020010
 8009adc:	40020028 	.word	0x40020028
 8009ae0:	40020040 	.word	0x40020040
 8009ae4:	40020058 	.word	0x40020058
 8009ae8:	40020070 	.word	0x40020070
 8009aec:	40020088 	.word	0x40020088
 8009af0:	400200a0 	.word	0x400200a0
 8009af4:	400200b8 	.word	0x400200b8
 8009af8:	40020410 	.word	0x40020410
 8009afc:	40020428 	.word	0x40020428
 8009b00:	40020440 	.word	0x40020440
 8009b04:	40020458 	.word	0x40020458
 8009b08:	40020470 	.word	0x40020470
 8009b0c:	40020488 	.word	0x40020488
 8009b10:	400204a0 	.word	0x400204a0
 8009b14:	400204b8 	.word	0x400204b8
 8009b18:	58025408 	.word	0x58025408
 8009b1c:	5802541c 	.word	0x5802541c
 8009b20:	58025430 	.word	0x58025430
 8009b24:	58025444 	.word	0x58025444
 8009b28:	58025458 	.word	0x58025458
 8009b2c:	5802546c 	.word	0x5802546c
 8009b30:	58025480 	.word	0x58025480
 8009b34:	58025494 	.word	0x58025494

08009b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e226      	b.n	8009fa2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d101      	bne.n	8009b62 <HAL_DMA_Start_IT+0x2a>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e21f      	b.n	8009fa2 <HAL_DMA_Start_IT+0x46a>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	f040 820a 	bne.w	8009f8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a68      	ldr	r2, [pc, #416]	@ (8009d2c <HAL_DMA_Start_IT+0x1f4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d04a      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a66      	ldr	r2, [pc, #408]	@ (8009d30 <HAL_DMA_Start_IT+0x1f8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d045      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a65      	ldr	r2, [pc, #404]	@ (8009d34 <HAL_DMA_Start_IT+0x1fc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d040      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a63      	ldr	r2, [pc, #396]	@ (8009d38 <HAL_DMA_Start_IT+0x200>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d03b      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a62      	ldr	r2, [pc, #392]	@ (8009d3c <HAL_DMA_Start_IT+0x204>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d036      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a60      	ldr	r2, [pc, #384]	@ (8009d40 <HAL_DMA_Start_IT+0x208>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d031      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8009d44 <HAL_DMA_Start_IT+0x20c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d02c      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8009d48 <HAL_DMA_Start_IT+0x210>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d027      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a5c      	ldr	r2, [pc, #368]	@ (8009d4c <HAL_DMA_Start_IT+0x214>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d022      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a5a      	ldr	r2, [pc, #360]	@ (8009d50 <HAL_DMA_Start_IT+0x218>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d01d      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a59      	ldr	r2, [pc, #356]	@ (8009d54 <HAL_DMA_Start_IT+0x21c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d018      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a57      	ldr	r2, [pc, #348]	@ (8009d58 <HAL_DMA_Start_IT+0x220>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d013      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a56      	ldr	r2, [pc, #344]	@ (8009d5c <HAL_DMA_Start_IT+0x224>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a54      	ldr	r2, [pc, #336]	@ (8009d60 <HAL_DMA_Start_IT+0x228>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d009      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a53      	ldr	r2, [pc, #332]	@ (8009d64 <HAL_DMA_Start_IT+0x22c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d004      	beq.n	8009c26 <HAL_DMA_Start_IT+0xee>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a51      	ldr	r2, [pc, #324]	@ (8009d68 <HAL_DMA_Start_IT+0x230>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d108      	bne.n	8009c38 <HAL_DMA_Start_IT+0x100>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0201 	bic.w	r2, r2, #1
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e007      	b.n	8009c48 <HAL_DMA_Start_IT+0x110>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0201 	bic.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f001 f906 	bl	800ae60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a34      	ldr	r2, [pc, #208]	@ (8009d2c <HAL_DMA_Start_IT+0x1f4>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d04a      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a33      	ldr	r2, [pc, #204]	@ (8009d30 <HAL_DMA_Start_IT+0x1f8>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d045      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a31      	ldr	r2, [pc, #196]	@ (8009d34 <HAL_DMA_Start_IT+0x1fc>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d040      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a30      	ldr	r2, [pc, #192]	@ (8009d38 <HAL_DMA_Start_IT+0x200>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d03b      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a2e      	ldr	r2, [pc, #184]	@ (8009d3c <HAL_DMA_Start_IT+0x204>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d036      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009d40 <HAL_DMA_Start_IT+0x208>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d031      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a2b      	ldr	r2, [pc, #172]	@ (8009d44 <HAL_DMA_Start_IT+0x20c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d02c      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d48 <HAL_DMA_Start_IT+0x210>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d027      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a28      	ldr	r2, [pc, #160]	@ (8009d4c <HAL_DMA_Start_IT+0x214>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d022      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a27      	ldr	r2, [pc, #156]	@ (8009d50 <HAL_DMA_Start_IT+0x218>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d01d      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a25      	ldr	r2, [pc, #148]	@ (8009d54 <HAL_DMA_Start_IT+0x21c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d018      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a24      	ldr	r2, [pc, #144]	@ (8009d58 <HAL_DMA_Start_IT+0x220>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d013      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a22      	ldr	r2, [pc, #136]	@ (8009d5c <HAL_DMA_Start_IT+0x224>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a21      	ldr	r2, [pc, #132]	@ (8009d60 <HAL_DMA_Start_IT+0x228>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d64 <HAL_DMA_Start_IT+0x22c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d004      	beq.n	8009cf4 <HAL_DMA_Start_IT+0x1bc>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a1e      	ldr	r2, [pc, #120]	@ (8009d68 <HAL_DMA_Start_IT+0x230>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d101      	bne.n	8009cf8 <HAL_DMA_Start_IT+0x1c0>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <HAL_DMA_Start_IT+0x1c2>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d036      	beq.n	8009d6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f023 021e 	bic.w	r2, r3, #30
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0216 	orr.w	r2, r2, #22
 8009d10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d03e      	beq.n	8009d98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f042 0208 	orr.w	r2, r2, #8
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e035      	b.n	8009d98 <HAL_DMA_Start_IT+0x260>
 8009d2c:	40020010 	.word	0x40020010
 8009d30:	40020028 	.word	0x40020028
 8009d34:	40020040 	.word	0x40020040
 8009d38:	40020058 	.word	0x40020058
 8009d3c:	40020070 	.word	0x40020070
 8009d40:	40020088 	.word	0x40020088
 8009d44:	400200a0 	.word	0x400200a0
 8009d48:	400200b8 	.word	0x400200b8
 8009d4c:	40020410 	.word	0x40020410
 8009d50:	40020428 	.word	0x40020428
 8009d54:	40020440 	.word	0x40020440
 8009d58:	40020458 	.word	0x40020458
 8009d5c:	40020470 	.word	0x40020470
 8009d60:	40020488 	.word	0x40020488
 8009d64:	400204a0 	.word	0x400204a0
 8009d68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f023 020e 	bic.w	r2, r3, #14
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 020a 	orr.w	r2, r2, #10
 8009d7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0204 	orr.w	r2, r2, #4
 8009d96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a83      	ldr	r2, [pc, #524]	@ (8009fac <HAL_DMA_Start_IT+0x474>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d072      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a82      	ldr	r2, [pc, #520]	@ (8009fb0 <HAL_DMA_Start_IT+0x478>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d06d      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a80      	ldr	r2, [pc, #512]	@ (8009fb4 <HAL_DMA_Start_IT+0x47c>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d068      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a7f      	ldr	r2, [pc, #508]	@ (8009fb8 <HAL_DMA_Start_IT+0x480>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d063      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a7d      	ldr	r2, [pc, #500]	@ (8009fbc <HAL_DMA_Start_IT+0x484>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d05e      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a7c      	ldr	r2, [pc, #496]	@ (8009fc0 <HAL_DMA_Start_IT+0x488>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d059      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a7a      	ldr	r2, [pc, #488]	@ (8009fc4 <HAL_DMA_Start_IT+0x48c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d054      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a79      	ldr	r2, [pc, #484]	@ (8009fc8 <HAL_DMA_Start_IT+0x490>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d04f      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a77      	ldr	r2, [pc, #476]	@ (8009fcc <HAL_DMA_Start_IT+0x494>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d04a      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a76      	ldr	r2, [pc, #472]	@ (8009fd0 <HAL_DMA_Start_IT+0x498>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d045      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a74      	ldr	r2, [pc, #464]	@ (8009fd4 <HAL_DMA_Start_IT+0x49c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d040      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a73      	ldr	r2, [pc, #460]	@ (8009fd8 <HAL_DMA_Start_IT+0x4a0>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d03b      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a71      	ldr	r2, [pc, #452]	@ (8009fdc <HAL_DMA_Start_IT+0x4a4>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d036      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a70      	ldr	r2, [pc, #448]	@ (8009fe0 <HAL_DMA_Start_IT+0x4a8>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d031      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a6e      	ldr	r2, [pc, #440]	@ (8009fe4 <HAL_DMA_Start_IT+0x4ac>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d02c      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a6d      	ldr	r2, [pc, #436]	@ (8009fe8 <HAL_DMA_Start_IT+0x4b0>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d027      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8009fec <HAL_DMA_Start_IT+0x4b4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d022      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a6a      	ldr	r2, [pc, #424]	@ (8009ff0 <HAL_DMA_Start_IT+0x4b8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d01d      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a68      	ldr	r2, [pc, #416]	@ (8009ff4 <HAL_DMA_Start_IT+0x4bc>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d018      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a67      	ldr	r2, [pc, #412]	@ (8009ff8 <HAL_DMA_Start_IT+0x4c0>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d013      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a65      	ldr	r2, [pc, #404]	@ (8009ffc <HAL_DMA_Start_IT+0x4c4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d00e      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a64      	ldr	r2, [pc, #400]	@ (800a000 <HAL_DMA_Start_IT+0x4c8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d009      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a62      	ldr	r2, [pc, #392]	@ (800a004 <HAL_DMA_Start_IT+0x4cc>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d004      	beq.n	8009e88 <HAL_DMA_Start_IT+0x350>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a61      	ldr	r2, [pc, #388]	@ (800a008 <HAL_DMA_Start_IT+0x4d0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d101      	bne.n	8009e8c <HAL_DMA_Start_IT+0x354>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <HAL_DMA_Start_IT+0x356>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01a      	beq.n	8009ec8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009eae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d007      	beq.n	8009ec8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ec6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a37      	ldr	r2, [pc, #220]	@ (8009fac <HAL_DMA_Start_IT+0x474>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d04a      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a36      	ldr	r2, [pc, #216]	@ (8009fb0 <HAL_DMA_Start_IT+0x478>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d045      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a34      	ldr	r2, [pc, #208]	@ (8009fb4 <HAL_DMA_Start_IT+0x47c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d040      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a33      	ldr	r2, [pc, #204]	@ (8009fb8 <HAL_DMA_Start_IT+0x480>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d03b      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a31      	ldr	r2, [pc, #196]	@ (8009fbc <HAL_DMA_Start_IT+0x484>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d036      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a30      	ldr	r2, [pc, #192]	@ (8009fc0 <HAL_DMA_Start_IT+0x488>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d031      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a2e      	ldr	r2, [pc, #184]	@ (8009fc4 <HAL_DMA_Start_IT+0x48c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d02c      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a2d      	ldr	r2, [pc, #180]	@ (8009fc8 <HAL_DMA_Start_IT+0x490>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d027      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8009fcc <HAL_DMA_Start_IT+0x494>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d022      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a2a      	ldr	r2, [pc, #168]	@ (8009fd0 <HAL_DMA_Start_IT+0x498>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d01d      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a28      	ldr	r2, [pc, #160]	@ (8009fd4 <HAL_DMA_Start_IT+0x49c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d018      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a27      	ldr	r2, [pc, #156]	@ (8009fd8 <HAL_DMA_Start_IT+0x4a0>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d013      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a25      	ldr	r2, [pc, #148]	@ (8009fdc <HAL_DMA_Start_IT+0x4a4>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00e      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a24      	ldr	r2, [pc, #144]	@ (8009fe0 <HAL_DMA_Start_IT+0x4a8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d009      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a22      	ldr	r2, [pc, #136]	@ (8009fe4 <HAL_DMA_Start_IT+0x4ac>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d004      	beq.n	8009f68 <HAL_DMA_Start_IT+0x430>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a21      	ldr	r2, [pc, #132]	@ (8009fe8 <HAL_DMA_Start_IT+0x4b0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d108      	bne.n	8009f7a <HAL_DMA_Start_IT+0x442>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f042 0201 	orr.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	e012      	b.n	8009fa0 <HAL_DMA_Start_IT+0x468>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e009      	b.n	8009fa0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	40020010 	.word	0x40020010
 8009fb0:	40020028 	.word	0x40020028
 8009fb4:	40020040 	.word	0x40020040
 8009fb8:	40020058 	.word	0x40020058
 8009fbc:	40020070 	.word	0x40020070
 8009fc0:	40020088 	.word	0x40020088
 8009fc4:	400200a0 	.word	0x400200a0
 8009fc8:	400200b8 	.word	0x400200b8
 8009fcc:	40020410 	.word	0x40020410
 8009fd0:	40020428 	.word	0x40020428
 8009fd4:	40020440 	.word	0x40020440
 8009fd8:	40020458 	.word	0x40020458
 8009fdc:	40020470 	.word	0x40020470
 8009fe0:	40020488 	.word	0x40020488
 8009fe4:	400204a0 	.word	0x400204a0
 8009fe8:	400204b8 	.word	0x400204b8
 8009fec:	58025408 	.word	0x58025408
 8009ff0:	5802541c 	.word	0x5802541c
 8009ff4:	58025430 	.word	0x58025430
 8009ff8:	58025444 	.word	0x58025444
 8009ffc:	58025458 	.word	0x58025458
 800a000:	5802546c 	.word	0x5802546c
 800a004:	58025480 	.word	0x58025480
 800a008:	58025494 	.word	0x58025494

0800a00c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	@ 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a018:	4b67      	ldr	r3, [pc, #412]	@ (800a1b8 <HAL_DMA_IRQHandler+0x1ac>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a67      	ldr	r2, [pc, #412]	@ (800a1bc <HAL_DMA_IRQHandler+0x1b0>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	0a9b      	lsrs	r3, r3, #10
 800a024:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a030:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a5f      	ldr	r2, [pc, #380]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1b4>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d04a      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a5d      	ldr	r2, [pc, #372]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1b8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d045      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a5c      	ldr	r2, [pc, #368]	@ (800a1c8 <HAL_DMA_IRQHandler+0x1bc>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d040      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a5a      	ldr	r2, [pc, #360]	@ (800a1cc <HAL_DMA_IRQHandler+0x1c0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d03b      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a59      	ldr	r2, [pc, #356]	@ (800a1d0 <HAL_DMA_IRQHandler+0x1c4>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d036      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a57      	ldr	r2, [pc, #348]	@ (800a1d4 <HAL_DMA_IRQHandler+0x1c8>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d031      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a56      	ldr	r2, [pc, #344]	@ (800a1d8 <HAL_DMA_IRQHandler+0x1cc>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d02c      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a54      	ldr	r2, [pc, #336]	@ (800a1dc <HAL_DMA_IRQHandler+0x1d0>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d027      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a53      	ldr	r2, [pc, #332]	@ (800a1e0 <HAL_DMA_IRQHandler+0x1d4>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d022      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a51      	ldr	r2, [pc, #324]	@ (800a1e4 <HAL_DMA_IRQHandler+0x1d8>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d01d      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a50      	ldr	r2, [pc, #320]	@ (800a1e8 <HAL_DMA_IRQHandler+0x1dc>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d018      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a4e      	ldr	r2, [pc, #312]	@ (800a1ec <HAL_DMA_IRQHandler+0x1e0>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d013      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a4d      	ldr	r2, [pc, #308]	@ (800a1f0 <HAL_DMA_IRQHandler+0x1e4>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d00e      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a4b      	ldr	r2, [pc, #300]	@ (800a1f4 <HAL_DMA_IRQHandler+0x1e8>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d009      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a4a      	ldr	r2, [pc, #296]	@ (800a1f8 <HAL_DMA_IRQHandler+0x1ec>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d004      	beq.n	800a0de <HAL_DMA_IRQHandler+0xd2>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a48      	ldr	r2, [pc, #288]	@ (800a1fc <HAL_DMA_IRQHandler+0x1f0>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d101      	bne.n	800a0e2 <HAL_DMA_IRQHandler+0xd6>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <HAL_DMA_IRQHandler+0xd8>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 842b 	beq.w	800a940 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	2208      	movs	r2, #8
 800a0f4:	409a      	lsls	r2, r3
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80a2 	beq.w	800a244 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a2e      	ldr	r2, [pc, #184]	@ (800a1c0 <HAL_DMA_IRQHandler+0x1b4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d04a      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a2d      	ldr	r2, [pc, #180]	@ (800a1c4 <HAL_DMA_IRQHandler+0x1b8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d045      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a2b      	ldr	r2, [pc, #172]	@ (800a1c8 <HAL_DMA_IRQHandler+0x1bc>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d040      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a2a      	ldr	r2, [pc, #168]	@ (800a1cc <HAL_DMA_IRQHandler+0x1c0>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d03b      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a28      	ldr	r2, [pc, #160]	@ (800a1d0 <HAL_DMA_IRQHandler+0x1c4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d036      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a27      	ldr	r2, [pc, #156]	@ (800a1d4 <HAL_DMA_IRQHandler+0x1c8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d031      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a25      	ldr	r2, [pc, #148]	@ (800a1d8 <HAL_DMA_IRQHandler+0x1cc>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d02c      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a24      	ldr	r2, [pc, #144]	@ (800a1dc <HAL_DMA_IRQHandler+0x1d0>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d027      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a22      	ldr	r2, [pc, #136]	@ (800a1e0 <HAL_DMA_IRQHandler+0x1d4>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d022      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a21      	ldr	r2, [pc, #132]	@ (800a1e4 <HAL_DMA_IRQHandler+0x1d8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d01d      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1f      	ldr	r2, [pc, #124]	@ (800a1e8 <HAL_DMA_IRQHandler+0x1dc>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d018      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1e      	ldr	r2, [pc, #120]	@ (800a1ec <HAL_DMA_IRQHandler+0x1e0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d013      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1f0 <HAL_DMA_IRQHandler+0x1e4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d00e      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f4 <HAL_DMA_IRQHandler+0x1e8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d009      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <HAL_DMA_IRQHandler+0x1ec>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d004      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x194>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a18      	ldr	r2, [pc, #96]	@ (800a1fc <HAL_DMA_IRQHandler+0x1f0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d12f      	bne.n	800a200 <HAL_DMA_IRQHandler+0x1f4>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bf14      	ite	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	2300      	moveq	r3, #0
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	e02e      	b.n	800a214 <HAL_DMA_IRQHandler+0x208>
 800a1b6:	bf00      	nop
 800a1b8:	24000000 	.word	0x24000000
 800a1bc:	1b4e81b5 	.word	0x1b4e81b5
 800a1c0:	40020010 	.word	0x40020010
 800a1c4:	40020028 	.word	0x40020028
 800a1c8:	40020040 	.word	0x40020040
 800a1cc:	40020058 	.word	0x40020058
 800a1d0:	40020070 	.word	0x40020070
 800a1d4:	40020088 	.word	0x40020088
 800a1d8:	400200a0 	.word	0x400200a0
 800a1dc:	400200b8 	.word	0x400200b8
 800a1e0:	40020410 	.word	0x40020410
 800a1e4:	40020428 	.word	0x40020428
 800a1e8:	40020440 	.word	0x40020440
 800a1ec:	40020458 	.word	0x40020458
 800a1f0:	40020470 	.word	0x40020470
 800a1f4:	40020488 	.word	0x40020488
 800a1f8:	400204a0 	.word	0x400204a0
 800a1fc:	400204b8 	.word	0x400204b8
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bf14      	ite	ne
 800a20e:	2301      	movne	r3, #1
 800a210:	2300      	moveq	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d015      	beq.n	800a244 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0204 	bic.w	r2, r2, #4
 800a226:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a22c:	f003 031f 	and.w	r3, r3, #31
 800a230:	2208      	movs	r2, #8
 800a232:	409a      	lsls	r2, r3
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23c:	f043 0201 	orr.w	r2, r3, #1
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a248:	f003 031f 	and.w	r3, r3, #31
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	fa22 f303 	lsr.w	r3, r2, r3
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d06e      	beq.n	800a338 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a69      	ldr	r2, [pc, #420]	@ (800a404 <HAL_DMA_IRQHandler+0x3f8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d04a      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a67      	ldr	r2, [pc, #412]	@ (800a408 <HAL_DMA_IRQHandler+0x3fc>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d045      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a66      	ldr	r2, [pc, #408]	@ (800a40c <HAL_DMA_IRQHandler+0x400>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d040      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a64      	ldr	r2, [pc, #400]	@ (800a410 <HAL_DMA_IRQHandler+0x404>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d03b      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a63      	ldr	r2, [pc, #396]	@ (800a414 <HAL_DMA_IRQHandler+0x408>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d036      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a61      	ldr	r2, [pc, #388]	@ (800a418 <HAL_DMA_IRQHandler+0x40c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d031      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a60      	ldr	r2, [pc, #384]	@ (800a41c <HAL_DMA_IRQHandler+0x410>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d02c      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a5e      	ldr	r2, [pc, #376]	@ (800a420 <HAL_DMA_IRQHandler+0x414>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d027      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a5d      	ldr	r2, [pc, #372]	@ (800a424 <HAL_DMA_IRQHandler+0x418>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d022      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a5b      	ldr	r2, [pc, #364]	@ (800a428 <HAL_DMA_IRQHandler+0x41c>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d01d      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a5a      	ldr	r2, [pc, #360]	@ (800a42c <HAL_DMA_IRQHandler+0x420>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d018      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a58      	ldr	r2, [pc, #352]	@ (800a430 <HAL_DMA_IRQHandler+0x424>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d013      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a57      	ldr	r2, [pc, #348]	@ (800a434 <HAL_DMA_IRQHandler+0x428>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d00e      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a55      	ldr	r2, [pc, #340]	@ (800a438 <HAL_DMA_IRQHandler+0x42c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d009      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a54      	ldr	r2, [pc, #336]	@ (800a43c <HAL_DMA_IRQHandler+0x430>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d004      	beq.n	800a2fa <HAL_DMA_IRQHandler+0x2ee>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a52      	ldr	r2, [pc, #328]	@ (800a440 <HAL_DMA_IRQHandler+0x434>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d10a      	bne.n	800a310 <HAL_DMA_IRQHandler+0x304>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a304:	2b00      	cmp	r3, #0
 800a306:	bf14      	ite	ne
 800a308:	2301      	movne	r3, #1
 800a30a:	2300      	moveq	r3, #0
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	e003      	b.n	800a318 <HAL_DMA_IRQHandler+0x30c>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2300      	movs	r3, #0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00d      	beq.n	800a338 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a320:	f003 031f 	and.w	r3, r3, #31
 800a324:	2201      	movs	r2, #1
 800a326:	409a      	lsls	r2, r3
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a330:	f043 0202 	orr.w	r2, r3, #2
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a33c:	f003 031f 	and.w	r3, r3, #31
 800a340:	2204      	movs	r2, #4
 800a342:	409a      	lsls	r2, r3
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	4013      	ands	r3, r2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 808f 	beq.w	800a46c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a2c      	ldr	r2, [pc, #176]	@ (800a404 <HAL_DMA_IRQHandler+0x3f8>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d04a      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a2a      	ldr	r2, [pc, #168]	@ (800a408 <HAL_DMA_IRQHandler+0x3fc>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d045      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a29      	ldr	r2, [pc, #164]	@ (800a40c <HAL_DMA_IRQHandler+0x400>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d040      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a27      	ldr	r2, [pc, #156]	@ (800a410 <HAL_DMA_IRQHandler+0x404>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d03b      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a26      	ldr	r2, [pc, #152]	@ (800a414 <HAL_DMA_IRQHandler+0x408>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d036      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a24      	ldr	r2, [pc, #144]	@ (800a418 <HAL_DMA_IRQHandler+0x40c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d031      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a23      	ldr	r2, [pc, #140]	@ (800a41c <HAL_DMA_IRQHandler+0x410>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d02c      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a21      	ldr	r2, [pc, #132]	@ (800a420 <HAL_DMA_IRQHandler+0x414>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d027      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a20      	ldr	r2, [pc, #128]	@ (800a424 <HAL_DMA_IRQHandler+0x418>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d022      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a1e      	ldr	r2, [pc, #120]	@ (800a428 <HAL_DMA_IRQHandler+0x41c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d01d      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a42c <HAL_DMA_IRQHandler+0x420>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d018      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a430 <HAL_DMA_IRQHandler+0x424>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d013      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a434 <HAL_DMA_IRQHandler+0x428>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00e      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a18      	ldr	r2, [pc, #96]	@ (800a438 <HAL_DMA_IRQHandler+0x42c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d009      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a17      	ldr	r2, [pc, #92]	@ (800a43c <HAL_DMA_IRQHandler+0x430>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d004      	beq.n	800a3ee <HAL_DMA_IRQHandler+0x3e2>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a15      	ldr	r2, [pc, #84]	@ (800a440 <HAL_DMA_IRQHandler+0x434>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d12a      	bne.n	800a444 <HAL_DMA_IRQHandler+0x438>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bf14      	ite	ne
 800a3fc:	2301      	movne	r3, #1
 800a3fe:	2300      	moveq	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	e023      	b.n	800a44c <HAL_DMA_IRQHandler+0x440>
 800a404:	40020010 	.word	0x40020010
 800a408:	40020028 	.word	0x40020028
 800a40c:	40020040 	.word	0x40020040
 800a410:	40020058 	.word	0x40020058
 800a414:	40020070 	.word	0x40020070
 800a418:	40020088 	.word	0x40020088
 800a41c:	400200a0 	.word	0x400200a0
 800a420:	400200b8 	.word	0x400200b8
 800a424:	40020410 	.word	0x40020410
 800a428:	40020428 	.word	0x40020428
 800a42c:	40020440 	.word	0x40020440
 800a430:	40020458 	.word	0x40020458
 800a434:	40020470 	.word	0x40020470
 800a438:	40020488 	.word	0x40020488
 800a43c:	400204a0 	.word	0x400204a0
 800a440:	400204b8 	.word	0x400204b8
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a454:	f003 031f 	and.w	r3, r3, #31
 800a458:	2204      	movs	r2, #4
 800a45a:	409a      	lsls	r2, r3
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a464:	f043 0204 	orr.w	r2, r3, #4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a470:	f003 031f 	and.w	r3, r3, #31
 800a474:	2210      	movs	r2, #16
 800a476:	409a      	lsls	r2, r3
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	4013      	ands	r3, r2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80a6 	beq.w	800a5ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a85      	ldr	r2, [pc, #532]	@ (800a69c <HAL_DMA_IRQHandler+0x690>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d04a      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a83      	ldr	r2, [pc, #524]	@ (800a6a0 <HAL_DMA_IRQHandler+0x694>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d045      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a82      	ldr	r2, [pc, #520]	@ (800a6a4 <HAL_DMA_IRQHandler+0x698>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d040      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a80      	ldr	r2, [pc, #512]	@ (800a6a8 <HAL_DMA_IRQHandler+0x69c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d03b      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a7f      	ldr	r2, [pc, #508]	@ (800a6ac <HAL_DMA_IRQHandler+0x6a0>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d036      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a7d      	ldr	r2, [pc, #500]	@ (800a6b0 <HAL_DMA_IRQHandler+0x6a4>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d031      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a7c      	ldr	r2, [pc, #496]	@ (800a6b4 <HAL_DMA_IRQHandler+0x6a8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d02c      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a7a      	ldr	r2, [pc, #488]	@ (800a6b8 <HAL_DMA_IRQHandler+0x6ac>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d027      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a79      	ldr	r2, [pc, #484]	@ (800a6bc <HAL_DMA_IRQHandler+0x6b0>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d022      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a77      	ldr	r2, [pc, #476]	@ (800a6c0 <HAL_DMA_IRQHandler+0x6b4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d01d      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a76      	ldr	r2, [pc, #472]	@ (800a6c4 <HAL_DMA_IRQHandler+0x6b8>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d018      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a74      	ldr	r2, [pc, #464]	@ (800a6c8 <HAL_DMA_IRQHandler+0x6bc>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d013      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a73      	ldr	r2, [pc, #460]	@ (800a6cc <HAL_DMA_IRQHandler+0x6c0>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d00e      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a71      	ldr	r2, [pc, #452]	@ (800a6d0 <HAL_DMA_IRQHandler+0x6c4>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d009      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a70      	ldr	r2, [pc, #448]	@ (800a6d4 <HAL_DMA_IRQHandler+0x6c8>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d004      	beq.n	800a522 <HAL_DMA_IRQHandler+0x516>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a6e      	ldr	r2, [pc, #440]	@ (800a6d8 <HAL_DMA_IRQHandler+0x6cc>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d10a      	bne.n	800a538 <HAL_DMA_IRQHandler+0x52c>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bf14      	ite	ne
 800a530:	2301      	movne	r3, #1
 800a532:	2300      	moveq	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	e009      	b.n	800a54c <HAL_DMA_IRQHandler+0x540>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0304 	and.w	r3, r3, #4
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf14      	ite	ne
 800a546:	2301      	movne	r3, #1
 800a548:	2300      	moveq	r3, #0
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d03e      	beq.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	2210      	movs	r2, #16
 800a55a:	409a      	lsls	r2, r3
 800a55c:	6a3b      	ldr	r3, [r7, #32]
 800a55e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d018      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d108      	bne.n	800a58e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a580:	2b00      	cmp	r3, #0
 800a582:	d024      	beq.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	4798      	blx	r3
 800a58c:	e01f      	b.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01b      	beq.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
 800a59e:	e016      	b.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0208 	bic.w	r2, r2, #8
 800a5bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d2:	f003 031f 	and.w	r3, r3, #31
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	409a      	lsls	r2, r3
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 8110 	beq.w	800a804 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a2c      	ldr	r2, [pc, #176]	@ (800a69c <HAL_DMA_IRQHandler+0x690>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d04a      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a2b      	ldr	r2, [pc, #172]	@ (800a6a0 <HAL_DMA_IRQHandler+0x694>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d045      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a29      	ldr	r2, [pc, #164]	@ (800a6a4 <HAL_DMA_IRQHandler+0x698>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d040      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a28      	ldr	r2, [pc, #160]	@ (800a6a8 <HAL_DMA_IRQHandler+0x69c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d03b      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a26      	ldr	r2, [pc, #152]	@ (800a6ac <HAL_DMA_IRQHandler+0x6a0>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d036      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a25      	ldr	r2, [pc, #148]	@ (800a6b0 <HAL_DMA_IRQHandler+0x6a4>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d031      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a23      	ldr	r2, [pc, #140]	@ (800a6b4 <HAL_DMA_IRQHandler+0x6a8>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d02c      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a22      	ldr	r2, [pc, #136]	@ (800a6b8 <HAL_DMA_IRQHandler+0x6ac>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d027      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a20      	ldr	r2, [pc, #128]	@ (800a6bc <HAL_DMA_IRQHandler+0x6b0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d022      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c0 <HAL_DMA_IRQHandler+0x6b4>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d01d      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6c4 <HAL_DMA_IRQHandler+0x6b8>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d018      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a1c      	ldr	r2, [pc, #112]	@ (800a6c8 <HAL_DMA_IRQHandler+0x6bc>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d013      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1a      	ldr	r2, [pc, #104]	@ (800a6cc <HAL_DMA_IRQHandler+0x6c0>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d00e      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a19      	ldr	r2, [pc, #100]	@ (800a6d0 <HAL_DMA_IRQHandler+0x6c4>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a17      	ldr	r2, [pc, #92]	@ (800a6d4 <HAL_DMA_IRQHandler+0x6c8>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d004      	beq.n	800a684 <HAL_DMA_IRQHandler+0x678>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <HAL_DMA_IRQHandler+0x6cc>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d12b      	bne.n	800a6dc <HAL_DMA_IRQHandler+0x6d0>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0310 	and.w	r3, r3, #16
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bf14      	ite	ne
 800a692:	2301      	movne	r3, #1
 800a694:	2300      	moveq	r3, #0
 800a696:	b2db      	uxtb	r3, r3
 800a698:	e02a      	b.n	800a6f0 <HAL_DMA_IRQHandler+0x6e4>
 800a69a:	bf00      	nop
 800a69c:	40020010 	.word	0x40020010
 800a6a0:	40020028 	.word	0x40020028
 800a6a4:	40020040 	.word	0x40020040
 800a6a8:	40020058 	.word	0x40020058
 800a6ac:	40020070 	.word	0x40020070
 800a6b0:	40020088 	.word	0x40020088
 800a6b4:	400200a0 	.word	0x400200a0
 800a6b8:	400200b8 	.word	0x400200b8
 800a6bc:	40020410 	.word	0x40020410
 800a6c0:	40020428 	.word	0x40020428
 800a6c4:	40020440 	.word	0x40020440
 800a6c8:	40020458 	.word	0x40020458
 800a6cc:	40020470 	.word	0x40020470
 800a6d0:	40020488 	.word	0x40020488
 800a6d4:	400204a0 	.word	0x400204a0
 800a6d8:	400204b8 	.word	0x400204b8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	bf14      	ite	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	2300      	moveq	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8087 	beq.w	800a804 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6fa:	f003 031f 	and.w	r3, r3, #31
 800a6fe:	2220      	movs	r2, #32
 800a700:	409a      	lsls	r2, r3
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d139      	bne.n	800a786 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0216 	bic.w	r2, r2, #22
 800a720:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	695a      	ldr	r2, [r3, #20]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a730:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a736:	2b00      	cmp	r3, #0
 800a738:	d103      	bne.n	800a742 <HAL_DMA_IRQHandler+0x736>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d007      	beq.n	800a752 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0208 	bic.w	r2, r2, #8
 800a750:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	223f      	movs	r2, #63	@ 0x3f
 800a75c:	409a      	lsls	r2, r3
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 834a 	beq.w	800ae10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	4798      	blx	r3
          }
          return;
 800a784:	e344      	b.n	800ae10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d018      	beq.n	800a7c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d108      	bne.n	800a7b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d02c      	beq.n	800a804 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
 800a7b2:	e027      	b.n	800a804 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d023      	beq.n	800a804 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
 800a7c4:	e01e      	b.n	800a804 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10f      	bne.n	800a7f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0210 	bic.w	r2, r2, #16
 800a7e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 8306 	beq.w	800ae1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 8088 	beq.w	800a92c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2204      	movs	r2, #4
 800a820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a7a      	ldr	r2, [pc, #488]	@ (800aa14 <HAL_DMA_IRQHandler+0xa08>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d04a      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a79      	ldr	r2, [pc, #484]	@ (800aa18 <HAL_DMA_IRQHandler+0xa0c>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d045      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a77      	ldr	r2, [pc, #476]	@ (800aa1c <HAL_DMA_IRQHandler+0xa10>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d040      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a76      	ldr	r2, [pc, #472]	@ (800aa20 <HAL_DMA_IRQHandler+0xa14>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d03b      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a74      	ldr	r2, [pc, #464]	@ (800aa24 <HAL_DMA_IRQHandler+0xa18>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d036      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a73      	ldr	r2, [pc, #460]	@ (800aa28 <HAL_DMA_IRQHandler+0xa1c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d031      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a71      	ldr	r2, [pc, #452]	@ (800aa2c <HAL_DMA_IRQHandler+0xa20>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d02c      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a70      	ldr	r2, [pc, #448]	@ (800aa30 <HAL_DMA_IRQHandler+0xa24>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d027      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a6e      	ldr	r2, [pc, #440]	@ (800aa34 <HAL_DMA_IRQHandler+0xa28>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d022      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a6d      	ldr	r2, [pc, #436]	@ (800aa38 <HAL_DMA_IRQHandler+0xa2c>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d01d      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a6b      	ldr	r2, [pc, #428]	@ (800aa3c <HAL_DMA_IRQHandler+0xa30>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d018      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a6a      	ldr	r2, [pc, #424]	@ (800aa40 <HAL_DMA_IRQHandler+0xa34>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d013      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a68      	ldr	r2, [pc, #416]	@ (800aa44 <HAL_DMA_IRQHandler+0xa38>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00e      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a67      	ldr	r2, [pc, #412]	@ (800aa48 <HAL_DMA_IRQHandler+0xa3c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d009      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a65      	ldr	r2, [pc, #404]	@ (800aa4c <HAL_DMA_IRQHandler+0xa40>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d004      	beq.n	800a8c4 <HAL_DMA_IRQHandler+0x8b8>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a64      	ldr	r2, [pc, #400]	@ (800aa50 <HAL_DMA_IRQHandler+0xa44>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d108      	bne.n	800a8d6 <HAL_DMA_IRQHandler+0x8ca>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0201 	bic.w	r2, r2, #1
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e007      	b.n	800a8e6 <HAL_DMA_IRQHandler+0x8da>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0201 	bic.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d307      	bcc.n	800a902 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1f2      	bne.n	800a8e6 <HAL_DMA_IRQHandler+0x8da>
 800a900:	e000      	b.n	800a904 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a902:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d004      	beq.n	800a91c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2203      	movs	r2, #3
 800a916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a91a:	e003      	b.n	800a924 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8272 	beq.w	800ae1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	4798      	blx	r3
 800a93e:	e26c      	b.n	800ae1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a43      	ldr	r2, [pc, #268]	@ (800aa54 <HAL_DMA_IRQHandler+0xa48>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d022      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a42      	ldr	r2, [pc, #264]	@ (800aa58 <HAL_DMA_IRQHandler+0xa4c>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d01d      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a40      	ldr	r2, [pc, #256]	@ (800aa5c <HAL_DMA_IRQHandler+0xa50>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d018      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a3f      	ldr	r2, [pc, #252]	@ (800aa60 <HAL_DMA_IRQHandler+0xa54>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d013      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a3d      	ldr	r2, [pc, #244]	@ (800aa64 <HAL_DMA_IRQHandler+0xa58>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00e      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a3c      	ldr	r2, [pc, #240]	@ (800aa68 <HAL_DMA_IRQHandler+0xa5c>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d009      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a3a      	ldr	r2, [pc, #232]	@ (800aa6c <HAL_DMA_IRQHandler+0xa60>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d004      	beq.n	800a990 <HAL_DMA_IRQHandler+0x984>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a39      	ldr	r2, [pc, #228]	@ (800aa70 <HAL_DMA_IRQHandler+0xa64>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d101      	bne.n	800a994 <HAL_DMA_IRQHandler+0x988>
 800a990:	2301      	movs	r3, #1
 800a992:	e000      	b.n	800a996 <HAL_DMA_IRQHandler+0x98a>
 800a994:	2300      	movs	r3, #0
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 823f 	beq.w	800ae1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9a8:	f003 031f 	and.w	r3, r3, #31
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	409a      	lsls	r2, r3
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 80cd 	beq.w	800ab54 <HAL_DMA_IRQHandler+0xb48>
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 80c7 	beq.w	800ab54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	2204      	movs	r2, #4
 800a9d0:	409a      	lsls	r2, r3
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d049      	beq.n	800aa74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d109      	bne.n	800a9fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 8210 	beq.w	800ae14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9fc:	e20a      	b.n	800ae14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8206 	beq.w	800ae14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa10:	e200      	b.n	800ae14 <HAL_DMA_IRQHandler+0xe08>
 800aa12:	bf00      	nop
 800aa14:	40020010 	.word	0x40020010
 800aa18:	40020028 	.word	0x40020028
 800aa1c:	40020040 	.word	0x40020040
 800aa20:	40020058 	.word	0x40020058
 800aa24:	40020070 	.word	0x40020070
 800aa28:	40020088 	.word	0x40020088
 800aa2c:	400200a0 	.word	0x400200a0
 800aa30:	400200b8 	.word	0x400200b8
 800aa34:	40020410 	.word	0x40020410
 800aa38:	40020428 	.word	0x40020428
 800aa3c:	40020440 	.word	0x40020440
 800aa40:	40020458 	.word	0x40020458
 800aa44:	40020470 	.word	0x40020470
 800aa48:	40020488 	.word	0x40020488
 800aa4c:	400204a0 	.word	0x400204a0
 800aa50:	400204b8 	.word	0x400204b8
 800aa54:	58025408 	.word	0x58025408
 800aa58:	5802541c 	.word	0x5802541c
 800aa5c:	58025430 	.word	0x58025430
 800aa60:	58025444 	.word	0x58025444
 800aa64:	58025458 	.word	0x58025458
 800aa68:	5802546c 	.word	0x5802546c
 800aa6c:	58025480 	.word	0x58025480
 800aa70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d160      	bne.n	800ab40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a7f      	ldr	r2, [pc, #508]	@ (800ac80 <HAL_DMA_IRQHandler+0xc74>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d04a      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a7d      	ldr	r2, [pc, #500]	@ (800ac84 <HAL_DMA_IRQHandler+0xc78>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d045      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a7c      	ldr	r2, [pc, #496]	@ (800ac88 <HAL_DMA_IRQHandler+0xc7c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d040      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a7a      	ldr	r2, [pc, #488]	@ (800ac8c <HAL_DMA_IRQHandler+0xc80>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d03b      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a79      	ldr	r2, [pc, #484]	@ (800ac90 <HAL_DMA_IRQHandler+0xc84>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d036      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a77      	ldr	r2, [pc, #476]	@ (800ac94 <HAL_DMA_IRQHandler+0xc88>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d031      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a76      	ldr	r2, [pc, #472]	@ (800ac98 <HAL_DMA_IRQHandler+0xc8c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d02c      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a74      	ldr	r2, [pc, #464]	@ (800ac9c <HAL_DMA_IRQHandler+0xc90>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d027      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a73      	ldr	r2, [pc, #460]	@ (800aca0 <HAL_DMA_IRQHandler+0xc94>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d022      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a71      	ldr	r2, [pc, #452]	@ (800aca4 <HAL_DMA_IRQHandler+0xc98>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d01d      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a70      	ldr	r2, [pc, #448]	@ (800aca8 <HAL_DMA_IRQHandler+0xc9c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d018      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a6e      	ldr	r2, [pc, #440]	@ (800acac <HAL_DMA_IRQHandler+0xca0>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d013      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a6d      	ldr	r2, [pc, #436]	@ (800acb0 <HAL_DMA_IRQHandler+0xca4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00e      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a6b      	ldr	r2, [pc, #428]	@ (800acb4 <HAL_DMA_IRQHandler+0xca8>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d009      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a6a      	ldr	r2, [pc, #424]	@ (800acb8 <HAL_DMA_IRQHandler+0xcac>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d004      	beq.n	800ab1e <HAL_DMA_IRQHandler+0xb12>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a68      	ldr	r2, [pc, #416]	@ (800acbc <HAL_DMA_IRQHandler+0xcb0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d108      	bne.n	800ab30 <HAL_DMA_IRQHandler+0xb24>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 0208 	bic.w	r2, r2, #8
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	e007      	b.n	800ab40 <HAL_DMA_IRQHandler+0xb34>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0204 	bic.w	r2, r2, #4
 800ab3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 8165 	beq.w	800ae14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab52:	e15f      	b.n	800ae14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	2202      	movs	r2, #2
 800ab5e:	409a      	lsls	r2, r3
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	4013      	ands	r3, r2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80c5 	beq.w	800acf4 <HAL_DMA_IRQHandler+0xce8>
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 80bf 	beq.w	800acf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab7a:	f003 031f 	and.w	r3, r3, #31
 800ab7e:	2202      	movs	r2, #2
 800ab80:	409a      	lsls	r2, r3
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d018      	beq.n	800abc2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d109      	bne.n	800abae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 813a 	beq.w	800ae18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800abac:	e134      	b.n	800ae18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 8130 	beq.w	800ae18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800abc0:	e12a      	b.n	800ae18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f040 8089 	bne.w	800ace0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a2b      	ldr	r2, [pc, #172]	@ (800ac80 <HAL_DMA_IRQHandler+0xc74>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d04a      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a29      	ldr	r2, [pc, #164]	@ (800ac84 <HAL_DMA_IRQHandler+0xc78>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d045      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a28      	ldr	r2, [pc, #160]	@ (800ac88 <HAL_DMA_IRQHandler+0xc7c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d040      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a26      	ldr	r2, [pc, #152]	@ (800ac8c <HAL_DMA_IRQHandler+0xc80>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d03b      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a25      	ldr	r2, [pc, #148]	@ (800ac90 <HAL_DMA_IRQHandler+0xc84>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d036      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a23      	ldr	r2, [pc, #140]	@ (800ac94 <HAL_DMA_IRQHandler+0xc88>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d031      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a22      	ldr	r2, [pc, #136]	@ (800ac98 <HAL_DMA_IRQHandler+0xc8c>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d02c      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a20      	ldr	r2, [pc, #128]	@ (800ac9c <HAL_DMA_IRQHandler+0xc90>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d027      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a1f      	ldr	r2, [pc, #124]	@ (800aca0 <HAL_DMA_IRQHandler+0xc94>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d022      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a1d      	ldr	r2, [pc, #116]	@ (800aca4 <HAL_DMA_IRQHandler+0xc98>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d01d      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a1c      	ldr	r2, [pc, #112]	@ (800aca8 <HAL_DMA_IRQHandler+0xc9c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d018      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a1a      	ldr	r2, [pc, #104]	@ (800acac <HAL_DMA_IRQHandler+0xca0>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a19      	ldr	r2, [pc, #100]	@ (800acb0 <HAL_DMA_IRQHandler+0xca4>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a17      	ldr	r2, [pc, #92]	@ (800acb4 <HAL_DMA_IRQHandler+0xca8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a16      	ldr	r2, [pc, #88]	@ (800acb8 <HAL_DMA_IRQHandler+0xcac>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_DMA_IRQHandler+0xc62>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a14      	ldr	r2, [pc, #80]	@ (800acbc <HAL_DMA_IRQHandler+0xcb0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d128      	bne.n	800acc0 <HAL_DMA_IRQHandler+0xcb4>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f022 0214 	bic.w	r2, r2, #20
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e027      	b.n	800acd0 <HAL_DMA_IRQHandler+0xcc4>
 800ac80:	40020010 	.word	0x40020010
 800ac84:	40020028 	.word	0x40020028
 800ac88:	40020040 	.word	0x40020040
 800ac8c:	40020058 	.word	0x40020058
 800ac90:	40020070 	.word	0x40020070
 800ac94:	40020088 	.word	0x40020088
 800ac98:	400200a0 	.word	0x400200a0
 800ac9c:	400200b8 	.word	0x400200b8
 800aca0:	40020410 	.word	0x40020410
 800aca4:	40020428 	.word	0x40020428
 800aca8:	40020440 	.word	0x40020440
 800acac:	40020458 	.word	0x40020458
 800acb0:	40020470 	.word	0x40020470
 800acb4:	40020488 	.word	0x40020488
 800acb8:	400204a0 	.word	0x400204a0
 800acbc:	400204b8 	.word	0x400204b8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 020a 	bic.w	r2, r2, #10
 800acce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8097 	beq.w	800ae18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acf2:	e091      	b.n	800ae18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acf8:	f003 031f 	and.w	r3, r3, #31
 800acfc:	2208      	movs	r2, #8
 800acfe:	409a      	lsls	r2, r3
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	4013      	ands	r3, r2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8088 	beq.w	800ae1a <HAL_DMA_IRQHandler+0xe0e>
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f003 0308 	and.w	r3, r3, #8
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8082 	beq.w	800ae1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a41      	ldr	r2, [pc, #260]	@ (800ae20 <HAL_DMA_IRQHandler+0xe14>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d04a      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a3f      	ldr	r2, [pc, #252]	@ (800ae24 <HAL_DMA_IRQHandler+0xe18>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d045      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a3e      	ldr	r2, [pc, #248]	@ (800ae28 <HAL_DMA_IRQHandler+0xe1c>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d040      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a3c      	ldr	r2, [pc, #240]	@ (800ae2c <HAL_DMA_IRQHandler+0xe20>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d03b      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a3b      	ldr	r2, [pc, #236]	@ (800ae30 <HAL_DMA_IRQHandler+0xe24>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d036      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a39      	ldr	r2, [pc, #228]	@ (800ae34 <HAL_DMA_IRQHandler+0xe28>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d031      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a38      	ldr	r2, [pc, #224]	@ (800ae38 <HAL_DMA_IRQHandler+0xe2c>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d02c      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a36      	ldr	r2, [pc, #216]	@ (800ae3c <HAL_DMA_IRQHandler+0xe30>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d027      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a35      	ldr	r2, [pc, #212]	@ (800ae40 <HAL_DMA_IRQHandler+0xe34>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d022      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a33      	ldr	r2, [pc, #204]	@ (800ae44 <HAL_DMA_IRQHandler+0xe38>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d01d      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a32      	ldr	r2, [pc, #200]	@ (800ae48 <HAL_DMA_IRQHandler+0xe3c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d018      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a30      	ldr	r2, [pc, #192]	@ (800ae4c <HAL_DMA_IRQHandler+0xe40>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d013      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a2f      	ldr	r2, [pc, #188]	@ (800ae50 <HAL_DMA_IRQHandler+0xe44>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d00e      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a2d      	ldr	r2, [pc, #180]	@ (800ae54 <HAL_DMA_IRQHandler+0xe48>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d009      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a2c      	ldr	r2, [pc, #176]	@ (800ae58 <HAL_DMA_IRQHandler+0xe4c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d004      	beq.n	800adb6 <HAL_DMA_IRQHandler+0xdaa>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a2a      	ldr	r2, [pc, #168]	@ (800ae5c <HAL_DMA_IRQHandler+0xe50>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d108      	bne.n	800adc8 <HAL_DMA_IRQHandler+0xdbc>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 021c 	bic.w	r2, r2, #28
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e007      	b.n	800add8 <HAL_DMA_IRQHandler+0xdcc>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 020e 	bic.w	r2, r2, #14
 800add6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800addc:	f003 031f 	and.w	r3, r3, #31
 800ade0:	2201      	movs	r2, #1
 800ade2:	409a      	lsls	r2, r3
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
 800ae0e:	e004      	b.n	800ae1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800ae10:	bf00      	nop
 800ae12:	e002      	b.n	800ae1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae14:	bf00      	nop
 800ae16:	e000      	b.n	800ae1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ae1a:	3728      	adds	r7, #40	@ 0x28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	40020010 	.word	0x40020010
 800ae24:	40020028 	.word	0x40020028
 800ae28:	40020040 	.word	0x40020040
 800ae2c:	40020058 	.word	0x40020058
 800ae30:	40020070 	.word	0x40020070
 800ae34:	40020088 	.word	0x40020088
 800ae38:	400200a0 	.word	0x400200a0
 800ae3c:	400200b8 	.word	0x400200b8
 800ae40:	40020410 	.word	0x40020410
 800ae44:	40020428 	.word	0x40020428
 800ae48:	40020440 	.word	0x40020440
 800ae4c:	40020458 	.word	0x40020458
 800ae50:	40020470 	.word	0x40020470
 800ae54:	40020488 	.word	0x40020488
 800ae58:	400204a0 	.word	0x400204a0
 800ae5c:	400204b8 	.word	0x400204b8

0800ae60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a7f      	ldr	r2, [pc, #508]	@ (800b07c <DMA_SetConfig+0x21c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d072      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a7d      	ldr	r2, [pc, #500]	@ (800b080 <DMA_SetConfig+0x220>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d06d      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a7c      	ldr	r2, [pc, #496]	@ (800b084 <DMA_SetConfig+0x224>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d068      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a7a      	ldr	r2, [pc, #488]	@ (800b088 <DMA_SetConfig+0x228>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d063      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a79      	ldr	r2, [pc, #484]	@ (800b08c <DMA_SetConfig+0x22c>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d05e      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a77      	ldr	r2, [pc, #476]	@ (800b090 <DMA_SetConfig+0x230>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d059      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a76      	ldr	r2, [pc, #472]	@ (800b094 <DMA_SetConfig+0x234>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d054      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a74      	ldr	r2, [pc, #464]	@ (800b098 <DMA_SetConfig+0x238>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d04f      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a73      	ldr	r2, [pc, #460]	@ (800b09c <DMA_SetConfig+0x23c>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d04a      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a71      	ldr	r2, [pc, #452]	@ (800b0a0 <DMA_SetConfig+0x240>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d045      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a70      	ldr	r2, [pc, #448]	@ (800b0a4 <DMA_SetConfig+0x244>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d040      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a6e      	ldr	r2, [pc, #440]	@ (800b0a8 <DMA_SetConfig+0x248>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d03b      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a6d      	ldr	r2, [pc, #436]	@ (800b0ac <DMA_SetConfig+0x24c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d036      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a6b      	ldr	r2, [pc, #428]	@ (800b0b0 <DMA_SetConfig+0x250>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d031      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a6a      	ldr	r2, [pc, #424]	@ (800b0b4 <DMA_SetConfig+0x254>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d02c      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a68      	ldr	r2, [pc, #416]	@ (800b0b8 <DMA_SetConfig+0x258>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d027      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a67      	ldr	r2, [pc, #412]	@ (800b0bc <DMA_SetConfig+0x25c>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d022      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a65      	ldr	r2, [pc, #404]	@ (800b0c0 <DMA_SetConfig+0x260>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d01d      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a64      	ldr	r2, [pc, #400]	@ (800b0c4 <DMA_SetConfig+0x264>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d018      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a62      	ldr	r2, [pc, #392]	@ (800b0c8 <DMA_SetConfig+0x268>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d013      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a61      	ldr	r2, [pc, #388]	@ (800b0cc <DMA_SetConfig+0x26c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d00e      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a5f      	ldr	r2, [pc, #380]	@ (800b0d0 <DMA_SetConfig+0x270>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d009      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a5e      	ldr	r2, [pc, #376]	@ (800b0d4 <DMA_SetConfig+0x274>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d004      	beq.n	800af6a <DMA_SetConfig+0x10a>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a5c      	ldr	r2, [pc, #368]	@ (800b0d8 <DMA_SetConfig+0x278>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d101      	bne.n	800af6e <DMA_SetConfig+0x10e>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <DMA_SetConfig+0x110>
 800af6e:	2300      	movs	r3, #0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00d      	beq.n	800af90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800af7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800af8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a39      	ldr	r2, [pc, #228]	@ (800b07c <DMA_SetConfig+0x21c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d04a      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a38      	ldr	r2, [pc, #224]	@ (800b080 <DMA_SetConfig+0x220>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d045      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a36      	ldr	r2, [pc, #216]	@ (800b084 <DMA_SetConfig+0x224>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d040      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a35      	ldr	r2, [pc, #212]	@ (800b088 <DMA_SetConfig+0x228>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d03b      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a33      	ldr	r2, [pc, #204]	@ (800b08c <DMA_SetConfig+0x22c>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d036      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a32      	ldr	r2, [pc, #200]	@ (800b090 <DMA_SetConfig+0x230>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d031      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a30      	ldr	r2, [pc, #192]	@ (800b094 <DMA_SetConfig+0x234>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d02c      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a2f      	ldr	r2, [pc, #188]	@ (800b098 <DMA_SetConfig+0x238>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d027      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a2d      	ldr	r2, [pc, #180]	@ (800b09c <DMA_SetConfig+0x23c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d022      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a2c      	ldr	r2, [pc, #176]	@ (800b0a0 <DMA_SetConfig+0x240>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d01d      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a2a      	ldr	r2, [pc, #168]	@ (800b0a4 <DMA_SetConfig+0x244>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d018      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a29      	ldr	r2, [pc, #164]	@ (800b0a8 <DMA_SetConfig+0x248>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d013      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a27      	ldr	r2, [pc, #156]	@ (800b0ac <DMA_SetConfig+0x24c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d00e      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a26      	ldr	r2, [pc, #152]	@ (800b0b0 <DMA_SetConfig+0x250>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d009      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a24      	ldr	r2, [pc, #144]	@ (800b0b4 <DMA_SetConfig+0x254>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d004      	beq.n	800b030 <DMA_SetConfig+0x1d0>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a23      	ldr	r2, [pc, #140]	@ (800b0b8 <DMA_SetConfig+0x258>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d101      	bne.n	800b034 <DMA_SetConfig+0x1d4>
 800b030:	2301      	movs	r3, #1
 800b032:	e000      	b.n	800b036 <DMA_SetConfig+0x1d6>
 800b034:	2300      	movs	r3, #0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d059      	beq.n	800b0ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b03e:	f003 031f 	and.w	r3, r3, #31
 800b042:	223f      	movs	r2, #63	@ 0x3f
 800b044:	409a      	lsls	r2, r3
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b058:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	2b40      	cmp	r3, #64	@ 0x40
 800b068:	d138      	bne.n	800b0dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b07a:	e086      	b.n	800b18a <DMA_SetConfig+0x32a>
 800b07c:	40020010 	.word	0x40020010
 800b080:	40020028 	.word	0x40020028
 800b084:	40020040 	.word	0x40020040
 800b088:	40020058 	.word	0x40020058
 800b08c:	40020070 	.word	0x40020070
 800b090:	40020088 	.word	0x40020088
 800b094:	400200a0 	.word	0x400200a0
 800b098:	400200b8 	.word	0x400200b8
 800b09c:	40020410 	.word	0x40020410
 800b0a0:	40020428 	.word	0x40020428
 800b0a4:	40020440 	.word	0x40020440
 800b0a8:	40020458 	.word	0x40020458
 800b0ac:	40020470 	.word	0x40020470
 800b0b0:	40020488 	.word	0x40020488
 800b0b4:	400204a0 	.word	0x400204a0
 800b0b8:	400204b8 	.word	0x400204b8
 800b0bc:	58025408 	.word	0x58025408
 800b0c0:	5802541c 	.word	0x5802541c
 800b0c4:	58025430 	.word	0x58025430
 800b0c8:	58025444 	.word	0x58025444
 800b0cc:	58025458 	.word	0x58025458
 800b0d0:	5802546c 	.word	0x5802546c
 800b0d4:	58025480 	.word	0x58025480
 800b0d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	60da      	str	r2, [r3, #12]
}
 800b0ec:	e04d      	b.n	800b18a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a29      	ldr	r2, [pc, #164]	@ (800b198 <DMA_SetConfig+0x338>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d022      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a27      	ldr	r2, [pc, #156]	@ (800b19c <DMA_SetConfig+0x33c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d01d      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a26      	ldr	r2, [pc, #152]	@ (800b1a0 <DMA_SetConfig+0x340>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d018      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a24      	ldr	r2, [pc, #144]	@ (800b1a4 <DMA_SetConfig+0x344>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d013      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a23      	ldr	r2, [pc, #140]	@ (800b1a8 <DMA_SetConfig+0x348>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d00e      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a21      	ldr	r2, [pc, #132]	@ (800b1ac <DMA_SetConfig+0x34c>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d009      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a20      	ldr	r2, [pc, #128]	@ (800b1b0 <DMA_SetConfig+0x350>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d004      	beq.n	800b13e <DMA_SetConfig+0x2de>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1e      	ldr	r2, [pc, #120]	@ (800b1b4 <DMA_SetConfig+0x354>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d101      	bne.n	800b142 <DMA_SetConfig+0x2e2>
 800b13e:	2301      	movs	r3, #1
 800b140:	e000      	b.n	800b144 <DMA_SetConfig+0x2e4>
 800b142:	2300      	movs	r3, #0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d020      	beq.n	800b18a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	2201      	movs	r2, #1
 800b152:	409a      	lsls	r2, r3
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b40      	cmp	r3, #64	@ 0x40
 800b166:	d108      	bne.n	800b17a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	60da      	str	r2, [r3, #12]
}
 800b178:	e007      	b.n	800b18a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	60da      	str	r2, [r3, #12]
}
 800b18a:	bf00      	nop
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	58025408 	.word	0x58025408
 800b19c:	5802541c 	.word	0x5802541c
 800b1a0:	58025430 	.word	0x58025430
 800b1a4:	58025444 	.word	0x58025444
 800b1a8:	58025458 	.word	0x58025458
 800b1ac:	5802546c 	.word	0x5802546c
 800b1b0:	58025480 	.word	0x58025480
 800b1b4:	58025494 	.word	0x58025494

0800b1b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a42      	ldr	r2, [pc, #264]	@ (800b2d0 <DMA_CalcBaseAndBitshift+0x118>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d04a      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a41      	ldr	r2, [pc, #260]	@ (800b2d4 <DMA_CalcBaseAndBitshift+0x11c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d045      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a3f      	ldr	r2, [pc, #252]	@ (800b2d8 <DMA_CalcBaseAndBitshift+0x120>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d040      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a3e      	ldr	r2, [pc, #248]	@ (800b2dc <DMA_CalcBaseAndBitshift+0x124>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d03b      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a3c      	ldr	r2, [pc, #240]	@ (800b2e0 <DMA_CalcBaseAndBitshift+0x128>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d036      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a3b      	ldr	r2, [pc, #236]	@ (800b2e4 <DMA_CalcBaseAndBitshift+0x12c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d031      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a39      	ldr	r2, [pc, #228]	@ (800b2e8 <DMA_CalcBaseAndBitshift+0x130>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d02c      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a38      	ldr	r2, [pc, #224]	@ (800b2ec <DMA_CalcBaseAndBitshift+0x134>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d027      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a36      	ldr	r2, [pc, #216]	@ (800b2f0 <DMA_CalcBaseAndBitshift+0x138>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d022      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a35      	ldr	r2, [pc, #212]	@ (800b2f4 <DMA_CalcBaseAndBitshift+0x13c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d01d      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a33      	ldr	r2, [pc, #204]	@ (800b2f8 <DMA_CalcBaseAndBitshift+0x140>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d018      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a32      	ldr	r2, [pc, #200]	@ (800b2fc <DMA_CalcBaseAndBitshift+0x144>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d013      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a30      	ldr	r2, [pc, #192]	@ (800b300 <DMA_CalcBaseAndBitshift+0x148>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d00e      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a2f      	ldr	r2, [pc, #188]	@ (800b304 <DMA_CalcBaseAndBitshift+0x14c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d009      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a2d      	ldr	r2, [pc, #180]	@ (800b308 <DMA_CalcBaseAndBitshift+0x150>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d004      	beq.n	800b260 <DMA_CalcBaseAndBitshift+0xa8>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a2c      	ldr	r2, [pc, #176]	@ (800b30c <DMA_CalcBaseAndBitshift+0x154>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d101      	bne.n	800b264 <DMA_CalcBaseAndBitshift+0xac>
 800b260:	2301      	movs	r3, #1
 800b262:	e000      	b.n	800b266 <DMA_CalcBaseAndBitshift+0xae>
 800b264:	2300      	movs	r3, #0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d024      	beq.n	800b2b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	3b10      	subs	r3, #16
 800b272:	4a27      	ldr	r2, [pc, #156]	@ (800b310 <DMA_CalcBaseAndBitshift+0x158>)
 800b274:	fba2 2303 	umull	r2, r3, r2, r3
 800b278:	091b      	lsrs	r3, r3, #4
 800b27a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	4a24      	ldr	r2, [pc, #144]	@ (800b314 <DMA_CalcBaseAndBitshift+0x15c>)
 800b284:	5cd3      	ldrb	r3, [r2, r3]
 800b286:	461a      	mov	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d908      	bls.n	800b2a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	4b1f      	ldr	r3, [pc, #124]	@ (800b318 <DMA_CalcBaseAndBitshift+0x160>)
 800b29a:	4013      	ands	r3, r2
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	659a      	str	r2, [r3, #88]	@ 0x58
 800b2a2:	e00d      	b.n	800b2c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b318 <DMA_CalcBaseAndBitshift+0x160>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800b2b2:	e005      	b.n	800b2c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	40020010 	.word	0x40020010
 800b2d4:	40020028 	.word	0x40020028
 800b2d8:	40020040 	.word	0x40020040
 800b2dc:	40020058 	.word	0x40020058
 800b2e0:	40020070 	.word	0x40020070
 800b2e4:	40020088 	.word	0x40020088
 800b2e8:	400200a0 	.word	0x400200a0
 800b2ec:	400200b8 	.word	0x400200b8
 800b2f0:	40020410 	.word	0x40020410
 800b2f4:	40020428 	.word	0x40020428
 800b2f8:	40020440 	.word	0x40020440
 800b2fc:	40020458 	.word	0x40020458
 800b300:	40020470 	.word	0x40020470
 800b304:	40020488 	.word	0x40020488
 800b308:	400204a0 	.word	0x400204a0
 800b30c:	400204b8 	.word	0x400204b8
 800b310:	aaaaaaab 	.word	0xaaaaaaab
 800b314:	0801e33c 	.word	0x0801e33c
 800b318:	fffffc00 	.word	0xfffffc00

0800b31c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d120      	bne.n	800b372 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b334:	2b03      	cmp	r3, #3
 800b336:	d858      	bhi.n	800b3ea <DMA_CheckFifoParam+0xce>
 800b338:	a201      	add	r2, pc, #4	@ (adr r2, 800b340 <DMA_CheckFifoParam+0x24>)
 800b33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33e:	bf00      	nop
 800b340:	0800b351 	.word	0x0800b351
 800b344:	0800b363 	.word	0x0800b363
 800b348:	0800b351 	.word	0x0800b351
 800b34c:	0800b3eb 	.word	0x0800b3eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d048      	beq.n	800b3ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b360:	e045      	b.n	800b3ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b366:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b36a:	d142      	bne.n	800b3f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b370:	e03f      	b.n	800b3f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	699b      	ldr	r3, [r3, #24]
 800b376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b37a:	d123      	bne.n	800b3c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	2b03      	cmp	r3, #3
 800b382:	d838      	bhi.n	800b3f6 <DMA_CheckFifoParam+0xda>
 800b384:	a201      	add	r2, pc, #4	@ (adr r2, 800b38c <DMA_CheckFifoParam+0x70>)
 800b386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38a:	bf00      	nop
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3a3 	.word	0x0800b3a3
 800b394:	0800b39d 	.word	0x0800b39d
 800b398:	0800b3b5 	.word	0x0800b3b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
        break;
 800b3a0:	e030      	b.n	800b404 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d025      	beq.n	800b3fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b3b2:	e022      	b.n	800b3fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b3bc:	d11f      	bne.n	800b3fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b3c2:	e01c      	b.n	800b3fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d902      	bls.n	800b3d2 <DMA_CheckFifoParam+0xb6>
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d003      	beq.n	800b3d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b3d0:	e018      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	73fb      	strb	r3, [r7, #15]
        break;
 800b3d6:	e015      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00e      	beq.n	800b402 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e8:	e00b      	b.n	800b402 <DMA_CheckFifoParam+0xe6>
        break;
 800b3ea:	bf00      	nop
 800b3ec:	e00a      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        break;
 800b3ee:	bf00      	nop
 800b3f0:	e008      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        break;
 800b3f2:	bf00      	nop
 800b3f4:	e006      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        break;
 800b3f6:	bf00      	nop
 800b3f8:	e004      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        break;
 800b3fa:	bf00      	nop
 800b3fc:	e002      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
        break;
 800b3fe:	bf00      	nop
 800b400:	e000      	b.n	800b404 <DMA_CheckFifoParam+0xe8>
    break;
 800b402:	bf00      	nop
    }
  }

  return status;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop

0800b414 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a38      	ldr	r2, [pc, #224]	@ (800b508 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d022      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a36      	ldr	r2, [pc, #216]	@ (800b50c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d01d      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a35      	ldr	r2, [pc, #212]	@ (800b510 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d018      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a33      	ldr	r2, [pc, #204]	@ (800b514 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d013      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a32      	ldr	r2, [pc, #200]	@ (800b518 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00e      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a30      	ldr	r2, [pc, #192]	@ (800b51c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d009      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a2f      	ldr	r2, [pc, #188]	@ (800b520 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d004      	beq.n	800b472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a2d      	ldr	r2, [pc, #180]	@ (800b524 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d101      	bne.n	800b476 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b472:	2301      	movs	r3, #1
 800b474:	e000      	b.n	800b478 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b476:	2300      	movs	r3, #0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01a      	beq.n	800b4b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	3b08      	subs	r3, #8
 800b484:	4a28      	ldr	r2, [pc, #160]	@ (800b528 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b486:	fba2 2303 	umull	r2, r3, r2, r3
 800b48a:	091b      	lsrs	r3, r3, #4
 800b48c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	4b26      	ldr	r3, [pc, #152]	@ (800b52c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a24      	ldr	r2, [pc, #144]	@ (800b530 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b4a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f003 031f 	and.w	r3, r3, #31
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	409a      	lsls	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b4b0:	e024      	b.n	800b4fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	3b10      	subs	r3, #16
 800b4ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b534 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c0:	091b      	lsrs	r3, r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b538 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d806      	bhi.n	800b4da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	4a1b      	ldr	r2, [pc, #108]	@ (800b53c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d902      	bls.n	800b4da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	4b18      	ldr	r3, [pc, #96]	@ (800b540 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b4de:	4413      	add	r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b4ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f003 031f 	and.w	r3, r3, #31
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	409a      	lsls	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	58025408 	.word	0x58025408
 800b50c:	5802541c 	.word	0x5802541c
 800b510:	58025430 	.word	0x58025430
 800b514:	58025444 	.word	0x58025444
 800b518:	58025458 	.word	0x58025458
 800b51c:	5802546c 	.word	0x5802546c
 800b520:	58025480 	.word	0x58025480
 800b524:	58025494 	.word	0x58025494
 800b528:	cccccccd 	.word	0xcccccccd
 800b52c:	16009600 	.word	0x16009600
 800b530:	58025880 	.word	0x58025880
 800b534:	aaaaaaab 	.word	0xaaaaaaab
 800b538:	400204b8 	.word	0x400204b8
 800b53c:	4002040f 	.word	0x4002040f
 800b540:	10008200 	.word	0x10008200
 800b544:	40020880 	.word	0x40020880

0800b548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d04a      	beq.n	800b5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b08      	cmp	r3, #8
 800b562:	d847      	bhi.n	800b5f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a25      	ldr	r2, [pc, #148]	@ (800b600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d022      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a24      	ldr	r2, [pc, #144]	@ (800b604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d01d      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a22      	ldr	r2, [pc, #136]	@ (800b608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d018      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a21      	ldr	r2, [pc, #132]	@ (800b60c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d013      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a1f      	ldr	r2, [pc, #124]	@ (800b610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d00e      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a1e      	ldr	r2, [pc, #120]	@ (800b614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d009      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d004      	beq.n	800b5b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a1b      	ldr	r2, [pc, #108]	@ (800b61c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d101      	bne.n	800b5b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e000      	b.n	800b5ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	4b17      	ldr	r3, [pc, #92]	@ (800b620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b5c2:	4413      	add	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b5d0:	671a      	str	r2, [r3, #112]	@ 0x70
 800b5d2:	e009      	b.n	800b5e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	4b14      	ldr	r3, [pc, #80]	@ (800b628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a11      	ldr	r2, [pc, #68]	@ (800b62c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b5e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	409a      	lsls	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800b5f4:	bf00      	nop
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	58025408 	.word	0x58025408
 800b604:	5802541c 	.word	0x5802541c
 800b608:	58025430 	.word	0x58025430
 800b60c:	58025444 	.word	0x58025444
 800b610:	58025458 	.word	0x58025458
 800b614:	5802546c 	.word	0x5802546c
 800b618:	58025480 	.word	0x58025480
 800b61c:	58025494 	.word	0x58025494
 800b620:	1600963f 	.word	0x1600963f
 800b624:	58025940 	.word	0x58025940
 800b628:	1000823f 	.word	0x1000823f
 800b62c:	40020940 	.word	0x40020940

0800b630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b630:	b480      	push	{r7}
 800b632:	b089      	sub	sp, #36	@ 0x24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b63e:	4b86      	ldr	r3, [pc, #536]	@ (800b858 <HAL_GPIO_Init+0x228>)
 800b640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b642:	e18c      	b.n	800b95e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	2101      	movs	r1, #1
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	fa01 f303 	lsl.w	r3, r1, r3
 800b650:	4013      	ands	r3, r2
 800b652:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 817e 	beq.w	800b958 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f003 0303 	and.w	r3, r3, #3
 800b664:	2b01      	cmp	r3, #1
 800b666:	d005      	beq.n	800b674 <HAL_GPIO_Init+0x44>
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f003 0303 	and.w	r3, r3, #3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d130      	bne.n	800b6d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	2203      	movs	r2, #3
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	43db      	mvns	r3, r3
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	4013      	ands	r3, r2
 800b68a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	43db      	mvns	r3, r3
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	f003 0201 	and.w	r2, r3, #1
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f003 0303 	and.w	r3, r3, #3
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d017      	beq.n	800b712 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	43db      	mvns	r3, r3
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	fa02 f303 	lsl.w	r3, r2, r3
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	4313      	orrs	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f003 0303 	and.w	r3, r3, #3
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d123      	bne.n	800b766 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	08da      	lsrs	r2, r3, #3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3208      	adds	r2, #8
 800b726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b72a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	220f      	movs	r2, #15
 800b736:	fa02 f303 	lsl.w	r3, r2, r3
 800b73a:	43db      	mvns	r3, r3
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	4013      	ands	r3, r2
 800b740:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	fa02 f303 	lsl.w	r3, r2, r3
 800b752:	69ba      	ldr	r2, [r7, #24]
 800b754:	4313      	orrs	r3, r2
 800b756:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	08da      	lsrs	r2, r3, #3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3208      	adds	r2, #8
 800b760:	69b9      	ldr	r1, [r7, #24]
 800b762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	2203      	movs	r2, #3
 800b772:	fa02 f303 	lsl.w	r3, r2, r3
 800b776:	43db      	mvns	r3, r3
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	4013      	ands	r3, r2
 800b77c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f003 0203 	and.w	r2, r3, #3
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	fa02 f303 	lsl.w	r3, r2, r3
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	4313      	orrs	r3, r2
 800b792:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 80d8 	beq.w	800b958 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b85c <HAL_GPIO_Init+0x22c>)
 800b7aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7ae:	4a2b      	ldr	r2, [pc, #172]	@ (800b85c <HAL_GPIO_Init+0x22c>)
 800b7b0:	f043 0302 	orr.w	r3, r3, #2
 800b7b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b7b8:	4b28      	ldr	r3, [pc, #160]	@ (800b85c <HAL_GPIO_Init+0x22c>)
 800b7ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b7c6:	4a26      	ldr	r2, [pc, #152]	@ (800b860 <HAL_GPIO_Init+0x230>)
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	089b      	lsrs	r3, r3, #2
 800b7cc:	3302      	adds	r3, #2
 800b7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	f003 0303 	and.w	r3, r3, #3
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	220f      	movs	r2, #15
 800b7de:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b864 <HAL_GPIO_Init+0x234>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d04a      	beq.n	800b888 <HAL_GPIO_Init+0x258>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b868 <HAL_GPIO_Init+0x238>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d02b      	beq.n	800b852 <HAL_GPIO_Init+0x222>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b86c <HAL_GPIO_Init+0x23c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d025      	beq.n	800b84e <HAL_GPIO_Init+0x21e>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a1a      	ldr	r2, [pc, #104]	@ (800b870 <HAL_GPIO_Init+0x240>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d01f      	beq.n	800b84a <HAL_GPIO_Init+0x21a>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a19      	ldr	r2, [pc, #100]	@ (800b874 <HAL_GPIO_Init+0x244>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d019      	beq.n	800b846 <HAL_GPIO_Init+0x216>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a18      	ldr	r2, [pc, #96]	@ (800b878 <HAL_GPIO_Init+0x248>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d013      	beq.n	800b842 <HAL_GPIO_Init+0x212>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <HAL_GPIO_Init+0x24c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00d      	beq.n	800b83e <HAL_GPIO_Init+0x20e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a16      	ldr	r2, [pc, #88]	@ (800b880 <HAL_GPIO_Init+0x250>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d007      	beq.n	800b83a <HAL_GPIO_Init+0x20a>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a15      	ldr	r2, [pc, #84]	@ (800b884 <HAL_GPIO_Init+0x254>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d101      	bne.n	800b836 <HAL_GPIO_Init+0x206>
 800b832:	2309      	movs	r3, #9
 800b834:	e029      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b836:	230a      	movs	r3, #10
 800b838:	e027      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b83a:	2307      	movs	r3, #7
 800b83c:	e025      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b83e:	2306      	movs	r3, #6
 800b840:	e023      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b842:	2305      	movs	r3, #5
 800b844:	e021      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b846:	2304      	movs	r3, #4
 800b848:	e01f      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b84a:	2303      	movs	r3, #3
 800b84c:	e01d      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b84e:	2302      	movs	r3, #2
 800b850:	e01b      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b852:	2301      	movs	r3, #1
 800b854:	e019      	b.n	800b88a <HAL_GPIO_Init+0x25a>
 800b856:	bf00      	nop
 800b858:	58000080 	.word	0x58000080
 800b85c:	58024400 	.word	0x58024400
 800b860:	58000400 	.word	0x58000400
 800b864:	58020000 	.word	0x58020000
 800b868:	58020400 	.word	0x58020400
 800b86c:	58020800 	.word	0x58020800
 800b870:	58020c00 	.word	0x58020c00
 800b874:	58021000 	.word	0x58021000
 800b878:	58021400 	.word	0x58021400
 800b87c:	58021800 	.word	0x58021800
 800b880:	58021c00 	.word	0x58021c00
 800b884:	58022400 	.word	0x58022400
 800b888:	2300      	movs	r3, #0
 800b88a:	69fa      	ldr	r2, [r7, #28]
 800b88c:	f002 0203 	and.w	r2, r2, #3
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	4093      	lsls	r3, r2
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	4313      	orrs	r3, r2
 800b898:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b89a:	4938      	ldr	r1, [pc, #224]	@ (800b97c <HAL_GPIO_Init+0x34c>)
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	089b      	lsrs	r3, r3, #2
 800b8a0:	3302      	adds	r3, #2
 800b8a2:	69ba      	ldr	r2, [r7, #24]
 800b8a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	43db      	mvns	r3, r3
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b8c6:	69ba      	ldr	r2, [r7, #24]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b8ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b8d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b8fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	43db      	mvns	r3, r3
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	4013      	ands	r3, r2
 800b912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b920:	69ba      	ldr	r2, [r7, #24]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	4313      	orrs	r3, r2
 800b926:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	43db      	mvns	r3, r3
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	4013      	ands	r3, r2
 800b93c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	4313      	orrs	r3, r2
 800b950:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	69ba      	ldr	r2, [r7, #24]
 800b956:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	3301      	adds	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	fa22 f303 	lsr.w	r3, r2, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f47f ae6b 	bne.w	800b644 <HAL_GPIO_Init+0x14>
  }
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	3724      	adds	r7, #36	@ 0x24
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	58000400 	.word	0x58000400

0800b980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691a      	ldr	r2, [r3, #16]
 800b990:	887b      	ldrh	r3, [r7, #2]
 800b992:	4013      	ands	r3, r2
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	e001      	b.n	800b9a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b9c0:	787b      	ldrb	r3, [r7, #1]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b9c6:	887a      	ldrh	r2, [r7, #2]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b9cc:	e003      	b.n	800b9d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b9ce:	887b      	ldrh	r3, [r7, #2]
 800b9d0:	041a      	lsls	r2, r3, #16
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	619a      	str	r2, [r3, #24]
}
 800b9d6:	bf00      	nop
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b9ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d008      	beq.n	800ba0e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b9fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ba06:	88fb      	ldrh	r3, [r7, #6]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f5 fc6f 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800ba0e:	bf00      	nop
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e08b      	b.n	800bb42 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f7f6 fdb8 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2224      	movs	r2, #36	@ 0x24
 800ba48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ba68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ba78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d107      	bne.n	800ba92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689a      	ldr	r2, [r3, #8]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba8e:	609a      	str	r2, [r3, #8]
 800ba90:	e006      	b.n	800baa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ba9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d108      	bne.n	800baba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bab6:	605a      	str	r2, [r3, #4]
 800bab8:	e007      	b.n	800baca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6859      	ldr	r1, [r3, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <HAL_I2C_Init+0x134>)
 800bad6:	430b      	orrs	r3, r1
 800bad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691a      	ldr	r2, [r3, #16]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	69d9      	ldr	r1, [r3, #28]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1a      	ldr	r2, [r3, #32]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f042 0201 	orr.w	r2, r2, #1
 800bb22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2220      	movs	r2, #32
 800bb2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	02008000 	.word	0x02008000

0800bb50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d138      	bne.n	800bbd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d101      	bne.n	800bb74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb70:	2302      	movs	r3, #2
 800bb72:	e032      	b.n	800bbda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2224      	movs	r2, #36	@ 0x24
 800bb80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0201 	bic.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f042 0201 	orr.w	r2, r2, #1
 800bbc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	e000      	b.n	800bbda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbd8:	2302      	movs	r3, #2
  }
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	370c      	adds	r7, #12
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b085      	sub	sp, #20
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b20      	cmp	r3, #32
 800bbfa:	d139      	bne.n	800bc70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d101      	bne.n	800bc0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e033      	b.n	800bc72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2224      	movs	r2, #36	@ 0x24
 800bc16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0201 	bic.w	r2, r2, #1
 800bc28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	021b      	lsls	r3, r3, #8
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0201 	orr.w	r2, r2, #1
 800bc5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e000      	b.n	800bc72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc70:	2302      	movs	r3, #2
  }
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b086      	sub	sp, #24
 800bc82:	af02      	add	r7, sp, #8
 800bc84:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e0fe      	b.n	800be8e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f00c fb5f 	bl	8018368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2203      	movs	r2, #3
 800bcae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f008 ff1b 	bl	8014af2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6818      	ldr	r0, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7c1a      	ldrb	r2, [r3, #16]
 800bcc4:	f88d 2000 	strb.w	r2, [sp]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bccc:	f008 fdec 	bl	80148a8 <USB_CoreInit>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2202      	movs	r2, #2
 800bcda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e0d5      	b.n	800be8e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2100      	movs	r1, #0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f008 ff13 	bl	8014b14 <USB_SetCurrentMode>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d005      	beq.n	800bd00 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e0c6      	b.n	800be8e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]
 800bd04:	e04a      	b.n	800bd9c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bd06:	7bfa      	ldrb	r2, [r7, #15]
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	00db      	lsls	r3, r3, #3
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	440b      	add	r3, r1
 800bd14:	3315      	adds	r3, #21
 800bd16:	2201      	movs	r2, #1
 800bd18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bd1a:	7bfa      	ldrb	r2, [r7, #15]
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	440b      	add	r3, r1
 800bd28:	3314      	adds	r3, #20
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bd2e:	7bfa      	ldrb	r2, [r7, #15]
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	b298      	uxth	r0, r3
 800bd34:	6879      	ldr	r1, [r7, #4]
 800bd36:	4613      	mov	r3, r2
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	440b      	add	r3, r1
 800bd40:	332e      	adds	r3, #46	@ 0x2e
 800bd42:	4602      	mov	r2, r0
 800bd44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bd46:	7bfa      	ldrb	r2, [r7, #15]
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	00db      	lsls	r3, r3, #3
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	440b      	add	r3, r1
 800bd54:	3318      	adds	r3, #24
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bd5a:	7bfa      	ldrb	r2, [r7, #15]
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	4413      	add	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	440b      	add	r3, r1
 800bd68:	331c      	adds	r3, #28
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bd6e:	7bfa      	ldrb	r2, [r7, #15]
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3320      	adds	r3, #32
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bd82:	7bfa      	ldrb	r2, [r7, #15]
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	4613      	mov	r3, r2
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	440b      	add	r3, r1
 800bd90:	3324      	adds	r3, #36	@ 0x24
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	73fb      	strb	r3, [r7, #15]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	791b      	ldrb	r3, [r3, #4]
 800bda0:	7bfa      	ldrb	r2, [r7, #15]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d3af      	bcc.n	800bd06 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]
 800bdaa:	e044      	b.n	800be36 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bdac:	7bfa      	ldrb	r2, [r7, #15]
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	440b      	add	r3, r1
 800bdba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bdc2:	7bfa      	ldrb	r2, [r7, #15]
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800bdd4:	7bfa      	ldrb	r2, [r7, #15]
 800bdd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bdd8:	7bfa      	ldrb	r2, [r7, #15]
 800bdda:	6879      	ldr	r1, [r7, #4]
 800bddc:	4613      	mov	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	440b      	add	r3, r1
 800bde6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bdee:	7bfa      	ldrb	r2, [r7, #15]
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	00db      	lsls	r3, r3, #3
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	440b      	add	r3, r1
 800bdfc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800be04:	7bfa      	ldrb	r2, [r7, #15]
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	4613      	mov	r3, r2
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	440b      	add	r3, r1
 800be12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800be16:	2200      	movs	r2, #0
 800be18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800be1a:	7bfa      	ldrb	r2, [r7, #15]
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	00db      	lsls	r3, r3, #3
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	440b      	add	r3, r1
 800be28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	3301      	adds	r3, #1
 800be34:	73fb      	strb	r3, [r7, #15]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	791b      	ldrb	r3, [r3, #4]
 800be3a:	7bfa      	ldrb	r2, [r7, #15]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d3b5      	bcc.n	800bdac <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7c1a      	ldrb	r2, [r3, #16]
 800be48:	f88d 2000 	strb.w	r2, [sp]
 800be4c:	3304      	adds	r3, #4
 800be4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be50:	f008 feac 	bl	8014bac <USB_DevInit>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d005      	beq.n	800be66 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2202      	movs	r2, #2
 800be5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e013      	b.n	800be8e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	7b1b      	ldrb	r3, [r3, #12]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d102      	bne.n	800be82 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 f96d 	bl	800d15c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4618      	mov	r0, r3
 800be88:	f009 feeb 	bl	8015c62 <USB_DevDisconnect>

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d101      	bne.n	800beb2 <HAL_PCD_Start+0x1c>
 800beae:	2302      	movs	r3, #2
 800beb0:	e022      	b.n	800bef8 <HAL_PCD_Start+0x62>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d009      	beq.n	800beda <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800beca:	2b01      	cmp	r3, #1
 800becc:	d105      	bne.n	800beda <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	f008 fdf6 	bl	8014ad0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4618      	mov	r0, r3
 800beea:	f009 fe99 	bl	8015c20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800bf00:	b590      	push	{r4, r7, lr}
 800bf02:	b08d      	sub	sp, #52	@ 0x34
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f009 ff57 	bl	8015dca <USB_GetMode>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f040 84b9 	bne.w	800c896 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f009 febb 	bl	8015ca4 <USB_ReadInterrupts>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 84af 	beq.w	800c894 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	0a1b      	lsrs	r3, r3, #8
 800bf40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f009 fea8 	bl	8015ca4 <USB_ReadInterrupts>
 800bf54:	4603      	mov	r3, r0
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d107      	bne.n	800bf6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	695a      	ldr	r2, [r3, #20]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f002 0202 	and.w	r2, r2, #2
 800bf6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f009 fe96 	bl	8015ca4 <USB_ReadInterrupts>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f003 0310 	and.w	r3, r3, #16
 800bf7e:	2b10      	cmp	r3, #16
 800bf80:	d161      	bne.n	800c046 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0210 	bic.w	r2, r2, #16
 800bf90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	f003 020f 	and.w	r2, r3, #15
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	00db      	lsls	r3, r3, #3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	3304      	adds	r3, #4
 800bfb0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	0c5b      	lsrs	r3, r3, #17
 800bfb6:	f003 030f 	and.w	r3, r3, #15
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d124      	bne.n	800c008 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d035      	beq.n	800c036 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	091b      	lsrs	r3, r3, #4
 800bfd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bfd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6a38      	ldr	r0, [r7, #32]
 800bfde:	f009 fccd 	bl	801597c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	091b      	lsrs	r3, r3, #4
 800bfea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfee:	441a      	add	r2, r3
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	695a      	ldr	r2, [r3, #20]
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	091b      	lsrs	r3, r3, #4
 800bffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c000:	441a      	add	r2, r3
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	615a      	str	r2, [r3, #20]
 800c006:	e016      	b.n	800c036 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	0c5b      	lsrs	r3, r3, #17
 800c00c:	f003 030f 	and.w	r3, r3, #15
 800c010:	2b06      	cmp	r3, #6
 800c012:	d110      	bne.n	800c036 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c01a:	2208      	movs	r2, #8
 800c01c:	4619      	mov	r1, r3
 800c01e:	6a38      	ldr	r0, [r7, #32]
 800c020:	f009 fcac 	bl	801597c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	695a      	ldr	r2, [r3, #20]
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	091b      	lsrs	r3, r3, #4
 800c02c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c030:	441a      	add	r2, r3
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	699a      	ldr	r2, [r3, #24]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f042 0210 	orr.w	r2, r2, #16
 800c044:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f009 fe2a 	bl	8015ca4 <USB_ReadInterrupts>
 800c050:	4603      	mov	r3, r0
 800c052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c056:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c05a:	f040 80a7 	bne.w	800c1ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c05e:	2300      	movs	r3, #0
 800c060:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f009 fe2f 	bl	8015cca <USB_ReadDevAllOutEpInterrupt>
 800c06c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c06e:	e099      	b.n	800c1a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 808e 	beq.w	800c198 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	4611      	mov	r1, r2
 800c086:	4618      	mov	r0, r3
 800c088:	f009 fe53 	bl	8015d32 <USB_ReadDevOutEPInterrupt>
 800c08c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00c      	beq.n	800c0b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c0aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fecf 	bl	800ce50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00c      	beq.n	800c0d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	2308      	movs	r3, #8
 800c0cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c0ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 ffa5 	bl	800d020 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f003 0310 	and.w	r3, r3, #16
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	2310      	movs	r3, #16
 800c0f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d030      	beq.n	800c15e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	695b      	ldr	r3, [r3, #20]
 800c100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c104:	2b80      	cmp	r3, #128	@ 0x80
 800c106:	d109      	bne.n	800c11c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	69fa      	ldr	r2, [r7, #28]
 800c112:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c11a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c11c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c11e:	4613      	mov	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	3304      	adds	r3, #4
 800c130:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	78db      	ldrb	r3, [r3, #3]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d108      	bne.n	800c14c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2200      	movs	r2, #0
 800c13e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	b2db      	uxtb	r3, r3
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f00c fa06 	bl	8018558 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c158:	461a      	mov	r2, r3
 800c15a:	2302      	movs	r3, #2
 800c15c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f003 0320 	and.w	r3, r3, #32
 800c164:	2b00      	cmp	r3, #0
 800c166:	d008      	beq.n	800c17a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c174:	461a      	mov	r2, r3
 800c176:	2320      	movs	r3, #32
 800c178:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d009      	beq.n	800c198 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c190:	461a      	mov	r2, r3
 800c192:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c196:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19a:	3301      	adds	r3, #1
 800c19c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	085b      	lsrs	r3, r3, #1
 800c1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f47f af62 	bne.w	800c070 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f009 fd77 	bl	8015ca4 <USB_ReadInterrupts>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1c0:	f040 80db 	bne.w	800c37a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f009 fd98 	bl	8015cfe <USB_ReadDevAllInEpInterrupt>
 800c1ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c1d4:	e0cd      	b.n	800c372 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80c2 	beq.w	800c366 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f009 fdbe 	bl	8015d6e <USB_ReadDevInEPInterrupt>
 800c1f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d057      	beq.n	800c2ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	f003 030f 	and.w	r3, r3, #15
 800c204:	2201      	movs	r2, #1
 800c206:	fa02 f303 	lsl.w	r3, r2, r3
 800c20a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	43db      	mvns	r3, r3
 800c218:	69f9      	ldr	r1, [r7, #28]
 800c21a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c21e:	4013      	ands	r3, r2
 800c220:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c224:	015a      	lsls	r2, r3, #5
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	4413      	add	r3, r2
 800c22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c22e:	461a      	mov	r2, r3
 800c230:	2301      	movs	r3, #1
 800c232:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	799b      	ldrb	r3, [r3, #6]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d132      	bne.n	800c2a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c23c:	6879      	ldr	r1, [r7, #4]
 800c23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c240:	4613      	mov	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	440b      	add	r3, r1
 800c24a:	3320      	adds	r3, #32
 800c24c:	6819      	ldr	r1, [r3, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c252:	4613      	mov	r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4403      	add	r3, r0
 800c25c:	331c      	adds	r3, #28
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4419      	add	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c266:	4613      	mov	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	4413      	add	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4403      	add	r3, r0
 800c270:	3320      	adds	r3, #32
 800c272:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	d113      	bne.n	800c2a2 <HAL_PCD_IRQHandler+0x3a2>
 800c27a:	6879      	ldr	r1, [r7, #4]
 800c27c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c27e:	4613      	mov	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	440b      	add	r3, r1
 800c288:	3324      	adds	r3, #36	@ 0x24
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d108      	bne.n	800c2a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c29a:	461a      	mov	r2, r3
 800c29c:	2101      	movs	r1, #1
 800c29e:	f009 fdc7 	bl	8015e30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f00c f8d0 	bl	801844e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f003 0308 	and.w	r3, r3, #8
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d008      	beq.n	800c2ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	2308      	movs	r3, #8
 800c2c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f003 0310 	and.w	r3, r3, #16
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d008      	beq.n	800c2e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	2310      	movs	r3, #16
 800c2e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d008      	beq.n	800c302 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f2:	015a      	lsls	r2, r3, #5
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	2340      	movs	r3, #64	@ 0x40
 800c300:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f003 0302 	and.w	r3, r3, #2
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d023      	beq.n	800c354 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c30c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c30e:	6a38      	ldr	r0, [r7, #32]
 800c310:	f008 fdaa 	bl	8014e68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c316:	4613      	mov	r3, r2
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	3310      	adds	r3, #16
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	4413      	add	r3, r2
 800c324:	3304      	adds	r3, #4
 800c326:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	78db      	ldrb	r3, [r3, #3]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d108      	bne.n	800c342 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	2200      	movs	r2, #0
 800c334:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f00c f91d 	bl	801857c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c34e:	461a      	mov	r2, r3
 800c350:	2302      	movs	r3, #2
 800c352:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d003      	beq.n	800c366 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c35e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fce8 	bl	800cd36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	3301      	adds	r3, #1
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36e:	085b      	lsrs	r3, r3, #1
 800c370:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c374:	2b00      	cmp	r3, #0
 800c376:	f47f af2e 	bne.w	800c1d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	f009 fc90 	bl	8015ca4 <USB_ReadInterrupts>
 800c384:	4603      	mov	r3, r0
 800c386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c38a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c38e:	d122      	bne.n	800c3d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	69fa      	ldr	r2, [r7, #28]
 800c39a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c39e:	f023 0301 	bic.w	r3, r3, #1
 800c3a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d108      	bne.n	800c3c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fef3 	bl	800d1a4 <HAL_PCDEx_LPM_Callback>
 800c3be:	e002      	b.n	800c3c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f00c f8bb 	bl	801853c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	695a      	ldr	r2, [r3, #20]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c3d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f009 fc62 	bl	8015ca4 <USB_ReadInterrupts>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3ea:	d112      	bne.n	800c412 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d102      	bne.n	800c402 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f00c f877 	bl	80184f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c410:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f009 fc44 	bl	8015ca4 <USB_ReadInterrupts>
 800c41c:	4603      	mov	r3, r0
 800c41e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c426:	d121      	bne.n	800c46c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	695a      	ldr	r2, [r3, #20]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800c436:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d111      	bne.n	800c466 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c450:	089b      	lsrs	r3, r3, #2
 800c452:	f003 020f 	and.w	r2, r3, #15
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c45c:	2101      	movs	r1, #1
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fea0 	bl	800d1a4 <HAL_PCDEx_LPM_Callback>
 800c464:	e002      	b.n	800c46c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f00c f842 	bl	80184f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f009 fc17 	bl	8015ca4 <USB_ReadInterrupts>
 800c476:	4603      	mov	r3, r0
 800c478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c47c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c480:	f040 80b7 	bne.w	800c5f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	69fa      	ldr	r2, [r7, #28]
 800c48e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c492:	f023 0301 	bic.w	r3, r3, #1
 800c496:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2110      	movs	r1, #16
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f008 fce2 	bl	8014e68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4a8:	e046      	b.n	800c538 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c4bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ce:	0151      	lsls	r1, r2, #5
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	440a      	add	r2, r1
 800c4d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c4dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c4f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c502:	0151      	lsls	r1, r2, #5
 800c504:	69fa      	ldr	r2, [r7, #28]
 800c506:	440a      	add	r2, r1
 800c508:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c50c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c510:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c522:	0151      	lsls	r1, r2, #5
 800c524:	69fa      	ldr	r2, [r7, #28]
 800c526:	440a      	add	r2, r1
 800c528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c52c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c530:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c534:	3301      	adds	r3, #1
 800c536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	791b      	ldrb	r3, [r3, #4]
 800c53c:	461a      	mov	r2, r3
 800c53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c540:	4293      	cmp	r3, r2
 800c542:	d3b2      	bcc.n	800c4aa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	69fa      	ldr	r2, [r7, #28]
 800c54e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c552:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c556:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	7bdb      	ldrb	r3, [r3, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d016      	beq.n	800c58e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c56a:	69fa      	ldr	r2, [r7, #28]
 800c56c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c570:	f043 030b 	orr.w	r3, r3, #11
 800c574:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c57e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c580:	69fa      	ldr	r2, [r7, #28]
 800c582:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c586:	f043 030b 	orr.w	r3, r3, #11
 800c58a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c58c:	e015      	b.n	800c5ba <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c594:	695a      	ldr	r2, [r3, #20]
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c59c:	4619      	mov	r1, r3
 800c59e:	f242 032b 	movw	r3, #8235	@ 0x202b
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5b4:	f043 030b 	orr.w	r3, r3, #11
 800c5b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69fa      	ldr	r2, [r7, #28]
 800c5c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c5c8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c5cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c5dc:	461a      	mov	r2, r3
 800c5de:	f009 fc27 	bl	8015e30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	695a      	ldr	r2, [r3, #20]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c5f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f009 fb54 	bl	8015ca4 <USB_ReadInterrupts>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c606:	d123      	bne.n	800c650 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f009 fbeb 	bl	8015de8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4618      	mov	r0, r3
 800c618:	f008 fc9f 	bl	8014f5a <USB_GetDevSpeed>
 800c61c:	4603      	mov	r3, r0
 800c61e:	461a      	mov	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681c      	ldr	r4, [r3, #0]
 800c628:	f001 fd1c 	bl	800e064 <HAL_RCC_GetHCLKFreq>
 800c62c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c632:	461a      	mov	r2, r3
 800c634:	4620      	mov	r0, r4
 800c636:	f008 f9a9 	bl	801498c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f00b ff2f 	bl	801849e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	695a      	ldr	r2, [r3, #20]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c64e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	f009 fb25 	bl	8015ca4 <USB_ReadInterrupts>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f003 0308 	and.w	r3, r3, #8
 800c660:	2b08      	cmp	r3, #8
 800c662:	d10a      	bne.n	800c67a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f00b ff0c 	bl	8018482 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695a      	ldr	r2, [r3, #20]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f002 0208 	and.w	r2, r2, #8
 800c678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4618      	mov	r0, r3
 800c680:	f009 fb10 	bl	8015ca4 <USB_ReadInterrupts>
 800c684:	4603      	mov	r3, r0
 800c686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c68a:	2b80      	cmp	r3, #128	@ 0x80
 800c68c:	d123      	bne.n	800c6d6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c69a:	2301      	movs	r3, #1
 800c69c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c69e:	e014      	b.n	800c6ca <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	4413      	add	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	440b      	add	r3, r1
 800c6ae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d105      	bne.n	800c6c4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 fb08 	bl	800ccd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	791b      	ldrb	r3, [r3, #4]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d3e4      	bcc.n	800c6a0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f009 fae2 	bl	8015ca4 <USB_ReadInterrupts>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c6e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6ea:	d13c      	bne.n	800c766 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f0:	e02b      	b.n	800c74a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f4:	015a      	lsls	r2, r3, #5
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c706:	4613      	mov	r3, r2
 800c708:	00db      	lsls	r3, r3, #3
 800c70a:	4413      	add	r3, r2
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	440b      	add	r3, r1
 800c710:	3318      	adds	r3, #24
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d115      	bne.n	800c744 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c718:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	da12      	bge.n	800c744 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c71e:	6879      	ldr	r1, [r7, #4]
 800c720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c722:	4613      	mov	r3, r2
 800c724:	00db      	lsls	r3, r3, #3
 800c726:	4413      	add	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	440b      	add	r3, r1
 800c72c:	3317      	adds	r3, #23
 800c72e:	2201      	movs	r2, #1
 800c730:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 fac8 	bl	800ccd4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	3301      	adds	r3, #1
 800c748:	627b      	str	r3, [r7, #36]	@ 0x24
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	791b      	ldrb	r3, [r3, #4]
 800c74e:	461a      	mov	r2, r3
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	4293      	cmp	r3, r2
 800c754:	d3cd      	bcc.n	800c6f2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	695a      	ldr	r2, [r3, #20]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f009 fa9a 	bl	8015ca4 <USB_ReadInterrupts>
 800c770:	4603      	mov	r3, r0
 800c772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c77a:	d156      	bne.n	800c82a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c77c:	2301      	movs	r3, #1
 800c77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c780:	e045      	b.n	800c80e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c796:	4613      	mov	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	440b      	add	r3, r1
 800c7a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d12e      	bne.n	800c808 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c7aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	da2b      	bge.n	800c808 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c7bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d121      	bne.n	800c808 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	440b      	add	r3, r1
 800c7d2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10a      	bne.n	800c808 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c800:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c804:	6053      	str	r3, [r2, #4]
            break;
 800c806:	e008      	b.n	800c81a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	3301      	adds	r3, #1
 800c80c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	791b      	ldrb	r3, [r3, #4]
 800c812:	461a      	mov	r2, r3
 800c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c816:	4293      	cmp	r3, r2
 800c818:	d3b3      	bcc.n	800c782 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	695a      	ldr	r2, [r3, #20]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	f009 fa38 	bl	8015ca4 <USB_ReadInterrupts>
 800c834:	4603      	mov	r3, r0
 800c836:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c83a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c83e:	d10a      	bne.n	800c856 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f00b fead 	bl	80185a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	695a      	ldr	r2, [r3, #20]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f009 fa22 	bl	8015ca4 <USB_ReadInterrupts>
 800c860:	4603      	mov	r3, r0
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b04      	cmp	r3, #4
 800c868:	d115      	bne.n	800c896 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f00b fe9d 	bl	80185bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6859      	ldr	r1, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69ba      	ldr	r2, [r7, #24]
 800c88e:	430a      	orrs	r2, r1
 800c890:	605a      	str	r2, [r3, #4]
 800c892:	e000      	b.n	800c896 <HAL_PCD_IRQHandler+0x996>
      return;
 800c894:	bf00      	nop
    }
  }
}
 800c896:	3734      	adds	r7, #52	@ 0x34
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd90      	pop	{r4, r7, pc}

0800c89c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d101      	bne.n	800c8b6 <HAL_PCD_SetAddress+0x1a>
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	e012      	b.n	800c8dc <HAL_PCD_SetAddress+0x40>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	78fa      	ldrb	r2, [r7, #3]
 800c8c2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	78fa      	ldrb	r2, [r7, #3]
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f009 f981 	bl	8015bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	70fb      	strb	r3, [r7, #3]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	803b      	strh	r3, [r7, #0]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c906:	2b00      	cmp	r3, #0
 800c908:	da0f      	bge.n	800c92a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	f003 020f 	and.w	r2, r3, #15
 800c910:	4613      	mov	r3, r2
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	4413      	add	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	3310      	adds	r3, #16
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	4413      	add	r3, r2
 800c91e:	3304      	adds	r3, #4
 800c920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2201      	movs	r2, #1
 800c926:	705a      	strb	r2, [r3, #1]
 800c928:	e00f      	b.n	800c94a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	f003 020f 	and.w	r2, r3, #15
 800c930:	4613      	mov	r3, r2
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	4413      	add	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	3304      	adds	r3, #4
 800c942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	f003 030f 	and.w	r3, r3, #15
 800c950:	b2da      	uxtb	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c956:	883a      	ldrh	r2, [r7, #0]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	78ba      	ldrb	r2, [r7, #2]
 800c960:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	785b      	ldrb	r3, [r3, #1]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d004      	beq.n	800c974 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c974:	78bb      	ldrb	r3, [r7, #2]
 800c976:	2b02      	cmp	r3, #2
 800c978:	d102      	bne.n	800c980 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c986:	2b01      	cmp	r3, #1
 800c988:	d101      	bne.n	800c98e <HAL_PCD_EP_Open+0xaa>
 800c98a:	2302      	movs	r3, #2
 800c98c:	e00e      	b.n	800c9ac <HAL_PCD_EP_Open+0xc8>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f008 fb01 	bl	8014fa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c9aa:	7afb      	ldrb	r3, [r7, #11]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c9c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	da0f      	bge.n	800c9e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9c8:	78fb      	ldrb	r3, [r7, #3]
 800c9ca:	f003 020f 	and.w	r2, r3, #15
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	4413      	add	r3, r2
 800c9d4:	009b      	lsls	r3, r3, #2
 800c9d6:	3310      	adds	r3, #16
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	4413      	add	r3, r2
 800c9dc:	3304      	adds	r3, #4
 800c9de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	705a      	strb	r2, [r3, #1]
 800c9e6:	e00f      	b.n	800ca08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9e8:	78fb      	ldrb	r3, [r7, #3]
 800c9ea:	f003 020f 	and.w	r2, r3, #15
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	3304      	adds	r3, #4
 800ca00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca08:	78fb      	ldrb	r3, [r7, #3]
 800ca0a:	f003 030f 	and.w	r3, r3, #15
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d101      	bne.n	800ca22 <HAL_PCD_EP_Close+0x6e>
 800ca1e:	2302      	movs	r3, #2
 800ca20:	e00e      	b.n	800ca40 <HAL_PCD_EP_Close+0x8c>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f008 fb3f 	bl	80150b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	607a      	str	r2, [r7, #4]
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	460b      	mov	r3, r1
 800ca56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	f003 020f 	and.w	r2, r3, #15
 800ca5e:	4613      	mov	r3, r2
 800ca60:	00db      	lsls	r3, r3, #3
 800ca62:	4413      	add	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	3304      	adds	r3, #4
 800ca70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	683a      	ldr	r2, [r7, #0]
 800ca7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2200      	movs	r2, #0
 800ca82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2200      	movs	r2, #0
 800ca88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	f003 030f 	and.w	r3, r3, #15
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	799b      	ldrb	r3, [r3, #6]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d102      	bne.n	800caa4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	799b      	ldrb	r3, [r3, #6]
 800caac:	461a      	mov	r2, r3
 800caae:	6979      	ldr	r1, [r7, #20]
 800cab0:	f008 fbdc 	bl	801526c <USB_EPStartXfer>

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3718      	adds	r7, #24
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	460b      	mov	r3, r1
 800cac8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800caca:	78fb      	ldrb	r3, [r7, #3]
 800cacc:	f003 020f 	and.w	r2, r3, #15
 800cad0:	6879      	ldr	r1, [r7, #4]
 800cad2:	4613      	mov	r3, r2
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	4413      	add	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	440b      	add	r3, r1
 800cadc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800cae0:	681b      	ldr	r3, [r3, #0]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b086      	sub	sp, #24
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	603b      	str	r3, [r7, #0]
 800cafa:	460b      	mov	r3, r1
 800cafc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	f003 020f 	and.w	r2, r3, #15
 800cb04:	4613      	mov	r3, r2
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	4413      	add	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	3310      	adds	r3, #16
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4413      	add	r3, r2
 800cb12:	3304      	adds	r3, #4
 800cb14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2200      	movs	r2, #0
 800cb26:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb2e:	7afb      	ldrb	r3, [r7, #11]
 800cb30:	f003 030f 	and.w	r3, r3, #15
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	799b      	ldrb	r3, [r3, #6]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d102      	bne.n	800cb48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6818      	ldr	r0, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	799b      	ldrb	r3, [r3, #6]
 800cb50:	461a      	mov	r2, r3
 800cb52:	6979      	ldr	r1, [r7, #20]
 800cb54:	f008 fb8a 	bl	801526c <USB_EPStartXfer>

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	f003 030f 	and.w	r3, r3, #15
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	7912      	ldrb	r2, [r2, #4]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d901      	bls.n	800cb80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e04f      	b.n	800cc20 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	da0f      	bge.n	800cba8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	f003 020f 	and.w	r2, r3, #15
 800cb8e:	4613      	mov	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	3310      	adds	r3, #16
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2201      	movs	r2, #1
 800cba4:	705a      	strb	r2, [r3, #1]
 800cba6:	e00d      	b.n	800cbc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	4413      	add	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	4413      	add	r3, r2
 800cbba:	3304      	adds	r3, #4
 800cbbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	f003 030f 	and.w	r3, r3, #15
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_PCD_EP_SetStall+0x82>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e01d      	b.n	800cc20 <HAL_PCD_EP_SetStall+0xbe>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f008 ff1a 	bl	8015a2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d109      	bne.n	800cc16 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	7999      	ldrb	r1, [r3, #6]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cc10:	461a      	mov	r2, r3
 800cc12:	f009 f90d 	bl	8015e30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cc34:	78fb      	ldrb	r3, [r7, #3]
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	7912      	ldrb	r2, [r2, #4]
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d901      	bls.n	800cc46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e042      	b.n	800cccc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cc46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	da0f      	bge.n	800cc6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	f003 020f 	and.w	r2, r3, #15
 800cc54:	4613      	mov	r3, r2
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	4413      	add	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	4413      	add	r3, r2
 800cc62:	3304      	adds	r3, #4
 800cc64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	705a      	strb	r2, [r3, #1]
 800cc6c:	e00f      	b.n	800cc8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	f003 020f 	and.w	r2, r3, #15
 800cc74:	4613      	mov	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	3304      	adds	r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d101      	bne.n	800ccae <HAL_PCD_EP_ClrStall+0x86>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	e00e      	b.n	800cccc <HAL_PCD_EP_ClrStall+0xa4>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f008 ff23 	bl	8015b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	460b      	mov	r3, r1
 800ccde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800cce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da0c      	bge.n	800cd02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cce8:	78fb      	ldrb	r3, [r7, #3]
 800ccea:	f003 020f 	and.w	r2, r3, #15
 800ccee:	4613      	mov	r3, r2
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	3310      	adds	r3, #16
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e00c      	b.n	800cd1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	f003 020f 	and.w	r2, r3, #15
 800cd08:	4613      	mov	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	4413      	add	r3, r2
 800cd18:	3304      	adds	r3, #4
 800cd1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68f9      	ldr	r1, [r7, #12]
 800cd22:	4618      	mov	r0, r3
 800cd24:	f008 fd42 	bl	80157ac <USB_EPStopXfer>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800cd2c:	7afb      	ldrb	r3, [r7, #11]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b08a      	sub	sp, #40	@ 0x28
 800cd3a:	af02      	add	r7, sp, #8
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	3310      	adds	r3, #16
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	4413      	add	r3, r2
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	695a      	ldr	r2, [r3, #20]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d901      	bls.n	800cd6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e06b      	b.n	800ce46 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	691a      	ldr	r2, [r3, #16]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d902      	bls.n	800cd8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	3303      	adds	r3, #3
 800cd8e:	089b      	lsrs	r3, r3, #2
 800cd90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cd92:	e02a      	b.n	800cdea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	691a      	ldr	r2, [r3, #16]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	695b      	ldr	r3, [r3, #20]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	69fa      	ldr	r2, [r7, #28]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d902      	bls.n	800cdb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	3303      	adds	r3, #3
 800cdb4:	089b      	lsrs	r3, r3, #2
 800cdb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68d9      	ldr	r1, [r3, #12]
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6978      	ldr	r0, [r7, #20]
 800cdce:	f008 fd97 	bl	8015900 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	441a      	add	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	695a      	ldr	r2, [r3, #20]
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	441a      	add	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d809      	bhi.n	800ce14 <PCD_WriteEmptyTxFifo+0xde>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	695a      	ldr	r2, [r3, #20]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d203      	bcs.n	800ce14 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1bf      	bne.n	800cd94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	691a      	ldr	r2, [r3, #16]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d811      	bhi.n	800ce44 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	f003 030f 	and.w	r3, r3, #15
 800ce26:	2201      	movs	r2, #1
 800ce28:	fa02 f303 	lsl.w	r3, r2, r3
 800ce2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	43db      	mvns	r3, r3
 800ce3a:	6939      	ldr	r1, [r7, #16]
 800ce3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce40:	4013      	ands	r3, r2
 800ce42:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	333c      	adds	r3, #60	@ 0x3c
 800ce68:	3304      	adds	r3, #4
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	015a      	lsls	r2, r3, #5
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	4413      	add	r3, r2
 800ce76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	799b      	ldrb	r3, [r3, #6]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d17b      	bne.n	800cf7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f003 0308 	and.w	r3, r3, #8
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d015      	beq.n	800cebc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4a61      	ldr	r2, [pc, #388]	@ (800d018 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	f240 80b9 	bls.w	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 80b3 	beq.w	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	015a      	lsls	r2, r3, #5
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	4413      	add	r3, r2
 800ceae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ceb8:	6093      	str	r3, [r2, #8]
 800ceba:	e0a7      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	f003 0320 	and.w	r3, r3, #32
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d009      	beq.n	800ceda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	015a      	lsls	r2, r3, #5
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	4413      	add	r3, r2
 800cece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ced2:	461a      	mov	r2, r3
 800ced4:	2320      	movs	r3, #32
 800ced6:	6093      	str	r3, [r2, #8]
 800ced8:	e098      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f040 8093 	bne.w	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	4a4b      	ldr	r2, [pc, #300]	@ (800d018 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d90f      	bls.n	800cf0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00a      	beq.n	800cf0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	015a      	lsls	r2, r3, #5
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	4413      	add	r3, r2
 800cf00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf04:	461a      	mov	r2, r3
 800cf06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf0a:	6093      	str	r3, [r2, #8]
 800cf0c:	e07e      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	4613      	mov	r3, r2
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	4413      	add	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	4413      	add	r3, r2
 800cf20:	3304      	adds	r3, #4
 800cf22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6a1a      	ldr	r2, [r3, #32]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	0159      	lsls	r1, r3, #5
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	440b      	add	r3, r1
 800cf30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf3a:	1ad2      	subs	r2, r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d114      	bne.n	800cf70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d109      	bne.n	800cf62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6818      	ldr	r0, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cf58:	461a      	mov	r2, r3
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	f008 ff68 	bl	8015e30 <USB_EP0_OutStart>
 800cf60:	e006      	b.n	800cf70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	441a      	add	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f00b fa4e 	bl	8018418 <HAL_PCD_DataOutStageCallback>
 800cf7c:	e046      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	4a26      	ldr	r2, [pc, #152]	@ (800d01c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d124      	bne.n	800cfd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	015a      	lsls	r2, r3, #5
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	4413      	add	r3, r2
 800cf98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfa2:	6093      	str	r3, [r2, #8]
 800cfa4:	e032      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f003 0320 	and.w	r3, r3, #32
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	2320      	movs	r3, #32
 800cfc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f00b fa25 	bl	8018418 <HAL_PCD_DataOutStageCallback>
 800cfce:	e01d      	b.n	800d00c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d114      	bne.n	800d000 <PCD_EP_OutXfrComplete_int+0x1b0>
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	4413      	add	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	440b      	add	r3, r1
 800cfe4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d108      	bne.n	800d000 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cff8:	461a      	mov	r2, r3
 800cffa:	2100      	movs	r1, #0
 800cffc:	f008 ff18 	bl	8015e30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	b2db      	uxtb	r3, r3
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f00b fa06 	bl	8018418 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	4f54300a 	.word	0x4f54300a
 800d01c:	4f54310a 	.word	0x4f54310a

0800d020 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	333c      	adds	r3, #60	@ 0x3c
 800d038:	3304      	adds	r3, #4
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	4a15      	ldr	r2, [pc, #84]	@ (800d0a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d90e      	bls.n	800d074 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d009      	beq.n	800d074 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	015a      	lsls	r2, r3, #5
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	4413      	add	r3, r2
 800d068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d06c:	461a      	mov	r2, r3
 800d06e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d072:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f00b f9bd 	bl	80183f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	4a0a      	ldr	r2, [pc, #40]	@ (800d0a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d90c      	bls.n	800d09c <PCD_EP_OutSetupPacket_int+0x7c>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	799b      	ldrb	r3, [r3, #6]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d108      	bne.n	800d09c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d094:	461a      	mov	r2, r3
 800d096:	2101      	movs	r1, #1
 800d098:	f008 feca 	bl	8015e30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	4f54300a 	.word	0x4f54300a

0800d0ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	70fb      	strb	r3, [r7, #3]
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d107      	bne.n	800d0da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d0ca:	883b      	ldrh	r3, [r7, #0]
 800d0cc:	0419      	lsls	r1, r3, #16
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d0d8:	e028      	b.n	800d12c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e0:	0c1b      	lsrs	r3, r3, #16
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
 800d0ec:	e00d      	b.n	800d10a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
 800d0f4:	3340      	adds	r3, #64	@ 0x40
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	0c1b      	lsrs	r3, r3, #16
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	4413      	add	r3, r2
 800d102:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	3301      	adds	r3, #1
 800d108:	73fb      	strb	r3, [r7, #15]
 800d10a:	7bfa      	ldrb	r2, [r7, #15]
 800d10c:	78fb      	ldrb	r3, [r7, #3]
 800d10e:	3b01      	subs	r3, #1
 800d110:	429a      	cmp	r2, r3
 800d112:	d3ec      	bcc.n	800d0ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d114:	883b      	ldrh	r3, [r7, #0]
 800d116:	0418      	lsls	r0, r3, #16
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6819      	ldr	r1, [r3, #0]
 800d11c:	78fb      	ldrb	r3, [r7, #3]
 800d11e:	3b01      	subs	r3, #1
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	4302      	orrs	r2, r0
 800d124:	3340      	adds	r3, #64	@ 0x40
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	440b      	add	r3, r1
 800d12a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	460b      	mov	r3, r1
 800d144:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	887a      	ldrh	r2, [r7, #2]
 800d14c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d14e:	2300      	movs	r3, #0
}
 800d150:	4618      	mov	r0, r3
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d18a:	4b05      	ldr	r3, [pc, #20]	@ (800d1a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	10000003 	.word	0x10000003

0800d1a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d1c4:	4b19      	ldr	r3, [pc, #100]	@ (800d22c <HAL_PWREx_ConfigSupply+0x70>)
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	d00a      	beq.n	800d1e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d1d0:	4b16      	ldr	r3, [pc, #88]	@ (800d22c <HAL_PWREx_ConfigSupply+0x70>)
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	f003 0307 	and.w	r3, r3, #7
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d001      	beq.n	800d1e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e01f      	b.n	800d222 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e01d      	b.n	800d222 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d1e6:	4b11      	ldr	r3, [pc, #68]	@ (800d22c <HAL_PWREx_ConfigSupply+0x70>)
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f023 0207 	bic.w	r2, r3, #7
 800d1ee:	490f      	ldr	r1, [pc, #60]	@ (800d22c <HAL_PWREx_ConfigSupply+0x70>)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4313      	orrs	r3, r2
 800d1f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d1f6:	f7fa f963 	bl	80074c0 <HAL_GetTick>
 800d1fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d1fc:	e009      	b.n	800d212 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d1fe:	f7fa f95f 	bl	80074c0 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d20c:	d901      	bls.n	800d212 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e007      	b.n	800d222 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d212:	4b06      	ldr	r3, [pc, #24]	@ (800d22c <HAL_PWREx_ConfigSupply+0x70>)
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d21a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d21e:	d1ee      	bne.n	800d1fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	58024800 	.word	0x58024800

0800d230 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d230:	b480      	push	{r7}
 800d232:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d234:	4b05      	ldr	r3, [pc, #20]	@ (800d24c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	4a04      	ldr	r2, [pc, #16]	@ (800d24c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d23a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d23e:	60d3      	str	r3, [r2, #12]
}
 800d240:	bf00      	nop
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	58024800 	.word	0x58024800

0800d250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08c      	sub	sp, #48	@ 0x30
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e3c8      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f000 8087 	beq.w	800d37e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d270:	4b88      	ldr	r3, [pc, #544]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d27a:	4b86      	ldr	r3, [pc, #536]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d27e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	2b10      	cmp	r3, #16
 800d284:	d007      	beq.n	800d296 <HAL_RCC_OscConfig+0x46>
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	2b18      	cmp	r3, #24
 800d28a:	d110      	bne.n	800d2ae <HAL_RCC_OscConfig+0x5e>
 800d28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28e:	f003 0303 	and.w	r3, r3, #3
 800d292:	2b02      	cmp	r3, #2
 800d294:	d10b      	bne.n	800d2ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d296:	4b7f      	ldr	r3, [pc, #508]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d06c      	beq.n	800d37c <HAL_RCC_OscConfig+0x12c>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d168      	bne.n	800d37c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e3a2      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2b6:	d106      	bne.n	800d2c6 <HAL_RCC_OscConfig+0x76>
 800d2b8:	4b76      	ldr	r3, [pc, #472]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a75      	ldr	r2, [pc, #468]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	e02e      	b.n	800d324 <HAL_RCC_OscConfig+0xd4>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10c      	bne.n	800d2e8 <HAL_RCC_OscConfig+0x98>
 800d2ce:	4b71      	ldr	r3, [pc, #452]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a70      	ldr	r2, [pc, #448]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	4b6e      	ldr	r3, [pc, #440]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4a6d      	ldr	r2, [pc, #436]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2e4:	6013      	str	r3, [r2, #0]
 800d2e6:	e01d      	b.n	800d324 <HAL_RCC_OscConfig+0xd4>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d2f0:	d10c      	bne.n	800d30c <HAL_RCC_OscConfig+0xbc>
 800d2f2:	4b68      	ldr	r3, [pc, #416]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a67      	ldr	r2, [pc, #412]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d2f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2fc:	6013      	str	r3, [r2, #0]
 800d2fe:	4b65      	ldr	r3, [pc, #404]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a64      	ldr	r2, [pc, #400]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d308:	6013      	str	r3, [r2, #0]
 800d30a:	e00b      	b.n	800d324 <HAL_RCC_OscConfig+0xd4>
 800d30c:	4b61      	ldr	r3, [pc, #388]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a60      	ldr	r2, [pc, #384]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	4b5e      	ldr	r3, [pc, #376]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a5d      	ldr	r2, [pc, #372]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d31e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d013      	beq.n	800d354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d32c:	f7fa f8c8 	bl	80074c0 <HAL_GetTick>
 800d330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d332:	e008      	b.n	800d346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d334:	f7fa f8c4 	bl	80074c0 <HAL_GetTick>
 800d338:	4602      	mov	r2, r0
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	2b64      	cmp	r3, #100	@ 0x64
 800d340:	d901      	bls.n	800d346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d342:	2303      	movs	r3, #3
 800d344:	e356      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d346:	4b53      	ldr	r3, [pc, #332]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d0f0      	beq.n	800d334 <HAL_RCC_OscConfig+0xe4>
 800d352:	e014      	b.n	800d37e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d354:	f7fa f8b4 	bl	80074c0 <HAL_GetTick>
 800d358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d35a:	e008      	b.n	800d36e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d35c:	f7fa f8b0 	bl	80074c0 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b64      	cmp	r3, #100	@ 0x64
 800d368:	d901      	bls.n	800d36e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e342      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d36e:	4b49      	ldr	r3, [pc, #292]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1f0      	bne.n	800d35c <HAL_RCC_OscConfig+0x10c>
 800d37a:	e000      	b.n	800d37e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d37c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 0302 	and.w	r3, r3, #2
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 808c 	beq.w	800d4a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d38c:	4b41      	ldr	r3, [pc, #260]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d396:	4b3f      	ldr	r3, [pc, #252]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <HAL_RCC_OscConfig+0x162>
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	2b18      	cmp	r3, #24
 800d3a6:	d137      	bne.n	800d418 <HAL_RCC_OscConfig+0x1c8>
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	f003 0303 	and.w	r3, r3, #3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d132      	bne.n	800d418 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3b2:	4b38      	ldr	r3, [pc, #224]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 0304 	and.w	r3, r3, #4
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d005      	beq.n	800d3ca <HAL_RCC_OscConfig+0x17a>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e314      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3ca:	4b32      	ldr	r3, [pc, #200]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f023 0219 	bic.w	r2, r3, #25
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	492f      	ldr	r1, [pc, #188]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3dc:	f7fa f870 	bl	80074c0 <HAL_GetTick>
 800d3e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3e2:	e008      	b.n	800d3f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3e4:	f7fa f86c 	bl	80074c0 <HAL_GetTick>
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d901      	bls.n	800d3f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	e2fe      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3f6:	4b27      	ldr	r3, [pc, #156]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 0304 	and.w	r3, r3, #4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0f0      	beq.n	800d3e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d402:	4b24      	ldr	r3, [pc, #144]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	061b      	lsls	r3, r3, #24
 800d410:	4920      	ldr	r1, [pc, #128]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d412:	4313      	orrs	r3, r2
 800d414:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d416:	e045      	b.n	800d4a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d026      	beq.n	800d46e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d420:	4b1c      	ldr	r3, [pc, #112]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f023 0219 	bic.w	r2, r3, #25
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	4919      	ldr	r1, [pc, #100]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d42e:	4313      	orrs	r3, r2
 800d430:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d432:	f7fa f845 	bl	80074c0 <HAL_GetTick>
 800d436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d438:	e008      	b.n	800d44c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d43a:	f7fa f841 	bl	80074c0 <HAL_GetTick>
 800d43e:	4602      	mov	r2, r0
 800d440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	2b02      	cmp	r3, #2
 800d446:	d901      	bls.n	800d44c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d448:	2303      	movs	r3, #3
 800d44a:	e2d3      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d44c:	4b11      	ldr	r3, [pc, #68]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f003 0304 	and.w	r3, r3, #4
 800d454:	2b00      	cmp	r3, #0
 800d456:	d0f0      	beq.n	800d43a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d458:	4b0e      	ldr	r3, [pc, #56]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	061b      	lsls	r3, r3, #24
 800d466:	490b      	ldr	r1, [pc, #44]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	604b      	str	r3, [r1, #4]
 800d46c:	e01a      	b.n	800d4a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d46e:	4b09      	ldr	r3, [pc, #36]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a08      	ldr	r2, [pc, #32]	@ (800d494 <HAL_RCC_OscConfig+0x244>)
 800d474:	f023 0301 	bic.w	r3, r3, #1
 800d478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d47a:	f7fa f821 	bl	80074c0 <HAL_GetTick>
 800d47e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d480:	e00a      	b.n	800d498 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d482:	f7fa f81d 	bl	80074c0 <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d903      	bls.n	800d498 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e2af      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
 800d494:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d498:	4b96      	ldr	r3, [pc, #600]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f003 0304 	and.w	r3, r3, #4
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1ee      	bne.n	800d482 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d06a      	beq.n	800d586 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4b0:	4b90      	ldr	r3, [pc, #576]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d4ba:	4b8e      	ldr	r3, [pc, #568]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	2b08      	cmp	r3, #8
 800d4c4:	d007      	beq.n	800d4d6 <HAL_RCC_OscConfig+0x286>
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	2b18      	cmp	r3, #24
 800d4ca:	d11b      	bne.n	800d504 <HAL_RCC_OscConfig+0x2b4>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f003 0303 	and.w	r3, r3, #3
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d116      	bne.n	800d504 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4d6:	4b87      	ldr	r3, [pc, #540]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <HAL_RCC_OscConfig+0x29e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	69db      	ldr	r3, [r3, #28]
 800d4e6:	2b80      	cmp	r3, #128	@ 0x80
 800d4e8:	d001      	beq.n	800d4ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e282      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4ee:	4b81      	ldr	r3, [pc, #516]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	061b      	lsls	r3, r3, #24
 800d4fc:	497d      	ldr	r1, [pc, #500]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d502:	e040      	b.n	800d586 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	69db      	ldr	r3, [r3, #28]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d023      	beq.n	800d554 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d50c:	4b79      	ldr	r3, [pc, #484]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a78      	ldr	r2, [pc, #480]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d518:	f7f9 ffd2 	bl	80074c0 <HAL_GetTick>
 800d51c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d51e:	e008      	b.n	800d532 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d520:	f7f9 ffce 	bl	80074c0 <HAL_GetTick>
 800d524:	4602      	mov	r2, r0
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	1ad3      	subs	r3, r2, r3
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d901      	bls.n	800d532 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	e260      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d532:	4b70      	ldr	r3, [pc, #448]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0f0      	beq.n	800d520 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d53e:	4b6d      	ldr	r3, [pc, #436]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	061b      	lsls	r3, r3, #24
 800d54c:	4969      	ldr	r1, [pc, #420]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d54e:	4313      	orrs	r3, r2
 800d550:	60cb      	str	r3, [r1, #12]
 800d552:	e018      	b.n	800d586 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d554:	4b67      	ldr	r3, [pc, #412]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a66      	ldr	r2, [pc, #408]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d55a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d55e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d560:	f7f9 ffae 	bl	80074c0 <HAL_GetTick>
 800d564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d566:	e008      	b.n	800d57a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d568:	f7f9 ffaa 	bl	80074c0 <HAL_GetTick>
 800d56c:	4602      	mov	r2, r0
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	2b02      	cmp	r3, #2
 800d574:	d901      	bls.n	800d57a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d576:	2303      	movs	r3, #3
 800d578:	e23c      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d57a:	4b5e      	ldr	r3, [pc, #376]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1f0      	bne.n	800d568 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 0308 	and.w	r3, r3, #8
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d036      	beq.n	800d600 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d019      	beq.n	800d5ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d59a:	4b56      	ldr	r3, [pc, #344]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d59c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d59e:	4a55      	ldr	r2, [pc, #340]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d5a0:	f043 0301 	orr.w	r3, r3, #1
 800d5a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5a6:	f7f9 ff8b 	bl	80074c0 <HAL_GetTick>
 800d5aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5ac:	e008      	b.n	800d5c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5ae:	f7f9 ff87 	bl	80074c0 <HAL_GetTick>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d901      	bls.n	800d5c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	e219      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5c0:	4b4c      	ldr	r3, [pc, #304]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5c4:	f003 0302 	and.w	r3, r3, #2
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d0f0      	beq.n	800d5ae <HAL_RCC_OscConfig+0x35e>
 800d5cc:	e018      	b.n	800d600 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5ce:	4b49      	ldr	r3, [pc, #292]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d5d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5d2:	4a48      	ldr	r2, [pc, #288]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d5d4:	f023 0301 	bic.w	r3, r3, #1
 800d5d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5da:	f7f9 ff71 	bl	80074c0 <HAL_GetTick>
 800d5de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5e0:	e008      	b.n	800d5f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5e2:	f7f9 ff6d 	bl	80074c0 <HAL_GetTick>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d901      	bls.n	800d5f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e1ff      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5f4:	4b3f      	ldr	r3, [pc, #252]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5f8:	f003 0302 	and.w	r3, r3, #2
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1f0      	bne.n	800d5e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 0320 	and.w	r3, r3, #32
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d036      	beq.n	800d67a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	699b      	ldr	r3, [r3, #24]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d019      	beq.n	800d648 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d614:	4b37      	ldr	r3, [pc, #220]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a36      	ldr	r2, [pc, #216]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d61a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d61e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d620:	f7f9 ff4e 	bl	80074c0 <HAL_GetTick>
 800d624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d626:	e008      	b.n	800d63a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d628:	f7f9 ff4a 	bl	80074c0 <HAL_GetTick>
 800d62c:	4602      	mov	r2, r0
 800d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	2b02      	cmp	r3, #2
 800d634:	d901      	bls.n	800d63a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e1dc      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d63a:	4b2e      	ldr	r3, [pc, #184]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0f0      	beq.n	800d628 <HAL_RCC_OscConfig+0x3d8>
 800d646:	e018      	b.n	800d67a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d648:	4b2a      	ldr	r3, [pc, #168]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a29      	ldr	r2, [pc, #164]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d64e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d652:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d654:	f7f9 ff34 	bl	80074c0 <HAL_GetTick>
 800d658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d65a:	e008      	b.n	800d66e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d65c:	f7f9 ff30 	bl	80074c0 <HAL_GetTick>
 800d660:	4602      	mov	r2, r0
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	1ad3      	subs	r3, r2, r3
 800d666:	2b02      	cmp	r3, #2
 800d668:	d901      	bls.n	800d66e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e1c2      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d66e:	4b21      	ldr	r3, [pc, #132]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1f0      	bne.n	800d65c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0304 	and.w	r3, r3, #4
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 8086 	beq.w	800d794 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d688:	4b1b      	ldr	r3, [pc, #108]	@ (800d6f8 <HAL_RCC_OscConfig+0x4a8>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a1a      	ldr	r2, [pc, #104]	@ (800d6f8 <HAL_RCC_OscConfig+0x4a8>)
 800d68e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d692:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d694:	f7f9 ff14 	bl	80074c0 <HAL_GetTick>
 800d698:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d69a:	e008      	b.n	800d6ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d69c:	f7f9 ff10 	bl	80074c0 <HAL_GetTick>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a4:	1ad3      	subs	r3, r2, r3
 800d6a6:	2b64      	cmp	r3, #100	@ 0x64
 800d6a8:	d901      	bls.n	800d6ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e1a2      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6ae:	4b12      	ldr	r3, [pc, #72]	@ (800d6f8 <HAL_RCC_OscConfig+0x4a8>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0f0      	beq.n	800d69c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d106      	bne.n	800d6d0 <HAL_RCC_OscConfig+0x480>
 800d6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6c6:	4a0b      	ldr	r2, [pc, #44]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6c8:	f043 0301 	orr.w	r3, r3, #1
 800d6cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6ce:	e032      	b.n	800d736 <HAL_RCC_OscConfig+0x4e6>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d111      	bne.n	800d6fc <HAL_RCC_OscConfig+0x4ac>
 800d6d8:	4b06      	ldr	r3, [pc, #24]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6dc:	4a05      	ldr	r2, [pc, #20]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6de:	f023 0301 	bic.w	r3, r3, #1
 800d6e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6e4:	4b03      	ldr	r3, [pc, #12]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6e8:	4a02      	ldr	r2, [pc, #8]	@ (800d6f4 <HAL_RCC_OscConfig+0x4a4>)
 800d6ea:	f023 0304 	bic.w	r3, r3, #4
 800d6ee:	6713      	str	r3, [r2, #112]	@ 0x70
 800d6f0:	e021      	b.n	800d736 <HAL_RCC_OscConfig+0x4e6>
 800d6f2:	bf00      	nop
 800d6f4:	58024400 	.word	0x58024400
 800d6f8:	58024800 	.word	0x58024800
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	2b05      	cmp	r3, #5
 800d702:	d10c      	bne.n	800d71e <HAL_RCC_OscConfig+0x4ce>
 800d704:	4b83      	ldr	r3, [pc, #524]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d708:	4a82      	ldr	r2, [pc, #520]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d70a:	f043 0304 	orr.w	r3, r3, #4
 800d70e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d710:	4b80      	ldr	r3, [pc, #512]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d714:	4a7f      	ldr	r2, [pc, #508]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d716:	f043 0301 	orr.w	r3, r3, #1
 800d71a:	6713      	str	r3, [r2, #112]	@ 0x70
 800d71c:	e00b      	b.n	800d736 <HAL_RCC_OscConfig+0x4e6>
 800d71e:	4b7d      	ldr	r3, [pc, #500]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d722:	4a7c      	ldr	r2, [pc, #496]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d724:	f023 0301 	bic.w	r3, r3, #1
 800d728:	6713      	str	r3, [r2, #112]	@ 0x70
 800d72a:	4b7a      	ldr	r3, [pc, #488]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d72c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d72e:	4a79      	ldr	r2, [pc, #484]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d730:	f023 0304 	bic.w	r3, r3, #4
 800d734:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d015      	beq.n	800d76a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d73e:	f7f9 febf 	bl	80074c0 <HAL_GetTick>
 800d742:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d744:	e00a      	b.n	800d75c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d746:	f7f9 febb 	bl	80074c0 <HAL_GetTick>
 800d74a:	4602      	mov	r2, r0
 800d74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d754:	4293      	cmp	r3, r2
 800d756:	d901      	bls.n	800d75c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d758:	2303      	movs	r3, #3
 800d75a:	e14b      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d75c:	4b6d      	ldr	r3, [pc, #436]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d75e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d760:	f003 0302 	and.w	r3, r3, #2
 800d764:	2b00      	cmp	r3, #0
 800d766:	d0ee      	beq.n	800d746 <HAL_RCC_OscConfig+0x4f6>
 800d768:	e014      	b.n	800d794 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d76a:	f7f9 fea9 	bl	80074c0 <HAL_GetTick>
 800d76e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d770:	e00a      	b.n	800d788 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d772:	f7f9 fea5 	bl	80074c0 <HAL_GetTick>
 800d776:	4602      	mov	r2, r0
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d780:	4293      	cmp	r3, r2
 800d782:	d901      	bls.n	800d788 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d784:	2303      	movs	r3, #3
 800d786:	e135      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d788:	4b62      	ldr	r3, [pc, #392]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d78a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1ee      	bne.n	800d772 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f000 812a 	beq.w	800d9f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d79e:	4b5d      	ldr	r3, [pc, #372]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d7a6:	2b18      	cmp	r3, #24
 800d7a8:	f000 80ba 	beq.w	800d920 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	f040 8095 	bne.w	800d8e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7b6:	4b57      	ldr	r3, [pc, #348]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a56      	ldr	r2, [pc, #344]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d7c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7c2:	f7f9 fe7d 	bl	80074c0 <HAL_GetTick>
 800d7c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7c8:	e008      	b.n	800d7dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7ca:	f7f9 fe79 	bl	80074c0 <HAL_GetTick>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	1ad3      	subs	r3, r2, r3
 800d7d4:	2b02      	cmp	r3, #2
 800d7d6:	d901      	bls.n	800d7dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d7d8:	2303      	movs	r3, #3
 800d7da:	e10b      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1f0      	bne.n	800d7ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7e8:	4b4a      	ldr	r3, [pc, #296]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7ec:	4b4a      	ldr	r3, [pc, #296]	@ (800d918 <HAL_RCC_OscConfig+0x6c8>)
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d7f8:	0112      	lsls	r2, r2, #4
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	4945      	ldr	r1, [pc, #276]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d7fe:	4313      	orrs	r3, r2
 800d800:	628b      	str	r3, [r1, #40]	@ 0x28
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d806:	3b01      	subs	r3, #1
 800d808:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d810:	3b01      	subs	r3, #1
 800d812:	025b      	lsls	r3, r3, #9
 800d814:	b29b      	uxth	r3, r3
 800d816:	431a      	orrs	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d81c:	3b01      	subs	r3, #1
 800d81e:	041b      	lsls	r3, r3, #16
 800d820:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d824:	431a      	orrs	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d82a:	3b01      	subs	r3, #1
 800d82c:	061b      	lsls	r3, r3, #24
 800d82e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d832:	4938      	ldr	r1, [pc, #224]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d834:	4313      	orrs	r3, r2
 800d836:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d838:	4b36      	ldr	r3, [pc, #216]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83c:	4a35      	ldr	r2, [pc, #212]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d83e:	f023 0301 	bic.w	r3, r3, #1
 800d842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d844:	4b33      	ldr	r3, [pc, #204]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d848:	4b34      	ldr	r3, [pc, #208]	@ (800d91c <HAL_RCC_OscConfig+0x6cc>)
 800d84a:	4013      	ands	r3, r2
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d850:	00d2      	lsls	r2, r2, #3
 800d852:	4930      	ldr	r1, [pc, #192]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d854:	4313      	orrs	r3, r2
 800d856:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d858:	4b2e      	ldr	r3, [pc, #184]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85c:	f023 020c 	bic.w	r2, r3, #12
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d864:	492b      	ldr	r1, [pc, #172]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d866:	4313      	orrs	r3, r2
 800d868:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d86a:	4b2a      	ldr	r3, [pc, #168]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d86e:	f023 0202 	bic.w	r2, r3, #2
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d876:	4927      	ldr	r1, [pc, #156]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d87c:	4b25      	ldr	r3, [pc, #148]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d880:	4a24      	ldr	r2, [pc, #144]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d888:	4b22      	ldr	r3, [pc, #136]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d88a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88c:	4a21      	ldr	r2, [pc, #132]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d88e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d894:	4b1f      	ldr	r3, [pc, #124]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	4a1e      	ldr	r2, [pc, #120]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d89a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d89e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a4:	4a1b      	ldr	r2, [pc, #108]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d8ac:	4b19      	ldr	r3, [pc, #100]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a18      	ldr	r2, [pc, #96]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b8:	f7f9 fe02 	bl	80074c0 <HAL_GetTick>
 800d8bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8be:	e008      	b.n	800d8d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8c0:	f7f9 fdfe 	bl	80074c0 <HAL_GetTick>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d901      	bls.n	800d8d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e090      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8d2:	4b10      	ldr	r3, [pc, #64]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d0f0      	beq.n	800d8c0 <HAL_RCC_OscConfig+0x670>
 800d8de:	e088      	b.n	800d9f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a0b      	ldr	r2, [pc, #44]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d8e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d8ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8ec:	f7f9 fde8 	bl	80074c0 <HAL_GetTick>
 800d8f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8f2:	e008      	b.n	800d906 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8f4:	f7f9 fde4 	bl	80074c0 <HAL_GetTick>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d901      	bls.n	800d906 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e076      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d906:	4b03      	ldr	r3, [pc, #12]	@ (800d914 <HAL_RCC_OscConfig+0x6c4>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1f0      	bne.n	800d8f4 <HAL_RCC_OscConfig+0x6a4>
 800d912:	e06e      	b.n	800d9f2 <HAL_RCC_OscConfig+0x7a2>
 800d914:	58024400 	.word	0x58024400
 800d918:	fffffc0c 	.word	0xfffffc0c
 800d91c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d920:	4b36      	ldr	r3, [pc, #216]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d924:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d926:	4b35      	ldr	r3, [pc, #212]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d930:	2b01      	cmp	r3, #1
 800d932:	d031      	beq.n	800d998 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	f003 0203 	and.w	r2, r3, #3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d93e:	429a      	cmp	r2, r3
 800d940:	d12a      	bne.n	800d998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	091b      	lsrs	r3, r3, #4
 800d946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d94e:	429a      	cmp	r2, r3
 800d950:	d122      	bne.n	800d998 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d95c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d95e:	429a      	cmp	r2, r3
 800d960:	d11a      	bne.n	800d998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	0a5b      	lsrs	r3, r3, #9
 800d966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d96e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d970:	429a      	cmp	r2, r3
 800d972:	d111      	bne.n	800d998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	0c1b      	lsrs	r3, r3, #16
 800d978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d980:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d982:	429a      	cmp	r2, r3
 800d984:	d108      	bne.n	800d998 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	0e1b      	lsrs	r3, r3, #24
 800d98a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d992:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d994:	429a      	cmp	r2, r3
 800d996:	d001      	beq.n	800d99c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e02b      	b.n	800d9f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d99c:	4b17      	ldr	r3, [pc, #92]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9a0:	08db      	lsrs	r3, r3, #3
 800d9a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d01f      	beq.n	800d9f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d9b2:	4b12      	ldr	r3, [pc, #72]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b6:	4a11      	ldr	r2, [pc, #68]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9b8:	f023 0301 	bic.w	r3, r3, #1
 800d9bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d9be:	f7f9 fd7f 	bl	80074c0 <HAL_GetTick>
 800d9c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d9c4:	bf00      	nop
 800d9c6:	f7f9 fd7b 	bl	80074c0 <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d0f9      	beq.n	800d9c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800da00 <HAL_RCC_OscConfig+0x7b0>)
 800d9d8:	4013      	ands	r3, r2
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d9de:	00d2      	lsls	r2, r2, #3
 800d9e0:	4906      	ldr	r1, [pc, #24]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d9e6:	4b05      	ldr	r3, [pc, #20]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	4a04      	ldr	r2, [pc, #16]	@ (800d9fc <HAL_RCC_OscConfig+0x7ac>)
 800d9ec:	f043 0301 	orr.w	r3, r3, #1
 800d9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3730      	adds	r7, #48	@ 0x30
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	58024400 	.word	0x58024400
 800da00:	ffff0007 	.word	0xffff0007

0800da04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d101      	bne.n	800da18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e19c      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da18:	4b8a      	ldr	r3, [pc, #552]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 030f 	and.w	r3, r3, #15
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	429a      	cmp	r2, r3
 800da24:	d910      	bls.n	800da48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da26:	4b87      	ldr	r3, [pc, #540]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f023 020f 	bic.w	r2, r3, #15
 800da2e:	4985      	ldr	r1, [pc, #532]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	4313      	orrs	r3, r2
 800da34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da36:	4b83      	ldr	r3, [pc, #524]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 030f 	and.w	r3, r3, #15
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d001      	beq.n	800da48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	e184      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	2b00      	cmp	r3, #0
 800da52:	d010      	beq.n	800da76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	691a      	ldr	r2, [r3, #16]
 800da58:	4b7b      	ldr	r3, [pc, #492]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da60:	429a      	cmp	r2, r3
 800da62:	d908      	bls.n	800da76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da64:	4b78      	ldr	r3, [pc, #480]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	4975      	ldr	r1, [pc, #468]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800da72:	4313      	orrs	r3, r2
 800da74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 0308 	and.w	r3, r3, #8
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d010      	beq.n	800daa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	695a      	ldr	r2, [r3, #20]
 800da86:	4b70      	ldr	r3, [pc, #448]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800da8e:	429a      	cmp	r2, r3
 800da90:	d908      	bls.n	800daa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da92:	4b6d      	ldr	r3, [pc, #436]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800da94:	69db      	ldr	r3, [r3, #28]
 800da96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	496a      	ldr	r1, [pc, #424]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800daa0:	4313      	orrs	r3, r2
 800daa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f003 0310 	and.w	r3, r3, #16
 800daac:	2b00      	cmp	r3, #0
 800daae:	d010      	beq.n	800dad2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	699a      	ldr	r2, [r3, #24]
 800dab4:	4b64      	ldr	r3, [pc, #400]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dab6:	69db      	ldr	r3, [r3, #28]
 800dab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d908      	bls.n	800dad2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dac0:	4b61      	ldr	r3, [pc, #388]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dac2:	69db      	ldr	r3, [r3, #28]
 800dac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	699b      	ldr	r3, [r3, #24]
 800dacc:	495e      	ldr	r1, [pc, #376]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f003 0320 	and.w	r3, r3, #32
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d010      	beq.n	800db00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	69da      	ldr	r2, [r3, #28]
 800dae2:	4b59      	ldr	r3, [pc, #356]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800daea:	429a      	cmp	r2, r3
 800daec:	d908      	bls.n	800db00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800daee:	4b56      	ldr	r3, [pc, #344]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	69db      	ldr	r3, [r3, #28]
 800dafa:	4953      	ldr	r1, [pc, #332]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dafc:	4313      	orrs	r3, r2
 800dafe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f003 0302 	and.w	r3, r3, #2
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d010      	beq.n	800db2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	4b4d      	ldr	r3, [pc, #308]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	f003 030f 	and.w	r3, r3, #15
 800db18:	429a      	cmp	r2, r3
 800db1a:	d908      	bls.n	800db2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db1c:	4b4a      	ldr	r3, [pc, #296]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	f023 020f 	bic.w	r2, r3, #15
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	4947      	ldr	r1, [pc, #284]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db2a:	4313      	orrs	r3, r2
 800db2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 0301 	and.w	r3, r3, #1
 800db36:	2b00      	cmp	r3, #0
 800db38:	d055      	beq.n	800dbe6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800db3a:	4b43      	ldr	r3, [pc, #268]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	4940      	ldr	r1, [pc, #256]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db48:	4313      	orrs	r3, r2
 800db4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	2b02      	cmp	r3, #2
 800db52:	d107      	bne.n	800db64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db54:	4b3c      	ldr	r3, [pc, #240]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d121      	bne.n	800dba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	e0f6      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	2b03      	cmp	r3, #3
 800db6a:	d107      	bne.n	800db7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db6c:	4b36      	ldr	r3, [pc, #216]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db74:	2b00      	cmp	r3, #0
 800db76:	d115      	bne.n	800dba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db78:	2301      	movs	r3, #1
 800db7a:	e0ea      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d107      	bne.n	800db94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db84:	4b30      	ldr	r3, [pc, #192]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d109      	bne.n	800dba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e0de      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db94:	4b2c      	ldr	r3, [pc, #176]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f003 0304 	and.w	r3, r3, #4
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d101      	bne.n	800dba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e0d6      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dba4:	4b28      	ldr	r3, [pc, #160]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	f023 0207 	bic.w	r2, r3, #7
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	4925      	ldr	r1, [pc, #148]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbb6:	f7f9 fc83 	bl	80074c0 <HAL_GetTick>
 800dbba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbbc:	e00a      	b.n	800dbd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbbe:	f7f9 fc7f 	bl	80074c0 <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d901      	bls.n	800dbd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	e0be      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbd4:	4b1c      	ldr	r3, [pc, #112]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	00db      	lsls	r3, r3, #3
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d1eb      	bne.n	800dbbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 0302 	and.w	r3, r3, #2
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d010      	beq.n	800dc14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	4b14      	ldr	r3, [pc, #80]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	f003 030f 	and.w	r3, r3, #15
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d208      	bcs.n	800dc14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc02:	4b11      	ldr	r3, [pc, #68]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dc04:	699b      	ldr	r3, [r3, #24]
 800dc06:	f023 020f 	bic.w	r2, r3, #15
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	490e      	ldr	r1, [pc, #56]	@ (800dc48 <HAL_RCC_ClockConfig+0x244>)
 800dc10:	4313      	orrs	r3, r2
 800dc12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dc14:	4b0b      	ldr	r3, [pc, #44]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 030f 	and.w	r3, r3, #15
 800dc1c:	683a      	ldr	r2, [r7, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d214      	bcs.n	800dc4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc22:	4b08      	ldr	r3, [pc, #32]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f023 020f 	bic.w	r2, r3, #15
 800dc2a:	4906      	ldr	r1, [pc, #24]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc32:	4b04      	ldr	r3, [pc, #16]	@ (800dc44 <HAL_RCC_ClockConfig+0x240>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 030f 	and.w	r3, r3, #15
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d005      	beq.n	800dc4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e086      	b.n	800dd52 <HAL_RCC_ClockConfig+0x34e>
 800dc44:	52002000 	.word	0x52002000
 800dc48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f003 0304 	and.w	r3, r3, #4
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d010      	beq.n	800dc7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	691a      	ldr	r2, [r3, #16]
 800dc5c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dc5e:	699b      	ldr	r3, [r3, #24]
 800dc60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d208      	bcs.n	800dc7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dc68:	4b3c      	ldr	r3, [pc, #240]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	4939      	ldr	r1, [pc, #228]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0308 	and.w	r3, r3, #8
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d010      	beq.n	800dca8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	695a      	ldr	r2, [r3, #20]
 800dc8a:	4b34      	ldr	r3, [pc, #208]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d208      	bcs.n	800dca8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dc96:	4b31      	ldr	r3, [pc, #196]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	492e      	ldr	r1, [pc, #184]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dca4:	4313      	orrs	r3, r2
 800dca6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f003 0310 	and.w	r3, r3, #16
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d010      	beq.n	800dcd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	699a      	ldr	r2, [r3, #24]
 800dcb8:	4b28      	ldr	r3, [pc, #160]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dcba:	69db      	ldr	r3, [r3, #28]
 800dcbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d208      	bcs.n	800dcd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dcc4:	4b25      	ldr	r3, [pc, #148]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	699b      	ldr	r3, [r3, #24]
 800dcd0:	4922      	ldr	r1, [pc, #136]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 0320 	and.w	r3, r3, #32
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d010      	beq.n	800dd04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	69da      	ldr	r2, [r3, #28]
 800dce6:	4b1d      	ldr	r3, [pc, #116]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dce8:	6a1b      	ldr	r3, [r3, #32]
 800dcea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d208      	bcs.n	800dd04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800dcf2:	4b1a      	ldr	r3, [pc, #104]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	69db      	ldr	r3, [r3, #28]
 800dcfe:	4917      	ldr	r1, [pc, #92]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dd00:	4313      	orrs	r3, r2
 800dd02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dd04:	f000 f834 	bl	800dd70 <HAL_RCC_GetSysClockFreq>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	4b14      	ldr	r3, [pc, #80]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dd0c:	699b      	ldr	r3, [r3, #24]
 800dd0e:	0a1b      	lsrs	r3, r3, #8
 800dd10:	f003 030f 	and.w	r3, r3, #15
 800dd14:	4912      	ldr	r1, [pc, #72]	@ (800dd60 <HAL_RCC_ClockConfig+0x35c>)
 800dd16:	5ccb      	ldrb	r3, [r1, r3]
 800dd18:	f003 031f 	and.w	r3, r3, #31
 800dd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dd22:	4b0e      	ldr	r3, [pc, #56]	@ (800dd5c <HAL_RCC_ClockConfig+0x358>)
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	4a0d      	ldr	r2, [pc, #52]	@ (800dd60 <HAL_RCC_ClockConfig+0x35c>)
 800dd2c:	5cd3      	ldrb	r3, [r2, r3]
 800dd2e:	f003 031f 	and.w	r3, r3, #31
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	fa22 f303 	lsr.w	r3, r2, r3
 800dd38:	4a0a      	ldr	r2, [pc, #40]	@ (800dd64 <HAL_RCC_ClockConfig+0x360>)
 800dd3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dd3c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd68 <HAL_RCC_ClockConfig+0x364>)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800dd42:	4b0a      	ldr	r3, [pc, #40]	@ (800dd6c <HAL_RCC_ClockConfig+0x368>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7f9 fb70 	bl	800742c <HAL_InitTick>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3718      	adds	r7, #24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	58024400 	.word	0x58024400
 800dd60:	0801da44 	.word	0x0801da44
 800dd64:	24000004 	.word	0x24000004
 800dd68:	24000000 	.word	0x24000000
 800dd6c:	24000038 	.word	0x24000038

0800dd70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b089      	sub	sp, #36	@ 0x24
 800dd74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd76:	4bb3      	ldr	r3, [pc, #716]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd7e:	2b18      	cmp	r3, #24
 800dd80:	f200 8155 	bhi.w	800e02e <HAL_RCC_GetSysClockFreq+0x2be>
 800dd84:	a201      	add	r2, pc, #4	@ (adr r2, 800dd8c <HAL_RCC_GetSysClockFreq+0x1c>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800ddf1 	.word	0x0800ddf1
 800dd90:	0800e02f 	.word	0x0800e02f
 800dd94:	0800e02f 	.word	0x0800e02f
 800dd98:	0800e02f 	.word	0x0800e02f
 800dd9c:	0800e02f 	.word	0x0800e02f
 800dda0:	0800e02f 	.word	0x0800e02f
 800dda4:	0800e02f 	.word	0x0800e02f
 800dda8:	0800e02f 	.word	0x0800e02f
 800ddac:	0800de17 	.word	0x0800de17
 800ddb0:	0800e02f 	.word	0x0800e02f
 800ddb4:	0800e02f 	.word	0x0800e02f
 800ddb8:	0800e02f 	.word	0x0800e02f
 800ddbc:	0800e02f 	.word	0x0800e02f
 800ddc0:	0800e02f 	.word	0x0800e02f
 800ddc4:	0800e02f 	.word	0x0800e02f
 800ddc8:	0800e02f 	.word	0x0800e02f
 800ddcc:	0800de1d 	.word	0x0800de1d
 800ddd0:	0800e02f 	.word	0x0800e02f
 800ddd4:	0800e02f 	.word	0x0800e02f
 800ddd8:	0800e02f 	.word	0x0800e02f
 800dddc:	0800e02f 	.word	0x0800e02f
 800dde0:	0800e02f 	.word	0x0800e02f
 800dde4:	0800e02f 	.word	0x0800e02f
 800dde8:	0800e02f 	.word	0x0800e02f
 800ddec:	0800de23 	.word	0x0800de23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddf0:	4b94      	ldr	r3, [pc, #592]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 0320 	and.w	r3, r3, #32
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d009      	beq.n	800de10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddfc:	4b91      	ldr	r3, [pc, #580]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	08db      	lsrs	r3, r3, #3
 800de02:	f003 0303 	and.w	r3, r3, #3
 800de06:	4a90      	ldr	r2, [pc, #576]	@ (800e048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de08:	fa22 f303 	lsr.w	r3, r2, r3
 800de0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800de0e:	e111      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800de10:	4b8d      	ldr	r3, [pc, #564]	@ (800e048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de12:	61bb      	str	r3, [r7, #24]
      break;
 800de14:	e10e      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800de16:	4b8d      	ldr	r3, [pc, #564]	@ (800e04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800de18:	61bb      	str	r3, [r7, #24]
      break;
 800de1a:	e10b      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800de1c:	4b8c      	ldr	r3, [pc, #560]	@ (800e050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800de1e:	61bb      	str	r3, [r7, #24]
      break;
 800de20:	e108      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de22:	4b88      	ldr	r3, [pc, #544]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de26:	f003 0303 	and.w	r3, r3, #3
 800de2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800de2c:	4b85      	ldr	r3, [pc, #532]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800de38:	4b82      	ldr	r3, [pc, #520]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800de42:	4b80      	ldr	r3, [pc, #512]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de46:	08db      	lsrs	r3, r3, #3
 800de48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	fb02 f303 	mul.w	r3, r2, r3
 800de52:	ee07 3a90 	vmov	s15, r3
 800de56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 80e1 	beq.w	800e028 <HAL_RCC_GetSysClockFreq+0x2b8>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	f000 8083 	beq.w	800df74 <HAL_RCC_GetSysClockFreq+0x204>
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	2b02      	cmp	r3, #2
 800de72:	f200 80a1 	bhi.w	800dfb8 <HAL_RCC_GetSysClockFreq+0x248>
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <HAL_RCC_GetSysClockFreq+0x114>
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d056      	beq.n	800df30 <HAL_RCC_GetSysClockFreq+0x1c0>
 800de82:	e099      	b.n	800dfb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de84:	4b6f      	ldr	r3, [pc, #444]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 0320 	and.w	r3, r3, #32
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d02d      	beq.n	800deec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de90:	4b6c      	ldr	r3, [pc, #432]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	08db      	lsrs	r3, r3, #3
 800de96:	f003 0303 	and.w	r3, r3, #3
 800de9a:	4a6b      	ldr	r2, [pc, #428]	@ (800e048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de9c:	fa22 f303 	lsr.w	r3, r2, r3
 800dea0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	ee07 3a90 	vmov	s15, r3
 800dea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	ee07 3a90 	vmov	s15, r3
 800deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800deba:	4b62      	ldr	r3, [pc, #392]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800debc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800debe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec2:	ee07 3a90 	vmov	s15, r3
 800dec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deca:	ed97 6a02 	vldr	s12, [r7, #8]
 800dece:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ded2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ded6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dee6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800deea:	e087      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	ee07 3a90 	vmov	s15, r3
 800def2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800def6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e058 <HAL_RCC_GetSysClockFreq+0x2e8>
 800defa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800defe:	4b51      	ldr	r3, [pc, #324]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df06:	ee07 3a90 	vmov	s15, r3
 800df0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800df12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df2e:	e065      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	ee07 3a90 	vmov	s15, r3
 800df36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e05c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df42:	4b40      	ldr	r3, [pc, #256]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4a:	ee07 3a90 	vmov	s15, r3
 800df4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df52:	ed97 6a02 	vldr	s12, [r7, #8]
 800df56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800df72:	e043      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	ee07 3a90 	vmov	s15, r3
 800df7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e060 <HAL_RCC_GetSysClockFreq+0x2f0>
 800df82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df86:	4b2f      	ldr	r3, [pc, #188]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df8e:	ee07 3a90 	vmov	s15, r3
 800df92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df96:	ed97 6a02 	vldr	s12, [r7, #8]
 800df9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dfb6:	e021      	b.n	800dffc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	ee07 3a90 	vmov	s15, r3
 800dfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e05c <HAL_RCC_GetSysClockFreq+0x2ec>
 800dfc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfca:	4b1e      	ldr	r3, [pc, #120]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd2:	ee07 3a90 	vmov	s15, r3
 800dfd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfda:	ed97 6a02 	vldr	s12, [r7, #8]
 800dfde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e054 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800dffa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800dffc:	4b11      	ldr	r3, [pc, #68]	@ (800e044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e000:	0a5b      	lsrs	r3, r3, #9
 800e002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e006:	3301      	adds	r3, #1
 800e008:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e014:	edd7 6a07 	vldr	s13, [r7, #28]
 800e018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e020:	ee17 3a90 	vmov	r3, s15
 800e024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e026:	e005      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e028:	2300      	movs	r3, #0
 800e02a:	61bb      	str	r3, [r7, #24]
      break;
 800e02c:	e002      	b.n	800e034 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e02e:	4b07      	ldr	r3, [pc, #28]	@ (800e04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e030:	61bb      	str	r3, [r7, #24]
      break;
 800e032:	bf00      	nop
  }

  return sysclockfreq;
 800e034:	69bb      	ldr	r3, [r7, #24]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3724      	adds	r7, #36	@ 0x24
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	58024400 	.word	0x58024400
 800e048:	03d09000 	.word	0x03d09000
 800e04c:	003d0900 	.word	0x003d0900
 800e050:	016e3600 	.word	0x016e3600
 800e054:	46000000 	.word	0x46000000
 800e058:	4c742400 	.word	0x4c742400
 800e05c:	4a742400 	.word	0x4a742400
 800e060:	4bb71b00 	.word	0x4bb71b00

0800e064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e06a:	f7ff fe81 	bl	800dd70 <HAL_RCC_GetSysClockFreq>
 800e06e:	4602      	mov	r2, r0
 800e070:	4b10      	ldr	r3, [pc, #64]	@ (800e0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	0a1b      	lsrs	r3, r3, #8
 800e076:	f003 030f 	and.w	r3, r3, #15
 800e07a:	490f      	ldr	r1, [pc, #60]	@ (800e0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800e07c:	5ccb      	ldrb	r3, [r1, r3]
 800e07e:	f003 031f 	and.w	r3, r3, #31
 800e082:	fa22 f303 	lsr.w	r3, r2, r3
 800e086:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e088:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	f003 030f 	and.w	r3, r3, #15
 800e090:	4a09      	ldr	r2, [pc, #36]	@ (800e0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800e092:	5cd3      	ldrb	r3, [r2, r3]
 800e094:	f003 031f 	and.w	r3, r3, #31
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	fa22 f303 	lsr.w	r3, r2, r3
 800e09e:	4a07      	ldr	r2, [pc, #28]	@ (800e0bc <HAL_RCC_GetHCLKFreq+0x58>)
 800e0a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e0a2:	4a07      	ldr	r2, [pc, #28]	@ (800e0c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e0a8:	4b04      	ldr	r3, [pc, #16]	@ (800e0bc <HAL_RCC_GetHCLKFreq+0x58>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	58024400 	.word	0x58024400
 800e0b8:	0801da44 	.word	0x0801da44
 800e0bc:	24000004 	.word	0x24000004
 800e0c0:	24000000 	.word	0x24000000

0800e0c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e0c8:	f7ff ffcc 	bl	800e064 <HAL_RCC_GetHCLKFreq>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	4b06      	ldr	r3, [pc, #24]	@ (800e0e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	091b      	lsrs	r3, r3, #4
 800e0d4:	f003 0307 	and.w	r3, r3, #7
 800e0d8:	4904      	ldr	r1, [pc, #16]	@ (800e0ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800e0da:	5ccb      	ldrb	r3, [r1, r3]
 800e0dc:	f003 031f 	and.w	r3, r3, #31
 800e0e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	58024400 	.word	0x58024400
 800e0ec:	0801da44 	.word	0x0801da44

0800e0f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e0f4:	f7ff ffb6 	bl	800e064 <HAL_RCC_GetHCLKFreq>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	4b06      	ldr	r3, [pc, #24]	@ (800e114 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	0a1b      	lsrs	r3, r3, #8
 800e100:	f003 0307 	and.w	r3, r3, #7
 800e104:	4904      	ldr	r1, [pc, #16]	@ (800e118 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e106:	5ccb      	ldrb	r3, [r1, r3]
 800e108:	f003 031f 	and.w	r3, r3, #31
 800e10c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e110:	4618      	mov	r0, r3
 800e112:	bd80      	pop	{r7, pc}
 800e114:	58024400 	.word	0x58024400
 800e118:	0801da44 	.word	0x0801da44

0800e11c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e120:	b0c6      	sub	sp, #280	@ 0x118
 800e122:	af00      	add	r7, sp, #0
 800e124:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e128:	2300      	movs	r3, #0
 800e12a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e12e:	2300      	movs	r3, #0
 800e130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e140:	2500      	movs	r5, #0
 800e142:	ea54 0305 	orrs.w	r3, r4, r5
 800e146:	d049      	beq.n	800e1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e14c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e14e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e152:	d02f      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e154:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e158:	d828      	bhi.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e15a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e15e:	d01a      	beq.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e164:	d822      	bhi.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e16a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e16e:	d007      	beq.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e170:	e01c      	b.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e172:	4bab      	ldr	r3, [pc, #684]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e176:	4aaa      	ldr	r2, [pc, #680]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e17c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e17e:	e01a      	b.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e184:	3308      	adds	r3, #8
 800e186:	2102      	movs	r1, #2
 800e188:	4618      	mov	r0, r3
 800e18a:	f002 fa49 	bl	8010620 <RCCEx_PLL2_Config>
 800e18e:	4603      	mov	r3, r0
 800e190:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e194:	e00f      	b.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e19a:	3328      	adds	r3, #40	@ 0x28
 800e19c:	2102      	movs	r1, #2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f002 faf0 	bl	8010784 <RCCEx_PLL3_Config>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e1aa:	e004      	b.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e1b2:	e000      	b.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e1be:	4b98      	ldr	r3, [pc, #608]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1cc:	4a94      	ldr	r2, [pc, #592]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e1ce:	430b      	orrs	r3, r1
 800e1d0:	6513      	str	r3, [r2, #80]	@ 0x50
 800e1d2:	e003      	b.n	800e1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e1e8:	f04f 0900 	mov.w	r9, #0
 800e1ec:	ea58 0309 	orrs.w	r3, r8, r9
 800e1f0:	d047      	beq.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1f8:	2b04      	cmp	r3, #4
 800e1fa:	d82a      	bhi.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e204 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e202:	bf00      	nop
 800e204:	0800e219 	.word	0x0800e219
 800e208:	0800e227 	.word	0x0800e227
 800e20c:	0800e23d 	.word	0x0800e23d
 800e210:	0800e25b 	.word	0x0800e25b
 800e214:	0800e25b 	.word	0x0800e25b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e218:	4b81      	ldr	r3, [pc, #516]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21c:	4a80      	ldr	r2, [pc, #512]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e21e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e224:	e01a      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e22a:	3308      	adds	r3, #8
 800e22c:	2100      	movs	r1, #0
 800e22e:	4618      	mov	r0, r3
 800e230:	f002 f9f6 	bl	8010620 <RCCEx_PLL2_Config>
 800e234:	4603      	mov	r3, r0
 800e236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e23a:	e00f      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e240:	3328      	adds	r3, #40	@ 0x28
 800e242:	2100      	movs	r1, #0
 800e244:	4618      	mov	r0, r3
 800e246:	f002 fa9d 	bl	8010784 <RCCEx_PLL3_Config>
 800e24a:	4603      	mov	r3, r0
 800e24c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e250:	e004      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e258:	e000      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800e25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e25c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10a      	bne.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e264:	4b6e      	ldr	r3, [pc, #440]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e268:	f023 0107 	bic.w	r1, r3, #7
 800e26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e272:	4a6b      	ldr	r2, [pc, #428]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e274:	430b      	orrs	r3, r1
 800e276:	6513      	str	r3, [r2, #80]	@ 0x50
 800e278:	e003      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e27a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e27e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800e28e:	f04f 0b00 	mov.w	fp, #0
 800e292:	ea5a 030b 	orrs.w	r3, sl, fp
 800e296:	d05b      	beq.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800e298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e29c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e2a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e2a4:	d03b      	beq.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800e2a6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800e2aa:	d834      	bhi.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e2ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2b0:	d037      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800e2b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e2b6:	d82e      	bhi.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e2b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e2bc:	d033      	beq.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800e2be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e2c2:	d828      	bhi.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e2c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2c8:	d01a      	beq.n	800e300 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800e2ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2ce:	d822      	bhi.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d003      	beq.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800e2d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e2d8:	d007      	beq.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800e2da:	e01c      	b.n	800e316 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2dc:	4b50      	ldr	r3, [pc, #320]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e0:	4a4f      	ldr	r2, [pc, #316]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e2e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e2e8:	e01e      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ee:	3308      	adds	r3, #8
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f002 f994 	bl	8010620 <RCCEx_PLL2_Config>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e2fe:	e013      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e304:	3328      	adds	r3, #40	@ 0x28
 800e306:	2100      	movs	r1, #0
 800e308:	4618      	mov	r0, r3
 800e30a:	f002 fa3b 	bl	8010784 <RCCEx_PLL3_Config>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e314:	e008      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e316:	2301      	movs	r3, #1
 800e318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e31c:	e004      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e31e:	bf00      	nop
 800e320:	e002      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e322:	bf00      	nop
 800e324:	e000      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800e326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e328:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10b      	bne.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e330:	4b3b      	ldr	r3, [pc, #236]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e334:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800e338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e33c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e340:	4a37      	ldr	r2, [pc, #220]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e342:	430b      	orrs	r3, r1
 800e344:	6593      	str	r3, [r2, #88]	@ 0x58
 800e346:	e003      	b.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e34c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800e35c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e360:	2300      	movs	r3, #0
 800e362:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e366:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800e36a:	460b      	mov	r3, r1
 800e36c:	4313      	orrs	r3, r2
 800e36e:	d05d      	beq.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800e370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e374:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e378:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e37c:	d03b      	beq.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800e37e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e382:	d834      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e384:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e388:	d037      	beq.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e38a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e38e:	d82e      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e394:	d033      	beq.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e39a:	d828      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e3a0:	d01a      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e3a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e3a6:	d822      	bhi.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d003      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800e3ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3b0:	d007      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800e3b2:	e01c      	b.n	800e3ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b8:	4a19      	ldr	r2, [pc, #100]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e3ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e3be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3c0:	e01e      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f002 f928 	bl	8010620 <RCCEx_PLL2_Config>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800e3d6:	e013      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3dc:	3328      	adds	r3, #40	@ 0x28
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f002 f9cf 	bl	8010784 <RCCEx_PLL3_Config>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e3ec:	e008      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3f4:	e004      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3f6:	bf00      	nop
 800e3f8:	e002      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3fa:	bf00      	nop
 800e3fc:	e000      	b.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800e3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10d      	bne.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e408:	4b05      	ldr	r3, [pc, #20]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e40a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e40c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800e410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e418:	4a01      	ldr	r2, [pc, #4]	@ (800e420 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e41a:	430b      	orrs	r3, r1
 800e41c:	6593      	str	r3, [r2, #88]	@ 0x58
 800e41e:	e005      	b.n	800e42c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800e420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800e438:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e43c:	2300      	movs	r3, #0
 800e43e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e442:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800e446:	460b      	mov	r3, r1
 800e448:	4313      	orrs	r3, r2
 800e44a:	d03a      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800e44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e452:	2b30      	cmp	r3, #48	@ 0x30
 800e454:	d01f      	beq.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800e456:	2b30      	cmp	r3, #48	@ 0x30
 800e458:	d819      	bhi.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e45a:	2b20      	cmp	r3, #32
 800e45c:	d00c      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e45e:	2b20      	cmp	r3, #32
 800e460:	d815      	bhi.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d019      	beq.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800e466:	2b10      	cmp	r3, #16
 800e468:	d111      	bne.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e46a:	4baa      	ldr	r3, [pc, #680]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46e:	4aa9      	ldr	r2, [pc, #676]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e476:	e011      	b.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e47c:	3308      	adds	r3, #8
 800e47e:	2102      	movs	r1, #2
 800e480:	4618      	mov	r0, r3
 800e482:	f002 f8cd 	bl	8010620 <RCCEx_PLL2_Config>
 800e486:	4603      	mov	r3, r0
 800e488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800e48c:	e006      	b.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e494:	e002      	b.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e496:	bf00      	nop
 800e498:	e000      	b.n	800e49c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800e49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e49c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e4a4:	4b9b      	ldr	r3, [pc, #620]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800e4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4b2:	4a98      	ldr	r2, [pc, #608]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e4b8:	e003      	b.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800e4ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e4d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	d051      	beq.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800e4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4ec:	d035      	beq.n	800e55a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800e4ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4f2:	d82e      	bhi.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e4f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4f8:	d031      	beq.n	800e55e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800e4fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e4fe:	d828      	bhi.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e504:	d01a      	beq.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800e506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e50a:	d822      	bhi.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800e510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e514:	d007      	beq.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800e516:	e01c      	b.n	800e552 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e518:	4b7e      	ldr	r3, [pc, #504]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51c:	4a7d      	ldr	r2, [pc, #500]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e51e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e522:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e524:	e01c      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52a:	3308      	adds	r3, #8
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f002 f876 	bl	8010620 <RCCEx_PLL2_Config>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e53a:	e011      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e540:	3328      	adds	r3, #40	@ 0x28
 800e542:	2100      	movs	r1, #0
 800e544:	4618      	mov	r0, r3
 800e546:	f002 f91d 	bl	8010784 <RCCEx_PLL3_Config>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e550:	e006      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e558:	e002      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e55a:	bf00      	nop
 800e55c:	e000      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800e55e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10a      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e568:	4b6a      	ldr	r3, [pc, #424]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e56a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e56c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800e570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e576:	4a67      	ldr	r2, [pc, #412]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e578:	430b      	orrs	r3, r1
 800e57a:	6513      	str	r3, [r2, #80]	@ 0x50
 800e57c:	e003      	b.n	800e586 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e57e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e582:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e596:	2300      	movs	r3, #0
 800e598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e59c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	d053      	beq.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e5b0:	d033      	beq.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800e5b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e5b6:	d82c      	bhi.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e5bc:	d02f      	beq.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800e5be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e5c2:	d826      	bhi.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e5c8:	d02b      	beq.n	800e622 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e5ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e5ce:	d820      	bhi.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5d4:	d012      	beq.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800e5d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5da:	d81a      	bhi.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d022      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800e5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5e4:	d115      	bne.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ea:	3308      	adds	r3, #8
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f002 f816 	bl	8010620 <RCCEx_PLL2_Config>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e5fa:	e015      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e600:	3328      	adds	r3, #40	@ 0x28
 800e602:	2101      	movs	r1, #1
 800e604:	4618      	mov	r0, r3
 800e606:	f002 f8bd 	bl	8010784 <RCCEx_PLL3_Config>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e610:	e00a      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e612:	2301      	movs	r3, #1
 800e614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e618:	e006      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e61a:	bf00      	nop
 800e61c:	e004      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e61e:	bf00      	nop
 800e620:	e002      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e622:	bf00      	nop
 800e624:	e000      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800e626:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10a      	bne.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e630:	4b38      	ldr	r3, [pc, #224]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e634:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e63c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e63e:	4a35      	ldr	r2, [pc, #212]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e640:	430b      	orrs	r3, r1
 800e642:	6513      	str	r3, [r2, #80]	@ 0x50
 800e644:	e003      	b.n	800e64e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e646:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e64a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e65a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e65e:	2300      	movs	r3, #0
 800e660:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e664:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e668:	460b      	mov	r3, r1
 800e66a:	4313      	orrs	r3, r2
 800e66c:	d058      	beq.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e672:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e67a:	d033      	beq.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800e67c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e680:	d82c      	bhi.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e686:	d02f      	beq.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800e688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e68c:	d826      	bhi.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e68e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e692:	d02b      	beq.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800e694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e698:	d820      	bhi.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e69a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e69e:	d012      	beq.n	800e6c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800e6a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e6a4:	d81a      	bhi.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d022      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e6aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e6ae:	d115      	bne.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f001 ffb1 	bl	8010620 <RCCEx_PLL2_Config>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e6c4:	e015      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ca:	3328      	adds	r3, #40	@ 0x28
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f002 f858 	bl	8010784 <RCCEx_PLL3_Config>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e6da:	e00a      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6e2:	e006      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6e4:	bf00      	nop
 800e6e6:	e004      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6e8:	bf00      	nop
 800e6ea:	e002      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6ec:	bf00      	nop
 800e6ee:	e000      	b.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800e6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10e      	bne.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e6fa:	4b06      	ldr	r3, [pc, #24]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e70a:	4a02      	ldr	r2, [pc, #8]	@ (800e714 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800e70c:	430b      	orrs	r3, r1
 800e70e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e710:	e006      	b.n	800e720 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e712:	bf00      	nop
 800e714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e71c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e728:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e72c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e730:	2300      	movs	r3, #0
 800e732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e736:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4313      	orrs	r3, r2
 800e73e:	d037      	beq.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e74a:	d00e      	beq.n	800e76a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800e74c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e750:	d816      	bhi.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800e752:	2b00      	cmp	r3, #0
 800e754:	d018      	beq.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800e756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e75a:	d111      	bne.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e75c:	4bc4      	ldr	r3, [pc, #784]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e760:	4ac3      	ldr	r2, [pc, #780]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e768:	e00f      	b.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76e:	3308      	adds	r3, #8
 800e770:	2101      	movs	r1, #1
 800e772:	4618      	mov	r0, r3
 800e774:	f001 ff54 	bl	8010620 <RCCEx_PLL2_Config>
 800e778:	4603      	mov	r3, r0
 800e77a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e77e:	e004      	b.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e786:	e000      	b.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e78a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10a      	bne.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e792:	4bb7      	ldr	r3, [pc, #732]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e796:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7a0:	4ab3      	ldr	r2, [pc, #716]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7a2:	430b      	orrs	r3, r1
 800e7a4:	6513      	str	r3, [r2, #80]	@ 0x50
 800e7a6:	e003      	b.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e7bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e7c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	d039      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e7d6:	2b03      	cmp	r3, #3
 800e7d8:	d81c      	bhi.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e7da:	a201      	add	r2, pc, #4	@ (adr r2, 800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e0:	0800e81d 	.word	0x0800e81d
 800e7e4:	0800e7f1 	.word	0x0800e7f1
 800e7e8:	0800e7ff 	.word	0x0800e7ff
 800e7ec:	0800e81d 	.word	0x0800e81d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7f0:	4b9f      	ldr	r3, [pc, #636]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f4:	4a9e      	ldr	r2, [pc, #632]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e7f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e7fc:	e00f      	b.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e802:	3308      	adds	r3, #8
 800e804:	2102      	movs	r1, #2
 800e806:	4618      	mov	r0, r3
 800e808:	f001 ff0a 	bl	8010620 <RCCEx_PLL2_Config>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e812:	e004      	b.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e81a:	e000      	b.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e81e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e822:	2b00      	cmp	r3, #0
 800e824:	d10a      	bne.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e826:	4b92      	ldr	r3, [pc, #584]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e82a:	f023 0103 	bic.w	r1, r3, #3
 800e82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e834:	4a8e      	ldr	r2, [pc, #568]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e836:	430b      	orrs	r3, r1
 800e838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e83a:	e003      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e83c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e854:	2300      	movs	r3, #0
 800e856:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e85a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e85e:	460b      	mov	r3, r1
 800e860:	4313      	orrs	r3, r2
 800e862:	f000 8099 	beq.w	800e998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e866:	4b83      	ldr	r3, [pc, #524]	@ (800ea74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a82      	ldr	r2, [pc, #520]	@ (800ea74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e86c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e870:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e872:	f7f8 fe25 	bl	80074c0 <HAL_GetTick>
 800e876:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e87a:	e00b      	b.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e87c:	f7f8 fe20 	bl	80074c0 <HAL_GetTick>
 800e880:	4602      	mov	r2, r0
 800e882:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	2b64      	cmp	r3, #100	@ 0x64
 800e88a:	d903      	bls.n	800e894 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e88c:	2303      	movs	r3, #3
 800e88e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e892:	e005      	b.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e894:	4b77      	ldr	r3, [pc, #476]	@ (800ea74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d0ed      	beq.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d173      	bne.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e8a8:	4b71      	ldr	r3, [pc, #452]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e8b4:	4053      	eors	r3, r2
 800e8b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d015      	beq.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e8be:	4b6c      	ldr	r3, [pc, #432]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e8ca:	4b69      	ldr	r3, [pc, #420]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8ce:	4a68      	ldr	r2, [pc, #416]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e8d6:	4b66      	ldr	r3, [pc, #408]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8da:	4a65      	ldr	r2, [pc, #404]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e8e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e8e2:	4a63      	ldr	r2, [pc, #396]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8f6:	d118      	bne.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8f8:	f7f8 fde2 	bl	80074c0 <HAL_GetTick>
 800e8fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e900:	e00d      	b.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e902:	f7f8 fddd 	bl	80074c0 <HAL_GetTick>
 800e906:	4602      	mov	r2, r0
 800e908:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e90c:	1ad2      	subs	r2, r2, r3
 800e90e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e912:	429a      	cmp	r2, r3
 800e914:	d903      	bls.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e91c:	e005      	b.n	800e92a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e91e:	4b54      	ldr	r3, [pc, #336]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e922:	f003 0302 	and.w	r3, r3, #2
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0eb      	beq.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e92a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d129      	bne.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e93a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e93e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e942:	d10e      	bne.n	800e962 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e944:	4b4a      	ldr	r3, [pc, #296]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e954:	091a      	lsrs	r2, r3, #4
 800e956:	4b48      	ldr	r3, [pc, #288]	@ (800ea78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e958:	4013      	ands	r3, r2
 800e95a:	4a45      	ldr	r2, [pc, #276]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e95c:	430b      	orrs	r3, r1
 800e95e:	6113      	str	r3, [r2, #16]
 800e960:	e005      	b.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e962:	4b43      	ldr	r3, [pc, #268]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	4a42      	ldr	r2, [pc, #264]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e968:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e96c:	6113      	str	r3, [r2, #16]
 800e96e:	4b40      	ldr	r3, [pc, #256]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e970:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e97a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e97e:	4a3c      	ldr	r2, [pc, #240]	@ (800ea70 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e980:	430b      	orrs	r3, r1
 800e982:	6713      	str	r3, [r2, #112]	@ 0x70
 800e984:	e008      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e98a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e98e:	e003      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	f002 0301 	and.w	r3, r2, #1
 800e9a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e9ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	f000 808f 	beq.w	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9c0:	2b28      	cmp	r3, #40	@ 0x28
 800e9c2:	d871      	bhi.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e9c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e9cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ca:	bf00      	nop
 800e9cc:	0800eab1 	.word	0x0800eab1
 800e9d0:	0800eaa9 	.word	0x0800eaa9
 800e9d4:	0800eaa9 	.word	0x0800eaa9
 800e9d8:	0800eaa9 	.word	0x0800eaa9
 800e9dc:	0800eaa9 	.word	0x0800eaa9
 800e9e0:	0800eaa9 	.word	0x0800eaa9
 800e9e4:	0800eaa9 	.word	0x0800eaa9
 800e9e8:	0800eaa9 	.word	0x0800eaa9
 800e9ec:	0800ea7d 	.word	0x0800ea7d
 800e9f0:	0800eaa9 	.word	0x0800eaa9
 800e9f4:	0800eaa9 	.word	0x0800eaa9
 800e9f8:	0800eaa9 	.word	0x0800eaa9
 800e9fc:	0800eaa9 	.word	0x0800eaa9
 800ea00:	0800eaa9 	.word	0x0800eaa9
 800ea04:	0800eaa9 	.word	0x0800eaa9
 800ea08:	0800eaa9 	.word	0x0800eaa9
 800ea0c:	0800ea93 	.word	0x0800ea93
 800ea10:	0800eaa9 	.word	0x0800eaa9
 800ea14:	0800eaa9 	.word	0x0800eaa9
 800ea18:	0800eaa9 	.word	0x0800eaa9
 800ea1c:	0800eaa9 	.word	0x0800eaa9
 800ea20:	0800eaa9 	.word	0x0800eaa9
 800ea24:	0800eaa9 	.word	0x0800eaa9
 800ea28:	0800eaa9 	.word	0x0800eaa9
 800ea2c:	0800eab1 	.word	0x0800eab1
 800ea30:	0800eaa9 	.word	0x0800eaa9
 800ea34:	0800eaa9 	.word	0x0800eaa9
 800ea38:	0800eaa9 	.word	0x0800eaa9
 800ea3c:	0800eaa9 	.word	0x0800eaa9
 800ea40:	0800eaa9 	.word	0x0800eaa9
 800ea44:	0800eaa9 	.word	0x0800eaa9
 800ea48:	0800eaa9 	.word	0x0800eaa9
 800ea4c:	0800eab1 	.word	0x0800eab1
 800ea50:	0800eaa9 	.word	0x0800eaa9
 800ea54:	0800eaa9 	.word	0x0800eaa9
 800ea58:	0800eaa9 	.word	0x0800eaa9
 800ea5c:	0800eaa9 	.word	0x0800eaa9
 800ea60:	0800eaa9 	.word	0x0800eaa9
 800ea64:	0800eaa9 	.word	0x0800eaa9
 800ea68:	0800eaa9 	.word	0x0800eaa9
 800ea6c:	0800eab1 	.word	0x0800eab1
 800ea70:	58024400 	.word	0x58024400
 800ea74:	58024800 	.word	0x58024800
 800ea78:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ea7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea80:	3308      	adds	r3, #8
 800ea82:	2101      	movs	r1, #1
 800ea84:	4618      	mov	r0, r3
 800ea86:	f001 fdcb 	bl	8010620 <RCCEx_PLL2_Config>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ea90:	e00f      	b.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea96:	3328      	adds	r3, #40	@ 0x28
 800ea98:	2101      	movs	r1, #1
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f001 fe72 	bl	8010784 <RCCEx_PLL3_Config>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800eaa6:	e004      	b.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eaae:	e000      	b.n	800eab2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800eab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10a      	bne.n	800ead0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800eaba:	4bbf      	ldr	r3, [pc, #764]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eabe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800eac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eac8:	4abb      	ldr	r2, [pc, #748]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eaca:	430b      	orrs	r3, r1
 800eacc:	6553      	str	r3, [r2, #84]	@ 0x54
 800eace:	e003      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ead0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ead4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ead8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae0:	f002 0302 	and.w	r3, r2, #2
 800eae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eae8:	2300      	movs	r3, #0
 800eaea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eaee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	d041      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800eaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eafc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eafe:	2b05      	cmp	r3, #5
 800eb00:	d824      	bhi.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800eb02:	a201      	add	r2, pc, #4	@ (adr r2, 800eb08 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800eb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb08:	0800eb55 	.word	0x0800eb55
 800eb0c:	0800eb21 	.word	0x0800eb21
 800eb10:	0800eb37 	.word	0x0800eb37
 800eb14:	0800eb55 	.word	0x0800eb55
 800eb18:	0800eb55 	.word	0x0800eb55
 800eb1c:	0800eb55 	.word	0x0800eb55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb24:	3308      	adds	r3, #8
 800eb26:	2101      	movs	r1, #1
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f001 fd79 	bl	8010620 <RCCEx_PLL2_Config>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb34:	e00f      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb3a:	3328      	adds	r3, #40	@ 0x28
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f001 fe20 	bl	8010784 <RCCEx_PLL3_Config>
 800eb44:	4603      	mov	r3, r0
 800eb46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800eb4a:	e004      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb52:	e000      	b.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800eb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10a      	bne.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eb5e:	4b96      	ldr	r3, [pc, #600]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb62:	f023 0107 	bic.w	r1, r3, #7
 800eb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb6c:	4a92      	ldr	r2, [pc, #584]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eb6e:	430b      	orrs	r3, r1
 800eb70:	6553      	str	r3, [r2, #84]	@ 0x54
 800eb72:	e003      	b.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800eb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	f002 0304 	and.w	r3, r2, #4
 800eb88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb92:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eb96:	460b      	mov	r3, r1
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	d044      	beq.n	800ec26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800eb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eba4:	2b05      	cmp	r3, #5
 800eba6:	d825      	bhi.n	800ebf4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800eba8:	a201      	add	r2, pc, #4	@ (adr r2, 800ebb0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ebaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebae:	bf00      	nop
 800ebb0:	0800ebfd 	.word	0x0800ebfd
 800ebb4:	0800ebc9 	.word	0x0800ebc9
 800ebb8:	0800ebdf 	.word	0x0800ebdf
 800ebbc:	0800ebfd 	.word	0x0800ebfd
 800ebc0:	0800ebfd 	.word	0x0800ebfd
 800ebc4:	0800ebfd 	.word	0x0800ebfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ebc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebcc:	3308      	adds	r3, #8
 800ebce:	2101      	movs	r1, #1
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f001 fd25 	bl	8010620 <RCCEx_PLL2_Config>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ebdc:	e00f      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ebde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebe2:	3328      	adds	r3, #40	@ 0x28
 800ebe4:	2101      	movs	r1, #1
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f001 fdcc 	bl	8010784 <RCCEx_PLL3_Config>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ebf2:	e004      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ebfa:	e000      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ebfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10b      	bne.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ec06:	4b6c      	ldr	r3, [pc, #432]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ec08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec0a:	f023 0107 	bic.w	r1, r3, #7
 800ec0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec16:	4a68      	ldr	r2, [pc, #416]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ec18:	430b      	orrs	r3, r1
 800ec1a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec1c:	e003      	b.n	800ec26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ec26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f002 0320 	and.w	r3, r2, #32
 800ec32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ec36:	2300      	movs	r3, #0
 800ec38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ec40:	460b      	mov	r3, r1
 800ec42:	4313      	orrs	r3, r2
 800ec44:	d055      	beq.n	800ecf2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ec46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec52:	d033      	beq.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ec54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec58:	d82c      	bhi.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec5e:	d02f      	beq.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ec60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec64:	d826      	bhi.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec6a:	d02b      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ec6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ec70:	d820      	bhi.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec76:	d012      	beq.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ec78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec7c:	d81a      	bhi.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d022      	beq.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ec82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec86:	d115      	bne.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f001 fcc5 	bl	8010620 <RCCEx_PLL2_Config>
 800ec96:	4603      	mov	r3, r0
 800ec98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ec9c:	e015      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eca2:	3328      	adds	r3, #40	@ 0x28
 800eca4:	2102      	movs	r1, #2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f001 fd6c 	bl	8010784 <RCCEx_PLL3_Config>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ecb2:	e00a      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ecba:	e006      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ecbc:	bf00      	nop
 800ecbe:	e004      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ecc0:	bf00      	nop
 800ecc2:	e002      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ecc4:	bf00      	nop
 800ecc6:	e000      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ecc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d10b      	bne.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ecd2:	4b39      	ldr	r3, [pc, #228]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ecd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ecda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ece2:	4a35      	ldr	r2, [pc, #212]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ece4:	430b      	orrs	r3, r1
 800ece6:	6553      	str	r3, [r2, #84]	@ 0x54
 800ece8:	e003      	b.n	800ecf2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ecf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ecfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed02:	2300      	movs	r3, #0
 800ed04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	d058      	beq.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ed12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ed1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ed1e:	d033      	beq.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ed20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ed24:	d82c      	bhi.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed2a:	d02f      	beq.n	800ed8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ed2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed30:	d826      	bhi.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed36:	d02b      	beq.n	800ed90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ed38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ed3c:	d820      	bhi.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed42:	d012      	beq.n	800ed6a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ed44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed48:	d81a      	bhi.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d022      	beq.n	800ed94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ed4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed52:	d115      	bne.n	800ed80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed58:	3308      	adds	r3, #8
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f001 fc5f 	bl	8010620 <RCCEx_PLL2_Config>
 800ed62:	4603      	mov	r3, r0
 800ed64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed68:	e015      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ed6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed6e:	3328      	adds	r3, #40	@ 0x28
 800ed70:	2102      	movs	r1, #2
 800ed72:	4618      	mov	r0, r3
 800ed74:	f001 fd06 	bl	8010784 <RCCEx_PLL3_Config>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ed7e:	e00a      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed86:	e006      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed88:	bf00      	nop
 800ed8a:	e004      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed8c:	bf00      	nop
 800ed8e:	e002      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed90:	bf00      	nop
 800ed92:	e000      	b.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ed94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10e      	bne.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ed9e:	4b06      	ldr	r3, [pc, #24]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800eda0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eda2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800eda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800edae:	4a02      	ldr	r2, [pc, #8]	@ (800edb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800edb0:	430b      	orrs	r3, r1
 800edb2:	6593      	str	r3, [r2, #88]	@ 0x58
 800edb4:	e006      	b.n	800edc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800edb6:	bf00      	nop
 800edb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800edc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800edd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800edd4:	2300      	movs	r3, #0
 800edd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800edda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800edde:	460b      	mov	r3, r1
 800ede0:	4313      	orrs	r3, r2
 800ede2:	d055      	beq.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ede4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ede8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800edec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edf0:	d033      	beq.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800edf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800edf6:	d82c      	bhi.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800edf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edfc:	d02f      	beq.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800edfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee02:	d826      	bhi.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ee04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ee08:	d02b      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ee0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ee0e:	d820      	bhi.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ee10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee14:	d012      	beq.n	800ee3c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ee16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee1a:	d81a      	bhi.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d022      	beq.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ee20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ee24:	d115      	bne.n	800ee52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f001 fbf6 	bl	8010620 <RCCEx_PLL2_Config>
 800ee34:	4603      	mov	r3, r0
 800ee36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee3a:	e015      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ee3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee40:	3328      	adds	r3, #40	@ 0x28
 800ee42:	2102      	movs	r1, #2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f001 fc9d 	bl	8010784 <RCCEx_PLL3_Config>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ee50:	e00a      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee52:	2301      	movs	r3, #1
 800ee54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee58:	e006      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee5a:	bf00      	nop
 800ee5c:	e004      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee5e:	bf00      	nop
 800ee60:	e002      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee62:	bf00      	nop
 800ee64:	e000      	b.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ee66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10b      	bne.n	800ee88 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ee70:	4ba0      	ldr	r3, [pc, #640]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ee78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee80:	4a9c      	ldr	r2, [pc, #624]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ee82:	430b      	orrs	r3, r1
 800ee84:	6593      	str	r3, [r2, #88]	@ 0x58
 800ee86:	e003      	b.n	800ee90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ee8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ee90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee98:	f002 0308 	and.w	r3, r2, #8
 800ee9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eea0:	2300      	movs	r3, #0
 800eea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eea6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4313      	orrs	r3, r2
 800eeae:	d01e      	beq.n	800eeee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800eeb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eebc:	d10c      	bne.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eec2:	3328      	adds	r3, #40	@ 0x28
 800eec4:	2102      	movs	r1, #2
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 fc5c 	bl	8010784 <RCCEx_PLL3_Config>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800eed8:	4b86      	ldr	r3, [pc, #536]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eedc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee8:	4a82      	ldr	r2, [pc, #520]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800eeea:	430b      	orrs	r3, r1
 800eeec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800eeee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	f002 0310 	and.w	r3, r2, #16
 800eefa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eefe:	2300      	movs	r3, #0
 800ef00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ef04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	d01e      	beq.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ef0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef1a:	d10c      	bne.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ef1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef20:	3328      	adds	r3, #40	@ 0x28
 800ef22:	2102      	movs	r1, #2
 800ef24:	4618      	mov	r0, r3
 800ef26:	f001 fc2d 	bl	8010784 <RCCEx_PLL3_Config>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ef30:	2301      	movs	r3, #1
 800ef32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ef36:	4b6f      	ldr	r3, [pc, #444]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ef3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ef46:	4a6b      	ldr	r2, [pc, #428]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ef48:	430b      	orrs	r3, r1
 800ef4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ef4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ef58:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ef62:	460b      	mov	r3, r1
 800ef64:	4313      	orrs	r3, r2
 800ef66:	d03e      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ef68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef74:	d022      	beq.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ef76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef7a:	d81b      	bhi.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ef80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef84:	d00b      	beq.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ef86:	e015      	b.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 fb45 	bl	8010620 <RCCEx_PLL2_Config>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ef9c:	e00f      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efa2:	3328      	adds	r3, #40	@ 0x28
 800efa4:	2102      	movs	r1, #2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f001 fbec 	bl	8010784 <RCCEx_PLL3_Config>
 800efac:	4603      	mov	r3, r0
 800efae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800efb2:	e004      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800efba:	e000      	b.n	800efbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800efbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10b      	bne.n	800efde <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800efc6:	4b4b      	ldr	r3, [pc, #300]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800efc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800efce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efd6:	4a47      	ldr	r2, [pc, #284]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800efd8:	430b      	orrs	r3, r1
 800efda:	6593      	str	r3, [r2, #88]	@ 0x58
 800efdc:	e003      	b.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800efe2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800efe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800eff2:	673b      	str	r3, [r7, #112]	@ 0x70
 800eff4:	2300      	movs	r3, #0
 800eff6:	677b      	str	r3, [r7, #116]	@ 0x74
 800eff8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800effc:	460b      	mov	r3, r1
 800effe:	4313      	orrs	r3, r2
 800f000:	d03b      	beq.n	800f07a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f00a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f00e:	d01f      	beq.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800f010:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f014:	d818      	bhi.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800f016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f01a:	d003      	beq.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800f01c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f020:	d007      	beq.n	800f032 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800f022:	e011      	b.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f024:	4b33      	ldr	r3, [pc, #204]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f028:	4a32      	ldr	r2, [pc, #200]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f02a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f02e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f030:	e00f      	b.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f036:	3328      	adds	r3, #40	@ 0x28
 800f038:	2101      	movs	r1, #1
 800f03a:	4618      	mov	r0, r3
 800f03c:	f001 fba2 	bl	8010784 <RCCEx_PLL3_Config>
 800f040:	4603      	mov	r3, r0
 800f042:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f046:	e004      	b.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f048:	2301      	movs	r3, #1
 800f04a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f04e:	e000      	b.n	800f052 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f050:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f052:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f056:	2b00      	cmp	r3, #0
 800f058:	d10b      	bne.n	800f072 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f05a:	4b26      	ldr	r3, [pc, #152]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f05e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f06a:	4a22      	ldr	r2, [pc, #136]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f06c:	430b      	orrs	r3, r1
 800f06e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f070:	e003      	b.n	800f07a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f076:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f086:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f088:	2300      	movs	r3, #0
 800f08a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f08c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f090:	460b      	mov	r3, r1
 800f092:	4313      	orrs	r3, r2
 800f094:	d034      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d003      	beq.n	800f0a8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0a4:	d007      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f0a6:	e011      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0a8:	4b12      	ldr	r3, [pc, #72]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ac:	4a11      	ldr	r2, [pc, #68]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f0b4:	e00e      	b.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	2102      	movs	r1, #2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f001 faae 	bl	8010620 <RCCEx_PLL2_Config>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f0ca:	e003      	b.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10d      	bne.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f0dc:	4b05      	ldr	r3, [pc, #20]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0ea:	4a02      	ldr	r2, [pc, #8]	@ (800f0f4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f0ec:	430b      	orrs	r3, r1
 800f0ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0f0:	e006      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800f0f2:	bf00      	nop
 800f0f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f10c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f10e:	2300      	movs	r3, #0
 800f110:	667b      	str	r3, [r7, #100]	@ 0x64
 800f112:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f116:	460b      	mov	r3, r1
 800f118:	4313      	orrs	r3, r2
 800f11a:	d00c      	beq.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f120:	3328      	adds	r3, #40	@ 0x28
 800f122:	2102      	movs	r1, #2
 800f124:	4618      	mov	r0, r3
 800f126:	f001 fb2d 	bl	8010784 <RCCEx_PLL3_Config>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d002      	beq.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800f130:	2301      	movs	r3, #1
 800f132:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f142:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f144:	2300      	movs	r3, #0
 800f146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f148:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f14c:	460b      	mov	r3, r1
 800f14e:	4313      	orrs	r3, r2
 800f150:	d036      	beq.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f15c:	d018      	beq.n	800f190 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800f15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f162:	d811      	bhi.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f168:	d014      	beq.n	800f194 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800f16a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f16e:	d80b      	bhi.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f170:	2b00      	cmp	r3, #0
 800f172:	d011      	beq.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800f174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f178:	d106      	bne.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f17a:	4bb7      	ldr	r3, [pc, #732]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f17e:	4ab6      	ldr	r2, [pc, #728]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f186:	e008      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f18e:	e004      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f190:	bf00      	nop
 800f192:	e002      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f194:	bf00      	nop
 800f196:	e000      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800f198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f19a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10a      	bne.n	800f1b8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f1a2:	4bad      	ldr	r3, [pc, #692]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1b0:	4aa9      	ldr	r2, [pc, #676]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1b2:	430b      	orrs	r3, r1
 800f1b4:	6553      	str	r3, [r2, #84]	@ 0x54
 800f1b6:	e003      	b.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800f1cc:	653b      	str	r3, [r7, #80]	@ 0x50
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800f1d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	d009      	beq.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f1dc:	4b9e      	ldr	r3, [pc, #632]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ea:	4a9b      	ldr	r2, [pc, #620]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f1ec:	430b      	orrs	r3, r1
 800f1ee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800f1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1fe:	2300      	movs	r3, #0
 800f200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f202:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800f206:	460b      	mov	r3, r1
 800f208:	4313      	orrs	r3, r2
 800f20a:	d009      	beq.n	800f220 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f20c:	4b92      	ldr	r3, [pc, #584]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f20e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f210:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800f214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f21a:	4a8f      	ldr	r2, [pc, #572]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f21c:	430b      	orrs	r3, r1
 800f21e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f228:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800f22c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f22e:	2300      	movs	r3, #0
 800f230:	647b      	str	r3, [r7, #68]	@ 0x44
 800f232:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800f236:	460b      	mov	r3, r1
 800f238:	4313      	orrs	r3, r2
 800f23a:	d00e      	beq.n	800f25a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f23c:	4b86      	ldr	r3, [pc, #536]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	4a85      	ldr	r2, [pc, #532]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f242:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f246:	6113      	str	r3, [r2, #16]
 800f248:	4b83      	ldr	r3, [pc, #524]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f24a:	6919      	ldr	r1, [r3, #16]
 800f24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f254:	4a80      	ldr	r2, [pc, #512]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f256:	430b      	orrs	r3, r1
 800f258:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800f266:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f268:	2300      	movs	r3, #0
 800f26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f26c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800f270:	460b      	mov	r3, r1
 800f272:	4313      	orrs	r3, r2
 800f274:	d009      	beq.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f276:	4b78      	ldr	r3, [pc, #480]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f27a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f284:	4a74      	ldr	r2, [pc, #464]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f286:	430b      	orrs	r3, r1
 800f288:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f292:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800f296:	633b      	str	r3, [r7, #48]	@ 0x30
 800f298:	2300      	movs	r3, #0
 800f29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f29c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	d00a      	beq.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f2a6:	4b6c      	ldr	r3, [pc, #432]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800f2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2b6:	4a68      	ldr	r2, [pc, #416]	@ (800f458 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f2b8:	430b      	orrs	r3, r1
 800f2ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800f2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	d011      	beq.n	800f2fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2dc:	3308      	adds	r3, #8
 800f2de:	2100      	movs	r1, #0
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f001 f99d 	bl	8010620 <RCCEx_PLL2_Config>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f2ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d003      	beq.n	800f2fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f2f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800f2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f304:	2100      	movs	r1, #0
 800f306:	6239      	str	r1, [r7, #32]
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f30e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f312:	460b      	mov	r3, r1
 800f314:	4313      	orrs	r3, r2
 800f316:	d011      	beq.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f31c:	3308      	adds	r3, #8
 800f31e:	2101      	movs	r1, #1
 800f320:	4618      	mov	r0, r3
 800f322:	f001 f97d 	bl	8010620 <RCCEx_PLL2_Config>
 800f326:	4603      	mov	r3, r0
 800f328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f32c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f330:	2b00      	cmp	r3, #0
 800f332:	d003      	beq.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800f33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	2100      	movs	r1, #0
 800f346:	61b9      	str	r1, [r7, #24]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	61fb      	str	r3, [r7, #28]
 800f34e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f352:	460b      	mov	r3, r1
 800f354:	4313      	orrs	r3, r2
 800f356:	d011      	beq.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f35c:	3308      	adds	r3, #8
 800f35e:	2102      	movs	r1, #2
 800f360:	4618      	mov	r0, r3
 800f362:	f001 f95d 	bl	8010620 <RCCEx_PLL2_Config>
 800f366:	4603      	mov	r3, r0
 800f368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f36c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f370:	2b00      	cmp	r3, #0
 800f372:	d003      	beq.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800f37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	2100      	movs	r1, #0
 800f386:	6139      	str	r1, [r7, #16]
 800f388:	f003 0308 	and.w	r3, r3, #8
 800f38c:	617b      	str	r3, [r7, #20]
 800f38e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f392:	460b      	mov	r3, r1
 800f394:	4313      	orrs	r3, r2
 800f396:	d011      	beq.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f39c:	3328      	adds	r3, #40	@ 0x28
 800f39e:	2100      	movs	r1, #0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f001 f9ef 	bl	8010784 <RCCEx_PLL3_Config>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800f3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d003      	beq.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800f3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	f003 0310 	and.w	r3, r3, #16
 800f3cc:	60fb      	str	r3, [r7, #12]
 800f3ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	d011      	beq.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3dc:	3328      	adds	r3, #40	@ 0x28
 800f3de:	2101      	movs	r1, #1
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f001 f9cf 	bl	8010784 <RCCEx_PLL3_Config>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f3ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d003      	beq.n	800f3fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800f3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	2100      	movs	r1, #0
 800f406:	6039      	str	r1, [r7, #0]
 800f408:	f003 0320 	and.w	r3, r3, #32
 800f40c:	607b      	str	r3, [r7, #4]
 800f40e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f412:	460b      	mov	r3, r1
 800f414:	4313      	orrs	r3, r2
 800f416:	d011      	beq.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f41c:	3328      	adds	r3, #40	@ 0x28
 800f41e:	2102      	movs	r1, #2
 800f420:	4618      	mov	r0, r3
 800f422:	f001 f9af 	bl	8010784 <RCCEx_PLL3_Config>
 800f426:	4603      	mov	r3, r0
 800f428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800f42c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f438:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800f43c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	e000      	b.n	800f44a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800f448:	2301      	movs	r3, #1
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f450:	46bd      	mov	sp, r7
 800f452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f456:	bf00      	nop
 800f458:	58024400 	.word	0x58024400

0800f45c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b090      	sub	sp, #64	@ 0x40
 800f460:	af00      	add	r7, sp, #0
 800f462:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f46a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800f46e:	430b      	orrs	r3, r1
 800f470:	f040 8094 	bne.w	800f59c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f474:	4b9b      	ldr	r3, [pc, #620]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f478:	f003 0307 	and.w	r3, r3, #7
 800f47c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f480:	2b04      	cmp	r3, #4
 800f482:	f200 8087 	bhi.w	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f486:	a201      	add	r2, pc, #4	@ (adr r2, 800f48c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48c:	0800f4a1 	.word	0x0800f4a1
 800f490:	0800f4c9 	.word	0x0800f4c9
 800f494:	0800f4f1 	.word	0x0800f4f1
 800f498:	0800f58d 	.word	0x0800f58d
 800f49c:	0800f519 	.word	0x0800f519
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4a0:	4b90      	ldr	r3, [pc, #576]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f4ac:	d108      	bne.n	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 ff62 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4bc:	f000 bc93 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4c4:	f000 bc8f 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4c8:	4b86      	ldr	r3, [pc, #536]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4d4:	d108      	bne.n	800f4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4d6:	f107 0318 	add.w	r3, r7, #24
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 fca6 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4e4:	f000 bc7f 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4ec:	f000 bc7b 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4f0:	4b7c      	ldr	r3, [pc, #496]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4fc:	d108      	bne.n	800f510 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4fe:	f107 030c 	add.w	r3, r7, #12
 800f502:	4618      	mov	r0, r3
 800f504:	f000 fde6 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f50c:	f000 bc6b 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f510:	2300      	movs	r3, #0
 800f512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f514:	f000 bc67 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f518:	4b72      	ldr	r3, [pc, #456]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f51c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f520:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f522:	4b70      	ldr	r3, [pc, #448]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f003 0304 	and.w	r3, r3, #4
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	d10c      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f530:	2b00      	cmp	r3, #0
 800f532:	d109      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f534:	4b6b      	ldr	r3, [pc, #428]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	08db      	lsrs	r3, r3, #3
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	4a6a      	ldr	r2, [pc, #424]	@ (800f6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f540:	fa22 f303 	lsr.w	r3, r2, r3
 800f544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f546:	e01f      	b.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f548:	4b66      	ldr	r3, [pc, #408]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f554:	d106      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f55c:	d102      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f55e:	4b63      	ldr	r3, [pc, #396]	@ (800f6ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f562:	e011      	b.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f564:	4b5f      	ldr	r3, [pc, #380]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f570:	d106      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f578:	d102      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f57a:	4b5d      	ldr	r3, [pc, #372]	@ (800f6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f57e:	e003      	b.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f580:	2300      	movs	r3, #0
 800f582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f584:	f000 bc2f 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f588:	f000 bc2d 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f58c:	4b59      	ldr	r3, [pc, #356]	@ (800f6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f590:	f000 bc29 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f598:	f000 bc25 	b.w	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f59c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f5a4:	430b      	orrs	r3, r1
 800f5a6:	f040 80a7 	bne.w	800f6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f5aa:	4b4e      	ldr	r3, [pc, #312]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f5b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f5ba:	d054      	beq.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f5c2:	f200 808b 	bhi.w	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f5cc:	f000 8083 	beq.w	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f5d6:	f200 8081 	bhi.w	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5e0:	d02f      	beq.n	800f642 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f5e8:	d878      	bhi.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d004      	beq.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f5f6:	d012      	beq.n	800f61e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800f5f8:	e070      	b.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5fa:	4b3a      	ldr	r3, [pc, #232]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f606:	d107      	bne.n	800f618 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 feb5 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f616:	e3e6      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f61c:	e3e3      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f61e:	4b31      	ldr	r3, [pc, #196]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f62a:	d107      	bne.n	800f63c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f62c:	f107 0318 	add.w	r3, r7, #24
 800f630:	4618      	mov	r0, r3
 800f632:	f000 fbfb 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f63a:	e3d4      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f640:	e3d1      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f642:	4b28      	ldr	r3, [pc, #160]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f64a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f64e:	d107      	bne.n	800f660 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f650:	f107 030c 	add.w	r3, r7, #12
 800f654:	4618      	mov	r0, r3
 800f656:	f000 fd3d 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f65e:	e3c2      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f664:	e3bf      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f666:	4b1f      	ldr	r3, [pc, #124]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f66a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f66e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f670:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 0304 	and.w	r3, r3, #4
 800f678:	2b04      	cmp	r3, #4
 800f67a:	d10c      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800f67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d109      	bne.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f682:	4b18      	ldr	r3, [pc, #96]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	08db      	lsrs	r3, r3, #3
 800f688:	f003 0303 	and.w	r3, r3, #3
 800f68c:	4a16      	ldr	r2, [pc, #88]	@ (800f6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800f68e:	fa22 f303 	lsr.w	r3, r2, r3
 800f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f694:	e01e      	b.n	800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f696:	4b13      	ldr	r3, [pc, #76]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f69e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6a2:	d106      	bne.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800f6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f6aa:	d102      	bne.n	800f6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f6ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f6ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6b0:	e010      	b.n	800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6be:	d106      	bne.n	800f6ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800f6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6c6:	d102      	bne.n	800f6ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f6c8:	4b09      	ldr	r3, [pc, #36]	@ (800f6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6cc:	e002      	b.n	800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f6d2:	e388      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6d4:	e387      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f6d6:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6da:	e384      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e0:	e381      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f6e2:	bf00      	nop
 800f6e4:	58024400 	.word	0x58024400
 800f6e8:	03d09000 	.word	0x03d09000
 800f6ec:	003d0900 	.word	0x003d0900
 800f6f0:	016e3600 	.word	0x016e3600
 800f6f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f6f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6fc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f700:	430b      	orrs	r3, r1
 800f702:	f040 809c 	bne.w	800f83e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f706:	4b9e      	ldr	r3, [pc, #632]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f70a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f70e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f716:	d054      	beq.n	800f7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800f718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f71a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f71e:	f200 808b 	bhi.w	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f724:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f728:	f000 8083 	beq.w	800f832 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800f72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f732:	f200 8081 	bhi.w	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f73c:	d02f      	beq.n	800f79e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f744:	d878      	bhi.n	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800f746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d004      	beq.n	800f756 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f752:	d012      	beq.n	800f77a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f754:	e070      	b.n	800f838 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f756:	4b8a      	ldr	r3, [pc, #552]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f75e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f762:	d107      	bne.n	800f774 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 fe07 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f772:	e338      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f778:	e335      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f77a:	4b81      	ldr	r3, [pc, #516]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f786:	d107      	bne.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f788:	f107 0318 	add.w	r3, r7, #24
 800f78c:	4618      	mov	r0, r3
 800f78e:	f000 fb4d 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f796:	e326      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f798:	2300      	movs	r3, #0
 800f79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f79c:	e323      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f79e:	4b78      	ldr	r3, [pc, #480]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f7aa:	d107      	bne.n	800f7bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7ac:	f107 030c 	add.w	r3, r7, #12
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 fc8f 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7ba:	e314      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7c0:	e311      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f7c2:	4b6f      	ldr	r3, [pc, #444]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f7ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f7cc:	4b6c      	ldr	r3, [pc, #432]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f003 0304 	and.w	r3, r3, #4
 800f7d4:	2b04      	cmp	r3, #4
 800f7d6:	d10c      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d109      	bne.n	800f7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7de:	4b68      	ldr	r3, [pc, #416]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	08db      	lsrs	r3, r3, #3
 800f7e4:	f003 0303 	and.w	r3, r3, #3
 800f7e8:	4a66      	ldr	r2, [pc, #408]	@ (800f984 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7f0:	e01e      	b.n	800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f7f2:	4b63      	ldr	r3, [pc, #396]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7fe:	d106      	bne.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f806:	d102      	bne.n	800f80e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f808:	4b5f      	ldr	r3, [pc, #380]	@ (800f988 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f80c:	e010      	b.n	800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f80e:	4b5c      	ldr	r3, [pc, #368]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f816:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f81a:	d106      	bne.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f822:	d102      	bne.n	800f82a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f824:	4b59      	ldr	r3, [pc, #356]	@ (800f98c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f828:	e002      	b.n	800f830 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f82a:	2300      	movs	r3, #0
 800f82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f82e:	e2da      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f830:	e2d9      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f832:	4b57      	ldr	r3, [pc, #348]	@ (800f990 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f836:	e2d6      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f838:	2300      	movs	r3, #0
 800f83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f83c:	e2d3      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f842:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f846:	430b      	orrs	r3, r1
 800f848:	f040 80a7 	bne.w	800f99a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f84c:	4b4c      	ldr	r3, [pc, #304]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f84e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f850:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f854:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f858:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f85c:	d055      	beq.n	800f90a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f864:	f200 8096 	bhi.w	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f86e:	f000 8084 	beq.w	800f97a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f874:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f878:	f200 808c 	bhi.w	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f882:	d030      	beq.n	800f8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f88a:	f200 8083 	bhi.w	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f890:	2b00      	cmp	r3, #0
 800f892:	d004      	beq.n	800f89e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f89a:	d012      	beq.n	800f8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f89c:	e07a      	b.n	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f89e:	4b38      	ldr	r3, [pc, #224]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f8a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8aa:	d107      	bne.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f8ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 fd63 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8ba:	e294      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8c0:	e291      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8c2:	4b2f      	ldr	r3, [pc, #188]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8ce:	d107      	bne.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8d0:	f107 0318 	add.w	r3, r7, #24
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 faa9 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8de:	e282      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8e4:	e27f      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8e6:	4b26      	ldr	r3, [pc, #152]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8f2:	d107      	bne.n	800f904 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8f4:	f107 030c 	add.w	r3, r7, #12
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f000 fbeb 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f902:	e270      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f904:	2300      	movs	r3, #0
 800f906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f908:	e26d      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f90a:	4b1d      	ldr	r3, [pc, #116]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f90c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f90e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f912:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f914:	4b1a      	ldr	r3, [pc, #104]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f003 0304 	and.w	r3, r3, #4
 800f91c:	2b04      	cmp	r3, #4
 800f91e:	d10c      	bne.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f922:	2b00      	cmp	r3, #0
 800f924:	d109      	bne.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f926:	4b16      	ldr	r3, [pc, #88]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	08db      	lsrs	r3, r3, #3
 800f92c:	f003 0303 	and.w	r3, r3, #3
 800f930:	4a14      	ldr	r2, [pc, #80]	@ (800f984 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f932:	fa22 f303 	lsr.w	r3, r2, r3
 800f936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f938:	e01e      	b.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f93a:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f946:	d106      	bne.n	800f956 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f94a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f94e:	d102      	bne.n	800f956 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f950:	4b0d      	ldr	r3, [pc, #52]	@ (800f988 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f954:	e010      	b.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f956:	4b0a      	ldr	r3, [pc, #40]	@ (800f980 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f95e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f962:	d106      	bne.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f96a:	d102      	bne.n	800f972 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f96c:	4b07      	ldr	r3, [pc, #28]	@ (800f98c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f970:	e002      	b.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f976:	e236      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f978:	e235      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f97a:	4b05      	ldr	r3, [pc, #20]	@ (800f990 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f97e:	e232      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f980:	58024400 	.word	0x58024400
 800f984:	03d09000 	.word	0x03d09000
 800f988:	003d0900 	.word	0x003d0900
 800f98c:	016e3600 	.word	0x016e3600
 800f990:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f994:	2300      	movs	r3, #0
 800f996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f998:	e225      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f99e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f9a2:	430b      	orrs	r3, r1
 800f9a4:	f040 8085 	bne.w	800fab2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f9a8:	4b9c      	ldr	r3, [pc, #624]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9ac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f9b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f9b8:	d06b      	beq.n	800fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f9c0:	d874      	bhi.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f9c8:	d056      	beq.n	800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f9d0:	d86c      	bhi.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9d8:	d03b      	beq.n	800fa52 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f9e0:	d864      	bhi.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9e8:	d021      	beq.n	800fa2e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f9f0:	d85c      	bhi.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d004      	beq.n	800fa02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9fe:	d004      	beq.n	800fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800fa00:	e054      	b.n	800faac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800fa02:	f7fe fb5f 	bl	800e0c4 <HAL_RCC_GetPCLK1Freq>
 800fa06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fa08:	e1ed      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa0a:	4b84      	ldr	r3, [pc, #528]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fa12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fa16:	d107      	bne.n	800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa18:	f107 0318 	add.w	r3, r7, #24
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f000 fa05 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa26:	e1de      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa2c:	e1db      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa2e:	4b7b      	ldr	r3, [pc, #492]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fa36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa3a:	d107      	bne.n	800fa4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa3c:	f107 030c 	add.w	r3, r7, #12
 800fa40:	4618      	mov	r0, r3
 800fa42:	f000 fb47 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa4a:	e1cc      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa50:	e1c9      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fa52:	4b72      	ldr	r3, [pc, #456]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f003 0304 	and.w	r3, r3, #4
 800fa5a:	2b04      	cmp	r3, #4
 800fa5c:	d109      	bne.n	800fa72 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa5e:	4b6f      	ldr	r3, [pc, #444]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	08db      	lsrs	r3, r3, #3
 800fa64:	f003 0303 	and.w	r3, r3, #3
 800fa68:	4a6d      	ldr	r2, [pc, #436]	@ (800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fa6a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa70:	e1b9      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa72:	2300      	movs	r3, #0
 800fa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa76:	e1b6      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fa78:	4b68      	ldr	r3, [pc, #416]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa84:	d102      	bne.n	800fa8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800fa86:	4b67      	ldr	r3, [pc, #412]	@ (800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa8a:	e1ac      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa90:	e1a9      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa92:	4b62      	ldr	r3, [pc, #392]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fa9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fa9e:	d102      	bne.n	800faa6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800faa0:	4b61      	ldr	r3, [pc, #388]	@ (800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800faa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faa4:	e19f      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800faaa:	e19c      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800faac:	2300      	movs	r3, #0
 800faae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fab0:	e199      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fab6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800faba:	430b      	orrs	r3, r1
 800fabc:	d173      	bne.n	800fba6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fabe:	4b57      	ldr	r3, [pc, #348]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800fac6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800face:	d02f      	beq.n	800fb30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800fad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fad6:	d863      	bhi.n	800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d004      	beq.n	800fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800fade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fae4:	d012      	beq.n	800fb0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800fae6:	e05b      	b.n	800fba0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fae8:	4b4c      	ldr	r3, [pc, #304]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800faf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800faf4:	d107      	bne.n	800fb06 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faf6:	f107 0318 	add.w	r3, r7, #24
 800fafa:	4618      	mov	r0, r3
 800fafc:	f000 f996 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb04:	e16f      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb06:	2300      	movs	r3, #0
 800fb08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb0a:	e16c      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fb0c:	4b43      	ldr	r3, [pc, #268]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fb14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb18:	d107      	bne.n	800fb2a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb1a:	f107 030c 	add.w	r3, r7, #12
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 fad8 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb28:	e15d      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb2e:	e15a      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fb30:	4b3a      	ldr	r3, [pc, #232]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fb38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fb3a:	4b38      	ldr	r3, [pc, #224]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 0304 	and.w	r3, r3, #4
 800fb42:	2b04      	cmp	r3, #4
 800fb44:	d10c      	bne.n	800fb60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800fb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d109      	bne.n	800fb60 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb4c:	4b33      	ldr	r3, [pc, #204]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	08db      	lsrs	r3, r3, #3
 800fb52:	f003 0303 	and.w	r3, r3, #3
 800fb56:	4a32      	ldr	r2, [pc, #200]	@ (800fc20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800fb58:	fa22 f303 	lsr.w	r3, r2, r3
 800fb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb5e:	e01e      	b.n	800fb9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fb60:	4b2e      	ldr	r3, [pc, #184]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb6c:	d106      	bne.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb74:	d102      	bne.n	800fb7c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fb76:	4b2b      	ldr	r3, [pc, #172]	@ (800fc24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800fb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb7a:	e010      	b.n	800fb9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fb7c:	4b27      	ldr	r3, [pc, #156]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb88:	d106      	bne.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb90:	d102      	bne.n	800fb98 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb92:	4b25      	ldr	r3, [pc, #148]	@ (800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800fb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb96:	e002      	b.n	800fb9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fb9c:	e123      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fb9e:	e122      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fba0:	2300      	movs	r3, #0
 800fba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fba4:	e11f      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbaa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800fbae:	430b      	orrs	r3, r1
 800fbb0:	d13c      	bne.n	800fc2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fbb2:	4b1a      	ldr	r3, [pc, #104]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fbb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d004      	beq.n	800fbcc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbc8:	d012      	beq.n	800fbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800fbca:	e023      	b.n	800fc14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fbcc:	4b13      	ldr	r3, [pc, #76]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fbd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbd8:	d107      	bne.n	800fbea <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fbda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 fbcc 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fbe8:	e0fd      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fbea:	2300      	movs	r3, #0
 800fbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbee:	e0fa      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800fc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fbf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fbfc:	d107      	bne.n	800fc0e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbfe:	f107 0318 	add.w	r3, r7, #24
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 f912 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc0c:	e0eb      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc12:	e0e8      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc18:	e0e5      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fc1a:	bf00      	nop
 800fc1c:	58024400 	.word	0x58024400
 800fc20:	03d09000 	.word	0x03d09000
 800fc24:	003d0900 	.word	0x003d0900
 800fc28:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc30:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800fc34:	430b      	orrs	r3, r1
 800fc36:	f040 8085 	bne.w	800fd44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fc3a:	4b6d      	ldr	r3, [pc, #436]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800fc42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc4a:	d06b      	beq.n	800fd24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fc52:	d874      	bhi.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc5a:	d056      	beq.n	800fd0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc62:	d86c      	bhi.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc6a:	d03b      	beq.n	800fce4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800fc72:	d864      	bhi.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc7a:	d021      	beq.n	800fcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fc82:	d85c      	bhi.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800fc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d004      	beq.n	800fc94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc90:	d004      	beq.n	800fc9c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800fc92:	e054      	b.n	800fd3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fc94:	f000 f8b4 	bl	800fe00 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc98:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc9a:	e0a4      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc9c:	4b54      	ldr	r3, [pc, #336]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fca8:	d107      	bne.n	800fcba <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcaa:	f107 0318 	add.w	r3, r7, #24
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 f8bc 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcb8:	e095      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fcbe:	e092      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fcc0:	4b4b      	ldr	r3, [pc, #300]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fcc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fccc:	d107      	bne.n	800fcde <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcce:	f107 030c 	add.w	r3, r7, #12
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f000 f9fe 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fcdc:	e083      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fcde:	2300      	movs	r3, #0
 800fce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fce2:	e080      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fce4:	4b42      	ldr	r3, [pc, #264]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b04      	cmp	r3, #4
 800fcee:	d109      	bne.n	800fd04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fcf0:	4b3f      	ldr	r3, [pc, #252]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	08db      	lsrs	r3, r3, #3
 800fcf6:	f003 0303 	and.w	r3, r3, #3
 800fcfa:	4a3e      	ldr	r2, [pc, #248]	@ (800fdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800fcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800fd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd02:	e070      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd04:	2300      	movs	r3, #0
 800fd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd08:	e06d      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fd0a:	4b39      	ldr	r3, [pc, #228]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd16:	d102      	bne.n	800fd1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800fd18:	4b37      	ldr	r3, [pc, #220]	@ (800fdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800fd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd1c:	e063      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd22:	e060      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd24:	4b32      	ldr	r3, [pc, #200]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd30:	d102      	bne.n	800fd38 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800fd32:	4b32      	ldr	r3, [pc, #200]	@ (800fdfc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd36:	e056      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd3c:	e053      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd42:	e050      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fd44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd48:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800fd4c:	430b      	orrs	r3, r1
 800fd4e:	d148      	bne.n	800fde2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fd50:	4b27      	ldr	r3, [pc, #156]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fd58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800fd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd60:	d02a      	beq.n	800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd68:	d838      	bhi.n	800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800fd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d004      	beq.n	800fd7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800fd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd76:	d00d      	beq.n	800fd94 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800fd78:	e030      	b.n	800fddc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fd7a:	4b1d      	ldr	r3, [pc, #116]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd86:	d102      	bne.n	800fd8e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800fd88:	4b1c      	ldr	r3, [pc, #112]	@ (800fdfc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8c:	e02b      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd92:	e028      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd94:	4b16      	ldr	r3, [pc, #88]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fda0:	d107      	bne.n	800fdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fda2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 fae8 	bl	801037c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb0:	e019      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdb6:	e016      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fdb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fdc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fdc4:	d107      	bne.n	800fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdc6:	f107 0318 	add.w	r3, r7, #24
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f000 f82e 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdd4:	e007      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdda:	e004      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde0:	e001      	b.n	800fde6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800fde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3740      	adds	r7, #64	@ 0x40
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	58024400 	.word	0x58024400
 800fdf4:	03d09000 	.word	0x03d09000
 800fdf8:	003d0900 	.word	0x003d0900
 800fdfc:	016e3600 	.word	0x016e3600

0800fe00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fe04:	f7fe f92e 	bl	800e064 <HAL_RCC_GetHCLKFreq>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	4b06      	ldr	r3, [pc, #24]	@ (800fe24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fe0c:	6a1b      	ldr	r3, [r3, #32]
 800fe0e:	091b      	lsrs	r3, r3, #4
 800fe10:	f003 0307 	and.w	r3, r3, #7
 800fe14:	4904      	ldr	r1, [pc, #16]	@ (800fe28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fe16:	5ccb      	ldrb	r3, [r1, r3]
 800fe18:	f003 031f 	and.w	r3, r3, #31
 800fe1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	58024400 	.word	0x58024400
 800fe28:	0801da44 	.word	0x0801da44

0800fe2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b089      	sub	sp, #36	@ 0x24
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fe34:	4ba1      	ldr	r3, [pc, #644]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe38:	f003 0303 	and.w	r3, r3, #3
 800fe3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fe3e:	4b9f      	ldr	r3, [pc, #636]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe42:	0b1b      	lsrs	r3, r3, #12
 800fe44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe4a:	4b9c      	ldr	r3, [pc, #624]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe4e:	091b      	lsrs	r3, r3, #4
 800fe50:	f003 0301 	and.w	r3, r3, #1
 800fe54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fe56:	4b99      	ldr	r3, [pc, #612]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe5a:	08db      	lsrs	r3, r3, #3
 800fe5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	fb02 f303 	mul.w	r3, r2, r3
 800fe66:	ee07 3a90 	vmov	s15, r3
 800fe6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 8111 	beq.w	801009c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	f000 8083 	beq.w	800ff88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	f200 80a1 	bhi.w	800ffcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d003      	beq.n	800fe98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe90:	69bb      	ldr	r3, [r7, #24]
 800fe92:	2b01      	cmp	r3, #1
 800fe94:	d056      	beq.n	800ff44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe96:	e099      	b.n	800ffcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe98:	4b88      	ldr	r3, [pc, #544]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f003 0320 	and.w	r3, r3, #32
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d02d      	beq.n	800ff00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fea4:	4b85      	ldr	r3, [pc, #532]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	08db      	lsrs	r3, r3, #3
 800feaa:	f003 0303 	and.w	r3, r3, #3
 800feae:	4a84      	ldr	r2, [pc, #528]	@ (80100c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800feb0:	fa22 f303 	lsr.w	r3, r2, r3
 800feb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	ee07 3a90 	vmov	s15, r3
 800febc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	ee07 3a90 	vmov	s15, r3
 800fec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fece:	4b7b      	ldr	r3, [pc, #492]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fed6:	ee07 3a90 	vmov	s15, r3
 800feda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fede:	ed97 6a03 	vldr	s12, [r7, #12]
 800fee2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80100c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fefa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fefe:	e087      	b.n	8010010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	ee07 3a90 	vmov	s15, r3
 800ff06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80100c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ff0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff12:	4b6a      	ldr	r3, [pc, #424]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff1a:	ee07 3a90 	vmov	s15, r3
 800ff1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80100c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff42:	e065      	b.n	8010010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	ee07 3a90 	vmov	s15, r3
 800ff4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80100cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff56:	4b59      	ldr	r3, [pc, #356]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff5e:	ee07 3a90 	vmov	s15, r3
 800ff62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80100c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff86:	e043      	b.n	8010010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	ee07 3a90 	vmov	s15, r3
 800ff8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80100d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff9a:	4b48      	ldr	r3, [pc, #288]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffa2:	ee07 3a90 	vmov	s15, r3
 800ffa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80100c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ffbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ffca:	e021      	b.n	8010010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	ee07 3a90 	vmov	s15, r3
 800ffd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80100cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ffda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffde:	4b37      	ldr	r3, [pc, #220]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffe6:	ee07 3a90 	vmov	s15, r3
 800ffea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffee:	ed97 6a03 	vldr	s12, [r7, #12]
 800fff2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80100c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010006:	ee67 7a27 	vmul.f32	s15, s14, s15
 801000a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801000e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010010:	4b2a      	ldr	r3, [pc, #168]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010014:	0a5b      	lsrs	r3, r3, #9
 8010016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801001a:	ee07 3a90 	vmov	s15, r3
 801001e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010026:	ee37 7a87 	vadd.f32	s14, s15, s14
 801002a:	edd7 6a07 	vldr	s13, [r7, #28]
 801002e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010036:	ee17 2a90 	vmov	r2, s15
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801003e:	4b1f      	ldr	r3, [pc, #124]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010042:	0c1b      	lsrs	r3, r3, #16
 8010044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010048:	ee07 3a90 	vmov	s15, r3
 801004c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010058:	edd7 6a07 	vldr	s13, [r7, #28]
 801005c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010064:	ee17 2a90 	vmov	r2, s15
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801006c:	4b13      	ldr	r3, [pc, #76]	@ (80100bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801006e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010070:	0e1b      	lsrs	r3, r3, #24
 8010072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010076:	ee07 3a90 	vmov	s15, r3
 801007a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801007e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010086:	edd7 6a07 	vldr	s13, [r7, #28]
 801008a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801008e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010092:	ee17 2a90 	vmov	r2, s15
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801009a:	e008      	b.n	80100ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	609a      	str	r2, [r3, #8]
}
 80100ae:	bf00      	nop
 80100b0:	3724      	adds	r7, #36	@ 0x24
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	58024400 	.word	0x58024400
 80100c0:	03d09000 	.word	0x03d09000
 80100c4:	46000000 	.word	0x46000000
 80100c8:	4c742400 	.word	0x4c742400
 80100cc:	4a742400 	.word	0x4a742400
 80100d0:	4bb71b00 	.word	0x4bb71b00

080100d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b089      	sub	sp, #36	@ 0x24
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100dc:	4ba1      	ldr	r3, [pc, #644]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100e0:	f003 0303 	and.w	r3, r3, #3
 80100e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80100e6:	4b9f      	ldr	r3, [pc, #636]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ea:	0d1b      	lsrs	r3, r3, #20
 80100ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80100f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80100f2:	4b9c      	ldr	r3, [pc, #624]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f6:	0a1b      	lsrs	r3, r3, #8
 80100f8:	f003 0301 	and.w	r3, r3, #1
 80100fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80100fe:	4b99      	ldr	r3, [pc, #612]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010102:	08db      	lsrs	r3, r3, #3
 8010104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	fb02 f303 	mul.w	r3, r2, r3
 801010e:	ee07 3a90 	vmov	s15, r3
 8010112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010116:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 8111 	beq.w	8010344 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010122:	69bb      	ldr	r3, [r7, #24]
 8010124:	2b02      	cmp	r3, #2
 8010126:	f000 8083 	beq.w	8010230 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	2b02      	cmp	r3, #2
 801012e:	f200 80a1 	bhi.w	8010274 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010132:	69bb      	ldr	r3, [r7, #24]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d003      	beq.n	8010140 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d056      	beq.n	80101ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801013e:	e099      	b.n	8010274 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010140:	4b88      	ldr	r3, [pc, #544]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f003 0320 	and.w	r3, r3, #32
 8010148:	2b00      	cmp	r3, #0
 801014a:	d02d      	beq.n	80101a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801014c:	4b85      	ldr	r3, [pc, #532]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	08db      	lsrs	r3, r3, #3
 8010152:	f003 0303 	and.w	r3, r3, #3
 8010156:	4a84      	ldr	r2, [pc, #528]	@ (8010368 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010158:	fa22 f303 	lsr.w	r3, r2, r3
 801015c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	ee07 3a90 	vmov	s15, r3
 8010164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	ee07 3a90 	vmov	s15, r3
 801016e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010176:	4b7b      	ldr	r3, [pc, #492]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801017a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801017e:	ee07 3a90 	vmov	s15, r3
 8010182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010186:	ed97 6a03 	vldr	s12, [r7, #12]
 801018a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801036c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801018e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801019a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801019e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80101a6:	e087      	b.n	80102b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	ee07 3a90 	vmov	s15, r3
 80101ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010370 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80101b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101ba:	4b6a      	ldr	r3, [pc, #424]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c2:	ee07 3a90 	vmov	s15, r3
 80101c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80101ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801036c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80101de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101ea:	e065      	b.n	80102b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	ee07 3a90 	vmov	s15, r3
 80101f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101fe:	4b59      	ldr	r3, [pc, #356]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010206:	ee07 3a90 	vmov	s15, r3
 801020a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801020e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010212:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801036c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801021a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801021e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010226:	ee67 7a27 	vmul.f32	s15, s14, s15
 801022a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801022e:	e043      	b.n	80102b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	ee07 3a90 	vmov	s15, r3
 8010236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801023a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801023e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010242:	4b48      	ldr	r3, [pc, #288]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801024a:	ee07 3a90 	vmov	s15, r3
 801024e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010252:	ed97 6a03 	vldr	s12, [r7, #12]
 8010256:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801036c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801025a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801025e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801026a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801026e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010272:	e021      	b.n	80102b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	ee07 3a90 	vmov	s15, r3
 801027a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801027e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010286:	4b37      	ldr	r3, [pc, #220]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801028a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801028e:	ee07 3a90 	vmov	s15, r3
 8010292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010296:	ed97 6a03 	vldr	s12, [r7, #12]
 801029a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801036c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801029e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80102a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80102a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80102aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80102b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80102b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102bc:	0a5b      	lsrs	r3, r3, #9
 80102be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102c2:	ee07 3a90 	vmov	s15, r3
 80102c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80102d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102de:	ee17 2a90 	vmov	r2, s15
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80102e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ea:	0c1b      	lsrs	r3, r3, #16
 80102ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102f0:	ee07 3a90 	vmov	s15, r3
 80102f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80102fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010300:	edd7 6a07 	vldr	s13, [r7, #28]
 8010304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801030c:	ee17 2a90 	vmov	r2, s15
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010314:	4b13      	ldr	r3, [pc, #76]	@ (8010364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010318:	0e1b      	lsrs	r3, r3, #24
 801031a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801031e:	ee07 3a90 	vmov	s15, r3
 8010322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801032a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801032e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801033a:	ee17 2a90 	vmov	r2, s15
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010342:	e008      	b.n	8010356 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2200      	movs	r2, #0
 8010348:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2200      	movs	r2, #0
 801034e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2200      	movs	r2, #0
 8010354:	609a      	str	r2, [r3, #8]
}
 8010356:	bf00      	nop
 8010358:	3724      	adds	r7, #36	@ 0x24
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	58024400 	.word	0x58024400
 8010368:	03d09000 	.word	0x03d09000
 801036c:	46000000 	.word	0x46000000
 8010370:	4c742400 	.word	0x4c742400
 8010374:	4a742400 	.word	0x4a742400
 8010378:	4bb71b00 	.word	0x4bb71b00

0801037c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801037c:	b480      	push	{r7}
 801037e:	b089      	sub	sp, #36	@ 0x24
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010384:	4ba0      	ldr	r3, [pc, #640]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010388:	f003 0303 	and.w	r3, r3, #3
 801038c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801038e:	4b9e      	ldr	r3, [pc, #632]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010392:	091b      	lsrs	r3, r3, #4
 8010394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010398:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801039a:	4b9b      	ldr	r3, [pc, #620]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801039c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801039e:	f003 0301 	and.w	r3, r3, #1
 80103a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80103a4:	4b98      	ldr	r3, [pc, #608]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103a8:	08db      	lsrs	r3, r3, #3
 80103aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103ae:	693a      	ldr	r2, [r7, #16]
 80103b0:	fb02 f303 	mul.w	r3, r2, r3
 80103b4:	ee07 3a90 	vmov	s15, r3
 80103b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 8111 	beq.w	80105ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80103c8:	69bb      	ldr	r3, [r7, #24]
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	f000 8083 	beq.w	80104d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	f200 80a1 	bhi.w	801051a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d003      	beq.n	80103e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d056      	beq.n	8010492 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80103e4:	e099      	b.n	801051a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103e6:	4b88      	ldr	r3, [pc, #544]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f003 0320 	and.w	r3, r3, #32
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d02d      	beq.n	801044e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103f2:	4b85      	ldr	r3, [pc, #532]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	08db      	lsrs	r3, r3, #3
 80103f8:	f003 0303 	and.w	r3, r3, #3
 80103fc:	4a83      	ldr	r2, [pc, #524]	@ (801060c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80103fe:	fa22 f303 	lsr.w	r3, r2, r3
 8010402:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	ee07 3a90 	vmov	s15, r3
 801040a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	ee07 3a90 	vmov	s15, r3
 8010414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801041c:	4b7a      	ldr	r3, [pc, #488]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801041e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010424:	ee07 3a90 	vmov	s15, r3
 8010428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801042c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010430:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801043c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010448:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801044c:	e087      	b.n	801055e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	ee07 3a90 	vmov	s15, r3
 8010454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010458:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010614 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801045c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010460:	4b69      	ldr	r3, [pc, #420]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010468:	ee07 3a90 	vmov	s15, r3
 801046c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010470:	ed97 6a03 	vldr	s12, [r7, #12]
 8010474:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801047c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010480:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010488:	ee67 7a27 	vmul.f32	s15, s14, s15
 801048c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010490:	e065      	b.n	801055e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	ee07 3a90 	vmov	s15, r3
 8010498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801049c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010618 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80104a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104a4:	4b58      	ldr	r3, [pc, #352]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ac:	ee07 3a90 	vmov	s15, r3
 80104b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80104b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80104c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104d4:	e043      	b.n	801055e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	ee07 3a90 	vmov	s15, r3
 80104dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801061c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80104e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80104e8:	4b47      	ldr	r3, [pc, #284]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f0:	ee07 3a90 	vmov	s15, r3
 80104f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80104fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801050c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010518:	e021      	b.n	801055e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	ee07 3a90 	vmov	s15, r3
 8010520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010524:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010614 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801052c:	4b36      	ldr	r3, [pc, #216]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801052e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010534:	ee07 3a90 	vmov	s15, r3
 8010538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801053c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010540:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801054c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801055c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801055e:	4b2a      	ldr	r3, [pc, #168]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010562:	0a5b      	lsrs	r3, r3, #9
 8010564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010568:	ee07 3a90 	vmov	s15, r3
 801056c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010578:	edd7 6a07 	vldr	s13, [r7, #28]
 801057c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010584:	ee17 2a90 	vmov	r2, s15
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801058c:	4b1e      	ldr	r3, [pc, #120]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801058e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010590:	0c1b      	lsrs	r3, r3, #16
 8010592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010596:	ee07 3a90 	vmov	s15, r3
 801059a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801059e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80105aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105b2:	ee17 2a90 	vmov	r2, s15
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80105ba:	4b13      	ldr	r3, [pc, #76]	@ (8010608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80105bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105be:	0e1b      	lsrs	r3, r3, #24
 80105c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80105c4:	ee07 3a90 	vmov	s15, r3
 80105c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80105cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80105d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80105d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80105d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80105e0:	ee17 2a90 	vmov	r2, s15
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80105e8:	e008      	b.n	80105fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	609a      	str	r2, [r3, #8]
}
 80105fc:	bf00      	nop
 80105fe:	3724      	adds	r7, #36	@ 0x24
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	58024400 	.word	0x58024400
 801060c:	03d09000 	.word	0x03d09000
 8010610:	46000000 	.word	0x46000000
 8010614:	4c742400 	.word	0x4c742400
 8010618:	4a742400 	.word	0x4a742400
 801061c:	4bb71b00 	.word	0x4bb71b00

08010620 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801062e:	4b53      	ldr	r3, [pc, #332]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010632:	f003 0303 	and.w	r3, r3, #3
 8010636:	2b03      	cmp	r3, #3
 8010638:	d101      	bne.n	801063e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801063a:	2301      	movs	r3, #1
 801063c:	e099      	b.n	8010772 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801063e:	4b4f      	ldr	r3, [pc, #316]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a4e      	ldr	r2, [pc, #312]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010644:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801064a:	f7f6 ff39 	bl	80074c0 <HAL_GetTick>
 801064e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010650:	e008      	b.n	8010664 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010652:	f7f6 ff35 	bl	80074c0 <HAL_GetTick>
 8010656:	4602      	mov	r2, r0
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	2b02      	cmp	r3, #2
 801065e:	d901      	bls.n	8010664 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010660:	2303      	movs	r3, #3
 8010662:	e086      	b.n	8010772 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010664:	4b45      	ldr	r3, [pc, #276]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d1f0      	bne.n	8010652 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010670:	4b42      	ldr	r3, [pc, #264]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010674:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	031b      	lsls	r3, r3, #12
 801067e:	493f      	ldr	r1, [pc, #252]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010680:	4313      	orrs	r3, r2
 8010682:	628b      	str	r3, [r1, #40]	@ 0x28
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	3b01      	subs	r3, #1
 801068a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	3b01      	subs	r3, #1
 8010694:	025b      	lsls	r3, r3, #9
 8010696:	b29b      	uxth	r3, r3
 8010698:	431a      	orrs	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	3b01      	subs	r3, #1
 80106a0:	041b      	lsls	r3, r3, #16
 80106a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80106a6:	431a      	orrs	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	691b      	ldr	r3, [r3, #16]
 80106ac:	3b01      	subs	r3, #1
 80106ae:	061b      	lsls	r3, r3, #24
 80106b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80106b4:	4931      	ldr	r1, [pc, #196]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106b6:	4313      	orrs	r3, r2
 80106b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80106ba:	4b30      	ldr	r3, [pc, #192]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	695b      	ldr	r3, [r3, #20]
 80106c6:	492d      	ldr	r1, [pc, #180]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106c8:	4313      	orrs	r3, r2
 80106ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80106cc:	4b2b      	ldr	r3, [pc, #172]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d0:	f023 0220 	bic.w	r2, r3, #32
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	4928      	ldr	r1, [pc, #160]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106da:	4313      	orrs	r3, r2
 80106dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80106de:	4b27      	ldr	r3, [pc, #156]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106e2:	4a26      	ldr	r2, [pc, #152]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106e4:	f023 0310 	bic.w	r3, r3, #16
 80106e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80106ea:	4b24      	ldr	r3, [pc, #144]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106ee:	4b24      	ldr	r3, [pc, #144]	@ (8010780 <RCCEx_PLL2_Config+0x160>)
 80106f0:	4013      	ands	r3, r2
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	69d2      	ldr	r2, [r2, #28]
 80106f6:	00d2      	lsls	r2, r2, #3
 80106f8:	4920      	ldr	r1, [pc, #128]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 80106fa:	4313      	orrs	r3, r2
 80106fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80106fe:	4b1f      	ldr	r3, [pc, #124]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010702:	4a1e      	ldr	r2, [pc, #120]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010704:	f043 0310 	orr.w	r3, r3, #16
 8010708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d106      	bne.n	801071e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010710:	4b1a      	ldr	r3, [pc, #104]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010714:	4a19      	ldr	r2, [pc, #100]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801071a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801071c:	e00f      	b.n	801073e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d106      	bne.n	8010732 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010724:	4b15      	ldr	r3, [pc, #84]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010728:	4a14      	ldr	r2, [pc, #80]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 801072a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801072e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010730:	e005      	b.n	801073e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010732:	4b12      	ldr	r3, [pc, #72]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010736:	4a11      	ldr	r2, [pc, #68]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801073e:	4b0f      	ldr	r3, [pc, #60]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a0e      	ldr	r2, [pc, #56]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010744:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801074a:	f7f6 feb9 	bl	80074c0 <HAL_GetTick>
 801074e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010750:	e008      	b.n	8010764 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010752:	f7f6 feb5 	bl	80074c0 <HAL_GetTick>
 8010756:	4602      	mov	r2, r0
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	2b02      	cmp	r3, #2
 801075e:	d901      	bls.n	8010764 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010760:	2303      	movs	r3, #3
 8010762:	e006      	b.n	8010772 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010764:	4b05      	ldr	r3, [pc, #20]	@ (801077c <RCCEx_PLL2_Config+0x15c>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d0f0      	beq.n	8010752 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010770:	7bfb      	ldrb	r3, [r7, #15]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	58024400 	.word	0x58024400
 8010780:	ffff0007 	.word	0xffff0007

08010784 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010792:	4b53      	ldr	r3, [pc, #332]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010796:	f003 0303 	and.w	r3, r3, #3
 801079a:	2b03      	cmp	r3, #3
 801079c:	d101      	bne.n	80107a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801079e:	2301      	movs	r3, #1
 80107a0:	e099      	b.n	80108d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80107a2:	4b4f      	ldr	r3, [pc, #316]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a4e      	ldr	r2, [pc, #312]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80107a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80107ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80107ae:	f7f6 fe87 	bl	80074c0 <HAL_GetTick>
 80107b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107b4:	e008      	b.n	80107c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80107b6:	f7f6 fe83 	bl	80074c0 <HAL_GetTick>
 80107ba:	4602      	mov	r2, r0
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	1ad3      	subs	r3, r2, r3
 80107c0:	2b02      	cmp	r3, #2
 80107c2:	d901      	bls.n	80107c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80107c4:	2303      	movs	r3, #3
 80107c6:	e086      	b.n	80108d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80107c8:	4b45      	ldr	r3, [pc, #276]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1f0      	bne.n	80107b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80107d4:	4b42      	ldr	r3, [pc, #264]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80107d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	051b      	lsls	r3, r3, #20
 80107e2:	493f      	ldr	r1, [pc, #252]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80107e4:	4313      	orrs	r3, r2
 80107e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	3b01      	subs	r3, #1
 80107ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	689b      	ldr	r3, [r3, #8]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	025b      	lsls	r3, r3, #9
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	431a      	orrs	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	3b01      	subs	r3, #1
 8010804:	041b      	lsls	r3, r3, #16
 8010806:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801080a:	431a      	orrs	r2, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	691b      	ldr	r3, [r3, #16]
 8010810:	3b01      	subs	r3, #1
 8010812:	061b      	lsls	r3, r3, #24
 8010814:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010818:	4931      	ldr	r1, [pc, #196]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801081a:	4313      	orrs	r3, r2
 801081c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801081e:	4b30      	ldr	r3, [pc, #192]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010822:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	695b      	ldr	r3, [r3, #20]
 801082a:	492d      	ldr	r1, [pc, #180]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801082c:	4313      	orrs	r3, r2
 801082e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010830:	4b2b      	ldr	r3, [pc, #172]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010834:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	699b      	ldr	r3, [r3, #24]
 801083c:	4928      	ldr	r1, [pc, #160]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801083e:	4313      	orrs	r3, r2
 8010840:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010842:	4b27      	ldr	r3, [pc, #156]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010846:	4a26      	ldr	r2, [pc, #152]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801084c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801084e:	4b24      	ldr	r3, [pc, #144]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010852:	4b24      	ldr	r3, [pc, #144]	@ (80108e4 <RCCEx_PLL3_Config+0x160>)
 8010854:	4013      	ands	r3, r2
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	69d2      	ldr	r2, [r2, #28]
 801085a:	00d2      	lsls	r2, r2, #3
 801085c:	4920      	ldr	r1, [pc, #128]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801085e:	4313      	orrs	r3, r2
 8010860:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010862:	4b1f      	ldr	r3, [pc, #124]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010866:	4a1e      	ldr	r2, [pc, #120]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801086c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d106      	bne.n	8010882 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010874:	4b1a      	ldr	r3, [pc, #104]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010878:	4a19      	ldr	r2, [pc, #100]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801087a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801087e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010880:	e00f      	b.n	80108a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d106      	bne.n	8010896 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010888:	4b15      	ldr	r3, [pc, #84]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801088a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801088c:	4a14      	ldr	r2, [pc, #80]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801088e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010894:	e005      	b.n	80108a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010896:	4b12      	ldr	r3, [pc, #72]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 8010898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801089a:	4a11      	ldr	r2, [pc, #68]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 801089c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80108a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80108a2:	4b0f      	ldr	r3, [pc, #60]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a0e      	ldr	r2, [pc, #56]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80108a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80108ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108ae:	f7f6 fe07 	bl	80074c0 <HAL_GetTick>
 80108b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108b4:	e008      	b.n	80108c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80108b6:	f7f6 fe03 	bl	80074c0 <HAL_GetTick>
 80108ba:	4602      	mov	r2, r0
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d901      	bls.n	80108c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80108c4:	2303      	movs	r3, #3
 80108c6:	e006      	b.n	80108d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80108c8:	4b05      	ldr	r3, [pc, #20]	@ (80108e0 <RCCEx_PLL3_Config+0x15c>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0f0      	beq.n	80108b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80108d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	58024400 	.word	0x58024400
 80108e4:	ffff0007 	.word	0xffff0007

080108e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d101      	bne.n	80108fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80108f6:	2301      	movs	r3, #1
 80108f8:	e10f      	b.n	8010b1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a87      	ldr	r2, [pc, #540]	@ (8010b24 <HAL_SPI_Init+0x23c>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d00f      	beq.n	801092a <HAL_SPI_Init+0x42>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4a86      	ldr	r2, [pc, #536]	@ (8010b28 <HAL_SPI_Init+0x240>)
 8010910:	4293      	cmp	r3, r2
 8010912:	d00a      	beq.n	801092a <HAL_SPI_Init+0x42>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4a84      	ldr	r2, [pc, #528]	@ (8010b2c <HAL_SPI_Init+0x244>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d005      	beq.n	801092a <HAL_SPI_Init+0x42>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	2b0f      	cmp	r3, #15
 8010924:	d901      	bls.n	801092a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	e0f7      	b.n	8010b1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fef6 	bl	801171c <SPI_GetPacketSize>
 8010930:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a7b      	ldr	r2, [pc, #492]	@ (8010b24 <HAL_SPI_Init+0x23c>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d00c      	beq.n	8010956 <HAL_SPI_Init+0x6e>
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a79      	ldr	r2, [pc, #484]	@ (8010b28 <HAL_SPI_Init+0x240>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d007      	beq.n	8010956 <HAL_SPI_Init+0x6e>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4a78      	ldr	r2, [pc, #480]	@ (8010b2c <HAL_SPI_Init+0x244>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d002      	beq.n	8010956 <HAL_SPI_Init+0x6e>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2b08      	cmp	r3, #8
 8010954:	d811      	bhi.n	801097a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801095a:	4a72      	ldr	r2, [pc, #456]	@ (8010b24 <HAL_SPI_Init+0x23c>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d009      	beq.n	8010974 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a70      	ldr	r2, [pc, #448]	@ (8010b28 <HAL_SPI_Init+0x240>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d004      	beq.n	8010974 <HAL_SPI_Init+0x8c>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	4a6f      	ldr	r2, [pc, #444]	@ (8010b2c <HAL_SPI_Init+0x244>)
 8010970:	4293      	cmp	r3, r2
 8010972:	d104      	bne.n	801097e <HAL_SPI_Init+0x96>
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b10      	cmp	r3, #16
 8010978:	d901      	bls.n	801097e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e0cd      	b.n	8010b1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010984:	b2db      	uxtb	r3, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7f1 fe78 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2202      	movs	r2, #2
 801099c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f022 0201 	bic.w	r2, r2, #1
 80109ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80109ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80109c4:	d119      	bne.n	80109fa <HAL_SPI_Init+0x112>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80109ce:	d103      	bne.n	80109d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d008      	beq.n	80109ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d10c      	bne.n	80109fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80109e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109e8:	d107      	bne.n	80109fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80109f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00f      	beq.n	8010a26 <HAL_SPI_Init+0x13e>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	2b06      	cmp	r3, #6
 8010a0c:	d90b      	bls.n	8010a26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	430a      	orrs	r2, r1
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	e007      	b.n	8010a36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010a34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	69da      	ldr	r2, [r3, #28]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a3e:	431a      	orrs	r2, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	431a      	orrs	r2, r3
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a48:	ea42 0103 	orr.w	r1, r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	68da      	ldr	r2, [r3, #12]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	430a      	orrs	r2, r1
 8010a56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a60:	431a      	orrs	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a66:	431a      	orrs	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	431a      	orrs	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	431a      	orrs	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	695b      	ldr	r3, [r3, #20]
 8010a78:	431a      	orrs	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6a1b      	ldr	r3, [r3, #32]
 8010a7e:	431a      	orrs	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	431a      	orrs	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a8a:	431a      	orrs	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	431a      	orrs	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a96:	ea42 0103 	orr.w	r1, r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	430a      	orrs	r2, r1
 8010aa4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d113      	bne.n	8010ad6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010ac0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010ad4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f022 0201 	bic.w	r2, r2, #1
 8010ae4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	685b      	ldr	r3, [r3, #4]
 8010aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d00a      	beq.n	8010b08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	430a      	orrs	r2, r1
 8010b06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	40013000 	.word	0x40013000
 8010b28:	40003800 	.word	0x40003800
 8010b2c:	40003c00 	.word	0x40003c00

08010b30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b088      	sub	sp, #32
 8010b34:	af02      	add	r7, sp, #8
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	3320      	adds	r3, #32
 8010b46:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b48:	f7f6 fcba 	bl	80074c0 <HAL_GetTick>
 8010b4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d001      	beq.n	8010b5e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8010b5a:	2302      	movs	r3, #2
 8010b5c:	e1d1      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <HAL_SPI_Transmit+0x3a>
 8010b64:	88fb      	ldrh	r3, [r7, #6]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d101      	bne.n	8010b6e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e1c9      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	d101      	bne.n	8010b7c <HAL_SPI_Transmit+0x4c>
 8010b78:	2302      	movs	r3, #2
 8010b7a:	e1c2      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2203      	movs	r2, #3
 8010b88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	68ba      	ldr	r2, [r7, #8]
 8010b98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	88fa      	ldrh	r2, [r7, #6]
 8010b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	88fa      	ldrh	r2, [r7, #6]
 8010ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010bd4:	d108      	bne.n	8010be8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010be4:	601a      	str	r2, [r3, #0]
 8010be6:	e009      	b.n	8010bfc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010bfa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	4b96      	ldr	r3, [pc, #600]	@ (8010e5c <HAL_SPI_Transmit+0x32c>)
 8010c04:	4013      	ands	r3, r2
 8010c06:	88f9      	ldrh	r1, [r7, #6]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	430b      	orrs	r3, r1
 8010c0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f042 0201 	orr.w	r2, r2, #1
 8010c1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010c28:	d107      	bne.n	8010c3a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010c38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	2b0f      	cmp	r3, #15
 8010c40:	d947      	bls.n	8010cd2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010c42:	e03f      	b.n	8010cc4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	695b      	ldr	r3, [r3, #20]
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	d114      	bne.n	8010c7c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	6812      	ldr	r2, [r2, #0]
 8010c5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c62:	1d1a      	adds	r2, r3, #4
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	3b01      	subs	r3, #1
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010c7a:	e023      	b.n	8010cc4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c7c:	f7f6 fc20 	bl	80074c0 <HAL_GetTick>
 8010c80:	4602      	mov	r2, r0
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d803      	bhi.n	8010c94 <HAL_SPI_Transmit+0x164>
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c92:	d102      	bne.n	8010c9a <HAL_SPI_Transmit+0x16a>
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d114      	bne.n	8010cc4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f000 fc70 	bl	8011580 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ca6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	e11e      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1b9      	bne.n	8010c44 <HAL_SPI_Transmit+0x114>
 8010cd0:	e0f1      	b.n	8010eb6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	2b07      	cmp	r3, #7
 8010cd8:	f240 80e6 	bls.w	8010ea8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010cdc:	e05d      	b.n	8010d9a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	f003 0302 	and.w	r3, r3, #2
 8010ce8:	2b02      	cmp	r3, #2
 8010cea:	d132      	bne.n	8010d52 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d918      	bls.n	8010d2a <HAL_SPI_Transmit+0x1fa>
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d014      	beq.n	8010d2a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6812      	ldr	r2, [r2, #0]
 8010d0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d10:	1d1a      	adds	r2, r3, #4
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	3b02      	subs	r3, #2
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010d28:	e037      	b.n	8010d9a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d2e:	881a      	ldrh	r2, [r3, #0]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d38:	1c9a      	adds	r2, r3, #2
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	3b01      	subs	r3, #1
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010d50:	e023      	b.n	8010d9a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d52:	f7f6 fbb5 	bl	80074c0 <HAL_GetTick>
 8010d56:	4602      	mov	r2, r0
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	683a      	ldr	r2, [r7, #0]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d803      	bhi.n	8010d6a <HAL_SPI_Transmit+0x23a>
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d68:	d102      	bne.n	8010d70 <HAL_SPI_Transmit+0x240>
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d114      	bne.n	8010d9a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f000 fc05 	bl	8011580 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010d96:	2303      	movs	r3, #3
 8010d98:	e0b3      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d19b      	bne.n	8010cde <HAL_SPI_Transmit+0x1ae>
 8010da6:	e086      	b.n	8010eb6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	f003 0302 	and.w	r3, r3, #2
 8010db2:	2b02      	cmp	r3, #2
 8010db4:	d154      	bne.n	8010e60 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	2b03      	cmp	r3, #3
 8010dc0:	d918      	bls.n	8010df4 <HAL_SPI_Transmit+0x2c4>
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dc6:	2b40      	cmp	r3, #64	@ 0x40
 8010dc8:	d914      	bls.n	8010df4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6812      	ldr	r2, [r2, #0]
 8010dd4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010dda:	1d1a      	adds	r2, r3, #4
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	3b04      	subs	r3, #4
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010df2:	e059      	b.n	8010ea8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d917      	bls.n	8010e30 <HAL_SPI_Transmit+0x300>
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d013      	beq.n	8010e30 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e0c:	881a      	ldrh	r2, [r3, #0]
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e16:	1c9a      	adds	r2, r3, #2
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	3b02      	subs	r3, #2
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010e2e:	e03b      	b.n	8010ea8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	3320      	adds	r3, #32
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e42:	1c5a      	adds	r2, r3, #1
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	3b01      	subs	r3, #1
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010e5a:	e025      	b.n	8010ea8 <HAL_SPI_Transmit+0x378>
 8010e5c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e60:	f7f6 fb2e 	bl	80074c0 <HAL_GetTick>
 8010e64:	4602      	mov	r2, r0
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	683a      	ldr	r2, [r7, #0]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d803      	bhi.n	8010e78 <HAL_SPI_Transmit+0x348>
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e76:	d102      	bne.n	8010e7e <HAL_SPI_Transmit+0x34e>
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d114      	bne.n	8010ea8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e7e:	68f8      	ldr	r0, [r7, #12]
 8010e80:	f000 fb7e 	bl	8011580 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2201      	movs	r2, #1
 8010e98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e02c      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f47f af79 	bne.w	8010da8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	2108      	movs	r1, #8
 8010ec0:	68f8      	ldr	r0, [r7, #12]
 8010ec2:	f000 fbfd 	bl	80116c0 <SPI_WaitOnFlagUntilTimeout>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d007      	beq.n	8010edc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ed2:	f043 0220 	orr.w	r2, r3, #32
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f000 fb4f 	bl	8011580 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8010efc:	2301      	movs	r3, #1
 8010efe:	e000      	b.n	8010f02 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010f00:	2300      	movs	r3, #0
  }
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3718      	adds	r7, #24
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop

08010f0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b08e      	sub	sp, #56	@ 0x38
 8010f10:	af02      	add	r7, sp, #8
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	607a      	str	r2, [r7, #4]
 8010f18:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	3320      	adds	r3, #32
 8010f20:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	3330      	adds	r3, #48	@ 0x30
 8010f28:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f2e:	095b      	lsrs	r3, r3, #5
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	3301      	adds	r3, #1
 8010f34:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010f36:	f7f6 fac3 	bl	80074c0 <HAL_GetTick>
 8010f3a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8010f3c:	887b      	ldrh	r3, [r7, #2]
 8010f3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8010f40:	887b      	ldrh	r3, [r7, #2]
 8010f42:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d001      	beq.n	8010f54 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8010f50:	2302      	movs	r3, #2
 8010f52:	e310      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d005      	beq.n	8010f66 <HAL_SPI_TransmitReceive+0x5a>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d002      	beq.n	8010f66 <HAL_SPI_TransmitReceive+0x5a>
 8010f60:	887b      	ldrh	r3, [r7, #2]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d101      	bne.n	8010f6a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	e305      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d101      	bne.n	8010f78 <HAL_SPI_TransmitReceive+0x6c>
 8010f74:	2302      	movs	r3, #2
 8010f76:	e2fe      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2205      	movs	r2, #5
 8010f84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	887a      	ldrh	r2, [r7, #2]
 8010f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	887a      	ldrh	r2, [r7, #2]
 8010fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	887a      	ldrh	r2, [r7, #2]
 8010fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	887a      	ldrh	r2, [r7, #2]
 8010fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68da      	ldr	r2, [r3, #12]
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010fd6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a70      	ldr	r2, [pc, #448]	@ (80111a0 <HAL_SPI_TransmitReceive+0x294>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d009      	beq.n	8010ff6 <HAL_SPI_TransmitReceive+0xea>
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80111a4 <HAL_SPI_TransmitReceive+0x298>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d004      	beq.n	8010ff6 <HAL_SPI_TransmitReceive+0xea>
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4a6d      	ldr	r2, [pc, #436]	@ (80111a8 <HAL_SPI_TransmitReceive+0x29c>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d102      	bne.n	8010ffc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010ff6:	2310      	movs	r3, #16
 8010ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ffa:	e001      	b.n	8011000 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8010ffc:	2308      	movs	r3, #8
 8010ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	4b69      	ldr	r3, [pc, #420]	@ (80111ac <HAL_SPI_TransmitReceive+0x2a0>)
 8011008:	4013      	ands	r3, r2
 801100a:	8879      	ldrh	r1, [r7, #2]
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	6812      	ldr	r2, [r2, #0]
 8011010:	430b      	orrs	r3, r1
 8011012:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f042 0201 	orr.w	r2, r2, #1
 8011022:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801102c:	d107      	bne.n	801103e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801103c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	2b0f      	cmp	r3, #15
 8011044:	f240 80a2 	bls.w	801118c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8011048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801104a:	089b      	lsrs	r3, r3, #2
 801104c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801104e:	e094      	b.n	801117a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	695b      	ldr	r3, [r3, #20]
 8011056:	f003 0302 	and.w	r3, r3, #2
 801105a:	2b02      	cmp	r3, #2
 801105c:	d120      	bne.n	80110a0 <HAL_SPI_TransmitReceive+0x194>
 801105e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011060:	2b00      	cmp	r3, #0
 8011062:	d01d      	beq.n	80110a0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011064:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011066:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801106a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801106c:	429a      	cmp	r2, r3
 801106e:	d217      	bcs.n	80110a0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	6812      	ldr	r2, [r2, #0]
 801107a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011080:	1d1a      	adds	r2, r3, #4
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801108c:	b29b      	uxth	r3, r3
 801108e:	3b01      	subs	r3, #1
 8011090:	b29a      	uxth	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801109e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	695b      	ldr	r3, [r3, #20]
 80110a6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80110a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d065      	beq.n	801117a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	695b      	ldr	r3, [r3, #20]
 80110b4:	f003 0301 	and.w	r3, r3, #1
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d118      	bne.n	80110ee <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80110c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110cc:	1d1a      	adds	r2, r3, #4
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110d8:	b29b      	uxth	r3, r3
 80110da:	3b01      	subs	r3, #1
 80110dc:	b29a      	uxth	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80110ec:	e045      	b.n	801117a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80110ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80110f0:	8bfb      	ldrh	r3, [r7, #30]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d21d      	bcs.n	8011132 <HAL_SPI_TransmitReceive+0x226>
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d018      	beq.n	8011132 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011108:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801110a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011110:	1d1a      	adds	r2, r3, #4
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801111c:	b29b      	uxth	r3, r3
 801111e:	3b01      	subs	r3, #1
 8011120:	b29a      	uxth	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801112e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011130:	e023      	b.n	801117a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011132:	f7f6 f9c5 	bl	80074c0 <HAL_GetTick>
 8011136:	4602      	mov	r2, r0
 8011138:	69bb      	ldr	r3, [r7, #24]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801113e:	429a      	cmp	r2, r3
 8011140:	d803      	bhi.n	801114a <HAL_SPI_TransmitReceive+0x23e>
 8011142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011148:	d102      	bne.n	8011150 <HAL_SPI_TransmitReceive+0x244>
 801114a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801114c:	2b00      	cmp	r3, #0
 801114e:	d114      	bne.n	801117a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 fa15 	bl	8011580 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801115c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2201      	movs	r2, #1
 801116a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2200      	movs	r2, #0
 8011172:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011176:	2303      	movs	r3, #3
 8011178:	e1fd      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801117a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801117c:	2b00      	cmp	r3, #0
 801117e:	f47f af67 	bne.w	8011050 <HAL_SPI_TransmitReceive+0x144>
 8011182:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011184:	2b00      	cmp	r3, #0
 8011186:	f47f af63 	bne.w	8011050 <HAL_SPI_TransmitReceive+0x144>
 801118a:	e1ce      	b.n	801152a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	2b07      	cmp	r3, #7
 8011192:	f240 81c2 	bls.w	801151a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8011196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011198:	085b      	lsrs	r3, r3, #1
 801119a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801119c:	e0c9      	b.n	8011332 <HAL_SPI_TransmitReceive+0x426>
 801119e:	bf00      	nop
 80111a0:	40013000 	.word	0x40013000
 80111a4:	40003800 	.word	0x40003800
 80111a8:	40003c00 	.word	0x40003c00
 80111ac:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	695b      	ldr	r3, [r3, #20]
 80111b6:	f003 0302 	and.w	r3, r3, #2
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	d11f      	bne.n	80111fe <HAL_SPI_TransmitReceive+0x2f2>
 80111be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d01c      	beq.n	80111fe <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80111c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80111c6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80111c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d216      	bcs.n	80111fe <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111d4:	881a      	ldrh	r2, [r3, #0]
 80111d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111de:	1c9a      	adds	r2, r3, #2
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	3b01      	subs	r3, #1
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80111fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	695b      	ldr	r3, [r3, #20]
 8011204:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011206:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011208:	2b00      	cmp	r3, #0
 801120a:	f000 8092 	beq.w	8011332 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	695b      	ldr	r3, [r3, #20]
 8011214:	f003 0301 	and.w	r3, r3, #1
 8011218:	2b01      	cmp	r3, #1
 801121a:	d118      	bne.n	801124e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011220:	6a3a      	ldr	r2, [r7, #32]
 8011222:	8812      	ldrh	r2, [r2, #0]
 8011224:	b292      	uxth	r2, r2
 8011226:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801122c:	1c9a      	adds	r2, r3, #2
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011238:	b29b      	uxth	r3, r3
 801123a:	3b01      	subs	r3, #1
 801123c:	b29a      	uxth	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801124a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801124c:	e071      	b.n	8011332 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801124e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011250:	8bfb      	ldrh	r3, [r7, #30]
 8011252:	429a      	cmp	r2, r3
 8011254:	d228      	bcs.n	80112a8 <HAL_SPI_TransmitReceive+0x39c>
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801125c:	2b00      	cmp	r3, #0
 801125e:	d023      	beq.n	80112a8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011264:	6a3a      	ldr	r2, [r7, #32]
 8011266:	8812      	ldrh	r2, [r2, #0]
 8011268:	b292      	uxth	r2, r2
 801126a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011270:	1c9a      	adds	r2, r3, #2
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801127a:	6a3a      	ldr	r2, [r7, #32]
 801127c:	8812      	ldrh	r2, [r2, #0]
 801127e:	b292      	uxth	r2, r2
 8011280:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011286:	1c9a      	adds	r2, r3, #2
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011292:	b29b      	uxth	r3, r3
 8011294:	3b02      	subs	r3, #2
 8011296:	b29a      	uxth	r2, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112a4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112a6:	e044      	b.n	8011332 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80112a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	d11d      	bne.n	80112ea <HAL_SPI_TransmitReceive+0x3de>
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d018      	beq.n	80112ea <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112bc:	6a3a      	ldr	r2, [r7, #32]
 80112be:	8812      	ldrh	r2, [r2, #0]
 80112c0:	b292      	uxth	r2, r2
 80112c2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112c8:	1c9a      	adds	r2, r3, #2
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	3b01      	subs	r3, #1
 80112d8:	b29a      	uxth	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80112e8:	e023      	b.n	8011332 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80112ea:	f7f6 f8e9 	bl	80074c0 <HAL_GetTick>
 80112ee:	4602      	mov	r2, r0
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d803      	bhi.n	8011302 <HAL_SPI_TransmitReceive+0x3f6>
 80112fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011300:	d102      	bne.n	8011308 <HAL_SPI_TransmitReceive+0x3fc>
 8011302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011304:	2b00      	cmp	r3, #0
 8011306:	d114      	bne.n	8011332 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011308:	68f8      	ldr	r0, [r7, #12]
 801130a:	f000 f939 	bl	8011580 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011314:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2201      	movs	r2, #1
 8011322:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2200      	movs	r2, #0
 801132a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801132e:	2303      	movs	r3, #3
 8011330:	e121      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011332:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011334:	2b00      	cmp	r3, #0
 8011336:	f47f af3b 	bne.w	80111b0 <HAL_SPI_TransmitReceive+0x2a4>
 801133a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801133c:	2b00      	cmp	r3, #0
 801133e:	f47f af37 	bne.w	80111b0 <HAL_SPI_TransmitReceive+0x2a4>
 8011342:	e0f2      	b.n	801152a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	695b      	ldr	r3, [r3, #20]
 801134a:	f003 0302 	and.w	r3, r3, #2
 801134e:	2b02      	cmp	r3, #2
 8011350:	d121      	bne.n	8011396 <HAL_SPI_TransmitReceive+0x48a>
 8011352:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011354:	2b00      	cmp	r3, #0
 8011356:	d01e      	beq.n	8011396 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011358:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801135a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801135e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011360:	429a      	cmp	r2, r3
 8011362:	d218      	bcs.n	8011396 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	3320      	adds	r3, #32
 801136e:	7812      	ldrb	r2, [r2, #0]
 8011370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011382:	b29b      	uxth	r3, r3
 8011384:	3b01      	subs	r3, #1
 8011386:	b29a      	uxth	r2, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011394:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	695b      	ldr	r3, [r3, #20]
 801139c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801139e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f000 80ba 	beq.w	801151a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	695b      	ldr	r3, [r3, #20]
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d11b      	bne.n	80113ec <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113c0:	7812      	ldrb	r2, [r2, #0]
 80113c2:	b2d2      	uxtb	r2, r2
 80113c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80113ca:	1c5a      	adds	r2, r3, #1
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	3b01      	subs	r3, #1
 80113da:	b29a      	uxth	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80113e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80113ea:	e096      	b.n	801151a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80113ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80113ee:	8bfb      	ldrh	r3, [r7, #30]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d24a      	bcs.n	801148a <HAL_SPI_TransmitReceive+0x57e>
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d045      	beq.n	801148a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801140a:	7812      	ldrb	r2, [r2, #0]
 801140c:	b2d2      	uxtb	r2, r2
 801140e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011426:	7812      	ldrb	r2, [r2, #0]
 8011428:	b2d2      	uxtb	r2, r2
 801142a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011430:	1c5a      	adds	r2, r3, #1
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011442:	7812      	ldrb	r2, [r2, #0]
 8011444:	b2d2      	uxtb	r2, r2
 8011446:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801144c:	1c5a      	adds	r2, r3, #1
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801145e:	7812      	ldrb	r2, [r2, #0]
 8011460:	b2d2      	uxtb	r2, r2
 8011462:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011474:	b29b      	uxth	r3, r3
 8011476:	3b04      	subs	r3, #4
 8011478:	b29a      	uxth	r2, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011486:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011488:	e047      	b.n	801151a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801148a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801148c:	2b03      	cmp	r3, #3
 801148e:	d820      	bhi.n	80114d2 <HAL_SPI_TransmitReceive+0x5c6>
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8011496:	2b00      	cmp	r3, #0
 8011498:	d01b      	beq.n	80114d2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114a6:	7812      	ldrb	r2, [r2, #0]
 80114a8:	b2d2      	uxtb	r2, r2
 80114aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114b0:	1c5a      	adds	r2, r3, #1
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114bc:	b29b      	uxth	r3, r3
 80114be:	3b01      	subs	r3, #1
 80114c0:	b29a      	uxth	r2, r3
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80114d0:	e023      	b.n	801151a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114d2:	f7f5 fff5 	bl	80074c0 <HAL_GetTick>
 80114d6:	4602      	mov	r2, r0
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114de:	429a      	cmp	r2, r3
 80114e0:	d803      	bhi.n	80114ea <HAL_SPI_TransmitReceive+0x5de>
 80114e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114e8:	d102      	bne.n	80114f0 <HAL_SPI_TransmitReceive+0x5e4>
 80114ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d114      	bne.n	801151a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 f845 	bl	8011580 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80114fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2201      	movs	r2, #1
 801150a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2200      	movs	r2, #0
 8011512:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011516:	2303      	movs	r3, #3
 8011518:	e02d      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801151a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801151c:	2b00      	cmp	r3, #0
 801151e:	f47f af11 	bne.w	8011344 <HAL_SPI_TransmitReceive+0x438>
 8011522:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011524:	2b00      	cmp	r3, #0
 8011526:	f47f af0d 	bne.w	8011344 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011530:	2200      	movs	r2, #0
 8011532:	2108      	movs	r1, #8
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f000 f8c3 	bl	80116c0 <SPI_WaitOnFlagUntilTimeout>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d007      	beq.n	8011550 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011546:	f043 0220 	orr.w	r2, r3, #32
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011550:	68f8      	ldr	r0, [r7, #12]
 8011552:	f000 f815 	bl	8011580 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2201      	movs	r2, #1
 801155a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2200      	movs	r2, #0
 8011562:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011570:	2301      	movs	r3, #1
 8011572:	e000      	b.n	8011576 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011574:	2300      	movs	r3, #0
  }
}
 8011576:	4618      	mov	r0, r3
 8011578:	3730      	adds	r7, #48	@ 0x30
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop

08011580 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011580:	b480      	push	{r7}
 8011582:	b085      	sub	sp, #20
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	699a      	ldr	r2, [r3, #24]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f042 0208 	orr.w	r2, r2, #8
 801159e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	699a      	ldr	r2, [r3, #24]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f042 0210 	orr.w	r2, r2, #16
 80115ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f022 0201 	bic.w	r2, r2, #1
 80115be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	6919      	ldr	r1, [r3, #16]
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4b3c      	ldr	r3, [pc, #240]	@ (80116bc <SPI_CloseTransfer+0x13c>)
 80115cc:	400b      	ands	r3, r1
 80115ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	689a      	ldr	r2, [r3, #8]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80115de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b04      	cmp	r3, #4
 80115ea:	d014      	beq.n	8011616 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f003 0320 	and.w	r3, r3, #32
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00f      	beq.n	8011616 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	699a      	ldr	r2, [r3, #24]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	f042 0220 	orr.w	r2, r2, #32
 8011614:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801161c:	b2db      	uxtb	r3, r3
 801161e:	2b03      	cmp	r3, #3
 8011620:	d014      	beq.n	801164c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00f      	beq.n	801164c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011632:	f043 0204 	orr.w	r2, r3, #4
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	699a      	ldr	r2, [r3, #24]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801164a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011652:	2b00      	cmp	r3, #0
 8011654:	d00f      	beq.n	8011676 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801165c:	f043 0201 	orr.w	r2, r3, #1
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	699a      	ldr	r2, [r3, #24]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011674:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00f      	beq.n	80116a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011686:	f043 0208 	orr.w	r2, r3, #8
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	699a      	ldr	r2, [r3, #24]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801169e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80116b0:	bf00      	nop
 80116b2:	3714      	adds	r7, #20
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr
 80116bc:	fffffc90 	.word	0xfffffc90

080116c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	603b      	str	r3, [r7, #0]
 80116cc:	4613      	mov	r3, r2
 80116ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80116d0:	e010      	b.n	80116f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116d2:	f7f5 fef5 	bl	80074c0 <HAL_GetTick>
 80116d6:	4602      	mov	r2, r0
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d803      	bhi.n	80116ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e8:	d102      	bne.n	80116f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d101      	bne.n	80116f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80116f0:	2303      	movs	r3, #3
 80116f2:	e00f      	b.n	8011714 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	695a      	ldr	r2, [r3, #20]
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	4013      	ands	r3, r2
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	429a      	cmp	r2, r3
 8011702:	bf0c      	ite	eq
 8011704:	2301      	moveq	r3, #1
 8011706:	2300      	movne	r3, #0
 8011708:	b2db      	uxtb	r3, r3
 801170a:	461a      	mov	r2, r3
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	429a      	cmp	r2, r3
 8011710:	d0df      	beq.n	80116d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011712:	2300      	movs	r3, #0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011728:	095b      	lsrs	r3, r3, #5
 801172a:	3301      	adds	r3, #1
 801172c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	3301      	adds	r3, #1
 8011734:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	3307      	adds	r3, #7
 801173a:	08db      	lsrs	r3, r3, #3
 801173c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	fb02 f303 	mul.w	r3, r2, r3
}
 8011746:	4618      	mov	r0, r3
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011752:	b580      	push	{r7, lr}
 8011754:	b082      	sub	sp, #8
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011760:	2301      	movs	r3, #1
 8011762:	e049      	b.n	80117f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b00      	cmp	r3, #0
 801176e:	d106      	bne.n	801177e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7f1 f88d 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2202      	movs	r2, #2
 8011782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	3304      	adds	r3, #4
 801178e:	4619      	mov	r1, r3
 8011790:	4610      	mov	r0, r2
 8011792:	f001 f9a3 	bl	8012adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2201      	movs	r2, #1
 801179a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2201      	movs	r2, #1
 80117b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2201      	movs	r2, #1
 80117ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2201      	movs	r2, #1
 80117c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2201      	movs	r2, #1
 80117ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2201      	movs	r2, #1
 80117d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2201      	movs	r2, #1
 80117da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2201      	movs	r2, #1
 80117e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2201      	movs	r2, #1
 80117ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2201      	movs	r2, #1
 80117f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80117f6:	2300      	movs	r3, #0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3708      	adds	r7, #8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801180e:	b2db      	uxtb	r3, r3
 8011810:	2b01      	cmp	r3, #1
 8011812:	d001      	beq.n	8011818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011814:	2301      	movs	r3, #1
 8011816:	e056      	b.n	80118c6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2202      	movs	r2, #2
 801181c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4a2b      	ldr	r2, [pc, #172]	@ (80118d4 <HAL_TIM_Base_Start+0xd4>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d02c      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011832:	d027      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4a27      	ldr	r2, [pc, #156]	@ (80118d8 <HAL_TIM_Base_Start+0xd8>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d022      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4a26      	ldr	r2, [pc, #152]	@ (80118dc <HAL_TIM_Base_Start+0xdc>)
 8011844:	4293      	cmp	r3, r2
 8011846:	d01d      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	4a24      	ldr	r2, [pc, #144]	@ (80118e0 <HAL_TIM_Base_Start+0xe0>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d018      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	4a23      	ldr	r2, [pc, #140]	@ (80118e4 <HAL_TIM_Base_Start+0xe4>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d013      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4a21      	ldr	r2, [pc, #132]	@ (80118e8 <HAL_TIM_Base_Start+0xe8>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d00e      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4a20      	ldr	r2, [pc, #128]	@ (80118ec <HAL_TIM_Base_Start+0xec>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d009      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a1e      	ldr	r2, [pc, #120]	@ (80118f0 <HAL_TIM_Base_Start+0xf0>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d004      	beq.n	8011884 <HAL_TIM_Base_Start+0x84>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4a1d      	ldr	r2, [pc, #116]	@ (80118f4 <HAL_TIM_Base_Start+0xf4>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d115      	bne.n	80118b0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	689a      	ldr	r2, [r3, #8]
 801188a:	4b1b      	ldr	r3, [pc, #108]	@ (80118f8 <HAL_TIM_Base_Start+0xf8>)
 801188c:	4013      	ands	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2b06      	cmp	r3, #6
 8011894:	d015      	beq.n	80118c2 <HAL_TIM_Base_Start+0xc2>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801189c:	d011      	beq.n	80118c2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f042 0201 	orr.w	r2, r2, #1
 80118ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118ae:	e008      	b.n	80118c2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f042 0201 	orr.w	r2, r2, #1
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e000      	b.n	80118c4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	40010000 	.word	0x40010000
 80118d8:	40000400 	.word	0x40000400
 80118dc:	40000800 	.word	0x40000800
 80118e0:	40000c00 	.word	0x40000c00
 80118e4:	40010400 	.word	0x40010400
 80118e8:	40001800 	.word	0x40001800
 80118ec:	40014000 	.word	0x40014000
 80118f0:	4000e000 	.word	0x4000e000
 80118f4:	4000e400 	.word	0x4000e400
 80118f8:	00010007 	.word	0x00010007

080118fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b085      	sub	sp, #20
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801190a:	b2db      	uxtb	r3, r3
 801190c:	2b01      	cmp	r3, #1
 801190e:	d001      	beq.n	8011914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011910:	2301      	movs	r3, #1
 8011912:	e05e      	b.n	80119d2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2202      	movs	r2, #2
 8011918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	68da      	ldr	r2, [r3, #12]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f042 0201 	orr.w	r2, r2, #1
 801192a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a2b      	ldr	r2, [pc, #172]	@ (80119e0 <HAL_TIM_Base_Start_IT+0xe4>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d02c      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801193e:	d027      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4a27      	ldr	r2, [pc, #156]	@ (80119e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d022      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	4a26      	ldr	r2, [pc, #152]	@ (80119e8 <HAL_TIM_Base_Start_IT+0xec>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d01d      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	4a24      	ldr	r2, [pc, #144]	@ (80119ec <HAL_TIM_Base_Start_IT+0xf0>)
 801195a:	4293      	cmp	r3, r2
 801195c:	d018      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	4a23      	ldr	r2, [pc, #140]	@ (80119f0 <HAL_TIM_Base_Start_IT+0xf4>)
 8011964:	4293      	cmp	r3, r2
 8011966:	d013      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a21      	ldr	r2, [pc, #132]	@ (80119f4 <HAL_TIM_Base_Start_IT+0xf8>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d00e      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	4a20      	ldr	r2, [pc, #128]	@ (80119f8 <HAL_TIM_Base_Start_IT+0xfc>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d009      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4a1e      	ldr	r2, [pc, #120]	@ (80119fc <HAL_TIM_Base_Start_IT+0x100>)
 8011982:	4293      	cmp	r3, r2
 8011984:	d004      	beq.n	8011990 <HAL_TIM_Base_Start_IT+0x94>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4a1d      	ldr	r2, [pc, #116]	@ (8011a00 <HAL_TIM_Base_Start_IT+0x104>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d115      	bne.n	80119bc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	689a      	ldr	r2, [r3, #8]
 8011996:	4b1b      	ldr	r3, [pc, #108]	@ (8011a04 <HAL_TIM_Base_Start_IT+0x108>)
 8011998:	4013      	ands	r3, r2
 801199a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2b06      	cmp	r3, #6
 80119a0:	d015      	beq.n	80119ce <HAL_TIM_Base_Start_IT+0xd2>
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80119a8:	d011      	beq.n	80119ce <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f042 0201 	orr.w	r2, r2, #1
 80119b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119ba:	e008      	b.n	80119ce <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	681a      	ldr	r2, [r3, #0]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f042 0201 	orr.w	r2, r2, #1
 80119ca:	601a      	str	r2, [r3, #0]
 80119cc:	e000      	b.n	80119d0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80119ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80119d0:	2300      	movs	r3, #0
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3714      	adds	r7, #20
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr
 80119de:	bf00      	nop
 80119e0:	40010000 	.word	0x40010000
 80119e4:	40000400 	.word	0x40000400
 80119e8:	40000800 	.word	0x40000800
 80119ec:	40000c00 	.word	0x40000c00
 80119f0:	40010400 	.word	0x40010400
 80119f4:	40001800 	.word	0x40001800
 80119f8:	40014000 	.word	0x40014000
 80119fc:	4000e000 	.word	0x4000e000
 8011a00:	4000e400 	.word	0x4000e400
 8011a04:	00010007 	.word	0x00010007

08011a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d101      	bne.n	8011a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011a16:	2301      	movs	r3, #1
 8011a18:	e049      	b.n	8011aae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f000 f841 	bl	8011ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2202      	movs	r2, #2
 8011a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3304      	adds	r3, #4
 8011a44:	4619      	mov	r1, r3
 8011a46:	4610      	mov	r0, r2
 8011a48:	f001 f848 	bl	8012adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2201      	movs	r2, #1
 8011a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2201      	movs	r2, #1
 8011a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2201      	movs	r2, #1
 8011a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2201      	movs	r2, #1
 8011a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011aac:	2300      	movs	r3, #0
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b083      	sub	sp, #12
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011abe:	bf00      	nop
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
	...

08011acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d109      	bne.n	8011af0 <HAL_TIM_PWM_Start+0x24>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	bf14      	ite	ne
 8011ae8:	2301      	movne	r3, #1
 8011aea:	2300      	moveq	r3, #0
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	e03c      	b.n	8011b6a <HAL_TIM_PWM_Start+0x9e>
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b04      	cmp	r3, #4
 8011af4:	d109      	bne.n	8011b0a <HAL_TIM_PWM_Start+0x3e>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	bf14      	ite	ne
 8011b02:	2301      	movne	r3, #1
 8011b04:	2300      	moveq	r3, #0
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	e02f      	b.n	8011b6a <HAL_TIM_PWM_Start+0x9e>
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b08      	cmp	r3, #8
 8011b0e:	d109      	bne.n	8011b24 <HAL_TIM_PWM_Start+0x58>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b16:	b2db      	uxtb	r3, r3
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	bf14      	ite	ne
 8011b1c:	2301      	movne	r3, #1
 8011b1e:	2300      	moveq	r3, #0
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	e022      	b.n	8011b6a <HAL_TIM_PWM_Start+0x9e>
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2b0c      	cmp	r3, #12
 8011b28:	d109      	bne.n	8011b3e <HAL_TIM_PWM_Start+0x72>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	2b01      	cmp	r3, #1
 8011b34:	bf14      	ite	ne
 8011b36:	2301      	movne	r3, #1
 8011b38:	2300      	moveq	r3, #0
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	e015      	b.n	8011b6a <HAL_TIM_PWM_Start+0x9e>
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b10      	cmp	r3, #16
 8011b42:	d109      	bne.n	8011b58 <HAL_TIM_PWM_Start+0x8c>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	bf14      	ite	ne
 8011b50:	2301      	movne	r3, #1
 8011b52:	2300      	moveq	r3, #0
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	e008      	b.n	8011b6a <HAL_TIM_PWM_Start+0x9e>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	2b01      	cmp	r3, #1
 8011b62:	bf14      	ite	ne
 8011b64:	2301      	movne	r3, #1
 8011b66:	2300      	moveq	r3, #0
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d001      	beq.n	8011b72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e0ab      	b.n	8011cca <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d104      	bne.n	8011b82 <HAL_TIM_PWM_Start+0xb6>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2202      	movs	r2, #2
 8011b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011b80:	e023      	b.n	8011bca <HAL_TIM_PWM_Start+0xfe>
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	2b04      	cmp	r3, #4
 8011b86:	d104      	bne.n	8011b92 <HAL_TIM_PWM_Start+0xc6>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2202      	movs	r2, #2
 8011b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011b90:	e01b      	b.n	8011bca <HAL_TIM_PWM_Start+0xfe>
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	2b08      	cmp	r3, #8
 8011b96:	d104      	bne.n	8011ba2 <HAL_TIM_PWM_Start+0xd6>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ba0:	e013      	b.n	8011bca <HAL_TIM_PWM_Start+0xfe>
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b0c      	cmp	r3, #12
 8011ba6:	d104      	bne.n	8011bb2 <HAL_TIM_PWM_Start+0xe6>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2202      	movs	r2, #2
 8011bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011bb0:	e00b      	b.n	8011bca <HAL_TIM_PWM_Start+0xfe>
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	2b10      	cmp	r3, #16
 8011bb6:	d104      	bne.n	8011bc2 <HAL_TIM_PWM_Start+0xf6>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2202      	movs	r2, #2
 8011bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011bc0:	e003      	b.n	8011bca <HAL_TIM_PWM_Start+0xfe>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2202      	movs	r2, #2
 8011bc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2201      	movs	r2, #1
 8011bd0:	6839      	ldr	r1, [r7, #0]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f001 fba8 	bl	8013328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a3d      	ldr	r2, [pc, #244]	@ (8011cd4 <HAL_TIM_PWM_Start+0x208>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d013      	beq.n	8011c0a <HAL_TIM_PWM_Start+0x13e>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a3c      	ldr	r2, [pc, #240]	@ (8011cd8 <HAL_TIM_PWM_Start+0x20c>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d00e      	beq.n	8011c0a <HAL_TIM_PWM_Start+0x13e>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	4a3a      	ldr	r2, [pc, #232]	@ (8011cdc <HAL_TIM_PWM_Start+0x210>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d009      	beq.n	8011c0a <HAL_TIM_PWM_Start+0x13e>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	4a39      	ldr	r2, [pc, #228]	@ (8011ce0 <HAL_TIM_PWM_Start+0x214>)
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d004      	beq.n	8011c0a <HAL_TIM_PWM_Start+0x13e>
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4a37      	ldr	r2, [pc, #220]	@ (8011ce4 <HAL_TIM_PWM_Start+0x218>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d101      	bne.n	8011c0e <HAL_TIM_PWM_Start+0x142>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e000      	b.n	8011c10 <HAL_TIM_PWM_Start+0x144>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d007      	beq.n	8011c24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011c22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4a2a      	ldr	r2, [pc, #168]	@ (8011cd4 <HAL_TIM_PWM_Start+0x208>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d02c      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c36:	d027      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8011ce8 <HAL_TIM_PWM_Start+0x21c>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d022      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a29      	ldr	r2, [pc, #164]	@ (8011cec <HAL_TIM_PWM_Start+0x220>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d01d      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a27      	ldr	r2, [pc, #156]	@ (8011cf0 <HAL_TIM_PWM_Start+0x224>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d018      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8011cd8 <HAL_TIM_PWM_Start+0x20c>)
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	d013      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4a23      	ldr	r2, [pc, #140]	@ (8011cf4 <HAL_TIM_PWM_Start+0x228>)
 8011c66:	4293      	cmp	r3, r2
 8011c68:	d00e      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8011cdc <HAL_TIM_PWM_Start+0x210>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d009      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	4a1f      	ldr	r2, [pc, #124]	@ (8011cf8 <HAL_TIM_PWM_Start+0x22c>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d004      	beq.n	8011c88 <HAL_TIM_PWM_Start+0x1bc>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	4a1e      	ldr	r2, [pc, #120]	@ (8011cfc <HAL_TIM_PWM_Start+0x230>)
 8011c84:	4293      	cmp	r3, r2
 8011c86:	d115      	bne.n	8011cb4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	689a      	ldr	r2, [r3, #8]
 8011c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8011d00 <HAL_TIM_PWM_Start+0x234>)
 8011c90:	4013      	ands	r3, r2
 8011c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	2b06      	cmp	r3, #6
 8011c98:	d015      	beq.n	8011cc6 <HAL_TIM_PWM_Start+0x1fa>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ca0:	d011      	beq.n	8011cc6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f042 0201 	orr.w	r2, r2, #1
 8011cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011cb2:	e008      	b.n	8011cc6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f042 0201 	orr.w	r2, r2, #1
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	e000      	b.n	8011cc8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011cc8:	2300      	movs	r3, #0
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	40010000 	.word	0x40010000
 8011cd8:	40010400 	.word	0x40010400
 8011cdc:	40014000 	.word	0x40014000
 8011ce0:	40014400 	.word	0x40014400
 8011ce4:	40014800 	.word	0x40014800
 8011ce8:	40000400 	.word	0x40000400
 8011cec:	40000800 	.word	0x40000800
 8011cf0:	40000c00 	.word	0x40000c00
 8011cf4:	40001800 	.word	0x40001800
 8011cf8:	4000e000 	.word	0x4000e000
 8011cfc:	4000e400 	.word	0x4000e400
 8011d00:	00010007 	.word	0x00010007

08011d04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2200      	movs	r2, #0
 8011d14:	6839      	ldr	r1, [r7, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	f001 fb06 	bl	8013328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4a3e      	ldr	r2, [pc, #248]	@ (8011e1c <HAL_TIM_PWM_Stop+0x118>)
 8011d22:	4293      	cmp	r3, r2
 8011d24:	d013      	beq.n	8011d4e <HAL_TIM_PWM_Stop+0x4a>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8011e20 <HAL_TIM_PWM_Stop+0x11c>)
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	d00e      	beq.n	8011d4e <HAL_TIM_PWM_Stop+0x4a>
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4a3b      	ldr	r2, [pc, #236]	@ (8011e24 <HAL_TIM_PWM_Stop+0x120>)
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d009      	beq.n	8011d4e <HAL_TIM_PWM_Stop+0x4a>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8011e28 <HAL_TIM_PWM_Stop+0x124>)
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d004      	beq.n	8011d4e <HAL_TIM_PWM_Stop+0x4a>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4a38      	ldr	r2, [pc, #224]	@ (8011e2c <HAL_TIM_PWM_Stop+0x128>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d101      	bne.n	8011d52 <HAL_TIM_PWM_Stop+0x4e>
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e000      	b.n	8011d54 <HAL_TIM_PWM_Stop+0x50>
 8011d52:	2300      	movs	r3, #0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d017      	beq.n	8011d88 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	6a1a      	ldr	r2, [r3, #32]
 8011d5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d62:	4013      	ands	r3, r2
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10f      	bne.n	8011d88 <HAL_TIM_PWM_Stop+0x84>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	6a1a      	ldr	r2, [r3, #32]
 8011d6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011d72:	4013      	ands	r3, r2
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d107      	bne.n	8011d88 <HAL_TIM_PWM_Stop+0x84>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011d86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	6a1a      	ldr	r2, [r3, #32]
 8011d8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d92:	4013      	ands	r3, r2
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10f      	bne.n	8011db8 <HAL_TIM_PWM_Stop+0xb4>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6a1a      	ldr	r2, [r3, #32]
 8011d9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011da2:	4013      	ands	r3, r2
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d107      	bne.n	8011db8 <HAL_TIM_PWM_Stop+0xb4>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f022 0201 	bic.w	r2, r2, #1
 8011db6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d104      	bne.n	8011dc8 <HAL_TIM_PWM_Stop+0xc4>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011dc6:	e023      	b.n	8011e10 <HAL_TIM_PWM_Stop+0x10c>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	2b04      	cmp	r3, #4
 8011dcc:	d104      	bne.n	8011dd8 <HAL_TIM_PWM_Stop+0xd4>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011dd6:	e01b      	b.n	8011e10 <HAL_TIM_PWM_Stop+0x10c>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b08      	cmp	r3, #8
 8011ddc:	d104      	bne.n	8011de8 <HAL_TIM_PWM_Stop+0xe4>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2201      	movs	r2, #1
 8011de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011de6:	e013      	b.n	8011e10 <HAL_TIM_PWM_Stop+0x10c>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2b0c      	cmp	r3, #12
 8011dec:	d104      	bne.n	8011df8 <HAL_TIM_PWM_Stop+0xf4>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011df6:	e00b      	b.n	8011e10 <HAL_TIM_PWM_Stop+0x10c>
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	2b10      	cmp	r3, #16
 8011dfc:	d104      	bne.n	8011e08 <HAL_TIM_PWM_Stop+0x104>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2201      	movs	r2, #1
 8011e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011e06:	e003      	b.n	8011e10 <HAL_TIM_PWM_Stop+0x10c>
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	40010000 	.word	0x40010000
 8011e20:	40010400 	.word	0x40010400
 8011e24:	40014000 	.word	0x40014000
 8011e28:	40014400 	.word	0x40014400
 8011e2c:	40014800 	.word	0x40014800

08011e30 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b086      	sub	sp, #24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
 8011e3c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d109      	bne.n	8011e5c <HAL_TIM_PWM_Start_DMA+0x2c>
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	bf0c      	ite	eq
 8011e54:	2301      	moveq	r3, #1
 8011e56:	2300      	movne	r3, #0
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	e03c      	b.n	8011ed6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	2b04      	cmp	r3, #4
 8011e60:	d109      	bne.n	8011e76 <HAL_TIM_PWM_Start_DMA+0x46>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	bf0c      	ite	eq
 8011e6e:	2301      	moveq	r3, #1
 8011e70:	2300      	movne	r3, #0
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	e02f      	b.n	8011ed6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	2b08      	cmp	r3, #8
 8011e7a:	d109      	bne.n	8011e90 <HAL_TIM_PWM_Start_DMA+0x60>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	bf0c      	ite	eq
 8011e88:	2301      	moveq	r3, #1
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	e022      	b.n	8011ed6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	2b0c      	cmp	r3, #12
 8011e94:	d109      	bne.n	8011eaa <HAL_TIM_PWM_Start_DMA+0x7a>
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	bf0c      	ite	eq
 8011ea2:	2301      	moveq	r3, #1
 8011ea4:	2300      	movne	r3, #0
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	e015      	b.n	8011ed6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2b10      	cmp	r3, #16
 8011eae:	d109      	bne.n	8011ec4 <HAL_TIM_PWM_Start_DMA+0x94>
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011eb6:	b2db      	uxtb	r3, r3
 8011eb8:	2b02      	cmp	r3, #2
 8011eba:	bf0c      	ite	eq
 8011ebc:	2301      	moveq	r3, #1
 8011ebe:	2300      	movne	r3, #0
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	e008      	b.n	8011ed6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	2b02      	cmp	r3, #2
 8011ece:	bf0c      	ite	eq
 8011ed0:	2301      	moveq	r3, #1
 8011ed2:	2300      	movne	r3, #0
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d001      	beq.n	8011ede <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8011eda:	2302      	movs	r3, #2
 8011edc:	e1ba      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d109      	bne.n	8011ef8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	bf0c      	ite	eq
 8011ef0:	2301      	moveq	r3, #1
 8011ef2:	2300      	movne	r3, #0
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	e03c      	b.n	8011f72 <HAL_TIM_PWM_Start_DMA+0x142>
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	2b04      	cmp	r3, #4
 8011efc:	d109      	bne.n	8011f12 <HAL_TIM_PWM_Start_DMA+0xe2>
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	bf0c      	ite	eq
 8011f0a:	2301      	moveq	r3, #1
 8011f0c:	2300      	movne	r3, #0
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	e02f      	b.n	8011f72 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	2b08      	cmp	r3, #8
 8011f16:	d109      	bne.n	8011f2c <HAL_TIM_PWM_Start_DMA+0xfc>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	2b01      	cmp	r3, #1
 8011f22:	bf0c      	ite	eq
 8011f24:	2301      	moveq	r3, #1
 8011f26:	2300      	movne	r3, #0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	e022      	b.n	8011f72 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	2b0c      	cmp	r3, #12
 8011f30:	d109      	bne.n	8011f46 <HAL_TIM_PWM_Start_DMA+0x116>
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	bf0c      	ite	eq
 8011f3e:	2301      	moveq	r3, #1
 8011f40:	2300      	movne	r3, #0
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	e015      	b.n	8011f72 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	2b10      	cmp	r3, #16
 8011f4a:	d109      	bne.n	8011f60 <HAL_TIM_PWM_Start_DMA+0x130>
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	bf0c      	ite	eq
 8011f58:	2301      	moveq	r3, #1
 8011f5a:	2300      	movne	r3, #0
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	e008      	b.n	8011f72 <HAL_TIM_PWM_Start_DMA+0x142>
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	bf0c      	ite	eq
 8011f6c:	2301      	moveq	r3, #1
 8011f6e:	2300      	movne	r3, #0
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d034      	beq.n	8011fe0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <HAL_TIM_PWM_Start_DMA+0x152>
 8011f7c:	887b      	ldrh	r3, [r7, #2]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d101      	bne.n	8011f86 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e166      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d104      	bne.n	8011f96 <HAL_TIM_PWM_Start_DMA+0x166>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2202      	movs	r2, #2
 8011f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011f94:	e026      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	2b04      	cmp	r3, #4
 8011f9a:	d104      	bne.n	8011fa6 <HAL_TIM_PWM_Start_DMA+0x176>
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011fa4:	e01e      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2b08      	cmp	r3, #8
 8011faa:	d104      	bne.n	8011fb6 <HAL_TIM_PWM_Start_DMA+0x186>
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2202      	movs	r2, #2
 8011fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011fb4:	e016      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2b0c      	cmp	r3, #12
 8011fba:	d104      	bne.n	8011fc6 <HAL_TIM_PWM_Start_DMA+0x196>
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2202      	movs	r2, #2
 8011fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011fc4:	e00e      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	2b10      	cmp	r3, #16
 8011fca:	d104      	bne.n	8011fd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2202      	movs	r2, #2
 8011fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011fd4:	e006      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2202      	movs	r2, #2
 8011fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011fde:	e001      	b.n	8011fe4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	e137      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	2b0c      	cmp	r3, #12
 8011fe8:	f200 80ae 	bhi.w	8012148 <HAL_TIM_PWM_Start_DMA+0x318>
 8011fec:	a201      	add	r2, pc, #4	@ (adr r2, 8011ff4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8011fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff2:	bf00      	nop
 8011ff4:	08012029 	.word	0x08012029
 8011ff8:	08012149 	.word	0x08012149
 8011ffc:	08012149 	.word	0x08012149
 8012000:	08012149 	.word	0x08012149
 8012004:	08012071 	.word	0x08012071
 8012008:	08012149 	.word	0x08012149
 801200c:	08012149 	.word	0x08012149
 8012010:	08012149 	.word	0x08012149
 8012014:	080120b9 	.word	0x080120b9
 8012018:	08012149 	.word	0x08012149
 801201c:	08012149 	.word	0x08012149
 8012020:	08012149 	.word	0x08012149
 8012024:	08012101 	.word	0x08012101
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801202c:	4a8b      	ldr	r2, [pc, #556]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x42c>)
 801202e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012034:	4a8a      	ldr	r2, [pc, #552]	@ (8012260 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801203c:	4a89      	ldr	r2, [pc, #548]	@ (8012264 <HAL_TIM_PWM_Start_DMA+0x434>)
 801203e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012044:	6879      	ldr	r1, [r7, #4]
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3334      	adds	r3, #52	@ 0x34
 801204c:	461a      	mov	r2, r3
 801204e:	887b      	ldrh	r3, [r7, #2]
 8012050:	f7f7 fd72 	bl	8009b38 <HAL_DMA_Start_IT>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d001      	beq.n	801205e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801205a:	2301      	movs	r3, #1
 801205c:	e0fa      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	68da      	ldr	r2, [r3, #12]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801206c:	60da      	str	r2, [r3, #12]
      break;
 801206e:	e06e      	b.n	801214e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012074:	4a79      	ldr	r2, [pc, #484]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012076:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801207c:	4a78      	ldr	r2, [pc, #480]	@ (8012260 <HAL_TIM_PWM_Start_DMA+0x430>)
 801207e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012084:	4a77      	ldr	r2, [pc, #476]	@ (8012264 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012086:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801208c:	6879      	ldr	r1, [r7, #4]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	3338      	adds	r3, #56	@ 0x38
 8012094:	461a      	mov	r2, r3
 8012096:	887b      	ldrh	r3, [r7, #2]
 8012098:	f7f7 fd4e 	bl	8009b38 <HAL_DMA_Start_IT>
 801209c:	4603      	mov	r3, r0
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d001      	beq.n	80120a6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80120a2:	2301      	movs	r3, #1
 80120a4:	e0d6      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68da      	ldr	r2, [r3, #12]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80120b4:	60da      	str	r2, [r3, #12]
      break;
 80120b6:	e04a      	b.n	801214e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120bc:	4a67      	ldr	r2, [pc, #412]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80120be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120c4:	4a66      	ldr	r2, [pc, #408]	@ (8012260 <HAL_TIM_PWM_Start_DMA+0x430>)
 80120c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120cc:	4a65      	ldr	r2, [pc, #404]	@ (8012264 <HAL_TIM_PWM_Start_DMA+0x434>)
 80120ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80120d4:	6879      	ldr	r1, [r7, #4]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	333c      	adds	r3, #60	@ 0x3c
 80120dc:	461a      	mov	r2, r3
 80120de:	887b      	ldrh	r3, [r7, #2]
 80120e0:	f7f7 fd2a 	bl	8009b38 <HAL_DMA_Start_IT>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80120ea:	2301      	movs	r3, #1
 80120ec:	e0b2      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	68da      	ldr	r2, [r3, #12]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80120fc:	60da      	str	r2, [r3, #12]
      break;
 80120fe:	e026      	b.n	801214e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012104:	4a55      	ldr	r2, [pc, #340]	@ (801225c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012106:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801210c:	4a54      	ldr	r2, [pc, #336]	@ (8012260 <HAL_TIM_PWM_Start_DMA+0x430>)
 801210e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012114:	4a53      	ldr	r2, [pc, #332]	@ (8012264 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012116:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801211c:	6879      	ldr	r1, [r7, #4]
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	3340      	adds	r3, #64	@ 0x40
 8012124:	461a      	mov	r2, r3
 8012126:	887b      	ldrh	r3, [r7, #2]
 8012128:	f7f7 fd06 	bl	8009b38 <HAL_DMA_Start_IT>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d001      	beq.n	8012136 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012132:	2301      	movs	r3, #1
 8012134:	e08e      	b.n	8012254 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	68da      	ldr	r2, [r3, #12]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012144:	60da      	str	r2, [r3, #12]
      break;
 8012146:	e002      	b.n	801214e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012148:	2301      	movs	r3, #1
 801214a:	75fb      	strb	r3, [r7, #23]
      break;
 801214c:	bf00      	nop
  }

  if (status == HAL_OK)
 801214e:	7dfb      	ldrb	r3, [r7, #23]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d17e      	bne.n	8012252 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2201      	movs	r2, #1
 801215a:	68b9      	ldr	r1, [r7, #8]
 801215c:	4618      	mov	r0, r3
 801215e:	f001 f8e3 	bl	8013328 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	4a40      	ldr	r2, [pc, #256]	@ (8012268 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012168:	4293      	cmp	r3, r2
 801216a:	d013      	beq.n	8012194 <HAL_TIM_PWM_Start_DMA+0x364>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	4a3e      	ldr	r2, [pc, #248]	@ (801226c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012172:	4293      	cmp	r3, r2
 8012174:	d00e      	beq.n	8012194 <HAL_TIM_PWM_Start_DMA+0x364>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	4a3d      	ldr	r2, [pc, #244]	@ (8012270 <HAL_TIM_PWM_Start_DMA+0x440>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d009      	beq.n	8012194 <HAL_TIM_PWM_Start_DMA+0x364>
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	4a3b      	ldr	r2, [pc, #236]	@ (8012274 <HAL_TIM_PWM_Start_DMA+0x444>)
 8012186:	4293      	cmp	r3, r2
 8012188:	d004      	beq.n	8012194 <HAL_TIM_PWM_Start_DMA+0x364>
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4a3a      	ldr	r2, [pc, #232]	@ (8012278 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d101      	bne.n	8012198 <HAL_TIM_PWM_Start_DMA+0x368>
 8012194:	2301      	movs	r3, #1
 8012196:	e000      	b.n	801219a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012198:	2300      	movs	r3, #0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d007      	beq.n	80121ae <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80121ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4a2d      	ldr	r2, [pc, #180]	@ (8012268 <HAL_TIM_PWM_Start_DMA+0x438>)
 80121b4:	4293      	cmp	r3, r2
 80121b6:	d02c      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121c0:	d027      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a2d      	ldr	r2, [pc, #180]	@ (801227c <HAL_TIM_PWM_Start_DMA+0x44c>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d022      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	4a2b      	ldr	r2, [pc, #172]	@ (8012280 <HAL_TIM_PWM_Start_DMA+0x450>)
 80121d2:	4293      	cmp	r3, r2
 80121d4:	d01d      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4a2a      	ldr	r2, [pc, #168]	@ (8012284 <HAL_TIM_PWM_Start_DMA+0x454>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d018      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	4a21      	ldr	r2, [pc, #132]	@ (801226c <HAL_TIM_PWM_Start_DMA+0x43c>)
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d013      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4a26      	ldr	r2, [pc, #152]	@ (8012288 <HAL_TIM_PWM_Start_DMA+0x458>)
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d00e      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4a1d      	ldr	r2, [pc, #116]	@ (8012270 <HAL_TIM_PWM_Start_DMA+0x440>)
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d009      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	4a22      	ldr	r2, [pc, #136]	@ (801228c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012204:	4293      	cmp	r3, r2
 8012206:	d004      	beq.n	8012212 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a20      	ldr	r2, [pc, #128]	@ (8012290 <HAL_TIM_PWM_Start_DMA+0x460>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d115      	bne.n	801223e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	689a      	ldr	r2, [r3, #8]
 8012218:	4b1e      	ldr	r3, [pc, #120]	@ (8012294 <HAL_TIM_PWM_Start_DMA+0x464>)
 801221a:	4013      	ands	r3, r2
 801221c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	2b06      	cmp	r3, #6
 8012222:	d015      	beq.n	8012250 <HAL_TIM_PWM_Start_DMA+0x420>
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801222a:	d011      	beq.n	8012250 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f042 0201 	orr.w	r2, r2, #1
 801223a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801223c:	e008      	b.n	8012250 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f042 0201 	orr.w	r2, r2, #1
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	e000      	b.n	8012252 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012250:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012252:	7dfb      	ldrb	r3, [r7, #23]
}
 8012254:	4618      	mov	r0, r3
 8012256:	3718      	adds	r7, #24
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	080129cb 	.word	0x080129cb
 8012260:	08012a73 	.word	0x08012a73
 8012264:	08012939 	.word	0x08012939
 8012268:	40010000 	.word	0x40010000
 801226c:	40010400 	.word	0x40010400
 8012270:	40014000 	.word	0x40014000
 8012274:	40014400 	.word	0x40014400
 8012278:	40014800 	.word	0x40014800
 801227c:	40000400 	.word	0x40000400
 8012280:	40000800 	.word	0x40000800
 8012284:	40000c00 	.word	0x40000c00
 8012288:	40001800 	.word	0x40001800
 801228c:	4000e000 	.word	0x4000e000
 8012290:	4000e400 	.word	0x4000e400
 8012294:	00010007 	.word	0x00010007

08012298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	f003 0302 	and.w	r3, r3, #2
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d020      	beq.n	80122fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	f003 0302 	and.w	r3, r3, #2
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d01b      	beq.n	80122fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	f06f 0202 	mvn.w	r2, #2
 80122cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2201      	movs	r2, #1
 80122d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	f003 0303 	and.w	r3, r3, #3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d003      	beq.n	80122ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 faf6 	bl	80128d4 <HAL_TIM_IC_CaptureCallback>
 80122e8:	e005      	b.n	80122f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 fae8 	bl	80128c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 faf9 	bl	80128e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2200      	movs	r2, #0
 80122fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f003 0304 	and.w	r3, r3, #4
 8012302:	2b00      	cmp	r3, #0
 8012304:	d020      	beq.n	8012348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f003 0304 	and.w	r3, r3, #4
 801230c:	2b00      	cmp	r3, #0
 801230e:	d01b      	beq.n	8012348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f06f 0204 	mvn.w	r2, #4
 8012318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2202      	movs	r2, #2
 801231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	699b      	ldr	r3, [r3, #24]
 8012326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801232a:	2b00      	cmp	r3, #0
 801232c:	d003      	beq.n	8012336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 fad0 	bl	80128d4 <HAL_TIM_IC_CaptureCallback>
 8012334:	e005      	b.n	8012342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 fac2 	bl	80128c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fad3 	bl	80128e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	f003 0308 	and.w	r3, r3, #8
 801234e:	2b00      	cmp	r3, #0
 8012350:	d020      	beq.n	8012394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f003 0308 	and.w	r3, r3, #8
 8012358:	2b00      	cmp	r3, #0
 801235a:	d01b      	beq.n	8012394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f06f 0208 	mvn.w	r2, #8
 8012364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2204      	movs	r2, #4
 801236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	69db      	ldr	r3, [r3, #28]
 8012372:	f003 0303 	and.w	r3, r3, #3
 8012376:	2b00      	cmp	r3, #0
 8012378:	d003      	beq.n	8012382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 faaa 	bl	80128d4 <HAL_TIM_IC_CaptureCallback>
 8012380:	e005      	b.n	801238e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f000 fa9c 	bl	80128c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 faad 	bl	80128e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	f003 0310 	and.w	r3, r3, #16
 801239a:	2b00      	cmp	r3, #0
 801239c:	d020      	beq.n	80123e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f003 0310 	and.w	r3, r3, #16
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d01b      	beq.n	80123e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	f06f 0210 	mvn.w	r2, #16
 80123b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2208      	movs	r2, #8
 80123b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	69db      	ldr	r3, [r3, #28]
 80123be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d003      	beq.n	80123ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 fa84 	bl	80128d4 <HAL_TIM_IC_CaptureCallback>
 80123cc:	e005      	b.n	80123da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 fa76 	bl	80128c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 fa87 	bl	80128e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00c      	beq.n	8012404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f003 0301 	and.w	r3, r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d007      	beq.n	8012404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f06f 0201 	mvn.w	r2, #1
 80123fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f7ee ff4a 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801240a:	2b00      	cmp	r3, #0
 801240c:	d104      	bne.n	8012418 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00c      	beq.n	8012432 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801241e:	2b00      	cmp	r3, #0
 8012420:	d007      	beq.n	8012432 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801242a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f001 f847 	bl	80134c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00c      	beq.n	8012456 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012442:	2b00      	cmp	r3, #0
 8012444:	d007      	beq.n	8012456 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f001 f83f 	bl	80134d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801245c:	2b00      	cmp	r3, #0
 801245e:	d00c      	beq.n	801247a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012466:	2b00      	cmp	r3, #0
 8012468:	d007      	beq.n	801247a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f000 fa4b 	bl	8012910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	f003 0320 	and.w	r3, r3, #32
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00c      	beq.n	801249e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f003 0320 	and.w	r3, r3, #32
 801248a:	2b00      	cmp	r3, #0
 801248c:	d007      	beq.n	801249e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f06f 0220 	mvn.w	r2, #32
 8012496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f001 f807 	bl	80134ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801249e:	bf00      	nop
 80124a0:	3710      	adds	r7, #16
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
	...

080124a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b086      	sub	sp, #24
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124b4:	2300      	movs	r3, #0
 80124b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d101      	bne.n	80124c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80124c2:	2302      	movs	r3, #2
 80124c4:	e0ff      	b.n	80126c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2201      	movs	r2, #1
 80124ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2b14      	cmp	r3, #20
 80124d2:	f200 80f0 	bhi.w	80126b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80124d6:	a201      	add	r2, pc, #4	@ (adr r2, 80124dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80124d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124dc:	08012531 	.word	0x08012531
 80124e0:	080126b7 	.word	0x080126b7
 80124e4:	080126b7 	.word	0x080126b7
 80124e8:	080126b7 	.word	0x080126b7
 80124ec:	08012571 	.word	0x08012571
 80124f0:	080126b7 	.word	0x080126b7
 80124f4:	080126b7 	.word	0x080126b7
 80124f8:	080126b7 	.word	0x080126b7
 80124fc:	080125b3 	.word	0x080125b3
 8012500:	080126b7 	.word	0x080126b7
 8012504:	080126b7 	.word	0x080126b7
 8012508:	080126b7 	.word	0x080126b7
 801250c:	080125f3 	.word	0x080125f3
 8012510:	080126b7 	.word	0x080126b7
 8012514:	080126b7 	.word	0x080126b7
 8012518:	080126b7 	.word	0x080126b7
 801251c:	08012635 	.word	0x08012635
 8012520:	080126b7 	.word	0x080126b7
 8012524:	080126b7 	.word	0x080126b7
 8012528:	080126b7 	.word	0x080126b7
 801252c:	08012675 	.word	0x08012675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	68b9      	ldr	r1, [r7, #8]
 8012536:	4618      	mov	r0, r3
 8012538:	f000 fb82 	bl	8012c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	699a      	ldr	r2, [r3, #24]
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f042 0208 	orr.w	r2, r2, #8
 801254a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	699a      	ldr	r2, [r3, #24]
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f022 0204 	bic.w	r2, r2, #4
 801255a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	6999      	ldr	r1, [r3, #24]
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	691a      	ldr	r2, [r3, #16]
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	430a      	orrs	r2, r1
 801256c:	619a      	str	r2, [r3, #24]
      break;
 801256e:	e0a5      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	68b9      	ldr	r1, [r7, #8]
 8012576:	4618      	mov	r0, r3
 8012578:	f000 fbf2 	bl	8012d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	699a      	ldr	r2, [r3, #24]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801258a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	699a      	ldr	r2, [r3, #24]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801259a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	6999      	ldr	r1, [r3, #24]
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	691b      	ldr	r3, [r3, #16]
 80125a6:	021a      	lsls	r2, r3, #8
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	430a      	orrs	r2, r1
 80125ae:	619a      	str	r2, [r3, #24]
      break;
 80125b0:	e084      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	68b9      	ldr	r1, [r7, #8]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f000 fc5b 	bl	8012e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	69da      	ldr	r2, [r3, #28]
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f042 0208 	orr.w	r2, r2, #8
 80125cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	69da      	ldr	r2, [r3, #28]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f022 0204 	bic.w	r2, r2, #4
 80125dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	69d9      	ldr	r1, [r3, #28]
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	691a      	ldr	r2, [r3, #16]
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	430a      	orrs	r2, r1
 80125ee:	61da      	str	r2, [r3, #28]
      break;
 80125f0:	e064      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	68b9      	ldr	r1, [r7, #8]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f000 fcc3 	bl	8012f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	69da      	ldr	r2, [r3, #28]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801260c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	69da      	ldr	r2, [r3, #28]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801261c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	69d9      	ldr	r1, [r3, #28]
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	691b      	ldr	r3, [r3, #16]
 8012628:	021a      	lsls	r2, r3, #8
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	430a      	orrs	r2, r1
 8012630:	61da      	str	r2, [r3, #28]
      break;
 8012632:	e043      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	68b9      	ldr	r1, [r7, #8]
 801263a:	4618      	mov	r0, r3
 801263c:	f000 fd0c 	bl	8013058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f042 0208 	orr.w	r2, r2, #8
 801264e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f022 0204 	bic.w	r2, r2, #4
 801265e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	691a      	ldr	r2, [r3, #16]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	430a      	orrs	r2, r1
 8012670:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012672:	e023      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	68b9      	ldr	r1, [r7, #8]
 801267a:	4618      	mov	r0, r3
 801267c:	f000 fd50 	bl	8013120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801268e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801269e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	691b      	ldr	r3, [r3, #16]
 80126aa:	021a      	lsls	r2, r3, #8
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	430a      	orrs	r2, r1
 80126b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80126b4:	e002      	b.n	80126bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80126b6:	2301      	movs	r3, #1
 80126b8:	75fb      	strb	r3, [r7, #23]
      break;
 80126ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80126c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3718      	adds	r7, #24
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop

080126d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126da:	2300      	movs	r3, #0
 80126dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d101      	bne.n	80126ec <HAL_TIM_ConfigClockSource+0x1c>
 80126e8:	2302      	movs	r3, #2
 80126ea:	e0dc      	b.n	80128a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2201      	movs	r2, #1
 80126f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2202      	movs	r2, #2
 80126f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	4b6a      	ldr	r3, [pc, #424]	@ (80128b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012708:	4013      	ands	r3, r2
 801270a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	68ba      	ldr	r2, [r7, #8]
 801271a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4a64      	ldr	r2, [pc, #400]	@ (80128b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8012722:	4293      	cmp	r3, r2
 8012724:	f000 80a9 	beq.w	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 8012728:	4a62      	ldr	r2, [pc, #392]	@ (80128b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801272a:	4293      	cmp	r3, r2
 801272c:	f200 80ae 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012730:	4a61      	ldr	r2, [pc, #388]	@ (80128b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012732:	4293      	cmp	r3, r2
 8012734:	f000 80a1 	beq.w	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 8012738:	4a5f      	ldr	r2, [pc, #380]	@ (80128b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801273a:	4293      	cmp	r3, r2
 801273c:	f200 80a6 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012740:	4a5e      	ldr	r2, [pc, #376]	@ (80128bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8012742:	4293      	cmp	r3, r2
 8012744:	f000 8099 	beq.w	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 8012748:	4a5c      	ldr	r2, [pc, #368]	@ (80128bc <HAL_TIM_ConfigClockSource+0x1ec>)
 801274a:	4293      	cmp	r3, r2
 801274c:	f200 809e 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012750:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8012754:	f000 8091 	beq.w	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 8012758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801275c:	f200 8096 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012760:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012764:	f000 8089 	beq.w	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 8012768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801276c:	f200 808e 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012774:	d03e      	beq.n	80127f4 <HAL_TIM_ConfigClockSource+0x124>
 8012776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801277a:	f200 8087 	bhi.w	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 801277e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012782:	f000 8086 	beq.w	8012892 <HAL_TIM_ConfigClockSource+0x1c2>
 8012786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801278a:	d87f      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 801278c:	2b70      	cmp	r3, #112	@ 0x70
 801278e:	d01a      	beq.n	80127c6 <HAL_TIM_ConfigClockSource+0xf6>
 8012790:	2b70      	cmp	r3, #112	@ 0x70
 8012792:	d87b      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 8012794:	2b60      	cmp	r3, #96	@ 0x60
 8012796:	d050      	beq.n	801283a <HAL_TIM_ConfigClockSource+0x16a>
 8012798:	2b60      	cmp	r3, #96	@ 0x60
 801279a:	d877      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 801279c:	2b50      	cmp	r3, #80	@ 0x50
 801279e:	d03c      	beq.n	801281a <HAL_TIM_ConfigClockSource+0x14a>
 80127a0:	2b50      	cmp	r3, #80	@ 0x50
 80127a2:	d873      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 80127a4:	2b40      	cmp	r3, #64	@ 0x40
 80127a6:	d058      	beq.n	801285a <HAL_TIM_ConfigClockSource+0x18a>
 80127a8:	2b40      	cmp	r3, #64	@ 0x40
 80127aa:	d86f      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 80127ac:	2b30      	cmp	r3, #48	@ 0x30
 80127ae:	d064      	beq.n	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 80127b0:	2b30      	cmp	r3, #48	@ 0x30
 80127b2:	d86b      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 80127b4:	2b20      	cmp	r3, #32
 80127b6:	d060      	beq.n	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 80127b8:	2b20      	cmp	r3, #32
 80127ba:	d867      	bhi.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d05c      	beq.n	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 80127c0:	2b10      	cmp	r3, #16
 80127c2:	d05a      	beq.n	801287a <HAL_TIM_ConfigClockSource+0x1aa>
 80127c4:	e062      	b.n	801288c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80127d6:	f000 fd87 	bl	80132e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	689b      	ldr	r3, [r3, #8]
 80127e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80127e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	68ba      	ldr	r2, [r7, #8]
 80127f0:	609a      	str	r2, [r3, #8]
      break;
 80127f2:	e04f      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012804:	f000 fd70 	bl	80132e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	689a      	ldr	r2, [r3, #8]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012816:	609a      	str	r2, [r3, #8]
      break;
 8012818:	e03c      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012826:	461a      	mov	r2, r3
 8012828:	f000 fce0 	bl	80131ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2150      	movs	r1, #80	@ 0x50
 8012832:	4618      	mov	r0, r3
 8012834:	f000 fd3a 	bl	80132ac <TIM_ITRx_SetConfig>
      break;
 8012838:	e02c      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012846:	461a      	mov	r2, r3
 8012848:	f000 fcff 	bl	801324a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2160      	movs	r1, #96	@ 0x60
 8012852:	4618      	mov	r0, r3
 8012854:	f000 fd2a 	bl	80132ac <TIM_ITRx_SetConfig>
      break;
 8012858:	e01c      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012866:	461a      	mov	r2, r3
 8012868:	f000 fcc0 	bl	80131ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2140      	movs	r1, #64	@ 0x40
 8012872:	4618      	mov	r0, r3
 8012874:	f000 fd1a 	bl	80132ac <TIM_ITRx_SetConfig>
      break;
 8012878:	e00c      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	4619      	mov	r1, r3
 8012884:	4610      	mov	r0, r2
 8012886:	f000 fd11 	bl	80132ac <TIM_ITRx_SetConfig>
      break;
 801288a:	e003      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801288c:	2301      	movs	r3, #1
 801288e:	73fb      	strb	r3, [r7, #15]
      break;
 8012890:	e000      	b.n	8012894 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2201      	movs	r2, #1
 8012898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2200      	movs	r2, #0
 80128a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80128a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	ffceff88 	.word	0xffceff88
 80128b4:	00100040 	.word	0x00100040
 80128b8:	00100030 	.word	0x00100030
 80128bc:	00100020 	.word	0x00100020

080128c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80128c8:	bf00      	nop
 80128ca:	370c      	adds	r7, #12
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr

080128d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80128dc:	bf00      	nop
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8012904:	bf00      	nop
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012918:	bf00      	nop
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012944:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	429a      	cmp	r2, r3
 801294e:	d107      	bne.n	8012960 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2201      	movs	r2, #1
 8012954:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2201      	movs	r2, #1
 801295a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801295e:	e02a      	b.n	80129b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	429a      	cmp	r2, r3
 8012968:	d107      	bne.n	801297a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2202      	movs	r2, #2
 801296e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2201      	movs	r2, #1
 8012974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012978:	e01d      	b.n	80129b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d107      	bne.n	8012994 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2204      	movs	r2, #4
 8012988:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	2201      	movs	r2, #1
 801298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012992:	e010      	b.n	80129b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	429a      	cmp	r2, r3
 801299c:	d107      	bne.n	80129ae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2208      	movs	r2, #8
 80129a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2201      	movs	r2, #1
 80129a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80129ac:	e003      	b.n	80129b6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2201      	movs	r2, #1
 80129b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f7ff ffb4 	bl	8012924 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	771a      	strb	r2, [r3, #28]
}
 80129c2:	bf00      	nop
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b084      	sub	sp, #16
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d10b      	bne.n	80129fa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2201      	movs	r2, #1
 80129e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d136      	bne.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2201      	movs	r2, #1
 80129f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80129f8:	e031      	b.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d10b      	bne.n	8012a1c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	2202      	movs	r2, #2
 8012a08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	69db      	ldr	r3, [r3, #28]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d125      	bne.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2201      	movs	r2, #1
 8012a16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a1a:	e020      	b.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d10b      	bne.n	8012a3e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2204      	movs	r2, #4
 8012a2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	69db      	ldr	r3, [r3, #28]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d114      	bne.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	2201      	movs	r2, #1
 8012a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a3c:	e00f      	b.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a42:	687a      	ldr	r2, [r7, #4]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d10a      	bne.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2208      	movs	r2, #8
 8012a4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	69db      	ldr	r3, [r3, #28]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d103      	bne.n	8012a5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2201      	movs	r2, #1
 8012a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f7ff ff42 	bl	80128e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2200      	movs	r2, #0
 8012a68:	771a      	strb	r2, [r3, #28]
}
 8012a6a:	bf00      	nop
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b084      	sub	sp, #16
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d103      	bne.n	8012a92 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	771a      	strb	r2, [r3, #28]
 8012a90:	e019      	b.n	8012ac6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d103      	bne.n	8012aa4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	2202      	movs	r2, #2
 8012aa0:	771a      	strb	r2, [r3, #28]
 8012aa2:	e010      	b.n	8012ac6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d103      	bne.n	8012ab6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2204      	movs	r2, #4
 8012ab2:	771a      	strb	r2, [r3, #28]
 8012ab4:	e007      	b.n	8012ac6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012aba:	687a      	ldr	r2, [r7, #4]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d102      	bne.n	8012ac6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	2208      	movs	r2, #8
 8012ac4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7ff ff18 	bl	80128fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2200      	movs	r2, #0
 8012ad0:	771a      	strb	r2, [r3, #28]
}
 8012ad2:	bf00      	nop
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
	...

08012adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b085      	sub	sp, #20
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4a4a      	ldr	r2, [pc, #296]	@ (8012c18 <TIM_Base_SetConfig+0x13c>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d013      	beq.n	8012b1c <TIM_Base_SetConfig+0x40>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012afa:	d00f      	beq.n	8012b1c <TIM_Base_SetConfig+0x40>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	4a47      	ldr	r2, [pc, #284]	@ (8012c1c <TIM_Base_SetConfig+0x140>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d00b      	beq.n	8012b1c <TIM_Base_SetConfig+0x40>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4a46      	ldr	r2, [pc, #280]	@ (8012c20 <TIM_Base_SetConfig+0x144>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d007      	beq.n	8012b1c <TIM_Base_SetConfig+0x40>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4a45      	ldr	r2, [pc, #276]	@ (8012c24 <TIM_Base_SetConfig+0x148>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d003      	beq.n	8012b1c <TIM_Base_SetConfig+0x40>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	4a44      	ldr	r2, [pc, #272]	@ (8012c28 <TIM_Base_SetConfig+0x14c>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d108      	bne.n	8012b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	68fa      	ldr	r2, [r7, #12]
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4a39      	ldr	r2, [pc, #228]	@ (8012c18 <TIM_Base_SetConfig+0x13c>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d027      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b3c:	d023      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4a36      	ldr	r2, [pc, #216]	@ (8012c1c <TIM_Base_SetConfig+0x140>)
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d01f      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	4a35      	ldr	r2, [pc, #212]	@ (8012c20 <TIM_Base_SetConfig+0x144>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d01b      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	4a34      	ldr	r2, [pc, #208]	@ (8012c24 <TIM_Base_SetConfig+0x148>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d017      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4a33      	ldr	r2, [pc, #204]	@ (8012c28 <TIM_Base_SetConfig+0x14c>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d013      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	4a32      	ldr	r2, [pc, #200]	@ (8012c2c <TIM_Base_SetConfig+0x150>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d00f      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4a31      	ldr	r2, [pc, #196]	@ (8012c30 <TIM_Base_SetConfig+0x154>)
 8012b6a:	4293      	cmp	r3, r2
 8012b6c:	d00b      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4a30      	ldr	r2, [pc, #192]	@ (8012c34 <TIM_Base_SetConfig+0x158>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d007      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	4a2f      	ldr	r2, [pc, #188]	@ (8012c38 <TIM_Base_SetConfig+0x15c>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d003      	beq.n	8012b86 <TIM_Base_SetConfig+0xaa>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	4a2e      	ldr	r2, [pc, #184]	@ (8012c3c <TIM_Base_SetConfig+0x160>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d108      	bne.n	8012b98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	68fa      	ldr	r2, [r7, #12]
 8012b94:	4313      	orrs	r3, r2
 8012b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	695b      	ldr	r3, [r3, #20]
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	689a      	ldr	r2, [r3, #8]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	4a16      	ldr	r2, [pc, #88]	@ (8012c18 <TIM_Base_SetConfig+0x13c>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d00f      	beq.n	8012be4 <TIM_Base_SetConfig+0x108>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	4a18      	ldr	r2, [pc, #96]	@ (8012c28 <TIM_Base_SetConfig+0x14c>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d00b      	beq.n	8012be4 <TIM_Base_SetConfig+0x108>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4a17      	ldr	r2, [pc, #92]	@ (8012c2c <TIM_Base_SetConfig+0x150>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d007      	beq.n	8012be4 <TIM_Base_SetConfig+0x108>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	4a16      	ldr	r2, [pc, #88]	@ (8012c30 <TIM_Base_SetConfig+0x154>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d003      	beq.n	8012be4 <TIM_Base_SetConfig+0x108>
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4a15      	ldr	r2, [pc, #84]	@ (8012c34 <TIM_Base_SetConfig+0x158>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d103      	bne.n	8012bec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	691a      	ldr	r2, [r3, #16]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2201      	movs	r2, #1
 8012bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	691b      	ldr	r3, [r3, #16]
 8012bf6:	f003 0301 	and.w	r3, r3, #1
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d105      	bne.n	8012c0a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	691b      	ldr	r3, [r3, #16]
 8012c02:	f023 0201 	bic.w	r2, r3, #1
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	611a      	str	r2, [r3, #16]
  }
}
 8012c0a:	bf00      	nop
 8012c0c:	3714      	adds	r7, #20
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	40010000 	.word	0x40010000
 8012c1c:	40000400 	.word	0x40000400
 8012c20:	40000800 	.word	0x40000800
 8012c24:	40000c00 	.word	0x40000c00
 8012c28:	40010400 	.word	0x40010400
 8012c2c:	40014000 	.word	0x40014000
 8012c30:	40014400 	.word	0x40014400
 8012c34:	40014800 	.word	0x40014800
 8012c38:	4000e000 	.word	0x4000e000
 8012c3c:	4000e400 	.word	0x4000e400

08012c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b087      	sub	sp, #28
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6a1b      	ldr	r3, [r3, #32]
 8012c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6a1b      	ldr	r3, [r3, #32]
 8012c54:	f023 0201 	bic.w	r2, r3, #1
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	4b37      	ldr	r3, [pc, #220]	@ (8012d48 <TIM_OC1_SetConfig+0x108>)
 8012c6c:	4013      	ands	r3, r2
 8012c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	f023 0303 	bic.w	r3, r3, #3
 8012c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012c78:	683b      	ldr	r3, [r7, #0]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	68fa      	ldr	r2, [r7, #12]
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	f023 0302 	bic.w	r3, r3, #2
 8012c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	697a      	ldr	r2, [r7, #20]
 8012c90:	4313      	orrs	r3, r2
 8012c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	4a2d      	ldr	r2, [pc, #180]	@ (8012d4c <TIM_OC1_SetConfig+0x10c>)
 8012c98:	4293      	cmp	r3, r2
 8012c9a:	d00f      	beq.n	8012cbc <TIM_OC1_SetConfig+0x7c>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8012d50 <TIM_OC1_SetConfig+0x110>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d00b      	beq.n	8012cbc <TIM_OC1_SetConfig+0x7c>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8012d54 <TIM_OC1_SetConfig+0x114>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d007      	beq.n	8012cbc <TIM_OC1_SetConfig+0x7c>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	4a2a      	ldr	r2, [pc, #168]	@ (8012d58 <TIM_OC1_SetConfig+0x118>)
 8012cb0:	4293      	cmp	r3, r2
 8012cb2:	d003      	beq.n	8012cbc <TIM_OC1_SetConfig+0x7c>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	4a29      	ldr	r2, [pc, #164]	@ (8012d5c <TIM_OC1_SetConfig+0x11c>)
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d10c      	bne.n	8012cd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	f023 0308 	bic.w	r3, r3, #8
 8012cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	697a      	ldr	r2, [r7, #20]
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	f023 0304 	bic.w	r3, r3, #4
 8012cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8012d4c <TIM_OC1_SetConfig+0x10c>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d00f      	beq.n	8012cfe <TIM_OC1_SetConfig+0xbe>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8012d50 <TIM_OC1_SetConfig+0x110>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d00b      	beq.n	8012cfe <TIM_OC1_SetConfig+0xbe>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8012d54 <TIM_OC1_SetConfig+0x114>)
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d007      	beq.n	8012cfe <TIM_OC1_SetConfig+0xbe>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	4a19      	ldr	r2, [pc, #100]	@ (8012d58 <TIM_OC1_SetConfig+0x118>)
 8012cf2:	4293      	cmp	r3, r2
 8012cf4:	d003      	beq.n	8012cfe <TIM_OC1_SetConfig+0xbe>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	4a18      	ldr	r2, [pc, #96]	@ (8012d5c <TIM_OC1_SetConfig+0x11c>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d111      	bne.n	8012d22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	695b      	ldr	r3, [r3, #20]
 8012d12:	693a      	ldr	r2, [r7, #16]
 8012d14:	4313      	orrs	r3, r2
 8012d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	699b      	ldr	r3, [r3, #24]
 8012d1c:	693a      	ldr	r2, [r7, #16]
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	693a      	ldr	r2, [r7, #16]
 8012d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	68fa      	ldr	r2, [r7, #12]
 8012d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	697a      	ldr	r2, [r7, #20]
 8012d3a:	621a      	str	r2, [r3, #32]
}
 8012d3c:	bf00      	nop
 8012d3e:	371c      	adds	r7, #28
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr
 8012d48:	fffeff8f 	.word	0xfffeff8f
 8012d4c:	40010000 	.word	0x40010000
 8012d50:	40010400 	.word	0x40010400
 8012d54:	40014000 	.word	0x40014000
 8012d58:	40014400 	.word	0x40014400
 8012d5c:	40014800 	.word	0x40014800

08012d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b087      	sub	sp, #28
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a1b      	ldr	r3, [r3, #32]
 8012d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6a1b      	ldr	r3, [r3, #32]
 8012d74:	f023 0210 	bic.w	r2, r3, #16
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012d88:	68fa      	ldr	r2, [r7, #12]
 8012d8a:	4b34      	ldr	r3, [pc, #208]	@ (8012e5c <TIM_OC2_SetConfig+0xfc>)
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	021b      	lsls	r3, r3, #8
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	4313      	orrs	r3, r2
 8012da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	f023 0320 	bic.w	r3, r3, #32
 8012daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	011b      	lsls	r3, r3, #4
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	4313      	orrs	r3, r2
 8012db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4a29      	ldr	r2, [pc, #164]	@ (8012e60 <TIM_OC2_SetConfig+0x100>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d003      	beq.n	8012dc8 <TIM_OC2_SetConfig+0x68>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	4a28      	ldr	r2, [pc, #160]	@ (8012e64 <TIM_OC2_SetConfig+0x104>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d10d      	bne.n	8012de4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012de2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	4a1e      	ldr	r2, [pc, #120]	@ (8012e60 <TIM_OC2_SetConfig+0x100>)
 8012de8:	4293      	cmp	r3, r2
 8012dea:	d00f      	beq.n	8012e0c <TIM_OC2_SetConfig+0xac>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	4a1d      	ldr	r2, [pc, #116]	@ (8012e64 <TIM_OC2_SetConfig+0x104>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d00b      	beq.n	8012e0c <TIM_OC2_SetConfig+0xac>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	4a1c      	ldr	r2, [pc, #112]	@ (8012e68 <TIM_OC2_SetConfig+0x108>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d007      	beq.n	8012e0c <TIM_OC2_SetConfig+0xac>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8012e6c <TIM_OC2_SetConfig+0x10c>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d003      	beq.n	8012e0c <TIM_OC2_SetConfig+0xac>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	4a1a      	ldr	r2, [pc, #104]	@ (8012e70 <TIM_OC2_SetConfig+0x110>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d113      	bne.n	8012e34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	695b      	ldr	r3, [r3, #20]
 8012e20:	009b      	lsls	r3, r3, #2
 8012e22:	693a      	ldr	r2, [r7, #16]
 8012e24:	4313      	orrs	r3, r2
 8012e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	699b      	ldr	r3, [r3, #24]
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	693a      	ldr	r2, [r7, #16]
 8012e30:	4313      	orrs	r3, r2
 8012e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	693a      	ldr	r2, [r7, #16]
 8012e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	685a      	ldr	r2, [r3, #4]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	697a      	ldr	r2, [r7, #20]
 8012e4c:	621a      	str	r2, [r3, #32]
}
 8012e4e:	bf00      	nop
 8012e50:	371c      	adds	r7, #28
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	feff8fff 	.word	0xfeff8fff
 8012e60:	40010000 	.word	0x40010000
 8012e64:	40010400 	.word	0x40010400
 8012e68:	40014000 	.word	0x40014000
 8012e6c:	40014400 	.word	0x40014400
 8012e70:	40014800 	.word	0x40014800

08012e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b087      	sub	sp, #28
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6a1b      	ldr	r3, [r3, #32]
 8012e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6a1b      	ldr	r3, [r3, #32]
 8012e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	685b      	ldr	r3, [r3, #4]
 8012e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	69db      	ldr	r3, [r3, #28]
 8012e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	4b33      	ldr	r3, [pc, #204]	@ (8012f6c <TIM_OC3_SetConfig+0xf8>)
 8012ea0:	4013      	ands	r3, r2
 8012ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f023 0303 	bic.w	r3, r3, #3
 8012eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	68fa      	ldr	r2, [r7, #12]
 8012eb2:	4313      	orrs	r3, r2
 8012eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	021b      	lsls	r3, r3, #8
 8012ec4:	697a      	ldr	r2, [r7, #20]
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4a28      	ldr	r2, [pc, #160]	@ (8012f70 <TIM_OC3_SetConfig+0xfc>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d003      	beq.n	8012eda <TIM_OC3_SetConfig+0x66>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4a27      	ldr	r2, [pc, #156]	@ (8012f74 <TIM_OC3_SetConfig+0x100>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d10d      	bne.n	8012ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	021b      	lsls	r3, r3, #8
 8012ee8:	697a      	ldr	r2, [r7, #20]
 8012eea:	4313      	orrs	r3, r2
 8012eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8012f70 <TIM_OC3_SetConfig+0xfc>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d00f      	beq.n	8012f1e <TIM_OC3_SetConfig+0xaa>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4a1c      	ldr	r2, [pc, #112]	@ (8012f74 <TIM_OC3_SetConfig+0x100>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d00b      	beq.n	8012f1e <TIM_OC3_SetConfig+0xaa>
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4a1b      	ldr	r2, [pc, #108]	@ (8012f78 <TIM_OC3_SetConfig+0x104>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d007      	beq.n	8012f1e <TIM_OC3_SetConfig+0xaa>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4a1a      	ldr	r2, [pc, #104]	@ (8012f7c <TIM_OC3_SetConfig+0x108>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d003      	beq.n	8012f1e <TIM_OC3_SetConfig+0xaa>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4a19      	ldr	r2, [pc, #100]	@ (8012f80 <TIM_OC3_SetConfig+0x10c>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d113      	bne.n	8012f46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	695b      	ldr	r3, [r3, #20]
 8012f32:	011b      	lsls	r3, r3, #4
 8012f34:	693a      	ldr	r2, [r7, #16]
 8012f36:	4313      	orrs	r3, r2
 8012f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	699b      	ldr	r3, [r3, #24]
 8012f3e:	011b      	lsls	r3, r3, #4
 8012f40:	693a      	ldr	r2, [r7, #16]
 8012f42:	4313      	orrs	r3, r2
 8012f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	693a      	ldr	r2, [r7, #16]
 8012f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	685a      	ldr	r2, [r3, #4]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	697a      	ldr	r2, [r7, #20]
 8012f5e:	621a      	str	r2, [r3, #32]
}
 8012f60:	bf00      	nop
 8012f62:	371c      	adds	r7, #28
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr
 8012f6c:	fffeff8f 	.word	0xfffeff8f
 8012f70:	40010000 	.word	0x40010000
 8012f74:	40010400 	.word	0x40010400
 8012f78:	40014000 	.word	0x40014000
 8012f7c:	40014400 	.word	0x40014400
 8012f80:	40014800 	.word	0x40014800

08012f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b087      	sub	sp, #28
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6a1b      	ldr	r3, [r3, #32]
 8012f92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a1b      	ldr	r3, [r3, #32]
 8012f98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	69db      	ldr	r3, [r3, #28]
 8012faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	4b24      	ldr	r3, [pc, #144]	@ (8013040 <TIM_OC4_SetConfig+0xbc>)
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	021b      	lsls	r3, r3, #8
 8012fc2:	68fa      	ldr	r2, [r7, #12]
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	689b      	ldr	r3, [r3, #8]
 8012fd4:	031b      	lsls	r3, r3, #12
 8012fd6:	693a      	ldr	r2, [r7, #16]
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	4a19      	ldr	r2, [pc, #100]	@ (8013044 <TIM_OC4_SetConfig+0xc0>)
 8012fe0:	4293      	cmp	r3, r2
 8012fe2:	d00f      	beq.n	8013004 <TIM_OC4_SetConfig+0x80>
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4a18      	ldr	r2, [pc, #96]	@ (8013048 <TIM_OC4_SetConfig+0xc4>)
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d00b      	beq.n	8013004 <TIM_OC4_SetConfig+0x80>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	4a17      	ldr	r2, [pc, #92]	@ (801304c <TIM_OC4_SetConfig+0xc8>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d007      	beq.n	8013004 <TIM_OC4_SetConfig+0x80>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4a16      	ldr	r2, [pc, #88]	@ (8013050 <TIM_OC4_SetConfig+0xcc>)
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d003      	beq.n	8013004 <TIM_OC4_SetConfig+0x80>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4a15      	ldr	r2, [pc, #84]	@ (8013054 <TIM_OC4_SetConfig+0xd0>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d109      	bne.n	8013018 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801300a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	695b      	ldr	r3, [r3, #20]
 8013010:	019b      	lsls	r3, r3, #6
 8013012:	697a      	ldr	r2, [r7, #20]
 8013014:	4313      	orrs	r3, r2
 8013016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	697a      	ldr	r2, [r7, #20]
 801301c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013024:	683b      	ldr	r3, [r7, #0]
 8013026:	685a      	ldr	r2, [r3, #4]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	693a      	ldr	r2, [r7, #16]
 8013030:	621a      	str	r2, [r3, #32]
}
 8013032:	bf00      	nop
 8013034:	371c      	adds	r7, #28
 8013036:	46bd      	mov	sp, r7
 8013038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop
 8013040:	feff8fff 	.word	0xfeff8fff
 8013044:	40010000 	.word	0x40010000
 8013048:	40010400 	.word	0x40010400
 801304c:	40014000 	.word	0x40014000
 8013050:	40014400 	.word	0x40014400
 8013054:	40014800 	.word	0x40014800

08013058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013058:	b480      	push	{r7}
 801305a:	b087      	sub	sp, #28
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6a1b      	ldr	r3, [r3, #32]
 8013066:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a1b      	ldr	r3, [r3, #32]
 801306c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013080:	68fa      	ldr	r2, [r7, #12]
 8013082:	4b21      	ldr	r3, [pc, #132]	@ (8013108 <TIM_OC5_SetConfig+0xb0>)
 8013084:	4013      	ands	r3, r2
 8013086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68fa      	ldr	r2, [r7, #12]
 801308e:	4313      	orrs	r3, r2
 8013090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	041b      	lsls	r3, r3, #16
 80130a0:	693a      	ldr	r2, [r7, #16]
 80130a2:	4313      	orrs	r3, r2
 80130a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	4a18      	ldr	r2, [pc, #96]	@ (801310c <TIM_OC5_SetConfig+0xb4>)
 80130aa:	4293      	cmp	r3, r2
 80130ac:	d00f      	beq.n	80130ce <TIM_OC5_SetConfig+0x76>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	4a17      	ldr	r2, [pc, #92]	@ (8013110 <TIM_OC5_SetConfig+0xb8>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d00b      	beq.n	80130ce <TIM_OC5_SetConfig+0x76>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	4a16      	ldr	r2, [pc, #88]	@ (8013114 <TIM_OC5_SetConfig+0xbc>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d007      	beq.n	80130ce <TIM_OC5_SetConfig+0x76>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	4a15      	ldr	r2, [pc, #84]	@ (8013118 <TIM_OC5_SetConfig+0xc0>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d003      	beq.n	80130ce <TIM_OC5_SetConfig+0x76>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4a14      	ldr	r2, [pc, #80]	@ (801311c <TIM_OC5_SetConfig+0xc4>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d109      	bne.n	80130e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80130d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	695b      	ldr	r3, [r3, #20]
 80130da:	021b      	lsls	r3, r3, #8
 80130dc:	697a      	ldr	r2, [r7, #20]
 80130de:	4313      	orrs	r3, r2
 80130e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	685a      	ldr	r2, [r3, #4]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	693a      	ldr	r2, [r7, #16]
 80130fa:	621a      	str	r2, [r3, #32]
}
 80130fc:	bf00      	nop
 80130fe:	371c      	adds	r7, #28
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr
 8013108:	fffeff8f 	.word	0xfffeff8f
 801310c:	40010000 	.word	0x40010000
 8013110:	40010400 	.word	0x40010400
 8013114:	40014000 	.word	0x40014000
 8013118:	40014400 	.word	0x40014400
 801311c:	40014800 	.word	0x40014800

08013120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013120:	b480      	push	{r7}
 8013122:	b087      	sub	sp, #28
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6a1b      	ldr	r3, [r3, #32]
 801312e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6a1b      	ldr	r3, [r3, #32]
 8013134:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	4b22      	ldr	r3, [pc, #136]	@ (80131d4 <TIM_OC6_SetConfig+0xb4>)
 801314c:	4013      	ands	r3, r2
 801314e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	021b      	lsls	r3, r3, #8
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	4313      	orrs	r3, r2
 801315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	689b      	ldr	r3, [r3, #8]
 8013168:	051b      	lsls	r3, r3, #20
 801316a:	693a      	ldr	r2, [r7, #16]
 801316c:	4313      	orrs	r3, r2
 801316e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	4a19      	ldr	r2, [pc, #100]	@ (80131d8 <TIM_OC6_SetConfig+0xb8>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d00f      	beq.n	8013198 <TIM_OC6_SetConfig+0x78>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	4a18      	ldr	r2, [pc, #96]	@ (80131dc <TIM_OC6_SetConfig+0xbc>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d00b      	beq.n	8013198 <TIM_OC6_SetConfig+0x78>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	4a17      	ldr	r2, [pc, #92]	@ (80131e0 <TIM_OC6_SetConfig+0xc0>)
 8013184:	4293      	cmp	r3, r2
 8013186:	d007      	beq.n	8013198 <TIM_OC6_SetConfig+0x78>
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	4a16      	ldr	r2, [pc, #88]	@ (80131e4 <TIM_OC6_SetConfig+0xc4>)
 801318c:	4293      	cmp	r3, r2
 801318e:	d003      	beq.n	8013198 <TIM_OC6_SetConfig+0x78>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a15      	ldr	r2, [pc, #84]	@ (80131e8 <TIM_OC6_SetConfig+0xc8>)
 8013194:	4293      	cmp	r3, r2
 8013196:	d109      	bne.n	80131ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801319e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	695b      	ldr	r3, [r3, #20]
 80131a4:	029b      	lsls	r3, r3, #10
 80131a6:	697a      	ldr	r2, [r7, #20]
 80131a8:	4313      	orrs	r3, r2
 80131aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	697a      	ldr	r2, [r7, #20]
 80131b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	685a      	ldr	r2, [r3, #4]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	693a      	ldr	r2, [r7, #16]
 80131c4:	621a      	str	r2, [r3, #32]
}
 80131c6:	bf00      	nop
 80131c8:	371c      	adds	r7, #28
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	feff8fff 	.word	0xfeff8fff
 80131d8:	40010000 	.word	0x40010000
 80131dc:	40010400 	.word	0x40010400
 80131e0:	40014000 	.word	0x40014000
 80131e4:	40014400 	.word	0x40014400
 80131e8:	40014800 	.word	0x40014800

080131ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b087      	sub	sp, #28
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6a1b      	ldr	r3, [r3, #32]
 80131fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6a1b      	ldr	r3, [r3, #32]
 8013202:	f023 0201 	bic.w	r2, r3, #1
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	699b      	ldr	r3, [r3, #24]
 801320e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	4313      	orrs	r3, r2
 8013220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	f023 030a 	bic.w	r3, r3, #10
 8013228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801322a:	697a      	ldr	r2, [r7, #20]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	4313      	orrs	r3, r2
 8013230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	693a      	ldr	r2, [r7, #16]
 8013236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	621a      	str	r2, [r3, #32]
}
 801323e:	bf00      	nop
 8013240:	371c      	adds	r7, #28
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801324a:	b480      	push	{r7}
 801324c:	b087      	sub	sp, #28
 801324e:	af00      	add	r7, sp, #0
 8013250:	60f8      	str	r0, [r7, #12]
 8013252:	60b9      	str	r1, [r7, #8]
 8013254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	6a1b      	ldr	r3, [r3, #32]
 8013260:	f023 0210 	bic.w	r2, r3, #16
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	699b      	ldr	r3, [r3, #24]
 801326c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	031b      	lsls	r3, r3, #12
 801327a:	693a      	ldr	r2, [r7, #16]
 801327c:	4313      	orrs	r3, r2
 801327e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	011b      	lsls	r3, r3, #4
 801328c:	697a      	ldr	r2, [r7, #20]
 801328e:	4313      	orrs	r3, r2
 8013290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	693a      	ldr	r2, [r7, #16]
 8013296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	621a      	str	r2, [r3, #32]
}
 801329e:	bf00      	nop
 80132a0:	371c      	adds	r7, #28
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
	...

080132ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80132ac:	b480      	push	{r7}
 80132ae:	b085      	sub	sp, #20
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
 80132b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	4b09      	ldr	r3, [pc, #36]	@ (80132e4 <TIM_ITRx_SetConfig+0x38>)
 80132c0:	4013      	ands	r3, r2
 80132c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	4313      	orrs	r3, r2
 80132ca:	f043 0307 	orr.w	r3, r3, #7
 80132ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	68fa      	ldr	r2, [r7, #12]
 80132d4:	609a      	str	r2, [r3, #8]
}
 80132d6:	bf00      	nop
 80132d8:	3714      	adds	r7, #20
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop
 80132e4:	ffcfff8f 	.word	0xffcfff8f

080132e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b087      	sub	sp, #28
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	021a      	lsls	r2, r3, #8
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	431a      	orrs	r2, r3
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	4313      	orrs	r3, r2
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	4313      	orrs	r3, r2
 8013314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	697a      	ldr	r2, [r7, #20]
 801331a:	609a      	str	r2, [r3, #8]
}
 801331c:	bf00      	nop
 801331e:	371c      	adds	r7, #28
 8013320:	46bd      	mov	sp, r7
 8013322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013326:	4770      	bx	lr

08013328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013328:	b480      	push	{r7}
 801332a:	b087      	sub	sp, #28
 801332c:	af00      	add	r7, sp, #0
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	f003 031f 	and.w	r3, r3, #31
 801333a:	2201      	movs	r2, #1
 801333c:	fa02 f303 	lsl.w	r3, r2, r3
 8013340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	6a1a      	ldr	r2, [r3, #32]
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	43db      	mvns	r3, r3
 801334a:	401a      	ands	r2, r3
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6a1a      	ldr	r2, [r3, #32]
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	f003 031f 	and.w	r3, r3, #31
 801335a:	6879      	ldr	r1, [r7, #4]
 801335c:	fa01 f303 	lsl.w	r3, r1, r3
 8013360:	431a      	orrs	r2, r3
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	621a      	str	r2, [r3, #32]
}
 8013366:	bf00      	nop
 8013368:	371c      	adds	r7, #28
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
	...

08013374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013374:	b480      	push	{r7}
 8013376:	b085      	sub	sp, #20
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013384:	2b01      	cmp	r3, #1
 8013386:	d101      	bne.n	801338c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013388:	2302      	movs	r3, #2
 801338a:	e077      	b.n	801347c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2201      	movs	r2, #1
 8013390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2202      	movs	r2, #2
 8013398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	689b      	ldr	r3, [r3, #8]
 80133aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	4a35      	ldr	r2, [pc, #212]	@ (8013488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80133b2:	4293      	cmp	r3, r2
 80133b4:	d004      	beq.n	80133c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	4a34      	ldr	r2, [pc, #208]	@ (801348c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80133bc:	4293      	cmp	r3, r2
 80133be:	d108      	bne.n	80133d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80133c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	4313      	orrs	r3, r2
 80133d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	68fa      	ldr	r2, [r7, #12]
 80133e0:	4313      	orrs	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4a25      	ldr	r2, [pc, #148]	@ (8013488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80133f2:	4293      	cmp	r3, r2
 80133f4:	d02c      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133fe:	d027      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a22      	ldr	r2, [pc, #136]	@ (8013490 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d022      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4a21      	ldr	r2, [pc, #132]	@ (8013494 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013410:	4293      	cmp	r3, r2
 8013412:	d01d      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4a1f      	ldr	r2, [pc, #124]	@ (8013498 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d018      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4a1a      	ldr	r2, [pc, #104]	@ (801348c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d013      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4a1b      	ldr	r2, [pc, #108]	@ (801349c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d00e      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a1a      	ldr	r2, [pc, #104]	@ (80134a0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013438:	4293      	cmp	r3, r2
 801343a:	d009      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a18      	ldr	r2, [pc, #96]	@ (80134a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d004      	beq.n	8013450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4a17      	ldr	r2, [pc, #92]	@ (80134a8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801344c:	4293      	cmp	r3, r2
 801344e:	d10c      	bne.n	801346a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	689b      	ldr	r3, [r3, #8]
 801345c:	68ba      	ldr	r2, [r7, #8]
 801345e:	4313      	orrs	r3, r2
 8013460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	68ba      	ldr	r2, [r7, #8]
 8013468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	2201      	movs	r2, #1
 801346e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2200      	movs	r2, #0
 8013476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801347a:	2300      	movs	r3, #0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3714      	adds	r7, #20
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr
 8013488:	40010000 	.word	0x40010000
 801348c:	40010400 	.word	0x40010400
 8013490:	40000400 	.word	0x40000400
 8013494:	40000800 	.word	0x40000800
 8013498:	40000c00 	.word	0x40000c00
 801349c:	40001800 	.word	0x40001800
 80134a0:	40014000 	.word	0x40014000
 80134a4:	4000e000 	.word	0x4000e000
 80134a8:	4000e400 	.word	0x4000e400

080134ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b083      	sub	sp, #12
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80134b4:	bf00      	nop
 80134b6:	370c      	adds	r7, #12
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr

080134c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80134c8:	bf00      	nop
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80134dc:	bf00      	nop
 80134de:	370c      	adds	r7, #12
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr

080134e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b082      	sub	sp, #8
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d101      	bne.n	80134fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80134f6:	2301      	movs	r3, #1
 80134f8:	e042      	b.n	8013580 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7ef fac7 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2224      	movs	r2, #36	@ 0x24
 8013516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	f022 0201 	bic.w	r2, r2, #1
 8013528:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801352e:	2b00      	cmp	r3, #0
 8013530:	d002      	beq.n	8013538 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 fe94 	bl	8014260 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 f825 	bl	8013588 <UART_SetConfig>
 801353e:	4603      	mov	r3, r0
 8013540:	2b01      	cmp	r3, #1
 8013542:	d101      	bne.n	8013548 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013544:	2301      	movs	r3, #1
 8013546:	e01b      	b.n	8013580 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	685a      	ldr	r2, [r3, #4]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	689a      	ldr	r2, [r3, #8]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f042 0201 	orr.w	r2, r2, #1
 8013576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 ff13 	bl	80143a4 <UART_CheckIdleState>
 801357e:	4603      	mov	r3, r0
}
 8013580:	4618      	mov	r0, r3
 8013582:	3708      	adds	r7, #8
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801358c:	b092      	sub	sp, #72	@ 0x48
 801358e:	af00      	add	r7, sp, #0
 8013590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	689a      	ldr	r2, [r3, #8]
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	691b      	ldr	r3, [r3, #16]
 80135a0:	431a      	orrs	r2, r3
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	695b      	ldr	r3, [r3, #20]
 80135a6:	431a      	orrs	r2, r3
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	69db      	ldr	r3, [r3, #28]
 80135ac:	4313      	orrs	r3, r2
 80135ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	4bbe      	ldr	r3, [pc, #760]	@ (80138b0 <UART_SetConfig+0x328>)
 80135b8:	4013      	ands	r3, r2
 80135ba:	697a      	ldr	r2, [r7, #20]
 80135bc:	6812      	ldr	r2, [r2, #0]
 80135be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80135c0:	430b      	orrs	r3, r1
 80135c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	68da      	ldr	r2, [r3, #12]
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	430a      	orrs	r2, r1
 80135d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	699b      	ldr	r3, [r3, #24]
 80135de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4ab3      	ldr	r2, [pc, #716]	@ (80138b4 <UART_SetConfig+0x32c>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d004      	beq.n	80135f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	6a1b      	ldr	r3, [r3, #32]
 80135ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80135f0:	4313      	orrs	r3, r2
 80135f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	689a      	ldr	r2, [r3, #8]
 80135fa:	4baf      	ldr	r3, [pc, #700]	@ (80138b8 <UART_SetConfig+0x330>)
 80135fc:	4013      	ands	r3, r2
 80135fe:	697a      	ldr	r2, [r7, #20]
 8013600:	6812      	ldr	r2, [r2, #0]
 8013602:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013604:	430b      	orrs	r3, r1
 8013606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360e:	f023 010f 	bic.w	r1, r3, #15
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	430a      	orrs	r2, r1
 801361c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	4aa6      	ldr	r2, [pc, #664]	@ (80138bc <UART_SetConfig+0x334>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d177      	bne.n	8013718 <UART_SetConfig+0x190>
 8013628:	4ba5      	ldr	r3, [pc, #660]	@ (80138c0 <UART_SetConfig+0x338>)
 801362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801362c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013630:	2b28      	cmp	r3, #40	@ 0x28
 8013632:	d86d      	bhi.n	8013710 <UART_SetConfig+0x188>
 8013634:	a201      	add	r2, pc, #4	@ (adr r2, 801363c <UART_SetConfig+0xb4>)
 8013636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801363a:	bf00      	nop
 801363c:	080136e1 	.word	0x080136e1
 8013640:	08013711 	.word	0x08013711
 8013644:	08013711 	.word	0x08013711
 8013648:	08013711 	.word	0x08013711
 801364c:	08013711 	.word	0x08013711
 8013650:	08013711 	.word	0x08013711
 8013654:	08013711 	.word	0x08013711
 8013658:	08013711 	.word	0x08013711
 801365c:	080136e9 	.word	0x080136e9
 8013660:	08013711 	.word	0x08013711
 8013664:	08013711 	.word	0x08013711
 8013668:	08013711 	.word	0x08013711
 801366c:	08013711 	.word	0x08013711
 8013670:	08013711 	.word	0x08013711
 8013674:	08013711 	.word	0x08013711
 8013678:	08013711 	.word	0x08013711
 801367c:	080136f1 	.word	0x080136f1
 8013680:	08013711 	.word	0x08013711
 8013684:	08013711 	.word	0x08013711
 8013688:	08013711 	.word	0x08013711
 801368c:	08013711 	.word	0x08013711
 8013690:	08013711 	.word	0x08013711
 8013694:	08013711 	.word	0x08013711
 8013698:	08013711 	.word	0x08013711
 801369c:	080136f9 	.word	0x080136f9
 80136a0:	08013711 	.word	0x08013711
 80136a4:	08013711 	.word	0x08013711
 80136a8:	08013711 	.word	0x08013711
 80136ac:	08013711 	.word	0x08013711
 80136b0:	08013711 	.word	0x08013711
 80136b4:	08013711 	.word	0x08013711
 80136b8:	08013711 	.word	0x08013711
 80136bc:	08013701 	.word	0x08013701
 80136c0:	08013711 	.word	0x08013711
 80136c4:	08013711 	.word	0x08013711
 80136c8:	08013711 	.word	0x08013711
 80136cc:	08013711 	.word	0x08013711
 80136d0:	08013711 	.word	0x08013711
 80136d4:	08013711 	.word	0x08013711
 80136d8:	08013711 	.word	0x08013711
 80136dc:	08013709 	.word	0x08013709
 80136e0:	2301      	movs	r3, #1
 80136e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136e6:	e326      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80136e8:	2304      	movs	r3, #4
 80136ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136ee:	e322      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80136f0:	2308      	movs	r3, #8
 80136f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136f6:	e31e      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80136f8:	2310      	movs	r3, #16
 80136fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80136fe:	e31a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013700:	2320      	movs	r3, #32
 8013702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013706:	e316      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013708:	2340      	movs	r3, #64	@ 0x40
 801370a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801370e:	e312      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013710:	2380      	movs	r3, #128	@ 0x80
 8013712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013716:	e30e      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	4a69      	ldr	r2, [pc, #420]	@ (80138c4 <UART_SetConfig+0x33c>)
 801371e:	4293      	cmp	r3, r2
 8013720:	d130      	bne.n	8013784 <UART_SetConfig+0x1fc>
 8013722:	4b67      	ldr	r3, [pc, #412]	@ (80138c0 <UART_SetConfig+0x338>)
 8013724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013726:	f003 0307 	and.w	r3, r3, #7
 801372a:	2b05      	cmp	r3, #5
 801372c:	d826      	bhi.n	801377c <UART_SetConfig+0x1f4>
 801372e:	a201      	add	r2, pc, #4	@ (adr r2, 8013734 <UART_SetConfig+0x1ac>)
 8013730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013734:	0801374d 	.word	0x0801374d
 8013738:	08013755 	.word	0x08013755
 801373c:	0801375d 	.word	0x0801375d
 8013740:	08013765 	.word	0x08013765
 8013744:	0801376d 	.word	0x0801376d
 8013748:	08013775 	.word	0x08013775
 801374c:	2300      	movs	r3, #0
 801374e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013752:	e2f0      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013754:	2304      	movs	r3, #4
 8013756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801375a:	e2ec      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801375c:	2308      	movs	r3, #8
 801375e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013762:	e2e8      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013764:	2310      	movs	r3, #16
 8013766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801376a:	e2e4      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801376c:	2320      	movs	r3, #32
 801376e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013772:	e2e0      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013774:	2340      	movs	r3, #64	@ 0x40
 8013776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801377a:	e2dc      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801377c:	2380      	movs	r3, #128	@ 0x80
 801377e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013782:	e2d8      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	4a4f      	ldr	r2, [pc, #316]	@ (80138c8 <UART_SetConfig+0x340>)
 801378a:	4293      	cmp	r3, r2
 801378c:	d130      	bne.n	80137f0 <UART_SetConfig+0x268>
 801378e:	4b4c      	ldr	r3, [pc, #304]	@ (80138c0 <UART_SetConfig+0x338>)
 8013790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013792:	f003 0307 	and.w	r3, r3, #7
 8013796:	2b05      	cmp	r3, #5
 8013798:	d826      	bhi.n	80137e8 <UART_SetConfig+0x260>
 801379a:	a201      	add	r2, pc, #4	@ (adr r2, 80137a0 <UART_SetConfig+0x218>)
 801379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137a0:	080137b9 	.word	0x080137b9
 80137a4:	080137c1 	.word	0x080137c1
 80137a8:	080137c9 	.word	0x080137c9
 80137ac:	080137d1 	.word	0x080137d1
 80137b0:	080137d9 	.word	0x080137d9
 80137b4:	080137e1 	.word	0x080137e1
 80137b8:	2300      	movs	r3, #0
 80137ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137be:	e2ba      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137c0:	2304      	movs	r3, #4
 80137c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137c6:	e2b6      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137c8:	2308      	movs	r3, #8
 80137ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137ce:	e2b2      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137d0:	2310      	movs	r3, #16
 80137d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137d6:	e2ae      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137d8:	2320      	movs	r3, #32
 80137da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137de:	e2aa      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137e0:	2340      	movs	r3, #64	@ 0x40
 80137e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137e6:	e2a6      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137e8:	2380      	movs	r3, #128	@ 0x80
 80137ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80137ee:	e2a2      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4a35      	ldr	r2, [pc, #212]	@ (80138cc <UART_SetConfig+0x344>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d130      	bne.n	801385c <UART_SetConfig+0x2d4>
 80137fa:	4b31      	ldr	r3, [pc, #196]	@ (80138c0 <UART_SetConfig+0x338>)
 80137fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137fe:	f003 0307 	and.w	r3, r3, #7
 8013802:	2b05      	cmp	r3, #5
 8013804:	d826      	bhi.n	8013854 <UART_SetConfig+0x2cc>
 8013806:	a201      	add	r2, pc, #4	@ (adr r2, 801380c <UART_SetConfig+0x284>)
 8013808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801380c:	08013825 	.word	0x08013825
 8013810:	0801382d 	.word	0x0801382d
 8013814:	08013835 	.word	0x08013835
 8013818:	0801383d 	.word	0x0801383d
 801381c:	08013845 	.word	0x08013845
 8013820:	0801384d 	.word	0x0801384d
 8013824:	2300      	movs	r3, #0
 8013826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801382a:	e284      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801382c:	2304      	movs	r3, #4
 801382e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013832:	e280      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013834:	2308      	movs	r3, #8
 8013836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801383a:	e27c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801383c:	2310      	movs	r3, #16
 801383e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013842:	e278      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013844:	2320      	movs	r3, #32
 8013846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801384a:	e274      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801384c:	2340      	movs	r3, #64	@ 0x40
 801384e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013852:	e270      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013854:	2380      	movs	r3, #128	@ 0x80
 8013856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801385a:	e26c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4a1b      	ldr	r2, [pc, #108]	@ (80138d0 <UART_SetConfig+0x348>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d142      	bne.n	80138ec <UART_SetConfig+0x364>
 8013866:	4b16      	ldr	r3, [pc, #88]	@ (80138c0 <UART_SetConfig+0x338>)
 8013868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801386a:	f003 0307 	and.w	r3, r3, #7
 801386e:	2b05      	cmp	r3, #5
 8013870:	d838      	bhi.n	80138e4 <UART_SetConfig+0x35c>
 8013872:	a201      	add	r2, pc, #4	@ (adr r2, 8013878 <UART_SetConfig+0x2f0>)
 8013874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013878:	08013891 	.word	0x08013891
 801387c:	08013899 	.word	0x08013899
 8013880:	080138a1 	.word	0x080138a1
 8013884:	080138a9 	.word	0x080138a9
 8013888:	080138d5 	.word	0x080138d5
 801388c:	080138dd 	.word	0x080138dd
 8013890:	2300      	movs	r3, #0
 8013892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013896:	e24e      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013898:	2304      	movs	r3, #4
 801389a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801389e:	e24a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138a0:	2308      	movs	r3, #8
 80138a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138a6:	e246      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138a8:	2310      	movs	r3, #16
 80138aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138ae:	e242      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138b0:	cfff69f3 	.word	0xcfff69f3
 80138b4:	58000c00 	.word	0x58000c00
 80138b8:	11fff4ff 	.word	0x11fff4ff
 80138bc:	40011000 	.word	0x40011000
 80138c0:	58024400 	.word	0x58024400
 80138c4:	40004400 	.word	0x40004400
 80138c8:	40004800 	.word	0x40004800
 80138cc:	40004c00 	.word	0x40004c00
 80138d0:	40005000 	.word	0x40005000
 80138d4:	2320      	movs	r3, #32
 80138d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138da:	e22c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138dc:	2340      	movs	r3, #64	@ 0x40
 80138de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138e2:	e228      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138e4:	2380      	movs	r3, #128	@ 0x80
 80138e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80138ea:	e224      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	4ab1      	ldr	r2, [pc, #708]	@ (8013bb8 <UART_SetConfig+0x630>)
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d176      	bne.n	80139e4 <UART_SetConfig+0x45c>
 80138f6:	4bb1      	ldr	r3, [pc, #708]	@ (8013bbc <UART_SetConfig+0x634>)
 80138f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80138fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80138fe:	2b28      	cmp	r3, #40	@ 0x28
 8013900:	d86c      	bhi.n	80139dc <UART_SetConfig+0x454>
 8013902:	a201      	add	r2, pc, #4	@ (adr r2, 8013908 <UART_SetConfig+0x380>)
 8013904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013908:	080139ad 	.word	0x080139ad
 801390c:	080139dd 	.word	0x080139dd
 8013910:	080139dd 	.word	0x080139dd
 8013914:	080139dd 	.word	0x080139dd
 8013918:	080139dd 	.word	0x080139dd
 801391c:	080139dd 	.word	0x080139dd
 8013920:	080139dd 	.word	0x080139dd
 8013924:	080139dd 	.word	0x080139dd
 8013928:	080139b5 	.word	0x080139b5
 801392c:	080139dd 	.word	0x080139dd
 8013930:	080139dd 	.word	0x080139dd
 8013934:	080139dd 	.word	0x080139dd
 8013938:	080139dd 	.word	0x080139dd
 801393c:	080139dd 	.word	0x080139dd
 8013940:	080139dd 	.word	0x080139dd
 8013944:	080139dd 	.word	0x080139dd
 8013948:	080139bd 	.word	0x080139bd
 801394c:	080139dd 	.word	0x080139dd
 8013950:	080139dd 	.word	0x080139dd
 8013954:	080139dd 	.word	0x080139dd
 8013958:	080139dd 	.word	0x080139dd
 801395c:	080139dd 	.word	0x080139dd
 8013960:	080139dd 	.word	0x080139dd
 8013964:	080139dd 	.word	0x080139dd
 8013968:	080139c5 	.word	0x080139c5
 801396c:	080139dd 	.word	0x080139dd
 8013970:	080139dd 	.word	0x080139dd
 8013974:	080139dd 	.word	0x080139dd
 8013978:	080139dd 	.word	0x080139dd
 801397c:	080139dd 	.word	0x080139dd
 8013980:	080139dd 	.word	0x080139dd
 8013984:	080139dd 	.word	0x080139dd
 8013988:	080139cd 	.word	0x080139cd
 801398c:	080139dd 	.word	0x080139dd
 8013990:	080139dd 	.word	0x080139dd
 8013994:	080139dd 	.word	0x080139dd
 8013998:	080139dd 	.word	0x080139dd
 801399c:	080139dd 	.word	0x080139dd
 80139a0:	080139dd 	.word	0x080139dd
 80139a4:	080139dd 	.word	0x080139dd
 80139a8:	080139d5 	.word	0x080139d5
 80139ac:	2301      	movs	r3, #1
 80139ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139b2:	e1c0      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139b4:	2304      	movs	r3, #4
 80139b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ba:	e1bc      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139bc:	2308      	movs	r3, #8
 80139be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139c2:	e1b8      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139c4:	2310      	movs	r3, #16
 80139c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139ca:	e1b4      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139cc:	2320      	movs	r3, #32
 80139ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139d2:	e1b0      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139d4:	2340      	movs	r3, #64	@ 0x40
 80139d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139da:	e1ac      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139dc:	2380      	movs	r3, #128	@ 0x80
 80139de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80139e2:	e1a8      	b.n	8013d36 <UART_SetConfig+0x7ae>
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	4a75      	ldr	r2, [pc, #468]	@ (8013bc0 <UART_SetConfig+0x638>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d130      	bne.n	8013a50 <UART_SetConfig+0x4c8>
 80139ee:	4b73      	ldr	r3, [pc, #460]	@ (8013bbc <UART_SetConfig+0x634>)
 80139f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139f2:	f003 0307 	and.w	r3, r3, #7
 80139f6:	2b05      	cmp	r3, #5
 80139f8:	d826      	bhi.n	8013a48 <UART_SetConfig+0x4c0>
 80139fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013a00 <UART_SetConfig+0x478>)
 80139fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a00:	08013a19 	.word	0x08013a19
 8013a04:	08013a21 	.word	0x08013a21
 8013a08:	08013a29 	.word	0x08013a29
 8013a0c:	08013a31 	.word	0x08013a31
 8013a10:	08013a39 	.word	0x08013a39
 8013a14:	08013a41 	.word	0x08013a41
 8013a18:	2300      	movs	r3, #0
 8013a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a1e:	e18a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a20:	2304      	movs	r3, #4
 8013a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a26:	e186      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a28:	2308      	movs	r3, #8
 8013a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a2e:	e182      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a30:	2310      	movs	r3, #16
 8013a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a36:	e17e      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a38:	2320      	movs	r3, #32
 8013a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a3e:	e17a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a40:	2340      	movs	r3, #64	@ 0x40
 8013a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a46:	e176      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a48:	2380      	movs	r3, #128	@ 0x80
 8013a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a4e:	e172      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a5b      	ldr	r2, [pc, #364]	@ (8013bc4 <UART_SetConfig+0x63c>)
 8013a56:	4293      	cmp	r3, r2
 8013a58:	d130      	bne.n	8013abc <UART_SetConfig+0x534>
 8013a5a:	4b58      	ldr	r3, [pc, #352]	@ (8013bbc <UART_SetConfig+0x634>)
 8013a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a5e:	f003 0307 	and.w	r3, r3, #7
 8013a62:	2b05      	cmp	r3, #5
 8013a64:	d826      	bhi.n	8013ab4 <UART_SetConfig+0x52c>
 8013a66:	a201      	add	r2, pc, #4	@ (adr r2, 8013a6c <UART_SetConfig+0x4e4>)
 8013a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a6c:	08013a85 	.word	0x08013a85
 8013a70:	08013a8d 	.word	0x08013a8d
 8013a74:	08013a95 	.word	0x08013a95
 8013a78:	08013a9d 	.word	0x08013a9d
 8013a7c:	08013aa5 	.word	0x08013aa5
 8013a80:	08013aad 	.word	0x08013aad
 8013a84:	2300      	movs	r3, #0
 8013a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a8a:	e154      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a8c:	2304      	movs	r3, #4
 8013a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a92:	e150      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a94:	2308      	movs	r3, #8
 8013a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013a9a:	e14c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013a9c:	2310      	movs	r3, #16
 8013a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aa2:	e148      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013aa4:	2320      	movs	r3, #32
 8013aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aaa:	e144      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013aac:	2340      	movs	r3, #64	@ 0x40
 8013aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ab2:	e140      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013ab4:	2380      	movs	r3, #128	@ 0x80
 8013ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013aba:	e13c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4a41      	ldr	r2, [pc, #260]	@ (8013bc8 <UART_SetConfig+0x640>)
 8013ac2:	4293      	cmp	r3, r2
 8013ac4:	f040 8082 	bne.w	8013bcc <UART_SetConfig+0x644>
 8013ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8013bbc <UART_SetConfig+0x634>)
 8013aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013acc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013ad0:	2b28      	cmp	r3, #40	@ 0x28
 8013ad2:	d86d      	bhi.n	8013bb0 <UART_SetConfig+0x628>
 8013ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8013adc <UART_SetConfig+0x554>)
 8013ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ada:	bf00      	nop
 8013adc:	08013b81 	.word	0x08013b81
 8013ae0:	08013bb1 	.word	0x08013bb1
 8013ae4:	08013bb1 	.word	0x08013bb1
 8013ae8:	08013bb1 	.word	0x08013bb1
 8013aec:	08013bb1 	.word	0x08013bb1
 8013af0:	08013bb1 	.word	0x08013bb1
 8013af4:	08013bb1 	.word	0x08013bb1
 8013af8:	08013bb1 	.word	0x08013bb1
 8013afc:	08013b89 	.word	0x08013b89
 8013b00:	08013bb1 	.word	0x08013bb1
 8013b04:	08013bb1 	.word	0x08013bb1
 8013b08:	08013bb1 	.word	0x08013bb1
 8013b0c:	08013bb1 	.word	0x08013bb1
 8013b10:	08013bb1 	.word	0x08013bb1
 8013b14:	08013bb1 	.word	0x08013bb1
 8013b18:	08013bb1 	.word	0x08013bb1
 8013b1c:	08013b91 	.word	0x08013b91
 8013b20:	08013bb1 	.word	0x08013bb1
 8013b24:	08013bb1 	.word	0x08013bb1
 8013b28:	08013bb1 	.word	0x08013bb1
 8013b2c:	08013bb1 	.word	0x08013bb1
 8013b30:	08013bb1 	.word	0x08013bb1
 8013b34:	08013bb1 	.word	0x08013bb1
 8013b38:	08013bb1 	.word	0x08013bb1
 8013b3c:	08013b99 	.word	0x08013b99
 8013b40:	08013bb1 	.word	0x08013bb1
 8013b44:	08013bb1 	.word	0x08013bb1
 8013b48:	08013bb1 	.word	0x08013bb1
 8013b4c:	08013bb1 	.word	0x08013bb1
 8013b50:	08013bb1 	.word	0x08013bb1
 8013b54:	08013bb1 	.word	0x08013bb1
 8013b58:	08013bb1 	.word	0x08013bb1
 8013b5c:	08013ba1 	.word	0x08013ba1
 8013b60:	08013bb1 	.word	0x08013bb1
 8013b64:	08013bb1 	.word	0x08013bb1
 8013b68:	08013bb1 	.word	0x08013bb1
 8013b6c:	08013bb1 	.word	0x08013bb1
 8013b70:	08013bb1 	.word	0x08013bb1
 8013b74:	08013bb1 	.word	0x08013bb1
 8013b78:	08013bb1 	.word	0x08013bb1
 8013b7c:	08013ba9 	.word	0x08013ba9
 8013b80:	2301      	movs	r3, #1
 8013b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b86:	e0d6      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013b88:	2304      	movs	r3, #4
 8013b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b8e:	e0d2      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013b90:	2308      	movs	r3, #8
 8013b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b96:	e0ce      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013b98:	2310      	movs	r3, #16
 8013b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013b9e:	e0ca      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013ba0:	2320      	movs	r3, #32
 8013ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ba6:	e0c6      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013ba8:	2340      	movs	r3, #64	@ 0x40
 8013baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013bae:	e0c2      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013bb0:	2380      	movs	r3, #128	@ 0x80
 8013bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013bb6:	e0be      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013bb8:	40011400 	.word	0x40011400
 8013bbc:	58024400 	.word	0x58024400
 8013bc0:	40007800 	.word	0x40007800
 8013bc4:	40007c00 	.word	0x40007c00
 8013bc8:	40011800 	.word	0x40011800
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	4aad      	ldr	r2, [pc, #692]	@ (8013e88 <UART_SetConfig+0x900>)
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d176      	bne.n	8013cc4 <UART_SetConfig+0x73c>
 8013bd6:	4bad      	ldr	r3, [pc, #692]	@ (8013e8c <UART_SetConfig+0x904>)
 8013bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013bde:	2b28      	cmp	r3, #40	@ 0x28
 8013be0:	d86c      	bhi.n	8013cbc <UART_SetConfig+0x734>
 8013be2:	a201      	add	r2, pc, #4	@ (adr r2, 8013be8 <UART_SetConfig+0x660>)
 8013be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013be8:	08013c8d 	.word	0x08013c8d
 8013bec:	08013cbd 	.word	0x08013cbd
 8013bf0:	08013cbd 	.word	0x08013cbd
 8013bf4:	08013cbd 	.word	0x08013cbd
 8013bf8:	08013cbd 	.word	0x08013cbd
 8013bfc:	08013cbd 	.word	0x08013cbd
 8013c00:	08013cbd 	.word	0x08013cbd
 8013c04:	08013cbd 	.word	0x08013cbd
 8013c08:	08013c95 	.word	0x08013c95
 8013c0c:	08013cbd 	.word	0x08013cbd
 8013c10:	08013cbd 	.word	0x08013cbd
 8013c14:	08013cbd 	.word	0x08013cbd
 8013c18:	08013cbd 	.word	0x08013cbd
 8013c1c:	08013cbd 	.word	0x08013cbd
 8013c20:	08013cbd 	.word	0x08013cbd
 8013c24:	08013cbd 	.word	0x08013cbd
 8013c28:	08013c9d 	.word	0x08013c9d
 8013c2c:	08013cbd 	.word	0x08013cbd
 8013c30:	08013cbd 	.word	0x08013cbd
 8013c34:	08013cbd 	.word	0x08013cbd
 8013c38:	08013cbd 	.word	0x08013cbd
 8013c3c:	08013cbd 	.word	0x08013cbd
 8013c40:	08013cbd 	.word	0x08013cbd
 8013c44:	08013cbd 	.word	0x08013cbd
 8013c48:	08013ca5 	.word	0x08013ca5
 8013c4c:	08013cbd 	.word	0x08013cbd
 8013c50:	08013cbd 	.word	0x08013cbd
 8013c54:	08013cbd 	.word	0x08013cbd
 8013c58:	08013cbd 	.word	0x08013cbd
 8013c5c:	08013cbd 	.word	0x08013cbd
 8013c60:	08013cbd 	.word	0x08013cbd
 8013c64:	08013cbd 	.word	0x08013cbd
 8013c68:	08013cad 	.word	0x08013cad
 8013c6c:	08013cbd 	.word	0x08013cbd
 8013c70:	08013cbd 	.word	0x08013cbd
 8013c74:	08013cbd 	.word	0x08013cbd
 8013c78:	08013cbd 	.word	0x08013cbd
 8013c7c:	08013cbd 	.word	0x08013cbd
 8013c80:	08013cbd 	.word	0x08013cbd
 8013c84:	08013cbd 	.word	0x08013cbd
 8013c88:	08013cb5 	.word	0x08013cb5
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c92:	e050      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013c94:	2304      	movs	r3, #4
 8013c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013c9a:	e04c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013c9c:	2308      	movs	r3, #8
 8013c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013ca2:	e048      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013ca4:	2310      	movs	r3, #16
 8013ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013caa:	e044      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013cac:	2320      	movs	r3, #32
 8013cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cb2:	e040      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013cb4:	2340      	movs	r3, #64	@ 0x40
 8013cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cba:	e03c      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013cbc:	2380      	movs	r3, #128	@ 0x80
 8013cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cc2:	e038      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4a71      	ldr	r2, [pc, #452]	@ (8013e90 <UART_SetConfig+0x908>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d130      	bne.n	8013d30 <UART_SetConfig+0x7a8>
 8013cce:	4b6f      	ldr	r3, [pc, #444]	@ (8013e8c <UART_SetConfig+0x904>)
 8013cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013cd2:	f003 0307 	and.w	r3, r3, #7
 8013cd6:	2b05      	cmp	r3, #5
 8013cd8:	d826      	bhi.n	8013d28 <UART_SetConfig+0x7a0>
 8013cda:	a201      	add	r2, pc, #4	@ (adr r2, 8013ce0 <UART_SetConfig+0x758>)
 8013cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ce0:	08013cf9 	.word	0x08013cf9
 8013ce4:	08013d01 	.word	0x08013d01
 8013ce8:	08013d09 	.word	0x08013d09
 8013cec:	08013d11 	.word	0x08013d11
 8013cf0:	08013d19 	.word	0x08013d19
 8013cf4:	08013d21 	.word	0x08013d21
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013cfe:	e01a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d00:	2304      	movs	r3, #4
 8013d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d06:	e016      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d08:	2308      	movs	r3, #8
 8013d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d0e:	e012      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d10:	2310      	movs	r3, #16
 8013d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d16:	e00e      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d18:	2320      	movs	r3, #32
 8013d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d1e:	e00a      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d20:	2340      	movs	r3, #64	@ 0x40
 8013d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d26:	e006      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d28:	2380      	movs	r3, #128	@ 0x80
 8013d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013d2e:	e002      	b.n	8013d36 <UART_SetConfig+0x7ae>
 8013d30:	2380      	movs	r3, #128	@ 0x80
 8013d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a55      	ldr	r2, [pc, #340]	@ (8013e90 <UART_SetConfig+0x908>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	f040 80f8 	bne.w	8013f32 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013d42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d46:	2b20      	cmp	r3, #32
 8013d48:	dc46      	bgt.n	8013dd8 <UART_SetConfig+0x850>
 8013d4a:	2b02      	cmp	r3, #2
 8013d4c:	db75      	blt.n	8013e3a <UART_SetConfig+0x8b2>
 8013d4e:	3b02      	subs	r3, #2
 8013d50:	2b1e      	cmp	r3, #30
 8013d52:	d872      	bhi.n	8013e3a <UART_SetConfig+0x8b2>
 8013d54:	a201      	add	r2, pc, #4	@ (adr r2, 8013d5c <UART_SetConfig+0x7d4>)
 8013d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d5a:	bf00      	nop
 8013d5c:	08013ddf 	.word	0x08013ddf
 8013d60:	08013e3b 	.word	0x08013e3b
 8013d64:	08013de7 	.word	0x08013de7
 8013d68:	08013e3b 	.word	0x08013e3b
 8013d6c:	08013e3b 	.word	0x08013e3b
 8013d70:	08013e3b 	.word	0x08013e3b
 8013d74:	08013df7 	.word	0x08013df7
 8013d78:	08013e3b 	.word	0x08013e3b
 8013d7c:	08013e3b 	.word	0x08013e3b
 8013d80:	08013e3b 	.word	0x08013e3b
 8013d84:	08013e3b 	.word	0x08013e3b
 8013d88:	08013e3b 	.word	0x08013e3b
 8013d8c:	08013e3b 	.word	0x08013e3b
 8013d90:	08013e3b 	.word	0x08013e3b
 8013d94:	08013e07 	.word	0x08013e07
 8013d98:	08013e3b 	.word	0x08013e3b
 8013d9c:	08013e3b 	.word	0x08013e3b
 8013da0:	08013e3b 	.word	0x08013e3b
 8013da4:	08013e3b 	.word	0x08013e3b
 8013da8:	08013e3b 	.word	0x08013e3b
 8013dac:	08013e3b 	.word	0x08013e3b
 8013db0:	08013e3b 	.word	0x08013e3b
 8013db4:	08013e3b 	.word	0x08013e3b
 8013db8:	08013e3b 	.word	0x08013e3b
 8013dbc:	08013e3b 	.word	0x08013e3b
 8013dc0:	08013e3b 	.word	0x08013e3b
 8013dc4:	08013e3b 	.word	0x08013e3b
 8013dc8:	08013e3b 	.word	0x08013e3b
 8013dcc:	08013e3b 	.word	0x08013e3b
 8013dd0:	08013e3b 	.word	0x08013e3b
 8013dd4:	08013e2d 	.word	0x08013e2d
 8013dd8:	2b40      	cmp	r3, #64	@ 0x40
 8013dda:	d02a      	beq.n	8013e32 <UART_SetConfig+0x8aa>
 8013ddc:	e02d      	b.n	8013e3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013dde:	f7fc f80f 	bl	800fe00 <HAL_RCCEx_GetD3PCLK1Freq>
 8013de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013de4:	e02f      	b.n	8013e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fc f81e 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013df4:	e027      	b.n	8013e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013df6:	f107 0318 	add.w	r3, r7, #24
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fc f96a 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e04:	e01f      	b.n	8013e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e06:	4b21      	ldr	r3, [pc, #132]	@ (8013e8c <UART_SetConfig+0x904>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f003 0320 	and.w	r3, r3, #32
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d009      	beq.n	8013e26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013e12:	4b1e      	ldr	r3, [pc, #120]	@ (8013e8c <UART_SetConfig+0x904>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	08db      	lsrs	r3, r3, #3
 8013e18:	f003 0303 	and.w	r3, r3, #3
 8013e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8013e94 <UART_SetConfig+0x90c>)
 8013e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8013e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013e24:	e00f      	b.n	8013e46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013e26:	4b1b      	ldr	r3, [pc, #108]	@ (8013e94 <UART_SetConfig+0x90c>)
 8013e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e2a:	e00c      	b.n	8013e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8013e98 <UART_SetConfig+0x910>)
 8013e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e30:	e009      	b.n	8013e46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e38:	e005      	b.n	8013e46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013e3e:	2301      	movs	r3, #1
 8013e40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	f000 81ee 	beq.w	801422a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e52:	4a12      	ldr	r2, [pc, #72]	@ (8013e9c <UART_SetConfig+0x914>)
 8013e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e58:	461a      	mov	r2, r3
 8013e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e60:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	685a      	ldr	r2, [r3, #4]
 8013e66:	4613      	mov	r3, r2
 8013e68:	005b      	lsls	r3, r3, #1
 8013e6a:	4413      	add	r3, r2
 8013e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d305      	bcc.n	8013e7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d910      	bls.n	8013ea0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013e84:	e1d1      	b.n	801422a <UART_SetConfig+0xca2>
 8013e86:	bf00      	nop
 8013e88:	40011c00 	.word	0x40011c00
 8013e8c:	58024400 	.word	0x58024400
 8013e90:	58000c00 	.word	0x58000c00
 8013e94:	03d09000 	.word	0x03d09000
 8013e98:	003d0900 	.word	0x003d0900
 8013e9c:	0801e344 	.word	0x0801e344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	60bb      	str	r3, [r7, #8]
 8013ea6:	60fa      	str	r2, [r7, #12]
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eac:	4ac0      	ldr	r2, [pc, #768]	@ (80141b0 <UART_SetConfig+0xc28>)
 8013eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	607a      	str	r2, [r7, #4]
 8013eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013ec2:	f7ec fc49 	bl	8000758 <__aeabi_uldivmod>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	4610      	mov	r0, r2
 8013ecc:	4619      	mov	r1, r3
 8013ece:	f04f 0200 	mov.w	r2, #0
 8013ed2:	f04f 0300 	mov.w	r3, #0
 8013ed6:	020b      	lsls	r3, r1, #8
 8013ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013edc:	0202      	lsls	r2, r0, #8
 8013ede:	6979      	ldr	r1, [r7, #20]
 8013ee0:	6849      	ldr	r1, [r1, #4]
 8013ee2:	0849      	lsrs	r1, r1, #1
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	4605      	mov	r5, r0
 8013eea:	eb12 0804 	adds.w	r8, r2, r4
 8013eee:	eb43 0905 	adc.w	r9, r3, r5
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	469a      	mov	sl, r3
 8013efa:	4693      	mov	fp, r2
 8013efc:	4652      	mov	r2, sl
 8013efe:	465b      	mov	r3, fp
 8013f00:	4640      	mov	r0, r8
 8013f02:	4649      	mov	r1, r9
 8013f04:	f7ec fc28 	bl	8000758 <__aeabi_uldivmod>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013f16:	d308      	bcc.n	8013f2a <UART_SetConfig+0x9a2>
 8013f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013f1e:	d204      	bcs.n	8013f2a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f26:	60da      	str	r2, [r3, #12]
 8013f28:	e17f      	b.n	801422a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013f30:	e17b      	b.n	801422a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	69db      	ldr	r3, [r3, #28]
 8013f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013f3a:	f040 80bd 	bne.w	80140b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013f42:	2b20      	cmp	r3, #32
 8013f44:	dc48      	bgt.n	8013fd8 <UART_SetConfig+0xa50>
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	db7b      	blt.n	8014042 <UART_SetConfig+0xaba>
 8013f4a:	2b20      	cmp	r3, #32
 8013f4c:	d879      	bhi.n	8014042 <UART_SetConfig+0xaba>
 8013f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8013f54 <UART_SetConfig+0x9cc>)
 8013f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f54:	08013fdf 	.word	0x08013fdf
 8013f58:	08013fe7 	.word	0x08013fe7
 8013f5c:	08014043 	.word	0x08014043
 8013f60:	08014043 	.word	0x08014043
 8013f64:	08013fef 	.word	0x08013fef
 8013f68:	08014043 	.word	0x08014043
 8013f6c:	08014043 	.word	0x08014043
 8013f70:	08014043 	.word	0x08014043
 8013f74:	08013fff 	.word	0x08013fff
 8013f78:	08014043 	.word	0x08014043
 8013f7c:	08014043 	.word	0x08014043
 8013f80:	08014043 	.word	0x08014043
 8013f84:	08014043 	.word	0x08014043
 8013f88:	08014043 	.word	0x08014043
 8013f8c:	08014043 	.word	0x08014043
 8013f90:	08014043 	.word	0x08014043
 8013f94:	0801400f 	.word	0x0801400f
 8013f98:	08014043 	.word	0x08014043
 8013f9c:	08014043 	.word	0x08014043
 8013fa0:	08014043 	.word	0x08014043
 8013fa4:	08014043 	.word	0x08014043
 8013fa8:	08014043 	.word	0x08014043
 8013fac:	08014043 	.word	0x08014043
 8013fb0:	08014043 	.word	0x08014043
 8013fb4:	08014043 	.word	0x08014043
 8013fb8:	08014043 	.word	0x08014043
 8013fbc:	08014043 	.word	0x08014043
 8013fc0:	08014043 	.word	0x08014043
 8013fc4:	08014043 	.word	0x08014043
 8013fc8:	08014043 	.word	0x08014043
 8013fcc:	08014043 	.word	0x08014043
 8013fd0:	08014043 	.word	0x08014043
 8013fd4:	08014035 	.word	0x08014035
 8013fd8:	2b40      	cmp	r3, #64	@ 0x40
 8013fda:	d02e      	beq.n	801403a <UART_SetConfig+0xab2>
 8013fdc:	e031      	b.n	8014042 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013fde:	f7fa f871 	bl	800e0c4 <HAL_RCC_GetPCLK1Freq>
 8013fe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fe4:	e033      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013fe6:	f7fa f883 	bl	800e0f0 <HAL_RCC_GetPCLK2Freq>
 8013fea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013fec:	e02f      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fb ff1a 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ffc:	e027      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013ffe:	f107 0318 	add.w	r3, r7, #24
 8014002:	4618      	mov	r0, r3
 8014004:	f7fc f866 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801400c:	e01f      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801400e:	4b69      	ldr	r3, [pc, #420]	@ (80141b4 <UART_SetConfig+0xc2c>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f003 0320 	and.w	r3, r3, #32
 8014016:	2b00      	cmp	r3, #0
 8014018:	d009      	beq.n	801402e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801401a:	4b66      	ldr	r3, [pc, #408]	@ (80141b4 <UART_SetConfig+0xc2c>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	08db      	lsrs	r3, r3, #3
 8014020:	f003 0303 	and.w	r3, r3, #3
 8014024:	4a64      	ldr	r2, [pc, #400]	@ (80141b8 <UART_SetConfig+0xc30>)
 8014026:	fa22 f303 	lsr.w	r3, r2, r3
 801402a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801402c:	e00f      	b.n	801404e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801402e:	4b62      	ldr	r3, [pc, #392]	@ (80141b8 <UART_SetConfig+0xc30>)
 8014030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014032:	e00c      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014034:	4b61      	ldr	r3, [pc, #388]	@ (80141bc <UART_SetConfig+0xc34>)
 8014036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014038:	e009      	b.n	801404e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801403a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014040:	e005      	b.n	801404e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8014042:	2300      	movs	r3, #0
 8014044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014046:	2301      	movs	r3, #1
 8014048:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801404c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801404e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014050:	2b00      	cmp	r3, #0
 8014052:	f000 80ea 	beq.w	801422a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801405a:	4a55      	ldr	r2, [pc, #340]	@ (80141b0 <UART_SetConfig+0xc28>)
 801405c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014060:	461a      	mov	r2, r3
 8014062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014064:	fbb3 f3f2 	udiv	r3, r3, r2
 8014068:	005a      	lsls	r2, r3, #1
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	085b      	lsrs	r3, r3, #1
 8014070:	441a      	add	r2, r3
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	fbb2 f3f3 	udiv	r3, r2, r3
 801407a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801407c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801407e:	2b0f      	cmp	r3, #15
 8014080:	d916      	bls.n	80140b0 <UART_SetConfig+0xb28>
 8014082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014088:	d212      	bcs.n	80140b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801408c:	b29b      	uxth	r3, r3
 801408e:	f023 030f 	bic.w	r3, r3, #15
 8014092:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014096:	085b      	lsrs	r3, r3, #1
 8014098:	b29b      	uxth	r3, r3
 801409a:	f003 0307 	and.w	r3, r3, #7
 801409e:	b29a      	uxth	r2, r3
 80140a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140a2:	4313      	orrs	r3, r2
 80140a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80140ac:	60da      	str	r2, [r3, #12]
 80140ae:	e0bc      	b.n	801422a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80140b0:	2301      	movs	r3, #1
 80140b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80140b6:	e0b8      	b.n	801422a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80140b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80140bc:	2b20      	cmp	r3, #32
 80140be:	dc4b      	bgt.n	8014158 <UART_SetConfig+0xbd0>
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f2c0 8087 	blt.w	80141d4 <UART_SetConfig+0xc4c>
 80140c6:	2b20      	cmp	r3, #32
 80140c8:	f200 8084 	bhi.w	80141d4 <UART_SetConfig+0xc4c>
 80140cc:	a201      	add	r2, pc, #4	@ (adr r2, 80140d4 <UART_SetConfig+0xb4c>)
 80140ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140d2:	bf00      	nop
 80140d4:	0801415f 	.word	0x0801415f
 80140d8:	08014167 	.word	0x08014167
 80140dc:	080141d5 	.word	0x080141d5
 80140e0:	080141d5 	.word	0x080141d5
 80140e4:	0801416f 	.word	0x0801416f
 80140e8:	080141d5 	.word	0x080141d5
 80140ec:	080141d5 	.word	0x080141d5
 80140f0:	080141d5 	.word	0x080141d5
 80140f4:	0801417f 	.word	0x0801417f
 80140f8:	080141d5 	.word	0x080141d5
 80140fc:	080141d5 	.word	0x080141d5
 8014100:	080141d5 	.word	0x080141d5
 8014104:	080141d5 	.word	0x080141d5
 8014108:	080141d5 	.word	0x080141d5
 801410c:	080141d5 	.word	0x080141d5
 8014110:	080141d5 	.word	0x080141d5
 8014114:	0801418f 	.word	0x0801418f
 8014118:	080141d5 	.word	0x080141d5
 801411c:	080141d5 	.word	0x080141d5
 8014120:	080141d5 	.word	0x080141d5
 8014124:	080141d5 	.word	0x080141d5
 8014128:	080141d5 	.word	0x080141d5
 801412c:	080141d5 	.word	0x080141d5
 8014130:	080141d5 	.word	0x080141d5
 8014134:	080141d5 	.word	0x080141d5
 8014138:	080141d5 	.word	0x080141d5
 801413c:	080141d5 	.word	0x080141d5
 8014140:	080141d5 	.word	0x080141d5
 8014144:	080141d5 	.word	0x080141d5
 8014148:	080141d5 	.word	0x080141d5
 801414c:	080141d5 	.word	0x080141d5
 8014150:	080141d5 	.word	0x080141d5
 8014154:	080141c7 	.word	0x080141c7
 8014158:	2b40      	cmp	r3, #64	@ 0x40
 801415a:	d037      	beq.n	80141cc <UART_SetConfig+0xc44>
 801415c:	e03a      	b.n	80141d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801415e:	f7f9 ffb1 	bl	800e0c4 <HAL_RCC_GetPCLK1Freq>
 8014162:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014164:	e03c      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014166:	f7f9 ffc3 	bl	800e0f0 <HAL_RCC_GetPCLK2Freq>
 801416a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801416c:	e038      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801416e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014172:	4618      	mov	r0, r3
 8014174:	f7fb fe5a 	bl	800fe2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801417c:	e030      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801417e:	f107 0318 	add.w	r3, r7, #24
 8014182:	4618      	mov	r0, r3
 8014184:	f7fb ffa6 	bl	80100d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801418c:	e028      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801418e:	4b09      	ldr	r3, [pc, #36]	@ (80141b4 <UART_SetConfig+0xc2c>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f003 0320 	and.w	r3, r3, #32
 8014196:	2b00      	cmp	r3, #0
 8014198:	d012      	beq.n	80141c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801419a:	4b06      	ldr	r3, [pc, #24]	@ (80141b4 <UART_SetConfig+0xc2c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	08db      	lsrs	r3, r3, #3
 80141a0:	f003 0303 	and.w	r3, r3, #3
 80141a4:	4a04      	ldr	r2, [pc, #16]	@ (80141b8 <UART_SetConfig+0xc30>)
 80141a6:	fa22 f303 	lsr.w	r3, r2, r3
 80141aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80141ac:	e018      	b.n	80141e0 <UART_SetConfig+0xc58>
 80141ae:	bf00      	nop
 80141b0:	0801e344 	.word	0x0801e344
 80141b4:	58024400 	.word	0x58024400
 80141b8:	03d09000 	.word	0x03d09000
 80141bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80141c0:	4b24      	ldr	r3, [pc, #144]	@ (8014254 <UART_SetConfig+0xccc>)
 80141c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141c4:	e00c      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80141c6:	4b24      	ldr	r3, [pc, #144]	@ (8014258 <UART_SetConfig+0xcd0>)
 80141c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141ca:	e009      	b.n	80141e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80141cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80141d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141d2:	e005      	b.n	80141e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80141d4:	2300      	movs	r3, #0
 80141d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80141d8:	2301      	movs	r3, #1
 80141da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80141de:	bf00      	nop
    }

    if (pclk != 0U)
 80141e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d021      	beq.n	801422a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ea:	4a1c      	ldr	r2, [pc, #112]	@ (801425c <UART_SetConfig+0xcd4>)
 80141ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141f0:	461a      	mov	r2, r3
 80141f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80141f8:	697b      	ldr	r3, [r7, #20]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	085b      	lsrs	r3, r3, #1
 80141fe:	441a      	add	r2, r3
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	fbb2 f3f3 	udiv	r3, r2, r3
 8014208:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801420a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801420c:	2b0f      	cmp	r3, #15
 801420e:	d909      	bls.n	8014224 <UART_SetConfig+0xc9c>
 8014210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014216:	d205      	bcs.n	8014224 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801421a:	b29a      	uxth	r2, r3
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	60da      	str	r2, [r3, #12]
 8014222:	e002      	b.n	801422a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014224:	2301      	movs	r3, #1
 8014226:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	2201      	movs	r2, #1
 801422e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	2201      	movs	r2, #1
 8014236:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	2200      	movs	r2, #0
 801423e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	2200      	movs	r2, #0
 8014244:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014246:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801424a:	4618      	mov	r0, r3
 801424c:	3748      	adds	r7, #72	@ 0x48
 801424e:	46bd      	mov	sp, r7
 8014250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014254:	03d09000 	.word	0x03d09000
 8014258:	003d0900 	.word	0x003d0900
 801425c:	0801e344 	.word	0x0801e344

08014260 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801426c:	f003 0308 	and.w	r3, r3, #8
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00a      	beq.n	801428a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	430a      	orrs	r2, r1
 8014288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801428e:	f003 0301 	and.w	r3, r3, #1
 8014292:	2b00      	cmp	r3, #0
 8014294:	d00a      	beq.n	80142ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	430a      	orrs	r2, r1
 80142aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142b0:	f003 0302 	and.w	r3, r3, #2
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00a      	beq.n	80142ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	430a      	orrs	r2, r1
 80142cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142d2:	f003 0304 	and.w	r3, r3, #4
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d00a      	beq.n	80142f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	430a      	orrs	r2, r1
 80142ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142f4:	f003 0310 	and.w	r3, r3, #16
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00a      	beq.n	8014312 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	689b      	ldr	r3, [r3, #8]
 8014302:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	430a      	orrs	r2, r1
 8014310:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014316:	f003 0320 	and.w	r3, r3, #32
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00a      	beq.n	8014334 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	430a      	orrs	r2, r1
 8014332:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801433c:	2b00      	cmp	r3, #0
 801433e:	d01a      	beq.n	8014376 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	430a      	orrs	r2, r1
 8014354:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801435a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801435e:	d10a      	bne.n	8014376 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	430a      	orrs	r2, r1
 8014374:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801437a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801437e:	2b00      	cmp	r3, #0
 8014380:	d00a      	beq.n	8014398 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	430a      	orrs	r2, r1
 8014396:	605a      	str	r2, [r3, #4]
  }
}
 8014398:	bf00      	nop
 801439a:	370c      	adds	r7, #12
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b098      	sub	sp, #96	@ 0x60
 80143a8:	af02      	add	r7, sp, #8
 80143aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80143b4:	f7f3 f884 	bl	80074c0 <HAL_GetTick>
 80143b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f003 0308 	and.w	r3, r3, #8
 80143c4:	2b08      	cmp	r3, #8
 80143c6:	d12f      	bne.n	8014428 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80143c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143d0:	2200      	movs	r2, #0
 80143d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f000 f88e 	bl	80144f8 <UART_WaitOnFlagUntilTimeout>
 80143dc:	4603      	mov	r3, r0
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d022      	beq.n	8014428 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ea:	e853 3f00 	ldrex	r3, [r3]
 80143ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80143f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80143f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	461a      	mov	r2, r3
 80143fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014400:	647b      	str	r3, [r7, #68]	@ 0x44
 8014402:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014408:	e841 2300 	strex	r3, r2, [r1]
 801440c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801440e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014410:	2b00      	cmp	r3, #0
 8014412:	d1e6      	bne.n	80143e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2220      	movs	r2, #32
 8014418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	2200      	movs	r2, #0
 8014420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014424:	2303      	movs	r3, #3
 8014426:	e063      	b.n	80144f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f003 0304 	and.w	r3, r3, #4
 8014432:	2b04      	cmp	r3, #4
 8014434:	d149      	bne.n	80144ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014436:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801443e:	2200      	movs	r2, #0
 8014440:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 f857 	bl	80144f8 <UART_WaitOnFlagUntilTimeout>
 801444a:	4603      	mov	r3, r0
 801444c:	2b00      	cmp	r3, #0
 801444e:	d03c      	beq.n	80144ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014458:	e853 3f00 	ldrex	r3, [r3]
 801445c:	623b      	str	r3, [r7, #32]
   return(result);
 801445e:	6a3b      	ldr	r3, [r7, #32]
 8014460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	461a      	mov	r2, r3
 801446c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801446e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014470:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014476:	e841 2300 	strex	r3, r2, [r1]
 801447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447e:	2b00      	cmp	r3, #0
 8014480:	d1e6      	bne.n	8014450 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	3308      	adds	r3, #8
 8014488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	e853 3f00 	ldrex	r3, [r3]
 8014490:	60fb      	str	r3, [r7, #12]
   return(result);
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f023 0301 	bic.w	r3, r3, #1
 8014498:	64bb      	str	r3, [r7, #72]	@ 0x48
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	3308      	adds	r3, #8
 80144a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80144a2:	61fa      	str	r2, [r7, #28]
 80144a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144a6:	69b9      	ldr	r1, [r7, #24]
 80144a8:	69fa      	ldr	r2, [r7, #28]
 80144aa:	e841 2300 	strex	r3, r2, [r1]
 80144ae:	617b      	str	r3, [r7, #20]
   return(result);
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d1e5      	bne.n	8014482 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2220      	movs	r2, #32
 80144ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2200      	movs	r2, #0
 80144c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80144c6:	2303      	movs	r3, #3
 80144c8:	e012      	b.n	80144f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2220      	movs	r2, #32
 80144ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2220      	movs	r2, #32
 80144d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3758      	adds	r7, #88	@ 0x58
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	603b      	str	r3, [r7, #0]
 8014504:	4613      	mov	r3, r2
 8014506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014508:	e04f      	b.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014510:	d04b      	beq.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014512:	f7f2 ffd5 	bl	80074c0 <HAL_GetTick>
 8014516:	4602      	mov	r2, r0
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	69ba      	ldr	r2, [r7, #24]
 801451e:	429a      	cmp	r2, r3
 8014520:	d302      	bcc.n	8014528 <UART_WaitOnFlagUntilTimeout+0x30>
 8014522:	69bb      	ldr	r3, [r7, #24]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d101      	bne.n	801452c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014528:	2303      	movs	r3, #3
 801452a:	e04e      	b.n	80145ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f003 0304 	and.w	r3, r3, #4
 8014536:	2b00      	cmp	r3, #0
 8014538:	d037      	beq.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	2b80      	cmp	r3, #128	@ 0x80
 801453e:	d034      	beq.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	2b40      	cmp	r3, #64	@ 0x40
 8014544:	d031      	beq.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	69db      	ldr	r3, [r3, #28]
 801454c:	f003 0308 	and.w	r3, r3, #8
 8014550:	2b08      	cmp	r3, #8
 8014552:	d110      	bne.n	8014576 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	2208      	movs	r2, #8
 801455a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f000 f839 	bl	80145d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2208      	movs	r2, #8
 8014566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2200      	movs	r2, #0
 801456e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8014572:	2301      	movs	r3, #1
 8014574:	e029      	b.n	80145ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	69db      	ldr	r3, [r3, #28]
 801457c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014584:	d111      	bne.n	80145aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801458e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014590:	68f8      	ldr	r0, [r7, #12]
 8014592:	f000 f81f 	bl	80145d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2220      	movs	r2, #32
 801459a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2200      	movs	r2, #0
 80145a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80145a6:	2303      	movs	r3, #3
 80145a8:	e00f      	b.n	80145ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	69da      	ldr	r2, [r3, #28]
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	4013      	ands	r3, r2
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	bf0c      	ite	eq
 80145ba:	2301      	moveq	r3, #1
 80145bc:	2300      	movne	r3, #0
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	461a      	mov	r2, r3
 80145c2:	79fb      	ldrb	r3, [r7, #7]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d0a0      	beq.n	801450a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
	...

080145d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b095      	sub	sp, #84	@ 0x54
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e4:	e853 3f00 	ldrex	r3, [r3]
 80145e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80145ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80145f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	461a      	mov	r2, r3
 80145f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80145fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014602:	e841 2300 	strex	r3, r2, [r1]
 8014606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801460a:	2b00      	cmp	r3, #0
 801460c:	d1e6      	bne.n	80145dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3308      	adds	r3, #8
 8014614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014616:	6a3b      	ldr	r3, [r7, #32]
 8014618:	e853 3f00 	ldrex	r3, [r3]
 801461c:	61fb      	str	r3, [r7, #28]
   return(result);
 801461e:	69fa      	ldr	r2, [r7, #28]
 8014620:	4b1e      	ldr	r3, [pc, #120]	@ (801469c <UART_EndRxTransfer+0xc8>)
 8014622:	4013      	ands	r3, r2
 8014624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	3308      	adds	r3, #8
 801462c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801462e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014636:	e841 2300 	strex	r3, r2, [r1]
 801463a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1e5      	bne.n	801460e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014646:	2b01      	cmp	r3, #1
 8014648:	d118      	bne.n	801467c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	e853 3f00 	ldrex	r3, [r3]
 8014656:	60bb      	str	r3, [r7, #8]
   return(result);
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	f023 0310 	bic.w	r3, r3, #16
 801465e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	461a      	mov	r2, r3
 8014666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014668:	61bb      	str	r3, [r7, #24]
 801466a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801466c:	6979      	ldr	r1, [r7, #20]
 801466e:	69ba      	ldr	r2, [r7, #24]
 8014670:	e841 2300 	strex	r3, r2, [r1]
 8014674:	613b      	str	r3, [r7, #16]
   return(result);
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d1e6      	bne.n	801464a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2220      	movs	r2, #32
 8014680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2200      	movs	r2, #0
 8014688:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2200      	movs	r2, #0
 801468e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8014690:	bf00      	nop
 8014692:	3754      	adds	r7, #84	@ 0x54
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr
 801469c:	effffffe 	.word	0xeffffffe

080146a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b085      	sub	sp, #20
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d101      	bne.n	80146b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80146b2:	2302      	movs	r3, #2
 80146b4:	e027      	b.n	8014706 <HAL_UARTEx_DisableFifoMode+0x66>
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2201      	movs	r2, #1
 80146ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2224      	movs	r2, #36	@ 0x24
 80146c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	681a      	ldr	r2, [r3, #0]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f022 0201 	bic.w	r2, r2, #1
 80146dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80146e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	2200      	movs	r2, #0
 80146ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2220      	movs	r2, #32
 80146f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3714      	adds	r7, #20
 801470a:	46bd      	mov	sp, r7
 801470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014710:	4770      	bx	lr

08014712 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014712:	b580      	push	{r7, lr}
 8014714:	b084      	sub	sp, #16
 8014716:	af00      	add	r7, sp, #0
 8014718:	6078      	str	r0, [r7, #4]
 801471a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014722:	2b01      	cmp	r3, #1
 8014724:	d101      	bne.n	801472a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014726:	2302      	movs	r3, #2
 8014728:	e02d      	b.n	8014786 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2201      	movs	r2, #1
 801472e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2224      	movs	r2, #36	@ 0x24
 8014736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f022 0201 	bic.w	r2, r2, #1
 8014750:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	689b      	ldr	r3, [r3, #8]
 8014758:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	683a      	ldr	r2, [r7, #0]
 8014762:	430a      	orrs	r2, r1
 8014764:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 f850 	bl	801480c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	68fa      	ldr	r2, [r7, #12]
 8014772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2220      	movs	r2, #32
 8014778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3710      	adds	r7, #16
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}

0801478e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801478e:	b580      	push	{r7, lr}
 8014790:	b084      	sub	sp, #16
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
 8014796:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801479e:	2b01      	cmp	r3, #1
 80147a0:	d101      	bne.n	80147a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80147a2:	2302      	movs	r3, #2
 80147a4:	e02d      	b.n	8014802 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2201      	movs	r2, #1
 80147aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2224      	movs	r2, #36	@ 0x24
 80147b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	681a      	ldr	r2, [r3, #0]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	f022 0201 	bic.w	r2, r2, #1
 80147cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	689b      	ldr	r3, [r3, #8]
 80147d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	683a      	ldr	r2, [r7, #0]
 80147de:	430a      	orrs	r2, r1
 80147e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 f812 	bl	801480c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2220      	movs	r2, #32
 80147f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3710      	adds	r7, #16
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
	...

0801480c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801480c:	b480      	push	{r7}
 801480e:	b085      	sub	sp, #20
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014818:	2b00      	cmp	r3, #0
 801481a:	d108      	bne.n	801482e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2201      	movs	r2, #1
 8014820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2201      	movs	r2, #1
 8014828:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801482c:	e031      	b.n	8014892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801482e:	2310      	movs	r3, #16
 8014830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014832:	2310      	movs	r3, #16
 8014834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	689b      	ldr	r3, [r3, #8]
 801483c:	0e5b      	lsrs	r3, r3, #25
 801483e:	b2db      	uxtb	r3, r3
 8014840:	f003 0307 	and.w	r3, r3, #7
 8014844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	689b      	ldr	r3, [r3, #8]
 801484c:	0f5b      	lsrs	r3, r3, #29
 801484e:	b2db      	uxtb	r3, r3
 8014850:	f003 0307 	and.w	r3, r3, #7
 8014854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014856:	7bbb      	ldrb	r3, [r7, #14]
 8014858:	7b3a      	ldrb	r2, [r7, #12]
 801485a:	4911      	ldr	r1, [pc, #68]	@ (80148a0 <UARTEx_SetNbDataToProcess+0x94>)
 801485c:	5c8a      	ldrb	r2, [r1, r2]
 801485e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014862:	7b3a      	ldrb	r2, [r7, #12]
 8014864:	490f      	ldr	r1, [pc, #60]	@ (80148a4 <UARTEx_SetNbDataToProcess+0x98>)
 8014866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014868:	fb93 f3f2 	sdiv	r3, r3, r2
 801486c:	b29a      	uxth	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014874:	7bfb      	ldrb	r3, [r7, #15]
 8014876:	7b7a      	ldrb	r2, [r7, #13]
 8014878:	4909      	ldr	r1, [pc, #36]	@ (80148a0 <UARTEx_SetNbDataToProcess+0x94>)
 801487a:	5c8a      	ldrb	r2, [r1, r2]
 801487c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014880:	7b7a      	ldrb	r2, [r7, #13]
 8014882:	4908      	ldr	r1, [pc, #32]	@ (80148a4 <UARTEx_SetNbDataToProcess+0x98>)
 8014884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014886:	fb93 f3f2 	sdiv	r3, r3, r2
 801488a:	b29a      	uxth	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014892:	bf00      	nop
 8014894:	3714      	adds	r7, #20
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr
 801489e:	bf00      	nop
 80148a0:	0801e35c 	.word	0x0801e35c
 80148a4:	0801e364 	.word	0x0801e364

080148a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80148a8:	b084      	sub	sp, #16
 80148aa:	b580      	push	{r7, lr}
 80148ac:	b084      	sub	sp, #16
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	6078      	str	r0, [r7, #4]
 80148b2:	f107 001c 	add.w	r0, r7, #28
 80148b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80148ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d121      	bne.n	8014906 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	68da      	ldr	r2, [r3, #12]
 80148d2:	4b2c      	ldr	r3, [pc, #176]	@ (8014984 <USB_CoreInit+0xdc>)
 80148d4:	4013      	ands	r3, r2
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	68db      	ldr	r3, [r3, #12]
 80148de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80148e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80148ea:	2b01      	cmp	r3, #1
 80148ec:	d105      	bne.n	80148fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f001 faf6 	bl	8015eec <USB_CoreReset>
 8014900:	4603      	mov	r3, r0
 8014902:	73fb      	strb	r3, [r7, #15]
 8014904:	e01b      	b.n	801493e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	68db      	ldr	r3, [r3, #12]
 801490a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f001 faea 	bl	8015eec <USB_CoreReset>
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801491c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014920:	2b00      	cmp	r3, #0
 8014922:	d106      	bne.n	8014932 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014928:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	639a      	str	r2, [r3, #56]	@ 0x38
 8014930:	e005      	b.n	801493e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014936:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801493e:	7fbb      	ldrb	r3, [r7, #30]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d116      	bne.n	8014972 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014948:	b29a      	uxth	r2, r3
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014952:	4b0d      	ldr	r3, [pc, #52]	@ (8014988 <USB_CoreInit+0xe0>)
 8014954:	4313      	orrs	r3, r2
 8014956:	687a      	ldr	r2, [r7, #4]
 8014958:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	f043 0206 	orr.w	r2, r3, #6
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	689b      	ldr	r3, [r3, #8]
 801496a:	f043 0220 	orr.w	r2, r3, #32
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014972:	7bfb      	ldrb	r3, [r7, #15]
}
 8014974:	4618      	mov	r0, r3
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801497e:	b004      	add	sp, #16
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	ffbdffbf 	.word	0xffbdffbf
 8014988:	03ee0000 	.word	0x03ee0000

0801498c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801498c:	b480      	push	{r7}
 801498e:	b087      	sub	sp, #28
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	4613      	mov	r3, r2
 8014998:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801499a:	79fb      	ldrb	r3, [r7, #7]
 801499c:	2b02      	cmp	r3, #2
 801499e:	d165      	bne.n	8014a6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	4a41      	ldr	r2, [pc, #260]	@ (8014aa8 <USB_SetTurnaroundTime+0x11c>)
 80149a4:	4293      	cmp	r3, r2
 80149a6:	d906      	bls.n	80149b6 <USB_SetTurnaroundTime+0x2a>
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	4a40      	ldr	r2, [pc, #256]	@ (8014aac <USB_SetTurnaroundTime+0x120>)
 80149ac:	4293      	cmp	r3, r2
 80149ae:	d202      	bcs.n	80149b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80149b0:	230f      	movs	r3, #15
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	e062      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	4a3c      	ldr	r2, [pc, #240]	@ (8014aac <USB_SetTurnaroundTime+0x120>)
 80149ba:	4293      	cmp	r3, r2
 80149bc:	d306      	bcc.n	80149cc <USB_SetTurnaroundTime+0x40>
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	4a3b      	ldr	r2, [pc, #236]	@ (8014ab0 <USB_SetTurnaroundTime+0x124>)
 80149c2:	4293      	cmp	r3, r2
 80149c4:	d202      	bcs.n	80149cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80149c6:	230e      	movs	r3, #14
 80149c8:	617b      	str	r3, [r7, #20]
 80149ca:	e057      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	4a38      	ldr	r2, [pc, #224]	@ (8014ab0 <USB_SetTurnaroundTime+0x124>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d306      	bcc.n	80149e2 <USB_SetTurnaroundTime+0x56>
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	4a37      	ldr	r2, [pc, #220]	@ (8014ab4 <USB_SetTurnaroundTime+0x128>)
 80149d8:	4293      	cmp	r3, r2
 80149da:	d202      	bcs.n	80149e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80149dc:	230d      	movs	r3, #13
 80149de:	617b      	str	r3, [r7, #20]
 80149e0:	e04c      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	4a33      	ldr	r2, [pc, #204]	@ (8014ab4 <USB_SetTurnaroundTime+0x128>)
 80149e6:	4293      	cmp	r3, r2
 80149e8:	d306      	bcc.n	80149f8 <USB_SetTurnaroundTime+0x6c>
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	4a32      	ldr	r2, [pc, #200]	@ (8014ab8 <USB_SetTurnaroundTime+0x12c>)
 80149ee:	4293      	cmp	r3, r2
 80149f0:	d802      	bhi.n	80149f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80149f2:	230c      	movs	r3, #12
 80149f4:	617b      	str	r3, [r7, #20]
 80149f6:	e041      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	4a2f      	ldr	r2, [pc, #188]	@ (8014ab8 <USB_SetTurnaroundTime+0x12c>)
 80149fc:	4293      	cmp	r3, r2
 80149fe:	d906      	bls.n	8014a0e <USB_SetTurnaroundTime+0x82>
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	4a2e      	ldr	r2, [pc, #184]	@ (8014abc <USB_SetTurnaroundTime+0x130>)
 8014a04:	4293      	cmp	r3, r2
 8014a06:	d802      	bhi.n	8014a0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014a08:	230b      	movs	r3, #11
 8014a0a:	617b      	str	r3, [r7, #20]
 8014a0c:	e036      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	4a2a      	ldr	r2, [pc, #168]	@ (8014abc <USB_SetTurnaroundTime+0x130>)
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d906      	bls.n	8014a24 <USB_SetTurnaroundTime+0x98>
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	4a29      	ldr	r2, [pc, #164]	@ (8014ac0 <USB_SetTurnaroundTime+0x134>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d802      	bhi.n	8014a24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014a1e:	230a      	movs	r3, #10
 8014a20:	617b      	str	r3, [r7, #20]
 8014a22:	e02b      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	4a26      	ldr	r2, [pc, #152]	@ (8014ac0 <USB_SetTurnaroundTime+0x134>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d906      	bls.n	8014a3a <USB_SetTurnaroundTime+0xae>
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	4a25      	ldr	r2, [pc, #148]	@ (8014ac4 <USB_SetTurnaroundTime+0x138>)
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d202      	bcs.n	8014a3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014a34:	2309      	movs	r3, #9
 8014a36:	617b      	str	r3, [r7, #20]
 8014a38:	e020      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	4a21      	ldr	r2, [pc, #132]	@ (8014ac4 <USB_SetTurnaroundTime+0x138>)
 8014a3e:	4293      	cmp	r3, r2
 8014a40:	d306      	bcc.n	8014a50 <USB_SetTurnaroundTime+0xc4>
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	4a20      	ldr	r2, [pc, #128]	@ (8014ac8 <USB_SetTurnaroundTime+0x13c>)
 8014a46:	4293      	cmp	r3, r2
 8014a48:	d802      	bhi.n	8014a50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014a4a:	2308      	movs	r3, #8
 8014a4c:	617b      	str	r3, [r7, #20]
 8014a4e:	e015      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	4a1d      	ldr	r2, [pc, #116]	@ (8014ac8 <USB_SetTurnaroundTime+0x13c>)
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d906      	bls.n	8014a66 <USB_SetTurnaroundTime+0xda>
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8014acc <USB_SetTurnaroundTime+0x140>)
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	d202      	bcs.n	8014a66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014a60:	2307      	movs	r3, #7
 8014a62:	617b      	str	r3, [r7, #20]
 8014a64:	e00a      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014a66:	2306      	movs	r3, #6
 8014a68:	617b      	str	r3, [r7, #20]
 8014a6a:	e007      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014a6c:	79fb      	ldrb	r3, [r7, #7]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014a72:	2309      	movs	r3, #9
 8014a74:	617b      	str	r3, [r7, #20]
 8014a76:	e001      	b.n	8014a7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014a78:	2309      	movs	r3, #9
 8014a7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	68da      	ldr	r2, [r3, #12]
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	029b      	lsls	r3, r3, #10
 8014a90:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014a94:	431a      	orrs	r2, r3
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014a9a:	2300      	movs	r3, #0
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	371c      	adds	r7, #28
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr
 8014aa8:	00d8acbf 	.word	0x00d8acbf
 8014aac:	00e4e1c0 	.word	0x00e4e1c0
 8014ab0:	00f42400 	.word	0x00f42400
 8014ab4:	01067380 	.word	0x01067380
 8014ab8:	011a499f 	.word	0x011a499f
 8014abc:	01312cff 	.word	0x01312cff
 8014ac0:	014ca43f 	.word	0x014ca43f
 8014ac4:	016e3600 	.word	0x016e3600
 8014ac8:	01a6ab1f 	.word	0x01a6ab1f
 8014acc:	01e84800 	.word	0x01e84800

08014ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ad0:	b480      	push	{r7}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	689b      	ldr	r3, [r3, #8]
 8014adc:	f043 0201 	orr.w	r2, r3, #1
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ae4:	2300      	movs	r3, #0
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr

08014af2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014af2:	b480      	push	{r7}
 8014af4:	b083      	sub	sp, #12
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	f023 0201 	bic.w	r2, r3, #1
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014b06:	2300      	movs	r3, #0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	370c      	adds	r7, #12
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b12:	4770      	bx	lr

08014b14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014b20:	2300      	movs	r3, #0
 8014b22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	68db      	ldr	r3, [r3, #12]
 8014b28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014b30:	78fb      	ldrb	r3, [r7, #3]
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d115      	bne.n	8014b62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b42:	200a      	movs	r0, #10
 8014b44:	f7f2 fcc8 	bl	80074d8 <HAL_Delay>
      ms += 10U;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	330a      	adds	r3, #10
 8014b4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f001 f93b 	bl	8015dca <USB_GetMode>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d01e      	beq.n	8014b98 <USB_SetCurrentMode+0x84>
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b5e:	d9f0      	bls.n	8014b42 <USB_SetCurrentMode+0x2e>
 8014b60:	e01a      	b.n	8014b98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014b62:	78fb      	ldrb	r3, [r7, #3]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d115      	bne.n	8014b94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014b74:	200a      	movs	r0, #10
 8014b76:	f7f2 fcaf 	bl	80074d8 <HAL_Delay>
      ms += 10U;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	330a      	adds	r3, #10
 8014b7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f001 f922 	bl	8015dca <USB_GetMode>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d005      	beq.n	8014b98 <USB_SetCurrentMode+0x84>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014b90:	d9f0      	bls.n	8014b74 <USB_SetCurrentMode+0x60>
 8014b92:	e001      	b.n	8014b98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014b94:	2301      	movs	r3, #1
 8014b96:	e005      	b.n	8014ba4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8014b9c:	d101      	bne.n	8014ba2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	e000      	b.n	8014ba4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014ba2:	2300      	movs	r3, #0
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3710      	adds	r7, #16
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}

08014bac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014bac:	b084      	sub	sp, #16
 8014bae:	b580      	push	{r7, lr}
 8014bb0:	b086      	sub	sp, #24
 8014bb2:	af00      	add	r7, sp, #0
 8014bb4:	6078      	str	r0, [r7, #4]
 8014bb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	613b      	str	r3, [r7, #16]
 8014bca:	e009      	b.n	8014be0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	3340      	adds	r3, #64	@ 0x40
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	4413      	add	r3, r2
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	3301      	adds	r3, #1
 8014bde:	613b      	str	r3, [r7, #16]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	2b0e      	cmp	r3, #14
 8014be4:	d9f2      	bls.n	8014bcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014be6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d11c      	bne.n	8014c28 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	68fa      	ldr	r2, [r7, #12]
 8014bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014bfc:	f043 0302 	orr.w	r3, r3, #2
 8014c00:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c06:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	601a      	str	r2, [r3, #0]
 8014c26:	e005      	b.n	8014c34 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d10d      	bne.n	8014c64 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d104      	bne.n	8014c5a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014c50:	2100      	movs	r1, #0
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 f968 	bl	8014f28 <USB_SetDevSpeed>
 8014c58:	e008      	b.n	8014c6c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014c5a:	2101      	movs	r1, #1
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f000 f963 	bl	8014f28 <USB_SetDevSpeed>
 8014c62:	e003      	b.n	8014c6c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014c64:	2103      	movs	r1, #3
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 f95e 	bl	8014f28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014c6c:	2110      	movs	r1, #16
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 f8fa 	bl	8014e68 <USB_FlushTxFifo>
 8014c74:	4603      	mov	r3, r0
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f000 f924 	bl	8014ecc <USB_FlushRxFifo>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d001      	beq.n	8014c8e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014c94:	461a      	mov	r2, r3
 8014c96:	2300      	movs	r3, #0
 8014c98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cac:	461a      	mov	r2, r3
 8014cae:	2300      	movs	r3, #0
 8014cb0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	613b      	str	r3, [r7, #16]
 8014cb6:	e043      	b.n	8014d40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	015a      	lsls	r2, r3, #5
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014cce:	d118      	bne.n	8014d02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10a      	bne.n	8014cec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	015a      	lsls	r2, r3, #5
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	4413      	add	r3, r2
 8014cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014ce8:	6013      	str	r3, [r2, #0]
 8014cea:	e013      	b.n	8014d14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	015a      	lsls	r2, r3, #5
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014cfe:	6013      	str	r3, [r2, #0]
 8014d00:	e008      	b.n	8014d14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	015a      	lsls	r2, r3, #5
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	4413      	add	r3, r2
 8014d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d0e:	461a      	mov	r2, r3
 8014d10:	2300      	movs	r3, #0
 8014d12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	015a      	lsls	r2, r3, #5
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d20:	461a      	mov	r2, r3
 8014d22:	2300      	movs	r3, #0
 8014d24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	015a      	lsls	r2, r3, #5
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	4413      	add	r3, r2
 8014d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d32:	461a      	mov	r2, r3
 8014d34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	613b      	str	r3, [r7, #16]
 8014d40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014d44:	461a      	mov	r2, r3
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d3b5      	bcc.n	8014cb8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	613b      	str	r3, [r7, #16]
 8014d50:	e043      	b.n	8014dda <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	015a      	lsls	r2, r3, #5
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	4413      	add	r3, r2
 8014d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014d68:	d118      	bne.n	8014d9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d10a      	bne.n	8014d86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014d70:	693b      	ldr	r3, [r7, #16]
 8014d72:	015a      	lsls	r2, r3, #5
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	4413      	add	r3, r2
 8014d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014d82:	6013      	str	r3, [r2, #0]
 8014d84:	e013      	b.n	8014dae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	015a      	lsls	r2, r3, #5
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d92:	461a      	mov	r2, r3
 8014d94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014d98:	6013      	str	r3, [r2, #0]
 8014d9a:	e008      	b.n	8014dae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	015a      	lsls	r2, r3, #5
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	4413      	add	r3, r2
 8014da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014da8:	461a      	mov	r2, r3
 8014daa:	2300      	movs	r3, #0
 8014dac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	015a      	lsls	r2, r3, #5
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	4413      	add	r3, r2
 8014db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dba:	461a      	mov	r2, r3
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	015a      	lsls	r2, r3, #5
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	4413      	add	r3, r2
 8014dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dcc:	461a      	mov	r2, r3
 8014dce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014dd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	613b      	str	r3, [r7, #16]
 8014dda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014dde:	461a      	mov	r2, r3
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d3b5      	bcc.n	8014d52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014dec:	691b      	ldr	r3, [r3, #16]
 8014dee:	68fa      	ldr	r2, [r7, #12]
 8014df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014df8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014e06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014e08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d105      	bne.n	8014e1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	699b      	ldr	r3, [r3, #24]
 8014e14:	f043 0210 	orr.w	r2, r3, #16
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	699a      	ldr	r2, [r3, #24]
 8014e20:	4b0f      	ldr	r3, [pc, #60]	@ (8014e60 <USB_DevInit+0x2b4>)
 8014e22:	4313      	orrs	r3, r2
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014e28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d005      	beq.n	8014e3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	699b      	ldr	r3, [r3, #24]
 8014e34:	f043 0208 	orr.w	r2, r3, #8
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014e3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d105      	bne.n	8014e50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	699a      	ldr	r2, [r3, #24]
 8014e48:	4b06      	ldr	r3, [pc, #24]	@ (8014e64 <USB_DevInit+0x2b8>)
 8014e4a:	4313      	orrs	r3, r2
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3718      	adds	r7, #24
 8014e56:	46bd      	mov	sp, r7
 8014e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e5c:	b004      	add	sp, #16
 8014e5e:	4770      	bx	lr
 8014e60:	803c3800 	.word	0x803c3800
 8014e64:	40000004 	.word	0x40000004

08014e68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b085      	sub	sp, #20
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e72:	2300      	movs	r3, #0
 8014e74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014e82:	d901      	bls.n	8014e88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014e84:	2303      	movs	r3, #3
 8014e86:	e01b      	b.n	8014ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	691b      	ldr	r3, [r3, #16]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	daf2      	bge.n	8014e76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014e90:	2300      	movs	r3, #0
 8014e92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	019b      	lsls	r3, r3, #6
 8014e98:	f043 0220 	orr.w	r2, r3, #32
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014eac:	d901      	bls.n	8014eb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	e006      	b.n	8014ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	691b      	ldr	r3, [r3, #16]
 8014eb6:	f003 0320 	and.w	r3, r3, #32
 8014eba:	2b20      	cmp	r3, #32
 8014ebc:	d0f0      	beq.n	8014ea0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014ebe:	2300      	movs	r3, #0
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3714      	adds	r7, #20
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b085      	sub	sp, #20
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3301      	adds	r3, #1
 8014edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014ee4:	d901      	bls.n	8014eea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014ee6:	2303      	movs	r3, #3
 8014ee8:	e018      	b.n	8014f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	691b      	ldr	r3, [r3, #16]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	daf2      	bge.n	8014ed8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2210      	movs	r2, #16
 8014efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	3301      	adds	r3, #1
 8014f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014f08:	d901      	bls.n	8014f0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014f0a:	2303      	movs	r3, #3
 8014f0c:	e006      	b.n	8014f1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	691b      	ldr	r3, [r3, #16]
 8014f12:	f003 0310 	and.w	r3, r3, #16
 8014f16:	2b10      	cmp	r3, #16
 8014f18:	d0f0      	beq.n	8014efc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3714      	adds	r7, #20
 8014f20:	46bd      	mov	sp, r7
 8014f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f26:	4770      	bx	lr

08014f28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b085      	sub	sp, #20
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	460b      	mov	r3, r1
 8014f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f3e:	681a      	ldr	r2, [r3, #0]
 8014f40:	78fb      	ldrb	r3, [r7, #3]
 8014f42:	68f9      	ldr	r1, [r7, #12]
 8014f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014f48:	4313      	orrs	r3, r2
 8014f4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014f4c:	2300      	movs	r3, #0
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3714      	adds	r7, #20
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr

08014f5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8014f5a:	b480      	push	{r7}
 8014f5c:	b087      	sub	sp, #28
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014f6c:	689b      	ldr	r3, [r3, #8]
 8014f6e:	f003 0306 	and.w	r3, r3, #6
 8014f72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d102      	bne.n	8014f80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	75fb      	strb	r3, [r7, #23]
 8014f7e:	e00a      	b.n	8014f96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d002      	beq.n	8014f8c <USB_GetDevSpeed+0x32>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b06      	cmp	r3, #6
 8014f8a:	d102      	bne.n	8014f92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014f8c:	2302      	movs	r3, #2
 8014f8e:	75fb      	strb	r3, [r7, #23]
 8014f90:	e001      	b.n	8014f96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014f92:	230f      	movs	r3, #15
 8014f94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	371c      	adds	r7, #28
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr

08014fa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	785b      	ldrb	r3, [r3, #1]
 8014fbc:	2b01      	cmp	r3, #1
 8014fbe:	d139      	bne.n	8015034 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014fc6:	69da      	ldr	r2, [r3, #28]
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	f003 030f 	and.w	r3, r3, #15
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8014fd6:	b29b      	uxth	r3, r3
 8014fd8:	68f9      	ldr	r1, [r7, #12]
 8014fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	015a      	lsls	r2, r3, #5
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	4413      	add	r3, r2
 8014fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d153      	bne.n	80150a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	015a      	lsls	r2, r3, #5
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	4413      	add	r3, r2
 8015000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015004:	681a      	ldr	r2, [r3, #0]
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	689b      	ldr	r3, [r3, #8]
 801500a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	791b      	ldrb	r3, [r3, #4]
 8015012:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015014:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	059b      	lsls	r3, r3, #22
 801501a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801501c:	431a      	orrs	r2, r3
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	0159      	lsls	r1, r3, #5
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	440b      	add	r3, r1
 8015026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801502a:	4619      	mov	r1, r3
 801502c:	4b20      	ldr	r3, [pc, #128]	@ (80150b0 <USB_ActivateEndpoint+0x10c>)
 801502e:	4313      	orrs	r3, r2
 8015030:	600b      	str	r3, [r1, #0]
 8015032:	e035      	b.n	80150a0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801503a:	69da      	ldr	r2, [r3, #28]
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	f003 030f 	and.w	r3, r3, #15
 8015044:	2101      	movs	r1, #1
 8015046:	fa01 f303 	lsl.w	r3, r1, r3
 801504a:	041b      	lsls	r3, r3, #16
 801504c:	68f9      	ldr	r1, [r7, #12]
 801504e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015052:	4313      	orrs	r3, r2
 8015054:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	015a      	lsls	r2, r3, #5
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	4413      	add	r3, r2
 801505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015068:	2b00      	cmp	r3, #0
 801506a:	d119      	bne.n	80150a0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	015a      	lsls	r2, r3, #5
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	4413      	add	r3, r2
 8015074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	689b      	ldr	r3, [r3, #8]
 801507e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	791b      	ldrb	r3, [r3, #4]
 8015086:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015088:	430b      	orrs	r3, r1
 801508a:	431a      	orrs	r2, r3
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	0159      	lsls	r1, r3, #5
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	440b      	add	r3, r1
 8015094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015098:	4619      	mov	r1, r3
 801509a:	4b05      	ldr	r3, [pc, #20]	@ (80150b0 <USB_ActivateEndpoint+0x10c>)
 801509c:	4313      	orrs	r3, r2
 801509e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80150a0:	2300      	movs	r3, #0
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3714      	adds	r7, #20
 80150a6:	46bd      	mov	sp, r7
 80150a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ac:	4770      	bx	lr
 80150ae:	bf00      	nop
 80150b0:	10008000 	.word	0x10008000

080150b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80150b4:	b480      	push	{r7}
 80150b6:	b085      	sub	sp, #20
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	785b      	ldrb	r3, [r3, #1]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d161      	bne.n	8015194 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	015a      	lsls	r2, r3, #5
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	4413      	add	r3, r2
 80150d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150e6:	d11f      	bne.n	8015128 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	015a      	lsls	r2, r3, #5
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	4413      	add	r3, r2
 80150f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	68ba      	ldr	r2, [r7, #8]
 80150f8:	0151      	lsls	r1, r2, #5
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	440a      	add	r2, r1
 80150fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015102:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015106:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015108:	68bb      	ldr	r3, [r7, #8]
 801510a:	015a      	lsls	r2, r3, #5
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	4413      	add	r3, r2
 8015110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	0151      	lsls	r1, r2, #5
 801511a:	68fa      	ldr	r2, [r7, #12]
 801511c:	440a      	add	r2, r1
 801511e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015126:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801512e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	781b      	ldrb	r3, [r3, #0]
 8015134:	f003 030f 	and.w	r3, r3, #15
 8015138:	2101      	movs	r1, #1
 801513a:	fa01 f303 	lsl.w	r3, r1, r3
 801513e:	b29b      	uxth	r3, r3
 8015140:	43db      	mvns	r3, r3
 8015142:	68f9      	ldr	r1, [r7, #12]
 8015144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015148:	4013      	ands	r3, r2
 801514a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015152:	69da      	ldr	r2, [r3, #28]
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	f003 030f 	and.w	r3, r3, #15
 801515c:	2101      	movs	r1, #1
 801515e:	fa01 f303 	lsl.w	r3, r1, r3
 8015162:	b29b      	uxth	r3, r3
 8015164:	43db      	mvns	r3, r3
 8015166:	68f9      	ldr	r1, [r7, #12]
 8015168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801516c:	4013      	ands	r3, r2
 801516e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	015a      	lsls	r2, r3, #5
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	4413      	add	r3, r2
 8015178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	0159      	lsls	r1, r3, #5
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	440b      	add	r3, r1
 8015186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801518a:	4619      	mov	r1, r3
 801518c:	4b35      	ldr	r3, [pc, #212]	@ (8015264 <USB_DeactivateEndpoint+0x1b0>)
 801518e:	4013      	ands	r3, r2
 8015190:	600b      	str	r3, [r1, #0]
 8015192:	e060      	b.n	8015256 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	015a      	lsls	r2, r3, #5
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	4413      	add	r3, r2
 801519c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80151a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80151aa:	d11f      	bne.n	80151ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	015a      	lsls	r2, r3, #5
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	4413      	add	r3, r2
 80151b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	68ba      	ldr	r2, [r7, #8]
 80151bc:	0151      	lsls	r1, r2, #5
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	440a      	add	r2, r1
 80151c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80151ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	015a      	lsls	r2, r3, #5
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	4413      	add	r3, r2
 80151d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	0151      	lsls	r1, r2, #5
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	440a      	add	r2, r1
 80151e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80151ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80151f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	f003 030f 	and.w	r3, r3, #15
 80151fc:	2101      	movs	r1, #1
 80151fe:	fa01 f303 	lsl.w	r3, r1, r3
 8015202:	041b      	lsls	r3, r3, #16
 8015204:	43db      	mvns	r3, r3
 8015206:	68f9      	ldr	r1, [r7, #12]
 8015208:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801520c:	4013      	ands	r3, r2
 801520e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015216:	69da      	ldr	r2, [r3, #28]
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	781b      	ldrb	r3, [r3, #0]
 801521c:	f003 030f 	and.w	r3, r3, #15
 8015220:	2101      	movs	r1, #1
 8015222:	fa01 f303 	lsl.w	r3, r1, r3
 8015226:	041b      	lsls	r3, r3, #16
 8015228:	43db      	mvns	r3, r3
 801522a:	68f9      	ldr	r1, [r7, #12]
 801522c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015230:	4013      	ands	r3, r2
 8015232:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	015a      	lsls	r2, r3, #5
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	4413      	add	r3, r2
 801523c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	0159      	lsls	r1, r3, #5
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	440b      	add	r3, r1
 801524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801524e:	4619      	mov	r1, r3
 8015250:	4b05      	ldr	r3, [pc, #20]	@ (8015268 <USB_DeactivateEndpoint+0x1b4>)
 8015252:	4013      	ands	r3, r2
 8015254:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015256:	2300      	movs	r3, #0
}
 8015258:	4618      	mov	r0, r3
 801525a:	3714      	adds	r7, #20
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	ec337800 	.word	0xec337800
 8015268:	eff37800 	.word	0xeff37800

0801526c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b08a      	sub	sp, #40	@ 0x28
 8015270:	af02      	add	r7, sp, #8
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	4613      	mov	r3, r2
 8015278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	785b      	ldrb	r3, [r3, #1]
 8015288:	2b01      	cmp	r3, #1
 801528a:	f040 8181 	bne.w	8015590 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	691b      	ldr	r3, [r3, #16]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d132      	bne.n	80152fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	015a      	lsls	r2, r3, #5
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	4413      	add	r3, r2
 801529e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152a2:	691a      	ldr	r2, [r3, #16]
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	0159      	lsls	r1, r3, #5
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	440b      	add	r3, r1
 80152ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152b0:	4619      	mov	r1, r3
 80152b2:	4ba5      	ldr	r3, [pc, #660]	@ (8015548 <USB_EPStartXfer+0x2dc>)
 80152b4:	4013      	ands	r3, r2
 80152b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	015a      	lsls	r2, r3, #5
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	4413      	add	r3, r2
 80152c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	69ba      	ldr	r2, [r7, #24]
 80152c8:	0151      	lsls	r1, r2, #5
 80152ca:	69fa      	ldr	r2, [r7, #28]
 80152cc:	440a      	add	r2, r1
 80152ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80152d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	015a      	lsls	r2, r3, #5
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	4413      	add	r3, r2
 80152e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152e4:	691a      	ldr	r2, [r3, #16]
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	0159      	lsls	r1, r3, #5
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	440b      	add	r3, r1
 80152ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152f2:	4619      	mov	r1, r3
 80152f4:	4b95      	ldr	r3, [pc, #596]	@ (801554c <USB_EPStartXfer+0x2e0>)
 80152f6:	4013      	ands	r3, r2
 80152f8:	610b      	str	r3, [r1, #16]
 80152fa:	e092      	b.n	8015422 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	015a      	lsls	r2, r3, #5
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	4413      	add	r3, r2
 8015304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015308:	691a      	ldr	r2, [r3, #16]
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	0159      	lsls	r1, r3, #5
 801530e:	69fb      	ldr	r3, [r7, #28]
 8015310:	440b      	add	r3, r1
 8015312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015316:	4619      	mov	r1, r3
 8015318:	4b8c      	ldr	r3, [pc, #560]	@ (801554c <USB_EPStartXfer+0x2e0>)
 801531a:	4013      	ands	r3, r2
 801531c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801531e:	69bb      	ldr	r3, [r7, #24]
 8015320:	015a      	lsls	r2, r3, #5
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	4413      	add	r3, r2
 8015326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801532a:	691a      	ldr	r2, [r3, #16]
 801532c:	69bb      	ldr	r3, [r7, #24]
 801532e:	0159      	lsls	r1, r3, #5
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	440b      	add	r3, r1
 8015334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015338:	4619      	mov	r1, r3
 801533a:	4b83      	ldr	r3, [pc, #524]	@ (8015548 <USB_EPStartXfer+0x2dc>)
 801533c:	4013      	ands	r3, r2
 801533e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015340:	69bb      	ldr	r3, [r7, #24]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d11a      	bne.n	801537c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	691a      	ldr	r2, [r3, #16]
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	689b      	ldr	r3, [r3, #8]
 801534e:	429a      	cmp	r2, r3
 8015350:	d903      	bls.n	801535a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	689a      	ldr	r2, [r3, #8]
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801535a:	69bb      	ldr	r3, [r7, #24]
 801535c:	015a      	lsls	r2, r3, #5
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	4413      	add	r3, r2
 8015362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015366:	691b      	ldr	r3, [r3, #16]
 8015368:	69ba      	ldr	r2, [r7, #24]
 801536a:	0151      	lsls	r1, r2, #5
 801536c:	69fa      	ldr	r2, [r7, #28]
 801536e:	440a      	add	r2, r1
 8015370:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015378:	6113      	str	r3, [r2, #16]
 801537a:	e01b      	b.n	80153b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	015a      	lsls	r2, r3, #5
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	4413      	add	r3, r2
 8015384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015388:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	6919      	ldr	r1, [r3, #16]
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	440b      	add	r3, r1
 8015394:	1e59      	subs	r1, r3, #1
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	689b      	ldr	r3, [r3, #8]
 801539a:	fbb1 f3f3 	udiv	r3, r1, r3
 801539e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80153a0:	4b6b      	ldr	r3, [pc, #428]	@ (8015550 <USB_EPStartXfer+0x2e4>)
 80153a2:	400b      	ands	r3, r1
 80153a4:	69b9      	ldr	r1, [r7, #24]
 80153a6:	0148      	lsls	r0, r1, #5
 80153a8:	69f9      	ldr	r1, [r7, #28]
 80153aa:	4401      	add	r1, r0
 80153ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80153b0:	4313      	orrs	r3, r2
 80153b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80153b4:	69bb      	ldr	r3, [r7, #24]
 80153b6:	015a      	lsls	r2, r3, #5
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	4413      	add	r3, r2
 80153bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153c0:	691a      	ldr	r2, [r3, #16]
 80153c2:	68bb      	ldr	r3, [r7, #8]
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80153ca:	69b9      	ldr	r1, [r7, #24]
 80153cc:	0148      	lsls	r0, r1, #5
 80153ce:	69f9      	ldr	r1, [r7, #28]
 80153d0:	4401      	add	r1, r0
 80153d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80153d6:	4313      	orrs	r3, r2
 80153d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	791b      	ldrb	r3, [r3, #4]
 80153de:	2b01      	cmp	r3, #1
 80153e0:	d11f      	bne.n	8015422 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	015a      	lsls	r2, r3, #5
 80153e6:	69fb      	ldr	r3, [r7, #28]
 80153e8:	4413      	add	r3, r2
 80153ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153ee:	691b      	ldr	r3, [r3, #16]
 80153f0:	69ba      	ldr	r2, [r7, #24]
 80153f2:	0151      	lsls	r1, r2, #5
 80153f4:	69fa      	ldr	r2, [r7, #28]
 80153f6:	440a      	add	r2, r1
 80153f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153fc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8015400:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015402:	69bb      	ldr	r3, [r7, #24]
 8015404:	015a      	lsls	r2, r3, #5
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	4413      	add	r3, r2
 801540a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	69ba      	ldr	r2, [r7, #24]
 8015412:	0151      	lsls	r1, r2, #5
 8015414:	69fa      	ldr	r2, [r7, #28]
 8015416:	440a      	add	r2, r1
 8015418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801541c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015420:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015422:	79fb      	ldrb	r3, [r7, #7]
 8015424:	2b01      	cmp	r3, #1
 8015426:	d14b      	bne.n	80154c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	69db      	ldr	r3, [r3, #28]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d009      	beq.n	8015444 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015430:	69bb      	ldr	r3, [r7, #24]
 8015432:	015a      	lsls	r2, r3, #5
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	4413      	add	r3, r2
 8015438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801543c:	461a      	mov	r2, r3
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	69db      	ldr	r3, [r3, #28]
 8015442:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015444:	68bb      	ldr	r3, [r7, #8]
 8015446:	791b      	ldrb	r3, [r3, #4]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d128      	bne.n	801549e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015458:	2b00      	cmp	r3, #0
 801545a:	d110      	bne.n	801547e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	015a      	lsls	r2, r3, #5
 8015460:	69fb      	ldr	r3, [r7, #28]
 8015462:	4413      	add	r3, r2
 8015464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	69ba      	ldr	r2, [r7, #24]
 801546c:	0151      	lsls	r1, r2, #5
 801546e:	69fa      	ldr	r2, [r7, #28]
 8015470:	440a      	add	r2, r1
 8015472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015476:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801547a:	6013      	str	r3, [r2, #0]
 801547c:	e00f      	b.n	801549e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	015a      	lsls	r2, r3, #5
 8015482:	69fb      	ldr	r3, [r7, #28]
 8015484:	4413      	add	r3, r2
 8015486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	69ba      	ldr	r2, [r7, #24]
 801548e:	0151      	lsls	r1, r2, #5
 8015490:	69fa      	ldr	r2, [r7, #28]
 8015492:	440a      	add	r2, r1
 8015494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801549c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	015a      	lsls	r2, r3, #5
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	4413      	add	r3, r2
 80154a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	69ba      	ldr	r2, [r7, #24]
 80154ae:	0151      	lsls	r1, r2, #5
 80154b0:	69fa      	ldr	r2, [r7, #28]
 80154b2:	440a      	add	r2, r1
 80154b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80154bc:	6013      	str	r3, [r2, #0]
 80154be:	e16a      	b.n	8015796 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	015a      	lsls	r2, r3, #5
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	4413      	add	r3, r2
 80154c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	69ba      	ldr	r2, [r7, #24]
 80154d0:	0151      	lsls	r1, r2, #5
 80154d2:	69fa      	ldr	r2, [r7, #28]
 80154d4:	440a      	add	r2, r1
 80154d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80154de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	791b      	ldrb	r3, [r3, #4]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d015      	beq.n	8015514 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	691b      	ldr	r3, [r3, #16]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	f000 8152 	beq.w	8015796 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80154f2:	69fb      	ldr	r3, [r7, #28]
 80154f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	f003 030f 	and.w	r3, r3, #15
 8015502:	2101      	movs	r1, #1
 8015504:	fa01 f303 	lsl.w	r3, r1, r3
 8015508:	69f9      	ldr	r1, [r7, #28]
 801550a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801550e:	4313      	orrs	r3, r2
 8015510:	634b      	str	r3, [r1, #52]	@ 0x34
 8015512:	e140      	b.n	8015796 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015514:	69fb      	ldr	r3, [r7, #28]
 8015516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801551a:	689b      	ldr	r3, [r3, #8]
 801551c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015520:	2b00      	cmp	r3, #0
 8015522:	d117      	bne.n	8015554 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	015a      	lsls	r2, r3, #5
 8015528:	69fb      	ldr	r3, [r7, #28]
 801552a:	4413      	add	r3, r2
 801552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	69ba      	ldr	r2, [r7, #24]
 8015534:	0151      	lsls	r1, r2, #5
 8015536:	69fa      	ldr	r2, [r7, #28]
 8015538:	440a      	add	r2, r1
 801553a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801553e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015542:	6013      	str	r3, [r2, #0]
 8015544:	e016      	b.n	8015574 <USB_EPStartXfer+0x308>
 8015546:	bf00      	nop
 8015548:	e007ffff 	.word	0xe007ffff
 801554c:	fff80000 	.word	0xfff80000
 8015550:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015554:	69bb      	ldr	r3, [r7, #24]
 8015556:	015a      	lsls	r2, r3, #5
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	4413      	add	r3, r2
 801555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	69ba      	ldr	r2, [r7, #24]
 8015564:	0151      	lsls	r1, r2, #5
 8015566:	69fa      	ldr	r2, [r7, #28]
 8015568:	440a      	add	r2, r1
 801556a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801556e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015572:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	68d9      	ldr	r1, [r3, #12]
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	781a      	ldrb	r2, [r3, #0]
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	691b      	ldr	r3, [r3, #16]
 8015580:	b298      	uxth	r0, r3
 8015582:	79fb      	ldrb	r3, [r7, #7]
 8015584:	9300      	str	r3, [sp, #0]
 8015586:	4603      	mov	r3, r0
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f000 f9b9 	bl	8015900 <USB_WritePacket>
 801558e:	e102      	b.n	8015796 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	015a      	lsls	r2, r3, #5
 8015594:	69fb      	ldr	r3, [r7, #28]
 8015596:	4413      	add	r3, r2
 8015598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801559c:	691a      	ldr	r2, [r3, #16]
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	0159      	lsls	r1, r3, #5
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	440b      	add	r3, r1
 80155a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155aa:	4619      	mov	r1, r3
 80155ac:	4b7c      	ldr	r3, [pc, #496]	@ (80157a0 <USB_EPStartXfer+0x534>)
 80155ae:	4013      	ands	r3, r2
 80155b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	015a      	lsls	r2, r3, #5
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	4413      	add	r3, r2
 80155ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155be:	691a      	ldr	r2, [r3, #16]
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	0159      	lsls	r1, r3, #5
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	440b      	add	r3, r1
 80155c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155cc:	4619      	mov	r1, r3
 80155ce:	4b75      	ldr	r3, [pc, #468]	@ (80157a4 <USB_EPStartXfer+0x538>)
 80155d0:	4013      	ands	r3, r2
 80155d2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d12f      	bne.n	801563a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	691b      	ldr	r3, [r3, #16]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d003      	beq.n	80155ea <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	689a      	ldr	r2, [r3, #8]
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	689a      	ldr	r2, [r3, #8]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80155f2:	69bb      	ldr	r3, [r7, #24]
 80155f4:	015a      	lsls	r2, r3, #5
 80155f6:	69fb      	ldr	r3, [r7, #28]
 80155f8:	4413      	add	r3, r2
 80155fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155fe:	691a      	ldr	r2, [r3, #16]
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	6a1b      	ldr	r3, [r3, #32]
 8015604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015608:	69b9      	ldr	r1, [r7, #24]
 801560a:	0148      	lsls	r0, r1, #5
 801560c:	69f9      	ldr	r1, [r7, #28]
 801560e:	4401      	add	r1, r0
 8015610:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015614:	4313      	orrs	r3, r2
 8015616:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	015a      	lsls	r2, r3, #5
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	4413      	add	r3, r2
 8015620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015624:	691b      	ldr	r3, [r3, #16]
 8015626:	69ba      	ldr	r2, [r7, #24]
 8015628:	0151      	lsls	r1, r2, #5
 801562a:	69fa      	ldr	r2, [r7, #28]
 801562c:	440a      	add	r2, r1
 801562e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015636:	6113      	str	r3, [r2, #16]
 8015638:	e05f      	b.n	80156fa <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	691b      	ldr	r3, [r3, #16]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d123      	bne.n	801568a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015642:	69bb      	ldr	r3, [r7, #24]
 8015644:	015a      	lsls	r2, r3, #5
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	4413      	add	r3, r2
 801564a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801564e:	691a      	ldr	r2, [r3, #16]
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	689b      	ldr	r3, [r3, #8]
 8015654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015658:	69b9      	ldr	r1, [r7, #24]
 801565a:	0148      	lsls	r0, r1, #5
 801565c:	69f9      	ldr	r1, [r7, #28]
 801565e:	4401      	add	r1, r0
 8015660:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015664:	4313      	orrs	r3, r2
 8015666:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	015a      	lsls	r2, r3, #5
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	4413      	add	r3, r2
 8015670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015674:	691b      	ldr	r3, [r3, #16]
 8015676:	69ba      	ldr	r2, [r7, #24]
 8015678:	0151      	lsls	r1, r2, #5
 801567a:	69fa      	ldr	r2, [r7, #28]
 801567c:	440a      	add	r2, r1
 801567e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015686:	6113      	str	r3, [r2, #16]
 8015688:	e037      	b.n	80156fa <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	691a      	ldr	r2, [r3, #16]
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	4413      	add	r3, r2
 8015694:	1e5a      	subs	r2, r3, #1
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	689b      	ldr	r3, [r3, #8]
 801569a:	fbb2 f3f3 	udiv	r3, r2, r3
 801569e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	689b      	ldr	r3, [r3, #8]
 80156a4:	8afa      	ldrh	r2, [r7, #22]
 80156a6:	fb03 f202 	mul.w	r2, r3, r2
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	015a      	lsls	r2, r3, #5
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	4413      	add	r3, r2
 80156b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156ba:	691a      	ldr	r2, [r3, #16]
 80156bc:	8afb      	ldrh	r3, [r7, #22]
 80156be:	04d9      	lsls	r1, r3, #19
 80156c0:	4b39      	ldr	r3, [pc, #228]	@ (80157a8 <USB_EPStartXfer+0x53c>)
 80156c2:	400b      	ands	r3, r1
 80156c4:	69b9      	ldr	r1, [r7, #24]
 80156c6:	0148      	lsls	r0, r1, #5
 80156c8:	69f9      	ldr	r1, [r7, #28]
 80156ca:	4401      	add	r1, r0
 80156cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80156d0:	4313      	orrs	r3, r2
 80156d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80156d4:	69bb      	ldr	r3, [r7, #24]
 80156d6:	015a      	lsls	r2, r3, #5
 80156d8:	69fb      	ldr	r3, [r7, #28]
 80156da:	4413      	add	r3, r2
 80156dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156e0:	691a      	ldr	r2, [r3, #16]
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	6a1b      	ldr	r3, [r3, #32]
 80156e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80156ea:	69b9      	ldr	r1, [r7, #24]
 80156ec:	0148      	lsls	r0, r1, #5
 80156ee:	69f9      	ldr	r1, [r7, #28]
 80156f0:	4401      	add	r1, r0
 80156f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80156f6:	4313      	orrs	r3, r2
 80156f8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80156fa:	79fb      	ldrb	r3, [r7, #7]
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d10d      	bne.n	801571c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d009      	beq.n	801571c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	68d9      	ldr	r1, [r3, #12]
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	015a      	lsls	r2, r3, #5
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	4413      	add	r3, r2
 8015714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015718:	460a      	mov	r2, r1
 801571a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	791b      	ldrb	r3, [r3, #4]
 8015720:	2b01      	cmp	r3, #1
 8015722:	d128      	bne.n	8015776 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801572a:	689b      	ldr	r3, [r3, #8]
 801572c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015730:	2b00      	cmp	r3, #0
 8015732:	d110      	bne.n	8015756 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015734:	69bb      	ldr	r3, [r7, #24]
 8015736:	015a      	lsls	r2, r3, #5
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	4413      	add	r3, r2
 801573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	69ba      	ldr	r2, [r7, #24]
 8015744:	0151      	lsls	r1, r2, #5
 8015746:	69fa      	ldr	r2, [r7, #28]
 8015748:	440a      	add	r2, r1
 801574a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801574e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015752:	6013      	str	r3, [r2, #0]
 8015754:	e00f      	b.n	8015776 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015756:	69bb      	ldr	r3, [r7, #24]
 8015758:	015a      	lsls	r2, r3, #5
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	4413      	add	r3, r2
 801575e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	69ba      	ldr	r2, [r7, #24]
 8015766:	0151      	lsls	r1, r2, #5
 8015768:	69fa      	ldr	r2, [r7, #28]
 801576a:	440a      	add	r2, r1
 801576c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015774:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	015a      	lsls	r2, r3, #5
 801577a:	69fb      	ldr	r3, [r7, #28]
 801577c:	4413      	add	r3, r2
 801577e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	69ba      	ldr	r2, [r7, #24]
 8015786:	0151      	lsls	r1, r2, #5
 8015788:	69fa      	ldr	r2, [r7, #28]
 801578a:	440a      	add	r2, r1
 801578c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015790:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015794:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3720      	adds	r7, #32
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	fff80000 	.word	0xfff80000
 80157a4:	e007ffff 	.word	0xe007ffff
 80157a8:	1ff80000 	.word	0x1ff80000

080157ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b087      	sub	sp, #28
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80157b6:	2300      	movs	r3, #0
 80157b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80157ba:	2300      	movs	r3, #0
 80157bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	785b      	ldrb	r3, [r3, #1]
 80157c6:	2b01      	cmp	r3, #1
 80157c8:	d14a      	bne.n	8015860 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	015a      	lsls	r2, r3, #5
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	4413      	add	r3, r2
 80157d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80157de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80157e2:	f040 8086 	bne.w	80158f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	781b      	ldrb	r3, [r3, #0]
 80157ea:	015a      	lsls	r2, r3, #5
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	4413      	add	r3, r2
 80157f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	683a      	ldr	r2, [r7, #0]
 80157f8:	7812      	ldrb	r2, [r2, #0]
 80157fa:	0151      	lsls	r1, r2, #5
 80157fc:	693a      	ldr	r2, [r7, #16]
 80157fe:	440a      	add	r2, r1
 8015800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015804:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015808:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	015a      	lsls	r2, r3, #5
 8015810:	693b      	ldr	r3, [r7, #16]
 8015812:	4413      	add	r3, r2
 8015814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	683a      	ldr	r2, [r7, #0]
 801581c:	7812      	ldrb	r2, [r2, #0]
 801581e:	0151      	lsls	r1, r2, #5
 8015820:	693a      	ldr	r2, [r7, #16]
 8015822:	440a      	add	r2, r1
 8015824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801582c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	3301      	adds	r3, #1
 8015832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f242 7210 	movw	r2, #10000	@ 0x2710
 801583a:	4293      	cmp	r3, r2
 801583c:	d902      	bls.n	8015844 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801583e:	2301      	movs	r3, #1
 8015840:	75fb      	strb	r3, [r7, #23]
          break;
 8015842:	e056      	b.n	80158f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	015a      	lsls	r2, r3, #5
 801584a:	693b      	ldr	r3, [r7, #16]
 801584c:	4413      	add	r3, r2
 801584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801585c:	d0e7      	beq.n	801582e <USB_EPStopXfer+0x82>
 801585e:	e048      	b.n	80158f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	015a      	lsls	r2, r3, #5
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	4413      	add	r3, r2
 801586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015878:	d13b      	bne.n	80158f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	015a      	lsls	r2, r3, #5
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	4413      	add	r3, r2
 8015884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	7812      	ldrb	r2, [r2, #0]
 801588e:	0151      	lsls	r1, r2, #5
 8015890:	693a      	ldr	r2, [r7, #16]
 8015892:	440a      	add	r2, r1
 8015894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015898:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801589c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	015a      	lsls	r2, r3, #5
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	4413      	add	r3, r2
 80158a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	683a      	ldr	r2, [r7, #0]
 80158b0:	7812      	ldrb	r2, [r2, #0]
 80158b2:	0151      	lsls	r1, r2, #5
 80158b4:	693a      	ldr	r2, [r7, #16]
 80158b6:	440a      	add	r2, r1
 80158b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80158bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80158c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	3301      	adds	r3, #1
 80158c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80158ce:	4293      	cmp	r3, r2
 80158d0:	d902      	bls.n	80158d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80158d2:	2301      	movs	r3, #1
 80158d4:	75fb      	strb	r3, [r7, #23]
          break;
 80158d6:	e00c      	b.n	80158f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	015a      	lsls	r2, r3, #5
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	4413      	add	r3, r2
 80158e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80158ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80158f0:	d0e7      	beq.n	80158c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	371c      	adds	r7, #28
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015900:	b480      	push	{r7}
 8015902:	b089      	sub	sp, #36	@ 0x24
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	4611      	mov	r1, r2
 801590c:	461a      	mov	r2, r3
 801590e:	460b      	mov	r3, r1
 8015910:	71fb      	strb	r3, [r7, #7]
 8015912:	4613      	mov	r3, r2
 8015914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801591a:	68bb      	ldr	r3, [r7, #8]
 801591c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801591e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015922:	2b00      	cmp	r3, #0
 8015924:	d123      	bne.n	801596e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015926:	88bb      	ldrh	r3, [r7, #4]
 8015928:	3303      	adds	r3, #3
 801592a:	089b      	lsrs	r3, r3, #2
 801592c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801592e:	2300      	movs	r3, #0
 8015930:	61bb      	str	r3, [r7, #24]
 8015932:	e018      	b.n	8015966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015934:	79fb      	ldrb	r3, [r7, #7]
 8015936:	031a      	lsls	r2, r3, #12
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	4413      	add	r3, r2
 801593c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015940:	461a      	mov	r2, r3
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015948:	69fb      	ldr	r3, [r7, #28]
 801594a:	3301      	adds	r3, #1
 801594c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	3301      	adds	r3, #1
 8015952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	3301      	adds	r3, #1
 8015958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	3301      	adds	r3, #1
 801595e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015960:	69bb      	ldr	r3, [r7, #24]
 8015962:	3301      	adds	r3, #1
 8015964:	61bb      	str	r3, [r7, #24]
 8015966:	69ba      	ldr	r2, [r7, #24]
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	429a      	cmp	r2, r3
 801596c:	d3e2      	bcc.n	8015934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801596e:	2300      	movs	r3, #0
}
 8015970:	4618      	mov	r0, r3
 8015972:	3724      	adds	r7, #36	@ 0x24
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr

0801597c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801597c:	b480      	push	{r7}
 801597e:	b08b      	sub	sp, #44	@ 0x2c
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	4613      	mov	r3, r2
 8015988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015992:	88fb      	ldrh	r3, [r7, #6]
 8015994:	089b      	lsrs	r3, r3, #2
 8015996:	b29b      	uxth	r3, r3
 8015998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801599a:	88fb      	ldrh	r3, [r7, #6]
 801599c:	f003 0303 	and.w	r3, r3, #3
 80159a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80159a2:	2300      	movs	r3, #0
 80159a4:	623b      	str	r3, [r7, #32]
 80159a6:	e014      	b.n	80159d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80159b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b6:	3301      	adds	r3, #1
 80159b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80159ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159bc:	3301      	adds	r3, #1
 80159be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80159c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c2:	3301      	adds	r3, #1
 80159c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80159c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c8:	3301      	adds	r3, #1
 80159ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80159cc:	6a3b      	ldr	r3, [r7, #32]
 80159ce:	3301      	adds	r3, #1
 80159d0:	623b      	str	r3, [r7, #32]
 80159d2:	6a3a      	ldr	r2, [r7, #32]
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d3e6      	bcc.n	80159a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80159da:	8bfb      	ldrh	r3, [r7, #30]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d01e      	beq.n	8015a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80159e0:	2300      	movs	r3, #0
 80159e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80159e4:	69bb      	ldr	r3, [r7, #24]
 80159e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159ea:	461a      	mov	r2, r3
 80159ec:	f107 0310 	add.w	r3, r7, #16
 80159f0:	6812      	ldr	r2, [r2, #0]
 80159f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80159f4:	693a      	ldr	r2, [r7, #16]
 80159f6:	6a3b      	ldr	r3, [r7, #32]
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	00db      	lsls	r3, r3, #3
 80159fc:	fa22 f303 	lsr.w	r3, r2, r3
 8015a00:	b2da      	uxtb	r2, r3
 8015a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a04:	701a      	strb	r2, [r3, #0]
      i++;
 8015a06:	6a3b      	ldr	r3, [r7, #32]
 8015a08:	3301      	adds	r3, #1
 8015a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8015a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0e:	3301      	adds	r3, #1
 8015a10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8015a12:	8bfb      	ldrh	r3, [r7, #30]
 8015a14:	3b01      	subs	r3, #1
 8015a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015a18:	8bfb      	ldrh	r3, [r7, #30]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d1ea      	bne.n	80159f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	372c      	adds	r7, #44	@ 0x2c
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b085      	sub	sp, #20
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	785b      	ldrb	r3, [r3, #1]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d12c      	bne.n	8015aa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	015a      	lsls	r2, r3, #5
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	4413      	add	r3, r2
 8015a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	db12      	blt.n	8015a80 <USB_EPSetStall+0x54>
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00f      	beq.n	8015a80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	015a      	lsls	r2, r3, #5
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	4413      	add	r3, r2
 8015a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	0151      	lsls	r1, r2, #5
 8015a72:	68fa      	ldr	r2, [r7, #12]
 8015a74:	440a      	add	r2, r1
 8015a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015a7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	015a      	lsls	r2, r3, #5
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	68ba      	ldr	r2, [r7, #8]
 8015a90:	0151      	lsls	r1, r2, #5
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	440a      	add	r2, r1
 8015a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015a9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015a9e:	6013      	str	r3, [r2, #0]
 8015aa0:	e02b      	b.n	8015afa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	015a      	lsls	r2, r3, #5
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	db12      	blt.n	8015ada <USB_EPSetStall+0xae>
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d00f      	beq.n	8015ada <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	015a      	lsls	r2, r3, #5
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	68ba      	ldr	r2, [r7, #8]
 8015aca:	0151      	lsls	r1, r2, #5
 8015acc:	68fa      	ldr	r2, [r7, #12]
 8015ace:	440a      	add	r2, r1
 8015ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ad4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015ad8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	015a      	lsls	r2, r3, #5
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	68ba      	ldr	r2, [r7, #8]
 8015aea:	0151      	lsls	r1, r2, #5
 8015aec:	68fa      	ldr	r2, [r7, #12]
 8015aee:	440a      	add	r2, r1
 8015af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015af8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015afa:	2300      	movs	r3, #0
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3714      	adds	r7, #20
 8015b00:	46bd      	mov	sp, r7
 8015b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b06:	4770      	bx	lr

08015b08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b085      	sub	sp, #20
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	785b      	ldrb	r3, [r3, #1]
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d128      	bne.n	8015b76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	015a      	lsls	r2, r3, #5
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	68ba      	ldr	r2, [r7, #8]
 8015b34:	0151      	lsls	r1, r2, #5
 8015b36:	68fa      	ldr	r2, [r7, #12]
 8015b38:	440a      	add	r2, r1
 8015b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	791b      	ldrb	r3, [r3, #4]
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d003      	beq.n	8015b54 <USB_EPClearStall+0x4c>
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	791b      	ldrb	r3, [r3, #4]
 8015b50:	2b02      	cmp	r3, #2
 8015b52:	d138      	bne.n	8015bc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	015a      	lsls	r2, r3, #5
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	4413      	add	r3, r2
 8015b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	0151      	lsls	r1, r2, #5
 8015b66:	68fa      	ldr	r2, [r7, #12]
 8015b68:	440a      	add	r2, r1
 8015b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015b72:	6013      	str	r3, [r2, #0]
 8015b74:	e027      	b.n	8015bc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	015a      	lsls	r2, r3, #5
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	68ba      	ldr	r2, [r7, #8]
 8015b86:	0151      	lsls	r1, r2, #5
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	440a      	add	r2, r1
 8015b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015b90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015b94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	791b      	ldrb	r3, [r3, #4]
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d003      	beq.n	8015ba6 <USB_EPClearStall+0x9e>
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	791b      	ldrb	r3, [r3, #4]
 8015ba2:	2b02      	cmp	r3, #2
 8015ba4:	d10f      	bne.n	8015bc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	015a      	lsls	r2, r3, #5
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	4413      	add	r3, r2
 8015bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	68ba      	ldr	r2, [r7, #8]
 8015bb6:	0151      	lsls	r1, r2, #5
 8015bb8:	68fa      	ldr	r2, [r7, #12]
 8015bba:	440a      	add	r2, r1
 8015bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015bc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015bc6:	2300      	movs	r3, #0
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3714      	adds	r7, #20
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b085      	sub	sp, #20
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	460b      	mov	r3, r1
 8015bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015bf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015bf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	78fb      	ldrb	r3, [r7, #3]
 8015c02:	011b      	lsls	r3, r3, #4
 8015c04:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015c08:	68f9      	ldr	r1, [r7, #12]
 8015c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015c0e:	4313      	orrs	r3, r2
 8015c10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015c12:	2300      	movs	r3, #0
}
 8015c14:	4618      	mov	r0, r3
 8015c16:	3714      	adds	r7, #20
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1e:	4770      	bx	lr

08015c20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c20:	b480      	push	{r7}
 8015c22:	b085      	sub	sp, #20
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	68fa      	ldr	r2, [r7, #12]
 8015c36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c3a:	f023 0303 	bic.w	r3, r3, #3
 8015c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c46:	685b      	ldr	r3, [r3, #4]
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c4e:	f023 0302 	bic.w	r3, r3, #2
 8015c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c54:	2300      	movs	r3, #0
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3714      	adds	r7, #20
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c60:	4770      	bx	lr

08015c62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015c62:	b480      	push	{r7}
 8015c64:	b085      	sub	sp, #20
 8015c66:	af00      	add	r7, sp, #0
 8015c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015c7c:	f023 0303 	bic.w	r3, r3, #3
 8015c80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	68fa      	ldr	r2, [r7, #12]
 8015c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015c90:	f043 0302 	orr.w	r3, r3, #2
 8015c94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c96:	2300      	movs	r3, #0
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3714      	adds	r7, #20
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr

08015ca4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015ca4:	b480      	push	{r7}
 8015ca6:	b085      	sub	sp, #20
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	695b      	ldr	r3, [r3, #20]
 8015cb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	699b      	ldr	r3, [r3, #24]
 8015cb6:	68fa      	ldr	r2, [r7, #12]
 8015cb8:	4013      	ands	r3, r2
 8015cba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3714      	adds	r7, #20
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc8:	4770      	bx	lr

08015cca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015cca:	b480      	push	{r7}
 8015ccc:	b085      	sub	sp, #20
 8015cce:	af00      	add	r7, sp, #0
 8015cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015cdc:	699b      	ldr	r3, [r3, #24]
 8015cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015ce6:	69db      	ldr	r3, [r3, #28]
 8015ce8:	68ba      	ldr	r2, [r7, #8]
 8015cea:	4013      	ands	r3, r2
 8015cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	0c1b      	lsrs	r3, r3, #16
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3714      	adds	r7, #20
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfc:	4770      	bx	lr

08015cfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015cfe:	b480      	push	{r7}
 8015d00:	b085      	sub	sp, #20
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d10:	699b      	ldr	r3, [r3, #24]
 8015d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d1a:	69db      	ldr	r3, [r3, #28]
 8015d1c:	68ba      	ldr	r2, [r7, #8]
 8015d1e:	4013      	ands	r3, r2
 8015d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	b29b      	uxth	r3, r3
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3714      	adds	r7, #20
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d30:	4770      	bx	lr

08015d32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d32:	b480      	push	{r7}
 8015d34:	b085      	sub	sp, #20
 8015d36:	af00      	add	r7, sp, #0
 8015d38:	6078      	str	r0, [r7, #4]
 8015d3a:	460b      	mov	r3, r1
 8015d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015d42:	78fb      	ldrb	r3, [r7, #3]
 8015d44:	015a      	lsls	r2, r3, #5
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	4413      	add	r3, r2
 8015d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d58:	695b      	ldr	r3, [r3, #20]
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	4013      	ands	r3, r2
 8015d5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d60:	68bb      	ldr	r3, [r7, #8]
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3714      	adds	r7, #20
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr

08015d6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d6e:	b480      	push	{r7}
 8015d70:	b087      	sub	sp, #28
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
 8015d76:	460b      	mov	r3, r1
 8015d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d84:	691b      	ldr	r3, [r3, #16]
 8015d86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015d90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015d92:	78fb      	ldrb	r3, [r7, #3]
 8015d94:	f003 030f 	and.w	r3, r3, #15
 8015d98:	68fa      	ldr	r2, [r7, #12]
 8015d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8015d9e:	01db      	lsls	r3, r3, #7
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	693a      	ldr	r2, [r7, #16]
 8015da4:	4313      	orrs	r3, r2
 8015da6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015da8:	78fb      	ldrb	r3, [r7, #3]
 8015daa:	015a      	lsls	r2, r3, #5
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	4413      	add	r3, r2
 8015db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015db4:	689b      	ldr	r3, [r3, #8]
 8015db6:	693a      	ldr	r2, [r7, #16]
 8015db8:	4013      	ands	r3, r2
 8015dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015dbc:	68bb      	ldr	r3, [r7, #8]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	371c      	adds	r7, #28
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc8:	4770      	bx	lr

08015dca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015dca:	b480      	push	{r7}
 8015dcc:	b083      	sub	sp, #12
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	f003 0301 	and.w	r3, r3, #1
}
 8015dda:	4618      	mov	r0, r3
 8015ddc:	370c      	adds	r7, #12
 8015dde:	46bd      	mov	sp, r7
 8015de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de4:	4770      	bx	lr
	...

08015de8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015de8:	b480      	push	{r7}
 8015dea:	b085      	sub	sp, #20
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e02:	4619      	mov	r1, r3
 8015e04:	4b09      	ldr	r3, [pc, #36]	@ (8015e2c <USB_ActivateSetup+0x44>)
 8015e06:	4013      	ands	r3, r2
 8015e08:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	68fa      	ldr	r2, [r7, #12]
 8015e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015e1e:	2300      	movs	r3, #0
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3714      	adds	r7, #20
 8015e24:	46bd      	mov	sp, r7
 8015e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2a:	4770      	bx	lr
 8015e2c:	fffff800 	.word	0xfffff800

08015e30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015e30:	b480      	push	{r7}
 8015e32:	b087      	sub	sp, #28
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	60f8      	str	r0, [r7, #12]
 8015e38:	460b      	mov	r3, r1
 8015e3a:	607a      	str	r2, [r7, #4]
 8015e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	333c      	adds	r3, #60	@ 0x3c
 8015e46:	3304      	adds	r3, #4
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	4a26      	ldr	r2, [pc, #152]	@ (8015ee8 <USB_EP0_OutStart+0xb8>)
 8015e50:	4293      	cmp	r3, r2
 8015e52:	d90a      	bls.n	8015e6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015e64:	d101      	bne.n	8015e6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e037      	b.n	8015eda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e70:	461a      	mov	r2, r3
 8015e72:	2300      	movs	r3, #0
 8015e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e7c:	691b      	ldr	r3, [r3, #16]
 8015e7e:	697a      	ldr	r2, [r7, #20]
 8015e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	697a      	ldr	r2, [r7, #20]
 8015e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015e98:	f043 0318 	orr.w	r3, r3, #24
 8015e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ea4:	691b      	ldr	r3, [r3, #16]
 8015ea6:	697a      	ldr	r2, [r7, #20]
 8015ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015eac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015eb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015eb2:	7afb      	ldrb	r3, [r7, #11]
 8015eb4:	2b01      	cmp	r3, #1
 8015eb6:	d10f      	bne.n	8015ed8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	697a      	ldr	r2, [r7, #20]
 8015ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015ed2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	371c      	adds	r7, #28
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee4:	4770      	bx	lr
 8015ee6:	bf00      	nop
 8015ee8:	4f54300a 	.word	0x4f54300a

08015eec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b085      	sub	sp, #20
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	3301      	adds	r3, #1
 8015efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f04:	d901      	bls.n	8015f0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015f06:	2303      	movs	r3, #3
 8015f08:	e01b      	b.n	8015f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	691b      	ldr	r3, [r3, #16]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	daf2      	bge.n	8015ef8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015f12:	2300      	movs	r3, #0
 8015f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	f043 0201 	orr.w	r2, r3, #1
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	3301      	adds	r3, #1
 8015f26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015f2e:	d901      	bls.n	8015f34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015f30:	2303      	movs	r3, #3
 8015f32:	e006      	b.n	8015f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	691b      	ldr	r3, [r3, #16]
 8015f38:	f003 0301 	and.w	r3, r3, #1
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d0f0      	beq.n	8015f22 <USB_CoreReset+0x36>

  return HAL_OK;
 8015f40:	2300      	movs	r3, #0
}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3714      	adds	r7, #20
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr
	...

08015f50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
 8015f58:	460b      	mov	r3, r1
 8015f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015f5c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015f60:	f002 fcca 	bl	80188f8 <USBD_static_malloc>
 8015f64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d109      	bne.n	8015f80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	32b0      	adds	r2, #176	@ 0xb0
 8015f76:	2100      	movs	r1, #0
 8015f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015f7c:	2302      	movs	r3, #2
 8015f7e:	e0d4      	b.n	801612a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015f80:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015f84:	2100      	movs	r1, #0
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f004 f89f 	bl	801a0ca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	32b0      	adds	r2, #176	@ 0xb0
 8015f96:	68f9      	ldr	r1, [r7, #12]
 8015f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	32b0      	adds	r2, #176	@ 0xb0
 8015fa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	7c1b      	ldrb	r3, [r3, #16]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d138      	bne.n	801602a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8016134 <USBD_CDC_Init+0x1e4>)
 8015fba:	7819      	ldrb	r1, [r3, #0]
 8015fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fc0:	2202      	movs	r2, #2
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f002 fb75 	bl	80186b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8016134 <USBD_CDC_Init+0x1e4>)
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	f003 020f 	and.w	r2, r3, #15
 8015fd0:	6879      	ldr	r1, [r7, #4]
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	4413      	add	r3, r2
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	440b      	add	r3, r1
 8015fdc:	3324      	adds	r3, #36	@ 0x24
 8015fde:	2201      	movs	r2, #1
 8015fe0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015fe2:	4b55      	ldr	r3, [pc, #340]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8015fe4:	7819      	ldrb	r1, [r3, #0]
 8015fe6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015fea:	2202      	movs	r2, #2
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f002 fb60 	bl	80186b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015ff2:	4b51      	ldr	r3, [pc, #324]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	f003 020f 	and.w	r2, r3, #15
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	4613      	mov	r3, r2
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	4413      	add	r3, r2
 8016002:	009b      	lsls	r3, r3, #2
 8016004:	440b      	add	r3, r1
 8016006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801600a:	2201      	movs	r2, #1
 801600c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801600e:	4b4b      	ldr	r3, [pc, #300]	@ (801613c <USBD_CDC_Init+0x1ec>)
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	f003 020f 	and.w	r2, r3, #15
 8016016:	6879      	ldr	r1, [r7, #4]
 8016018:	4613      	mov	r3, r2
 801601a:	009b      	lsls	r3, r3, #2
 801601c:	4413      	add	r3, r2
 801601e:	009b      	lsls	r3, r3, #2
 8016020:	440b      	add	r3, r1
 8016022:	3326      	adds	r3, #38	@ 0x26
 8016024:	2210      	movs	r2, #16
 8016026:	801a      	strh	r2, [r3, #0]
 8016028:	e035      	b.n	8016096 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801602a:	4b42      	ldr	r3, [pc, #264]	@ (8016134 <USBD_CDC_Init+0x1e4>)
 801602c:	7819      	ldrb	r1, [r3, #0]
 801602e:	2340      	movs	r3, #64	@ 0x40
 8016030:	2202      	movs	r2, #2
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f002 fb3d 	bl	80186b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016038:	4b3e      	ldr	r3, [pc, #248]	@ (8016134 <USBD_CDC_Init+0x1e4>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	f003 020f 	and.w	r2, r3, #15
 8016040:	6879      	ldr	r1, [r7, #4]
 8016042:	4613      	mov	r3, r2
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	4413      	add	r3, r2
 8016048:	009b      	lsls	r3, r3, #2
 801604a:	440b      	add	r3, r1
 801604c:	3324      	adds	r3, #36	@ 0x24
 801604e:	2201      	movs	r2, #1
 8016050:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8016052:	4b39      	ldr	r3, [pc, #228]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8016054:	7819      	ldrb	r1, [r3, #0]
 8016056:	2340      	movs	r3, #64	@ 0x40
 8016058:	2202      	movs	r2, #2
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f002 fb29 	bl	80186b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016060:	4b35      	ldr	r3, [pc, #212]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	f003 020f 	and.w	r2, r3, #15
 8016068:	6879      	ldr	r1, [r7, #4]
 801606a:	4613      	mov	r3, r2
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	4413      	add	r3, r2
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	440b      	add	r3, r1
 8016074:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016078:	2201      	movs	r2, #1
 801607a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801607c:	4b2f      	ldr	r3, [pc, #188]	@ (801613c <USBD_CDC_Init+0x1ec>)
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	f003 020f 	and.w	r2, r3, #15
 8016084:	6879      	ldr	r1, [r7, #4]
 8016086:	4613      	mov	r3, r2
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	4413      	add	r3, r2
 801608c:	009b      	lsls	r3, r3, #2
 801608e:	440b      	add	r3, r1
 8016090:	3326      	adds	r3, #38	@ 0x26
 8016092:	2210      	movs	r2, #16
 8016094:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016096:	4b29      	ldr	r3, [pc, #164]	@ (801613c <USBD_CDC_Init+0x1ec>)
 8016098:	7819      	ldrb	r1, [r3, #0]
 801609a:	2308      	movs	r3, #8
 801609c:	2203      	movs	r2, #3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f002 fb07 	bl	80186b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80160a4:	4b25      	ldr	r3, [pc, #148]	@ (801613c <USBD_CDC_Init+0x1ec>)
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	f003 020f 	and.w	r2, r3, #15
 80160ac:	6879      	ldr	r1, [r7, #4]
 80160ae:	4613      	mov	r3, r2
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	4413      	add	r3, r2
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	440b      	add	r3, r1
 80160b8:	3324      	adds	r3, #36	@ 0x24
 80160ba:	2201      	movs	r2, #1
 80160bc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2200      	movs	r2, #0
 80160c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160cc:	687a      	ldr	r2, [r7, #4]
 80160ce:	33b0      	adds	r3, #176	@ 0xb0
 80160d0:	009b      	lsls	r3, r3, #2
 80160d2:	4413      	add	r3, r2
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	2200      	movs	r2, #0
 80160de:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2200      	movs	r2, #0
 80160e6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d101      	bne.n	80160f8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80160f4:	2302      	movs	r3, #2
 80160f6:	e018      	b.n	801612a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	7c1b      	ldrb	r3, [r3, #16]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d10a      	bne.n	8016116 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016100:	4b0d      	ldr	r3, [pc, #52]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8016102:	7819      	ldrb	r1, [r3, #0]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801610a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f002 fbbe 	bl	8018890 <USBD_LL_PrepareReceive>
 8016114:	e008      	b.n	8016128 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016116:	4b08      	ldr	r3, [pc, #32]	@ (8016138 <USBD_CDC_Init+0x1e8>)
 8016118:	7819      	ldrb	r1, [r3, #0]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016120:	2340      	movs	r3, #64	@ 0x40
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f002 fbb4 	bl	8018890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016128:	2300      	movs	r3, #0
}
 801612a:	4618      	mov	r0, r3
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	240000c7 	.word	0x240000c7
 8016138:	240000c8 	.word	0x240000c8
 801613c:	240000c9 	.word	0x240000c9

08016140 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	460b      	mov	r3, r1
 801614a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801614c:	4b3a      	ldr	r3, [pc, #232]	@ (8016238 <USBD_CDC_DeInit+0xf8>)
 801614e:	781b      	ldrb	r3, [r3, #0]
 8016150:	4619      	mov	r1, r3
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	f002 fad3 	bl	80186fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016158:	4b37      	ldr	r3, [pc, #220]	@ (8016238 <USBD_CDC_DeInit+0xf8>)
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	f003 020f 	and.w	r2, r3, #15
 8016160:	6879      	ldr	r1, [r7, #4]
 8016162:	4613      	mov	r3, r2
 8016164:	009b      	lsls	r3, r3, #2
 8016166:	4413      	add	r3, r2
 8016168:	009b      	lsls	r3, r3, #2
 801616a:	440b      	add	r3, r1
 801616c:	3324      	adds	r3, #36	@ 0x24
 801616e:	2200      	movs	r2, #0
 8016170:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8016172:	4b32      	ldr	r3, [pc, #200]	@ (801623c <USBD_CDC_DeInit+0xfc>)
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	4619      	mov	r1, r3
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f002 fac0 	bl	80186fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801617e:	4b2f      	ldr	r3, [pc, #188]	@ (801623c <USBD_CDC_DeInit+0xfc>)
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	f003 020f 	and.w	r2, r3, #15
 8016186:	6879      	ldr	r1, [r7, #4]
 8016188:	4613      	mov	r3, r2
 801618a:	009b      	lsls	r3, r3, #2
 801618c:	4413      	add	r3, r2
 801618e:	009b      	lsls	r3, r3, #2
 8016190:	440b      	add	r3, r1
 8016192:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016196:	2200      	movs	r2, #0
 8016198:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801619a:	4b29      	ldr	r3, [pc, #164]	@ (8016240 <USBD_CDC_DeInit+0x100>)
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	4619      	mov	r1, r3
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f002 faac 	bl	80186fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80161a6:	4b26      	ldr	r3, [pc, #152]	@ (8016240 <USBD_CDC_DeInit+0x100>)
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	f003 020f 	and.w	r2, r3, #15
 80161ae:	6879      	ldr	r1, [r7, #4]
 80161b0:	4613      	mov	r3, r2
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	4413      	add	r3, r2
 80161b6:	009b      	lsls	r3, r3, #2
 80161b8:	440b      	add	r3, r1
 80161ba:	3324      	adds	r3, #36	@ 0x24
 80161bc:	2200      	movs	r2, #0
 80161be:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80161c0:	4b1f      	ldr	r3, [pc, #124]	@ (8016240 <USBD_CDC_DeInit+0x100>)
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	f003 020f 	and.w	r2, r3, #15
 80161c8:	6879      	ldr	r1, [r7, #4]
 80161ca:	4613      	mov	r3, r2
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	4413      	add	r3, r2
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	440b      	add	r3, r1
 80161d4:	3326      	adds	r3, #38	@ 0x26
 80161d6:	2200      	movs	r2, #0
 80161d8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	32b0      	adds	r2, #176	@ 0xb0
 80161e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d01f      	beq.n	801622c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	33b0      	adds	r3, #176	@ 0xb0
 80161f6:	009b      	lsls	r3, r3, #2
 80161f8:	4413      	add	r3, r2
 80161fa:	685b      	ldr	r3, [r3, #4]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	32b0      	adds	r2, #176	@ 0xb0
 801620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801620e:	4618      	mov	r0, r3
 8016210:	f002 fb80 	bl	8018914 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	32b0      	adds	r2, #176	@ 0xb0
 801621e:	2100      	movs	r1, #0
 8016220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2200      	movs	r2, #0
 8016228:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801622c:	2300      	movs	r3, #0
}
 801622e:	4618      	mov	r0, r3
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	240000c7 	.word	0x240000c7
 801623c:	240000c8 	.word	0x240000c8
 8016240:	240000c9 	.word	0x240000c9

08016244 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	32b0      	adds	r2, #176	@ 0xb0
 8016258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801625c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801625e:	2300      	movs	r3, #0
 8016260:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016262:	2300      	movs	r3, #0
 8016264:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016266:	2300      	movs	r3, #0
 8016268:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d101      	bne.n	8016274 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016270:	2303      	movs	r3, #3
 8016272:	e0bf      	b.n	80163f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801627c:	2b00      	cmp	r3, #0
 801627e:	d050      	beq.n	8016322 <USBD_CDC_Setup+0xde>
 8016280:	2b20      	cmp	r3, #32
 8016282:	f040 80af 	bne.w	80163e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	88db      	ldrh	r3, [r3, #6]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d03a      	beq.n	8016304 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	b25b      	sxtb	r3, r3
 8016294:	2b00      	cmp	r3, #0
 8016296:	da1b      	bge.n	80162d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801629e:	687a      	ldr	r2, [r7, #4]
 80162a0:	33b0      	adds	r3, #176	@ 0xb0
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	4413      	add	r3, r2
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	683a      	ldr	r2, [r7, #0]
 80162ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80162ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80162b0:	683a      	ldr	r2, [r7, #0]
 80162b2:	88d2      	ldrh	r2, [r2, #6]
 80162b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	88db      	ldrh	r3, [r3, #6]
 80162ba:	2b07      	cmp	r3, #7
 80162bc:	bf28      	it	cs
 80162be:	2307      	movcs	r3, #7
 80162c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	89fa      	ldrh	r2, [r7, #14]
 80162c6:	4619      	mov	r1, r3
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	f001 fdbd 	bl	8017e48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80162ce:	e090      	b.n	80163f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	785a      	ldrb	r2, [r3, #1]
 80162d4:	693b      	ldr	r3, [r7, #16]
 80162d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	88db      	ldrh	r3, [r3, #6]
 80162de:	2b3f      	cmp	r3, #63	@ 0x3f
 80162e0:	d803      	bhi.n	80162ea <USBD_CDC_Setup+0xa6>
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	88db      	ldrh	r3, [r3, #6]
 80162e6:	b2da      	uxtb	r2, r3
 80162e8:	e000      	b.n	80162ec <USBD_CDC_Setup+0xa8>
 80162ea:	2240      	movs	r2, #64	@ 0x40
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80162f2:	6939      	ldr	r1, [r7, #16]
 80162f4:	693b      	ldr	r3, [r7, #16]
 80162f6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80162fa:	461a      	mov	r2, r3
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f001 fdcf 	bl	8017ea0 <USBD_CtlPrepareRx>
      break;
 8016302:	e076      	b.n	80163f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	33b0      	adds	r3, #176	@ 0xb0
 801630e:	009b      	lsls	r3, r3, #2
 8016310:	4413      	add	r3, r2
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	689b      	ldr	r3, [r3, #8]
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	7850      	ldrb	r0, [r2, #1]
 801631a:	2200      	movs	r2, #0
 801631c:	6839      	ldr	r1, [r7, #0]
 801631e:	4798      	blx	r3
      break;
 8016320:	e067      	b.n	80163f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	785b      	ldrb	r3, [r3, #1]
 8016326:	2b0b      	cmp	r3, #11
 8016328:	d851      	bhi.n	80163ce <USBD_CDC_Setup+0x18a>
 801632a:	a201      	add	r2, pc, #4	@ (adr r2, 8016330 <USBD_CDC_Setup+0xec>)
 801632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016330:	08016361 	.word	0x08016361
 8016334:	080163dd 	.word	0x080163dd
 8016338:	080163cf 	.word	0x080163cf
 801633c:	080163cf 	.word	0x080163cf
 8016340:	080163cf 	.word	0x080163cf
 8016344:	080163cf 	.word	0x080163cf
 8016348:	080163cf 	.word	0x080163cf
 801634c:	080163cf 	.word	0x080163cf
 8016350:	080163cf 	.word	0x080163cf
 8016354:	080163cf 	.word	0x080163cf
 8016358:	0801638b 	.word	0x0801638b
 801635c:	080163b5 	.word	0x080163b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016366:	b2db      	uxtb	r3, r3
 8016368:	2b03      	cmp	r3, #3
 801636a:	d107      	bne.n	801637c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801636c:	f107 030a 	add.w	r3, r7, #10
 8016370:	2202      	movs	r2, #2
 8016372:	4619      	mov	r1, r3
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f001 fd67 	bl	8017e48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801637a:	e032      	b.n	80163e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f001 fce5 	bl	8017d4e <USBD_CtlError>
            ret = USBD_FAIL;
 8016384:	2303      	movs	r3, #3
 8016386:	75fb      	strb	r3, [r7, #23]
          break;
 8016388:	e02b      	b.n	80163e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b03      	cmp	r3, #3
 8016394:	d107      	bne.n	80163a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016396:	f107 030d 	add.w	r3, r7, #13
 801639a:	2201      	movs	r2, #1
 801639c:	4619      	mov	r1, r3
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f001 fd52 	bl	8017e48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80163a4:	e01d      	b.n	80163e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80163a6:	6839      	ldr	r1, [r7, #0]
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f001 fcd0 	bl	8017d4e <USBD_CtlError>
            ret = USBD_FAIL;
 80163ae:	2303      	movs	r3, #3
 80163b0:	75fb      	strb	r3, [r7, #23]
          break;
 80163b2:	e016      	b.n	80163e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163ba:	b2db      	uxtb	r3, r3
 80163bc:	2b03      	cmp	r3, #3
 80163be:	d00f      	beq.n	80163e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80163c0:	6839      	ldr	r1, [r7, #0]
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	f001 fcc3 	bl	8017d4e <USBD_CtlError>
            ret = USBD_FAIL;
 80163c8:	2303      	movs	r3, #3
 80163ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80163cc:	e008      	b.n	80163e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80163ce:	6839      	ldr	r1, [r7, #0]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f001 fcbc 	bl	8017d4e <USBD_CtlError>
          ret = USBD_FAIL;
 80163d6:	2303      	movs	r3, #3
 80163d8:	75fb      	strb	r3, [r7, #23]
          break;
 80163da:	e002      	b.n	80163e2 <USBD_CDC_Setup+0x19e>
          break;
 80163dc:	bf00      	nop
 80163de:	e008      	b.n	80163f2 <USBD_CDC_Setup+0x1ae>
          break;
 80163e0:	bf00      	nop
      }
      break;
 80163e2:	e006      	b.n	80163f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80163e4:	6839      	ldr	r1, [r7, #0]
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f001 fcb1 	bl	8017d4e <USBD_CtlError>
      ret = USBD_FAIL;
 80163ec:	2303      	movs	r3, #3
 80163ee:	75fb      	strb	r3, [r7, #23]
      break;
 80163f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3718      	adds	r7, #24
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}

080163fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	460b      	mov	r3, r1
 8016406:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801640e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	32b0      	adds	r2, #176	@ 0xb0
 801641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d101      	bne.n	8016426 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016422:	2303      	movs	r3, #3
 8016424:	e065      	b.n	80164f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	32b0      	adds	r2, #176	@ 0xb0
 8016430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016434:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016436:	78fb      	ldrb	r3, [r7, #3]
 8016438:	f003 020f 	and.w	r2, r3, #15
 801643c:	6879      	ldr	r1, [r7, #4]
 801643e:	4613      	mov	r3, r2
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	4413      	add	r3, r2
 8016444:	009b      	lsls	r3, r3, #2
 8016446:	440b      	add	r3, r1
 8016448:	3318      	adds	r3, #24
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d02f      	beq.n	80164b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016450:	78fb      	ldrb	r3, [r7, #3]
 8016452:	f003 020f 	and.w	r2, r3, #15
 8016456:	6879      	ldr	r1, [r7, #4]
 8016458:	4613      	mov	r3, r2
 801645a:	009b      	lsls	r3, r3, #2
 801645c:	4413      	add	r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	440b      	add	r3, r1
 8016462:	3318      	adds	r3, #24
 8016464:	681a      	ldr	r2, [r3, #0]
 8016466:	78fb      	ldrb	r3, [r7, #3]
 8016468:	f003 010f 	and.w	r1, r3, #15
 801646c:	68f8      	ldr	r0, [r7, #12]
 801646e:	460b      	mov	r3, r1
 8016470:	00db      	lsls	r3, r3, #3
 8016472:	440b      	add	r3, r1
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	4403      	add	r3, r0
 8016478:	331c      	adds	r3, #28
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016480:	fb01 f303 	mul.w	r3, r1, r3
 8016484:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016486:	2b00      	cmp	r3, #0
 8016488:	d112      	bne.n	80164b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801648a:	78fb      	ldrb	r3, [r7, #3]
 801648c:	f003 020f 	and.w	r2, r3, #15
 8016490:	6879      	ldr	r1, [r7, #4]
 8016492:	4613      	mov	r3, r2
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	4413      	add	r3, r2
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	440b      	add	r3, r1
 801649c:	3318      	adds	r3, #24
 801649e:	2200      	movs	r2, #0
 80164a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80164a2:	78f9      	ldrb	r1, [r7, #3]
 80164a4:	2300      	movs	r3, #0
 80164a6:	2200      	movs	r2, #0
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f002 f9d0 	bl	801884e <USBD_LL_Transmit>
 80164ae:	e01f      	b.n	80164f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	2200      	movs	r2, #0
 80164b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	33b0      	adds	r3, #176	@ 0xb0
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	4413      	add	r3, r2
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	691b      	ldr	r3, [r3, #16]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d010      	beq.n	80164f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80164d4:	687a      	ldr	r2, [r7, #4]
 80164d6:	33b0      	adds	r3, #176	@ 0xb0
 80164d8:	009b      	lsls	r3, r3, #2
 80164da:	4413      	add	r3, r2
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	691b      	ldr	r3, [r3, #16]
 80164e0:	68ba      	ldr	r2, [r7, #8]
 80164e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80164e6:	68ba      	ldr	r2, [r7, #8]
 80164e8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80164ec:	78fa      	ldrb	r2, [r7, #3]
 80164ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3710      	adds	r7, #16
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}

080164fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80164fa:	b580      	push	{r7, lr}
 80164fc:	b084      	sub	sp, #16
 80164fe:	af00      	add	r7, sp, #0
 8016500:	6078      	str	r0, [r7, #4]
 8016502:	460b      	mov	r3, r1
 8016504:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	32b0      	adds	r2, #176	@ 0xb0
 8016510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016514:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	32b0      	adds	r2, #176	@ 0xb0
 8016520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d101      	bne.n	801652c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016528:	2303      	movs	r3, #3
 801652a:	e01a      	b.n	8016562 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801652c:	78fb      	ldrb	r3, [r7, #3]
 801652e:	4619      	mov	r1, r3
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f002 f9ce 	bl	80188d2 <USBD_LL_GetRxDataSize>
 8016536:	4602      	mov	r2, r0
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	33b0      	adds	r3, #176	@ 0xb0
 8016548:	009b      	lsls	r3, r3, #2
 801654a:	4413      	add	r3, r2
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	68fa      	ldr	r2, [r7, #12]
 8016552:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016556:	68fa      	ldr	r2, [r7, #12]
 8016558:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801655c:	4611      	mov	r1, r2
 801655e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016560:	2300      	movs	r3, #0
}
 8016562:	4618      	mov	r0, r3
 8016564:	3710      	adds	r7, #16
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}

0801656a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801656a:	b580      	push	{r7, lr}
 801656c:	b084      	sub	sp, #16
 801656e:	af00      	add	r7, sp, #0
 8016570:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	32b0      	adds	r2, #176	@ 0xb0
 801657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016580:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016588:	2303      	movs	r3, #3
 801658a:	e024      	b.n	80165d6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	33b0      	adds	r3, #176	@ 0xb0
 8016596:	009b      	lsls	r3, r3, #2
 8016598:	4413      	add	r3, r2
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d019      	beq.n	80165d4 <USBD_CDC_EP0_RxReady+0x6a>
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80165a6:	2bff      	cmp	r3, #255	@ 0xff
 80165a8:	d014      	beq.n	80165d4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	33b0      	adds	r3, #176	@ 0xb0
 80165b4:	009b      	lsls	r3, r3, #2
 80165b6:	4413      	add	r3, r2
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	689b      	ldr	r3, [r3, #8]
 80165bc:	68fa      	ldr	r2, [r7, #12]
 80165be:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80165c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80165ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	22ff      	movs	r2, #255	@ 0xff
 80165d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80165d4:	2300      	movs	r3, #0
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	3710      	adds	r7, #16
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}
	...

080165e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b086      	sub	sp, #24
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80165e8:	2182      	movs	r1, #130	@ 0x82
 80165ea:	4818      	ldr	r0, [pc, #96]	@ (801664c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165ec:	f000 fd4f 	bl	801708e <USBD_GetEpDesc>
 80165f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80165f2:	2101      	movs	r1, #1
 80165f4:	4815      	ldr	r0, [pc, #84]	@ (801664c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80165f6:	f000 fd4a 	bl	801708e <USBD_GetEpDesc>
 80165fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80165fc:	2181      	movs	r1, #129	@ 0x81
 80165fe:	4813      	ldr	r0, [pc, #76]	@ (801664c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016600:	f000 fd45 	bl	801708e <USBD_GetEpDesc>
 8016604:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d002      	beq.n	8016612 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801660c:	697b      	ldr	r3, [r7, #20]
 801660e:	2210      	movs	r2, #16
 8016610:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d006      	beq.n	8016626 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016618:	693b      	ldr	r3, [r7, #16]
 801661a:	2200      	movs	r2, #0
 801661c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016620:	711a      	strb	r2, [r3, #4]
 8016622:	2200      	movs	r2, #0
 8016624:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d006      	beq.n	801663a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2200      	movs	r2, #0
 8016630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016634:	711a      	strb	r2, [r3, #4]
 8016636:	2200      	movs	r2, #0
 8016638:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2243      	movs	r2, #67	@ 0x43
 801663e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016640:	4b02      	ldr	r3, [pc, #8]	@ (801664c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016642:	4618      	mov	r0, r3
 8016644:	3718      	adds	r7, #24
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	24000084 	.word	0x24000084

08016650 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016658:	2182      	movs	r1, #130	@ 0x82
 801665a:	4818      	ldr	r0, [pc, #96]	@ (80166bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801665c:	f000 fd17 	bl	801708e <USBD_GetEpDesc>
 8016660:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016662:	2101      	movs	r1, #1
 8016664:	4815      	ldr	r0, [pc, #84]	@ (80166bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016666:	f000 fd12 	bl	801708e <USBD_GetEpDesc>
 801666a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801666c:	2181      	movs	r1, #129	@ 0x81
 801666e:	4813      	ldr	r0, [pc, #76]	@ (80166bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016670:	f000 fd0d 	bl	801708e <USBD_GetEpDesc>
 8016674:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d002      	beq.n	8016682 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	2210      	movs	r2, #16
 8016680:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d006      	beq.n	8016696 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016688:	693b      	ldr	r3, [r7, #16]
 801668a:	2200      	movs	r2, #0
 801668c:	711a      	strb	r2, [r3, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	f042 0202 	orr.w	r2, r2, #2
 8016694:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d006      	beq.n	80166aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2200      	movs	r2, #0
 80166a0:	711a      	strb	r2, [r3, #4]
 80166a2:	2200      	movs	r2, #0
 80166a4:	f042 0202 	orr.w	r2, r2, #2
 80166a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2243      	movs	r2, #67	@ 0x43
 80166ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80166b0:	4b02      	ldr	r3, [pc, #8]	@ (80166bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3718      	adds	r7, #24
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	24000084 	.word	0x24000084

080166c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80166c8:	2182      	movs	r1, #130	@ 0x82
 80166ca:	4818      	ldr	r0, [pc, #96]	@ (801672c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166cc:	f000 fcdf 	bl	801708e <USBD_GetEpDesc>
 80166d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80166d2:	2101      	movs	r1, #1
 80166d4:	4815      	ldr	r0, [pc, #84]	@ (801672c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166d6:	f000 fcda 	bl	801708e <USBD_GetEpDesc>
 80166da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80166dc:	2181      	movs	r1, #129	@ 0x81
 80166de:	4813      	ldr	r0, [pc, #76]	@ (801672c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80166e0:	f000 fcd5 	bl	801708e <USBD_GetEpDesc>
 80166e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d002      	beq.n	80166f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	2210      	movs	r2, #16
 80166f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d006      	beq.n	8016706 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	2200      	movs	r2, #0
 80166fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016700:	711a      	strb	r2, [r3, #4]
 8016702:	2200      	movs	r2, #0
 8016704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d006      	beq.n	801671a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2200      	movs	r2, #0
 8016710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016714:	711a      	strb	r2, [r3, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2243      	movs	r2, #67	@ 0x43
 801671e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016720:	4b02      	ldr	r3, [pc, #8]	@ (801672c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016722:	4618      	mov	r0, r3
 8016724:	3718      	adds	r7, #24
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	24000084 	.word	0x24000084

08016730 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016730:	b480      	push	{r7}
 8016732:	b083      	sub	sp, #12
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	220a      	movs	r2, #10
 801673c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801673e:	4b03      	ldr	r3, [pc, #12]	@ (801674c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016740:	4618      	mov	r0, r3
 8016742:	370c      	adds	r7, #12
 8016744:	46bd      	mov	sp, r7
 8016746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674a:	4770      	bx	lr
 801674c:	24000040 	.word	0x24000040

08016750 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d101      	bne.n	8016764 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016760:	2303      	movs	r3, #3
 8016762:	e009      	b.n	8016778 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	33b0      	adds	r3, #176	@ 0xb0
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	4413      	add	r3, r2
 8016772:	683a      	ldr	r2, [r7, #0]
 8016774:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016776:	2300      	movs	r3, #0
}
 8016778:	4618      	mov	r0, r3
 801677a:	370c      	adds	r7, #12
 801677c:	46bd      	mov	sp, r7
 801677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016782:	4770      	bx	lr

08016784 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016784:	b480      	push	{r7}
 8016786:	b087      	sub	sp, #28
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	32b0      	adds	r2, #176	@ 0xb0
 801679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801679e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80167a6:	2303      	movs	r3, #3
 80167a8:	e008      	b.n	80167bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	68ba      	ldr	r2, [r7, #8]
 80167ae:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80167ba:	2300      	movs	r3, #0
}
 80167bc:	4618      	mov	r0, r3
 80167be:	371c      	adds	r7, #28
 80167c0:	46bd      	mov	sp, r7
 80167c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c6:	4770      	bx	lr

080167c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b085      	sub	sp, #20
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
 80167d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	32b0      	adds	r2, #176	@ 0xb0
 80167dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d101      	bne.n	80167ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80167e8:	2303      	movs	r3, #3
 80167ea:	e004      	b.n	80167f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	683a      	ldr	r2, [r7, #0]
 80167f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3714      	adds	r7, #20
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr
	...

08016804 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	32b0      	adds	r2, #176	@ 0xb0
 8016816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801681a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801681c:	2301      	movs	r3, #1
 801681e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d101      	bne.n	801682a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016826:	2303      	movs	r3, #3
 8016828:	e025      	b.n	8016876 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016830:	2b00      	cmp	r3, #0
 8016832:	d11f      	bne.n	8016874 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	2201      	movs	r2, #1
 8016838:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801683c:	4b10      	ldr	r3, [pc, #64]	@ (8016880 <USBD_CDC_TransmitPacket+0x7c>)
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	f003 020f 	and.w	r2, r3, #15
 8016844:	68bb      	ldr	r3, [r7, #8]
 8016846:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	4613      	mov	r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	4413      	add	r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	4403      	add	r3, r0
 8016856:	3318      	adds	r3, #24
 8016858:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801685a:	4b09      	ldr	r3, [pc, #36]	@ (8016880 <USBD_CDC_TransmitPacket+0x7c>)
 801685c:	7819      	ldrb	r1, [r3, #0]
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f001 ffef 	bl	801884e <USBD_LL_Transmit>

    ret = USBD_OK;
 8016870:	2300      	movs	r3, #0
 8016872:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8016874:	7bfb      	ldrb	r3, [r7, #15]
}
 8016876:	4618      	mov	r0, r3
 8016878:	3710      	adds	r7, #16
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	240000c7 	.word	0x240000c7

08016884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b084      	sub	sp, #16
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	32b0      	adds	r2, #176	@ 0xb0
 8016896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801689a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	32b0      	adds	r2, #176	@ 0xb0
 80168a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d101      	bne.n	80168b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80168ae:	2303      	movs	r3, #3
 80168b0:	e018      	b.n	80168e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	7c1b      	ldrb	r3, [r3, #16]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d10a      	bne.n	80168d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168ba:	4b0c      	ldr	r3, [pc, #48]	@ (80168ec <USBD_CDC_ReceivePacket+0x68>)
 80168bc:	7819      	ldrb	r1, [r3, #0]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f001 ffe1 	bl	8018890 <USBD_LL_PrepareReceive>
 80168ce:	e008      	b.n	80168e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168d0:	4b06      	ldr	r3, [pc, #24]	@ (80168ec <USBD_CDC_ReceivePacket+0x68>)
 80168d2:	7819      	ldrb	r1, [r3, #0]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168da:	2340      	movs	r3, #64	@ 0x40
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f001 ffd7 	bl	8018890 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80168e2:	2300      	movs	r3, #0
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3710      	adds	r7, #16
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}
 80168ec:	240000c8 	.word	0x240000c8

080168f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	4613      	mov	r3, r2
 80168fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d101      	bne.n	8016908 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016904:	2303      	movs	r3, #3
 8016906:	e01f      	b.n	8016948 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	2200      	movs	r2, #0
 801690c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2200      	movs	r2, #0
 8016914:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2200      	movs	r2, #0
 801691c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d003      	beq.n	801692e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	68ba      	ldr	r2, [r7, #8]
 801692a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	2201      	movs	r2, #1
 8016932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	79fa      	ldrb	r2, [r7, #7]
 801693a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801693c:	68f8      	ldr	r0, [r7, #12]
 801693e:	f001 fe4b 	bl	80185d8 <USBD_LL_Init>
 8016942:	4603      	mov	r3, r0
 8016944:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016946:	7dfb      	ldrb	r3, [r7, #23]
}
 8016948:	4618      	mov	r0, r3
 801694a:	3718      	adds	r7, #24
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b084      	sub	sp, #16
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801695a:	2300      	movs	r3, #0
 801695c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d101      	bne.n	8016968 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016964:	2303      	movs	r3, #3
 8016966:	e025      	b.n	80169b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	683a      	ldr	r2, [r7, #0]
 801696c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	32ae      	adds	r2, #174	@ 0xae
 801697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016980:	2b00      	cmp	r3, #0
 8016982:	d00f      	beq.n	80169a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	32ae      	adds	r2, #174	@ 0xae
 801698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016994:	f107 020e 	add.w	r2, r7, #14
 8016998:	4610      	mov	r0, r2
 801699a:	4798      	blx	r3
 801699c:	4602      	mov	r2, r0
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80169aa:	1c5a      	adds	r2, r3, #1
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80169b2:	2300      	movs	r3, #0
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3710      	adds	r7, #16
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd80      	pop	{r7, pc}

080169bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b082      	sub	sp, #8
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f001 fe59 	bl	801867c <USBD_LL_Start>
 80169ca:	4603      	mov	r3, r0
}
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80169dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80169de:	4618      	mov	r0, r3
 80169e0:	370c      	adds	r7, #12
 80169e2:	46bd      	mov	sp, r7
 80169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e8:	4770      	bx	lr

080169ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80169ea:	b580      	push	{r7, lr}
 80169ec:	b084      	sub	sp, #16
 80169ee:	af00      	add	r7, sp, #0
 80169f0:	6078      	str	r0, [r7, #4]
 80169f2:	460b      	mov	r3, r1
 80169f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d009      	beq.n	8016a18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	78fa      	ldrb	r2, [r7, #3]
 8016a0e:	4611      	mov	r1, r2
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	4798      	blx	r3
 8016a14:	4603      	mov	r3, r0
 8016a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}

08016a22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a22:	b580      	push	{r7, lr}
 8016a24:	b084      	sub	sp, #16
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
 8016a2a:	460b      	mov	r3, r1
 8016a2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a38:	685b      	ldr	r3, [r3, #4]
 8016a3a:	78fa      	ldrb	r2, [r7, #3]
 8016a3c:	4611      	mov	r1, r2
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	4798      	blx	r3
 8016a42:	4603      	mov	r3, r0
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d001      	beq.n	8016a4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016a48:	2303      	movs	r3, #3
 8016a4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	3710      	adds	r7, #16
 8016a52:	46bd      	mov	sp, r7
 8016a54:	bd80      	pop	{r7, pc}

08016a56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b084      	sub	sp, #16
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016a66:	6839      	ldr	r1, [r7, #0]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f001 f936 	bl	8017cda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2201      	movs	r2, #1
 8016a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016a8a:	f003 031f 	and.w	r3, r3, #31
 8016a8e:	2b02      	cmp	r3, #2
 8016a90:	d01a      	beq.n	8016ac8 <USBD_LL_SetupStage+0x72>
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d822      	bhi.n	8016adc <USBD_LL_SetupStage+0x86>
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d002      	beq.n	8016aa0 <USBD_LL_SetupStage+0x4a>
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d00a      	beq.n	8016ab4 <USBD_LL_SetupStage+0x5e>
 8016a9e:	e01d      	b.n	8016adc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f000 fb63 	bl	8017174 <USBD_StdDevReq>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8016ab2:	e020      	b.n	8016af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016aba:	4619      	mov	r1, r3
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f000 fbcb 	bl	8017258 <USBD_StdItfReq>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8016ac6:	e016      	b.n	8016af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016ace:	4619      	mov	r1, r3
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f000 fc2d 	bl	8017330 <USBD_StdEPReq>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8016ada:	e00c      	b.n	8016af6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016ae2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016ae6:	b2db      	uxtb	r3, r3
 8016ae8:	4619      	mov	r1, r3
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f001 fe26 	bl	801873c <USBD_LL_StallEP>
 8016af0:	4603      	mov	r3, r0
 8016af2:	73fb      	strb	r3, [r7, #15]
      break;
 8016af4:	bf00      	nop
  }

  return ret;
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3710      	adds	r7, #16
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd80      	pop	{r7, pc}

08016b00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b086      	sub	sp, #24
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	460b      	mov	r3, r1
 8016b0a:	607a      	str	r2, [r7, #4]
 8016b0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016b12:	7afb      	ldrb	r3, [r7, #11]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d16e      	bne.n	8016bf6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016b1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016b26:	2b03      	cmp	r3, #3
 8016b28:	f040 8098 	bne.w	8016c5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	689a      	ldr	r2, [r3, #8]
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	68db      	ldr	r3, [r3, #12]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d913      	bls.n	8016b60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	689a      	ldr	r2, [r3, #8]
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	68db      	ldr	r3, [r3, #12]
 8016b40:	1ad2      	subs	r2, r2, r3
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	68da      	ldr	r2, [r3, #12]
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	689b      	ldr	r3, [r3, #8]
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	bf28      	it	cs
 8016b52:	4613      	movcs	r3, r2
 8016b54:	461a      	mov	r2, r3
 8016b56:	6879      	ldr	r1, [r7, #4]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f001 f9be 	bl	8017eda <USBD_CtlContinueRx>
 8016b5e:	e07d      	b.n	8016c5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016b66:	f003 031f 	and.w	r3, r3, #31
 8016b6a:	2b02      	cmp	r3, #2
 8016b6c:	d014      	beq.n	8016b98 <USBD_LL_DataOutStage+0x98>
 8016b6e:	2b02      	cmp	r3, #2
 8016b70:	d81d      	bhi.n	8016bae <USBD_LL_DataOutStage+0xae>
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d002      	beq.n	8016b7c <USBD_LL_DataOutStage+0x7c>
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d003      	beq.n	8016b82 <USBD_LL_DataOutStage+0x82>
 8016b7a:	e018      	b.n	8016bae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8016b80:	e018      	b.n	8016bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	68f8      	ldr	r0, [r7, #12]
 8016b8e:	f000 fa64 	bl	801705a <USBD_CoreFindIF>
 8016b92:	4603      	mov	r3, r0
 8016b94:	75bb      	strb	r3, [r7, #22]
            break;
 8016b96:	e00d      	b.n	8016bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016b9e:	b2db      	uxtb	r3, r3
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	68f8      	ldr	r0, [r7, #12]
 8016ba4:	f000 fa66 	bl	8017074 <USBD_CoreFindEP>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	75bb      	strb	r3, [r7, #22]
            break;
 8016bac:	e002      	b.n	8016bb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8016bb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016bb4:	7dbb      	ldrb	r3, [r7, #22]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d119      	bne.n	8016bee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b03      	cmp	r3, #3
 8016bc4:	d113      	bne.n	8016bee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016bc6:	7dba      	ldrb	r2, [r7, #22]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	32ae      	adds	r2, #174	@ 0xae
 8016bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bd0:	691b      	ldr	r3, [r3, #16]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00b      	beq.n	8016bee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016bd6:	7dba      	ldrb	r2, [r7, #22]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016bde:	7dba      	ldrb	r2, [r7, #22]
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	32ae      	adds	r2, #174	@ 0xae
 8016be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016be8:	691b      	ldr	r3, [r3, #16]
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016bee:	68f8      	ldr	r0, [r7, #12]
 8016bf0:	f001 f984 	bl	8017efc <USBD_CtlSendStatus>
 8016bf4:	e032      	b.n	8016c5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016bf6:	7afb      	ldrb	r3, [r7, #11]
 8016bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016bfc:	b2db      	uxtb	r3, r3
 8016bfe:	4619      	mov	r1, r3
 8016c00:	68f8      	ldr	r0, [r7, #12]
 8016c02:	f000 fa37 	bl	8017074 <USBD_CoreFindEP>
 8016c06:	4603      	mov	r3, r0
 8016c08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016c0a:	7dbb      	ldrb	r3, [r7, #22]
 8016c0c:	2bff      	cmp	r3, #255	@ 0xff
 8016c0e:	d025      	beq.n	8016c5c <USBD_LL_DataOutStage+0x15c>
 8016c10:	7dbb      	ldrb	r3, [r7, #22]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d122      	bne.n	8016c5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	2b03      	cmp	r3, #3
 8016c20:	d117      	bne.n	8016c52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016c22:	7dba      	ldrb	r2, [r7, #22]
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	32ae      	adds	r2, #174	@ 0xae
 8016c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c2c:	699b      	ldr	r3, [r3, #24]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00f      	beq.n	8016c52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016c32:	7dba      	ldrb	r2, [r7, #22]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016c3a:	7dba      	ldrb	r2, [r7, #22]
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	32ae      	adds	r2, #174	@ 0xae
 8016c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c44:	699b      	ldr	r3, [r3, #24]
 8016c46:	7afa      	ldrb	r2, [r7, #11]
 8016c48:	4611      	mov	r1, r2
 8016c4a:	68f8      	ldr	r0, [r7, #12]
 8016c4c:	4798      	blx	r3
 8016c4e:	4603      	mov	r3, r0
 8016c50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016c52:	7dfb      	ldrb	r3, [r7, #23]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d001      	beq.n	8016c5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016c58:	7dfb      	ldrb	r3, [r7, #23]
 8016c5a:	e000      	b.n	8016c5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3718      	adds	r7, #24
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}

08016c66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016c66:	b580      	push	{r7, lr}
 8016c68:	b086      	sub	sp, #24
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	60f8      	str	r0, [r7, #12]
 8016c6e:	460b      	mov	r3, r1
 8016c70:	607a      	str	r2, [r7, #4]
 8016c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016c74:	7afb      	ldrb	r3, [r7, #11]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d16f      	bne.n	8016d5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	3314      	adds	r3, #20
 8016c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016c86:	2b02      	cmp	r3, #2
 8016c88:	d15a      	bne.n	8016d40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	689a      	ldr	r2, [r3, #8]
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	68db      	ldr	r3, [r3, #12]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d914      	bls.n	8016cc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016c96:	693b      	ldr	r3, [r7, #16]
 8016c98:	689a      	ldr	r2, [r3, #8]
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	68db      	ldr	r3, [r3, #12]
 8016c9e:	1ad2      	subs	r2, r2, r3
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	689b      	ldr	r3, [r3, #8]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	6879      	ldr	r1, [r7, #4]
 8016cac:	68f8      	ldr	r0, [r7, #12]
 8016cae:	f001 f8e6 	bl	8017e7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	2100      	movs	r1, #0
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f001 fde9 	bl	8018890 <USBD_LL_PrepareReceive>
 8016cbe:	e03f      	b.n	8016d40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	68da      	ldr	r2, [r3, #12]
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	689b      	ldr	r3, [r3, #8]
 8016cc8:	429a      	cmp	r2, r3
 8016cca:	d11c      	bne.n	8016d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	685a      	ldr	r2, [r3, #4]
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d316      	bcc.n	8016d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	685a      	ldr	r2, [r3, #4]
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d20f      	bcs.n	8016d06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	2100      	movs	r1, #0
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f001 f8c7 	bl	8017e7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	68f8      	ldr	r0, [r7, #12]
 8016d00:	f001 fdc6 	bl	8018890 <USBD_LL_PrepareReceive>
 8016d04:	e01c      	b.n	8016d40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	2b03      	cmp	r3, #3
 8016d10:	d10f      	bne.n	8016d32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d18:	68db      	ldr	r3, [r3, #12]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d009      	beq.n	8016d32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2200      	movs	r2, #0
 8016d22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	68f8      	ldr	r0, [r7, #12]
 8016d30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d32:	2180      	movs	r1, #128	@ 0x80
 8016d34:	68f8      	ldr	r0, [r7, #12]
 8016d36:	f001 fd01 	bl	801873c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016d3a:	68f8      	ldr	r0, [r7, #12]
 8016d3c:	f001 f8f1 	bl	8017f22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d03a      	beq.n	8016dc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016d4a:	68f8      	ldr	r0, [r7, #12]
 8016d4c:	f7ff fe42 	bl	80169d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	2200      	movs	r2, #0
 8016d54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8016d58:	e032      	b.n	8016dc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016d5a:	7afb      	ldrb	r3, [r7, #11]
 8016d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016d60:	b2db      	uxtb	r3, r3
 8016d62:	4619      	mov	r1, r3
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f000 f985 	bl	8017074 <USBD_CoreFindEP>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d6e:	7dfb      	ldrb	r3, [r7, #23]
 8016d70:	2bff      	cmp	r3, #255	@ 0xff
 8016d72:	d025      	beq.n	8016dc0 <USBD_LL_DataInStage+0x15a>
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d122      	bne.n	8016dc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	2b03      	cmp	r3, #3
 8016d84:	d11c      	bne.n	8016dc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016d86:	7dfa      	ldrb	r2, [r7, #23]
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	32ae      	adds	r2, #174	@ 0xae
 8016d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d90:	695b      	ldr	r3, [r3, #20]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d014      	beq.n	8016dc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016d96:	7dfa      	ldrb	r2, [r7, #23]
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016d9e:	7dfa      	ldrb	r2, [r7, #23]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	32ae      	adds	r2, #174	@ 0xae
 8016da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016da8:	695b      	ldr	r3, [r3, #20]
 8016daa:	7afa      	ldrb	r2, [r7, #11]
 8016dac:	4611      	mov	r1, r2
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	4798      	blx	r3
 8016db2:	4603      	mov	r3, r0
 8016db4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016db6:	7dbb      	ldrb	r3, [r7, #22]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d001      	beq.n	8016dc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016dbc:	7dbb      	ldrb	r3, [r7, #22]
 8016dbe:	e000      	b.n	8016dc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016dc0:	2300      	movs	r3, #0
}
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3718      	adds	r7, #24
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b084      	sub	sp, #16
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2201      	movs	r2, #1
 8016dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2200      	movs	r2, #0
 8016de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2200      	movs	r2, #0
 8016dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2200      	movs	r2, #0
 8016df0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2200      	movs	r2, #0
 8016df8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d014      	beq.n	8016e30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d00e      	beq.n	8016e30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016e18:	685b      	ldr	r3, [r3, #4]
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	6852      	ldr	r2, [r2, #4]
 8016e1e:	b2d2      	uxtb	r2, r2
 8016e20:	4611      	mov	r1, r2
 8016e22:	6878      	ldr	r0, [r7, #4]
 8016e24:	4798      	blx	r3
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d001      	beq.n	8016e30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016e2c:	2303      	movs	r3, #3
 8016e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016e30:	2340      	movs	r3, #64	@ 0x40
 8016e32:	2200      	movs	r2, #0
 8016e34:	2100      	movs	r1, #0
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f001 fc3b 	bl	80186b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2201      	movs	r2, #1
 8016e40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	2240      	movs	r2, #64	@ 0x40
 8016e48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016e4c:	2340      	movs	r3, #64	@ 0x40
 8016e4e:	2200      	movs	r2, #0
 8016e50:	2180      	movs	r1, #128	@ 0x80
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f001 fc2d 	bl	80186b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	2240      	movs	r2, #64	@ 0x40
 8016e62:	621a      	str	r2, [r3, #32]

  return ret;
 8016e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e66:	4618      	mov	r0, r3
 8016e68:	3710      	adds	r7, #16
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bd80      	pop	{r7, pc}

08016e6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016e6e:	b480      	push	{r7}
 8016e70:	b083      	sub	sp, #12
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	460b      	mov	r3, r1
 8016e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	78fa      	ldrb	r2, [r7, #3]
 8016e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	2b04      	cmp	r3, #4
 8016ea0:	d006      	beq.n	8016eb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ea8:	b2da      	uxtb	r2, r3
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2204      	movs	r2, #4
 8016eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016eb8:	2300      	movs	r3, #0
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	370c      	adds	r7, #12
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec4:	4770      	bx	lr

08016ec6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016ec6:	b480      	push	{r7}
 8016ec8:	b083      	sub	sp, #12
 8016eca:	af00      	add	r7, sp, #0
 8016ecc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	2b04      	cmp	r3, #4
 8016ed8:	d106      	bne.n	8016ee8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016ee0:	b2da      	uxtb	r2, r3
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016ee8:	2300      	movs	r3, #0
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	370c      	adds	r7, #12
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef4:	4770      	bx	lr

08016ef6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016ef6:	b580      	push	{r7, lr}
 8016ef8:	b082      	sub	sp, #8
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b03      	cmp	r3, #3
 8016f08:	d110      	bne.n	8016f2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d00b      	beq.n	8016f2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f1a:	69db      	ldr	r3, [r3, #28]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d005      	beq.n	8016f2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f26:	69db      	ldr	r3, [r3, #28]
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016f2c:	2300      	movs	r3, #0
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b082      	sub	sp, #8
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
 8016f3e:	460b      	mov	r3, r1
 8016f40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	32ae      	adds	r2, #174	@ 0xae
 8016f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d101      	bne.n	8016f58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016f54:	2303      	movs	r3, #3
 8016f56:	e01c      	b.n	8016f92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016f5e:	b2db      	uxtb	r3, r3
 8016f60:	2b03      	cmp	r3, #3
 8016f62:	d115      	bne.n	8016f90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	32ae      	adds	r2, #174	@ 0xae
 8016f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f72:	6a1b      	ldr	r3, [r3, #32]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d00b      	beq.n	8016f90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	32ae      	adds	r2, #174	@ 0xae
 8016f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f86:	6a1b      	ldr	r3, [r3, #32]
 8016f88:	78fa      	ldrb	r2, [r7, #3]
 8016f8a:	4611      	mov	r1, r2
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f90:	2300      	movs	r3, #0
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016f9a:	b580      	push	{r7, lr}
 8016f9c:	b082      	sub	sp, #8
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
 8016fa2:	460b      	mov	r3, r1
 8016fa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	32ae      	adds	r2, #174	@ 0xae
 8016fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d101      	bne.n	8016fbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016fb8:	2303      	movs	r3, #3
 8016fba:	e01c      	b.n	8016ff6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	2b03      	cmp	r3, #3
 8016fc6:	d115      	bne.n	8016ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	32ae      	adds	r2, #174	@ 0xae
 8016fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d00b      	beq.n	8016ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	32ae      	adds	r2, #174	@ 0xae
 8016fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fec:	78fa      	ldrb	r2, [r7, #3]
 8016fee:	4611      	mov	r1, r2
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ff4:	2300      	movs	r3, #0
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}

08016ffe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016ffe:	b480      	push	{r7}
 8017000:	b083      	sub	sp, #12
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017006:	2300      	movs	r3, #0
}
 8017008:	4618      	mov	r0, r3
 801700a:	370c      	adds	r7, #12
 801700c:	46bd      	mov	sp, r7
 801700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017012:	4770      	bx	lr

08017014 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801701c:	2300      	movs	r3, #0
 801701e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	2201      	movs	r2, #1
 8017024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801702e:	2b00      	cmp	r3, #0
 8017030:	d00e      	beq.n	8017050 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017038:	685b      	ldr	r3, [r3, #4]
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	6852      	ldr	r2, [r2, #4]
 801703e:	b2d2      	uxtb	r2, r2
 8017040:	4611      	mov	r1, r2
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	4798      	blx	r3
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d001      	beq.n	8017050 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801704c:	2303      	movs	r3, #3
 801704e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017050:	7bfb      	ldrb	r3, [r7, #15]
}
 8017052:	4618      	mov	r0, r3
 8017054:	3710      	adds	r7, #16
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}

0801705a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801705a:	b480      	push	{r7}
 801705c:	b083      	sub	sp, #12
 801705e:	af00      	add	r7, sp, #0
 8017060:	6078      	str	r0, [r7, #4]
 8017062:	460b      	mov	r3, r1
 8017064:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017066:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017068:	4618      	mov	r0, r3
 801706a:	370c      	adds	r7, #12
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr

08017074 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017074:	b480      	push	{r7}
 8017076:	b083      	sub	sp, #12
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	460b      	mov	r3, r1
 801707e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017080:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017082:	4618      	mov	r0, r3
 8017084:	370c      	adds	r7, #12
 8017086:	46bd      	mov	sp, r7
 8017088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708c:	4770      	bx	lr

0801708e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801708e:	b580      	push	{r7, lr}
 8017090:	b086      	sub	sp, #24
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
 8017096:	460b      	mov	r3, r1
 8017098:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80170a2:	2300      	movs	r3, #0
 80170a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	885b      	ldrh	r3, [r3, #2]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	68fa      	ldr	r2, [r7, #12]
 80170ae:	7812      	ldrb	r2, [r2, #0]
 80170b0:	4293      	cmp	r3, r2
 80170b2:	d91f      	bls.n	80170f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80170ba:	e013      	b.n	80170e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80170bc:	f107 030a 	add.w	r3, r7, #10
 80170c0:	4619      	mov	r1, r3
 80170c2:	6978      	ldr	r0, [r7, #20]
 80170c4:	f000 f81b 	bl	80170fe <USBD_GetNextDesc>
 80170c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	785b      	ldrb	r3, [r3, #1]
 80170ce:	2b05      	cmp	r3, #5
 80170d0:	d108      	bne.n	80170e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	789b      	ldrb	r3, [r3, #2]
 80170da:	78fa      	ldrb	r2, [r7, #3]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d008      	beq.n	80170f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80170e0:	2300      	movs	r3, #0
 80170e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	885b      	ldrh	r3, [r3, #2]
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	897b      	ldrh	r3, [r7, #10]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d8e5      	bhi.n	80170bc <USBD_GetEpDesc+0x2e>
 80170f0:	e000      	b.n	80170f4 <USBD_GetEpDesc+0x66>
          break;
 80170f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80170f4:	693b      	ldr	r3, [r7, #16]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3718      	adds	r7, #24
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80170fe:	b480      	push	{r7}
 8017100:	b085      	sub	sp, #20
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
 8017106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	68fa      	ldr	r2, [r7, #12]
 8017112:	7812      	ldrb	r2, [r2, #0]
 8017114:	4413      	add	r3, r2
 8017116:	b29a      	uxth	r2, r3
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	461a      	mov	r2, r3
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	4413      	add	r3, r2
 8017126:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017128:	68fb      	ldr	r3, [r7, #12]
}
 801712a:	4618      	mov	r0, r3
 801712c:	3714      	adds	r7, #20
 801712e:	46bd      	mov	sp, r7
 8017130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017134:	4770      	bx	lr

08017136 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017136:	b480      	push	{r7}
 8017138:	b087      	sub	sp, #28
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017142:	697b      	ldr	r3, [r7, #20]
 8017144:	781b      	ldrb	r3, [r3, #0]
 8017146:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	3301      	adds	r3, #1
 801714c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017154:	8a3b      	ldrh	r3, [r7, #16]
 8017156:	021b      	lsls	r3, r3, #8
 8017158:	b21a      	sxth	r2, r3
 801715a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801715e:	4313      	orrs	r3, r2
 8017160:	b21b      	sxth	r3, r3
 8017162:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017164:	89fb      	ldrh	r3, [r7, #14]
}
 8017166:	4618      	mov	r0, r3
 8017168:	371c      	adds	r7, #28
 801716a:	46bd      	mov	sp, r7
 801716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017170:	4770      	bx	lr
	...

08017174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801717e:	2300      	movs	r3, #0
 8017180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	781b      	ldrb	r3, [r3, #0]
 8017186:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801718a:	2b40      	cmp	r3, #64	@ 0x40
 801718c:	d005      	beq.n	801719a <USBD_StdDevReq+0x26>
 801718e:	2b40      	cmp	r3, #64	@ 0x40
 8017190:	d857      	bhi.n	8017242 <USBD_StdDevReq+0xce>
 8017192:	2b00      	cmp	r3, #0
 8017194:	d00f      	beq.n	80171b6 <USBD_StdDevReq+0x42>
 8017196:	2b20      	cmp	r3, #32
 8017198:	d153      	bne.n	8017242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	32ae      	adds	r2, #174	@ 0xae
 80171a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171a8:	689b      	ldr	r3, [r3, #8]
 80171aa:	6839      	ldr	r1, [r7, #0]
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	4798      	blx	r3
 80171b0:	4603      	mov	r3, r0
 80171b2:	73fb      	strb	r3, [r7, #15]
      break;
 80171b4:	e04a      	b.n	801724c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	785b      	ldrb	r3, [r3, #1]
 80171ba:	2b09      	cmp	r3, #9
 80171bc:	d83b      	bhi.n	8017236 <USBD_StdDevReq+0xc2>
 80171be:	a201      	add	r2, pc, #4	@ (adr r2, 80171c4 <USBD_StdDevReq+0x50>)
 80171c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c4:	08017219 	.word	0x08017219
 80171c8:	0801722d 	.word	0x0801722d
 80171cc:	08017237 	.word	0x08017237
 80171d0:	08017223 	.word	0x08017223
 80171d4:	08017237 	.word	0x08017237
 80171d8:	080171f7 	.word	0x080171f7
 80171dc:	080171ed 	.word	0x080171ed
 80171e0:	08017237 	.word	0x08017237
 80171e4:	0801720f 	.word	0x0801720f
 80171e8:	08017201 	.word	0x08017201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80171ec:	6839      	ldr	r1, [r7, #0]
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	f000 fa3c 	bl	801766c <USBD_GetDescriptor>
          break;
 80171f4:	e024      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80171f6:	6839      	ldr	r1, [r7, #0]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 fbcb 	bl	8017994 <USBD_SetAddress>
          break;
 80171fe:	e01f      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017200:	6839      	ldr	r1, [r7, #0]
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f000 fc0a 	bl	8017a1c <USBD_SetConfig>
 8017208:	4603      	mov	r3, r0
 801720a:	73fb      	strb	r3, [r7, #15]
          break;
 801720c:	e018      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801720e:	6839      	ldr	r1, [r7, #0]
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f000 fcad 	bl	8017b70 <USBD_GetConfig>
          break;
 8017216:	e013      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017218:	6839      	ldr	r1, [r7, #0]
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 fcde 	bl	8017bdc <USBD_GetStatus>
          break;
 8017220:	e00e      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017222:	6839      	ldr	r1, [r7, #0]
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f000 fd0d 	bl	8017c44 <USBD_SetFeature>
          break;
 801722a:	e009      	b.n	8017240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801722c:	6839      	ldr	r1, [r7, #0]
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 fd31 	bl	8017c96 <USBD_ClrFeature>
          break;
 8017234:	e004      	b.n	8017240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8017236:	6839      	ldr	r1, [r7, #0]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f000 fd88 	bl	8017d4e <USBD_CtlError>
          break;
 801723e:	bf00      	nop
      }
      break;
 8017240:	e004      	b.n	801724c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017242:	6839      	ldr	r1, [r7, #0]
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f000 fd82 	bl	8017d4e <USBD_CtlError>
      break;
 801724a:	bf00      	nop
  }

  return ret;
 801724c:	7bfb      	ldrb	r3, [r7, #15]
}
 801724e:	4618      	mov	r0, r3
 8017250:	3710      	adds	r7, #16
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}
 8017256:	bf00      	nop

08017258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b084      	sub	sp, #16
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017262:	2300      	movs	r3, #0
 8017264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801726e:	2b40      	cmp	r3, #64	@ 0x40
 8017270:	d005      	beq.n	801727e <USBD_StdItfReq+0x26>
 8017272:	2b40      	cmp	r3, #64	@ 0x40
 8017274:	d852      	bhi.n	801731c <USBD_StdItfReq+0xc4>
 8017276:	2b00      	cmp	r3, #0
 8017278:	d001      	beq.n	801727e <USBD_StdItfReq+0x26>
 801727a:	2b20      	cmp	r3, #32
 801727c:	d14e      	bne.n	801731c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017284:	b2db      	uxtb	r3, r3
 8017286:	3b01      	subs	r3, #1
 8017288:	2b02      	cmp	r3, #2
 801728a:	d840      	bhi.n	801730e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	889b      	ldrh	r3, [r3, #4]
 8017290:	b2db      	uxtb	r3, r3
 8017292:	2b01      	cmp	r3, #1
 8017294:	d836      	bhi.n	8017304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	889b      	ldrh	r3, [r3, #4]
 801729a:	b2db      	uxtb	r3, r3
 801729c:	4619      	mov	r1, r3
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f7ff fedb 	bl	801705a <USBD_CoreFindIF>
 80172a4:	4603      	mov	r3, r0
 80172a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80172a8:	7bbb      	ldrb	r3, [r7, #14]
 80172aa:	2bff      	cmp	r3, #255	@ 0xff
 80172ac:	d01d      	beq.n	80172ea <USBD_StdItfReq+0x92>
 80172ae:	7bbb      	ldrb	r3, [r7, #14]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d11a      	bne.n	80172ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80172b4:	7bba      	ldrb	r2, [r7, #14]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	32ae      	adds	r2, #174	@ 0xae
 80172ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172be:	689b      	ldr	r3, [r3, #8]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d00f      	beq.n	80172e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80172c4:	7bba      	ldrb	r2, [r7, #14]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80172cc:	7bba      	ldrb	r2, [r7, #14]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	32ae      	adds	r2, #174	@ 0xae
 80172d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172d6:	689b      	ldr	r3, [r3, #8]
 80172d8:	6839      	ldr	r1, [r7, #0]
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	4798      	blx	r3
 80172de:	4603      	mov	r3, r0
 80172e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172e2:	e004      	b.n	80172ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80172e4:	2303      	movs	r3, #3
 80172e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80172e8:	e001      	b.n	80172ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80172ea:	2303      	movs	r3, #3
 80172ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	88db      	ldrh	r3, [r3, #6]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d110      	bne.n	8017318 <USBD_StdItfReq+0xc0>
 80172f6:	7bfb      	ldrb	r3, [r7, #15]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d10d      	bne.n	8017318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80172fc:	6878      	ldr	r0, [r7, #4]
 80172fe:	f000 fdfd 	bl	8017efc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017302:	e009      	b.n	8017318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017304:	6839      	ldr	r1, [r7, #0]
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 fd21 	bl	8017d4e <USBD_CtlError>
          break;
 801730c:	e004      	b.n	8017318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f000 fd1c 	bl	8017d4e <USBD_CtlError>
          break;
 8017316:	e000      	b.n	801731a <USBD_StdItfReq+0xc2>
          break;
 8017318:	bf00      	nop
      }
      break;
 801731a:	e004      	b.n	8017326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801731c:	6839      	ldr	r1, [r7, #0]
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f000 fd15 	bl	8017d4e <USBD_CtlError>
      break;
 8017324:	bf00      	nop
  }

  return ret;
 8017326:	7bfb      	ldrb	r3, [r7, #15]
}
 8017328:	4618      	mov	r0, r3
 801732a:	3710      	adds	r7, #16
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}

08017330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801733a:	2300      	movs	r3, #0
 801733c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	889b      	ldrh	r3, [r3, #4]
 8017342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801734c:	2b40      	cmp	r3, #64	@ 0x40
 801734e:	d007      	beq.n	8017360 <USBD_StdEPReq+0x30>
 8017350:	2b40      	cmp	r3, #64	@ 0x40
 8017352:	f200 817f 	bhi.w	8017654 <USBD_StdEPReq+0x324>
 8017356:	2b00      	cmp	r3, #0
 8017358:	d02a      	beq.n	80173b0 <USBD_StdEPReq+0x80>
 801735a:	2b20      	cmp	r3, #32
 801735c:	f040 817a 	bne.w	8017654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017360:	7bbb      	ldrb	r3, [r7, #14]
 8017362:	4619      	mov	r1, r3
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f7ff fe85 	bl	8017074 <USBD_CoreFindEP>
 801736a:	4603      	mov	r3, r0
 801736c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801736e:	7b7b      	ldrb	r3, [r7, #13]
 8017370:	2bff      	cmp	r3, #255	@ 0xff
 8017372:	f000 8174 	beq.w	801765e <USBD_StdEPReq+0x32e>
 8017376:	7b7b      	ldrb	r3, [r7, #13]
 8017378:	2b00      	cmp	r3, #0
 801737a:	f040 8170 	bne.w	801765e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801737e:	7b7a      	ldrb	r2, [r7, #13]
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017386:	7b7a      	ldrb	r2, [r7, #13]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	32ae      	adds	r2, #174	@ 0xae
 801738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017390:	689b      	ldr	r3, [r3, #8]
 8017392:	2b00      	cmp	r3, #0
 8017394:	f000 8163 	beq.w	801765e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017398:	7b7a      	ldrb	r2, [r7, #13]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	32ae      	adds	r2, #174	@ 0xae
 801739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173a2:	689b      	ldr	r3, [r3, #8]
 80173a4:	6839      	ldr	r1, [r7, #0]
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	4798      	blx	r3
 80173aa:	4603      	mov	r3, r0
 80173ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80173ae:	e156      	b.n	801765e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	785b      	ldrb	r3, [r3, #1]
 80173b4:	2b03      	cmp	r3, #3
 80173b6:	d008      	beq.n	80173ca <USBD_StdEPReq+0x9a>
 80173b8:	2b03      	cmp	r3, #3
 80173ba:	f300 8145 	bgt.w	8017648 <USBD_StdEPReq+0x318>
 80173be:	2b00      	cmp	r3, #0
 80173c0:	f000 809b 	beq.w	80174fa <USBD_StdEPReq+0x1ca>
 80173c4:	2b01      	cmp	r3, #1
 80173c6:	d03c      	beq.n	8017442 <USBD_StdEPReq+0x112>
 80173c8:	e13e      	b.n	8017648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173d0:	b2db      	uxtb	r3, r3
 80173d2:	2b02      	cmp	r3, #2
 80173d4:	d002      	beq.n	80173dc <USBD_StdEPReq+0xac>
 80173d6:	2b03      	cmp	r3, #3
 80173d8:	d016      	beq.n	8017408 <USBD_StdEPReq+0xd8>
 80173da:	e02c      	b.n	8017436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80173dc:	7bbb      	ldrb	r3, [r7, #14]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d00d      	beq.n	80173fe <USBD_StdEPReq+0xce>
 80173e2:	7bbb      	ldrb	r3, [r7, #14]
 80173e4:	2b80      	cmp	r3, #128	@ 0x80
 80173e6:	d00a      	beq.n	80173fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80173e8:	7bbb      	ldrb	r3, [r7, #14]
 80173ea:	4619      	mov	r1, r3
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f001 f9a5 	bl	801873c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80173f2:	2180      	movs	r1, #128	@ 0x80
 80173f4:	6878      	ldr	r0, [r7, #4]
 80173f6:	f001 f9a1 	bl	801873c <USBD_LL_StallEP>
 80173fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80173fc:	e020      	b.n	8017440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80173fe:	6839      	ldr	r1, [r7, #0]
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f000 fca4 	bl	8017d4e <USBD_CtlError>
              break;
 8017406:	e01b      	b.n	8017440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	885b      	ldrh	r3, [r3, #2]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d10e      	bne.n	801742e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017410:	7bbb      	ldrb	r3, [r7, #14]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d00b      	beq.n	801742e <USBD_StdEPReq+0xfe>
 8017416:	7bbb      	ldrb	r3, [r7, #14]
 8017418:	2b80      	cmp	r3, #128	@ 0x80
 801741a:	d008      	beq.n	801742e <USBD_StdEPReq+0xfe>
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	88db      	ldrh	r3, [r3, #6]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d104      	bne.n	801742e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017424:	7bbb      	ldrb	r3, [r7, #14]
 8017426:	4619      	mov	r1, r3
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f001 f987 	bl	801873c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f000 fd64 	bl	8017efc <USBD_CtlSendStatus>

              break;
 8017434:	e004      	b.n	8017440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017436:	6839      	ldr	r1, [r7, #0]
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f000 fc88 	bl	8017d4e <USBD_CtlError>
              break;
 801743e:	bf00      	nop
          }
          break;
 8017440:	e107      	b.n	8017652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017448:	b2db      	uxtb	r3, r3
 801744a:	2b02      	cmp	r3, #2
 801744c:	d002      	beq.n	8017454 <USBD_StdEPReq+0x124>
 801744e:	2b03      	cmp	r3, #3
 8017450:	d016      	beq.n	8017480 <USBD_StdEPReq+0x150>
 8017452:	e04b      	b.n	80174ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017454:	7bbb      	ldrb	r3, [r7, #14]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d00d      	beq.n	8017476 <USBD_StdEPReq+0x146>
 801745a:	7bbb      	ldrb	r3, [r7, #14]
 801745c:	2b80      	cmp	r3, #128	@ 0x80
 801745e:	d00a      	beq.n	8017476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017460:	7bbb      	ldrb	r3, [r7, #14]
 8017462:	4619      	mov	r1, r3
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f001 f969 	bl	801873c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801746a:	2180      	movs	r1, #128	@ 0x80
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f001 f965 	bl	801873c <USBD_LL_StallEP>
 8017472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017474:	e040      	b.n	80174f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017476:	6839      	ldr	r1, [r7, #0]
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f000 fc68 	bl	8017d4e <USBD_CtlError>
              break;
 801747e:	e03b      	b.n	80174f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	885b      	ldrh	r3, [r3, #2]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d136      	bne.n	80174f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017488:	7bbb      	ldrb	r3, [r7, #14]
 801748a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801748e:	2b00      	cmp	r3, #0
 8017490:	d004      	beq.n	801749c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017492:	7bbb      	ldrb	r3, [r7, #14]
 8017494:	4619      	mov	r1, r3
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f001 f96f 	bl	801877a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 fd2d 	bl	8017efc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80174a2:	7bbb      	ldrb	r3, [r7, #14]
 80174a4:	4619      	mov	r1, r3
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7ff fde4 	bl	8017074 <USBD_CoreFindEP>
 80174ac:	4603      	mov	r3, r0
 80174ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80174b0:	7b7b      	ldrb	r3, [r7, #13]
 80174b2:	2bff      	cmp	r3, #255	@ 0xff
 80174b4:	d01f      	beq.n	80174f6 <USBD_StdEPReq+0x1c6>
 80174b6:	7b7b      	ldrb	r3, [r7, #13]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d11c      	bne.n	80174f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80174bc:	7b7a      	ldrb	r2, [r7, #13]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80174c4:	7b7a      	ldrb	r2, [r7, #13]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	32ae      	adds	r2, #174	@ 0xae
 80174ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174ce:	689b      	ldr	r3, [r3, #8]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d010      	beq.n	80174f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80174d4:	7b7a      	ldrb	r2, [r7, #13]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	32ae      	adds	r2, #174	@ 0xae
 80174da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174de:	689b      	ldr	r3, [r3, #8]
 80174e0:	6839      	ldr	r1, [r7, #0]
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	4798      	blx	r3
 80174e6:	4603      	mov	r3, r0
 80174e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80174ea:	e004      	b.n	80174f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80174ec:	6839      	ldr	r1, [r7, #0]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f000 fc2d 	bl	8017d4e <USBD_CtlError>
              break;
 80174f4:	e000      	b.n	80174f8 <USBD_StdEPReq+0x1c8>
              break;
 80174f6:	bf00      	nop
          }
          break;
 80174f8:	e0ab      	b.n	8017652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017500:	b2db      	uxtb	r3, r3
 8017502:	2b02      	cmp	r3, #2
 8017504:	d002      	beq.n	801750c <USBD_StdEPReq+0x1dc>
 8017506:	2b03      	cmp	r3, #3
 8017508:	d032      	beq.n	8017570 <USBD_StdEPReq+0x240>
 801750a:	e097      	b.n	801763c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801750c:	7bbb      	ldrb	r3, [r7, #14]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d007      	beq.n	8017522 <USBD_StdEPReq+0x1f2>
 8017512:	7bbb      	ldrb	r3, [r7, #14]
 8017514:	2b80      	cmp	r3, #128	@ 0x80
 8017516:	d004      	beq.n	8017522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017518:	6839      	ldr	r1, [r7, #0]
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f000 fc17 	bl	8017d4e <USBD_CtlError>
                break;
 8017520:	e091      	b.n	8017646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017526:	2b00      	cmp	r3, #0
 8017528:	da0b      	bge.n	8017542 <USBD_StdEPReq+0x212>
 801752a:	7bbb      	ldrb	r3, [r7, #14]
 801752c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017530:	4613      	mov	r3, r2
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	4413      	add	r3, r2
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	3310      	adds	r3, #16
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	4413      	add	r3, r2
 801753e:	3304      	adds	r3, #4
 8017540:	e00b      	b.n	801755a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017542:	7bbb      	ldrb	r3, [r7, #14]
 8017544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017548:	4613      	mov	r3, r2
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	4413      	add	r3, r2
 801754e:	009b      	lsls	r3, r3, #2
 8017550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017554:	687a      	ldr	r2, [r7, #4]
 8017556:	4413      	add	r3, r2
 8017558:	3304      	adds	r3, #4
 801755a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801755c:	68bb      	ldr	r3, [r7, #8]
 801755e:	2200      	movs	r2, #0
 8017560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	2202      	movs	r2, #2
 8017566:	4619      	mov	r1, r3
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f000 fc6d 	bl	8017e48 <USBD_CtlSendData>
              break;
 801756e:	e06a      	b.n	8017646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017574:	2b00      	cmp	r3, #0
 8017576:	da11      	bge.n	801759c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017578:	7bbb      	ldrb	r3, [r7, #14]
 801757a:	f003 020f 	and.w	r2, r3, #15
 801757e:	6879      	ldr	r1, [r7, #4]
 8017580:	4613      	mov	r3, r2
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	4413      	add	r3, r2
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	440b      	add	r3, r1
 801758a:	3324      	adds	r3, #36	@ 0x24
 801758c:	881b      	ldrh	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d117      	bne.n	80175c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017592:	6839      	ldr	r1, [r7, #0]
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f000 fbda 	bl	8017d4e <USBD_CtlError>
                  break;
 801759a:	e054      	b.n	8017646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801759c:	7bbb      	ldrb	r3, [r7, #14]
 801759e:	f003 020f 	and.w	r2, r3, #15
 80175a2:	6879      	ldr	r1, [r7, #4]
 80175a4:	4613      	mov	r3, r2
 80175a6:	009b      	lsls	r3, r3, #2
 80175a8:	4413      	add	r3, r2
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	440b      	add	r3, r1
 80175ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80175b2:	881b      	ldrh	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d104      	bne.n	80175c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80175b8:	6839      	ldr	r1, [r7, #0]
 80175ba:	6878      	ldr	r0, [r7, #4]
 80175bc:	f000 fbc7 	bl	8017d4e <USBD_CtlError>
                  break;
 80175c0:	e041      	b.n	8017646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80175c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	da0b      	bge.n	80175e2 <USBD_StdEPReq+0x2b2>
 80175ca:	7bbb      	ldrb	r3, [r7, #14]
 80175cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175d0:	4613      	mov	r3, r2
 80175d2:	009b      	lsls	r3, r3, #2
 80175d4:	4413      	add	r3, r2
 80175d6:	009b      	lsls	r3, r3, #2
 80175d8:	3310      	adds	r3, #16
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	4413      	add	r3, r2
 80175de:	3304      	adds	r3, #4
 80175e0:	e00b      	b.n	80175fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80175e2:	7bbb      	ldrb	r3, [r7, #14]
 80175e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80175e8:	4613      	mov	r3, r2
 80175ea:	009b      	lsls	r3, r3, #2
 80175ec:	4413      	add	r3, r2
 80175ee:	009b      	lsls	r3, r3, #2
 80175f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	4413      	add	r3, r2
 80175f8:	3304      	adds	r3, #4
 80175fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80175fc:	7bbb      	ldrb	r3, [r7, #14]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d002      	beq.n	8017608 <USBD_StdEPReq+0x2d8>
 8017602:	7bbb      	ldrb	r3, [r7, #14]
 8017604:	2b80      	cmp	r3, #128	@ 0x80
 8017606:	d103      	bne.n	8017610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	2200      	movs	r2, #0
 801760c:	601a      	str	r2, [r3, #0]
 801760e:	e00e      	b.n	801762e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017610:	7bbb      	ldrb	r3, [r7, #14]
 8017612:	4619      	mov	r1, r3
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f001 f8cf 	bl	80187b8 <USBD_LL_IsStallEP>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d003      	beq.n	8017628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	2201      	movs	r2, #1
 8017624:	601a      	str	r2, [r3, #0]
 8017626:	e002      	b.n	801762e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	2200      	movs	r2, #0
 801762c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801762e:	68bb      	ldr	r3, [r7, #8]
 8017630:	2202      	movs	r2, #2
 8017632:	4619      	mov	r1, r3
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 fc07 	bl	8017e48 <USBD_CtlSendData>
              break;
 801763a:	e004      	b.n	8017646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801763c:	6839      	ldr	r1, [r7, #0]
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f000 fb85 	bl	8017d4e <USBD_CtlError>
              break;
 8017644:	bf00      	nop
          }
          break;
 8017646:	e004      	b.n	8017652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017648:	6839      	ldr	r1, [r7, #0]
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f000 fb7f 	bl	8017d4e <USBD_CtlError>
          break;
 8017650:	bf00      	nop
      }
      break;
 8017652:	e005      	b.n	8017660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017654:	6839      	ldr	r1, [r7, #0]
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f000 fb79 	bl	8017d4e <USBD_CtlError>
      break;
 801765c:	e000      	b.n	8017660 <USBD_StdEPReq+0x330>
      break;
 801765e:	bf00      	nop
  }

  return ret;
 8017660:	7bfb      	ldrb	r3, [r7, #15]
}
 8017662:	4618      	mov	r0, r3
 8017664:	3710      	adds	r7, #16
 8017666:	46bd      	mov	sp, r7
 8017668:	bd80      	pop	{r7, pc}
	...

0801766c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b084      	sub	sp, #16
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017676:	2300      	movs	r3, #0
 8017678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801767a:	2300      	movs	r3, #0
 801767c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801767e:	2300      	movs	r3, #0
 8017680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	885b      	ldrh	r3, [r3, #2]
 8017686:	0a1b      	lsrs	r3, r3, #8
 8017688:	b29b      	uxth	r3, r3
 801768a:	3b01      	subs	r3, #1
 801768c:	2b0e      	cmp	r3, #14
 801768e:	f200 8152 	bhi.w	8017936 <USBD_GetDescriptor+0x2ca>
 8017692:	a201      	add	r2, pc, #4	@ (adr r2, 8017698 <USBD_GetDescriptor+0x2c>)
 8017694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017698:	08017709 	.word	0x08017709
 801769c:	08017721 	.word	0x08017721
 80176a0:	08017761 	.word	0x08017761
 80176a4:	08017937 	.word	0x08017937
 80176a8:	08017937 	.word	0x08017937
 80176ac:	080178d7 	.word	0x080178d7
 80176b0:	08017903 	.word	0x08017903
 80176b4:	08017937 	.word	0x08017937
 80176b8:	08017937 	.word	0x08017937
 80176bc:	08017937 	.word	0x08017937
 80176c0:	08017937 	.word	0x08017937
 80176c4:	08017937 	.word	0x08017937
 80176c8:	08017937 	.word	0x08017937
 80176cc:	08017937 	.word	0x08017937
 80176d0:	080176d5 	.word	0x080176d5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176da:	69db      	ldr	r3, [r3, #28]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d00b      	beq.n	80176f8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80176e6:	69db      	ldr	r3, [r3, #28]
 80176e8:	687a      	ldr	r2, [r7, #4]
 80176ea:	7c12      	ldrb	r2, [r2, #16]
 80176ec:	f107 0108 	add.w	r1, r7, #8
 80176f0:	4610      	mov	r0, r2
 80176f2:	4798      	blx	r3
 80176f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80176f6:	e126      	b.n	8017946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80176f8:	6839      	ldr	r1, [r7, #0]
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f000 fb27 	bl	8017d4e <USBD_CtlError>
        err++;
 8017700:	7afb      	ldrb	r3, [r7, #11]
 8017702:	3301      	adds	r3, #1
 8017704:	72fb      	strb	r3, [r7, #11]
      break;
 8017706:	e11e      	b.n	8017946 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	687a      	ldr	r2, [r7, #4]
 8017712:	7c12      	ldrb	r2, [r2, #16]
 8017714:	f107 0108 	add.w	r1, r7, #8
 8017718:	4610      	mov	r0, r2
 801771a:	4798      	blx	r3
 801771c:	60f8      	str	r0, [r7, #12]
      break;
 801771e:	e112      	b.n	8017946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	7c1b      	ldrb	r3, [r3, #16]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d10d      	bne.n	8017744 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017730:	f107 0208 	add.w	r2, r7, #8
 8017734:	4610      	mov	r0, r2
 8017736:	4798      	blx	r3
 8017738:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	3301      	adds	r3, #1
 801773e:	2202      	movs	r2, #2
 8017740:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017742:	e100      	b.n	8017946 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801774c:	f107 0208 	add.w	r2, r7, #8
 8017750:	4610      	mov	r0, r2
 8017752:	4798      	blx	r3
 8017754:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	3301      	adds	r3, #1
 801775a:	2202      	movs	r2, #2
 801775c:	701a      	strb	r2, [r3, #0]
      break;
 801775e:	e0f2      	b.n	8017946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	885b      	ldrh	r3, [r3, #2]
 8017764:	b2db      	uxtb	r3, r3
 8017766:	2b05      	cmp	r3, #5
 8017768:	f200 80ac 	bhi.w	80178c4 <USBD_GetDescriptor+0x258>
 801776c:	a201      	add	r2, pc, #4	@ (adr r2, 8017774 <USBD_GetDescriptor+0x108>)
 801776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017772:	bf00      	nop
 8017774:	0801778d 	.word	0x0801778d
 8017778:	080177c1 	.word	0x080177c1
 801777c:	080177f5 	.word	0x080177f5
 8017780:	08017829 	.word	0x08017829
 8017784:	0801785d 	.word	0x0801785d
 8017788:	08017891 	.word	0x08017891
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d00b      	beq.n	80177b0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801779e:	685b      	ldr	r3, [r3, #4]
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	7c12      	ldrb	r2, [r2, #16]
 80177a4:	f107 0108 	add.w	r1, r7, #8
 80177a8:	4610      	mov	r0, r2
 80177aa:	4798      	blx	r3
 80177ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177ae:	e091      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177b0:	6839      	ldr	r1, [r7, #0]
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 facb 	bl	8017d4e <USBD_CtlError>
            err++;
 80177b8:	7afb      	ldrb	r3, [r7, #11]
 80177ba:	3301      	adds	r3, #1
 80177bc:	72fb      	strb	r3, [r7, #11]
          break;
 80177be:	e089      	b.n	80178d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d00b      	beq.n	80177e4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177d2:	689b      	ldr	r3, [r3, #8]
 80177d4:	687a      	ldr	r2, [r7, #4]
 80177d6:	7c12      	ldrb	r2, [r2, #16]
 80177d8:	f107 0108 	add.w	r1, r7, #8
 80177dc:	4610      	mov	r0, r2
 80177de:	4798      	blx	r3
 80177e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80177e2:	e077      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80177e4:	6839      	ldr	r1, [r7, #0]
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f000 fab1 	bl	8017d4e <USBD_CtlError>
            err++;
 80177ec:	7afb      	ldrb	r3, [r7, #11]
 80177ee:	3301      	adds	r3, #1
 80177f0:	72fb      	strb	r3, [r7, #11]
          break;
 80177f2:	e06f      	b.n	80178d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80177fa:	68db      	ldr	r3, [r3, #12]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d00b      	beq.n	8017818 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017806:	68db      	ldr	r3, [r3, #12]
 8017808:	687a      	ldr	r2, [r7, #4]
 801780a:	7c12      	ldrb	r2, [r2, #16]
 801780c:	f107 0108 	add.w	r1, r7, #8
 8017810:	4610      	mov	r0, r2
 8017812:	4798      	blx	r3
 8017814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017816:	e05d      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017818:	6839      	ldr	r1, [r7, #0]
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f000 fa97 	bl	8017d4e <USBD_CtlError>
            err++;
 8017820:	7afb      	ldrb	r3, [r7, #11]
 8017822:	3301      	adds	r3, #1
 8017824:	72fb      	strb	r3, [r7, #11]
          break;
 8017826:	e055      	b.n	80178d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801782e:	691b      	ldr	r3, [r3, #16]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d00b      	beq.n	801784c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801783a:	691b      	ldr	r3, [r3, #16]
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	7c12      	ldrb	r2, [r2, #16]
 8017840:	f107 0108 	add.w	r1, r7, #8
 8017844:	4610      	mov	r0, r2
 8017846:	4798      	blx	r3
 8017848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801784a:	e043      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801784c:	6839      	ldr	r1, [r7, #0]
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f000 fa7d 	bl	8017d4e <USBD_CtlError>
            err++;
 8017854:	7afb      	ldrb	r3, [r7, #11]
 8017856:	3301      	adds	r3, #1
 8017858:	72fb      	strb	r3, [r7, #11]
          break;
 801785a:	e03b      	b.n	80178d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017862:	695b      	ldr	r3, [r3, #20]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d00b      	beq.n	8017880 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801786e:	695b      	ldr	r3, [r3, #20]
 8017870:	687a      	ldr	r2, [r7, #4]
 8017872:	7c12      	ldrb	r2, [r2, #16]
 8017874:	f107 0108 	add.w	r1, r7, #8
 8017878:	4610      	mov	r0, r2
 801787a:	4798      	blx	r3
 801787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801787e:	e029      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017880:	6839      	ldr	r1, [r7, #0]
 8017882:	6878      	ldr	r0, [r7, #4]
 8017884:	f000 fa63 	bl	8017d4e <USBD_CtlError>
            err++;
 8017888:	7afb      	ldrb	r3, [r7, #11]
 801788a:	3301      	adds	r3, #1
 801788c:	72fb      	strb	r3, [r7, #11]
          break;
 801788e:	e021      	b.n	80178d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017896:	699b      	ldr	r3, [r3, #24]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d00b      	beq.n	80178b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80178a2:	699b      	ldr	r3, [r3, #24]
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	7c12      	ldrb	r2, [r2, #16]
 80178a8:	f107 0108 	add.w	r1, r7, #8
 80178ac:	4610      	mov	r0, r2
 80178ae:	4798      	blx	r3
 80178b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80178b2:	e00f      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80178b4:	6839      	ldr	r1, [r7, #0]
 80178b6:	6878      	ldr	r0, [r7, #4]
 80178b8:	f000 fa49 	bl	8017d4e <USBD_CtlError>
            err++;
 80178bc:	7afb      	ldrb	r3, [r7, #11]
 80178be:	3301      	adds	r3, #1
 80178c0:	72fb      	strb	r3, [r7, #11]
          break;
 80178c2:	e007      	b.n	80178d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80178c4:	6839      	ldr	r1, [r7, #0]
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f000 fa41 	bl	8017d4e <USBD_CtlError>
          err++;
 80178cc:	7afb      	ldrb	r3, [r7, #11]
 80178ce:	3301      	adds	r3, #1
 80178d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80178d2:	bf00      	nop
      }
      break;
 80178d4:	e037      	b.n	8017946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7c1b      	ldrb	r3, [r3, #16]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d109      	bne.n	80178f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80178e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80178e6:	f107 0208 	add.w	r2, r7, #8
 80178ea:	4610      	mov	r0, r2
 80178ec:	4798      	blx	r3
 80178ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80178f0:	e029      	b.n	8017946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80178f2:	6839      	ldr	r1, [r7, #0]
 80178f4:	6878      	ldr	r0, [r7, #4]
 80178f6:	f000 fa2a 	bl	8017d4e <USBD_CtlError>
        err++;
 80178fa:	7afb      	ldrb	r3, [r7, #11]
 80178fc:	3301      	adds	r3, #1
 80178fe:	72fb      	strb	r3, [r7, #11]
      break;
 8017900:	e021      	b.n	8017946 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	7c1b      	ldrb	r3, [r3, #16]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d10d      	bne.n	8017926 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017912:	f107 0208 	add.w	r2, r7, #8
 8017916:	4610      	mov	r0, r2
 8017918:	4798      	blx	r3
 801791a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	3301      	adds	r3, #1
 8017920:	2207      	movs	r2, #7
 8017922:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017924:	e00f      	b.n	8017946 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017926:	6839      	ldr	r1, [r7, #0]
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f000 fa10 	bl	8017d4e <USBD_CtlError>
        err++;
 801792e:	7afb      	ldrb	r3, [r7, #11]
 8017930:	3301      	adds	r3, #1
 8017932:	72fb      	strb	r3, [r7, #11]
      break;
 8017934:	e007      	b.n	8017946 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 fa08 	bl	8017d4e <USBD_CtlError>
      err++;
 801793e:	7afb      	ldrb	r3, [r7, #11]
 8017940:	3301      	adds	r3, #1
 8017942:	72fb      	strb	r3, [r7, #11]
      break;
 8017944:	bf00      	nop
  }

  if (err != 0U)
 8017946:	7afb      	ldrb	r3, [r7, #11]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d11e      	bne.n	801798a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	88db      	ldrh	r3, [r3, #6]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d016      	beq.n	8017982 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017954:	893b      	ldrh	r3, [r7, #8]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d00e      	beq.n	8017978 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	88da      	ldrh	r2, [r3, #6]
 801795e:	893b      	ldrh	r3, [r7, #8]
 8017960:	4293      	cmp	r3, r2
 8017962:	bf28      	it	cs
 8017964:	4613      	movcs	r3, r2
 8017966:	b29b      	uxth	r3, r3
 8017968:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801796a:	893b      	ldrh	r3, [r7, #8]
 801796c:	461a      	mov	r2, r3
 801796e:	68f9      	ldr	r1, [r7, #12]
 8017970:	6878      	ldr	r0, [r7, #4]
 8017972:	f000 fa69 	bl	8017e48 <USBD_CtlSendData>
 8017976:	e009      	b.n	801798c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017978:	6839      	ldr	r1, [r7, #0]
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 f9e7 	bl	8017d4e <USBD_CtlError>
 8017980:	e004      	b.n	801798c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f000 faba 	bl	8017efc <USBD_CtlSendStatus>
 8017988:	e000      	b.n	801798c <USBD_GetDescriptor+0x320>
    return;
 801798a:	bf00      	nop
  }
}
 801798c:	3710      	adds	r7, #16
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop

08017994 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	889b      	ldrh	r3, [r3, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d131      	bne.n	8017a0a <USBD_SetAddress+0x76>
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	88db      	ldrh	r3, [r3, #6]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d12d      	bne.n	8017a0a <USBD_SetAddress+0x76>
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	885b      	ldrh	r3, [r3, #2]
 80179b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80179b4:	d829      	bhi.n	8017a0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	885b      	ldrh	r3, [r3, #2]
 80179ba:	b2db      	uxtb	r3, r3
 80179bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80179c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	2b03      	cmp	r3, #3
 80179cc:	d104      	bne.n	80179d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80179ce:	6839      	ldr	r1, [r7, #0]
 80179d0:	6878      	ldr	r0, [r7, #4]
 80179d2:	f000 f9bc 	bl	8017d4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179d6:	e01d      	b.n	8017a14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	7bfa      	ldrb	r2, [r7, #15]
 80179dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80179e0:	7bfb      	ldrb	r3, [r7, #15]
 80179e2:	4619      	mov	r1, r3
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f000 ff13 	bl	8018810 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f000 fa86 	bl	8017efc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d004      	beq.n	8017a00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2202      	movs	r2, #2
 80179fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80179fe:	e009      	b.n	8017a14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2201      	movs	r2, #1
 8017a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a08:	e004      	b.n	8017a14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017a0a:	6839      	ldr	r1, [r7, #0]
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f000 f99e 	bl	8017d4e <USBD_CtlError>
  }
}
 8017a12:	bf00      	nop
 8017a14:	bf00      	nop
 8017a16:	3710      	adds	r7, #16
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b084      	sub	sp, #16
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017a26:	2300      	movs	r3, #0
 8017a28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	885b      	ldrh	r3, [r3, #2]
 8017a2e:	b2da      	uxtb	r2, r3
 8017a30:	4b4e      	ldr	r3, [pc, #312]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017a32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017a34:	4b4d      	ldr	r3, [pc, #308]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d905      	bls.n	8017a48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017a3c:	6839      	ldr	r1, [r7, #0]
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f000 f985 	bl	8017d4e <USBD_CtlError>
    return USBD_FAIL;
 8017a44:	2303      	movs	r3, #3
 8017a46:	e08c      	b.n	8017b62 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b02      	cmp	r3, #2
 8017a52:	d002      	beq.n	8017a5a <USBD_SetConfig+0x3e>
 8017a54:	2b03      	cmp	r3, #3
 8017a56:	d029      	beq.n	8017aac <USBD_SetConfig+0x90>
 8017a58:	e075      	b.n	8017b46 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017a5a:	4b44      	ldr	r3, [pc, #272]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d020      	beq.n	8017aa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017a62:	4b42      	ldr	r3, [pc, #264]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017a64:	781b      	ldrb	r3, [r3, #0]
 8017a66:	461a      	mov	r2, r3
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017a6e:	781b      	ldrb	r3, [r3, #0]
 8017a70:	4619      	mov	r1, r3
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f7fe ffb9 	bl	80169ea <USBD_SetClassConfig>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017a7c:	7bfb      	ldrb	r3, [r7, #15]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d008      	beq.n	8017a94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017a82:	6839      	ldr	r1, [r7, #0]
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f000 f962 	bl	8017d4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017a92:	e065      	b.n	8017b60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f000 fa31 	bl	8017efc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2203      	movs	r2, #3
 8017a9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017aa2:	e05d      	b.n	8017b60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f000 fa29 	bl	8017efc <USBD_CtlSendStatus>
      break;
 8017aaa:	e059      	b.n	8017b60 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017aac:	4b2f      	ldr	r3, [pc, #188]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d112      	bne.n	8017ada <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2202      	movs	r2, #2
 8017ab8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017abc:	4b2b      	ldr	r3, [pc, #172]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017ac6:	4b29      	ldr	r3, [pc, #164]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017ac8:	781b      	ldrb	r3, [r3, #0]
 8017aca:	4619      	mov	r1, r3
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7fe ffa8 	bl	8016a22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017ad2:	6878      	ldr	r0, [r7, #4]
 8017ad4:	f000 fa12 	bl	8017efc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017ad8:	e042      	b.n	8017b60 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017ada:	4b24      	ldr	r3, [pc, #144]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017adc:	781b      	ldrb	r3, [r3, #0]
 8017ade:	461a      	mov	r2, r3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d02a      	beq.n	8017b3e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	b2db      	uxtb	r3, r3
 8017aee:	4619      	mov	r1, r3
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f7fe ff96 	bl	8016a22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017af6:	4b1d      	ldr	r3, [pc, #116]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017af8:	781b      	ldrb	r3, [r3, #0]
 8017afa:	461a      	mov	r2, r3
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017b00:	4b1a      	ldr	r3, [pc, #104]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	4619      	mov	r1, r3
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f7fe ff6f 	bl	80169ea <USBD_SetClassConfig>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017b10:	7bfb      	ldrb	r3, [r7, #15]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d00f      	beq.n	8017b36 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017b16:	6839      	ldr	r1, [r7, #0]
 8017b18:	6878      	ldr	r0, [r7, #4]
 8017b1a:	f000 f918 	bl	8017d4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	b2db      	uxtb	r3, r3
 8017b24:	4619      	mov	r1, r3
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f7fe ff7b 	bl	8016a22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2202      	movs	r2, #2
 8017b30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017b34:	e014      	b.n	8017b60 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017b36:	6878      	ldr	r0, [r7, #4]
 8017b38:	f000 f9e0 	bl	8017efc <USBD_CtlSendStatus>
      break;
 8017b3c:	e010      	b.n	8017b60 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017b3e:	6878      	ldr	r0, [r7, #4]
 8017b40:	f000 f9dc 	bl	8017efc <USBD_CtlSendStatus>
      break;
 8017b44:	e00c      	b.n	8017b60 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017b46:	6839      	ldr	r1, [r7, #0]
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f000 f900 	bl	8017d4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017b4e:	4b07      	ldr	r3, [pc, #28]	@ (8017b6c <USBD_SetConfig+0x150>)
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	4619      	mov	r1, r3
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f7fe ff64 	bl	8016a22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017b5a:	2303      	movs	r3, #3
 8017b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8017b5e:	bf00      	nop
  }

  return ret;
 8017b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3710      	adds	r7, #16
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	2401640c 	.word	0x2401640c

08017b70 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
 8017b78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	88db      	ldrh	r3, [r3, #6]
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d004      	beq.n	8017b8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017b82:	6839      	ldr	r1, [r7, #0]
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f000 f8e2 	bl	8017d4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017b8a:	e023      	b.n	8017bd4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	2b02      	cmp	r3, #2
 8017b96:	dc02      	bgt.n	8017b9e <USBD_GetConfig+0x2e>
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	dc03      	bgt.n	8017ba4 <USBD_GetConfig+0x34>
 8017b9c:	e015      	b.n	8017bca <USBD_GetConfig+0x5a>
 8017b9e:	2b03      	cmp	r3, #3
 8017ba0:	d00b      	beq.n	8017bba <USBD_GetConfig+0x4a>
 8017ba2:	e012      	b.n	8017bca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	3308      	adds	r3, #8
 8017bae:	2201      	movs	r2, #1
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	f000 f948 	bl	8017e48 <USBD_CtlSendData>
        break;
 8017bb8:	e00c      	b.n	8017bd4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	3304      	adds	r3, #4
 8017bbe:	2201      	movs	r2, #1
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	6878      	ldr	r0, [r7, #4]
 8017bc4:	f000 f940 	bl	8017e48 <USBD_CtlSendData>
        break;
 8017bc8:	e004      	b.n	8017bd4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017bca:	6839      	ldr	r1, [r7, #0]
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f000 f8be 	bl	8017d4e <USBD_CtlError>
        break;
 8017bd2:	bf00      	nop
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b082      	sub	sp, #8
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bec:	b2db      	uxtb	r3, r3
 8017bee:	3b01      	subs	r3, #1
 8017bf0:	2b02      	cmp	r3, #2
 8017bf2:	d81e      	bhi.n	8017c32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	88db      	ldrh	r3, [r3, #6]
 8017bf8:	2b02      	cmp	r3, #2
 8017bfa:	d004      	beq.n	8017c06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017bfc:	6839      	ldr	r1, [r7, #0]
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f000 f8a5 	bl	8017d4e <USBD_CtlError>
        break;
 8017c04:	e01a      	b.n	8017c3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2201      	movs	r2, #1
 8017c0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d005      	beq.n	8017c22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	68db      	ldr	r3, [r3, #12]
 8017c1a:	f043 0202 	orr.w	r2, r3, #2
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	330c      	adds	r3, #12
 8017c26:	2202      	movs	r2, #2
 8017c28:	4619      	mov	r1, r3
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f000 f90c 	bl	8017e48 <USBD_CtlSendData>
      break;
 8017c30:	e004      	b.n	8017c3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017c32:	6839      	ldr	r1, [r7, #0]
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f000 f88a 	bl	8017d4e <USBD_CtlError>
      break;
 8017c3a:	bf00      	nop
  }
}
 8017c3c:	bf00      	nop
 8017c3e:	3708      	adds	r7, #8
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
 8017c4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	885b      	ldrh	r3, [r3, #2]
 8017c52:	2b01      	cmp	r3, #1
 8017c54:	d107      	bne.n	8017c66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	2201      	movs	r2, #1
 8017c5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f000 f94c 	bl	8017efc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017c64:	e013      	b.n	8017c8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017c66:	683b      	ldr	r3, [r7, #0]
 8017c68:	885b      	ldrh	r3, [r3, #2]
 8017c6a:	2b02      	cmp	r3, #2
 8017c6c:	d10b      	bne.n	8017c86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	889b      	ldrh	r3, [r3, #4]
 8017c72:	0a1b      	lsrs	r3, r3, #8
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	b2da      	uxtb	r2, r3
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f000 f93c 	bl	8017efc <USBD_CtlSendStatus>
}
 8017c84:	e003      	b.n	8017c8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017c86:	6839      	ldr	r1, [r7, #0]
 8017c88:	6878      	ldr	r0, [r7, #4]
 8017c8a:	f000 f860 	bl	8017d4e <USBD_CtlError>
}
 8017c8e:	bf00      	nop
 8017c90:	3708      	adds	r7, #8
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}

08017c96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c96:	b580      	push	{r7, lr}
 8017c98:	b082      	sub	sp, #8
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	6078      	str	r0, [r7, #4]
 8017c9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ca6:	b2db      	uxtb	r3, r3
 8017ca8:	3b01      	subs	r3, #1
 8017caa:	2b02      	cmp	r3, #2
 8017cac:	d80b      	bhi.n	8017cc6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	885b      	ldrh	r3, [r3, #2]
 8017cb2:	2b01      	cmp	r3, #1
 8017cb4:	d10c      	bne.n	8017cd0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017cbe:	6878      	ldr	r0, [r7, #4]
 8017cc0:	f000 f91c 	bl	8017efc <USBD_CtlSendStatus>
      }
      break;
 8017cc4:	e004      	b.n	8017cd0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017cc6:	6839      	ldr	r1, [r7, #0]
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f000 f840 	bl	8017d4e <USBD_CtlError>
      break;
 8017cce:	e000      	b.n	8017cd2 <USBD_ClrFeature+0x3c>
      break;
 8017cd0:	bf00      	nop
  }
}
 8017cd2:	bf00      	nop
 8017cd4:	3708      	adds	r7, #8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}

08017cda <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017cda:	b580      	push	{r7, lr}
 8017cdc:	b084      	sub	sp, #16
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	6078      	str	r0, [r7, #4]
 8017ce2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	781a      	ldrb	r2, [r3, #0]
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	781a      	ldrb	r2, [r3, #0]
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	3301      	adds	r3, #1
 8017d02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017d04:	68f8      	ldr	r0, [r7, #12]
 8017d06:	f7ff fa16 	bl	8017136 <SWAPBYTE>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	3301      	adds	r3, #1
 8017d16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	3301      	adds	r3, #1
 8017d1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017d1e:	68f8      	ldr	r0, [r7, #12]
 8017d20:	f7ff fa09 	bl	8017136 <SWAPBYTE>
 8017d24:	4603      	mov	r3, r0
 8017d26:	461a      	mov	r2, r3
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	3301      	adds	r3, #1
 8017d30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	3301      	adds	r3, #1
 8017d36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017d38:	68f8      	ldr	r0, [r7, #12]
 8017d3a:	f7ff f9fc 	bl	8017136 <SWAPBYTE>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	461a      	mov	r2, r3
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	80da      	strh	r2, [r3, #6]
}
 8017d46:	bf00      	nop
 8017d48:	3710      	adds	r7, #16
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bd80      	pop	{r7, pc}

08017d4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d4e:	b580      	push	{r7, lr}
 8017d50:	b082      	sub	sp, #8
 8017d52:	af00      	add	r7, sp, #0
 8017d54:	6078      	str	r0, [r7, #4]
 8017d56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017d58:	2180      	movs	r1, #128	@ 0x80
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f000 fcee 	bl	801873c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017d60:	2100      	movs	r1, #0
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f000 fcea 	bl	801873c <USBD_LL_StallEP>
}
 8017d68:	bf00      	nop
 8017d6a:	3708      	adds	r7, #8
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b086      	sub	sp, #24
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	60f8      	str	r0, [r7, #12]
 8017d78:	60b9      	str	r1, [r7, #8]
 8017d7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d042      	beq.n	8017e0c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8017d8a:	6938      	ldr	r0, [r7, #16]
 8017d8c:	f000 f842 	bl	8017e14 <USBD_GetLen>
 8017d90:	4603      	mov	r3, r0
 8017d92:	3301      	adds	r3, #1
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d9a:	d808      	bhi.n	8017dae <USBD_GetString+0x3e>
 8017d9c:	6938      	ldr	r0, [r7, #16]
 8017d9e:	f000 f839 	bl	8017e14 <USBD_GetLen>
 8017da2:	4603      	mov	r3, r0
 8017da4:	3301      	adds	r3, #1
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	005b      	lsls	r3, r3, #1
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	e001      	b.n	8017db2 <USBD_GetString+0x42>
 8017dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017db6:	7dfb      	ldrb	r3, [r7, #23]
 8017db8:	68ba      	ldr	r2, [r7, #8]
 8017dba:	4413      	add	r3, r2
 8017dbc:	687a      	ldr	r2, [r7, #4]
 8017dbe:	7812      	ldrb	r2, [r2, #0]
 8017dc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8017dc2:	7dfb      	ldrb	r3, [r7, #23]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017dc8:	7dfb      	ldrb	r3, [r7, #23]
 8017dca:	68ba      	ldr	r2, [r7, #8]
 8017dcc:	4413      	add	r3, r2
 8017dce:	2203      	movs	r2, #3
 8017dd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8017dd2:	7dfb      	ldrb	r3, [r7, #23]
 8017dd4:	3301      	adds	r3, #1
 8017dd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017dd8:	e013      	b.n	8017e02 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017dda:	7dfb      	ldrb	r3, [r7, #23]
 8017ddc:	68ba      	ldr	r2, [r7, #8]
 8017dde:	4413      	add	r3, r2
 8017de0:	693a      	ldr	r2, [r7, #16]
 8017de2:	7812      	ldrb	r2, [r2, #0]
 8017de4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017de6:	693b      	ldr	r3, [r7, #16]
 8017de8:	3301      	adds	r3, #1
 8017dea:	613b      	str	r3, [r7, #16]
    idx++;
 8017dec:	7dfb      	ldrb	r3, [r7, #23]
 8017dee:	3301      	adds	r3, #1
 8017df0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017df2:	7dfb      	ldrb	r3, [r7, #23]
 8017df4:	68ba      	ldr	r2, [r7, #8]
 8017df6:	4413      	add	r3, r2
 8017df8:	2200      	movs	r2, #0
 8017dfa:	701a      	strb	r2, [r3, #0]
    idx++;
 8017dfc:	7dfb      	ldrb	r3, [r7, #23]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d1e7      	bne.n	8017dda <USBD_GetString+0x6a>
 8017e0a:	e000      	b.n	8017e0e <USBD_GetString+0x9e>
    return;
 8017e0c:	bf00      	nop
  }
}
 8017e0e:	3718      	adds	r7, #24
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017e14:	b480      	push	{r7}
 8017e16:	b085      	sub	sp, #20
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017e24:	e005      	b.n	8017e32 <USBD_GetLen+0x1e>
  {
    len++;
 8017e26:	7bfb      	ldrb	r3, [r7, #15]
 8017e28:	3301      	adds	r3, #1
 8017e2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	3301      	adds	r3, #1
 8017e30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d1f5      	bne.n	8017e26 <USBD_GetLen+0x12>
  }

  return len;
 8017e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3714      	adds	r7, #20
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr

08017e48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	60f8      	str	r0, [r7, #12]
 8017e50:	60b9      	str	r1, [r7, #8]
 8017e52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2202      	movs	r2, #2
 8017e58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	687a      	ldr	r2, [r7, #4]
 8017e66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	68ba      	ldr	r2, [r7, #8]
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	68f8      	ldr	r0, [r7, #12]
 8017e70:	f000 fced 	bl	801884e <USBD_LL_Transmit>

  return USBD_OK;
 8017e74:	2300      	movs	r3, #0
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	3710      	adds	r7, #16
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}

08017e7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017e7e:	b580      	push	{r7, lr}
 8017e80:	b084      	sub	sp, #16
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	60f8      	str	r0, [r7, #12]
 8017e86:	60b9      	str	r1, [r7, #8]
 8017e88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	68ba      	ldr	r2, [r7, #8]
 8017e8e:	2100      	movs	r1, #0
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f000 fcdc 	bl	801884e <USBD_LL_Transmit>

  return USBD_OK;
 8017e96:	2300      	movs	r3, #0
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3710      	adds	r7, #16
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b084      	sub	sp, #16
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	60f8      	str	r0, [r7, #12]
 8017ea8:	60b9      	str	r1, [r7, #8]
 8017eaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	2203      	movs	r2, #3
 8017eb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	687a      	ldr	r2, [r7, #4]
 8017eb8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	68ba      	ldr	r2, [r7, #8]
 8017ec8:	2100      	movs	r1, #0
 8017eca:	68f8      	ldr	r0, [r7, #12]
 8017ecc:	f000 fce0 	bl	8018890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ed0:	2300      	movs	r3, #0
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}

08017eda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b084      	sub	sp, #16
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	60f8      	str	r0, [r7, #12]
 8017ee2:	60b9      	str	r1, [r7, #8]
 8017ee4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	68ba      	ldr	r2, [r7, #8]
 8017eea:	2100      	movs	r1, #0
 8017eec:	68f8      	ldr	r0, [r7, #12]
 8017eee:	f000 fccf 	bl	8018890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ef2:	2300      	movs	r3, #0
}
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	3710      	adds	r7, #16
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}

08017efc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b082      	sub	sp, #8
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2204      	movs	r2, #4
 8017f08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	2200      	movs	r2, #0
 8017f10:	2100      	movs	r1, #0
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f000 fc9b 	bl	801884e <USBD_LL_Transmit>

  return USBD_OK;
 8017f18:	2300      	movs	r3, #0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3708      	adds	r7, #8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}

08017f22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017f22:	b580      	push	{r7, lr}
 8017f24:	b082      	sub	sp, #8
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2205      	movs	r2, #5
 8017f2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f32:	2300      	movs	r3, #0
 8017f34:	2200      	movs	r2, #0
 8017f36:	2100      	movs	r1, #0
 8017f38:	6878      	ldr	r0, [r7, #4]
 8017f3a:	f000 fca9 	bl	8018890 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017f3e:	2300      	movs	r3, #0
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3708      	adds	r7, #8
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}

08017f48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017f4c:	2201      	movs	r2, #1
 8017f4e:	4913      	ldr	r1, [pc, #76]	@ (8017f9c <MX_USB_DEVICE_Init+0x54>)
 8017f50:	4813      	ldr	r0, [pc, #76]	@ (8017fa0 <MX_USB_DEVICE_Init+0x58>)
 8017f52:	f7fe fccd 	bl	80168f0 <USBD_Init>
 8017f56:	4603      	mov	r3, r0
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d001      	beq.n	8017f60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017f5c:	f7ea f92a 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8017f60:	4910      	ldr	r1, [pc, #64]	@ (8017fa4 <MX_USB_DEVICE_Init+0x5c>)
 8017f62:	480f      	ldr	r0, [pc, #60]	@ (8017fa0 <MX_USB_DEVICE_Init+0x58>)
 8017f64:	f7fe fcf4 	bl	8016950 <USBD_RegisterClass>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d001      	beq.n	8017f72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017f6e:	f7ea f921 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8017f72:	490d      	ldr	r1, [pc, #52]	@ (8017fa8 <MX_USB_DEVICE_Init+0x60>)
 8017f74:	480a      	ldr	r0, [pc, #40]	@ (8017fa0 <MX_USB_DEVICE_Init+0x58>)
 8017f76:	f7fe fbeb 	bl	8016750 <USBD_CDC_RegisterInterface>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d001      	beq.n	8017f84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017f80:	f7ea f918 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017f84:	4806      	ldr	r0, [pc, #24]	@ (8017fa0 <MX_USB_DEVICE_Init+0x58>)
 8017f86:	f7fe fd19 	bl	80169bc <USBD_Start>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d001      	beq.n	8017f94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017f90:	f7ea f910 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017f94:	f7f5 f94c 	bl	800d230 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017f98:	bf00      	nop
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	240000e0 	.word	0x240000e0
 8017fa0:	24016410 	.word	0x24016410
 8017fa4:	2400004c 	.word	0x2400004c
 8017fa8:	240000cc 	.word	0x240000cc

08017fac <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	4905      	ldr	r1, [pc, #20]	@ (8017fc8 <CDC_Init_HS+0x1c>)
 8017fb4:	4805      	ldr	r0, [pc, #20]	@ (8017fcc <CDC_Init_HS+0x20>)
 8017fb6:	f7fe fbe5 	bl	8016784 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017fba:	4905      	ldr	r1, [pc, #20]	@ (8017fd0 <CDC_Init_HS+0x24>)
 8017fbc:	4803      	ldr	r0, [pc, #12]	@ (8017fcc <CDC_Init_HS+0x20>)
 8017fbe:	f7fe fc03 	bl	80167c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017fc2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	bd80      	pop	{r7, pc}
 8017fc8:	2401e6ec 	.word	0x2401e6ec
 8017fcc:	24016410 	.word	0x24016410
 8017fd0:	240166ec 	.word	0x240166ec

08017fd4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017fd4:	b480      	push	{r7}
 8017fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017fd8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr

08017fe4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	b083      	sub	sp, #12
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	4603      	mov	r3, r0
 8017fec:	6039      	str	r1, [r7, #0]
 8017fee:	71fb      	strb	r3, [r7, #7]
 8017ff0:	4613      	mov	r3, r2
 8017ff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8017ff4:	79fb      	ldrb	r3, [r7, #7]
 8017ff6:	2b23      	cmp	r3, #35	@ 0x23
 8017ff8:	d84a      	bhi.n	8018090 <CDC_Control_HS+0xac>
 8017ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8018000 <CDC_Control_HS+0x1c>)
 8017ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018000:	08018091 	.word	0x08018091
 8018004:	08018091 	.word	0x08018091
 8018008:	08018091 	.word	0x08018091
 801800c:	08018091 	.word	0x08018091
 8018010:	08018091 	.word	0x08018091
 8018014:	08018091 	.word	0x08018091
 8018018:	08018091 	.word	0x08018091
 801801c:	08018091 	.word	0x08018091
 8018020:	08018091 	.word	0x08018091
 8018024:	08018091 	.word	0x08018091
 8018028:	08018091 	.word	0x08018091
 801802c:	08018091 	.word	0x08018091
 8018030:	08018091 	.word	0x08018091
 8018034:	08018091 	.word	0x08018091
 8018038:	08018091 	.word	0x08018091
 801803c:	08018091 	.word	0x08018091
 8018040:	08018091 	.word	0x08018091
 8018044:	08018091 	.word	0x08018091
 8018048:	08018091 	.word	0x08018091
 801804c:	08018091 	.word	0x08018091
 8018050:	08018091 	.word	0x08018091
 8018054:	08018091 	.word	0x08018091
 8018058:	08018091 	.word	0x08018091
 801805c:	08018091 	.word	0x08018091
 8018060:	08018091 	.word	0x08018091
 8018064:	08018091 	.word	0x08018091
 8018068:	08018091 	.word	0x08018091
 801806c:	08018091 	.word	0x08018091
 8018070:	08018091 	.word	0x08018091
 8018074:	08018091 	.word	0x08018091
 8018078:	08018091 	.word	0x08018091
 801807c:	08018091 	.word	0x08018091
 8018080:	08018091 	.word	0x08018091
 8018084:	08018091 	.word	0x08018091
 8018088:	08018091 	.word	0x08018091
 801808c:	08018091 	.word	0x08018091
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018090:	bf00      	nop
  }

  return (USBD_OK);
 8018092:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8018094:	4618      	mov	r0, r3
 8018096:	370c      	adds	r7, #12
 8018098:	46bd      	mov	sp, r7
 801809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809e:	4770      	bx	lr

080180a0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b082      	sub	sp, #8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80180aa:	6879      	ldr	r1, [r7, #4]
 80180ac:	4808      	ldr	r0, [pc, #32]	@ (80180d0 <CDC_Receive_HS+0x30>)
 80180ae:	f7fe fb8b 	bl	80167c8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80180b2:	4807      	ldr	r0, [pc, #28]	@ (80180d0 <CDC_Receive_HS+0x30>)
 80180b4:	f7fe fbe6 	bl	8016884 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	461a      	mov	r2, r3
 80180be:	6879      	ldr	r1, [r7, #4]
 80180c0:	4804      	ldr	r0, [pc, #16]	@ (80180d4 <CDC_Receive_HS+0x34>)
 80180c2:	f7ed fbf7 	bl	80058b4 <VibeCheckShell_PutInput>

	return (USBD_OK);
 80180c6:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80180c8:	4618      	mov	r0, r3
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}
 80180d0:	24016410 	.word	0x24016410
 80180d4:	240009b8 	.word	0x240009b8

080180d8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b084      	sub	sp, #16
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	460b      	mov	r3, r1
 80180e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80180e4:	2300      	movs	r3, #0
 80180e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80180e8:	4b0d      	ldr	r3, [pc, #52]	@ (8018120 <CDC_Transmit_HS+0x48>)
 80180ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80180ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d001      	beq.n	80180fe <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80180fa:	2301      	movs	r3, #1
 80180fc:	e00b      	b.n	8018116 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80180fe:	887b      	ldrh	r3, [r7, #2]
 8018100:	461a      	mov	r2, r3
 8018102:	6879      	ldr	r1, [r7, #4]
 8018104:	4806      	ldr	r0, [pc, #24]	@ (8018120 <CDC_Transmit_HS+0x48>)
 8018106:	f7fe fb3d 	bl	8016784 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801810a:	4805      	ldr	r0, [pc, #20]	@ (8018120 <CDC_Transmit_HS+0x48>)
 801810c:	f7fe fb7a 	bl	8016804 <USBD_CDC_TransmitPacket>
 8018110:	4603      	mov	r3, r0
 8018112:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 8018114:	7bfb      	ldrb	r3, [r7, #15]
}
 8018116:	4618      	mov	r0, r3
 8018118:	3710      	adds	r7, #16
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	24016410 	.word	0x24016410

08018124 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018124:	b480      	push	{r7}
 8018126:	b087      	sub	sp, #28
 8018128:	af00      	add	r7, sp, #0
 801812a:	60f8      	str	r0, [r7, #12]
 801812c:	60b9      	str	r1, [r7, #8]
 801812e:	4613      	mov	r3, r2
 8018130:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018132:	2300      	movs	r3, #0
 8018134:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801813a:	4618      	mov	r0, r3
 801813c:	371c      	adds	r7, #28
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr
	...

08018148 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018148:	b480      	push	{r7}
 801814a:	b083      	sub	sp, #12
 801814c:	af00      	add	r7, sp, #0
 801814e:	4603      	mov	r3, r0
 8018150:	6039      	str	r1, [r7, #0]
 8018152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018154:	683b      	ldr	r3, [r7, #0]
 8018156:	2212      	movs	r2, #18
 8018158:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801815a:	4b03      	ldr	r3, [pc, #12]	@ (8018168 <USBD_HS_DeviceDescriptor+0x20>)
}
 801815c:	4618      	mov	r0, r3
 801815e:	370c      	adds	r7, #12
 8018160:	46bd      	mov	sp, r7
 8018162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018166:	4770      	bx	lr
 8018168:	24000100 	.word	0x24000100

0801816c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	4603      	mov	r3, r0
 8018174:	6039      	str	r1, [r7, #0]
 8018176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	2204      	movs	r2, #4
 801817c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801817e:	4b03      	ldr	r3, [pc, #12]	@ (801818c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018180:	4618      	mov	r0, r3
 8018182:	370c      	adds	r7, #12
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr
 801818c:	24000114 	.word	0x24000114

08018190 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	4603      	mov	r3, r0
 8018198:	6039      	str	r1, [r7, #0]
 801819a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801819c:	79fb      	ldrb	r3, [r7, #7]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d105      	bne.n	80181ae <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80181a2:	683a      	ldr	r2, [r7, #0]
 80181a4:	4907      	ldr	r1, [pc, #28]	@ (80181c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80181a6:	4808      	ldr	r0, [pc, #32]	@ (80181c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80181a8:	f7ff fde2 	bl	8017d70 <USBD_GetString>
 80181ac:	e004      	b.n	80181b8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80181ae:	683a      	ldr	r2, [r7, #0]
 80181b0:	4904      	ldr	r1, [pc, #16]	@ (80181c4 <USBD_HS_ProductStrDescriptor+0x34>)
 80181b2:	4805      	ldr	r0, [pc, #20]	@ (80181c8 <USBD_HS_ProductStrDescriptor+0x38>)
 80181b4:	f7ff fddc 	bl	8017d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 80181b8:	4b02      	ldr	r3, [pc, #8]	@ (80181c4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	3708      	adds	r7, #8
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	2401eeec 	.word	0x2401eeec
 80181c8:	0801da10 	.word	0x0801da10

080181cc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	4603      	mov	r3, r0
 80181d4:	6039      	str	r1, [r7, #0]
 80181d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80181d8:	683a      	ldr	r2, [r7, #0]
 80181da:	4904      	ldr	r1, [pc, #16]	@ (80181ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80181dc:	4804      	ldr	r0, [pc, #16]	@ (80181f0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80181de:	f7ff fdc7 	bl	8017d70 <USBD_GetString>
  return USBD_StrDesc;
 80181e2:	4b02      	ldr	r3, [pc, #8]	@ (80181ec <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3708      	adds	r7, #8
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	2401eeec 	.word	0x2401eeec
 80181f0:	0801da1c 	.word	0x0801da1c

080181f4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	4603      	mov	r3, r0
 80181fc:	6039      	str	r1, [r7, #0]
 80181fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	221a      	movs	r2, #26
 8018204:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018206:	f000 f843 	bl	8018290 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801820a:	4b02      	ldr	r3, [pc, #8]	@ (8018214 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801820c:	4618      	mov	r0, r3
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	24000118 	.word	0x24000118

08018218 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b082      	sub	sp, #8
 801821c:	af00      	add	r7, sp, #0
 801821e:	4603      	mov	r3, r0
 8018220:	6039      	str	r1, [r7, #0]
 8018222:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018224:	79fb      	ldrb	r3, [r7, #7]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d105      	bne.n	8018236 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801822a:	683a      	ldr	r2, [r7, #0]
 801822c:	4907      	ldr	r1, [pc, #28]	@ (801824c <USBD_HS_ConfigStrDescriptor+0x34>)
 801822e:	4808      	ldr	r0, [pc, #32]	@ (8018250 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018230:	f7ff fd9e 	bl	8017d70 <USBD_GetString>
 8018234:	e004      	b.n	8018240 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018236:	683a      	ldr	r2, [r7, #0]
 8018238:	4904      	ldr	r1, [pc, #16]	@ (801824c <USBD_HS_ConfigStrDescriptor+0x34>)
 801823a:	4805      	ldr	r0, [pc, #20]	@ (8018250 <USBD_HS_ConfigStrDescriptor+0x38>)
 801823c:	f7ff fd98 	bl	8017d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018240:	4b02      	ldr	r3, [pc, #8]	@ (801824c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018242:	4618      	mov	r0, r3
 8018244:	3708      	adds	r7, #8
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}
 801824a:	bf00      	nop
 801824c:	2401eeec 	.word	0x2401eeec
 8018250:	0801da28 	.word	0x0801da28

08018254 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b082      	sub	sp, #8
 8018258:	af00      	add	r7, sp, #0
 801825a:	4603      	mov	r3, r0
 801825c:	6039      	str	r1, [r7, #0]
 801825e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018260:	79fb      	ldrb	r3, [r7, #7]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d105      	bne.n	8018272 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018266:	683a      	ldr	r2, [r7, #0]
 8018268:	4907      	ldr	r1, [pc, #28]	@ (8018288 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801826a:	4808      	ldr	r0, [pc, #32]	@ (801828c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801826c:	f7ff fd80 	bl	8017d70 <USBD_GetString>
 8018270:	e004      	b.n	801827c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018272:	683a      	ldr	r2, [r7, #0]
 8018274:	4904      	ldr	r1, [pc, #16]	@ (8018288 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018276:	4805      	ldr	r0, [pc, #20]	@ (801828c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018278:	f7ff fd7a 	bl	8017d70 <USBD_GetString>
  }
  return USBD_StrDesc;
 801827c:	4b02      	ldr	r3, [pc, #8]	@ (8018288 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801827e:	4618      	mov	r0, r3
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}
 8018286:	bf00      	nop
 8018288:	2401eeec 	.word	0x2401eeec
 801828c:	0801da34 	.word	0x0801da34

08018290 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018296:	4b0f      	ldr	r3, [pc, #60]	@ (80182d4 <Get_SerialNum+0x44>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801829c:	4b0e      	ldr	r3, [pc, #56]	@ (80182d8 <Get_SerialNum+0x48>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80182a2:	4b0e      	ldr	r3, [pc, #56]	@ (80182dc <Get_SerialNum+0x4c>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80182a8:	68fa      	ldr	r2, [r7, #12]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	4413      	add	r3, r2
 80182ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d009      	beq.n	80182ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80182b6:	2208      	movs	r2, #8
 80182b8:	4909      	ldr	r1, [pc, #36]	@ (80182e0 <Get_SerialNum+0x50>)
 80182ba:	68f8      	ldr	r0, [r7, #12]
 80182bc:	f000 f814 	bl	80182e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80182c0:	2204      	movs	r2, #4
 80182c2:	4908      	ldr	r1, [pc, #32]	@ (80182e4 <Get_SerialNum+0x54>)
 80182c4:	68b8      	ldr	r0, [r7, #8]
 80182c6:	f000 f80f 	bl	80182e8 <IntToUnicode>
  }
}
 80182ca:	bf00      	nop
 80182cc:	3710      	adds	r7, #16
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	1ff1e800 	.word	0x1ff1e800
 80182d8:	1ff1e804 	.word	0x1ff1e804
 80182dc:	1ff1e808 	.word	0x1ff1e808
 80182e0:	2400011a 	.word	0x2400011a
 80182e4:	2400012a 	.word	0x2400012a

080182e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b087      	sub	sp, #28
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	60f8      	str	r0, [r7, #12]
 80182f0:	60b9      	str	r1, [r7, #8]
 80182f2:	4613      	mov	r3, r2
 80182f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80182f6:	2300      	movs	r3, #0
 80182f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80182fa:	2300      	movs	r3, #0
 80182fc:	75fb      	strb	r3, [r7, #23]
 80182fe:	e027      	b.n	8018350 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	0f1b      	lsrs	r3, r3, #28
 8018304:	2b09      	cmp	r3, #9
 8018306:	d80b      	bhi.n	8018320 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	0f1b      	lsrs	r3, r3, #28
 801830c:	b2da      	uxtb	r2, r3
 801830e:	7dfb      	ldrb	r3, [r7, #23]
 8018310:	005b      	lsls	r3, r3, #1
 8018312:	4619      	mov	r1, r3
 8018314:	68bb      	ldr	r3, [r7, #8]
 8018316:	440b      	add	r3, r1
 8018318:	3230      	adds	r2, #48	@ 0x30
 801831a:	b2d2      	uxtb	r2, r2
 801831c:	701a      	strb	r2, [r3, #0]
 801831e:	e00a      	b.n	8018336 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	0f1b      	lsrs	r3, r3, #28
 8018324:	b2da      	uxtb	r2, r3
 8018326:	7dfb      	ldrb	r3, [r7, #23]
 8018328:	005b      	lsls	r3, r3, #1
 801832a:	4619      	mov	r1, r3
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	440b      	add	r3, r1
 8018330:	3237      	adds	r2, #55	@ 0x37
 8018332:	b2d2      	uxtb	r2, r2
 8018334:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	011b      	lsls	r3, r3, #4
 801833a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801833c:	7dfb      	ldrb	r3, [r7, #23]
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	3301      	adds	r3, #1
 8018342:	68ba      	ldr	r2, [r7, #8]
 8018344:	4413      	add	r3, r2
 8018346:	2200      	movs	r2, #0
 8018348:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801834a:	7dfb      	ldrb	r3, [r7, #23]
 801834c:	3301      	adds	r3, #1
 801834e:	75fb      	strb	r3, [r7, #23]
 8018350:	7dfa      	ldrb	r2, [r7, #23]
 8018352:	79fb      	ldrb	r3, [r7, #7]
 8018354:	429a      	cmp	r2, r3
 8018356:	d3d3      	bcc.n	8018300 <IntToUnicode+0x18>
  }
}
 8018358:	bf00      	nop
 801835a:	bf00      	nop
 801835c:	371c      	adds	r7, #28
 801835e:	46bd      	mov	sp, r7
 8018360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018364:	4770      	bx	lr
	...

08018368 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b0b2      	sub	sp, #200	@ 0xc8
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018370:	f107 0310 	add.w	r3, r7, #16
 8018374:	22b8      	movs	r2, #184	@ 0xb8
 8018376:	2100      	movs	r1, #0
 8018378:	4618      	mov	r0, r3
 801837a:	f001 fea6 	bl	801a0ca <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	4a1a      	ldr	r2, [pc, #104]	@ (80183ec <HAL_PCD_MspInit+0x84>)
 8018384:	4293      	cmp	r3, r2
 8018386:	d12c      	bne.n	80183e2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018388:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801838c:	f04f 0300 	mov.w	r3, #0
 8018390:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018394:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018398:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801839c:	f107 0310 	add.w	r3, r7, #16
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f5 febb 	bl	800e11c <HAL_RCCEx_PeriphCLKConfig>
 80183a6:	4603      	mov	r3, r0
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d001      	beq.n	80183b0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80183ac:	f7e9 ff02 	bl	80021b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80183b0:	f7f4 ff3e 	bl	800d230 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80183b4:	4b0e      	ldr	r3, [pc, #56]	@ (80183f0 <HAL_PCD_MspInit+0x88>)
 80183b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183ba:	4a0d      	ldr	r2, [pc, #52]	@ (80183f0 <HAL_PCD_MspInit+0x88>)
 80183bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80183c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80183c4:	4b0a      	ldr	r3, [pc, #40]	@ (80183f0 <HAL_PCD_MspInit+0x88>)
 80183c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80183ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80183ce:	60fb      	str	r3, [r7, #12]
 80183d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 80183d2:	2201      	movs	r2, #1
 80183d4:	2101      	movs	r1, #1
 80183d6:	204d      	movs	r0, #77	@ 0x4d
 80183d8:	f7f0 fcf1 	bl	8008dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80183dc:	204d      	movs	r0, #77	@ 0x4d
 80183de:	f7f0 fd08 	bl	8008df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80183e2:	bf00      	nop
 80183e4:	37c8      	adds	r7, #200	@ 0xc8
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bd80      	pop	{r7, pc}
 80183ea:	bf00      	nop
 80183ec:	40040000 	.word	0x40040000
 80183f0:	58024400 	.word	0x58024400

080183f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b082      	sub	sp, #8
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018408:	4619      	mov	r1, r3
 801840a:	4610      	mov	r0, r2
 801840c:	f7fe fb23 	bl	8016a56 <USBD_LL_SetupStage>
}
 8018410:	bf00      	nop
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}

08018418 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
 8018420:	460b      	mov	r3, r1
 8018422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801842a:	78fa      	ldrb	r2, [r7, #3]
 801842c:	6879      	ldr	r1, [r7, #4]
 801842e:	4613      	mov	r3, r2
 8018430:	00db      	lsls	r3, r3, #3
 8018432:	4413      	add	r3, r2
 8018434:	009b      	lsls	r3, r3, #2
 8018436:	440b      	add	r3, r1
 8018438:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801843c:	681a      	ldr	r2, [r3, #0]
 801843e:	78fb      	ldrb	r3, [r7, #3]
 8018440:	4619      	mov	r1, r3
 8018442:	f7fe fb5d 	bl	8016b00 <USBD_LL_DataOutStage>
}
 8018446:	bf00      	nop
 8018448:	3708      	adds	r7, #8
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}

0801844e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801844e:	b580      	push	{r7, lr}
 8018450:	b082      	sub	sp, #8
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
 8018456:	460b      	mov	r3, r1
 8018458:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018460:	78fa      	ldrb	r2, [r7, #3]
 8018462:	6879      	ldr	r1, [r7, #4]
 8018464:	4613      	mov	r3, r2
 8018466:	00db      	lsls	r3, r3, #3
 8018468:	4413      	add	r3, r2
 801846a:	009b      	lsls	r3, r3, #2
 801846c:	440b      	add	r3, r1
 801846e:	3320      	adds	r3, #32
 8018470:	681a      	ldr	r2, [r3, #0]
 8018472:	78fb      	ldrb	r3, [r7, #3]
 8018474:	4619      	mov	r1, r3
 8018476:	f7fe fbf6 	bl	8016c66 <USBD_LL_DataInStage>
}
 801847a:	bf00      	nop
 801847c:	3708      	adds	r7, #8
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}

08018482 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018482:	b580      	push	{r7, lr}
 8018484:	b082      	sub	sp, #8
 8018486:	af00      	add	r7, sp, #0
 8018488:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018490:	4618      	mov	r0, r3
 8018492:	f7fe fd30 	bl	8016ef6 <USBD_LL_SOF>
}
 8018496:	bf00      	nop
 8018498:	3708      	adds	r7, #8
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}

0801849e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801849e:	b580      	push	{r7, lr}
 80184a0:	b084      	sub	sp, #16
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80184a6:	2301      	movs	r3, #1
 80184a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	79db      	ldrb	r3, [r3, #7]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d102      	bne.n	80184b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80184b2:	2300      	movs	r3, #0
 80184b4:	73fb      	strb	r3, [r7, #15]
 80184b6:	e008      	b.n	80184ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	79db      	ldrb	r3, [r3, #7]
 80184bc:	2b02      	cmp	r3, #2
 80184be:	d102      	bne.n	80184c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80184c0:	2301      	movs	r3, #1
 80184c2:	73fb      	strb	r3, [r7, #15]
 80184c4:	e001      	b.n	80184ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80184c6:	f7e9 fe75 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184d0:	7bfa      	ldrb	r2, [r7, #15]
 80184d2:	4611      	mov	r1, r2
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7fe fcca 	bl	8016e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7fe fc72 	bl	8016dca <USBD_LL_Reset>
}
 80184e6:	bf00      	nop
 80184e8:	3710      	adds	r7, #16
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
	...

080184f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80184fe:	4618      	mov	r0, r3
 8018500:	f7fe fcc5 	bl	8016e8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	6812      	ldr	r2, [r2, #0]
 8018512:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018516:	f043 0301 	orr.w	r3, r3, #1
 801851a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	7adb      	ldrb	r3, [r3, #11]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d005      	beq.n	8018530 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018524:	4b04      	ldr	r3, [pc, #16]	@ (8018538 <HAL_PCD_SuspendCallback+0x48>)
 8018526:	691b      	ldr	r3, [r3, #16]
 8018528:	4a03      	ldr	r2, [pc, #12]	@ (8018538 <HAL_PCD_SuspendCallback+0x48>)
 801852a:	f043 0306 	orr.w	r3, r3, #6
 801852e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018530:	bf00      	nop
 8018532:	3708      	adds	r7, #8
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	e000ed00 	.word	0xe000ed00

0801853c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801854a:	4618      	mov	r0, r3
 801854c:	f7fe fcbb 	bl	8016ec6 <USBD_LL_Resume>
}
 8018550:	bf00      	nop
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	460b      	mov	r3, r1
 8018562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801856a:	78fa      	ldrb	r2, [r7, #3]
 801856c:	4611      	mov	r1, r2
 801856e:	4618      	mov	r0, r3
 8018570:	f7fe fd13 	bl	8016f9a <USBD_LL_IsoOUTIncomplete>
}
 8018574:	bf00      	nop
 8018576:	3708      	adds	r7, #8
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}

0801857c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
 8018584:	460b      	mov	r3, r1
 8018586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801858e:	78fa      	ldrb	r2, [r7, #3]
 8018590:	4611      	mov	r1, r2
 8018592:	4618      	mov	r0, r3
 8018594:	f7fe fccf 	bl	8016f36 <USBD_LL_IsoINIncomplete>
}
 8018598:	bf00      	nop
 801859a:	3708      	adds	r7, #8
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80185ae:	4618      	mov	r0, r3
 80185b0:	f7fe fd25 	bl	8016ffe <USBD_LL_DevConnected>
}
 80185b4:	bf00      	nop
 80185b6:	3708      	adds	r7, #8
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}

080185bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7fe fd22 	bl	8017014 <USBD_LL_DevDisconnected>
}
 80185d0:	bf00      	nop
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	781b      	ldrb	r3, [r3, #0]
 80185e4:	2b01      	cmp	r3, #1
 80185e6:	d140      	bne.n	801866a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80185e8:	4a22      	ldr	r2, [pc, #136]	@ (8018674 <USBD_LL_Init+0x9c>)
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	4a20      	ldr	r2, [pc, #128]	@ (8018674 <USBD_LL_Init+0x9c>)
 80185f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80185f8:	4b1e      	ldr	r3, [pc, #120]	@ (8018674 <USBD_LL_Init+0x9c>)
 80185fa:	4a1f      	ldr	r2, [pc, #124]	@ (8018678 <USBD_LL_Init+0xa0>)
 80185fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80185fe:	4b1d      	ldr	r3, [pc, #116]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018600:	2209      	movs	r2, #9
 8018602:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018604:	4b1b      	ldr	r3, [pc, #108]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018606:	2202      	movs	r2, #2
 8018608:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801860a:	4b1a      	ldr	r3, [pc, #104]	@ (8018674 <USBD_LL_Init+0x9c>)
 801860c:	2200      	movs	r2, #0
 801860e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018610:	4b18      	ldr	r3, [pc, #96]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018612:	2202      	movs	r2, #2
 8018614:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8018616:	4b17      	ldr	r3, [pc, #92]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018618:	2200      	movs	r2, #0
 801861a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801861c:	4b15      	ldr	r3, [pc, #84]	@ (8018674 <USBD_LL_Init+0x9c>)
 801861e:	2200      	movs	r2, #0
 8018620:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018622:	4b14      	ldr	r3, [pc, #80]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018624:	2200      	movs	r2, #0
 8018626:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8018628:	4b12      	ldr	r3, [pc, #72]	@ (8018674 <USBD_LL_Init+0x9c>)
 801862a:	2200      	movs	r2, #0
 801862c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801862e:	4b11      	ldr	r3, [pc, #68]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018630:	2200      	movs	r2, #0
 8018632:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018634:	4b0f      	ldr	r3, [pc, #60]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018636:	2200      	movs	r2, #0
 8018638:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801863a:	480e      	ldr	r0, [pc, #56]	@ (8018674 <USBD_LL_Init+0x9c>)
 801863c:	f7f3 fb1f 	bl	800bc7e <HAL_PCD_Init>
 8018640:	4603      	mov	r3, r0
 8018642:	2b00      	cmp	r3, #0
 8018644:	d001      	beq.n	801864a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018646:	f7e9 fdb5 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801864a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801864e:	4809      	ldr	r0, [pc, #36]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018650:	f7f4 fd73 	bl	800d13a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8018654:	2280      	movs	r2, #128	@ 0x80
 8018656:	2100      	movs	r1, #0
 8018658:	4806      	ldr	r0, [pc, #24]	@ (8018674 <USBD_LL_Init+0x9c>)
 801865a:	f7f4 fd27 	bl	800d0ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801865e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8018662:	2101      	movs	r1, #1
 8018664:	4803      	ldr	r0, [pc, #12]	@ (8018674 <USBD_LL_Init+0x9c>)
 8018666:	f7f4 fd21 	bl	800d0ac <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801866a:	2300      	movs	r3, #0
}
 801866c:	4618      	mov	r0, r3
 801866e:	3708      	adds	r7, #8
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}
 8018674:	2401f0ec 	.word	0x2401f0ec
 8018678:	40040000 	.word	0x40040000

0801867c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018684:	2300      	movs	r3, #0
 8018686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018688:	2300      	movs	r3, #0
 801868a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018692:	4618      	mov	r0, r3
 8018694:	f7f3 fbff 	bl	800be96 <HAL_PCD_Start>
 8018698:	4603      	mov	r3, r0
 801869a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801869c:	7bfb      	ldrb	r3, [r7, #15]
 801869e:	4618      	mov	r0, r3
 80186a0:	f000 f942 	bl	8018928 <USBD_Get_USB_Status>
 80186a4:	4603      	mov	r3, r0
 80186a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80186aa:	4618      	mov	r0, r3
 80186ac:	3710      	adds	r7, #16
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}

080186b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80186b2:	b580      	push	{r7, lr}
 80186b4:	b084      	sub	sp, #16
 80186b6:	af00      	add	r7, sp, #0
 80186b8:	6078      	str	r0, [r7, #4]
 80186ba:	4608      	mov	r0, r1
 80186bc:	4611      	mov	r1, r2
 80186be:	461a      	mov	r2, r3
 80186c0:	4603      	mov	r3, r0
 80186c2:	70fb      	strb	r3, [r7, #3]
 80186c4:	460b      	mov	r3, r1
 80186c6:	70bb      	strb	r3, [r7, #2]
 80186c8:	4613      	mov	r3, r2
 80186ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186cc:	2300      	movs	r3, #0
 80186ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186d0:	2300      	movs	r3, #0
 80186d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80186da:	78bb      	ldrb	r3, [r7, #2]
 80186dc:	883a      	ldrh	r2, [r7, #0]
 80186de:	78f9      	ldrb	r1, [r7, #3]
 80186e0:	f7f4 f900 	bl	800c8e4 <HAL_PCD_EP_Open>
 80186e4:	4603      	mov	r3, r0
 80186e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186e8:	7bfb      	ldrb	r3, [r7, #15]
 80186ea:	4618      	mov	r0, r3
 80186ec:	f000 f91c 	bl	8018928 <USBD_Get_USB_Status>
 80186f0:	4603      	mov	r3, r0
 80186f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80186f6:	4618      	mov	r0, r3
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}

080186fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186fe:	b580      	push	{r7, lr}
 8018700:	b084      	sub	sp, #16
 8018702:	af00      	add	r7, sp, #0
 8018704:	6078      	str	r0, [r7, #4]
 8018706:	460b      	mov	r3, r1
 8018708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801870a:	2300      	movs	r3, #0
 801870c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801870e:	2300      	movs	r3, #0
 8018710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018718:	78fa      	ldrb	r2, [r7, #3]
 801871a:	4611      	mov	r1, r2
 801871c:	4618      	mov	r0, r3
 801871e:	f7f4 f949 	bl	800c9b4 <HAL_PCD_EP_Close>
 8018722:	4603      	mov	r3, r0
 8018724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018726:	7bfb      	ldrb	r3, [r7, #15]
 8018728:	4618      	mov	r0, r3
 801872a:	f000 f8fd 	bl	8018928 <USBD_Get_USB_Status>
 801872e:	4603      	mov	r3, r0
 8018730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018732:	7bbb      	ldrb	r3, [r7, #14]
}
 8018734:	4618      	mov	r0, r3
 8018736:	3710      	adds	r7, #16
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b084      	sub	sp, #16
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
 8018744:	460b      	mov	r3, r1
 8018746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018748:	2300      	movs	r3, #0
 801874a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801874c:	2300      	movs	r3, #0
 801874e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018756:	78fa      	ldrb	r2, [r7, #3]
 8018758:	4611      	mov	r1, r2
 801875a:	4618      	mov	r0, r3
 801875c:	f7f4 fa01 	bl	800cb62 <HAL_PCD_EP_SetStall>
 8018760:	4603      	mov	r3, r0
 8018762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018764:	7bfb      	ldrb	r3, [r7, #15]
 8018766:	4618      	mov	r0, r3
 8018768:	f000 f8de 	bl	8018928 <USBD_Get_USB_Status>
 801876c:	4603      	mov	r3, r0
 801876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018770:	7bbb      	ldrb	r3, [r7, #14]
}
 8018772:	4618      	mov	r0, r3
 8018774:	3710      	adds	r7, #16
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b084      	sub	sp, #16
 801877e:	af00      	add	r7, sp, #0
 8018780:	6078      	str	r0, [r7, #4]
 8018782:	460b      	mov	r3, r1
 8018784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018786:	2300      	movs	r3, #0
 8018788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801878a:	2300      	movs	r3, #0
 801878c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018794:	78fa      	ldrb	r2, [r7, #3]
 8018796:	4611      	mov	r1, r2
 8018798:	4618      	mov	r0, r3
 801879a:	f7f4 fa45 	bl	800cc28 <HAL_PCD_EP_ClrStall>
 801879e:	4603      	mov	r3, r0
 80187a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187a2:	7bfb      	ldrb	r3, [r7, #15]
 80187a4:	4618      	mov	r0, r3
 80187a6:	f000 f8bf 	bl	8018928 <USBD_Get_USB_Status>
 80187aa:	4603      	mov	r3, r0
 80187ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3710      	adds	r7, #16
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}

080187b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187b8:	b480      	push	{r7}
 80187ba:	b085      	sub	sp, #20
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	460b      	mov	r3, r1
 80187c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80187ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80187cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	da0b      	bge.n	80187ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80187d4:	78fb      	ldrb	r3, [r7, #3]
 80187d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187da:	68f9      	ldr	r1, [r7, #12]
 80187dc:	4613      	mov	r3, r2
 80187de:	00db      	lsls	r3, r3, #3
 80187e0:	4413      	add	r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	440b      	add	r3, r1
 80187e6:	3316      	adds	r3, #22
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	e00b      	b.n	8018804 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187ec:	78fb      	ldrb	r3, [r7, #3]
 80187ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187f2:	68f9      	ldr	r1, [r7, #12]
 80187f4:	4613      	mov	r3, r2
 80187f6:	00db      	lsls	r3, r3, #3
 80187f8:	4413      	add	r3, r2
 80187fa:	009b      	lsls	r3, r3, #2
 80187fc:	440b      	add	r3, r1
 80187fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018802:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018804:	4618      	mov	r0, r3
 8018806:	3714      	adds	r7, #20
 8018808:	46bd      	mov	sp, r7
 801880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880e:	4770      	bx	lr

08018810 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	460b      	mov	r3, r1
 801881a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801881c:	2300      	movs	r3, #0
 801881e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018820:	2300      	movs	r3, #0
 8018822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801882a:	78fa      	ldrb	r2, [r7, #3]
 801882c:	4611      	mov	r1, r2
 801882e:	4618      	mov	r0, r3
 8018830:	f7f4 f834 	bl	800c89c <HAL_PCD_SetAddress>
 8018834:	4603      	mov	r3, r0
 8018836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018838:	7bfb      	ldrb	r3, [r7, #15]
 801883a:	4618      	mov	r0, r3
 801883c:	f000 f874 	bl	8018928 <USBD_Get_USB_Status>
 8018840:	4603      	mov	r3, r0
 8018842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018844:	7bbb      	ldrb	r3, [r7, #14]
}
 8018846:	4618      	mov	r0, r3
 8018848:	3710      	adds	r7, #16
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}

0801884e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801884e:	b580      	push	{r7, lr}
 8018850:	b086      	sub	sp, #24
 8018852:	af00      	add	r7, sp, #0
 8018854:	60f8      	str	r0, [r7, #12]
 8018856:	607a      	str	r2, [r7, #4]
 8018858:	603b      	str	r3, [r7, #0]
 801885a:	460b      	mov	r3, r1
 801885c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801885e:	2300      	movs	r3, #0
 8018860:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018862:	2300      	movs	r3, #0
 8018864:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801886c:	7af9      	ldrb	r1, [r7, #11]
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	687a      	ldr	r2, [r7, #4]
 8018872:	f7f4 f93c 	bl	800caee <HAL_PCD_EP_Transmit>
 8018876:	4603      	mov	r3, r0
 8018878:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801887a:	7dfb      	ldrb	r3, [r7, #23]
 801887c:	4618      	mov	r0, r3
 801887e:	f000 f853 	bl	8018928 <USBD_Get_USB_Status>
 8018882:	4603      	mov	r3, r0
 8018884:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018886:	7dbb      	ldrb	r3, [r7, #22]
}
 8018888:	4618      	mov	r0, r3
 801888a:	3718      	adds	r7, #24
 801888c:	46bd      	mov	sp, r7
 801888e:	bd80      	pop	{r7, pc}

08018890 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b086      	sub	sp, #24
 8018894:	af00      	add	r7, sp, #0
 8018896:	60f8      	str	r0, [r7, #12]
 8018898:	607a      	str	r2, [r7, #4]
 801889a:	603b      	str	r3, [r7, #0]
 801889c:	460b      	mov	r3, r1
 801889e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188a0:	2300      	movs	r3, #0
 80188a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188a4:	2300      	movs	r3, #0
 80188a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80188ae:	7af9      	ldrb	r1, [r7, #11]
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	f7f4 f8c8 	bl	800ca48 <HAL_PCD_EP_Receive>
 80188b8:	4603      	mov	r3, r0
 80188ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188bc:	7dfb      	ldrb	r3, [r7, #23]
 80188be:	4618      	mov	r0, r3
 80188c0:	f000 f832 	bl	8018928 <USBD_Get_USB_Status>
 80188c4:	4603      	mov	r3, r0
 80188c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80188c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3718      	adds	r7, #24
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}

080188d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188d2:	b580      	push	{r7, lr}
 80188d4:	b082      	sub	sp, #8
 80188d6:	af00      	add	r7, sp, #0
 80188d8:	6078      	str	r0, [r7, #4]
 80188da:	460b      	mov	r3, r1
 80188dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80188e4:	78fa      	ldrb	r2, [r7, #3]
 80188e6:	4611      	mov	r1, r2
 80188e8:	4618      	mov	r0, r3
 80188ea:	f7f4 f8e8 	bl	800cabe <HAL_PCD_EP_GetRxCount>
 80188ee:	4603      	mov	r3, r0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018900:	4b03      	ldr	r3, [pc, #12]	@ (8018910 <USBD_static_malloc+0x18>)
}
 8018902:	4618      	mov	r0, r3
 8018904:	370c      	adds	r7, #12
 8018906:	46bd      	mov	sp, r7
 8018908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890c:	4770      	bx	lr
 801890e:	bf00      	nop
 8018910:	2401f5d0 	.word	0x2401f5d0

08018914 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018914:	b480      	push	{r7}
 8018916:	b083      	sub	sp, #12
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801891c:	bf00      	nop
 801891e:	370c      	adds	r7, #12
 8018920:	46bd      	mov	sp, r7
 8018922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018926:	4770      	bx	lr

08018928 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018928:	b480      	push	{r7}
 801892a:	b085      	sub	sp, #20
 801892c:	af00      	add	r7, sp, #0
 801892e:	4603      	mov	r3, r0
 8018930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018932:	2300      	movs	r3, #0
 8018934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018936:	79fb      	ldrb	r3, [r7, #7]
 8018938:	2b03      	cmp	r3, #3
 801893a:	d817      	bhi.n	801896c <USBD_Get_USB_Status+0x44>
 801893c:	a201      	add	r2, pc, #4	@ (adr r2, 8018944 <USBD_Get_USB_Status+0x1c>)
 801893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018942:	bf00      	nop
 8018944:	08018955 	.word	0x08018955
 8018948:	0801895b 	.word	0x0801895b
 801894c:	08018961 	.word	0x08018961
 8018950:	08018967 	.word	0x08018967
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018954:	2300      	movs	r3, #0
 8018956:	73fb      	strb	r3, [r7, #15]
    break;
 8018958:	e00b      	b.n	8018972 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801895a:	2303      	movs	r3, #3
 801895c:	73fb      	strb	r3, [r7, #15]
    break;
 801895e:	e008      	b.n	8018972 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018960:	2301      	movs	r3, #1
 8018962:	73fb      	strb	r3, [r7, #15]
    break;
 8018964:	e005      	b.n	8018972 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018966:	2303      	movs	r3, #3
 8018968:	73fb      	strb	r3, [r7, #15]
    break;
 801896a:	e002      	b.n	8018972 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801896c:	2303      	movs	r3, #3
 801896e:	73fb      	strb	r3, [r7, #15]
    break;
 8018970:	bf00      	nop
  }
  return usb_status;
 8018972:	7bfb      	ldrb	r3, [r7, #15]
}
 8018974:	4618      	mov	r0, r3
 8018976:	3714      	adds	r7, #20
 8018978:	46bd      	mov	sp, r7
 801897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897e:	4770      	bx	lr

08018980 <atof>:
 8018980:	2100      	movs	r1, #0
 8018982:	f000 bdb7 	b.w	80194f4 <strtod>

08018986 <atoi>:
 8018986:	220a      	movs	r2, #10
 8018988:	2100      	movs	r1, #0
 801898a:	f000 be39 	b.w	8019600 <strtol>

0801898e <sulp>:
 801898e:	b570      	push	{r4, r5, r6, lr}
 8018990:	4604      	mov	r4, r0
 8018992:	460d      	mov	r5, r1
 8018994:	4616      	mov	r6, r2
 8018996:	ec45 4b10 	vmov	d0, r4, r5
 801899a:	f003 f9eb 	bl	801bd74 <__ulp>
 801899e:	b17e      	cbz	r6, 80189c0 <sulp+0x32>
 80189a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80189a4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	dd09      	ble.n	80189c0 <sulp+0x32>
 80189ac:	051b      	lsls	r3, r3, #20
 80189ae:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80189b2:	2000      	movs	r0, #0
 80189b4:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80189b8:	ec41 0b17 	vmov	d7, r0, r1
 80189bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80189c0:	bd70      	pop	{r4, r5, r6, pc}
 80189c2:	0000      	movs	r0, r0
 80189c4:	0000      	movs	r0, r0
	...

080189c8 <_strtod_l>:
 80189c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189cc:	ed2d 8b0a 	vpush	{d8-d12}
 80189d0:	b097      	sub	sp, #92	@ 0x5c
 80189d2:	4688      	mov	r8, r1
 80189d4:	920e      	str	r2, [sp, #56]	@ 0x38
 80189d6:	2200      	movs	r2, #0
 80189d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80189da:	9005      	str	r0, [sp, #20]
 80189dc:	f04f 0a00 	mov.w	sl, #0
 80189e0:	f04f 0b00 	mov.w	fp, #0
 80189e4:	460a      	mov	r2, r1
 80189e6:	9211      	str	r2, [sp, #68]	@ 0x44
 80189e8:	7811      	ldrb	r1, [r2, #0]
 80189ea:	292b      	cmp	r1, #43	@ 0x2b
 80189ec:	d04c      	beq.n	8018a88 <_strtod_l+0xc0>
 80189ee:	d839      	bhi.n	8018a64 <_strtod_l+0x9c>
 80189f0:	290d      	cmp	r1, #13
 80189f2:	d833      	bhi.n	8018a5c <_strtod_l+0x94>
 80189f4:	2908      	cmp	r1, #8
 80189f6:	d833      	bhi.n	8018a60 <_strtod_l+0x98>
 80189f8:	2900      	cmp	r1, #0
 80189fa:	d03c      	beq.n	8018a76 <_strtod_l+0xae>
 80189fc:	2200      	movs	r2, #0
 80189fe:	9208      	str	r2, [sp, #32]
 8018a00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018a02:	782a      	ldrb	r2, [r5, #0]
 8018a04:	2a30      	cmp	r2, #48	@ 0x30
 8018a06:	f040 80b5 	bne.w	8018b74 <_strtod_l+0x1ac>
 8018a0a:	786a      	ldrb	r2, [r5, #1]
 8018a0c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018a10:	2a58      	cmp	r2, #88	@ 0x58
 8018a12:	d170      	bne.n	8018af6 <_strtod_l+0x12e>
 8018a14:	9302      	str	r3, [sp, #8]
 8018a16:	9b08      	ldr	r3, [sp, #32]
 8018a18:	9301      	str	r3, [sp, #4]
 8018a1a:	ab12      	add	r3, sp, #72	@ 0x48
 8018a1c:	9300      	str	r3, [sp, #0]
 8018a1e:	4a8b      	ldr	r2, [pc, #556]	@ (8018c4c <_strtod_l+0x284>)
 8018a20:	9805      	ldr	r0, [sp, #20]
 8018a22:	ab13      	add	r3, sp, #76	@ 0x4c
 8018a24:	a911      	add	r1, sp, #68	@ 0x44
 8018a26:	f002 fa97 	bl	801af58 <__gethex>
 8018a2a:	f010 060f 	ands.w	r6, r0, #15
 8018a2e:	4604      	mov	r4, r0
 8018a30:	d005      	beq.n	8018a3e <_strtod_l+0x76>
 8018a32:	2e06      	cmp	r6, #6
 8018a34:	d12a      	bne.n	8018a8c <_strtod_l+0xc4>
 8018a36:	3501      	adds	r5, #1
 8018a38:	2300      	movs	r3, #0
 8018a3a:	9511      	str	r5, [sp, #68]	@ 0x44
 8018a3c:	9308      	str	r3, [sp, #32]
 8018a3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	f040 852f 	bne.w	80194a4 <_strtod_l+0xadc>
 8018a46:	9b08      	ldr	r3, [sp, #32]
 8018a48:	ec4b ab10 	vmov	d0, sl, fp
 8018a4c:	b1cb      	cbz	r3, 8018a82 <_strtod_l+0xba>
 8018a4e:	eeb1 0b40 	vneg.f64	d0, d0
 8018a52:	b017      	add	sp, #92	@ 0x5c
 8018a54:	ecbd 8b0a 	vpop	{d8-d12}
 8018a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5c:	2920      	cmp	r1, #32
 8018a5e:	d1cd      	bne.n	80189fc <_strtod_l+0x34>
 8018a60:	3201      	adds	r2, #1
 8018a62:	e7c0      	b.n	80189e6 <_strtod_l+0x1e>
 8018a64:	292d      	cmp	r1, #45	@ 0x2d
 8018a66:	d1c9      	bne.n	80189fc <_strtod_l+0x34>
 8018a68:	2101      	movs	r1, #1
 8018a6a:	9108      	str	r1, [sp, #32]
 8018a6c:	1c51      	adds	r1, r2, #1
 8018a6e:	9111      	str	r1, [sp, #68]	@ 0x44
 8018a70:	7852      	ldrb	r2, [r2, #1]
 8018a72:	2a00      	cmp	r2, #0
 8018a74:	d1c4      	bne.n	8018a00 <_strtod_l+0x38>
 8018a76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a78:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	f040 850f 	bne.w	80194a0 <_strtod_l+0xad8>
 8018a82:	ec4b ab10 	vmov	d0, sl, fp
 8018a86:	e7e4      	b.n	8018a52 <_strtod_l+0x8a>
 8018a88:	2100      	movs	r1, #0
 8018a8a:	e7ee      	b.n	8018a6a <_strtod_l+0xa2>
 8018a8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018a8e:	b13a      	cbz	r2, 8018aa0 <_strtod_l+0xd8>
 8018a90:	2135      	movs	r1, #53	@ 0x35
 8018a92:	a814      	add	r0, sp, #80	@ 0x50
 8018a94:	f003 fa65 	bl	801bf62 <__copybits>
 8018a98:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018a9a:	9805      	ldr	r0, [sp, #20]
 8018a9c:	f002 fe36 	bl	801b70c <_Bfree>
 8018aa0:	1e73      	subs	r3, r6, #1
 8018aa2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018aa4:	2b04      	cmp	r3, #4
 8018aa6:	d806      	bhi.n	8018ab6 <_strtod_l+0xee>
 8018aa8:	e8df f003 	tbb	[pc, r3]
 8018aac:	201d0314 	.word	0x201d0314
 8018ab0:	14          	.byte	0x14
 8018ab1:	00          	.byte	0x00
 8018ab2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8018ab6:	05e3      	lsls	r3, r4, #23
 8018ab8:	bf48      	it	mi
 8018aba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018abe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018ac2:	0d1b      	lsrs	r3, r3, #20
 8018ac4:	051b      	lsls	r3, r3, #20
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1b9      	bne.n	8018a3e <_strtod_l+0x76>
 8018aca:	f001 fb6f 	bl	801a1ac <__errno>
 8018ace:	2322      	movs	r3, #34	@ 0x22
 8018ad0:	6003      	str	r3, [r0, #0]
 8018ad2:	e7b4      	b.n	8018a3e <_strtod_l+0x76>
 8018ad4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018ad8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018adc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018ae0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018ae4:	e7e7      	b.n	8018ab6 <_strtod_l+0xee>
 8018ae6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8018c54 <_strtod_l+0x28c>
 8018aea:	e7e4      	b.n	8018ab6 <_strtod_l+0xee>
 8018aec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018af0:	f04f 3aff 	mov.w	sl, #4294967295
 8018af4:	e7df      	b.n	8018ab6 <_strtod_l+0xee>
 8018af6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018af8:	1c5a      	adds	r2, r3, #1
 8018afa:	9211      	str	r2, [sp, #68]	@ 0x44
 8018afc:	785b      	ldrb	r3, [r3, #1]
 8018afe:	2b30      	cmp	r3, #48	@ 0x30
 8018b00:	d0f9      	beq.n	8018af6 <_strtod_l+0x12e>
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d09b      	beq.n	8018a3e <_strtod_l+0x76>
 8018b06:	2301      	movs	r3, #1
 8018b08:	2600      	movs	r6, #0
 8018b0a:	9307      	str	r3, [sp, #28]
 8018b0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018b10:	46b1      	mov	r9, r6
 8018b12:	4635      	mov	r5, r6
 8018b14:	220a      	movs	r2, #10
 8018b16:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018b18:	7804      	ldrb	r4, [r0, #0]
 8018b1a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018b1e:	b2d9      	uxtb	r1, r3
 8018b20:	2909      	cmp	r1, #9
 8018b22:	d929      	bls.n	8018b78 <_strtod_l+0x1b0>
 8018b24:	494a      	ldr	r1, [pc, #296]	@ (8018c50 <_strtod_l+0x288>)
 8018b26:	2201      	movs	r2, #1
 8018b28:	f001 fae4 	bl	801a0f4 <strncmp>
 8018b2c:	b378      	cbz	r0, 8018b8e <_strtod_l+0x1c6>
 8018b2e:	2000      	movs	r0, #0
 8018b30:	4622      	mov	r2, r4
 8018b32:	462b      	mov	r3, r5
 8018b34:	4607      	mov	r7, r0
 8018b36:	9006      	str	r0, [sp, #24]
 8018b38:	2a65      	cmp	r2, #101	@ 0x65
 8018b3a:	d001      	beq.n	8018b40 <_strtod_l+0x178>
 8018b3c:	2a45      	cmp	r2, #69	@ 0x45
 8018b3e:	d117      	bne.n	8018b70 <_strtod_l+0x1a8>
 8018b40:	b91b      	cbnz	r3, 8018b4a <_strtod_l+0x182>
 8018b42:	9b07      	ldr	r3, [sp, #28]
 8018b44:	4303      	orrs	r3, r0
 8018b46:	d096      	beq.n	8018a76 <_strtod_l+0xae>
 8018b48:	2300      	movs	r3, #0
 8018b4a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8018b4e:	f108 0201 	add.w	r2, r8, #1
 8018b52:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b54:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018b58:	2a2b      	cmp	r2, #43	@ 0x2b
 8018b5a:	d06b      	beq.n	8018c34 <_strtod_l+0x26c>
 8018b5c:	2a2d      	cmp	r2, #45	@ 0x2d
 8018b5e:	d071      	beq.n	8018c44 <_strtod_l+0x27c>
 8018b60:	f04f 0e00 	mov.w	lr, #0
 8018b64:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018b68:	2c09      	cmp	r4, #9
 8018b6a:	d979      	bls.n	8018c60 <_strtod_l+0x298>
 8018b6c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8018b70:	2400      	movs	r4, #0
 8018b72:	e094      	b.n	8018c9e <_strtod_l+0x2d6>
 8018b74:	2300      	movs	r3, #0
 8018b76:	e7c7      	b.n	8018b08 <_strtod_l+0x140>
 8018b78:	2d08      	cmp	r5, #8
 8018b7a:	f100 0001 	add.w	r0, r0, #1
 8018b7e:	bfd4      	ite	le
 8018b80:	fb02 3909 	mlale	r9, r2, r9, r3
 8018b84:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018b88:	3501      	adds	r5, #1
 8018b8a:	9011      	str	r0, [sp, #68]	@ 0x44
 8018b8c:	e7c3      	b.n	8018b16 <_strtod_l+0x14e>
 8018b8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018b90:	1c5a      	adds	r2, r3, #1
 8018b92:	9211      	str	r2, [sp, #68]	@ 0x44
 8018b94:	785a      	ldrb	r2, [r3, #1]
 8018b96:	b375      	cbz	r5, 8018bf6 <_strtod_l+0x22e>
 8018b98:	4607      	mov	r7, r0
 8018b9a:	462b      	mov	r3, r5
 8018b9c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018ba0:	2909      	cmp	r1, #9
 8018ba2:	d913      	bls.n	8018bcc <_strtod_l+0x204>
 8018ba4:	2101      	movs	r1, #1
 8018ba6:	9106      	str	r1, [sp, #24]
 8018ba8:	e7c6      	b.n	8018b38 <_strtod_l+0x170>
 8018baa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018bac:	1c5a      	adds	r2, r3, #1
 8018bae:	9211      	str	r2, [sp, #68]	@ 0x44
 8018bb0:	785a      	ldrb	r2, [r3, #1]
 8018bb2:	3001      	adds	r0, #1
 8018bb4:	2a30      	cmp	r2, #48	@ 0x30
 8018bb6:	d0f8      	beq.n	8018baa <_strtod_l+0x1e2>
 8018bb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8018bbc:	2b08      	cmp	r3, #8
 8018bbe:	f200 8476 	bhi.w	80194ae <_strtod_l+0xae6>
 8018bc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018bc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8018bc6:	4607      	mov	r7, r0
 8018bc8:	2000      	movs	r0, #0
 8018bca:	4603      	mov	r3, r0
 8018bcc:	3a30      	subs	r2, #48	@ 0x30
 8018bce:	f100 0101 	add.w	r1, r0, #1
 8018bd2:	d023      	beq.n	8018c1c <_strtod_l+0x254>
 8018bd4:	440f      	add	r7, r1
 8018bd6:	eb00 0c03 	add.w	ip, r0, r3
 8018bda:	4619      	mov	r1, r3
 8018bdc:	240a      	movs	r4, #10
 8018bde:	4561      	cmp	r1, ip
 8018be0:	d10b      	bne.n	8018bfa <_strtod_l+0x232>
 8018be2:	1c5c      	adds	r4, r3, #1
 8018be4:	4403      	add	r3, r0
 8018be6:	2b08      	cmp	r3, #8
 8018be8:	4404      	add	r4, r0
 8018bea:	dc11      	bgt.n	8018c10 <_strtod_l+0x248>
 8018bec:	230a      	movs	r3, #10
 8018bee:	fb03 2909 	mla	r9, r3, r9, r2
 8018bf2:	2100      	movs	r1, #0
 8018bf4:	e013      	b.n	8018c1e <_strtod_l+0x256>
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	e7dc      	b.n	8018bb4 <_strtod_l+0x1ec>
 8018bfa:	2908      	cmp	r1, #8
 8018bfc:	f101 0101 	add.w	r1, r1, #1
 8018c00:	dc02      	bgt.n	8018c08 <_strtod_l+0x240>
 8018c02:	fb04 f909 	mul.w	r9, r4, r9
 8018c06:	e7ea      	b.n	8018bde <_strtod_l+0x216>
 8018c08:	2910      	cmp	r1, #16
 8018c0a:	bfd8      	it	le
 8018c0c:	4366      	mulle	r6, r4
 8018c0e:	e7e6      	b.n	8018bde <_strtod_l+0x216>
 8018c10:	2b0f      	cmp	r3, #15
 8018c12:	dcee      	bgt.n	8018bf2 <_strtod_l+0x22a>
 8018c14:	230a      	movs	r3, #10
 8018c16:	fb03 2606 	mla	r6, r3, r6, r2
 8018c1a:	e7ea      	b.n	8018bf2 <_strtod_l+0x22a>
 8018c1c:	461c      	mov	r4, r3
 8018c1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018c20:	1c5a      	adds	r2, r3, #1
 8018c22:	9211      	str	r2, [sp, #68]	@ 0x44
 8018c24:	785a      	ldrb	r2, [r3, #1]
 8018c26:	4608      	mov	r0, r1
 8018c28:	4623      	mov	r3, r4
 8018c2a:	e7b7      	b.n	8018b9c <_strtod_l+0x1d4>
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	2700      	movs	r7, #0
 8018c30:	9306      	str	r3, [sp, #24]
 8018c32:	e786      	b.n	8018b42 <_strtod_l+0x17a>
 8018c34:	f04f 0e00 	mov.w	lr, #0
 8018c38:	f108 0202 	add.w	r2, r8, #2
 8018c3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8018c3e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018c42:	e78f      	b.n	8018b64 <_strtod_l+0x19c>
 8018c44:	f04f 0e01 	mov.w	lr, #1
 8018c48:	e7f6      	b.n	8018c38 <_strtod_l+0x270>
 8018c4a:	bf00      	nop
 8018c4c:	0801e384 	.word	0x0801e384
 8018c50:	0801e36c 	.word	0x0801e36c
 8018c54:	7ff00000 	.word	0x7ff00000
 8018c58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c5a:	1c54      	adds	r4, r2, #1
 8018c5c:	9411      	str	r4, [sp, #68]	@ 0x44
 8018c5e:	7852      	ldrb	r2, [r2, #1]
 8018c60:	2a30      	cmp	r2, #48	@ 0x30
 8018c62:	d0f9      	beq.n	8018c58 <_strtod_l+0x290>
 8018c64:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8018c68:	2c08      	cmp	r4, #8
 8018c6a:	d881      	bhi.n	8018b70 <_strtod_l+0x1a8>
 8018c6c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8018c70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c76:	1c51      	adds	r1, r2, #1
 8018c78:	9111      	str	r1, [sp, #68]	@ 0x44
 8018c7a:	7852      	ldrb	r2, [r2, #1]
 8018c7c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018c80:	2c09      	cmp	r4, #9
 8018c82:	d938      	bls.n	8018cf6 <_strtod_l+0x32e>
 8018c84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018c86:	1b0c      	subs	r4, r1, r4
 8018c88:	2c08      	cmp	r4, #8
 8018c8a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8018c8e:	dc02      	bgt.n	8018c96 <_strtod_l+0x2ce>
 8018c90:	4564      	cmp	r4, ip
 8018c92:	bfa8      	it	ge
 8018c94:	4664      	movge	r4, ip
 8018c96:	f1be 0f00 	cmp.w	lr, #0
 8018c9a:	d000      	beq.n	8018c9e <_strtod_l+0x2d6>
 8018c9c:	4264      	negs	r4, r4
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d14e      	bne.n	8018d40 <_strtod_l+0x378>
 8018ca2:	9b07      	ldr	r3, [sp, #28]
 8018ca4:	4318      	orrs	r0, r3
 8018ca6:	f47f aeca 	bne.w	8018a3e <_strtod_l+0x76>
 8018caa:	9b06      	ldr	r3, [sp, #24]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	f47f aee2 	bne.w	8018a76 <_strtod_l+0xae>
 8018cb2:	2a69      	cmp	r2, #105	@ 0x69
 8018cb4:	d027      	beq.n	8018d06 <_strtod_l+0x33e>
 8018cb6:	dc24      	bgt.n	8018d02 <_strtod_l+0x33a>
 8018cb8:	2a49      	cmp	r2, #73	@ 0x49
 8018cba:	d024      	beq.n	8018d06 <_strtod_l+0x33e>
 8018cbc:	2a4e      	cmp	r2, #78	@ 0x4e
 8018cbe:	f47f aeda 	bne.w	8018a76 <_strtod_l+0xae>
 8018cc2:	4997      	ldr	r1, [pc, #604]	@ (8018f20 <_strtod_l+0x558>)
 8018cc4:	a811      	add	r0, sp, #68	@ 0x44
 8018cc6:	f002 fb69 	bl	801b39c <__match>
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	f43f aed3 	beq.w	8018a76 <_strtod_l+0xae>
 8018cd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	2b28      	cmp	r3, #40	@ 0x28
 8018cd6:	d12d      	bne.n	8018d34 <_strtod_l+0x36c>
 8018cd8:	4992      	ldr	r1, [pc, #584]	@ (8018f24 <_strtod_l+0x55c>)
 8018cda:	aa14      	add	r2, sp, #80	@ 0x50
 8018cdc:	a811      	add	r0, sp, #68	@ 0x44
 8018cde:	f002 fb71 	bl	801b3c4 <__hexnan>
 8018ce2:	2805      	cmp	r0, #5
 8018ce4:	d126      	bne.n	8018d34 <_strtod_l+0x36c>
 8018ce6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ce8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8018cec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018cf0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018cf4:	e6a3      	b.n	8018a3e <_strtod_l+0x76>
 8018cf6:	240a      	movs	r4, #10
 8018cf8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8018cfc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018d00:	e7b8      	b.n	8018c74 <_strtod_l+0x2ac>
 8018d02:	2a6e      	cmp	r2, #110	@ 0x6e
 8018d04:	e7db      	b.n	8018cbe <_strtod_l+0x2f6>
 8018d06:	4988      	ldr	r1, [pc, #544]	@ (8018f28 <_strtod_l+0x560>)
 8018d08:	a811      	add	r0, sp, #68	@ 0x44
 8018d0a:	f002 fb47 	bl	801b39c <__match>
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	f43f aeb1 	beq.w	8018a76 <_strtod_l+0xae>
 8018d14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d16:	4985      	ldr	r1, [pc, #532]	@ (8018f2c <_strtod_l+0x564>)
 8018d18:	3b01      	subs	r3, #1
 8018d1a:	a811      	add	r0, sp, #68	@ 0x44
 8018d1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d1e:	f002 fb3d 	bl	801b39c <__match>
 8018d22:	b910      	cbnz	r0, 8018d2a <_strtod_l+0x362>
 8018d24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d26:	3301      	adds	r3, #1
 8018d28:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d2a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8018f40 <_strtod_l+0x578>
 8018d2e:	f04f 0a00 	mov.w	sl, #0
 8018d32:	e684      	b.n	8018a3e <_strtod_l+0x76>
 8018d34:	487e      	ldr	r0, [pc, #504]	@ (8018f30 <_strtod_l+0x568>)
 8018d36:	f001 fa77 	bl	801a228 <nan>
 8018d3a:	ec5b ab10 	vmov	sl, fp, d0
 8018d3e:	e67e      	b.n	8018a3e <_strtod_l+0x76>
 8018d40:	ee07 9a90 	vmov	s15, r9
 8018d44:	1be2      	subs	r2, r4, r7
 8018d46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018d4a:	2d00      	cmp	r5, #0
 8018d4c:	bf08      	it	eq
 8018d4e:	461d      	moveq	r5, r3
 8018d50:	2b10      	cmp	r3, #16
 8018d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d54:	461a      	mov	r2, r3
 8018d56:	bfa8      	it	ge
 8018d58:	2210      	movge	r2, #16
 8018d5a:	2b09      	cmp	r3, #9
 8018d5c:	ec5b ab17 	vmov	sl, fp, d7
 8018d60:	dc15      	bgt.n	8018d8e <_strtod_l+0x3c6>
 8018d62:	1be1      	subs	r1, r4, r7
 8018d64:	2900      	cmp	r1, #0
 8018d66:	f43f ae6a 	beq.w	8018a3e <_strtod_l+0x76>
 8018d6a:	eba4 0107 	sub.w	r1, r4, r7
 8018d6e:	dd72      	ble.n	8018e56 <_strtod_l+0x48e>
 8018d70:	2916      	cmp	r1, #22
 8018d72:	dc59      	bgt.n	8018e28 <_strtod_l+0x460>
 8018d74:	4b6f      	ldr	r3, [pc, #444]	@ (8018f34 <_strtod_l+0x56c>)
 8018d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d7c:	ed93 7b00 	vldr	d7, [r3]
 8018d80:	ec4b ab16 	vmov	d6, sl, fp
 8018d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018d88:	ec5b ab17 	vmov	sl, fp, d7
 8018d8c:	e657      	b.n	8018a3e <_strtod_l+0x76>
 8018d8e:	4969      	ldr	r1, [pc, #420]	@ (8018f34 <_strtod_l+0x56c>)
 8018d90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018d94:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018d98:	ee06 6a90 	vmov	s13, r6
 8018d9c:	2b0f      	cmp	r3, #15
 8018d9e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018da2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018da6:	ec5b ab16 	vmov	sl, fp, d6
 8018daa:	ddda      	ble.n	8018d62 <_strtod_l+0x39a>
 8018dac:	1a9a      	subs	r2, r3, r2
 8018dae:	1be1      	subs	r1, r4, r7
 8018db0:	440a      	add	r2, r1
 8018db2:	2a00      	cmp	r2, #0
 8018db4:	f340 8094 	ble.w	8018ee0 <_strtod_l+0x518>
 8018db8:	f012 000f 	ands.w	r0, r2, #15
 8018dbc:	d00a      	beq.n	8018dd4 <_strtod_l+0x40c>
 8018dbe:	495d      	ldr	r1, [pc, #372]	@ (8018f34 <_strtod_l+0x56c>)
 8018dc0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018dc4:	ed91 7b00 	vldr	d7, [r1]
 8018dc8:	ec4b ab16 	vmov	d6, sl, fp
 8018dcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018dd0:	ec5b ab17 	vmov	sl, fp, d7
 8018dd4:	f032 020f 	bics.w	r2, r2, #15
 8018dd8:	d073      	beq.n	8018ec2 <_strtod_l+0x4fa>
 8018dda:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8018dde:	dd47      	ble.n	8018e70 <_strtod_l+0x4a8>
 8018de0:	2400      	movs	r4, #0
 8018de2:	4625      	mov	r5, r4
 8018de4:	9407      	str	r4, [sp, #28]
 8018de6:	4626      	mov	r6, r4
 8018de8:	9a05      	ldr	r2, [sp, #20]
 8018dea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018f40 <_strtod_l+0x578>
 8018dee:	2322      	movs	r3, #34	@ 0x22
 8018df0:	6013      	str	r3, [r2, #0]
 8018df2:	f04f 0a00 	mov.w	sl, #0
 8018df6:	9b07      	ldr	r3, [sp, #28]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	f43f ae20 	beq.w	8018a3e <_strtod_l+0x76>
 8018dfe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018e00:	9805      	ldr	r0, [sp, #20]
 8018e02:	f002 fc83 	bl	801b70c <_Bfree>
 8018e06:	9805      	ldr	r0, [sp, #20]
 8018e08:	4631      	mov	r1, r6
 8018e0a:	f002 fc7f 	bl	801b70c <_Bfree>
 8018e0e:	9805      	ldr	r0, [sp, #20]
 8018e10:	4629      	mov	r1, r5
 8018e12:	f002 fc7b 	bl	801b70c <_Bfree>
 8018e16:	9907      	ldr	r1, [sp, #28]
 8018e18:	9805      	ldr	r0, [sp, #20]
 8018e1a:	f002 fc77 	bl	801b70c <_Bfree>
 8018e1e:	9805      	ldr	r0, [sp, #20]
 8018e20:	4621      	mov	r1, r4
 8018e22:	f002 fc73 	bl	801b70c <_Bfree>
 8018e26:	e60a      	b.n	8018a3e <_strtod_l+0x76>
 8018e28:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8018e2c:	1be0      	subs	r0, r4, r7
 8018e2e:	4281      	cmp	r1, r0
 8018e30:	dbbc      	blt.n	8018dac <_strtod_l+0x3e4>
 8018e32:	4a40      	ldr	r2, [pc, #256]	@ (8018f34 <_strtod_l+0x56c>)
 8018e34:	f1c3 030f 	rsb	r3, r3, #15
 8018e38:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018e3c:	ed91 7b00 	vldr	d7, [r1]
 8018e40:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018e42:	ec4b ab16 	vmov	d6, sl, fp
 8018e46:	1acb      	subs	r3, r1, r3
 8018e48:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018e50:	ed92 6b00 	vldr	d6, [r2]
 8018e54:	e796      	b.n	8018d84 <_strtod_l+0x3bc>
 8018e56:	3116      	adds	r1, #22
 8018e58:	dba8      	blt.n	8018dac <_strtod_l+0x3e4>
 8018e5a:	4b36      	ldr	r3, [pc, #216]	@ (8018f34 <_strtod_l+0x56c>)
 8018e5c:	1b3c      	subs	r4, r7, r4
 8018e5e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8018e62:	ed94 7b00 	vldr	d7, [r4]
 8018e66:	ec4b ab16 	vmov	d6, sl, fp
 8018e6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018e6e:	e78b      	b.n	8018d88 <_strtod_l+0x3c0>
 8018e70:	2000      	movs	r0, #0
 8018e72:	ec4b ab17 	vmov	d7, sl, fp
 8018e76:	4e30      	ldr	r6, [pc, #192]	@ (8018f38 <_strtod_l+0x570>)
 8018e78:	1112      	asrs	r2, r2, #4
 8018e7a:	4601      	mov	r1, r0
 8018e7c:	2a01      	cmp	r2, #1
 8018e7e:	dc23      	bgt.n	8018ec8 <_strtod_l+0x500>
 8018e80:	b108      	cbz	r0, 8018e86 <_strtod_l+0x4be>
 8018e82:	ec5b ab17 	vmov	sl, fp, d7
 8018e86:	4a2c      	ldr	r2, [pc, #176]	@ (8018f38 <_strtod_l+0x570>)
 8018e88:	482c      	ldr	r0, [pc, #176]	@ (8018f3c <_strtod_l+0x574>)
 8018e8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8018e8e:	ed92 7b00 	vldr	d7, [r2]
 8018e92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018e96:	ec4b ab16 	vmov	d6, sl, fp
 8018e9a:	4a29      	ldr	r2, [pc, #164]	@ (8018f40 <_strtod_l+0x578>)
 8018e9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ea0:	ee17 1a90 	vmov	r1, s15
 8018ea4:	400a      	ands	r2, r1
 8018ea6:	4282      	cmp	r2, r0
 8018ea8:	ec5b ab17 	vmov	sl, fp, d7
 8018eac:	d898      	bhi.n	8018de0 <_strtod_l+0x418>
 8018eae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018eb2:	4282      	cmp	r2, r0
 8018eb4:	bf86      	itte	hi
 8018eb6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8018f44 <_strtod_l+0x57c>
 8018eba:	f04f 3aff 	movhi.w	sl, #4294967295
 8018ebe:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	9206      	str	r2, [sp, #24]
 8018ec6:	e076      	b.n	8018fb6 <_strtod_l+0x5ee>
 8018ec8:	f012 0f01 	tst.w	r2, #1
 8018ecc:	d004      	beq.n	8018ed8 <_strtod_l+0x510>
 8018ece:	ed96 6b00 	vldr	d6, [r6]
 8018ed2:	2001      	movs	r0, #1
 8018ed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ed8:	3101      	adds	r1, #1
 8018eda:	1052      	asrs	r2, r2, #1
 8018edc:	3608      	adds	r6, #8
 8018ede:	e7cd      	b.n	8018e7c <_strtod_l+0x4b4>
 8018ee0:	d0ef      	beq.n	8018ec2 <_strtod_l+0x4fa>
 8018ee2:	4252      	negs	r2, r2
 8018ee4:	f012 000f 	ands.w	r0, r2, #15
 8018ee8:	d00a      	beq.n	8018f00 <_strtod_l+0x538>
 8018eea:	4912      	ldr	r1, [pc, #72]	@ (8018f34 <_strtod_l+0x56c>)
 8018eec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018ef0:	ed91 7b00 	vldr	d7, [r1]
 8018ef4:	ec4b ab16 	vmov	d6, sl, fp
 8018ef8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018efc:	ec5b ab17 	vmov	sl, fp, d7
 8018f00:	1112      	asrs	r2, r2, #4
 8018f02:	d0de      	beq.n	8018ec2 <_strtod_l+0x4fa>
 8018f04:	2a1f      	cmp	r2, #31
 8018f06:	dd1f      	ble.n	8018f48 <_strtod_l+0x580>
 8018f08:	2400      	movs	r4, #0
 8018f0a:	4625      	mov	r5, r4
 8018f0c:	9407      	str	r4, [sp, #28]
 8018f0e:	4626      	mov	r6, r4
 8018f10:	9a05      	ldr	r2, [sp, #20]
 8018f12:	2322      	movs	r3, #34	@ 0x22
 8018f14:	f04f 0a00 	mov.w	sl, #0
 8018f18:	f04f 0b00 	mov.w	fp, #0
 8018f1c:	6013      	str	r3, [r2, #0]
 8018f1e:	e76a      	b.n	8018df6 <_strtod_l+0x42e>
 8018f20:	0801e4ce 	.word	0x0801e4ce
 8018f24:	0801e370 	.word	0x0801e370
 8018f28:	0801e4c6 	.word	0x0801e4c6
 8018f2c:	0801e500 	.word	0x0801e500
 8018f30:	0801e78c 	.word	0x0801e78c
 8018f34:	0801e678 	.word	0x0801e678
 8018f38:	0801e650 	.word	0x0801e650
 8018f3c:	7ca00000 	.word	0x7ca00000
 8018f40:	7ff00000 	.word	0x7ff00000
 8018f44:	7fefffff 	.word	0x7fefffff
 8018f48:	f012 0110 	ands.w	r1, r2, #16
 8018f4c:	bf18      	it	ne
 8018f4e:	216a      	movne	r1, #106	@ 0x6a
 8018f50:	9106      	str	r1, [sp, #24]
 8018f52:	ec4b ab17 	vmov	d7, sl, fp
 8018f56:	49b0      	ldr	r1, [pc, #704]	@ (8019218 <_strtod_l+0x850>)
 8018f58:	2000      	movs	r0, #0
 8018f5a:	07d6      	lsls	r6, r2, #31
 8018f5c:	d504      	bpl.n	8018f68 <_strtod_l+0x5a0>
 8018f5e:	ed91 6b00 	vldr	d6, [r1]
 8018f62:	2001      	movs	r0, #1
 8018f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f68:	1052      	asrs	r2, r2, #1
 8018f6a:	f101 0108 	add.w	r1, r1, #8
 8018f6e:	d1f4      	bne.n	8018f5a <_strtod_l+0x592>
 8018f70:	b108      	cbz	r0, 8018f76 <_strtod_l+0x5ae>
 8018f72:	ec5b ab17 	vmov	sl, fp, d7
 8018f76:	9a06      	ldr	r2, [sp, #24]
 8018f78:	b1b2      	cbz	r2, 8018fa8 <_strtod_l+0x5e0>
 8018f7a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8018f7e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018f82:	2a00      	cmp	r2, #0
 8018f84:	4658      	mov	r0, fp
 8018f86:	dd0f      	ble.n	8018fa8 <_strtod_l+0x5e0>
 8018f88:	2a1f      	cmp	r2, #31
 8018f8a:	dd55      	ble.n	8019038 <_strtod_l+0x670>
 8018f8c:	2a34      	cmp	r2, #52	@ 0x34
 8018f8e:	bfde      	ittt	le
 8018f90:	f04f 32ff 	movle.w	r2, #4294967295
 8018f94:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018f98:	408a      	lslle	r2, r1
 8018f9a:	f04f 0a00 	mov.w	sl, #0
 8018f9e:	bfcc      	ite	gt
 8018fa0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018fa4:	ea02 0b00 	andle.w	fp, r2, r0
 8018fa8:	ec4b ab17 	vmov	d7, sl, fp
 8018fac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb4:	d0a8      	beq.n	8018f08 <_strtod_l+0x540>
 8018fb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018fb8:	9805      	ldr	r0, [sp, #20]
 8018fba:	f8cd 9000 	str.w	r9, [sp]
 8018fbe:	462a      	mov	r2, r5
 8018fc0:	f002 fc0c 	bl	801b7dc <__s2b>
 8018fc4:	9007      	str	r0, [sp, #28]
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	f43f af0a 	beq.w	8018de0 <_strtod_l+0x418>
 8018fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fce:	1b3f      	subs	r7, r7, r4
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	bfb4      	ite	lt
 8018fd4:	463b      	movlt	r3, r7
 8018fd6:	2300      	movge	r3, #0
 8018fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018fdc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019208 <_strtod_l+0x840>
 8018fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fe4:	2400      	movs	r4, #0
 8018fe6:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fe8:	4625      	mov	r5, r4
 8018fea:	9b07      	ldr	r3, [sp, #28]
 8018fec:	9805      	ldr	r0, [sp, #20]
 8018fee:	6859      	ldr	r1, [r3, #4]
 8018ff0:	f002 fb4c 	bl	801b68c <_Balloc>
 8018ff4:	4606      	mov	r6, r0
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	f43f aef6 	beq.w	8018de8 <_strtod_l+0x420>
 8018ffc:	9b07      	ldr	r3, [sp, #28]
 8018ffe:	691a      	ldr	r2, [r3, #16]
 8019000:	ec4b ab19 	vmov	d9, sl, fp
 8019004:	3202      	adds	r2, #2
 8019006:	f103 010c 	add.w	r1, r3, #12
 801900a:	0092      	lsls	r2, r2, #2
 801900c:	300c      	adds	r0, #12
 801900e:	f001 f8fa 	bl	801a206 <memcpy>
 8019012:	eeb0 0b49 	vmov.f64	d0, d9
 8019016:	9805      	ldr	r0, [sp, #20]
 8019018:	aa14      	add	r2, sp, #80	@ 0x50
 801901a:	a913      	add	r1, sp, #76	@ 0x4c
 801901c:	f002 ff1a 	bl	801be54 <__d2b>
 8019020:	9012      	str	r0, [sp, #72]	@ 0x48
 8019022:	2800      	cmp	r0, #0
 8019024:	f43f aee0 	beq.w	8018de8 <_strtod_l+0x420>
 8019028:	9805      	ldr	r0, [sp, #20]
 801902a:	2101      	movs	r1, #1
 801902c:	f002 fc6c 	bl	801b908 <__i2b>
 8019030:	4605      	mov	r5, r0
 8019032:	b940      	cbnz	r0, 8019046 <_strtod_l+0x67e>
 8019034:	2500      	movs	r5, #0
 8019036:	e6d7      	b.n	8018de8 <_strtod_l+0x420>
 8019038:	f04f 31ff 	mov.w	r1, #4294967295
 801903c:	fa01 f202 	lsl.w	r2, r1, r2
 8019040:	ea02 0a0a 	and.w	sl, r2, sl
 8019044:	e7b0      	b.n	8018fa8 <_strtod_l+0x5e0>
 8019046:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019048:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801904a:	2f00      	cmp	r7, #0
 801904c:	bfab      	itete	ge
 801904e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019050:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8019052:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8019056:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801905a:	bfac      	ite	ge
 801905c:	eb07 0903 	addge.w	r9, r7, r3
 8019060:	eba3 0807 	sublt.w	r8, r3, r7
 8019064:	9b06      	ldr	r3, [sp, #24]
 8019066:	1aff      	subs	r7, r7, r3
 8019068:	4417      	add	r7, r2
 801906a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 801906e:	4a6b      	ldr	r2, [pc, #428]	@ (801921c <_strtod_l+0x854>)
 8019070:	3f01      	subs	r7, #1
 8019072:	4297      	cmp	r7, r2
 8019074:	da51      	bge.n	801911a <_strtod_l+0x752>
 8019076:	1bd1      	subs	r1, r2, r7
 8019078:	291f      	cmp	r1, #31
 801907a:	eba3 0301 	sub.w	r3, r3, r1
 801907e:	f04f 0201 	mov.w	r2, #1
 8019082:	dc3e      	bgt.n	8019102 <_strtod_l+0x73a>
 8019084:	408a      	lsls	r2, r1
 8019086:	920c      	str	r2, [sp, #48]	@ 0x30
 8019088:	2200      	movs	r2, #0
 801908a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801908c:	eb09 0703 	add.w	r7, r9, r3
 8019090:	4498      	add	r8, r3
 8019092:	9b06      	ldr	r3, [sp, #24]
 8019094:	45b9      	cmp	r9, r7
 8019096:	4498      	add	r8, r3
 8019098:	464b      	mov	r3, r9
 801909a:	bfa8      	it	ge
 801909c:	463b      	movge	r3, r7
 801909e:	4543      	cmp	r3, r8
 80190a0:	bfa8      	it	ge
 80190a2:	4643      	movge	r3, r8
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	bfc2      	ittt	gt
 80190a8:	1aff      	subgt	r7, r7, r3
 80190aa:	eba8 0803 	subgt.w	r8, r8, r3
 80190ae:	eba9 0903 	subgt.w	r9, r9, r3
 80190b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	dd16      	ble.n	80190e6 <_strtod_l+0x71e>
 80190b8:	4629      	mov	r1, r5
 80190ba:	9805      	ldr	r0, [sp, #20]
 80190bc:	461a      	mov	r2, r3
 80190be:	f002 fce3 	bl	801ba88 <__pow5mult>
 80190c2:	4605      	mov	r5, r0
 80190c4:	2800      	cmp	r0, #0
 80190c6:	d0b5      	beq.n	8019034 <_strtod_l+0x66c>
 80190c8:	4601      	mov	r1, r0
 80190ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80190cc:	9805      	ldr	r0, [sp, #20]
 80190ce:	f002 fc31 	bl	801b934 <__multiply>
 80190d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80190d4:	2800      	cmp	r0, #0
 80190d6:	f43f ae87 	beq.w	8018de8 <_strtod_l+0x420>
 80190da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80190dc:	9805      	ldr	r0, [sp, #20]
 80190de:	f002 fb15 	bl	801b70c <_Bfree>
 80190e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80190e6:	2f00      	cmp	r7, #0
 80190e8:	dc1b      	bgt.n	8019122 <_strtod_l+0x75a>
 80190ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	dd21      	ble.n	8019134 <_strtod_l+0x76c>
 80190f0:	4631      	mov	r1, r6
 80190f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190f4:	9805      	ldr	r0, [sp, #20]
 80190f6:	f002 fcc7 	bl	801ba88 <__pow5mult>
 80190fa:	4606      	mov	r6, r0
 80190fc:	b9d0      	cbnz	r0, 8019134 <_strtod_l+0x76c>
 80190fe:	2600      	movs	r6, #0
 8019100:	e672      	b.n	8018de8 <_strtod_l+0x420>
 8019102:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8019106:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801910a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801910e:	37e2      	adds	r7, #226	@ 0xe2
 8019110:	fa02 f107 	lsl.w	r1, r2, r7
 8019114:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019116:	920c      	str	r2, [sp, #48]	@ 0x30
 8019118:	e7b8      	b.n	801908c <_strtod_l+0x6c4>
 801911a:	2200      	movs	r2, #0
 801911c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801911e:	2201      	movs	r2, #1
 8019120:	e7f9      	b.n	8019116 <_strtod_l+0x74e>
 8019122:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019124:	9805      	ldr	r0, [sp, #20]
 8019126:	463a      	mov	r2, r7
 8019128:	f002 fd08 	bl	801bb3c <__lshift>
 801912c:	9012      	str	r0, [sp, #72]	@ 0x48
 801912e:	2800      	cmp	r0, #0
 8019130:	d1db      	bne.n	80190ea <_strtod_l+0x722>
 8019132:	e659      	b.n	8018de8 <_strtod_l+0x420>
 8019134:	f1b8 0f00 	cmp.w	r8, #0
 8019138:	dd07      	ble.n	801914a <_strtod_l+0x782>
 801913a:	4631      	mov	r1, r6
 801913c:	9805      	ldr	r0, [sp, #20]
 801913e:	4642      	mov	r2, r8
 8019140:	f002 fcfc 	bl	801bb3c <__lshift>
 8019144:	4606      	mov	r6, r0
 8019146:	2800      	cmp	r0, #0
 8019148:	d0d9      	beq.n	80190fe <_strtod_l+0x736>
 801914a:	f1b9 0f00 	cmp.w	r9, #0
 801914e:	dd08      	ble.n	8019162 <_strtod_l+0x79a>
 8019150:	4629      	mov	r1, r5
 8019152:	9805      	ldr	r0, [sp, #20]
 8019154:	464a      	mov	r2, r9
 8019156:	f002 fcf1 	bl	801bb3c <__lshift>
 801915a:	4605      	mov	r5, r0
 801915c:	2800      	cmp	r0, #0
 801915e:	f43f ae43 	beq.w	8018de8 <_strtod_l+0x420>
 8019162:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019164:	9805      	ldr	r0, [sp, #20]
 8019166:	4632      	mov	r2, r6
 8019168:	f002 fd70 	bl	801bc4c <__mdiff>
 801916c:	4604      	mov	r4, r0
 801916e:	2800      	cmp	r0, #0
 8019170:	f43f ae3a 	beq.w	8018de8 <_strtod_l+0x420>
 8019174:	2300      	movs	r3, #0
 8019176:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801917a:	60c3      	str	r3, [r0, #12]
 801917c:	4629      	mov	r1, r5
 801917e:	f002 fd49 	bl	801bc14 <__mcmp>
 8019182:	2800      	cmp	r0, #0
 8019184:	da4e      	bge.n	8019224 <_strtod_l+0x85c>
 8019186:	ea58 080a 	orrs.w	r8, r8, sl
 801918a:	d174      	bne.n	8019276 <_strtod_l+0x8ae>
 801918c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019190:	2b00      	cmp	r3, #0
 8019192:	d170      	bne.n	8019276 <_strtod_l+0x8ae>
 8019194:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019198:	0d1b      	lsrs	r3, r3, #20
 801919a:	051b      	lsls	r3, r3, #20
 801919c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80191a0:	d969      	bls.n	8019276 <_strtod_l+0x8ae>
 80191a2:	6963      	ldr	r3, [r4, #20]
 80191a4:	b913      	cbnz	r3, 80191ac <_strtod_l+0x7e4>
 80191a6:	6923      	ldr	r3, [r4, #16]
 80191a8:	2b01      	cmp	r3, #1
 80191aa:	dd64      	ble.n	8019276 <_strtod_l+0x8ae>
 80191ac:	4621      	mov	r1, r4
 80191ae:	2201      	movs	r2, #1
 80191b0:	9805      	ldr	r0, [sp, #20]
 80191b2:	f002 fcc3 	bl	801bb3c <__lshift>
 80191b6:	4629      	mov	r1, r5
 80191b8:	4604      	mov	r4, r0
 80191ba:	f002 fd2b 	bl	801bc14 <__mcmp>
 80191be:	2800      	cmp	r0, #0
 80191c0:	dd59      	ble.n	8019276 <_strtod_l+0x8ae>
 80191c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80191c6:	9a06      	ldr	r2, [sp, #24]
 80191c8:	0d1b      	lsrs	r3, r3, #20
 80191ca:	051b      	lsls	r3, r3, #20
 80191cc:	2a00      	cmp	r2, #0
 80191ce:	d070      	beq.n	80192b2 <_strtod_l+0x8ea>
 80191d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80191d4:	d86d      	bhi.n	80192b2 <_strtod_l+0x8ea>
 80191d6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80191da:	f67f ae99 	bls.w	8018f10 <_strtod_l+0x548>
 80191de:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019210 <_strtod_l+0x848>
 80191e2:	ec4b ab16 	vmov	d6, sl, fp
 80191e6:	4b0e      	ldr	r3, [pc, #56]	@ (8019220 <_strtod_l+0x858>)
 80191e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80191ec:	ee17 2a90 	vmov	r2, s15
 80191f0:	4013      	ands	r3, r2
 80191f2:	ec5b ab17 	vmov	sl, fp, d7
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f47f ae01 	bne.w	8018dfe <_strtod_l+0x436>
 80191fc:	9a05      	ldr	r2, [sp, #20]
 80191fe:	2322      	movs	r3, #34	@ 0x22
 8019200:	6013      	str	r3, [r2, #0]
 8019202:	e5fc      	b.n	8018dfe <_strtod_l+0x436>
 8019204:	f3af 8000 	nop.w
 8019208:	ffc00000 	.word	0xffc00000
 801920c:	41dfffff 	.word	0x41dfffff
 8019210:	00000000 	.word	0x00000000
 8019214:	39500000 	.word	0x39500000
 8019218:	0801e398 	.word	0x0801e398
 801921c:	fffffc02 	.word	0xfffffc02
 8019220:	7ff00000 	.word	0x7ff00000
 8019224:	46d9      	mov	r9, fp
 8019226:	d15d      	bne.n	80192e4 <_strtod_l+0x91c>
 8019228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801922c:	f1b8 0f00 	cmp.w	r8, #0
 8019230:	d02a      	beq.n	8019288 <_strtod_l+0x8c0>
 8019232:	4aab      	ldr	r2, [pc, #684]	@ (80194e0 <_strtod_l+0xb18>)
 8019234:	4293      	cmp	r3, r2
 8019236:	d12a      	bne.n	801928e <_strtod_l+0x8c6>
 8019238:	9b06      	ldr	r3, [sp, #24]
 801923a:	4652      	mov	r2, sl
 801923c:	b1fb      	cbz	r3, 801927e <_strtod_l+0x8b6>
 801923e:	4ba9      	ldr	r3, [pc, #676]	@ (80194e4 <_strtod_l+0xb1c>)
 8019240:	ea0b 0303 	and.w	r3, fp, r3
 8019244:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019248:	f04f 31ff 	mov.w	r1, #4294967295
 801924c:	d81a      	bhi.n	8019284 <_strtod_l+0x8bc>
 801924e:	0d1b      	lsrs	r3, r3, #20
 8019250:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019254:	fa01 f303 	lsl.w	r3, r1, r3
 8019258:	429a      	cmp	r2, r3
 801925a:	d118      	bne.n	801928e <_strtod_l+0x8c6>
 801925c:	4ba2      	ldr	r3, [pc, #648]	@ (80194e8 <_strtod_l+0xb20>)
 801925e:	4599      	cmp	r9, r3
 8019260:	d102      	bne.n	8019268 <_strtod_l+0x8a0>
 8019262:	3201      	adds	r2, #1
 8019264:	f43f adc0 	beq.w	8018de8 <_strtod_l+0x420>
 8019268:	4b9e      	ldr	r3, [pc, #632]	@ (80194e4 <_strtod_l+0xb1c>)
 801926a:	ea09 0303 	and.w	r3, r9, r3
 801926e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019272:	f04f 0a00 	mov.w	sl, #0
 8019276:	9b06      	ldr	r3, [sp, #24]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d1b0      	bne.n	80191de <_strtod_l+0x816>
 801927c:	e5bf      	b.n	8018dfe <_strtod_l+0x436>
 801927e:	f04f 33ff 	mov.w	r3, #4294967295
 8019282:	e7e9      	b.n	8019258 <_strtod_l+0x890>
 8019284:	460b      	mov	r3, r1
 8019286:	e7e7      	b.n	8019258 <_strtod_l+0x890>
 8019288:	ea53 030a 	orrs.w	r3, r3, sl
 801928c:	d099      	beq.n	80191c2 <_strtod_l+0x7fa>
 801928e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019290:	b1c3      	cbz	r3, 80192c4 <_strtod_l+0x8fc>
 8019292:	ea13 0f09 	tst.w	r3, r9
 8019296:	d0ee      	beq.n	8019276 <_strtod_l+0x8ae>
 8019298:	9a06      	ldr	r2, [sp, #24]
 801929a:	4650      	mov	r0, sl
 801929c:	4659      	mov	r1, fp
 801929e:	f1b8 0f00 	cmp.w	r8, #0
 80192a2:	d013      	beq.n	80192cc <_strtod_l+0x904>
 80192a4:	f7ff fb73 	bl	801898e <sulp>
 80192a8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80192ac:	ec5b ab17 	vmov	sl, fp, d7
 80192b0:	e7e1      	b.n	8019276 <_strtod_l+0x8ae>
 80192b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80192b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80192ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80192be:	f04f 3aff 	mov.w	sl, #4294967295
 80192c2:	e7d8      	b.n	8019276 <_strtod_l+0x8ae>
 80192c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192c6:	ea13 0f0a 	tst.w	r3, sl
 80192ca:	e7e4      	b.n	8019296 <_strtod_l+0x8ce>
 80192cc:	f7ff fb5f 	bl	801898e <sulp>
 80192d0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80192d4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80192d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192dc:	ec5b ab10 	vmov	sl, fp, d0
 80192e0:	d1c9      	bne.n	8019276 <_strtod_l+0x8ae>
 80192e2:	e615      	b.n	8018f10 <_strtod_l+0x548>
 80192e4:	4629      	mov	r1, r5
 80192e6:	4620      	mov	r0, r4
 80192e8:	f002 fe0c 	bl	801bf04 <__ratio>
 80192ec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80192f0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80192f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f8:	d85d      	bhi.n	80193b6 <_strtod_l+0x9ee>
 80192fa:	f1b8 0f00 	cmp.w	r8, #0
 80192fe:	d164      	bne.n	80193ca <_strtod_l+0xa02>
 8019300:	f1ba 0f00 	cmp.w	sl, #0
 8019304:	d14b      	bne.n	801939e <_strtod_l+0x9d6>
 8019306:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801930a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801930e:	2b00      	cmp	r3, #0
 8019310:	d160      	bne.n	80193d4 <_strtod_l+0xa0c>
 8019312:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019316:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931e:	d401      	bmi.n	8019324 <_strtod_l+0x95c>
 8019320:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019324:	eeb1 ab48 	vneg.f64	d10, d8
 8019328:	486e      	ldr	r0, [pc, #440]	@ (80194e4 <_strtod_l+0xb1c>)
 801932a:	4970      	ldr	r1, [pc, #448]	@ (80194ec <_strtod_l+0xb24>)
 801932c:	ea09 0700 	and.w	r7, r9, r0
 8019330:	428f      	cmp	r7, r1
 8019332:	ec53 2b1a 	vmov	r2, r3, d10
 8019336:	d17d      	bne.n	8019434 <_strtod_l+0xa6c>
 8019338:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801933c:	ec4b ab1c 	vmov	d12, sl, fp
 8019340:	eeb0 0b4c 	vmov.f64	d0, d12
 8019344:	f002 fd16 	bl	801bd74 <__ulp>
 8019348:	4866      	ldr	r0, [pc, #408]	@ (80194e4 <_strtod_l+0xb1c>)
 801934a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801934e:	ee1c 3a90 	vmov	r3, s25
 8019352:	4a67      	ldr	r2, [pc, #412]	@ (80194f0 <_strtod_l+0xb28>)
 8019354:	ea03 0100 	and.w	r1, r3, r0
 8019358:	4291      	cmp	r1, r2
 801935a:	ec5b ab1c 	vmov	sl, fp, d12
 801935e:	d93c      	bls.n	80193da <_strtod_l+0xa12>
 8019360:	ee19 2a90 	vmov	r2, s19
 8019364:	4b60      	ldr	r3, [pc, #384]	@ (80194e8 <_strtod_l+0xb20>)
 8019366:	429a      	cmp	r2, r3
 8019368:	d104      	bne.n	8019374 <_strtod_l+0x9ac>
 801936a:	ee19 3a10 	vmov	r3, s18
 801936e:	3301      	adds	r3, #1
 8019370:	f43f ad3a 	beq.w	8018de8 <_strtod_l+0x420>
 8019374:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80194e8 <_strtod_l+0xb20>
 8019378:	f04f 3aff 	mov.w	sl, #4294967295
 801937c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801937e:	9805      	ldr	r0, [sp, #20]
 8019380:	f002 f9c4 	bl	801b70c <_Bfree>
 8019384:	9805      	ldr	r0, [sp, #20]
 8019386:	4631      	mov	r1, r6
 8019388:	f002 f9c0 	bl	801b70c <_Bfree>
 801938c:	9805      	ldr	r0, [sp, #20]
 801938e:	4629      	mov	r1, r5
 8019390:	f002 f9bc 	bl	801b70c <_Bfree>
 8019394:	9805      	ldr	r0, [sp, #20]
 8019396:	4621      	mov	r1, r4
 8019398:	f002 f9b8 	bl	801b70c <_Bfree>
 801939c:	e625      	b.n	8018fea <_strtod_l+0x622>
 801939e:	f1ba 0f01 	cmp.w	sl, #1
 80193a2:	d103      	bne.n	80193ac <_strtod_l+0x9e4>
 80193a4:	f1bb 0f00 	cmp.w	fp, #0
 80193a8:	f43f adb2 	beq.w	8018f10 <_strtod_l+0x548>
 80193ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80193b0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80193b4:	e7b8      	b.n	8019328 <_strtod_l+0x960>
 80193b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80193ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 80193be:	f1b8 0f00 	cmp.w	r8, #0
 80193c2:	d0af      	beq.n	8019324 <_strtod_l+0x95c>
 80193c4:	eeb0 ab48 	vmov.f64	d10, d8
 80193c8:	e7ae      	b.n	8019328 <_strtod_l+0x960>
 80193ca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80193ce:	eeb0 8b4a 	vmov.f64	d8, d10
 80193d2:	e7a9      	b.n	8019328 <_strtod_l+0x960>
 80193d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80193d8:	e7a6      	b.n	8019328 <_strtod_l+0x960>
 80193da:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80193de:	9b06      	ldr	r3, [sp, #24]
 80193e0:	46d9      	mov	r9, fp
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d1ca      	bne.n	801937c <_strtod_l+0x9b4>
 80193e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80193ea:	0d1b      	lsrs	r3, r3, #20
 80193ec:	051b      	lsls	r3, r3, #20
 80193ee:	429f      	cmp	r7, r3
 80193f0:	d1c4      	bne.n	801937c <_strtod_l+0x9b4>
 80193f2:	ec51 0b18 	vmov	r0, r1, d8
 80193f6:	f7e7 f9c7 	bl	8000788 <__aeabi_d2lz>
 80193fa:	f7e7 f97f 	bl	80006fc <__aeabi_l2d>
 80193fe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019402:	ec41 0b17 	vmov	d7, r0, r1
 8019406:	ea49 090a 	orr.w	r9, r9, sl
 801940a:	ea59 0908 	orrs.w	r9, r9, r8
 801940e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019412:	d03c      	beq.n	801948e <_strtod_l+0xac6>
 8019414:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80194c8 <_strtod_l+0xb00>
 8019418:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801941c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019420:	f53f aced 	bmi.w	8018dfe <_strtod_l+0x436>
 8019424:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80194d0 <_strtod_l+0xb08>
 8019428:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801942c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019430:	dda4      	ble.n	801937c <_strtod_l+0x9b4>
 8019432:	e4e4      	b.n	8018dfe <_strtod_l+0x436>
 8019434:	9906      	ldr	r1, [sp, #24]
 8019436:	b1e1      	cbz	r1, 8019472 <_strtod_l+0xaaa>
 8019438:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801943c:	d819      	bhi.n	8019472 <_strtod_l+0xaaa>
 801943e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019446:	d811      	bhi.n	801946c <_strtod_l+0xaa4>
 8019448:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801944c:	ee18 3a10 	vmov	r3, s16
 8019450:	2b01      	cmp	r3, #1
 8019452:	bf38      	it	cc
 8019454:	2301      	movcc	r3, #1
 8019456:	ee08 3a10 	vmov	s16, r3
 801945a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801945e:	f1b8 0f00 	cmp.w	r8, #0
 8019462:	d111      	bne.n	8019488 <_strtod_l+0xac0>
 8019464:	eeb1 7b48 	vneg.f64	d7, d8
 8019468:	ec53 2b17 	vmov	r2, r3, d7
 801946c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019470:	1bcb      	subs	r3, r1, r7
 8019472:	eeb0 0b49 	vmov.f64	d0, d9
 8019476:	ec43 2b1a 	vmov	d10, r2, r3
 801947a:	f002 fc7b 	bl	801bd74 <__ulp>
 801947e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019482:	ec5b ab19 	vmov	sl, fp, d9
 8019486:	e7aa      	b.n	80193de <_strtod_l+0xa16>
 8019488:	eeb0 7b48 	vmov.f64	d7, d8
 801948c:	e7ec      	b.n	8019468 <_strtod_l+0xaa0>
 801948e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80194d8 <_strtod_l+0xb10>
 8019492:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801949a:	f57f af6f 	bpl.w	801937c <_strtod_l+0x9b4>
 801949e:	e4ae      	b.n	8018dfe <_strtod_l+0x436>
 80194a0:	2300      	movs	r3, #0
 80194a2:	9308      	str	r3, [sp, #32]
 80194a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194a8:	6013      	str	r3, [r2, #0]
 80194aa:	f7ff bacc 	b.w	8018a46 <_strtod_l+0x7e>
 80194ae:	2a65      	cmp	r2, #101	@ 0x65
 80194b0:	f43f abbc 	beq.w	8018c2c <_strtod_l+0x264>
 80194b4:	2a45      	cmp	r2, #69	@ 0x45
 80194b6:	f43f abb9 	beq.w	8018c2c <_strtod_l+0x264>
 80194ba:	2301      	movs	r3, #1
 80194bc:	9306      	str	r3, [sp, #24]
 80194be:	f7ff bbf0 	b.w	8018ca2 <_strtod_l+0x2da>
 80194c2:	bf00      	nop
 80194c4:	f3af 8000 	nop.w
 80194c8:	94a03595 	.word	0x94a03595
 80194cc:	3fdfffff 	.word	0x3fdfffff
 80194d0:	35afe535 	.word	0x35afe535
 80194d4:	3fe00000 	.word	0x3fe00000
 80194d8:	94a03595 	.word	0x94a03595
 80194dc:	3fcfffff 	.word	0x3fcfffff
 80194e0:	000fffff 	.word	0x000fffff
 80194e4:	7ff00000 	.word	0x7ff00000
 80194e8:	7fefffff 	.word	0x7fefffff
 80194ec:	7fe00000 	.word	0x7fe00000
 80194f0:	7c9fffff 	.word	0x7c9fffff

080194f4 <strtod>:
 80194f4:	460a      	mov	r2, r1
 80194f6:	4601      	mov	r1, r0
 80194f8:	4802      	ldr	r0, [pc, #8]	@ (8019504 <strtod+0x10>)
 80194fa:	4b03      	ldr	r3, [pc, #12]	@ (8019508 <strtod+0x14>)
 80194fc:	6800      	ldr	r0, [r0, #0]
 80194fe:	f7ff ba63 	b.w	80189c8 <_strtod_l>
 8019502:	bf00      	nop
 8019504:	240002ac 	.word	0x240002ac
 8019508:	24000140 	.word	0x24000140

0801950c <_strtol_l.constprop.0>:
 801950c:	2b24      	cmp	r3, #36	@ 0x24
 801950e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019512:	4686      	mov	lr, r0
 8019514:	4690      	mov	r8, r2
 8019516:	d801      	bhi.n	801951c <_strtol_l.constprop.0+0x10>
 8019518:	2b01      	cmp	r3, #1
 801951a:	d106      	bne.n	801952a <_strtol_l.constprop.0+0x1e>
 801951c:	f000 fe46 	bl	801a1ac <__errno>
 8019520:	2316      	movs	r3, #22
 8019522:	6003      	str	r3, [r0, #0]
 8019524:	2000      	movs	r0, #0
 8019526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801952a:	4834      	ldr	r0, [pc, #208]	@ (80195fc <_strtol_l.constprop.0+0xf0>)
 801952c:	460d      	mov	r5, r1
 801952e:	462a      	mov	r2, r5
 8019530:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019534:	5d06      	ldrb	r6, [r0, r4]
 8019536:	f016 0608 	ands.w	r6, r6, #8
 801953a:	d1f8      	bne.n	801952e <_strtol_l.constprop.0+0x22>
 801953c:	2c2d      	cmp	r4, #45	@ 0x2d
 801953e:	d12d      	bne.n	801959c <_strtol_l.constprop.0+0x90>
 8019540:	782c      	ldrb	r4, [r5, #0]
 8019542:	2601      	movs	r6, #1
 8019544:	1c95      	adds	r5, r2, #2
 8019546:	f033 0210 	bics.w	r2, r3, #16
 801954a:	d109      	bne.n	8019560 <_strtol_l.constprop.0+0x54>
 801954c:	2c30      	cmp	r4, #48	@ 0x30
 801954e:	d12a      	bne.n	80195a6 <_strtol_l.constprop.0+0x9a>
 8019550:	782a      	ldrb	r2, [r5, #0]
 8019552:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019556:	2a58      	cmp	r2, #88	@ 0x58
 8019558:	d125      	bne.n	80195a6 <_strtol_l.constprop.0+0x9a>
 801955a:	786c      	ldrb	r4, [r5, #1]
 801955c:	2310      	movs	r3, #16
 801955e:	3502      	adds	r5, #2
 8019560:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019564:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019568:	2200      	movs	r2, #0
 801956a:	fbbc f9f3 	udiv	r9, ip, r3
 801956e:	4610      	mov	r0, r2
 8019570:	fb03 ca19 	mls	sl, r3, r9, ip
 8019574:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019578:	2f09      	cmp	r7, #9
 801957a:	d81b      	bhi.n	80195b4 <_strtol_l.constprop.0+0xa8>
 801957c:	463c      	mov	r4, r7
 801957e:	42a3      	cmp	r3, r4
 8019580:	dd27      	ble.n	80195d2 <_strtol_l.constprop.0+0xc6>
 8019582:	1c57      	adds	r7, r2, #1
 8019584:	d007      	beq.n	8019596 <_strtol_l.constprop.0+0x8a>
 8019586:	4581      	cmp	r9, r0
 8019588:	d320      	bcc.n	80195cc <_strtol_l.constprop.0+0xc0>
 801958a:	d101      	bne.n	8019590 <_strtol_l.constprop.0+0x84>
 801958c:	45a2      	cmp	sl, r4
 801958e:	db1d      	blt.n	80195cc <_strtol_l.constprop.0+0xc0>
 8019590:	fb00 4003 	mla	r0, r0, r3, r4
 8019594:	2201      	movs	r2, #1
 8019596:	f815 4b01 	ldrb.w	r4, [r5], #1
 801959a:	e7eb      	b.n	8019574 <_strtol_l.constprop.0+0x68>
 801959c:	2c2b      	cmp	r4, #43	@ 0x2b
 801959e:	bf04      	itt	eq
 80195a0:	782c      	ldrbeq	r4, [r5, #0]
 80195a2:	1c95      	addeq	r5, r2, #2
 80195a4:	e7cf      	b.n	8019546 <_strtol_l.constprop.0+0x3a>
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d1da      	bne.n	8019560 <_strtol_l.constprop.0+0x54>
 80195aa:	2c30      	cmp	r4, #48	@ 0x30
 80195ac:	bf0c      	ite	eq
 80195ae:	2308      	moveq	r3, #8
 80195b0:	230a      	movne	r3, #10
 80195b2:	e7d5      	b.n	8019560 <_strtol_l.constprop.0+0x54>
 80195b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80195b8:	2f19      	cmp	r7, #25
 80195ba:	d801      	bhi.n	80195c0 <_strtol_l.constprop.0+0xb4>
 80195bc:	3c37      	subs	r4, #55	@ 0x37
 80195be:	e7de      	b.n	801957e <_strtol_l.constprop.0+0x72>
 80195c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80195c4:	2f19      	cmp	r7, #25
 80195c6:	d804      	bhi.n	80195d2 <_strtol_l.constprop.0+0xc6>
 80195c8:	3c57      	subs	r4, #87	@ 0x57
 80195ca:	e7d8      	b.n	801957e <_strtol_l.constprop.0+0x72>
 80195cc:	f04f 32ff 	mov.w	r2, #4294967295
 80195d0:	e7e1      	b.n	8019596 <_strtol_l.constprop.0+0x8a>
 80195d2:	1c53      	adds	r3, r2, #1
 80195d4:	d108      	bne.n	80195e8 <_strtol_l.constprop.0+0xdc>
 80195d6:	2322      	movs	r3, #34	@ 0x22
 80195d8:	f8ce 3000 	str.w	r3, [lr]
 80195dc:	4660      	mov	r0, ip
 80195de:	f1b8 0f00 	cmp.w	r8, #0
 80195e2:	d0a0      	beq.n	8019526 <_strtol_l.constprop.0+0x1a>
 80195e4:	1e69      	subs	r1, r5, #1
 80195e6:	e006      	b.n	80195f6 <_strtol_l.constprop.0+0xea>
 80195e8:	b106      	cbz	r6, 80195ec <_strtol_l.constprop.0+0xe0>
 80195ea:	4240      	negs	r0, r0
 80195ec:	f1b8 0f00 	cmp.w	r8, #0
 80195f0:	d099      	beq.n	8019526 <_strtol_l.constprop.0+0x1a>
 80195f2:	2a00      	cmp	r2, #0
 80195f4:	d1f6      	bne.n	80195e4 <_strtol_l.constprop.0+0xd8>
 80195f6:	f8c8 1000 	str.w	r1, [r8]
 80195fa:	e794      	b.n	8019526 <_strtol_l.constprop.0+0x1a>
 80195fc:	0801e3c1 	.word	0x0801e3c1

08019600 <strtol>:
 8019600:	4613      	mov	r3, r2
 8019602:	460a      	mov	r2, r1
 8019604:	4601      	mov	r1, r0
 8019606:	4802      	ldr	r0, [pc, #8]	@ (8019610 <strtol+0x10>)
 8019608:	6800      	ldr	r0, [r0, #0]
 801960a:	f7ff bf7f 	b.w	801950c <_strtol_l.constprop.0>
 801960e:	bf00      	nop
 8019610:	240002ac 	.word	0x240002ac

08019614 <__cvt>:
 8019614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019616:	ed2d 8b02 	vpush	{d8}
 801961a:	eeb0 8b40 	vmov.f64	d8, d0
 801961e:	b085      	sub	sp, #20
 8019620:	4617      	mov	r7, r2
 8019622:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019626:	ee18 2a90 	vmov	r2, s17
 801962a:	f025 0520 	bic.w	r5, r5, #32
 801962e:	2a00      	cmp	r2, #0
 8019630:	bfb6      	itet	lt
 8019632:	222d      	movlt	r2, #45	@ 0x2d
 8019634:	2200      	movge	r2, #0
 8019636:	eeb1 8b40 	vneglt.f64	d8, d0
 801963a:	2d46      	cmp	r5, #70	@ 0x46
 801963c:	460c      	mov	r4, r1
 801963e:	701a      	strb	r2, [r3, #0]
 8019640:	d004      	beq.n	801964c <__cvt+0x38>
 8019642:	2d45      	cmp	r5, #69	@ 0x45
 8019644:	d100      	bne.n	8019648 <__cvt+0x34>
 8019646:	3401      	adds	r4, #1
 8019648:	2102      	movs	r1, #2
 801964a:	e000      	b.n	801964e <__cvt+0x3a>
 801964c:	2103      	movs	r1, #3
 801964e:	ab03      	add	r3, sp, #12
 8019650:	9301      	str	r3, [sp, #4]
 8019652:	ab02      	add	r3, sp, #8
 8019654:	9300      	str	r3, [sp, #0]
 8019656:	4622      	mov	r2, r4
 8019658:	4633      	mov	r3, r6
 801965a:	eeb0 0b48 	vmov.f64	d0, d8
 801965e:	f000 fe73 	bl	801a348 <_dtoa_r>
 8019662:	2d47      	cmp	r5, #71	@ 0x47
 8019664:	d114      	bne.n	8019690 <__cvt+0x7c>
 8019666:	07fb      	lsls	r3, r7, #31
 8019668:	d50a      	bpl.n	8019680 <__cvt+0x6c>
 801966a:	1902      	adds	r2, r0, r4
 801966c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019674:	bf08      	it	eq
 8019676:	9203      	streq	r2, [sp, #12]
 8019678:	2130      	movs	r1, #48	@ 0x30
 801967a:	9b03      	ldr	r3, [sp, #12]
 801967c:	4293      	cmp	r3, r2
 801967e:	d319      	bcc.n	80196b4 <__cvt+0xa0>
 8019680:	9b03      	ldr	r3, [sp, #12]
 8019682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019684:	1a1b      	subs	r3, r3, r0
 8019686:	6013      	str	r3, [r2, #0]
 8019688:	b005      	add	sp, #20
 801968a:	ecbd 8b02 	vpop	{d8}
 801968e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019690:	2d46      	cmp	r5, #70	@ 0x46
 8019692:	eb00 0204 	add.w	r2, r0, r4
 8019696:	d1e9      	bne.n	801966c <__cvt+0x58>
 8019698:	7803      	ldrb	r3, [r0, #0]
 801969a:	2b30      	cmp	r3, #48	@ 0x30
 801969c:	d107      	bne.n	80196ae <__cvt+0x9a>
 801969e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80196a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196a6:	bf1c      	itt	ne
 80196a8:	f1c4 0401 	rsbne	r4, r4, #1
 80196ac:	6034      	strne	r4, [r6, #0]
 80196ae:	6833      	ldr	r3, [r6, #0]
 80196b0:	441a      	add	r2, r3
 80196b2:	e7db      	b.n	801966c <__cvt+0x58>
 80196b4:	1c5c      	adds	r4, r3, #1
 80196b6:	9403      	str	r4, [sp, #12]
 80196b8:	7019      	strb	r1, [r3, #0]
 80196ba:	e7de      	b.n	801967a <__cvt+0x66>

080196bc <__exponent>:
 80196bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196be:	2900      	cmp	r1, #0
 80196c0:	bfba      	itte	lt
 80196c2:	4249      	neglt	r1, r1
 80196c4:	232d      	movlt	r3, #45	@ 0x2d
 80196c6:	232b      	movge	r3, #43	@ 0x2b
 80196c8:	2909      	cmp	r1, #9
 80196ca:	7002      	strb	r2, [r0, #0]
 80196cc:	7043      	strb	r3, [r0, #1]
 80196ce:	dd29      	ble.n	8019724 <__exponent+0x68>
 80196d0:	f10d 0307 	add.w	r3, sp, #7
 80196d4:	461d      	mov	r5, r3
 80196d6:	270a      	movs	r7, #10
 80196d8:	461a      	mov	r2, r3
 80196da:	fbb1 f6f7 	udiv	r6, r1, r7
 80196de:	fb07 1416 	mls	r4, r7, r6, r1
 80196e2:	3430      	adds	r4, #48	@ 0x30
 80196e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80196e8:	460c      	mov	r4, r1
 80196ea:	2c63      	cmp	r4, #99	@ 0x63
 80196ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80196f0:	4631      	mov	r1, r6
 80196f2:	dcf1      	bgt.n	80196d8 <__exponent+0x1c>
 80196f4:	3130      	adds	r1, #48	@ 0x30
 80196f6:	1e94      	subs	r4, r2, #2
 80196f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80196fc:	1c41      	adds	r1, r0, #1
 80196fe:	4623      	mov	r3, r4
 8019700:	42ab      	cmp	r3, r5
 8019702:	d30a      	bcc.n	801971a <__exponent+0x5e>
 8019704:	f10d 0309 	add.w	r3, sp, #9
 8019708:	1a9b      	subs	r3, r3, r2
 801970a:	42ac      	cmp	r4, r5
 801970c:	bf88      	it	hi
 801970e:	2300      	movhi	r3, #0
 8019710:	3302      	adds	r3, #2
 8019712:	4403      	add	r3, r0
 8019714:	1a18      	subs	r0, r3, r0
 8019716:	b003      	add	sp, #12
 8019718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801971a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801971e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019722:	e7ed      	b.n	8019700 <__exponent+0x44>
 8019724:	2330      	movs	r3, #48	@ 0x30
 8019726:	3130      	adds	r1, #48	@ 0x30
 8019728:	7083      	strb	r3, [r0, #2]
 801972a:	70c1      	strb	r1, [r0, #3]
 801972c:	1d03      	adds	r3, r0, #4
 801972e:	e7f1      	b.n	8019714 <__exponent+0x58>

08019730 <_printf_float>:
 8019730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019734:	b08d      	sub	sp, #52	@ 0x34
 8019736:	460c      	mov	r4, r1
 8019738:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801973c:	4616      	mov	r6, r2
 801973e:	461f      	mov	r7, r3
 8019740:	4605      	mov	r5, r0
 8019742:	f000 fce9 	bl	801a118 <_localeconv_r>
 8019746:	f8d0 b000 	ldr.w	fp, [r0]
 801974a:	4658      	mov	r0, fp
 801974c:	f7e6 fe40 	bl	80003d0 <strlen>
 8019750:	2300      	movs	r3, #0
 8019752:	930a      	str	r3, [sp, #40]	@ 0x28
 8019754:	f8d8 3000 	ldr.w	r3, [r8]
 8019758:	f894 9018 	ldrb.w	r9, [r4, #24]
 801975c:	6822      	ldr	r2, [r4, #0]
 801975e:	9005      	str	r0, [sp, #20]
 8019760:	3307      	adds	r3, #7
 8019762:	f023 0307 	bic.w	r3, r3, #7
 8019766:	f103 0108 	add.w	r1, r3, #8
 801976a:	f8c8 1000 	str.w	r1, [r8]
 801976e:	ed93 0b00 	vldr	d0, [r3]
 8019772:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80199d0 <_printf_float+0x2a0>
 8019776:	eeb0 7bc0 	vabs.f64	d7, d0
 801977a:	eeb4 7b46 	vcmp.f64	d7, d6
 801977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019782:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019786:	dd24      	ble.n	80197d2 <_printf_float+0xa2>
 8019788:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019790:	d502      	bpl.n	8019798 <_printf_float+0x68>
 8019792:	232d      	movs	r3, #45	@ 0x2d
 8019794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019798:	498f      	ldr	r1, [pc, #572]	@ (80199d8 <_printf_float+0x2a8>)
 801979a:	4b90      	ldr	r3, [pc, #576]	@ (80199dc <_printf_float+0x2ac>)
 801979c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80197a0:	bf94      	ite	ls
 80197a2:	4688      	movls	r8, r1
 80197a4:	4698      	movhi	r8, r3
 80197a6:	f022 0204 	bic.w	r2, r2, #4
 80197aa:	2303      	movs	r3, #3
 80197ac:	6123      	str	r3, [r4, #16]
 80197ae:	6022      	str	r2, [r4, #0]
 80197b0:	f04f 0a00 	mov.w	sl, #0
 80197b4:	9700      	str	r7, [sp, #0]
 80197b6:	4633      	mov	r3, r6
 80197b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80197ba:	4621      	mov	r1, r4
 80197bc:	4628      	mov	r0, r5
 80197be:	f000 f9d1 	bl	8019b64 <_printf_common>
 80197c2:	3001      	adds	r0, #1
 80197c4:	f040 8089 	bne.w	80198da <_printf_float+0x1aa>
 80197c8:	f04f 30ff 	mov.w	r0, #4294967295
 80197cc:	b00d      	add	sp, #52	@ 0x34
 80197ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80197d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197da:	d709      	bvc.n	80197f0 <_printf_float+0xc0>
 80197dc:	ee10 3a90 	vmov	r3, s1
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	bfbc      	itt	lt
 80197e4:	232d      	movlt	r3, #45	@ 0x2d
 80197e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80197ea:	497d      	ldr	r1, [pc, #500]	@ (80199e0 <_printf_float+0x2b0>)
 80197ec:	4b7d      	ldr	r3, [pc, #500]	@ (80199e4 <_printf_float+0x2b4>)
 80197ee:	e7d5      	b.n	801979c <_printf_float+0x6c>
 80197f0:	6863      	ldr	r3, [r4, #4]
 80197f2:	1c59      	adds	r1, r3, #1
 80197f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80197f8:	d139      	bne.n	801986e <_printf_float+0x13e>
 80197fa:	2306      	movs	r3, #6
 80197fc:	6063      	str	r3, [r4, #4]
 80197fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019802:	2300      	movs	r3, #0
 8019804:	6022      	str	r2, [r4, #0]
 8019806:	9303      	str	r3, [sp, #12]
 8019808:	ab0a      	add	r3, sp, #40	@ 0x28
 801980a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801980e:	ab09      	add	r3, sp, #36	@ 0x24
 8019810:	9300      	str	r3, [sp, #0]
 8019812:	6861      	ldr	r1, [r4, #4]
 8019814:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019818:	4628      	mov	r0, r5
 801981a:	f7ff fefb 	bl	8019614 <__cvt>
 801981e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019822:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019824:	4680      	mov	r8, r0
 8019826:	d129      	bne.n	801987c <_printf_float+0x14c>
 8019828:	1cc8      	adds	r0, r1, #3
 801982a:	db02      	blt.n	8019832 <_printf_float+0x102>
 801982c:	6863      	ldr	r3, [r4, #4]
 801982e:	4299      	cmp	r1, r3
 8019830:	dd41      	ble.n	80198b6 <_printf_float+0x186>
 8019832:	f1a9 0902 	sub.w	r9, r9, #2
 8019836:	fa5f f989 	uxtb.w	r9, r9
 801983a:	3901      	subs	r1, #1
 801983c:	464a      	mov	r2, r9
 801983e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019842:	9109      	str	r1, [sp, #36]	@ 0x24
 8019844:	f7ff ff3a 	bl	80196bc <__exponent>
 8019848:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801984a:	1813      	adds	r3, r2, r0
 801984c:	2a01      	cmp	r2, #1
 801984e:	4682      	mov	sl, r0
 8019850:	6123      	str	r3, [r4, #16]
 8019852:	dc02      	bgt.n	801985a <_printf_float+0x12a>
 8019854:	6822      	ldr	r2, [r4, #0]
 8019856:	07d2      	lsls	r2, r2, #31
 8019858:	d501      	bpl.n	801985e <_printf_float+0x12e>
 801985a:	3301      	adds	r3, #1
 801985c:	6123      	str	r3, [r4, #16]
 801985e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019862:	2b00      	cmp	r3, #0
 8019864:	d0a6      	beq.n	80197b4 <_printf_float+0x84>
 8019866:	232d      	movs	r3, #45	@ 0x2d
 8019868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801986c:	e7a2      	b.n	80197b4 <_printf_float+0x84>
 801986e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019872:	d1c4      	bne.n	80197fe <_printf_float+0xce>
 8019874:	2b00      	cmp	r3, #0
 8019876:	d1c2      	bne.n	80197fe <_printf_float+0xce>
 8019878:	2301      	movs	r3, #1
 801987a:	e7bf      	b.n	80197fc <_printf_float+0xcc>
 801987c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019880:	d9db      	bls.n	801983a <_printf_float+0x10a>
 8019882:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019886:	d118      	bne.n	80198ba <_printf_float+0x18a>
 8019888:	2900      	cmp	r1, #0
 801988a:	6863      	ldr	r3, [r4, #4]
 801988c:	dd0b      	ble.n	80198a6 <_printf_float+0x176>
 801988e:	6121      	str	r1, [r4, #16]
 8019890:	b913      	cbnz	r3, 8019898 <_printf_float+0x168>
 8019892:	6822      	ldr	r2, [r4, #0]
 8019894:	07d0      	lsls	r0, r2, #31
 8019896:	d502      	bpl.n	801989e <_printf_float+0x16e>
 8019898:	3301      	adds	r3, #1
 801989a:	440b      	add	r3, r1
 801989c:	6123      	str	r3, [r4, #16]
 801989e:	65a1      	str	r1, [r4, #88]	@ 0x58
 80198a0:	f04f 0a00 	mov.w	sl, #0
 80198a4:	e7db      	b.n	801985e <_printf_float+0x12e>
 80198a6:	b913      	cbnz	r3, 80198ae <_printf_float+0x17e>
 80198a8:	6822      	ldr	r2, [r4, #0]
 80198aa:	07d2      	lsls	r2, r2, #31
 80198ac:	d501      	bpl.n	80198b2 <_printf_float+0x182>
 80198ae:	3302      	adds	r3, #2
 80198b0:	e7f4      	b.n	801989c <_printf_float+0x16c>
 80198b2:	2301      	movs	r3, #1
 80198b4:	e7f2      	b.n	801989c <_printf_float+0x16c>
 80198b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80198ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80198bc:	4299      	cmp	r1, r3
 80198be:	db05      	blt.n	80198cc <_printf_float+0x19c>
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	6121      	str	r1, [r4, #16]
 80198c4:	07d8      	lsls	r0, r3, #31
 80198c6:	d5ea      	bpl.n	801989e <_printf_float+0x16e>
 80198c8:	1c4b      	adds	r3, r1, #1
 80198ca:	e7e7      	b.n	801989c <_printf_float+0x16c>
 80198cc:	2900      	cmp	r1, #0
 80198ce:	bfd4      	ite	le
 80198d0:	f1c1 0202 	rsble	r2, r1, #2
 80198d4:	2201      	movgt	r2, #1
 80198d6:	4413      	add	r3, r2
 80198d8:	e7e0      	b.n	801989c <_printf_float+0x16c>
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	055a      	lsls	r2, r3, #21
 80198de:	d407      	bmi.n	80198f0 <_printf_float+0x1c0>
 80198e0:	6923      	ldr	r3, [r4, #16]
 80198e2:	4642      	mov	r2, r8
 80198e4:	4631      	mov	r1, r6
 80198e6:	4628      	mov	r0, r5
 80198e8:	47b8      	blx	r7
 80198ea:	3001      	adds	r0, #1
 80198ec:	d12a      	bne.n	8019944 <_printf_float+0x214>
 80198ee:	e76b      	b.n	80197c8 <_printf_float+0x98>
 80198f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80198f4:	f240 80e0 	bls.w	8019ab8 <_printf_float+0x388>
 80198f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80198fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019904:	d133      	bne.n	801996e <_printf_float+0x23e>
 8019906:	4a38      	ldr	r2, [pc, #224]	@ (80199e8 <_printf_float+0x2b8>)
 8019908:	2301      	movs	r3, #1
 801990a:	4631      	mov	r1, r6
 801990c:	4628      	mov	r0, r5
 801990e:	47b8      	blx	r7
 8019910:	3001      	adds	r0, #1
 8019912:	f43f af59 	beq.w	80197c8 <_printf_float+0x98>
 8019916:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801991a:	4543      	cmp	r3, r8
 801991c:	db02      	blt.n	8019924 <_printf_float+0x1f4>
 801991e:	6823      	ldr	r3, [r4, #0]
 8019920:	07d8      	lsls	r0, r3, #31
 8019922:	d50f      	bpl.n	8019944 <_printf_float+0x214>
 8019924:	9b05      	ldr	r3, [sp, #20]
 8019926:	465a      	mov	r2, fp
 8019928:	4631      	mov	r1, r6
 801992a:	4628      	mov	r0, r5
 801992c:	47b8      	blx	r7
 801992e:	3001      	adds	r0, #1
 8019930:	f43f af4a 	beq.w	80197c8 <_printf_float+0x98>
 8019934:	f04f 0900 	mov.w	r9, #0
 8019938:	f108 38ff 	add.w	r8, r8, #4294967295
 801993c:	f104 0a1a 	add.w	sl, r4, #26
 8019940:	45c8      	cmp	r8, r9
 8019942:	dc09      	bgt.n	8019958 <_printf_float+0x228>
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	079b      	lsls	r3, r3, #30
 8019948:	f100 8107 	bmi.w	8019b5a <_printf_float+0x42a>
 801994c:	68e0      	ldr	r0, [r4, #12]
 801994e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019950:	4298      	cmp	r0, r3
 8019952:	bfb8      	it	lt
 8019954:	4618      	movlt	r0, r3
 8019956:	e739      	b.n	80197cc <_printf_float+0x9c>
 8019958:	2301      	movs	r3, #1
 801995a:	4652      	mov	r2, sl
 801995c:	4631      	mov	r1, r6
 801995e:	4628      	mov	r0, r5
 8019960:	47b8      	blx	r7
 8019962:	3001      	adds	r0, #1
 8019964:	f43f af30 	beq.w	80197c8 <_printf_float+0x98>
 8019968:	f109 0901 	add.w	r9, r9, #1
 801996c:	e7e8      	b.n	8019940 <_printf_float+0x210>
 801996e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019970:	2b00      	cmp	r3, #0
 8019972:	dc3b      	bgt.n	80199ec <_printf_float+0x2bc>
 8019974:	4a1c      	ldr	r2, [pc, #112]	@ (80199e8 <_printf_float+0x2b8>)
 8019976:	2301      	movs	r3, #1
 8019978:	4631      	mov	r1, r6
 801997a:	4628      	mov	r0, r5
 801997c:	47b8      	blx	r7
 801997e:	3001      	adds	r0, #1
 8019980:	f43f af22 	beq.w	80197c8 <_printf_float+0x98>
 8019984:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019988:	ea59 0303 	orrs.w	r3, r9, r3
 801998c:	d102      	bne.n	8019994 <_printf_float+0x264>
 801998e:	6823      	ldr	r3, [r4, #0]
 8019990:	07d9      	lsls	r1, r3, #31
 8019992:	d5d7      	bpl.n	8019944 <_printf_float+0x214>
 8019994:	9b05      	ldr	r3, [sp, #20]
 8019996:	465a      	mov	r2, fp
 8019998:	4631      	mov	r1, r6
 801999a:	4628      	mov	r0, r5
 801999c:	47b8      	blx	r7
 801999e:	3001      	adds	r0, #1
 80199a0:	f43f af12 	beq.w	80197c8 <_printf_float+0x98>
 80199a4:	f04f 0a00 	mov.w	sl, #0
 80199a8:	f104 0b1a 	add.w	fp, r4, #26
 80199ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199ae:	425b      	negs	r3, r3
 80199b0:	4553      	cmp	r3, sl
 80199b2:	dc01      	bgt.n	80199b8 <_printf_float+0x288>
 80199b4:	464b      	mov	r3, r9
 80199b6:	e794      	b.n	80198e2 <_printf_float+0x1b2>
 80199b8:	2301      	movs	r3, #1
 80199ba:	465a      	mov	r2, fp
 80199bc:	4631      	mov	r1, r6
 80199be:	4628      	mov	r0, r5
 80199c0:	47b8      	blx	r7
 80199c2:	3001      	adds	r0, #1
 80199c4:	f43f af00 	beq.w	80197c8 <_printf_float+0x98>
 80199c8:	f10a 0a01 	add.w	sl, sl, #1
 80199cc:	e7ee      	b.n	80199ac <_printf_float+0x27c>
 80199ce:	bf00      	nop
 80199d0:	ffffffff 	.word	0xffffffff
 80199d4:	7fefffff 	.word	0x7fefffff
 80199d8:	0801e4c1 	.word	0x0801e4c1
 80199dc:	0801e4c5 	.word	0x0801e4c5
 80199e0:	0801e4c9 	.word	0x0801e4c9
 80199e4:	0801e4cd 	.word	0x0801e4cd
 80199e8:	0801e4d1 	.word	0x0801e4d1
 80199ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199f2:	4553      	cmp	r3, sl
 80199f4:	bfa8      	it	ge
 80199f6:	4653      	movge	r3, sl
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	4699      	mov	r9, r3
 80199fc:	dc37      	bgt.n	8019a6e <_printf_float+0x33e>
 80199fe:	2300      	movs	r3, #0
 8019a00:	9307      	str	r3, [sp, #28]
 8019a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a06:	f104 021a 	add.w	r2, r4, #26
 8019a0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019a0c:	9907      	ldr	r1, [sp, #28]
 8019a0e:	9306      	str	r3, [sp, #24]
 8019a10:	eba3 0309 	sub.w	r3, r3, r9
 8019a14:	428b      	cmp	r3, r1
 8019a16:	dc31      	bgt.n	8019a7c <_printf_float+0x34c>
 8019a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a1a:	459a      	cmp	sl, r3
 8019a1c:	dc3b      	bgt.n	8019a96 <_printf_float+0x366>
 8019a1e:	6823      	ldr	r3, [r4, #0]
 8019a20:	07da      	lsls	r2, r3, #31
 8019a22:	d438      	bmi.n	8019a96 <_printf_float+0x366>
 8019a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a26:	ebaa 0903 	sub.w	r9, sl, r3
 8019a2a:	9b06      	ldr	r3, [sp, #24]
 8019a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8019a30:	4599      	cmp	r9, r3
 8019a32:	bfa8      	it	ge
 8019a34:	4699      	movge	r9, r3
 8019a36:	f1b9 0f00 	cmp.w	r9, #0
 8019a3a:	dc34      	bgt.n	8019aa6 <_printf_float+0x376>
 8019a3c:	f04f 0800 	mov.w	r8, #0
 8019a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a44:	f104 0b1a 	add.w	fp, r4, #26
 8019a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a4a:	ebaa 0303 	sub.w	r3, sl, r3
 8019a4e:	eba3 0309 	sub.w	r3, r3, r9
 8019a52:	4543      	cmp	r3, r8
 8019a54:	f77f af76 	ble.w	8019944 <_printf_float+0x214>
 8019a58:	2301      	movs	r3, #1
 8019a5a:	465a      	mov	r2, fp
 8019a5c:	4631      	mov	r1, r6
 8019a5e:	4628      	mov	r0, r5
 8019a60:	47b8      	blx	r7
 8019a62:	3001      	adds	r0, #1
 8019a64:	f43f aeb0 	beq.w	80197c8 <_printf_float+0x98>
 8019a68:	f108 0801 	add.w	r8, r8, #1
 8019a6c:	e7ec      	b.n	8019a48 <_printf_float+0x318>
 8019a6e:	4642      	mov	r2, r8
 8019a70:	4631      	mov	r1, r6
 8019a72:	4628      	mov	r0, r5
 8019a74:	47b8      	blx	r7
 8019a76:	3001      	adds	r0, #1
 8019a78:	d1c1      	bne.n	80199fe <_printf_float+0x2ce>
 8019a7a:	e6a5      	b.n	80197c8 <_printf_float+0x98>
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	4631      	mov	r1, r6
 8019a80:	4628      	mov	r0, r5
 8019a82:	9206      	str	r2, [sp, #24]
 8019a84:	47b8      	blx	r7
 8019a86:	3001      	adds	r0, #1
 8019a88:	f43f ae9e 	beq.w	80197c8 <_printf_float+0x98>
 8019a8c:	9b07      	ldr	r3, [sp, #28]
 8019a8e:	9a06      	ldr	r2, [sp, #24]
 8019a90:	3301      	adds	r3, #1
 8019a92:	9307      	str	r3, [sp, #28]
 8019a94:	e7b9      	b.n	8019a0a <_printf_float+0x2da>
 8019a96:	9b05      	ldr	r3, [sp, #20]
 8019a98:	465a      	mov	r2, fp
 8019a9a:	4631      	mov	r1, r6
 8019a9c:	4628      	mov	r0, r5
 8019a9e:	47b8      	blx	r7
 8019aa0:	3001      	adds	r0, #1
 8019aa2:	d1bf      	bne.n	8019a24 <_printf_float+0x2f4>
 8019aa4:	e690      	b.n	80197c8 <_printf_float+0x98>
 8019aa6:	9a06      	ldr	r2, [sp, #24]
 8019aa8:	464b      	mov	r3, r9
 8019aaa:	4442      	add	r2, r8
 8019aac:	4631      	mov	r1, r6
 8019aae:	4628      	mov	r0, r5
 8019ab0:	47b8      	blx	r7
 8019ab2:	3001      	adds	r0, #1
 8019ab4:	d1c2      	bne.n	8019a3c <_printf_float+0x30c>
 8019ab6:	e687      	b.n	80197c8 <_printf_float+0x98>
 8019ab8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8019abc:	f1b9 0f01 	cmp.w	r9, #1
 8019ac0:	dc01      	bgt.n	8019ac6 <_printf_float+0x396>
 8019ac2:	07db      	lsls	r3, r3, #31
 8019ac4:	d536      	bpl.n	8019b34 <_printf_float+0x404>
 8019ac6:	2301      	movs	r3, #1
 8019ac8:	4642      	mov	r2, r8
 8019aca:	4631      	mov	r1, r6
 8019acc:	4628      	mov	r0, r5
 8019ace:	47b8      	blx	r7
 8019ad0:	3001      	adds	r0, #1
 8019ad2:	f43f ae79 	beq.w	80197c8 <_printf_float+0x98>
 8019ad6:	9b05      	ldr	r3, [sp, #20]
 8019ad8:	465a      	mov	r2, fp
 8019ada:	4631      	mov	r1, r6
 8019adc:	4628      	mov	r0, r5
 8019ade:	47b8      	blx	r7
 8019ae0:	3001      	adds	r0, #1
 8019ae2:	f43f ae71 	beq.w	80197c8 <_printf_float+0x98>
 8019ae6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8019aea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af2:	f109 39ff 	add.w	r9, r9, #4294967295
 8019af6:	d018      	beq.n	8019b2a <_printf_float+0x3fa>
 8019af8:	464b      	mov	r3, r9
 8019afa:	f108 0201 	add.w	r2, r8, #1
 8019afe:	4631      	mov	r1, r6
 8019b00:	4628      	mov	r0, r5
 8019b02:	47b8      	blx	r7
 8019b04:	3001      	adds	r0, #1
 8019b06:	d10c      	bne.n	8019b22 <_printf_float+0x3f2>
 8019b08:	e65e      	b.n	80197c8 <_printf_float+0x98>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	465a      	mov	r2, fp
 8019b0e:	4631      	mov	r1, r6
 8019b10:	4628      	mov	r0, r5
 8019b12:	47b8      	blx	r7
 8019b14:	3001      	adds	r0, #1
 8019b16:	f43f ae57 	beq.w	80197c8 <_printf_float+0x98>
 8019b1a:	f108 0801 	add.w	r8, r8, #1
 8019b1e:	45c8      	cmp	r8, r9
 8019b20:	dbf3      	blt.n	8019b0a <_printf_float+0x3da>
 8019b22:	4653      	mov	r3, sl
 8019b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019b28:	e6dc      	b.n	80198e4 <_printf_float+0x1b4>
 8019b2a:	f04f 0800 	mov.w	r8, #0
 8019b2e:	f104 0b1a 	add.w	fp, r4, #26
 8019b32:	e7f4      	b.n	8019b1e <_printf_float+0x3ee>
 8019b34:	2301      	movs	r3, #1
 8019b36:	4642      	mov	r2, r8
 8019b38:	e7e1      	b.n	8019afe <_printf_float+0x3ce>
 8019b3a:	2301      	movs	r3, #1
 8019b3c:	464a      	mov	r2, r9
 8019b3e:	4631      	mov	r1, r6
 8019b40:	4628      	mov	r0, r5
 8019b42:	47b8      	blx	r7
 8019b44:	3001      	adds	r0, #1
 8019b46:	f43f ae3f 	beq.w	80197c8 <_printf_float+0x98>
 8019b4a:	f108 0801 	add.w	r8, r8, #1
 8019b4e:	68e3      	ldr	r3, [r4, #12]
 8019b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019b52:	1a5b      	subs	r3, r3, r1
 8019b54:	4543      	cmp	r3, r8
 8019b56:	dcf0      	bgt.n	8019b3a <_printf_float+0x40a>
 8019b58:	e6f8      	b.n	801994c <_printf_float+0x21c>
 8019b5a:	f04f 0800 	mov.w	r8, #0
 8019b5e:	f104 0919 	add.w	r9, r4, #25
 8019b62:	e7f4      	b.n	8019b4e <_printf_float+0x41e>

08019b64 <_printf_common>:
 8019b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b68:	4616      	mov	r6, r2
 8019b6a:	4698      	mov	r8, r3
 8019b6c:	688a      	ldr	r2, [r1, #8]
 8019b6e:	690b      	ldr	r3, [r1, #16]
 8019b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019b74:	4293      	cmp	r3, r2
 8019b76:	bfb8      	it	lt
 8019b78:	4613      	movlt	r3, r2
 8019b7a:	6033      	str	r3, [r6, #0]
 8019b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b80:	4607      	mov	r7, r0
 8019b82:	460c      	mov	r4, r1
 8019b84:	b10a      	cbz	r2, 8019b8a <_printf_common+0x26>
 8019b86:	3301      	adds	r3, #1
 8019b88:	6033      	str	r3, [r6, #0]
 8019b8a:	6823      	ldr	r3, [r4, #0]
 8019b8c:	0699      	lsls	r1, r3, #26
 8019b8e:	bf42      	ittt	mi
 8019b90:	6833      	ldrmi	r3, [r6, #0]
 8019b92:	3302      	addmi	r3, #2
 8019b94:	6033      	strmi	r3, [r6, #0]
 8019b96:	6825      	ldr	r5, [r4, #0]
 8019b98:	f015 0506 	ands.w	r5, r5, #6
 8019b9c:	d106      	bne.n	8019bac <_printf_common+0x48>
 8019b9e:	f104 0a19 	add.w	sl, r4, #25
 8019ba2:	68e3      	ldr	r3, [r4, #12]
 8019ba4:	6832      	ldr	r2, [r6, #0]
 8019ba6:	1a9b      	subs	r3, r3, r2
 8019ba8:	42ab      	cmp	r3, r5
 8019baa:	dc26      	bgt.n	8019bfa <_printf_common+0x96>
 8019bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019bb0:	6822      	ldr	r2, [r4, #0]
 8019bb2:	3b00      	subs	r3, #0
 8019bb4:	bf18      	it	ne
 8019bb6:	2301      	movne	r3, #1
 8019bb8:	0692      	lsls	r2, r2, #26
 8019bba:	d42b      	bmi.n	8019c14 <_printf_common+0xb0>
 8019bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019bc0:	4641      	mov	r1, r8
 8019bc2:	4638      	mov	r0, r7
 8019bc4:	47c8      	blx	r9
 8019bc6:	3001      	adds	r0, #1
 8019bc8:	d01e      	beq.n	8019c08 <_printf_common+0xa4>
 8019bca:	6823      	ldr	r3, [r4, #0]
 8019bcc:	6922      	ldr	r2, [r4, #16]
 8019bce:	f003 0306 	and.w	r3, r3, #6
 8019bd2:	2b04      	cmp	r3, #4
 8019bd4:	bf02      	ittt	eq
 8019bd6:	68e5      	ldreq	r5, [r4, #12]
 8019bd8:	6833      	ldreq	r3, [r6, #0]
 8019bda:	1aed      	subeq	r5, r5, r3
 8019bdc:	68a3      	ldr	r3, [r4, #8]
 8019bde:	bf0c      	ite	eq
 8019be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019be4:	2500      	movne	r5, #0
 8019be6:	4293      	cmp	r3, r2
 8019be8:	bfc4      	itt	gt
 8019bea:	1a9b      	subgt	r3, r3, r2
 8019bec:	18ed      	addgt	r5, r5, r3
 8019bee:	2600      	movs	r6, #0
 8019bf0:	341a      	adds	r4, #26
 8019bf2:	42b5      	cmp	r5, r6
 8019bf4:	d11a      	bne.n	8019c2c <_printf_common+0xc8>
 8019bf6:	2000      	movs	r0, #0
 8019bf8:	e008      	b.n	8019c0c <_printf_common+0xa8>
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	4652      	mov	r2, sl
 8019bfe:	4641      	mov	r1, r8
 8019c00:	4638      	mov	r0, r7
 8019c02:	47c8      	blx	r9
 8019c04:	3001      	adds	r0, #1
 8019c06:	d103      	bne.n	8019c10 <_printf_common+0xac>
 8019c08:	f04f 30ff 	mov.w	r0, #4294967295
 8019c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c10:	3501      	adds	r5, #1
 8019c12:	e7c6      	b.n	8019ba2 <_printf_common+0x3e>
 8019c14:	18e1      	adds	r1, r4, r3
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	2030      	movs	r0, #48	@ 0x30
 8019c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019c1e:	4422      	add	r2, r4
 8019c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019c28:	3302      	adds	r3, #2
 8019c2a:	e7c7      	b.n	8019bbc <_printf_common+0x58>
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	4622      	mov	r2, r4
 8019c30:	4641      	mov	r1, r8
 8019c32:	4638      	mov	r0, r7
 8019c34:	47c8      	blx	r9
 8019c36:	3001      	adds	r0, #1
 8019c38:	d0e6      	beq.n	8019c08 <_printf_common+0xa4>
 8019c3a:	3601      	adds	r6, #1
 8019c3c:	e7d9      	b.n	8019bf2 <_printf_common+0x8e>
	...

08019c40 <_printf_i>:
 8019c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c44:	7e0f      	ldrb	r7, [r1, #24]
 8019c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019c48:	2f78      	cmp	r7, #120	@ 0x78
 8019c4a:	4691      	mov	r9, r2
 8019c4c:	4680      	mov	r8, r0
 8019c4e:	460c      	mov	r4, r1
 8019c50:	469a      	mov	sl, r3
 8019c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019c56:	d807      	bhi.n	8019c68 <_printf_i+0x28>
 8019c58:	2f62      	cmp	r7, #98	@ 0x62
 8019c5a:	d80a      	bhi.n	8019c72 <_printf_i+0x32>
 8019c5c:	2f00      	cmp	r7, #0
 8019c5e:	f000 80d2 	beq.w	8019e06 <_printf_i+0x1c6>
 8019c62:	2f58      	cmp	r7, #88	@ 0x58
 8019c64:	f000 80b9 	beq.w	8019dda <_printf_i+0x19a>
 8019c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019c70:	e03a      	b.n	8019ce8 <_printf_i+0xa8>
 8019c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019c76:	2b15      	cmp	r3, #21
 8019c78:	d8f6      	bhi.n	8019c68 <_printf_i+0x28>
 8019c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8019c80 <_printf_i+0x40>)
 8019c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c80:	08019cd9 	.word	0x08019cd9
 8019c84:	08019ced 	.word	0x08019ced
 8019c88:	08019c69 	.word	0x08019c69
 8019c8c:	08019c69 	.word	0x08019c69
 8019c90:	08019c69 	.word	0x08019c69
 8019c94:	08019c69 	.word	0x08019c69
 8019c98:	08019ced 	.word	0x08019ced
 8019c9c:	08019c69 	.word	0x08019c69
 8019ca0:	08019c69 	.word	0x08019c69
 8019ca4:	08019c69 	.word	0x08019c69
 8019ca8:	08019c69 	.word	0x08019c69
 8019cac:	08019ded 	.word	0x08019ded
 8019cb0:	08019d17 	.word	0x08019d17
 8019cb4:	08019da7 	.word	0x08019da7
 8019cb8:	08019c69 	.word	0x08019c69
 8019cbc:	08019c69 	.word	0x08019c69
 8019cc0:	08019e0f 	.word	0x08019e0f
 8019cc4:	08019c69 	.word	0x08019c69
 8019cc8:	08019d17 	.word	0x08019d17
 8019ccc:	08019c69 	.word	0x08019c69
 8019cd0:	08019c69 	.word	0x08019c69
 8019cd4:	08019daf 	.word	0x08019daf
 8019cd8:	6833      	ldr	r3, [r6, #0]
 8019cda:	1d1a      	adds	r2, r3, #4
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	6032      	str	r2, [r6, #0]
 8019ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019ce8:	2301      	movs	r3, #1
 8019cea:	e09d      	b.n	8019e28 <_printf_i+0x1e8>
 8019cec:	6833      	ldr	r3, [r6, #0]
 8019cee:	6820      	ldr	r0, [r4, #0]
 8019cf0:	1d19      	adds	r1, r3, #4
 8019cf2:	6031      	str	r1, [r6, #0]
 8019cf4:	0606      	lsls	r6, r0, #24
 8019cf6:	d501      	bpl.n	8019cfc <_printf_i+0xbc>
 8019cf8:	681d      	ldr	r5, [r3, #0]
 8019cfa:	e003      	b.n	8019d04 <_printf_i+0xc4>
 8019cfc:	0645      	lsls	r5, r0, #25
 8019cfe:	d5fb      	bpl.n	8019cf8 <_printf_i+0xb8>
 8019d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019d04:	2d00      	cmp	r5, #0
 8019d06:	da03      	bge.n	8019d10 <_printf_i+0xd0>
 8019d08:	232d      	movs	r3, #45	@ 0x2d
 8019d0a:	426d      	negs	r5, r5
 8019d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d10:	4859      	ldr	r0, [pc, #356]	@ (8019e78 <_printf_i+0x238>)
 8019d12:	230a      	movs	r3, #10
 8019d14:	e011      	b.n	8019d3a <_printf_i+0xfa>
 8019d16:	6821      	ldr	r1, [r4, #0]
 8019d18:	6833      	ldr	r3, [r6, #0]
 8019d1a:	0608      	lsls	r0, r1, #24
 8019d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019d20:	d402      	bmi.n	8019d28 <_printf_i+0xe8>
 8019d22:	0649      	lsls	r1, r1, #25
 8019d24:	bf48      	it	mi
 8019d26:	b2ad      	uxthmi	r5, r5
 8019d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8019d2a:	4853      	ldr	r0, [pc, #332]	@ (8019e78 <_printf_i+0x238>)
 8019d2c:	6033      	str	r3, [r6, #0]
 8019d2e:	bf14      	ite	ne
 8019d30:	230a      	movne	r3, #10
 8019d32:	2308      	moveq	r3, #8
 8019d34:	2100      	movs	r1, #0
 8019d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019d3a:	6866      	ldr	r6, [r4, #4]
 8019d3c:	60a6      	str	r6, [r4, #8]
 8019d3e:	2e00      	cmp	r6, #0
 8019d40:	bfa2      	ittt	ge
 8019d42:	6821      	ldrge	r1, [r4, #0]
 8019d44:	f021 0104 	bicge.w	r1, r1, #4
 8019d48:	6021      	strge	r1, [r4, #0]
 8019d4a:	b90d      	cbnz	r5, 8019d50 <_printf_i+0x110>
 8019d4c:	2e00      	cmp	r6, #0
 8019d4e:	d04b      	beq.n	8019de8 <_printf_i+0x1a8>
 8019d50:	4616      	mov	r6, r2
 8019d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8019d56:	fb03 5711 	mls	r7, r3, r1, r5
 8019d5a:	5dc7      	ldrb	r7, [r0, r7]
 8019d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d60:	462f      	mov	r7, r5
 8019d62:	42bb      	cmp	r3, r7
 8019d64:	460d      	mov	r5, r1
 8019d66:	d9f4      	bls.n	8019d52 <_printf_i+0x112>
 8019d68:	2b08      	cmp	r3, #8
 8019d6a:	d10b      	bne.n	8019d84 <_printf_i+0x144>
 8019d6c:	6823      	ldr	r3, [r4, #0]
 8019d6e:	07df      	lsls	r7, r3, #31
 8019d70:	d508      	bpl.n	8019d84 <_printf_i+0x144>
 8019d72:	6923      	ldr	r3, [r4, #16]
 8019d74:	6861      	ldr	r1, [r4, #4]
 8019d76:	4299      	cmp	r1, r3
 8019d78:	bfde      	ittt	le
 8019d7a:	2330      	movle	r3, #48	@ 0x30
 8019d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019d84:	1b92      	subs	r2, r2, r6
 8019d86:	6122      	str	r2, [r4, #16]
 8019d88:	f8cd a000 	str.w	sl, [sp]
 8019d8c:	464b      	mov	r3, r9
 8019d8e:	aa03      	add	r2, sp, #12
 8019d90:	4621      	mov	r1, r4
 8019d92:	4640      	mov	r0, r8
 8019d94:	f7ff fee6 	bl	8019b64 <_printf_common>
 8019d98:	3001      	adds	r0, #1
 8019d9a:	d14a      	bne.n	8019e32 <_printf_i+0x1f2>
 8019d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019da0:	b004      	add	sp, #16
 8019da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	f043 0320 	orr.w	r3, r3, #32
 8019dac:	6023      	str	r3, [r4, #0]
 8019dae:	4833      	ldr	r0, [pc, #204]	@ (8019e7c <_printf_i+0x23c>)
 8019db0:	2778      	movs	r7, #120	@ 0x78
 8019db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019db6:	6823      	ldr	r3, [r4, #0]
 8019db8:	6831      	ldr	r1, [r6, #0]
 8019dba:	061f      	lsls	r7, r3, #24
 8019dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8019dc0:	d402      	bmi.n	8019dc8 <_printf_i+0x188>
 8019dc2:	065f      	lsls	r7, r3, #25
 8019dc4:	bf48      	it	mi
 8019dc6:	b2ad      	uxthmi	r5, r5
 8019dc8:	6031      	str	r1, [r6, #0]
 8019dca:	07d9      	lsls	r1, r3, #31
 8019dcc:	bf44      	itt	mi
 8019dce:	f043 0320 	orrmi.w	r3, r3, #32
 8019dd2:	6023      	strmi	r3, [r4, #0]
 8019dd4:	b11d      	cbz	r5, 8019dde <_printf_i+0x19e>
 8019dd6:	2310      	movs	r3, #16
 8019dd8:	e7ac      	b.n	8019d34 <_printf_i+0xf4>
 8019dda:	4827      	ldr	r0, [pc, #156]	@ (8019e78 <_printf_i+0x238>)
 8019ddc:	e7e9      	b.n	8019db2 <_printf_i+0x172>
 8019dde:	6823      	ldr	r3, [r4, #0]
 8019de0:	f023 0320 	bic.w	r3, r3, #32
 8019de4:	6023      	str	r3, [r4, #0]
 8019de6:	e7f6      	b.n	8019dd6 <_printf_i+0x196>
 8019de8:	4616      	mov	r6, r2
 8019dea:	e7bd      	b.n	8019d68 <_printf_i+0x128>
 8019dec:	6833      	ldr	r3, [r6, #0]
 8019dee:	6825      	ldr	r5, [r4, #0]
 8019df0:	6961      	ldr	r1, [r4, #20]
 8019df2:	1d18      	adds	r0, r3, #4
 8019df4:	6030      	str	r0, [r6, #0]
 8019df6:	062e      	lsls	r6, r5, #24
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	d501      	bpl.n	8019e00 <_printf_i+0x1c0>
 8019dfc:	6019      	str	r1, [r3, #0]
 8019dfe:	e002      	b.n	8019e06 <_printf_i+0x1c6>
 8019e00:	0668      	lsls	r0, r5, #25
 8019e02:	d5fb      	bpl.n	8019dfc <_printf_i+0x1bc>
 8019e04:	8019      	strh	r1, [r3, #0]
 8019e06:	2300      	movs	r3, #0
 8019e08:	6123      	str	r3, [r4, #16]
 8019e0a:	4616      	mov	r6, r2
 8019e0c:	e7bc      	b.n	8019d88 <_printf_i+0x148>
 8019e0e:	6833      	ldr	r3, [r6, #0]
 8019e10:	1d1a      	adds	r2, r3, #4
 8019e12:	6032      	str	r2, [r6, #0]
 8019e14:	681e      	ldr	r6, [r3, #0]
 8019e16:	6862      	ldr	r2, [r4, #4]
 8019e18:	2100      	movs	r1, #0
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	f7e6 fa88 	bl	8000330 <memchr>
 8019e20:	b108      	cbz	r0, 8019e26 <_printf_i+0x1e6>
 8019e22:	1b80      	subs	r0, r0, r6
 8019e24:	6060      	str	r0, [r4, #4]
 8019e26:	6863      	ldr	r3, [r4, #4]
 8019e28:	6123      	str	r3, [r4, #16]
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e30:	e7aa      	b.n	8019d88 <_printf_i+0x148>
 8019e32:	6923      	ldr	r3, [r4, #16]
 8019e34:	4632      	mov	r2, r6
 8019e36:	4649      	mov	r1, r9
 8019e38:	4640      	mov	r0, r8
 8019e3a:	47d0      	blx	sl
 8019e3c:	3001      	adds	r0, #1
 8019e3e:	d0ad      	beq.n	8019d9c <_printf_i+0x15c>
 8019e40:	6823      	ldr	r3, [r4, #0]
 8019e42:	079b      	lsls	r3, r3, #30
 8019e44:	d413      	bmi.n	8019e6e <_printf_i+0x22e>
 8019e46:	68e0      	ldr	r0, [r4, #12]
 8019e48:	9b03      	ldr	r3, [sp, #12]
 8019e4a:	4298      	cmp	r0, r3
 8019e4c:	bfb8      	it	lt
 8019e4e:	4618      	movlt	r0, r3
 8019e50:	e7a6      	b.n	8019da0 <_printf_i+0x160>
 8019e52:	2301      	movs	r3, #1
 8019e54:	4632      	mov	r2, r6
 8019e56:	4649      	mov	r1, r9
 8019e58:	4640      	mov	r0, r8
 8019e5a:	47d0      	blx	sl
 8019e5c:	3001      	adds	r0, #1
 8019e5e:	d09d      	beq.n	8019d9c <_printf_i+0x15c>
 8019e60:	3501      	adds	r5, #1
 8019e62:	68e3      	ldr	r3, [r4, #12]
 8019e64:	9903      	ldr	r1, [sp, #12]
 8019e66:	1a5b      	subs	r3, r3, r1
 8019e68:	42ab      	cmp	r3, r5
 8019e6a:	dcf2      	bgt.n	8019e52 <_printf_i+0x212>
 8019e6c:	e7eb      	b.n	8019e46 <_printf_i+0x206>
 8019e6e:	2500      	movs	r5, #0
 8019e70:	f104 0619 	add.w	r6, r4, #25
 8019e74:	e7f5      	b.n	8019e62 <_printf_i+0x222>
 8019e76:	bf00      	nop
 8019e78:	0801e4d3 	.word	0x0801e4d3
 8019e7c:	0801e4e4 	.word	0x0801e4e4

08019e80 <std>:
 8019e80:	2300      	movs	r3, #0
 8019e82:	b510      	push	{r4, lr}
 8019e84:	4604      	mov	r4, r0
 8019e86:	e9c0 3300 	strd	r3, r3, [r0]
 8019e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e8e:	6083      	str	r3, [r0, #8]
 8019e90:	8181      	strh	r1, [r0, #12]
 8019e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8019e94:	81c2      	strh	r2, [r0, #14]
 8019e96:	6183      	str	r3, [r0, #24]
 8019e98:	4619      	mov	r1, r3
 8019e9a:	2208      	movs	r2, #8
 8019e9c:	305c      	adds	r0, #92	@ 0x5c
 8019e9e:	f000 f914 	bl	801a0ca <memset>
 8019ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8019ed8 <std+0x58>)
 8019ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8019ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8019edc <std+0x5c>)
 8019ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee0 <std+0x60>)
 8019eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019eae:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee4 <std+0x64>)
 8019eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8019eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee8 <std+0x68>)
 8019eb4:	6224      	str	r4, [r4, #32]
 8019eb6:	429c      	cmp	r4, r3
 8019eb8:	d006      	beq.n	8019ec8 <std+0x48>
 8019eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019ebe:	4294      	cmp	r4, r2
 8019ec0:	d002      	beq.n	8019ec8 <std+0x48>
 8019ec2:	33d0      	adds	r3, #208	@ 0xd0
 8019ec4:	429c      	cmp	r4, r3
 8019ec6:	d105      	bne.n	8019ed4 <std+0x54>
 8019ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ed0:	f000 b996 	b.w	801a200 <__retarget_lock_init_recursive>
 8019ed4:	bd10      	pop	{r4, pc}
 8019ed6:	bf00      	nop
 8019ed8:	0801a045 	.word	0x0801a045
 8019edc:	0801a067 	.word	0x0801a067
 8019ee0:	0801a09f 	.word	0x0801a09f
 8019ee4:	0801a0c3 	.word	0x0801a0c3
 8019ee8:	2401f7f0 	.word	0x2401f7f0

08019eec <stdio_exit_handler>:
 8019eec:	4a02      	ldr	r2, [pc, #8]	@ (8019ef8 <stdio_exit_handler+0xc>)
 8019eee:	4903      	ldr	r1, [pc, #12]	@ (8019efc <stdio_exit_handler+0x10>)
 8019ef0:	4803      	ldr	r0, [pc, #12]	@ (8019f00 <stdio_exit_handler+0x14>)
 8019ef2:	f000 b869 	b.w	8019fc8 <_fwalk_sglue>
 8019ef6:	bf00      	nop
 8019ef8:	24000134 	.word	0x24000134
 8019efc:	0801c3bd 	.word	0x0801c3bd
 8019f00:	240002b0 	.word	0x240002b0

08019f04 <cleanup_stdio>:
 8019f04:	6841      	ldr	r1, [r0, #4]
 8019f06:	4b0c      	ldr	r3, [pc, #48]	@ (8019f38 <cleanup_stdio+0x34>)
 8019f08:	4299      	cmp	r1, r3
 8019f0a:	b510      	push	{r4, lr}
 8019f0c:	4604      	mov	r4, r0
 8019f0e:	d001      	beq.n	8019f14 <cleanup_stdio+0x10>
 8019f10:	f002 fa54 	bl	801c3bc <_fflush_r>
 8019f14:	68a1      	ldr	r1, [r4, #8]
 8019f16:	4b09      	ldr	r3, [pc, #36]	@ (8019f3c <cleanup_stdio+0x38>)
 8019f18:	4299      	cmp	r1, r3
 8019f1a:	d002      	beq.n	8019f22 <cleanup_stdio+0x1e>
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f002 fa4d 	bl	801c3bc <_fflush_r>
 8019f22:	68e1      	ldr	r1, [r4, #12]
 8019f24:	4b06      	ldr	r3, [pc, #24]	@ (8019f40 <cleanup_stdio+0x3c>)
 8019f26:	4299      	cmp	r1, r3
 8019f28:	d004      	beq.n	8019f34 <cleanup_stdio+0x30>
 8019f2a:	4620      	mov	r0, r4
 8019f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f30:	f002 ba44 	b.w	801c3bc <_fflush_r>
 8019f34:	bd10      	pop	{r4, pc}
 8019f36:	bf00      	nop
 8019f38:	2401f7f0 	.word	0x2401f7f0
 8019f3c:	2401f858 	.word	0x2401f858
 8019f40:	2401f8c0 	.word	0x2401f8c0

08019f44 <global_stdio_init.part.0>:
 8019f44:	b510      	push	{r4, lr}
 8019f46:	4b0b      	ldr	r3, [pc, #44]	@ (8019f74 <global_stdio_init.part.0+0x30>)
 8019f48:	4c0b      	ldr	r4, [pc, #44]	@ (8019f78 <global_stdio_init.part.0+0x34>)
 8019f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8019f7c <global_stdio_init.part.0+0x38>)
 8019f4c:	601a      	str	r2, [r3, #0]
 8019f4e:	4620      	mov	r0, r4
 8019f50:	2200      	movs	r2, #0
 8019f52:	2104      	movs	r1, #4
 8019f54:	f7ff ff94 	bl	8019e80 <std>
 8019f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019f5c:	2201      	movs	r2, #1
 8019f5e:	2109      	movs	r1, #9
 8019f60:	f7ff ff8e 	bl	8019e80 <std>
 8019f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019f68:	2202      	movs	r2, #2
 8019f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f6e:	2112      	movs	r1, #18
 8019f70:	f7ff bf86 	b.w	8019e80 <std>
 8019f74:	2401f928 	.word	0x2401f928
 8019f78:	2401f7f0 	.word	0x2401f7f0
 8019f7c:	08019eed 	.word	0x08019eed

08019f80 <__sfp_lock_acquire>:
 8019f80:	4801      	ldr	r0, [pc, #4]	@ (8019f88 <__sfp_lock_acquire+0x8>)
 8019f82:	f000 b93e 	b.w	801a202 <__retarget_lock_acquire_recursive>
 8019f86:	bf00      	nop
 8019f88:	2401f931 	.word	0x2401f931

08019f8c <__sfp_lock_release>:
 8019f8c:	4801      	ldr	r0, [pc, #4]	@ (8019f94 <__sfp_lock_release+0x8>)
 8019f8e:	f000 b939 	b.w	801a204 <__retarget_lock_release_recursive>
 8019f92:	bf00      	nop
 8019f94:	2401f931 	.word	0x2401f931

08019f98 <__sinit>:
 8019f98:	b510      	push	{r4, lr}
 8019f9a:	4604      	mov	r4, r0
 8019f9c:	f7ff fff0 	bl	8019f80 <__sfp_lock_acquire>
 8019fa0:	6a23      	ldr	r3, [r4, #32]
 8019fa2:	b11b      	cbz	r3, 8019fac <__sinit+0x14>
 8019fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fa8:	f7ff bff0 	b.w	8019f8c <__sfp_lock_release>
 8019fac:	4b04      	ldr	r3, [pc, #16]	@ (8019fc0 <__sinit+0x28>)
 8019fae:	6223      	str	r3, [r4, #32]
 8019fb0:	4b04      	ldr	r3, [pc, #16]	@ (8019fc4 <__sinit+0x2c>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d1f5      	bne.n	8019fa4 <__sinit+0xc>
 8019fb8:	f7ff ffc4 	bl	8019f44 <global_stdio_init.part.0>
 8019fbc:	e7f2      	b.n	8019fa4 <__sinit+0xc>
 8019fbe:	bf00      	nop
 8019fc0:	08019f05 	.word	0x08019f05
 8019fc4:	2401f928 	.word	0x2401f928

08019fc8 <_fwalk_sglue>:
 8019fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fcc:	4607      	mov	r7, r0
 8019fce:	4688      	mov	r8, r1
 8019fd0:	4614      	mov	r4, r2
 8019fd2:	2600      	movs	r6, #0
 8019fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8019fdc:	d505      	bpl.n	8019fea <_fwalk_sglue+0x22>
 8019fde:	6824      	ldr	r4, [r4, #0]
 8019fe0:	2c00      	cmp	r4, #0
 8019fe2:	d1f7      	bne.n	8019fd4 <_fwalk_sglue+0xc>
 8019fe4:	4630      	mov	r0, r6
 8019fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fea:	89ab      	ldrh	r3, [r5, #12]
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d907      	bls.n	801a000 <_fwalk_sglue+0x38>
 8019ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ff4:	3301      	adds	r3, #1
 8019ff6:	d003      	beq.n	801a000 <_fwalk_sglue+0x38>
 8019ff8:	4629      	mov	r1, r5
 8019ffa:	4638      	mov	r0, r7
 8019ffc:	47c0      	blx	r8
 8019ffe:	4306      	orrs	r6, r0
 801a000:	3568      	adds	r5, #104	@ 0x68
 801a002:	e7e9      	b.n	8019fd8 <_fwalk_sglue+0x10>

0801a004 <siprintf>:
 801a004:	b40e      	push	{r1, r2, r3}
 801a006:	b500      	push	{lr}
 801a008:	b09c      	sub	sp, #112	@ 0x70
 801a00a:	ab1d      	add	r3, sp, #116	@ 0x74
 801a00c:	9002      	str	r0, [sp, #8]
 801a00e:	9006      	str	r0, [sp, #24]
 801a010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a014:	4809      	ldr	r0, [pc, #36]	@ (801a03c <siprintf+0x38>)
 801a016:	9107      	str	r1, [sp, #28]
 801a018:	9104      	str	r1, [sp, #16]
 801a01a:	4909      	ldr	r1, [pc, #36]	@ (801a040 <siprintf+0x3c>)
 801a01c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a020:	9105      	str	r1, [sp, #20]
 801a022:	6800      	ldr	r0, [r0, #0]
 801a024:	9301      	str	r3, [sp, #4]
 801a026:	a902      	add	r1, sp, #8
 801a028:	f002 f848 	bl	801c0bc <_svfiprintf_r>
 801a02c:	9b02      	ldr	r3, [sp, #8]
 801a02e:	2200      	movs	r2, #0
 801a030:	701a      	strb	r2, [r3, #0]
 801a032:	b01c      	add	sp, #112	@ 0x70
 801a034:	f85d eb04 	ldr.w	lr, [sp], #4
 801a038:	b003      	add	sp, #12
 801a03a:	4770      	bx	lr
 801a03c:	240002ac 	.word	0x240002ac
 801a040:	ffff0208 	.word	0xffff0208

0801a044 <__sread>:
 801a044:	b510      	push	{r4, lr}
 801a046:	460c      	mov	r4, r1
 801a048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a04c:	f000 f88a 	bl	801a164 <_read_r>
 801a050:	2800      	cmp	r0, #0
 801a052:	bfab      	itete	ge
 801a054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a056:	89a3      	ldrhlt	r3, [r4, #12]
 801a058:	181b      	addge	r3, r3, r0
 801a05a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a05e:	bfac      	ite	ge
 801a060:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a062:	81a3      	strhlt	r3, [r4, #12]
 801a064:	bd10      	pop	{r4, pc}

0801a066 <__swrite>:
 801a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a06a:	461f      	mov	r7, r3
 801a06c:	898b      	ldrh	r3, [r1, #12]
 801a06e:	05db      	lsls	r3, r3, #23
 801a070:	4605      	mov	r5, r0
 801a072:	460c      	mov	r4, r1
 801a074:	4616      	mov	r6, r2
 801a076:	d505      	bpl.n	801a084 <__swrite+0x1e>
 801a078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a07c:	2302      	movs	r3, #2
 801a07e:	2200      	movs	r2, #0
 801a080:	f000 f85e 	bl	801a140 <_lseek_r>
 801a084:	89a3      	ldrh	r3, [r4, #12]
 801a086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a08a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a08e:	81a3      	strh	r3, [r4, #12]
 801a090:	4632      	mov	r2, r6
 801a092:	463b      	mov	r3, r7
 801a094:	4628      	mov	r0, r5
 801a096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a09a:	f000 b875 	b.w	801a188 <_write_r>

0801a09e <__sseek>:
 801a09e:	b510      	push	{r4, lr}
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0a6:	f000 f84b 	bl	801a140 <_lseek_r>
 801a0aa:	1c43      	adds	r3, r0, #1
 801a0ac:	89a3      	ldrh	r3, [r4, #12]
 801a0ae:	bf15      	itete	ne
 801a0b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a0b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a0b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a0ba:	81a3      	strheq	r3, [r4, #12]
 801a0bc:	bf18      	it	ne
 801a0be:	81a3      	strhne	r3, [r4, #12]
 801a0c0:	bd10      	pop	{r4, pc}

0801a0c2 <__sclose>:
 801a0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0c6:	f000 b82b 	b.w	801a120 <_close_r>

0801a0ca <memset>:
 801a0ca:	4402      	add	r2, r0
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d100      	bne.n	801a0d4 <memset+0xa>
 801a0d2:	4770      	bx	lr
 801a0d4:	f803 1b01 	strb.w	r1, [r3], #1
 801a0d8:	e7f9      	b.n	801a0ce <memset+0x4>

0801a0da <strchr>:
 801a0da:	b2c9      	uxtb	r1, r1
 801a0dc:	4603      	mov	r3, r0
 801a0de:	4618      	mov	r0, r3
 801a0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0e4:	b112      	cbz	r2, 801a0ec <strchr+0x12>
 801a0e6:	428a      	cmp	r2, r1
 801a0e8:	d1f9      	bne.n	801a0de <strchr+0x4>
 801a0ea:	4770      	bx	lr
 801a0ec:	2900      	cmp	r1, #0
 801a0ee:	bf18      	it	ne
 801a0f0:	2000      	movne	r0, #0
 801a0f2:	4770      	bx	lr

0801a0f4 <strncmp>:
 801a0f4:	b510      	push	{r4, lr}
 801a0f6:	b16a      	cbz	r2, 801a114 <strncmp+0x20>
 801a0f8:	3901      	subs	r1, #1
 801a0fa:	1884      	adds	r4, r0, r2
 801a0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a100:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a104:	429a      	cmp	r2, r3
 801a106:	d103      	bne.n	801a110 <strncmp+0x1c>
 801a108:	42a0      	cmp	r0, r4
 801a10a:	d001      	beq.n	801a110 <strncmp+0x1c>
 801a10c:	2a00      	cmp	r2, #0
 801a10e:	d1f5      	bne.n	801a0fc <strncmp+0x8>
 801a110:	1ad0      	subs	r0, r2, r3
 801a112:	bd10      	pop	{r4, pc}
 801a114:	4610      	mov	r0, r2
 801a116:	e7fc      	b.n	801a112 <strncmp+0x1e>

0801a118 <_localeconv_r>:
 801a118:	4800      	ldr	r0, [pc, #0]	@ (801a11c <_localeconv_r+0x4>)
 801a11a:	4770      	bx	lr
 801a11c:	24000230 	.word	0x24000230

0801a120 <_close_r>:
 801a120:	b538      	push	{r3, r4, r5, lr}
 801a122:	4d06      	ldr	r5, [pc, #24]	@ (801a13c <_close_r+0x1c>)
 801a124:	2300      	movs	r3, #0
 801a126:	4604      	mov	r4, r0
 801a128:	4608      	mov	r0, r1
 801a12a:	602b      	str	r3, [r5, #0]
 801a12c:	f7e8 fe58 	bl	8002de0 <_close>
 801a130:	1c43      	adds	r3, r0, #1
 801a132:	d102      	bne.n	801a13a <_close_r+0x1a>
 801a134:	682b      	ldr	r3, [r5, #0]
 801a136:	b103      	cbz	r3, 801a13a <_close_r+0x1a>
 801a138:	6023      	str	r3, [r4, #0]
 801a13a:	bd38      	pop	{r3, r4, r5, pc}
 801a13c:	2401f92c 	.word	0x2401f92c

0801a140 <_lseek_r>:
 801a140:	b538      	push	{r3, r4, r5, lr}
 801a142:	4d07      	ldr	r5, [pc, #28]	@ (801a160 <_lseek_r+0x20>)
 801a144:	4604      	mov	r4, r0
 801a146:	4608      	mov	r0, r1
 801a148:	4611      	mov	r1, r2
 801a14a:	2200      	movs	r2, #0
 801a14c:	602a      	str	r2, [r5, #0]
 801a14e:	461a      	mov	r2, r3
 801a150:	f7e8 fe6d 	bl	8002e2e <_lseek>
 801a154:	1c43      	adds	r3, r0, #1
 801a156:	d102      	bne.n	801a15e <_lseek_r+0x1e>
 801a158:	682b      	ldr	r3, [r5, #0]
 801a15a:	b103      	cbz	r3, 801a15e <_lseek_r+0x1e>
 801a15c:	6023      	str	r3, [r4, #0]
 801a15e:	bd38      	pop	{r3, r4, r5, pc}
 801a160:	2401f92c 	.word	0x2401f92c

0801a164 <_read_r>:
 801a164:	b538      	push	{r3, r4, r5, lr}
 801a166:	4d07      	ldr	r5, [pc, #28]	@ (801a184 <_read_r+0x20>)
 801a168:	4604      	mov	r4, r0
 801a16a:	4608      	mov	r0, r1
 801a16c:	4611      	mov	r1, r2
 801a16e:	2200      	movs	r2, #0
 801a170:	602a      	str	r2, [r5, #0]
 801a172:	461a      	mov	r2, r3
 801a174:	f7e8 fdfb 	bl	8002d6e <_read>
 801a178:	1c43      	adds	r3, r0, #1
 801a17a:	d102      	bne.n	801a182 <_read_r+0x1e>
 801a17c:	682b      	ldr	r3, [r5, #0]
 801a17e:	b103      	cbz	r3, 801a182 <_read_r+0x1e>
 801a180:	6023      	str	r3, [r4, #0]
 801a182:	bd38      	pop	{r3, r4, r5, pc}
 801a184:	2401f92c 	.word	0x2401f92c

0801a188 <_write_r>:
 801a188:	b538      	push	{r3, r4, r5, lr}
 801a18a:	4d07      	ldr	r5, [pc, #28]	@ (801a1a8 <_write_r+0x20>)
 801a18c:	4604      	mov	r4, r0
 801a18e:	4608      	mov	r0, r1
 801a190:	4611      	mov	r1, r2
 801a192:	2200      	movs	r2, #0
 801a194:	602a      	str	r2, [r5, #0]
 801a196:	461a      	mov	r2, r3
 801a198:	f7e8 fe06 	bl	8002da8 <_write>
 801a19c:	1c43      	adds	r3, r0, #1
 801a19e:	d102      	bne.n	801a1a6 <_write_r+0x1e>
 801a1a0:	682b      	ldr	r3, [r5, #0]
 801a1a2:	b103      	cbz	r3, 801a1a6 <_write_r+0x1e>
 801a1a4:	6023      	str	r3, [r4, #0]
 801a1a6:	bd38      	pop	{r3, r4, r5, pc}
 801a1a8:	2401f92c 	.word	0x2401f92c

0801a1ac <__errno>:
 801a1ac:	4b01      	ldr	r3, [pc, #4]	@ (801a1b4 <__errno+0x8>)
 801a1ae:	6818      	ldr	r0, [r3, #0]
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop
 801a1b4:	240002ac 	.word	0x240002ac

0801a1b8 <__libc_init_array>:
 801a1b8:	b570      	push	{r4, r5, r6, lr}
 801a1ba:	4d0d      	ldr	r5, [pc, #52]	@ (801a1f0 <__libc_init_array+0x38>)
 801a1bc:	4c0d      	ldr	r4, [pc, #52]	@ (801a1f4 <__libc_init_array+0x3c>)
 801a1be:	1b64      	subs	r4, r4, r5
 801a1c0:	10a4      	asrs	r4, r4, #2
 801a1c2:	2600      	movs	r6, #0
 801a1c4:	42a6      	cmp	r6, r4
 801a1c6:	d109      	bne.n	801a1dc <__libc_init_array+0x24>
 801a1c8:	4d0b      	ldr	r5, [pc, #44]	@ (801a1f8 <__libc_init_array+0x40>)
 801a1ca:	4c0c      	ldr	r4, [pc, #48]	@ (801a1fc <__libc_init_array+0x44>)
 801a1cc:	f003 fb18 	bl	801d800 <_init>
 801a1d0:	1b64      	subs	r4, r4, r5
 801a1d2:	10a4      	asrs	r4, r4, #2
 801a1d4:	2600      	movs	r6, #0
 801a1d6:	42a6      	cmp	r6, r4
 801a1d8:	d105      	bne.n	801a1e6 <__libc_init_array+0x2e>
 801a1da:	bd70      	pop	{r4, r5, r6, pc}
 801a1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1e0:	4798      	blx	r3
 801a1e2:	3601      	adds	r6, #1
 801a1e4:	e7ee      	b.n	801a1c4 <__libc_init_array+0xc>
 801a1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1ea:	4798      	blx	r3
 801a1ec:	3601      	adds	r6, #1
 801a1ee:	e7f2      	b.n	801a1d6 <__libc_init_array+0x1e>
 801a1f0:	0801eab0 	.word	0x0801eab0
 801a1f4:	0801eab0 	.word	0x0801eab0
 801a1f8:	0801eab0 	.word	0x0801eab0
 801a1fc:	0801eab4 	.word	0x0801eab4

0801a200 <__retarget_lock_init_recursive>:
 801a200:	4770      	bx	lr

0801a202 <__retarget_lock_acquire_recursive>:
 801a202:	4770      	bx	lr

0801a204 <__retarget_lock_release_recursive>:
 801a204:	4770      	bx	lr

0801a206 <memcpy>:
 801a206:	440a      	add	r2, r1
 801a208:	4291      	cmp	r1, r2
 801a20a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a20e:	d100      	bne.n	801a212 <memcpy+0xc>
 801a210:	4770      	bx	lr
 801a212:	b510      	push	{r4, lr}
 801a214:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a218:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a21c:	4291      	cmp	r1, r2
 801a21e:	d1f9      	bne.n	801a214 <memcpy+0xe>
 801a220:	bd10      	pop	{r4, pc}
 801a222:	0000      	movs	r0, r0
 801a224:	0000      	movs	r0, r0
	...

0801a228 <nan>:
 801a228:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a230 <nan+0x8>
 801a22c:	4770      	bx	lr
 801a22e:	bf00      	nop
 801a230:	00000000 	.word	0x00000000
 801a234:	7ff80000 	.word	0x7ff80000

0801a238 <quorem>:
 801a238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23c:	6903      	ldr	r3, [r0, #16]
 801a23e:	690c      	ldr	r4, [r1, #16]
 801a240:	42a3      	cmp	r3, r4
 801a242:	4607      	mov	r7, r0
 801a244:	db7e      	blt.n	801a344 <quorem+0x10c>
 801a246:	3c01      	subs	r4, #1
 801a248:	f101 0814 	add.w	r8, r1, #20
 801a24c:	00a3      	lsls	r3, r4, #2
 801a24e:	f100 0514 	add.w	r5, r0, #20
 801a252:	9300      	str	r3, [sp, #0]
 801a254:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a258:	9301      	str	r3, [sp, #4]
 801a25a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a25e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a262:	3301      	adds	r3, #1
 801a264:	429a      	cmp	r2, r3
 801a266:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a26a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a26e:	d32e      	bcc.n	801a2ce <quorem+0x96>
 801a270:	f04f 0a00 	mov.w	sl, #0
 801a274:	46c4      	mov	ip, r8
 801a276:	46ae      	mov	lr, r5
 801a278:	46d3      	mov	fp, sl
 801a27a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a27e:	b298      	uxth	r0, r3
 801a280:	fb06 a000 	mla	r0, r6, r0, sl
 801a284:	0c02      	lsrs	r2, r0, #16
 801a286:	0c1b      	lsrs	r3, r3, #16
 801a288:	fb06 2303 	mla	r3, r6, r3, r2
 801a28c:	f8de 2000 	ldr.w	r2, [lr]
 801a290:	b280      	uxth	r0, r0
 801a292:	b292      	uxth	r2, r2
 801a294:	1a12      	subs	r2, r2, r0
 801a296:	445a      	add	r2, fp
 801a298:	f8de 0000 	ldr.w	r0, [lr]
 801a29c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a2a0:	b29b      	uxth	r3, r3
 801a2a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a2a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a2aa:	b292      	uxth	r2, r2
 801a2ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a2b0:	45e1      	cmp	r9, ip
 801a2b2:	f84e 2b04 	str.w	r2, [lr], #4
 801a2b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a2ba:	d2de      	bcs.n	801a27a <quorem+0x42>
 801a2bc:	9b00      	ldr	r3, [sp, #0]
 801a2be:	58eb      	ldr	r3, [r5, r3]
 801a2c0:	b92b      	cbnz	r3, 801a2ce <quorem+0x96>
 801a2c2:	9b01      	ldr	r3, [sp, #4]
 801a2c4:	3b04      	subs	r3, #4
 801a2c6:	429d      	cmp	r5, r3
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	d32f      	bcc.n	801a32c <quorem+0xf4>
 801a2cc:	613c      	str	r4, [r7, #16]
 801a2ce:	4638      	mov	r0, r7
 801a2d0:	f001 fca0 	bl	801bc14 <__mcmp>
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	db25      	blt.n	801a324 <quorem+0xec>
 801a2d8:	4629      	mov	r1, r5
 801a2da:	2000      	movs	r0, #0
 801a2dc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a2e0:	f8d1 c000 	ldr.w	ip, [r1]
 801a2e4:	fa1f fe82 	uxth.w	lr, r2
 801a2e8:	fa1f f38c 	uxth.w	r3, ip
 801a2ec:	eba3 030e 	sub.w	r3, r3, lr
 801a2f0:	4403      	add	r3, r0
 801a2f2:	0c12      	lsrs	r2, r2, #16
 801a2f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a2f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a2fc:	b29b      	uxth	r3, r3
 801a2fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a302:	45c1      	cmp	r9, r8
 801a304:	f841 3b04 	str.w	r3, [r1], #4
 801a308:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a30c:	d2e6      	bcs.n	801a2dc <quorem+0xa4>
 801a30e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a316:	b922      	cbnz	r2, 801a322 <quorem+0xea>
 801a318:	3b04      	subs	r3, #4
 801a31a:	429d      	cmp	r5, r3
 801a31c:	461a      	mov	r2, r3
 801a31e:	d30b      	bcc.n	801a338 <quorem+0x100>
 801a320:	613c      	str	r4, [r7, #16]
 801a322:	3601      	adds	r6, #1
 801a324:	4630      	mov	r0, r6
 801a326:	b003      	add	sp, #12
 801a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a32c:	6812      	ldr	r2, [r2, #0]
 801a32e:	3b04      	subs	r3, #4
 801a330:	2a00      	cmp	r2, #0
 801a332:	d1cb      	bne.n	801a2cc <quorem+0x94>
 801a334:	3c01      	subs	r4, #1
 801a336:	e7c6      	b.n	801a2c6 <quorem+0x8e>
 801a338:	6812      	ldr	r2, [r2, #0]
 801a33a:	3b04      	subs	r3, #4
 801a33c:	2a00      	cmp	r2, #0
 801a33e:	d1ef      	bne.n	801a320 <quorem+0xe8>
 801a340:	3c01      	subs	r4, #1
 801a342:	e7ea      	b.n	801a31a <quorem+0xe2>
 801a344:	2000      	movs	r0, #0
 801a346:	e7ee      	b.n	801a326 <quorem+0xee>

0801a348 <_dtoa_r>:
 801a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a34c:	ed2d 8b02 	vpush	{d8}
 801a350:	69c7      	ldr	r7, [r0, #28]
 801a352:	b091      	sub	sp, #68	@ 0x44
 801a354:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a358:	ec55 4b10 	vmov	r4, r5, d0
 801a35c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a35e:	9107      	str	r1, [sp, #28]
 801a360:	4681      	mov	r9, r0
 801a362:	9209      	str	r2, [sp, #36]	@ 0x24
 801a364:	930d      	str	r3, [sp, #52]	@ 0x34
 801a366:	b97f      	cbnz	r7, 801a388 <_dtoa_r+0x40>
 801a368:	2010      	movs	r0, #16
 801a36a:	f001 f8c7 	bl	801b4fc <malloc>
 801a36e:	4602      	mov	r2, r0
 801a370:	f8c9 001c 	str.w	r0, [r9, #28]
 801a374:	b920      	cbnz	r0, 801a380 <_dtoa_r+0x38>
 801a376:	4ba0      	ldr	r3, [pc, #640]	@ (801a5f8 <_dtoa_r+0x2b0>)
 801a378:	21ef      	movs	r1, #239	@ 0xef
 801a37a:	48a0      	ldr	r0, [pc, #640]	@ (801a5fc <_dtoa_r+0x2b4>)
 801a37c:	f002 f870 	bl	801c460 <__assert_func>
 801a380:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a384:	6007      	str	r7, [r0, #0]
 801a386:	60c7      	str	r7, [r0, #12]
 801a388:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a38c:	6819      	ldr	r1, [r3, #0]
 801a38e:	b159      	cbz	r1, 801a3a8 <_dtoa_r+0x60>
 801a390:	685a      	ldr	r2, [r3, #4]
 801a392:	604a      	str	r2, [r1, #4]
 801a394:	2301      	movs	r3, #1
 801a396:	4093      	lsls	r3, r2
 801a398:	608b      	str	r3, [r1, #8]
 801a39a:	4648      	mov	r0, r9
 801a39c:	f001 f9b6 	bl	801b70c <_Bfree>
 801a3a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	601a      	str	r2, [r3, #0]
 801a3a8:	1e2b      	subs	r3, r5, #0
 801a3aa:	bfbb      	ittet	lt
 801a3ac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a3b0:	9303      	strlt	r3, [sp, #12]
 801a3b2:	2300      	movge	r3, #0
 801a3b4:	2201      	movlt	r2, #1
 801a3b6:	bfac      	ite	ge
 801a3b8:	6033      	strge	r3, [r6, #0]
 801a3ba:	6032      	strlt	r2, [r6, #0]
 801a3bc:	4b90      	ldr	r3, [pc, #576]	@ (801a600 <_dtoa_r+0x2b8>)
 801a3be:	9e03      	ldr	r6, [sp, #12]
 801a3c0:	43b3      	bics	r3, r6
 801a3c2:	d110      	bne.n	801a3e6 <_dtoa_r+0x9e>
 801a3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a3ca:	6013      	str	r3, [r2, #0]
 801a3cc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801a3d0:	4323      	orrs	r3, r4
 801a3d2:	f000 84de 	beq.w	801ad92 <_dtoa_r+0xa4a>
 801a3d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3d8:	4f8a      	ldr	r7, [pc, #552]	@ (801a604 <_dtoa_r+0x2bc>)
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	f000 84e0 	beq.w	801ada0 <_dtoa_r+0xa58>
 801a3e0:	1cfb      	adds	r3, r7, #3
 801a3e2:	f000 bcdb 	b.w	801ad9c <_dtoa_r+0xa54>
 801a3e6:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a3ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3f2:	d10a      	bne.n	801a40a <_dtoa_r+0xc2>
 801a3f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	6013      	str	r3, [r2, #0]
 801a3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3fc:	b113      	cbz	r3, 801a404 <_dtoa_r+0xbc>
 801a3fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a400:	4b81      	ldr	r3, [pc, #516]	@ (801a608 <_dtoa_r+0x2c0>)
 801a402:	6013      	str	r3, [r2, #0]
 801a404:	4f81      	ldr	r7, [pc, #516]	@ (801a60c <_dtoa_r+0x2c4>)
 801a406:	f000 bccb 	b.w	801ada0 <_dtoa_r+0xa58>
 801a40a:	aa0e      	add	r2, sp, #56	@ 0x38
 801a40c:	a90f      	add	r1, sp, #60	@ 0x3c
 801a40e:	4648      	mov	r0, r9
 801a410:	eeb0 0b48 	vmov.f64	d0, d8
 801a414:	f001 fd1e 	bl	801be54 <__d2b>
 801a418:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a41c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a41e:	9001      	str	r0, [sp, #4]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d045      	beq.n	801a4b0 <_dtoa_r+0x168>
 801a424:	eeb0 7b48 	vmov.f64	d7, d8
 801a428:	ee18 1a90 	vmov	r1, s17
 801a42c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a430:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a434:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a438:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a43c:	2500      	movs	r5, #0
 801a43e:	ee07 1a90 	vmov	s15, r1
 801a442:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a446:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5e0 <_dtoa_r+0x298>
 801a44a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a44e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a5e8 <_dtoa_r+0x2a0>
 801a452:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a456:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a5f0 <_dtoa_r+0x2a8>
 801a45a:	ee07 3a90 	vmov	s15, r3
 801a45e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a462:	eeb0 7b46 	vmov.f64	d7, d6
 801a466:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a46a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a46e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a476:	ee16 8a90 	vmov	r8, s13
 801a47a:	d508      	bpl.n	801a48e <_dtoa_r+0x146>
 801a47c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a480:	eeb4 6b47 	vcmp.f64	d6, d7
 801a484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a488:	bf18      	it	ne
 801a48a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a48e:	f1b8 0f16 	cmp.w	r8, #22
 801a492:	d82b      	bhi.n	801a4ec <_dtoa_r+0x1a4>
 801a494:	495e      	ldr	r1, [pc, #376]	@ (801a610 <_dtoa_r+0x2c8>)
 801a496:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a49a:	ed91 7b00 	vldr	d7, [r1]
 801a49e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a6:	d501      	bpl.n	801a4ac <_dtoa_r+0x164>
 801a4a8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a4ac:	2100      	movs	r1, #0
 801a4ae:	e01e      	b.n	801a4ee <_dtoa_r+0x1a6>
 801a4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4b2:	4413      	add	r3, r2
 801a4b4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a4b8:	2920      	cmp	r1, #32
 801a4ba:	bfc1      	itttt	gt
 801a4bc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a4c0:	408e      	lslgt	r6, r1
 801a4c2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a4c6:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a4ca:	bfd6      	itet	le
 801a4cc:	f1c1 0120 	rsble	r1, r1, #32
 801a4d0:	4331      	orrgt	r1, r6
 801a4d2:	fa04 f101 	lslle.w	r1, r4, r1
 801a4d6:	ee07 1a90 	vmov	s15, r1
 801a4da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a4de:	3b01      	subs	r3, #1
 801a4e0:	ee17 1a90 	vmov	r1, s15
 801a4e4:	2501      	movs	r5, #1
 801a4e6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a4ea:	e7a8      	b.n	801a43e <_dtoa_r+0xf6>
 801a4ec:	2101      	movs	r1, #1
 801a4ee:	1ad2      	subs	r2, r2, r3
 801a4f0:	1e53      	subs	r3, r2, #1
 801a4f2:	9306      	str	r3, [sp, #24]
 801a4f4:	bf45      	ittet	mi
 801a4f6:	f1c2 0301 	rsbmi	r3, r2, #1
 801a4fa:	9305      	strmi	r3, [sp, #20]
 801a4fc:	2300      	movpl	r3, #0
 801a4fe:	2300      	movmi	r3, #0
 801a500:	bf4c      	ite	mi
 801a502:	9306      	strmi	r3, [sp, #24]
 801a504:	9305      	strpl	r3, [sp, #20]
 801a506:	f1b8 0f00 	cmp.w	r8, #0
 801a50a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a50c:	db18      	blt.n	801a540 <_dtoa_r+0x1f8>
 801a50e:	9b06      	ldr	r3, [sp, #24]
 801a510:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a514:	4443      	add	r3, r8
 801a516:	9306      	str	r3, [sp, #24]
 801a518:	2300      	movs	r3, #0
 801a51a:	9a07      	ldr	r2, [sp, #28]
 801a51c:	2a09      	cmp	r2, #9
 801a51e:	d849      	bhi.n	801a5b4 <_dtoa_r+0x26c>
 801a520:	2a05      	cmp	r2, #5
 801a522:	bfc4      	itt	gt
 801a524:	3a04      	subgt	r2, #4
 801a526:	9207      	strgt	r2, [sp, #28]
 801a528:	9a07      	ldr	r2, [sp, #28]
 801a52a:	f1a2 0202 	sub.w	r2, r2, #2
 801a52e:	bfcc      	ite	gt
 801a530:	2400      	movgt	r4, #0
 801a532:	2401      	movle	r4, #1
 801a534:	2a03      	cmp	r2, #3
 801a536:	d848      	bhi.n	801a5ca <_dtoa_r+0x282>
 801a538:	e8df f002 	tbb	[pc, r2]
 801a53c:	3a2c2e0b 	.word	0x3a2c2e0b
 801a540:	9b05      	ldr	r3, [sp, #20]
 801a542:	2200      	movs	r2, #0
 801a544:	eba3 0308 	sub.w	r3, r3, r8
 801a548:	9305      	str	r3, [sp, #20]
 801a54a:	920a      	str	r2, [sp, #40]	@ 0x28
 801a54c:	f1c8 0300 	rsb	r3, r8, #0
 801a550:	e7e3      	b.n	801a51a <_dtoa_r+0x1d2>
 801a552:	2200      	movs	r2, #0
 801a554:	9208      	str	r2, [sp, #32]
 801a556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a558:	2a00      	cmp	r2, #0
 801a55a:	dc39      	bgt.n	801a5d0 <_dtoa_r+0x288>
 801a55c:	f04f 0b01 	mov.w	fp, #1
 801a560:	46da      	mov	sl, fp
 801a562:	465a      	mov	r2, fp
 801a564:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a568:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a56c:	2100      	movs	r1, #0
 801a56e:	2004      	movs	r0, #4
 801a570:	f100 0614 	add.w	r6, r0, #20
 801a574:	4296      	cmp	r6, r2
 801a576:	d930      	bls.n	801a5da <_dtoa_r+0x292>
 801a578:	6079      	str	r1, [r7, #4]
 801a57a:	4648      	mov	r0, r9
 801a57c:	9304      	str	r3, [sp, #16]
 801a57e:	f001 f885 	bl	801b68c <_Balloc>
 801a582:	9b04      	ldr	r3, [sp, #16]
 801a584:	4607      	mov	r7, r0
 801a586:	2800      	cmp	r0, #0
 801a588:	d146      	bne.n	801a618 <_dtoa_r+0x2d0>
 801a58a:	4b22      	ldr	r3, [pc, #136]	@ (801a614 <_dtoa_r+0x2cc>)
 801a58c:	4602      	mov	r2, r0
 801a58e:	f240 11af 	movw	r1, #431	@ 0x1af
 801a592:	e6f2      	b.n	801a37a <_dtoa_r+0x32>
 801a594:	2201      	movs	r2, #1
 801a596:	e7dd      	b.n	801a554 <_dtoa_r+0x20c>
 801a598:	2200      	movs	r2, #0
 801a59a:	9208      	str	r2, [sp, #32]
 801a59c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a59e:	eb08 0b02 	add.w	fp, r8, r2
 801a5a2:	f10b 0a01 	add.w	sl, fp, #1
 801a5a6:	4652      	mov	r2, sl
 801a5a8:	2a01      	cmp	r2, #1
 801a5aa:	bfb8      	it	lt
 801a5ac:	2201      	movlt	r2, #1
 801a5ae:	e7db      	b.n	801a568 <_dtoa_r+0x220>
 801a5b0:	2201      	movs	r2, #1
 801a5b2:	e7f2      	b.n	801a59a <_dtoa_r+0x252>
 801a5b4:	2401      	movs	r4, #1
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a5bc:	f04f 3bff 	mov.w	fp, #4294967295
 801a5c0:	2100      	movs	r1, #0
 801a5c2:	46da      	mov	sl, fp
 801a5c4:	2212      	movs	r2, #18
 801a5c6:	9109      	str	r1, [sp, #36]	@ 0x24
 801a5c8:	e7ce      	b.n	801a568 <_dtoa_r+0x220>
 801a5ca:	2201      	movs	r2, #1
 801a5cc:	9208      	str	r2, [sp, #32]
 801a5ce:	e7f5      	b.n	801a5bc <_dtoa_r+0x274>
 801a5d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a5d4:	46da      	mov	sl, fp
 801a5d6:	465a      	mov	r2, fp
 801a5d8:	e7c6      	b.n	801a568 <_dtoa_r+0x220>
 801a5da:	3101      	adds	r1, #1
 801a5dc:	0040      	lsls	r0, r0, #1
 801a5de:	e7c7      	b.n	801a570 <_dtoa_r+0x228>
 801a5e0:	636f4361 	.word	0x636f4361
 801a5e4:	3fd287a7 	.word	0x3fd287a7
 801a5e8:	8b60c8b3 	.word	0x8b60c8b3
 801a5ec:	3fc68a28 	.word	0x3fc68a28
 801a5f0:	509f79fb 	.word	0x509f79fb
 801a5f4:	3fd34413 	.word	0x3fd34413
 801a5f8:	0801e50a 	.word	0x0801e50a
 801a5fc:	0801e521 	.word	0x0801e521
 801a600:	7ff00000 	.word	0x7ff00000
 801a604:	0801e506 	.word	0x0801e506
 801a608:	0801e4d2 	.word	0x0801e4d2
 801a60c:	0801e4d1 	.word	0x0801e4d1
 801a610:	0801e678 	.word	0x0801e678
 801a614:	0801e579 	.word	0x0801e579
 801a618:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a61c:	f1ba 0f0e 	cmp.w	sl, #14
 801a620:	6010      	str	r0, [r2, #0]
 801a622:	d86f      	bhi.n	801a704 <_dtoa_r+0x3bc>
 801a624:	2c00      	cmp	r4, #0
 801a626:	d06d      	beq.n	801a704 <_dtoa_r+0x3bc>
 801a628:	f1b8 0f00 	cmp.w	r8, #0
 801a62c:	f340 80c2 	ble.w	801a7b4 <_dtoa_r+0x46c>
 801a630:	4aca      	ldr	r2, [pc, #808]	@ (801a95c <_dtoa_r+0x614>)
 801a632:	f008 010f 	and.w	r1, r8, #15
 801a636:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a63a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a63e:	ed92 7b00 	vldr	d7, [r2]
 801a642:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a646:	f000 80a9 	beq.w	801a79c <_dtoa_r+0x454>
 801a64a:	4ac5      	ldr	r2, [pc, #788]	@ (801a960 <_dtoa_r+0x618>)
 801a64c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a650:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a654:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a658:	f001 010f 	and.w	r1, r1, #15
 801a65c:	2203      	movs	r2, #3
 801a65e:	48c0      	ldr	r0, [pc, #768]	@ (801a960 <_dtoa_r+0x618>)
 801a660:	2900      	cmp	r1, #0
 801a662:	f040 809d 	bne.w	801a7a0 <_dtoa_r+0x458>
 801a666:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a66a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a66e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a672:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a674:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a678:	2900      	cmp	r1, #0
 801a67a:	f000 80c1 	beq.w	801a800 <_dtoa_r+0x4b8>
 801a67e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a68a:	f140 80b9 	bpl.w	801a800 <_dtoa_r+0x4b8>
 801a68e:	f1ba 0f00 	cmp.w	sl, #0
 801a692:	f000 80b5 	beq.w	801a800 <_dtoa_r+0x4b8>
 801a696:	f1bb 0f00 	cmp.w	fp, #0
 801a69a:	dd31      	ble.n	801a700 <_dtoa_r+0x3b8>
 801a69c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a6a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a6a8:	f108 31ff 	add.w	r1, r8, #4294967295
 801a6ac:	9104      	str	r1, [sp, #16]
 801a6ae:	3201      	adds	r2, #1
 801a6b0:	465c      	mov	r4, fp
 801a6b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a6b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a6ba:	ee07 2a90 	vmov	s15, r2
 801a6be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a6c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a6c6:	ee15 2a90 	vmov	r2, s11
 801a6ca:	ec51 0b15 	vmov	r0, r1, d5
 801a6ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a6d2:	2c00      	cmp	r4, #0
 801a6d4:	f040 8098 	bne.w	801a808 <_dtoa_r+0x4c0>
 801a6d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a6dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a6e0:	ec41 0b17 	vmov	d7, r0, r1
 801a6e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ec:	f300 8261 	bgt.w	801abb2 <_dtoa_r+0x86a>
 801a6f0:	eeb1 7b47 	vneg.f64	d7, d7
 801a6f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6fc:	f100 80f5 	bmi.w	801a8ea <_dtoa_r+0x5a2>
 801a700:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a704:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a706:	2a00      	cmp	r2, #0
 801a708:	f2c0 812c 	blt.w	801a964 <_dtoa_r+0x61c>
 801a70c:	f1b8 0f0e 	cmp.w	r8, #14
 801a710:	f300 8128 	bgt.w	801a964 <_dtoa_r+0x61c>
 801a714:	4b91      	ldr	r3, [pc, #580]	@ (801a95c <_dtoa_r+0x614>)
 801a716:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a71a:	ed93 6b00 	vldr	d6, [r3]
 801a71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a720:	2b00      	cmp	r3, #0
 801a722:	da03      	bge.n	801a72c <_dtoa_r+0x3e4>
 801a724:	f1ba 0f00 	cmp.w	sl, #0
 801a728:	f340 80d2 	ble.w	801a8d0 <_dtoa_r+0x588>
 801a72c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a730:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a734:	463e      	mov	r6, r7
 801a736:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a73a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a73e:	ee15 3a10 	vmov	r3, s10
 801a742:	3330      	adds	r3, #48	@ 0x30
 801a744:	f806 3b01 	strb.w	r3, [r6], #1
 801a748:	1bf3      	subs	r3, r6, r7
 801a74a:	459a      	cmp	sl, r3
 801a74c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a750:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a754:	f040 80f8 	bne.w	801a948 <_dtoa_r+0x600>
 801a758:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a75c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a764:	f300 80dd 	bgt.w	801a922 <_dtoa_r+0x5da>
 801a768:	eeb4 7b46 	vcmp.f64	d7, d6
 801a76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a770:	d104      	bne.n	801a77c <_dtoa_r+0x434>
 801a772:	ee15 3a10 	vmov	r3, s10
 801a776:	07db      	lsls	r3, r3, #31
 801a778:	f100 80d3 	bmi.w	801a922 <_dtoa_r+0x5da>
 801a77c:	9901      	ldr	r1, [sp, #4]
 801a77e:	4648      	mov	r0, r9
 801a780:	f000 ffc4 	bl	801b70c <_Bfree>
 801a784:	2300      	movs	r3, #0
 801a786:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a788:	7033      	strb	r3, [r6, #0]
 801a78a:	f108 0301 	add.w	r3, r8, #1
 801a78e:	6013      	str	r3, [r2, #0]
 801a790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a792:	2b00      	cmp	r3, #0
 801a794:	f000 8304 	beq.w	801ada0 <_dtoa_r+0xa58>
 801a798:	601e      	str	r6, [r3, #0]
 801a79a:	e301      	b.n	801ada0 <_dtoa_r+0xa58>
 801a79c:	2202      	movs	r2, #2
 801a79e:	e75e      	b.n	801a65e <_dtoa_r+0x316>
 801a7a0:	07cc      	lsls	r4, r1, #31
 801a7a2:	d504      	bpl.n	801a7ae <_dtoa_r+0x466>
 801a7a4:	ed90 6b00 	vldr	d6, [r0]
 801a7a8:	3201      	adds	r2, #1
 801a7aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7ae:	1049      	asrs	r1, r1, #1
 801a7b0:	3008      	adds	r0, #8
 801a7b2:	e755      	b.n	801a660 <_dtoa_r+0x318>
 801a7b4:	d022      	beq.n	801a7fc <_dtoa_r+0x4b4>
 801a7b6:	f1c8 0100 	rsb	r1, r8, #0
 801a7ba:	4a68      	ldr	r2, [pc, #416]	@ (801a95c <_dtoa_r+0x614>)
 801a7bc:	f001 000f 	and.w	r0, r1, #15
 801a7c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a7c4:	ed92 7b00 	vldr	d7, [r2]
 801a7c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a7cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7d0:	4863      	ldr	r0, [pc, #396]	@ (801a960 <_dtoa_r+0x618>)
 801a7d2:	1109      	asrs	r1, r1, #4
 801a7d4:	2400      	movs	r4, #0
 801a7d6:	2202      	movs	r2, #2
 801a7d8:	b929      	cbnz	r1, 801a7e6 <_dtoa_r+0x49e>
 801a7da:	2c00      	cmp	r4, #0
 801a7dc:	f43f af49 	beq.w	801a672 <_dtoa_r+0x32a>
 801a7e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a7e4:	e745      	b.n	801a672 <_dtoa_r+0x32a>
 801a7e6:	07ce      	lsls	r6, r1, #31
 801a7e8:	d505      	bpl.n	801a7f6 <_dtoa_r+0x4ae>
 801a7ea:	ed90 6b00 	vldr	d6, [r0]
 801a7ee:	3201      	adds	r2, #1
 801a7f0:	2401      	movs	r4, #1
 801a7f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7f6:	1049      	asrs	r1, r1, #1
 801a7f8:	3008      	adds	r0, #8
 801a7fa:	e7ed      	b.n	801a7d8 <_dtoa_r+0x490>
 801a7fc:	2202      	movs	r2, #2
 801a7fe:	e738      	b.n	801a672 <_dtoa_r+0x32a>
 801a800:	f8cd 8010 	str.w	r8, [sp, #16]
 801a804:	4654      	mov	r4, sl
 801a806:	e754      	b.n	801a6b2 <_dtoa_r+0x36a>
 801a808:	4a54      	ldr	r2, [pc, #336]	@ (801a95c <_dtoa_r+0x614>)
 801a80a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a80e:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a812:	9a08      	ldr	r2, [sp, #32]
 801a814:	ec41 0b17 	vmov	d7, r0, r1
 801a818:	443c      	add	r4, r7
 801a81a:	b34a      	cbz	r2, 801a870 <_dtoa_r+0x528>
 801a81c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a820:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a824:	463e      	mov	r6, r7
 801a826:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a82a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a82e:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a832:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a836:	ee14 2a90 	vmov	r2, s9
 801a83a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a83e:	3230      	adds	r2, #48	@ 0x30
 801a840:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a844:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a84c:	f806 2b01 	strb.w	r2, [r6], #1
 801a850:	d438      	bmi.n	801a8c4 <_dtoa_r+0x57c>
 801a852:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a856:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a85e:	d462      	bmi.n	801a926 <_dtoa_r+0x5de>
 801a860:	42a6      	cmp	r6, r4
 801a862:	f43f af4d 	beq.w	801a700 <_dtoa_r+0x3b8>
 801a866:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a86a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a86e:	e7e0      	b.n	801a832 <_dtoa_r+0x4ea>
 801a870:	4621      	mov	r1, r4
 801a872:	463e      	mov	r6, r7
 801a874:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a878:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a87c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a880:	ee14 2a90 	vmov	r2, s9
 801a884:	3230      	adds	r2, #48	@ 0x30
 801a886:	f806 2b01 	strb.w	r2, [r6], #1
 801a88a:	42a6      	cmp	r6, r4
 801a88c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a890:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a894:	d119      	bne.n	801a8ca <_dtoa_r+0x582>
 801a896:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a89a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a89e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a6:	dc3e      	bgt.n	801a926 <_dtoa_r+0x5de>
 801a8a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a8ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b4:	f57f af24 	bpl.w	801a700 <_dtoa_r+0x3b8>
 801a8b8:	460e      	mov	r6, r1
 801a8ba:	3901      	subs	r1, #1
 801a8bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a8c0:	2b30      	cmp	r3, #48	@ 0x30
 801a8c2:	d0f9      	beq.n	801a8b8 <_dtoa_r+0x570>
 801a8c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a8c8:	e758      	b.n	801a77c <_dtoa_r+0x434>
 801a8ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8ce:	e7d5      	b.n	801a87c <_dtoa_r+0x534>
 801a8d0:	d10b      	bne.n	801a8ea <_dtoa_r+0x5a2>
 801a8d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a8d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a8da:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e6:	f2c0 8161 	blt.w	801abac <_dtoa_r+0x864>
 801a8ea:	2400      	movs	r4, #0
 801a8ec:	4625      	mov	r5, r4
 801a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8f0:	43db      	mvns	r3, r3
 801a8f2:	9304      	str	r3, [sp, #16]
 801a8f4:	463e      	mov	r6, r7
 801a8f6:	f04f 0800 	mov.w	r8, #0
 801a8fa:	4621      	mov	r1, r4
 801a8fc:	4648      	mov	r0, r9
 801a8fe:	f000 ff05 	bl	801b70c <_Bfree>
 801a902:	2d00      	cmp	r5, #0
 801a904:	d0de      	beq.n	801a8c4 <_dtoa_r+0x57c>
 801a906:	f1b8 0f00 	cmp.w	r8, #0
 801a90a:	d005      	beq.n	801a918 <_dtoa_r+0x5d0>
 801a90c:	45a8      	cmp	r8, r5
 801a90e:	d003      	beq.n	801a918 <_dtoa_r+0x5d0>
 801a910:	4641      	mov	r1, r8
 801a912:	4648      	mov	r0, r9
 801a914:	f000 fefa 	bl	801b70c <_Bfree>
 801a918:	4629      	mov	r1, r5
 801a91a:	4648      	mov	r0, r9
 801a91c:	f000 fef6 	bl	801b70c <_Bfree>
 801a920:	e7d0      	b.n	801a8c4 <_dtoa_r+0x57c>
 801a922:	f8cd 8010 	str.w	r8, [sp, #16]
 801a926:	4633      	mov	r3, r6
 801a928:	461e      	mov	r6, r3
 801a92a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a92e:	2a39      	cmp	r2, #57	@ 0x39
 801a930:	d106      	bne.n	801a940 <_dtoa_r+0x5f8>
 801a932:	429f      	cmp	r7, r3
 801a934:	d1f8      	bne.n	801a928 <_dtoa_r+0x5e0>
 801a936:	9a04      	ldr	r2, [sp, #16]
 801a938:	3201      	adds	r2, #1
 801a93a:	9204      	str	r2, [sp, #16]
 801a93c:	2230      	movs	r2, #48	@ 0x30
 801a93e:	703a      	strb	r2, [r7, #0]
 801a940:	781a      	ldrb	r2, [r3, #0]
 801a942:	3201      	adds	r2, #1
 801a944:	701a      	strb	r2, [r3, #0]
 801a946:	e7bd      	b.n	801a8c4 <_dtoa_r+0x57c>
 801a948:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a94c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a954:	f47f aeef 	bne.w	801a736 <_dtoa_r+0x3ee>
 801a958:	e710      	b.n	801a77c <_dtoa_r+0x434>
 801a95a:	bf00      	nop
 801a95c:	0801e678 	.word	0x0801e678
 801a960:	0801e650 	.word	0x0801e650
 801a964:	9908      	ldr	r1, [sp, #32]
 801a966:	2900      	cmp	r1, #0
 801a968:	f000 80e3 	beq.w	801ab32 <_dtoa_r+0x7ea>
 801a96c:	9907      	ldr	r1, [sp, #28]
 801a96e:	2901      	cmp	r1, #1
 801a970:	f300 80c8 	bgt.w	801ab04 <_dtoa_r+0x7bc>
 801a974:	2d00      	cmp	r5, #0
 801a976:	f000 80c1 	beq.w	801aafc <_dtoa_r+0x7b4>
 801a97a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a97e:	9e05      	ldr	r6, [sp, #20]
 801a980:	461c      	mov	r4, r3
 801a982:	9304      	str	r3, [sp, #16]
 801a984:	9b05      	ldr	r3, [sp, #20]
 801a986:	4413      	add	r3, r2
 801a988:	9305      	str	r3, [sp, #20]
 801a98a:	9b06      	ldr	r3, [sp, #24]
 801a98c:	2101      	movs	r1, #1
 801a98e:	4413      	add	r3, r2
 801a990:	4648      	mov	r0, r9
 801a992:	9306      	str	r3, [sp, #24]
 801a994:	f000 ffb8 	bl	801b908 <__i2b>
 801a998:	9b04      	ldr	r3, [sp, #16]
 801a99a:	4605      	mov	r5, r0
 801a99c:	b166      	cbz	r6, 801a9b8 <_dtoa_r+0x670>
 801a99e:	9a06      	ldr	r2, [sp, #24]
 801a9a0:	2a00      	cmp	r2, #0
 801a9a2:	dd09      	ble.n	801a9b8 <_dtoa_r+0x670>
 801a9a4:	42b2      	cmp	r2, r6
 801a9a6:	9905      	ldr	r1, [sp, #20]
 801a9a8:	bfa8      	it	ge
 801a9aa:	4632      	movge	r2, r6
 801a9ac:	1a89      	subs	r1, r1, r2
 801a9ae:	9105      	str	r1, [sp, #20]
 801a9b0:	9906      	ldr	r1, [sp, #24]
 801a9b2:	1ab6      	subs	r6, r6, r2
 801a9b4:	1a8a      	subs	r2, r1, r2
 801a9b6:	9206      	str	r2, [sp, #24]
 801a9b8:	b1fb      	cbz	r3, 801a9fa <_dtoa_r+0x6b2>
 801a9ba:	9a08      	ldr	r2, [sp, #32]
 801a9bc:	2a00      	cmp	r2, #0
 801a9be:	f000 80bc 	beq.w	801ab3a <_dtoa_r+0x7f2>
 801a9c2:	b19c      	cbz	r4, 801a9ec <_dtoa_r+0x6a4>
 801a9c4:	4629      	mov	r1, r5
 801a9c6:	4622      	mov	r2, r4
 801a9c8:	4648      	mov	r0, r9
 801a9ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9cc:	f001 f85c 	bl	801ba88 <__pow5mult>
 801a9d0:	9a01      	ldr	r2, [sp, #4]
 801a9d2:	4601      	mov	r1, r0
 801a9d4:	4605      	mov	r5, r0
 801a9d6:	4648      	mov	r0, r9
 801a9d8:	f000 ffac 	bl	801b934 <__multiply>
 801a9dc:	9901      	ldr	r1, [sp, #4]
 801a9de:	9004      	str	r0, [sp, #16]
 801a9e0:	4648      	mov	r0, r9
 801a9e2:	f000 fe93 	bl	801b70c <_Bfree>
 801a9e6:	9a04      	ldr	r2, [sp, #16]
 801a9e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9ea:	9201      	str	r2, [sp, #4]
 801a9ec:	1b1a      	subs	r2, r3, r4
 801a9ee:	d004      	beq.n	801a9fa <_dtoa_r+0x6b2>
 801a9f0:	9901      	ldr	r1, [sp, #4]
 801a9f2:	4648      	mov	r0, r9
 801a9f4:	f001 f848 	bl	801ba88 <__pow5mult>
 801a9f8:	9001      	str	r0, [sp, #4]
 801a9fa:	2101      	movs	r1, #1
 801a9fc:	4648      	mov	r0, r9
 801a9fe:	f000 ff83 	bl	801b908 <__i2b>
 801aa02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa04:	4604      	mov	r4, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 81d0 	beq.w	801adac <_dtoa_r+0xa64>
 801aa0c:	461a      	mov	r2, r3
 801aa0e:	4601      	mov	r1, r0
 801aa10:	4648      	mov	r0, r9
 801aa12:	f001 f839 	bl	801ba88 <__pow5mult>
 801aa16:	9b07      	ldr	r3, [sp, #28]
 801aa18:	2b01      	cmp	r3, #1
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	f300 8095 	bgt.w	801ab4a <_dtoa_r+0x802>
 801aa20:	9b02      	ldr	r3, [sp, #8]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	f040 808b 	bne.w	801ab3e <_dtoa_r+0x7f6>
 801aa28:	9b03      	ldr	r3, [sp, #12]
 801aa2a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aa2e:	2a00      	cmp	r2, #0
 801aa30:	f040 8087 	bne.w	801ab42 <_dtoa_r+0x7fa>
 801aa34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801aa38:	0d12      	lsrs	r2, r2, #20
 801aa3a:	0512      	lsls	r2, r2, #20
 801aa3c:	2a00      	cmp	r2, #0
 801aa3e:	f000 8082 	beq.w	801ab46 <_dtoa_r+0x7fe>
 801aa42:	9b05      	ldr	r3, [sp, #20]
 801aa44:	3301      	adds	r3, #1
 801aa46:	9305      	str	r3, [sp, #20]
 801aa48:	9b06      	ldr	r3, [sp, #24]
 801aa4a:	3301      	adds	r3, #1
 801aa4c:	9306      	str	r3, [sp, #24]
 801aa4e:	2301      	movs	r3, #1
 801aa50:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	f000 81af 	beq.w	801adb8 <_dtoa_r+0xa70>
 801aa5a:	6922      	ldr	r2, [r4, #16]
 801aa5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa60:	6910      	ldr	r0, [r2, #16]
 801aa62:	f000 ff05 	bl	801b870 <__hi0bits>
 801aa66:	f1c0 0020 	rsb	r0, r0, #32
 801aa6a:	9b06      	ldr	r3, [sp, #24]
 801aa6c:	4418      	add	r0, r3
 801aa6e:	f010 001f 	ands.w	r0, r0, #31
 801aa72:	d076      	beq.n	801ab62 <_dtoa_r+0x81a>
 801aa74:	f1c0 0220 	rsb	r2, r0, #32
 801aa78:	2a04      	cmp	r2, #4
 801aa7a:	dd69      	ble.n	801ab50 <_dtoa_r+0x808>
 801aa7c:	9b05      	ldr	r3, [sp, #20]
 801aa7e:	f1c0 001c 	rsb	r0, r0, #28
 801aa82:	4403      	add	r3, r0
 801aa84:	9305      	str	r3, [sp, #20]
 801aa86:	9b06      	ldr	r3, [sp, #24]
 801aa88:	4406      	add	r6, r0
 801aa8a:	4403      	add	r3, r0
 801aa8c:	9306      	str	r3, [sp, #24]
 801aa8e:	9b05      	ldr	r3, [sp, #20]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	dd05      	ble.n	801aaa0 <_dtoa_r+0x758>
 801aa94:	9901      	ldr	r1, [sp, #4]
 801aa96:	461a      	mov	r2, r3
 801aa98:	4648      	mov	r0, r9
 801aa9a:	f001 f84f 	bl	801bb3c <__lshift>
 801aa9e:	9001      	str	r0, [sp, #4]
 801aaa0:	9b06      	ldr	r3, [sp, #24]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	dd05      	ble.n	801aab2 <_dtoa_r+0x76a>
 801aaa6:	4621      	mov	r1, r4
 801aaa8:	461a      	mov	r2, r3
 801aaaa:	4648      	mov	r0, r9
 801aaac:	f001 f846 	bl	801bb3c <__lshift>
 801aab0:	4604      	mov	r4, r0
 801aab2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d056      	beq.n	801ab66 <_dtoa_r+0x81e>
 801aab8:	9801      	ldr	r0, [sp, #4]
 801aaba:	4621      	mov	r1, r4
 801aabc:	f001 f8aa 	bl	801bc14 <__mcmp>
 801aac0:	2800      	cmp	r0, #0
 801aac2:	da50      	bge.n	801ab66 <_dtoa_r+0x81e>
 801aac4:	f108 33ff 	add.w	r3, r8, #4294967295
 801aac8:	9304      	str	r3, [sp, #16]
 801aaca:	9901      	ldr	r1, [sp, #4]
 801aacc:	2300      	movs	r3, #0
 801aace:	220a      	movs	r2, #10
 801aad0:	4648      	mov	r0, r9
 801aad2:	f000 fe3d 	bl	801b750 <__multadd>
 801aad6:	9b08      	ldr	r3, [sp, #32]
 801aad8:	9001      	str	r0, [sp, #4]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	f000 816e 	beq.w	801adbc <_dtoa_r+0xa74>
 801aae0:	4629      	mov	r1, r5
 801aae2:	2300      	movs	r3, #0
 801aae4:	220a      	movs	r2, #10
 801aae6:	4648      	mov	r0, r9
 801aae8:	f000 fe32 	bl	801b750 <__multadd>
 801aaec:	f1bb 0f00 	cmp.w	fp, #0
 801aaf0:	4605      	mov	r5, r0
 801aaf2:	dc64      	bgt.n	801abbe <_dtoa_r+0x876>
 801aaf4:	9b07      	ldr	r3, [sp, #28]
 801aaf6:	2b02      	cmp	r3, #2
 801aaf8:	dc3e      	bgt.n	801ab78 <_dtoa_r+0x830>
 801aafa:	e060      	b.n	801abbe <_dtoa_r+0x876>
 801aafc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aafe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801ab02:	e73c      	b.n	801a97e <_dtoa_r+0x636>
 801ab04:	f10a 34ff 	add.w	r4, sl, #4294967295
 801ab08:	42a3      	cmp	r3, r4
 801ab0a:	bfbf      	itttt	lt
 801ab0c:	1ae2      	sublt	r2, r4, r3
 801ab0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801ab10:	189b      	addlt	r3, r3, r2
 801ab12:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801ab14:	bfae      	itee	ge
 801ab16:	1b1c      	subge	r4, r3, r4
 801ab18:	4623      	movlt	r3, r4
 801ab1a:	2400      	movlt	r4, #0
 801ab1c:	f1ba 0f00 	cmp.w	sl, #0
 801ab20:	bfb5      	itete	lt
 801ab22:	9a05      	ldrlt	r2, [sp, #20]
 801ab24:	9e05      	ldrge	r6, [sp, #20]
 801ab26:	eba2 060a 	sublt.w	r6, r2, sl
 801ab2a:	4652      	movge	r2, sl
 801ab2c:	bfb8      	it	lt
 801ab2e:	2200      	movlt	r2, #0
 801ab30:	e727      	b.n	801a982 <_dtoa_r+0x63a>
 801ab32:	9e05      	ldr	r6, [sp, #20]
 801ab34:	9d08      	ldr	r5, [sp, #32]
 801ab36:	461c      	mov	r4, r3
 801ab38:	e730      	b.n	801a99c <_dtoa_r+0x654>
 801ab3a:	461a      	mov	r2, r3
 801ab3c:	e758      	b.n	801a9f0 <_dtoa_r+0x6a8>
 801ab3e:	2300      	movs	r3, #0
 801ab40:	e786      	b.n	801aa50 <_dtoa_r+0x708>
 801ab42:	9b02      	ldr	r3, [sp, #8]
 801ab44:	e784      	b.n	801aa50 <_dtoa_r+0x708>
 801ab46:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ab48:	e783      	b.n	801aa52 <_dtoa_r+0x70a>
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ab4e:	e784      	b.n	801aa5a <_dtoa_r+0x712>
 801ab50:	d09d      	beq.n	801aa8e <_dtoa_r+0x746>
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	321c      	adds	r2, #28
 801ab56:	4413      	add	r3, r2
 801ab58:	9305      	str	r3, [sp, #20]
 801ab5a:	9b06      	ldr	r3, [sp, #24]
 801ab5c:	4416      	add	r6, r2
 801ab5e:	4413      	add	r3, r2
 801ab60:	e794      	b.n	801aa8c <_dtoa_r+0x744>
 801ab62:	4602      	mov	r2, r0
 801ab64:	e7f5      	b.n	801ab52 <_dtoa_r+0x80a>
 801ab66:	f1ba 0f00 	cmp.w	sl, #0
 801ab6a:	f8cd 8010 	str.w	r8, [sp, #16]
 801ab6e:	46d3      	mov	fp, sl
 801ab70:	dc21      	bgt.n	801abb6 <_dtoa_r+0x86e>
 801ab72:	9b07      	ldr	r3, [sp, #28]
 801ab74:	2b02      	cmp	r3, #2
 801ab76:	dd1e      	ble.n	801abb6 <_dtoa_r+0x86e>
 801ab78:	f1bb 0f00 	cmp.w	fp, #0
 801ab7c:	f47f aeb7 	bne.w	801a8ee <_dtoa_r+0x5a6>
 801ab80:	4621      	mov	r1, r4
 801ab82:	465b      	mov	r3, fp
 801ab84:	2205      	movs	r2, #5
 801ab86:	4648      	mov	r0, r9
 801ab88:	f000 fde2 	bl	801b750 <__multadd>
 801ab8c:	4601      	mov	r1, r0
 801ab8e:	4604      	mov	r4, r0
 801ab90:	9801      	ldr	r0, [sp, #4]
 801ab92:	f001 f83f 	bl	801bc14 <__mcmp>
 801ab96:	2800      	cmp	r0, #0
 801ab98:	f77f aea9 	ble.w	801a8ee <_dtoa_r+0x5a6>
 801ab9c:	463e      	mov	r6, r7
 801ab9e:	2331      	movs	r3, #49	@ 0x31
 801aba0:	f806 3b01 	strb.w	r3, [r6], #1
 801aba4:	9b04      	ldr	r3, [sp, #16]
 801aba6:	3301      	adds	r3, #1
 801aba8:	9304      	str	r3, [sp, #16]
 801abaa:	e6a4      	b.n	801a8f6 <_dtoa_r+0x5ae>
 801abac:	f8cd 8010 	str.w	r8, [sp, #16]
 801abb0:	4654      	mov	r4, sl
 801abb2:	4625      	mov	r5, r4
 801abb4:	e7f2      	b.n	801ab9c <_dtoa_r+0x854>
 801abb6:	9b08      	ldr	r3, [sp, #32]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	f000 8103 	beq.w	801adc4 <_dtoa_r+0xa7c>
 801abbe:	2e00      	cmp	r6, #0
 801abc0:	dd05      	ble.n	801abce <_dtoa_r+0x886>
 801abc2:	4629      	mov	r1, r5
 801abc4:	4632      	mov	r2, r6
 801abc6:	4648      	mov	r0, r9
 801abc8:	f000 ffb8 	bl	801bb3c <__lshift>
 801abcc:	4605      	mov	r5, r0
 801abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d058      	beq.n	801ac86 <_dtoa_r+0x93e>
 801abd4:	6869      	ldr	r1, [r5, #4]
 801abd6:	4648      	mov	r0, r9
 801abd8:	f000 fd58 	bl	801b68c <_Balloc>
 801abdc:	4606      	mov	r6, r0
 801abde:	b928      	cbnz	r0, 801abec <_dtoa_r+0x8a4>
 801abe0:	4b82      	ldr	r3, [pc, #520]	@ (801adec <_dtoa_r+0xaa4>)
 801abe2:	4602      	mov	r2, r0
 801abe4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801abe8:	f7ff bbc7 	b.w	801a37a <_dtoa_r+0x32>
 801abec:	692a      	ldr	r2, [r5, #16]
 801abee:	3202      	adds	r2, #2
 801abf0:	0092      	lsls	r2, r2, #2
 801abf2:	f105 010c 	add.w	r1, r5, #12
 801abf6:	300c      	adds	r0, #12
 801abf8:	f7ff fb05 	bl	801a206 <memcpy>
 801abfc:	2201      	movs	r2, #1
 801abfe:	4631      	mov	r1, r6
 801ac00:	4648      	mov	r0, r9
 801ac02:	f000 ff9b 	bl	801bb3c <__lshift>
 801ac06:	1c7b      	adds	r3, r7, #1
 801ac08:	9305      	str	r3, [sp, #20]
 801ac0a:	eb07 030b 	add.w	r3, r7, fp
 801ac0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac10:	9b02      	ldr	r3, [sp, #8]
 801ac12:	f003 0301 	and.w	r3, r3, #1
 801ac16:	46a8      	mov	r8, r5
 801ac18:	9308      	str	r3, [sp, #32]
 801ac1a:	4605      	mov	r5, r0
 801ac1c:	9b05      	ldr	r3, [sp, #20]
 801ac1e:	9801      	ldr	r0, [sp, #4]
 801ac20:	4621      	mov	r1, r4
 801ac22:	f103 3bff 	add.w	fp, r3, #4294967295
 801ac26:	f7ff fb07 	bl	801a238 <quorem>
 801ac2a:	4641      	mov	r1, r8
 801ac2c:	9002      	str	r0, [sp, #8]
 801ac2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801ac32:	9801      	ldr	r0, [sp, #4]
 801ac34:	f000 ffee 	bl	801bc14 <__mcmp>
 801ac38:	462a      	mov	r2, r5
 801ac3a:	9006      	str	r0, [sp, #24]
 801ac3c:	4621      	mov	r1, r4
 801ac3e:	4648      	mov	r0, r9
 801ac40:	f001 f804 	bl	801bc4c <__mdiff>
 801ac44:	68c2      	ldr	r2, [r0, #12]
 801ac46:	4606      	mov	r6, r0
 801ac48:	b9fa      	cbnz	r2, 801ac8a <_dtoa_r+0x942>
 801ac4a:	4601      	mov	r1, r0
 801ac4c:	9801      	ldr	r0, [sp, #4]
 801ac4e:	f000 ffe1 	bl	801bc14 <__mcmp>
 801ac52:	4602      	mov	r2, r0
 801ac54:	4631      	mov	r1, r6
 801ac56:	4648      	mov	r0, r9
 801ac58:	920a      	str	r2, [sp, #40]	@ 0x28
 801ac5a:	f000 fd57 	bl	801b70c <_Bfree>
 801ac5e:	9b07      	ldr	r3, [sp, #28]
 801ac60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ac62:	9e05      	ldr	r6, [sp, #20]
 801ac64:	ea43 0102 	orr.w	r1, r3, r2
 801ac68:	9b08      	ldr	r3, [sp, #32]
 801ac6a:	4319      	orrs	r1, r3
 801ac6c:	d10f      	bne.n	801ac8e <_dtoa_r+0x946>
 801ac6e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ac72:	d028      	beq.n	801acc6 <_dtoa_r+0x97e>
 801ac74:	9b06      	ldr	r3, [sp, #24]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	dd02      	ble.n	801ac80 <_dtoa_r+0x938>
 801ac7a:	9b02      	ldr	r3, [sp, #8]
 801ac7c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801ac80:	f88b a000 	strb.w	sl, [fp]
 801ac84:	e639      	b.n	801a8fa <_dtoa_r+0x5b2>
 801ac86:	4628      	mov	r0, r5
 801ac88:	e7bd      	b.n	801ac06 <_dtoa_r+0x8be>
 801ac8a:	2201      	movs	r2, #1
 801ac8c:	e7e2      	b.n	801ac54 <_dtoa_r+0x90c>
 801ac8e:	9b06      	ldr	r3, [sp, #24]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	db04      	blt.n	801ac9e <_dtoa_r+0x956>
 801ac94:	9907      	ldr	r1, [sp, #28]
 801ac96:	430b      	orrs	r3, r1
 801ac98:	9908      	ldr	r1, [sp, #32]
 801ac9a:	430b      	orrs	r3, r1
 801ac9c:	d120      	bne.n	801ace0 <_dtoa_r+0x998>
 801ac9e:	2a00      	cmp	r2, #0
 801aca0:	ddee      	ble.n	801ac80 <_dtoa_r+0x938>
 801aca2:	9901      	ldr	r1, [sp, #4]
 801aca4:	2201      	movs	r2, #1
 801aca6:	4648      	mov	r0, r9
 801aca8:	f000 ff48 	bl	801bb3c <__lshift>
 801acac:	4621      	mov	r1, r4
 801acae:	9001      	str	r0, [sp, #4]
 801acb0:	f000 ffb0 	bl	801bc14 <__mcmp>
 801acb4:	2800      	cmp	r0, #0
 801acb6:	dc03      	bgt.n	801acc0 <_dtoa_r+0x978>
 801acb8:	d1e2      	bne.n	801ac80 <_dtoa_r+0x938>
 801acba:	f01a 0f01 	tst.w	sl, #1
 801acbe:	d0df      	beq.n	801ac80 <_dtoa_r+0x938>
 801acc0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801acc4:	d1d9      	bne.n	801ac7a <_dtoa_r+0x932>
 801acc6:	2339      	movs	r3, #57	@ 0x39
 801acc8:	f88b 3000 	strb.w	r3, [fp]
 801accc:	4633      	mov	r3, r6
 801acce:	461e      	mov	r6, r3
 801acd0:	3b01      	subs	r3, #1
 801acd2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801acd6:	2a39      	cmp	r2, #57	@ 0x39
 801acd8:	d053      	beq.n	801ad82 <_dtoa_r+0xa3a>
 801acda:	3201      	adds	r2, #1
 801acdc:	701a      	strb	r2, [r3, #0]
 801acde:	e60c      	b.n	801a8fa <_dtoa_r+0x5b2>
 801ace0:	2a00      	cmp	r2, #0
 801ace2:	dd07      	ble.n	801acf4 <_dtoa_r+0x9ac>
 801ace4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801ace8:	d0ed      	beq.n	801acc6 <_dtoa_r+0x97e>
 801acea:	f10a 0301 	add.w	r3, sl, #1
 801acee:	f88b 3000 	strb.w	r3, [fp]
 801acf2:	e602      	b.n	801a8fa <_dtoa_r+0x5b2>
 801acf4:	9b05      	ldr	r3, [sp, #20]
 801acf6:	9a05      	ldr	r2, [sp, #20]
 801acf8:	f803 ac01 	strb.w	sl, [r3, #-1]
 801acfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acfe:	4293      	cmp	r3, r2
 801ad00:	d029      	beq.n	801ad56 <_dtoa_r+0xa0e>
 801ad02:	9901      	ldr	r1, [sp, #4]
 801ad04:	2300      	movs	r3, #0
 801ad06:	220a      	movs	r2, #10
 801ad08:	4648      	mov	r0, r9
 801ad0a:	f000 fd21 	bl	801b750 <__multadd>
 801ad0e:	45a8      	cmp	r8, r5
 801ad10:	9001      	str	r0, [sp, #4]
 801ad12:	f04f 0300 	mov.w	r3, #0
 801ad16:	f04f 020a 	mov.w	r2, #10
 801ad1a:	4641      	mov	r1, r8
 801ad1c:	4648      	mov	r0, r9
 801ad1e:	d107      	bne.n	801ad30 <_dtoa_r+0x9e8>
 801ad20:	f000 fd16 	bl	801b750 <__multadd>
 801ad24:	4680      	mov	r8, r0
 801ad26:	4605      	mov	r5, r0
 801ad28:	9b05      	ldr	r3, [sp, #20]
 801ad2a:	3301      	adds	r3, #1
 801ad2c:	9305      	str	r3, [sp, #20]
 801ad2e:	e775      	b.n	801ac1c <_dtoa_r+0x8d4>
 801ad30:	f000 fd0e 	bl	801b750 <__multadd>
 801ad34:	4629      	mov	r1, r5
 801ad36:	4680      	mov	r8, r0
 801ad38:	2300      	movs	r3, #0
 801ad3a:	220a      	movs	r2, #10
 801ad3c:	4648      	mov	r0, r9
 801ad3e:	f000 fd07 	bl	801b750 <__multadd>
 801ad42:	4605      	mov	r5, r0
 801ad44:	e7f0      	b.n	801ad28 <_dtoa_r+0x9e0>
 801ad46:	f1bb 0f00 	cmp.w	fp, #0
 801ad4a:	bfcc      	ite	gt
 801ad4c:	465e      	movgt	r6, fp
 801ad4e:	2601      	movle	r6, #1
 801ad50:	443e      	add	r6, r7
 801ad52:	f04f 0800 	mov.w	r8, #0
 801ad56:	9901      	ldr	r1, [sp, #4]
 801ad58:	2201      	movs	r2, #1
 801ad5a:	4648      	mov	r0, r9
 801ad5c:	f000 feee 	bl	801bb3c <__lshift>
 801ad60:	4621      	mov	r1, r4
 801ad62:	9001      	str	r0, [sp, #4]
 801ad64:	f000 ff56 	bl	801bc14 <__mcmp>
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	dcaf      	bgt.n	801accc <_dtoa_r+0x984>
 801ad6c:	d102      	bne.n	801ad74 <_dtoa_r+0xa2c>
 801ad6e:	f01a 0f01 	tst.w	sl, #1
 801ad72:	d1ab      	bne.n	801accc <_dtoa_r+0x984>
 801ad74:	4633      	mov	r3, r6
 801ad76:	461e      	mov	r6, r3
 801ad78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ad7c:	2a30      	cmp	r2, #48	@ 0x30
 801ad7e:	d0fa      	beq.n	801ad76 <_dtoa_r+0xa2e>
 801ad80:	e5bb      	b.n	801a8fa <_dtoa_r+0x5b2>
 801ad82:	429f      	cmp	r7, r3
 801ad84:	d1a3      	bne.n	801acce <_dtoa_r+0x986>
 801ad86:	9b04      	ldr	r3, [sp, #16]
 801ad88:	3301      	adds	r3, #1
 801ad8a:	9304      	str	r3, [sp, #16]
 801ad8c:	2331      	movs	r3, #49	@ 0x31
 801ad8e:	703b      	strb	r3, [r7, #0]
 801ad90:	e5b3      	b.n	801a8fa <_dtoa_r+0x5b2>
 801ad92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad94:	4f16      	ldr	r7, [pc, #88]	@ (801adf0 <_dtoa_r+0xaa8>)
 801ad96:	b11b      	cbz	r3, 801ada0 <_dtoa_r+0xa58>
 801ad98:	f107 0308 	add.w	r3, r7, #8
 801ad9c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ad9e:	6013      	str	r3, [r2, #0]
 801ada0:	4638      	mov	r0, r7
 801ada2:	b011      	add	sp, #68	@ 0x44
 801ada4:	ecbd 8b02 	vpop	{d8}
 801ada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adac:	9b07      	ldr	r3, [sp, #28]
 801adae:	2b01      	cmp	r3, #1
 801adb0:	f77f ae36 	ble.w	801aa20 <_dtoa_r+0x6d8>
 801adb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801adb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adb8:	2001      	movs	r0, #1
 801adba:	e656      	b.n	801aa6a <_dtoa_r+0x722>
 801adbc:	f1bb 0f00 	cmp.w	fp, #0
 801adc0:	f77f aed7 	ble.w	801ab72 <_dtoa_r+0x82a>
 801adc4:	463e      	mov	r6, r7
 801adc6:	9801      	ldr	r0, [sp, #4]
 801adc8:	4621      	mov	r1, r4
 801adca:	f7ff fa35 	bl	801a238 <quorem>
 801adce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801add2:	f806 ab01 	strb.w	sl, [r6], #1
 801add6:	1bf2      	subs	r2, r6, r7
 801add8:	4593      	cmp	fp, r2
 801adda:	ddb4      	ble.n	801ad46 <_dtoa_r+0x9fe>
 801addc:	9901      	ldr	r1, [sp, #4]
 801adde:	2300      	movs	r3, #0
 801ade0:	220a      	movs	r2, #10
 801ade2:	4648      	mov	r0, r9
 801ade4:	f000 fcb4 	bl	801b750 <__multadd>
 801ade8:	9001      	str	r0, [sp, #4]
 801adea:	e7ec      	b.n	801adc6 <_dtoa_r+0xa7e>
 801adec:	0801e579 	.word	0x0801e579
 801adf0:	0801e4fd 	.word	0x0801e4fd

0801adf4 <_free_r>:
 801adf4:	b538      	push	{r3, r4, r5, lr}
 801adf6:	4605      	mov	r5, r0
 801adf8:	2900      	cmp	r1, #0
 801adfa:	d041      	beq.n	801ae80 <_free_r+0x8c>
 801adfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae00:	1f0c      	subs	r4, r1, #4
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	bfb8      	it	lt
 801ae06:	18e4      	addlt	r4, r4, r3
 801ae08:	f000 fc34 	bl	801b674 <__malloc_lock>
 801ae0c:	4a1d      	ldr	r2, [pc, #116]	@ (801ae84 <_free_r+0x90>)
 801ae0e:	6813      	ldr	r3, [r2, #0]
 801ae10:	b933      	cbnz	r3, 801ae20 <_free_r+0x2c>
 801ae12:	6063      	str	r3, [r4, #4]
 801ae14:	6014      	str	r4, [r2, #0]
 801ae16:	4628      	mov	r0, r5
 801ae18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae1c:	f000 bc30 	b.w	801b680 <__malloc_unlock>
 801ae20:	42a3      	cmp	r3, r4
 801ae22:	d908      	bls.n	801ae36 <_free_r+0x42>
 801ae24:	6820      	ldr	r0, [r4, #0]
 801ae26:	1821      	adds	r1, r4, r0
 801ae28:	428b      	cmp	r3, r1
 801ae2a:	bf01      	itttt	eq
 801ae2c:	6819      	ldreq	r1, [r3, #0]
 801ae2e:	685b      	ldreq	r3, [r3, #4]
 801ae30:	1809      	addeq	r1, r1, r0
 801ae32:	6021      	streq	r1, [r4, #0]
 801ae34:	e7ed      	b.n	801ae12 <_free_r+0x1e>
 801ae36:	461a      	mov	r2, r3
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	b10b      	cbz	r3, 801ae40 <_free_r+0x4c>
 801ae3c:	42a3      	cmp	r3, r4
 801ae3e:	d9fa      	bls.n	801ae36 <_free_r+0x42>
 801ae40:	6811      	ldr	r1, [r2, #0]
 801ae42:	1850      	adds	r0, r2, r1
 801ae44:	42a0      	cmp	r0, r4
 801ae46:	d10b      	bne.n	801ae60 <_free_r+0x6c>
 801ae48:	6820      	ldr	r0, [r4, #0]
 801ae4a:	4401      	add	r1, r0
 801ae4c:	1850      	adds	r0, r2, r1
 801ae4e:	4283      	cmp	r3, r0
 801ae50:	6011      	str	r1, [r2, #0]
 801ae52:	d1e0      	bne.n	801ae16 <_free_r+0x22>
 801ae54:	6818      	ldr	r0, [r3, #0]
 801ae56:	685b      	ldr	r3, [r3, #4]
 801ae58:	6053      	str	r3, [r2, #4]
 801ae5a:	4408      	add	r0, r1
 801ae5c:	6010      	str	r0, [r2, #0]
 801ae5e:	e7da      	b.n	801ae16 <_free_r+0x22>
 801ae60:	d902      	bls.n	801ae68 <_free_r+0x74>
 801ae62:	230c      	movs	r3, #12
 801ae64:	602b      	str	r3, [r5, #0]
 801ae66:	e7d6      	b.n	801ae16 <_free_r+0x22>
 801ae68:	6820      	ldr	r0, [r4, #0]
 801ae6a:	1821      	adds	r1, r4, r0
 801ae6c:	428b      	cmp	r3, r1
 801ae6e:	bf04      	itt	eq
 801ae70:	6819      	ldreq	r1, [r3, #0]
 801ae72:	685b      	ldreq	r3, [r3, #4]
 801ae74:	6063      	str	r3, [r4, #4]
 801ae76:	bf04      	itt	eq
 801ae78:	1809      	addeq	r1, r1, r0
 801ae7a:	6021      	streq	r1, [r4, #0]
 801ae7c:	6054      	str	r4, [r2, #4]
 801ae7e:	e7ca      	b.n	801ae16 <_free_r+0x22>
 801ae80:	bd38      	pop	{r3, r4, r5, pc}
 801ae82:	bf00      	nop
 801ae84:	2401f938 	.word	0x2401f938

0801ae88 <rshift>:
 801ae88:	6903      	ldr	r3, [r0, #16]
 801ae8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ae8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae92:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ae96:	f100 0414 	add.w	r4, r0, #20
 801ae9a:	dd45      	ble.n	801af28 <rshift+0xa0>
 801ae9c:	f011 011f 	ands.w	r1, r1, #31
 801aea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801aea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801aea8:	d10c      	bne.n	801aec4 <rshift+0x3c>
 801aeaa:	f100 0710 	add.w	r7, r0, #16
 801aeae:	4629      	mov	r1, r5
 801aeb0:	42b1      	cmp	r1, r6
 801aeb2:	d334      	bcc.n	801af1e <rshift+0x96>
 801aeb4:	1a9b      	subs	r3, r3, r2
 801aeb6:	009b      	lsls	r3, r3, #2
 801aeb8:	1eea      	subs	r2, r5, #3
 801aeba:	4296      	cmp	r6, r2
 801aebc:	bf38      	it	cc
 801aebe:	2300      	movcc	r3, #0
 801aec0:	4423      	add	r3, r4
 801aec2:	e015      	b.n	801aef0 <rshift+0x68>
 801aec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801aec8:	f1c1 0820 	rsb	r8, r1, #32
 801aecc:	40cf      	lsrs	r7, r1
 801aece:	f105 0e04 	add.w	lr, r5, #4
 801aed2:	46a1      	mov	r9, r4
 801aed4:	4576      	cmp	r6, lr
 801aed6:	46f4      	mov	ip, lr
 801aed8:	d815      	bhi.n	801af06 <rshift+0x7e>
 801aeda:	1a9a      	subs	r2, r3, r2
 801aedc:	0092      	lsls	r2, r2, #2
 801aede:	3a04      	subs	r2, #4
 801aee0:	3501      	adds	r5, #1
 801aee2:	42ae      	cmp	r6, r5
 801aee4:	bf38      	it	cc
 801aee6:	2200      	movcc	r2, #0
 801aee8:	18a3      	adds	r3, r4, r2
 801aeea:	50a7      	str	r7, [r4, r2]
 801aeec:	b107      	cbz	r7, 801aef0 <rshift+0x68>
 801aeee:	3304      	adds	r3, #4
 801aef0:	1b1a      	subs	r2, r3, r4
 801aef2:	42a3      	cmp	r3, r4
 801aef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801aef8:	bf08      	it	eq
 801aefa:	2300      	moveq	r3, #0
 801aefc:	6102      	str	r2, [r0, #16]
 801aefe:	bf08      	it	eq
 801af00:	6143      	streq	r3, [r0, #20]
 801af02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af06:	f8dc c000 	ldr.w	ip, [ip]
 801af0a:	fa0c fc08 	lsl.w	ip, ip, r8
 801af0e:	ea4c 0707 	orr.w	r7, ip, r7
 801af12:	f849 7b04 	str.w	r7, [r9], #4
 801af16:	f85e 7b04 	ldr.w	r7, [lr], #4
 801af1a:	40cf      	lsrs	r7, r1
 801af1c:	e7da      	b.n	801aed4 <rshift+0x4c>
 801af1e:	f851 cb04 	ldr.w	ip, [r1], #4
 801af22:	f847 cf04 	str.w	ip, [r7, #4]!
 801af26:	e7c3      	b.n	801aeb0 <rshift+0x28>
 801af28:	4623      	mov	r3, r4
 801af2a:	e7e1      	b.n	801aef0 <rshift+0x68>

0801af2c <__hexdig_fun>:
 801af2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801af30:	2b09      	cmp	r3, #9
 801af32:	d802      	bhi.n	801af3a <__hexdig_fun+0xe>
 801af34:	3820      	subs	r0, #32
 801af36:	b2c0      	uxtb	r0, r0
 801af38:	4770      	bx	lr
 801af3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801af3e:	2b05      	cmp	r3, #5
 801af40:	d801      	bhi.n	801af46 <__hexdig_fun+0x1a>
 801af42:	3847      	subs	r0, #71	@ 0x47
 801af44:	e7f7      	b.n	801af36 <__hexdig_fun+0xa>
 801af46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801af4a:	2b05      	cmp	r3, #5
 801af4c:	d801      	bhi.n	801af52 <__hexdig_fun+0x26>
 801af4e:	3827      	subs	r0, #39	@ 0x27
 801af50:	e7f1      	b.n	801af36 <__hexdig_fun+0xa>
 801af52:	2000      	movs	r0, #0
 801af54:	4770      	bx	lr
	...

0801af58 <__gethex>:
 801af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af5c:	b085      	sub	sp, #20
 801af5e:	468a      	mov	sl, r1
 801af60:	9302      	str	r3, [sp, #8]
 801af62:	680b      	ldr	r3, [r1, #0]
 801af64:	9001      	str	r0, [sp, #4]
 801af66:	4690      	mov	r8, r2
 801af68:	1c9c      	adds	r4, r3, #2
 801af6a:	46a1      	mov	r9, r4
 801af6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 801af70:	2830      	cmp	r0, #48	@ 0x30
 801af72:	d0fa      	beq.n	801af6a <__gethex+0x12>
 801af74:	eba9 0303 	sub.w	r3, r9, r3
 801af78:	f1a3 0b02 	sub.w	fp, r3, #2
 801af7c:	f7ff ffd6 	bl	801af2c <__hexdig_fun>
 801af80:	4605      	mov	r5, r0
 801af82:	2800      	cmp	r0, #0
 801af84:	d168      	bne.n	801b058 <__gethex+0x100>
 801af86:	49a0      	ldr	r1, [pc, #640]	@ (801b208 <__gethex+0x2b0>)
 801af88:	2201      	movs	r2, #1
 801af8a:	4648      	mov	r0, r9
 801af8c:	f7ff f8b2 	bl	801a0f4 <strncmp>
 801af90:	4607      	mov	r7, r0
 801af92:	2800      	cmp	r0, #0
 801af94:	d167      	bne.n	801b066 <__gethex+0x10e>
 801af96:	f899 0001 	ldrb.w	r0, [r9, #1]
 801af9a:	4626      	mov	r6, r4
 801af9c:	f7ff ffc6 	bl	801af2c <__hexdig_fun>
 801afa0:	2800      	cmp	r0, #0
 801afa2:	d062      	beq.n	801b06a <__gethex+0x112>
 801afa4:	4623      	mov	r3, r4
 801afa6:	7818      	ldrb	r0, [r3, #0]
 801afa8:	2830      	cmp	r0, #48	@ 0x30
 801afaa:	4699      	mov	r9, r3
 801afac:	f103 0301 	add.w	r3, r3, #1
 801afb0:	d0f9      	beq.n	801afa6 <__gethex+0x4e>
 801afb2:	f7ff ffbb 	bl	801af2c <__hexdig_fun>
 801afb6:	fab0 f580 	clz	r5, r0
 801afba:	096d      	lsrs	r5, r5, #5
 801afbc:	f04f 0b01 	mov.w	fp, #1
 801afc0:	464a      	mov	r2, r9
 801afc2:	4616      	mov	r6, r2
 801afc4:	3201      	adds	r2, #1
 801afc6:	7830      	ldrb	r0, [r6, #0]
 801afc8:	f7ff ffb0 	bl	801af2c <__hexdig_fun>
 801afcc:	2800      	cmp	r0, #0
 801afce:	d1f8      	bne.n	801afc2 <__gethex+0x6a>
 801afd0:	498d      	ldr	r1, [pc, #564]	@ (801b208 <__gethex+0x2b0>)
 801afd2:	2201      	movs	r2, #1
 801afd4:	4630      	mov	r0, r6
 801afd6:	f7ff f88d 	bl	801a0f4 <strncmp>
 801afda:	2800      	cmp	r0, #0
 801afdc:	d13f      	bne.n	801b05e <__gethex+0x106>
 801afde:	b944      	cbnz	r4, 801aff2 <__gethex+0x9a>
 801afe0:	1c74      	adds	r4, r6, #1
 801afe2:	4622      	mov	r2, r4
 801afe4:	4616      	mov	r6, r2
 801afe6:	3201      	adds	r2, #1
 801afe8:	7830      	ldrb	r0, [r6, #0]
 801afea:	f7ff ff9f 	bl	801af2c <__hexdig_fun>
 801afee:	2800      	cmp	r0, #0
 801aff0:	d1f8      	bne.n	801afe4 <__gethex+0x8c>
 801aff2:	1ba4      	subs	r4, r4, r6
 801aff4:	00a7      	lsls	r7, r4, #2
 801aff6:	7833      	ldrb	r3, [r6, #0]
 801aff8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801affc:	2b50      	cmp	r3, #80	@ 0x50
 801affe:	d13e      	bne.n	801b07e <__gethex+0x126>
 801b000:	7873      	ldrb	r3, [r6, #1]
 801b002:	2b2b      	cmp	r3, #43	@ 0x2b
 801b004:	d033      	beq.n	801b06e <__gethex+0x116>
 801b006:	2b2d      	cmp	r3, #45	@ 0x2d
 801b008:	d034      	beq.n	801b074 <__gethex+0x11c>
 801b00a:	1c71      	adds	r1, r6, #1
 801b00c:	2400      	movs	r4, #0
 801b00e:	7808      	ldrb	r0, [r1, #0]
 801b010:	f7ff ff8c 	bl	801af2c <__hexdig_fun>
 801b014:	1e43      	subs	r3, r0, #1
 801b016:	b2db      	uxtb	r3, r3
 801b018:	2b18      	cmp	r3, #24
 801b01a:	d830      	bhi.n	801b07e <__gethex+0x126>
 801b01c:	f1a0 0210 	sub.w	r2, r0, #16
 801b020:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b024:	f7ff ff82 	bl	801af2c <__hexdig_fun>
 801b028:	f100 3cff 	add.w	ip, r0, #4294967295
 801b02c:	fa5f fc8c 	uxtb.w	ip, ip
 801b030:	f1bc 0f18 	cmp.w	ip, #24
 801b034:	f04f 030a 	mov.w	r3, #10
 801b038:	d91e      	bls.n	801b078 <__gethex+0x120>
 801b03a:	b104      	cbz	r4, 801b03e <__gethex+0xe6>
 801b03c:	4252      	negs	r2, r2
 801b03e:	4417      	add	r7, r2
 801b040:	f8ca 1000 	str.w	r1, [sl]
 801b044:	b1ed      	cbz	r5, 801b082 <__gethex+0x12a>
 801b046:	f1bb 0f00 	cmp.w	fp, #0
 801b04a:	bf0c      	ite	eq
 801b04c:	2506      	moveq	r5, #6
 801b04e:	2500      	movne	r5, #0
 801b050:	4628      	mov	r0, r5
 801b052:	b005      	add	sp, #20
 801b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b058:	2500      	movs	r5, #0
 801b05a:	462c      	mov	r4, r5
 801b05c:	e7b0      	b.n	801afc0 <__gethex+0x68>
 801b05e:	2c00      	cmp	r4, #0
 801b060:	d1c7      	bne.n	801aff2 <__gethex+0x9a>
 801b062:	4627      	mov	r7, r4
 801b064:	e7c7      	b.n	801aff6 <__gethex+0x9e>
 801b066:	464e      	mov	r6, r9
 801b068:	462f      	mov	r7, r5
 801b06a:	2501      	movs	r5, #1
 801b06c:	e7c3      	b.n	801aff6 <__gethex+0x9e>
 801b06e:	2400      	movs	r4, #0
 801b070:	1cb1      	adds	r1, r6, #2
 801b072:	e7cc      	b.n	801b00e <__gethex+0xb6>
 801b074:	2401      	movs	r4, #1
 801b076:	e7fb      	b.n	801b070 <__gethex+0x118>
 801b078:	fb03 0002 	mla	r0, r3, r2, r0
 801b07c:	e7ce      	b.n	801b01c <__gethex+0xc4>
 801b07e:	4631      	mov	r1, r6
 801b080:	e7de      	b.n	801b040 <__gethex+0xe8>
 801b082:	eba6 0309 	sub.w	r3, r6, r9
 801b086:	3b01      	subs	r3, #1
 801b088:	4629      	mov	r1, r5
 801b08a:	2b07      	cmp	r3, #7
 801b08c:	dc0a      	bgt.n	801b0a4 <__gethex+0x14c>
 801b08e:	9801      	ldr	r0, [sp, #4]
 801b090:	f000 fafc 	bl	801b68c <_Balloc>
 801b094:	4604      	mov	r4, r0
 801b096:	b940      	cbnz	r0, 801b0aa <__gethex+0x152>
 801b098:	4b5c      	ldr	r3, [pc, #368]	@ (801b20c <__gethex+0x2b4>)
 801b09a:	4602      	mov	r2, r0
 801b09c:	21e4      	movs	r1, #228	@ 0xe4
 801b09e:	485c      	ldr	r0, [pc, #368]	@ (801b210 <__gethex+0x2b8>)
 801b0a0:	f001 f9de 	bl	801c460 <__assert_func>
 801b0a4:	3101      	adds	r1, #1
 801b0a6:	105b      	asrs	r3, r3, #1
 801b0a8:	e7ef      	b.n	801b08a <__gethex+0x132>
 801b0aa:	f100 0a14 	add.w	sl, r0, #20
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	4655      	mov	r5, sl
 801b0b2:	469b      	mov	fp, r3
 801b0b4:	45b1      	cmp	r9, r6
 801b0b6:	d337      	bcc.n	801b128 <__gethex+0x1d0>
 801b0b8:	f845 bb04 	str.w	fp, [r5], #4
 801b0bc:	eba5 050a 	sub.w	r5, r5, sl
 801b0c0:	10ad      	asrs	r5, r5, #2
 801b0c2:	6125      	str	r5, [r4, #16]
 801b0c4:	4658      	mov	r0, fp
 801b0c6:	f000 fbd3 	bl	801b870 <__hi0bits>
 801b0ca:	016d      	lsls	r5, r5, #5
 801b0cc:	f8d8 6000 	ldr.w	r6, [r8]
 801b0d0:	1a2d      	subs	r5, r5, r0
 801b0d2:	42b5      	cmp	r5, r6
 801b0d4:	dd54      	ble.n	801b180 <__gethex+0x228>
 801b0d6:	1bad      	subs	r5, r5, r6
 801b0d8:	4629      	mov	r1, r5
 801b0da:	4620      	mov	r0, r4
 801b0dc:	f000 ff64 	bl	801bfa8 <__any_on>
 801b0e0:	4681      	mov	r9, r0
 801b0e2:	b178      	cbz	r0, 801b104 <__gethex+0x1ac>
 801b0e4:	1e6b      	subs	r3, r5, #1
 801b0e6:	1159      	asrs	r1, r3, #5
 801b0e8:	f003 021f 	and.w	r2, r3, #31
 801b0ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b0f0:	f04f 0901 	mov.w	r9, #1
 801b0f4:	fa09 f202 	lsl.w	r2, r9, r2
 801b0f8:	420a      	tst	r2, r1
 801b0fa:	d003      	beq.n	801b104 <__gethex+0x1ac>
 801b0fc:	454b      	cmp	r3, r9
 801b0fe:	dc36      	bgt.n	801b16e <__gethex+0x216>
 801b100:	f04f 0902 	mov.w	r9, #2
 801b104:	4629      	mov	r1, r5
 801b106:	4620      	mov	r0, r4
 801b108:	f7ff febe 	bl	801ae88 <rshift>
 801b10c:	442f      	add	r7, r5
 801b10e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b112:	42bb      	cmp	r3, r7
 801b114:	da42      	bge.n	801b19c <__gethex+0x244>
 801b116:	9801      	ldr	r0, [sp, #4]
 801b118:	4621      	mov	r1, r4
 801b11a:	f000 faf7 	bl	801b70c <_Bfree>
 801b11e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b120:	2300      	movs	r3, #0
 801b122:	6013      	str	r3, [r2, #0]
 801b124:	25a3      	movs	r5, #163	@ 0xa3
 801b126:	e793      	b.n	801b050 <__gethex+0xf8>
 801b128:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b12c:	2a2e      	cmp	r2, #46	@ 0x2e
 801b12e:	d012      	beq.n	801b156 <__gethex+0x1fe>
 801b130:	2b20      	cmp	r3, #32
 801b132:	d104      	bne.n	801b13e <__gethex+0x1e6>
 801b134:	f845 bb04 	str.w	fp, [r5], #4
 801b138:	f04f 0b00 	mov.w	fp, #0
 801b13c:	465b      	mov	r3, fp
 801b13e:	7830      	ldrb	r0, [r6, #0]
 801b140:	9303      	str	r3, [sp, #12]
 801b142:	f7ff fef3 	bl	801af2c <__hexdig_fun>
 801b146:	9b03      	ldr	r3, [sp, #12]
 801b148:	f000 000f 	and.w	r0, r0, #15
 801b14c:	4098      	lsls	r0, r3
 801b14e:	ea4b 0b00 	orr.w	fp, fp, r0
 801b152:	3304      	adds	r3, #4
 801b154:	e7ae      	b.n	801b0b4 <__gethex+0x15c>
 801b156:	45b1      	cmp	r9, r6
 801b158:	d8ea      	bhi.n	801b130 <__gethex+0x1d8>
 801b15a:	492b      	ldr	r1, [pc, #172]	@ (801b208 <__gethex+0x2b0>)
 801b15c:	9303      	str	r3, [sp, #12]
 801b15e:	2201      	movs	r2, #1
 801b160:	4630      	mov	r0, r6
 801b162:	f7fe ffc7 	bl	801a0f4 <strncmp>
 801b166:	9b03      	ldr	r3, [sp, #12]
 801b168:	2800      	cmp	r0, #0
 801b16a:	d1e1      	bne.n	801b130 <__gethex+0x1d8>
 801b16c:	e7a2      	b.n	801b0b4 <__gethex+0x15c>
 801b16e:	1ea9      	subs	r1, r5, #2
 801b170:	4620      	mov	r0, r4
 801b172:	f000 ff19 	bl	801bfa8 <__any_on>
 801b176:	2800      	cmp	r0, #0
 801b178:	d0c2      	beq.n	801b100 <__gethex+0x1a8>
 801b17a:	f04f 0903 	mov.w	r9, #3
 801b17e:	e7c1      	b.n	801b104 <__gethex+0x1ac>
 801b180:	da09      	bge.n	801b196 <__gethex+0x23e>
 801b182:	1b75      	subs	r5, r6, r5
 801b184:	4621      	mov	r1, r4
 801b186:	9801      	ldr	r0, [sp, #4]
 801b188:	462a      	mov	r2, r5
 801b18a:	f000 fcd7 	bl	801bb3c <__lshift>
 801b18e:	1b7f      	subs	r7, r7, r5
 801b190:	4604      	mov	r4, r0
 801b192:	f100 0a14 	add.w	sl, r0, #20
 801b196:	f04f 0900 	mov.w	r9, #0
 801b19a:	e7b8      	b.n	801b10e <__gethex+0x1b6>
 801b19c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b1a0:	42bd      	cmp	r5, r7
 801b1a2:	dd6f      	ble.n	801b284 <__gethex+0x32c>
 801b1a4:	1bed      	subs	r5, r5, r7
 801b1a6:	42ae      	cmp	r6, r5
 801b1a8:	dc34      	bgt.n	801b214 <__gethex+0x2bc>
 801b1aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b1ae:	2b02      	cmp	r3, #2
 801b1b0:	d022      	beq.n	801b1f8 <__gethex+0x2a0>
 801b1b2:	2b03      	cmp	r3, #3
 801b1b4:	d024      	beq.n	801b200 <__gethex+0x2a8>
 801b1b6:	2b01      	cmp	r3, #1
 801b1b8:	d115      	bne.n	801b1e6 <__gethex+0x28e>
 801b1ba:	42ae      	cmp	r6, r5
 801b1bc:	d113      	bne.n	801b1e6 <__gethex+0x28e>
 801b1be:	2e01      	cmp	r6, #1
 801b1c0:	d10b      	bne.n	801b1da <__gethex+0x282>
 801b1c2:	9a02      	ldr	r2, [sp, #8]
 801b1c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b1c8:	6013      	str	r3, [r2, #0]
 801b1ca:	2301      	movs	r3, #1
 801b1cc:	6123      	str	r3, [r4, #16]
 801b1ce:	f8ca 3000 	str.w	r3, [sl]
 801b1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b1d4:	2562      	movs	r5, #98	@ 0x62
 801b1d6:	601c      	str	r4, [r3, #0]
 801b1d8:	e73a      	b.n	801b050 <__gethex+0xf8>
 801b1da:	1e71      	subs	r1, r6, #1
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f000 fee3 	bl	801bfa8 <__any_on>
 801b1e2:	2800      	cmp	r0, #0
 801b1e4:	d1ed      	bne.n	801b1c2 <__gethex+0x26a>
 801b1e6:	9801      	ldr	r0, [sp, #4]
 801b1e8:	4621      	mov	r1, r4
 801b1ea:	f000 fa8f 	bl	801b70c <_Bfree>
 801b1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	6013      	str	r3, [r2, #0]
 801b1f4:	2550      	movs	r5, #80	@ 0x50
 801b1f6:	e72b      	b.n	801b050 <__gethex+0xf8>
 801b1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d1f3      	bne.n	801b1e6 <__gethex+0x28e>
 801b1fe:	e7e0      	b.n	801b1c2 <__gethex+0x26a>
 801b200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b202:	2b00      	cmp	r3, #0
 801b204:	d1dd      	bne.n	801b1c2 <__gethex+0x26a>
 801b206:	e7ee      	b.n	801b1e6 <__gethex+0x28e>
 801b208:	0801e36c 	.word	0x0801e36c
 801b20c:	0801e579 	.word	0x0801e579
 801b210:	0801e58a 	.word	0x0801e58a
 801b214:	1e6f      	subs	r7, r5, #1
 801b216:	f1b9 0f00 	cmp.w	r9, #0
 801b21a:	d130      	bne.n	801b27e <__gethex+0x326>
 801b21c:	b127      	cbz	r7, 801b228 <__gethex+0x2d0>
 801b21e:	4639      	mov	r1, r7
 801b220:	4620      	mov	r0, r4
 801b222:	f000 fec1 	bl	801bfa8 <__any_on>
 801b226:	4681      	mov	r9, r0
 801b228:	117a      	asrs	r2, r7, #5
 801b22a:	2301      	movs	r3, #1
 801b22c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b230:	f007 071f 	and.w	r7, r7, #31
 801b234:	40bb      	lsls	r3, r7
 801b236:	4213      	tst	r3, r2
 801b238:	4629      	mov	r1, r5
 801b23a:	4620      	mov	r0, r4
 801b23c:	bf18      	it	ne
 801b23e:	f049 0902 	orrne.w	r9, r9, #2
 801b242:	f7ff fe21 	bl	801ae88 <rshift>
 801b246:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b24a:	1b76      	subs	r6, r6, r5
 801b24c:	2502      	movs	r5, #2
 801b24e:	f1b9 0f00 	cmp.w	r9, #0
 801b252:	d047      	beq.n	801b2e4 <__gethex+0x38c>
 801b254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b258:	2b02      	cmp	r3, #2
 801b25a:	d015      	beq.n	801b288 <__gethex+0x330>
 801b25c:	2b03      	cmp	r3, #3
 801b25e:	d017      	beq.n	801b290 <__gethex+0x338>
 801b260:	2b01      	cmp	r3, #1
 801b262:	d109      	bne.n	801b278 <__gethex+0x320>
 801b264:	f019 0f02 	tst.w	r9, #2
 801b268:	d006      	beq.n	801b278 <__gethex+0x320>
 801b26a:	f8da 3000 	ldr.w	r3, [sl]
 801b26e:	ea49 0903 	orr.w	r9, r9, r3
 801b272:	f019 0f01 	tst.w	r9, #1
 801b276:	d10e      	bne.n	801b296 <__gethex+0x33e>
 801b278:	f045 0510 	orr.w	r5, r5, #16
 801b27c:	e032      	b.n	801b2e4 <__gethex+0x38c>
 801b27e:	f04f 0901 	mov.w	r9, #1
 801b282:	e7d1      	b.n	801b228 <__gethex+0x2d0>
 801b284:	2501      	movs	r5, #1
 801b286:	e7e2      	b.n	801b24e <__gethex+0x2f6>
 801b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b28a:	f1c3 0301 	rsb	r3, r3, #1
 801b28e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b292:	2b00      	cmp	r3, #0
 801b294:	d0f0      	beq.n	801b278 <__gethex+0x320>
 801b296:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b29a:	f104 0314 	add.w	r3, r4, #20
 801b29e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b2a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b2a6:	f04f 0c00 	mov.w	ip, #0
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b2b4:	d01b      	beq.n	801b2ee <__gethex+0x396>
 801b2b6:	3201      	adds	r2, #1
 801b2b8:	6002      	str	r2, [r0, #0]
 801b2ba:	2d02      	cmp	r5, #2
 801b2bc:	f104 0314 	add.w	r3, r4, #20
 801b2c0:	d13c      	bne.n	801b33c <__gethex+0x3e4>
 801b2c2:	f8d8 2000 	ldr.w	r2, [r8]
 801b2c6:	3a01      	subs	r2, #1
 801b2c8:	42b2      	cmp	r2, r6
 801b2ca:	d109      	bne.n	801b2e0 <__gethex+0x388>
 801b2cc:	1171      	asrs	r1, r6, #5
 801b2ce:	2201      	movs	r2, #1
 801b2d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b2d4:	f006 061f 	and.w	r6, r6, #31
 801b2d8:	fa02 f606 	lsl.w	r6, r2, r6
 801b2dc:	421e      	tst	r6, r3
 801b2de:	d13a      	bne.n	801b356 <__gethex+0x3fe>
 801b2e0:	f045 0520 	orr.w	r5, r5, #32
 801b2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2e6:	601c      	str	r4, [r3, #0]
 801b2e8:	9b02      	ldr	r3, [sp, #8]
 801b2ea:	601f      	str	r7, [r3, #0]
 801b2ec:	e6b0      	b.n	801b050 <__gethex+0xf8>
 801b2ee:	4299      	cmp	r1, r3
 801b2f0:	f843 cc04 	str.w	ip, [r3, #-4]
 801b2f4:	d8d9      	bhi.n	801b2aa <__gethex+0x352>
 801b2f6:	68a3      	ldr	r3, [r4, #8]
 801b2f8:	459b      	cmp	fp, r3
 801b2fa:	db17      	blt.n	801b32c <__gethex+0x3d4>
 801b2fc:	6861      	ldr	r1, [r4, #4]
 801b2fe:	9801      	ldr	r0, [sp, #4]
 801b300:	3101      	adds	r1, #1
 801b302:	f000 f9c3 	bl	801b68c <_Balloc>
 801b306:	4681      	mov	r9, r0
 801b308:	b918      	cbnz	r0, 801b312 <__gethex+0x3ba>
 801b30a:	4b1a      	ldr	r3, [pc, #104]	@ (801b374 <__gethex+0x41c>)
 801b30c:	4602      	mov	r2, r0
 801b30e:	2184      	movs	r1, #132	@ 0x84
 801b310:	e6c5      	b.n	801b09e <__gethex+0x146>
 801b312:	6922      	ldr	r2, [r4, #16]
 801b314:	3202      	adds	r2, #2
 801b316:	f104 010c 	add.w	r1, r4, #12
 801b31a:	0092      	lsls	r2, r2, #2
 801b31c:	300c      	adds	r0, #12
 801b31e:	f7fe ff72 	bl	801a206 <memcpy>
 801b322:	4621      	mov	r1, r4
 801b324:	9801      	ldr	r0, [sp, #4]
 801b326:	f000 f9f1 	bl	801b70c <_Bfree>
 801b32a:	464c      	mov	r4, r9
 801b32c:	6923      	ldr	r3, [r4, #16]
 801b32e:	1c5a      	adds	r2, r3, #1
 801b330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b334:	6122      	str	r2, [r4, #16]
 801b336:	2201      	movs	r2, #1
 801b338:	615a      	str	r2, [r3, #20]
 801b33a:	e7be      	b.n	801b2ba <__gethex+0x362>
 801b33c:	6922      	ldr	r2, [r4, #16]
 801b33e:	455a      	cmp	r2, fp
 801b340:	dd0b      	ble.n	801b35a <__gethex+0x402>
 801b342:	2101      	movs	r1, #1
 801b344:	4620      	mov	r0, r4
 801b346:	f7ff fd9f 	bl	801ae88 <rshift>
 801b34a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b34e:	3701      	adds	r7, #1
 801b350:	42bb      	cmp	r3, r7
 801b352:	f6ff aee0 	blt.w	801b116 <__gethex+0x1be>
 801b356:	2501      	movs	r5, #1
 801b358:	e7c2      	b.n	801b2e0 <__gethex+0x388>
 801b35a:	f016 061f 	ands.w	r6, r6, #31
 801b35e:	d0fa      	beq.n	801b356 <__gethex+0x3fe>
 801b360:	4453      	add	r3, sl
 801b362:	f1c6 0620 	rsb	r6, r6, #32
 801b366:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b36a:	f000 fa81 	bl	801b870 <__hi0bits>
 801b36e:	42b0      	cmp	r0, r6
 801b370:	dbe7      	blt.n	801b342 <__gethex+0x3ea>
 801b372:	e7f0      	b.n	801b356 <__gethex+0x3fe>
 801b374:	0801e579 	.word	0x0801e579

0801b378 <L_shift>:
 801b378:	f1c2 0208 	rsb	r2, r2, #8
 801b37c:	0092      	lsls	r2, r2, #2
 801b37e:	b570      	push	{r4, r5, r6, lr}
 801b380:	f1c2 0620 	rsb	r6, r2, #32
 801b384:	6843      	ldr	r3, [r0, #4]
 801b386:	6804      	ldr	r4, [r0, #0]
 801b388:	fa03 f506 	lsl.w	r5, r3, r6
 801b38c:	432c      	orrs	r4, r5
 801b38e:	40d3      	lsrs	r3, r2
 801b390:	6004      	str	r4, [r0, #0]
 801b392:	f840 3f04 	str.w	r3, [r0, #4]!
 801b396:	4288      	cmp	r0, r1
 801b398:	d3f4      	bcc.n	801b384 <L_shift+0xc>
 801b39a:	bd70      	pop	{r4, r5, r6, pc}

0801b39c <__match>:
 801b39c:	b530      	push	{r4, r5, lr}
 801b39e:	6803      	ldr	r3, [r0, #0]
 801b3a0:	3301      	adds	r3, #1
 801b3a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3a6:	b914      	cbnz	r4, 801b3ae <__match+0x12>
 801b3a8:	6003      	str	r3, [r0, #0]
 801b3aa:	2001      	movs	r0, #1
 801b3ac:	bd30      	pop	{r4, r5, pc}
 801b3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b3b6:	2d19      	cmp	r5, #25
 801b3b8:	bf98      	it	ls
 801b3ba:	3220      	addls	r2, #32
 801b3bc:	42a2      	cmp	r2, r4
 801b3be:	d0f0      	beq.n	801b3a2 <__match+0x6>
 801b3c0:	2000      	movs	r0, #0
 801b3c2:	e7f3      	b.n	801b3ac <__match+0x10>

0801b3c4 <__hexnan>:
 801b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3c8:	680b      	ldr	r3, [r1, #0]
 801b3ca:	6801      	ldr	r1, [r0, #0]
 801b3cc:	115e      	asrs	r6, r3, #5
 801b3ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b3d2:	f013 031f 	ands.w	r3, r3, #31
 801b3d6:	b087      	sub	sp, #28
 801b3d8:	bf18      	it	ne
 801b3da:	3604      	addne	r6, #4
 801b3dc:	2500      	movs	r5, #0
 801b3de:	1f37      	subs	r7, r6, #4
 801b3e0:	4682      	mov	sl, r0
 801b3e2:	4690      	mov	r8, r2
 801b3e4:	9301      	str	r3, [sp, #4]
 801b3e6:	f846 5c04 	str.w	r5, [r6, #-4]
 801b3ea:	46b9      	mov	r9, r7
 801b3ec:	463c      	mov	r4, r7
 801b3ee:	9502      	str	r5, [sp, #8]
 801b3f0:	46ab      	mov	fp, r5
 801b3f2:	784a      	ldrb	r2, [r1, #1]
 801b3f4:	1c4b      	adds	r3, r1, #1
 801b3f6:	9303      	str	r3, [sp, #12]
 801b3f8:	b342      	cbz	r2, 801b44c <__hexnan+0x88>
 801b3fa:	4610      	mov	r0, r2
 801b3fc:	9105      	str	r1, [sp, #20]
 801b3fe:	9204      	str	r2, [sp, #16]
 801b400:	f7ff fd94 	bl	801af2c <__hexdig_fun>
 801b404:	2800      	cmp	r0, #0
 801b406:	d151      	bne.n	801b4ac <__hexnan+0xe8>
 801b408:	9a04      	ldr	r2, [sp, #16]
 801b40a:	9905      	ldr	r1, [sp, #20]
 801b40c:	2a20      	cmp	r2, #32
 801b40e:	d818      	bhi.n	801b442 <__hexnan+0x7e>
 801b410:	9b02      	ldr	r3, [sp, #8]
 801b412:	459b      	cmp	fp, r3
 801b414:	dd13      	ble.n	801b43e <__hexnan+0x7a>
 801b416:	454c      	cmp	r4, r9
 801b418:	d206      	bcs.n	801b428 <__hexnan+0x64>
 801b41a:	2d07      	cmp	r5, #7
 801b41c:	dc04      	bgt.n	801b428 <__hexnan+0x64>
 801b41e:	462a      	mov	r2, r5
 801b420:	4649      	mov	r1, r9
 801b422:	4620      	mov	r0, r4
 801b424:	f7ff ffa8 	bl	801b378 <L_shift>
 801b428:	4544      	cmp	r4, r8
 801b42a:	d952      	bls.n	801b4d2 <__hexnan+0x10e>
 801b42c:	2300      	movs	r3, #0
 801b42e:	f1a4 0904 	sub.w	r9, r4, #4
 801b432:	f844 3c04 	str.w	r3, [r4, #-4]
 801b436:	f8cd b008 	str.w	fp, [sp, #8]
 801b43a:	464c      	mov	r4, r9
 801b43c:	461d      	mov	r5, r3
 801b43e:	9903      	ldr	r1, [sp, #12]
 801b440:	e7d7      	b.n	801b3f2 <__hexnan+0x2e>
 801b442:	2a29      	cmp	r2, #41	@ 0x29
 801b444:	d157      	bne.n	801b4f6 <__hexnan+0x132>
 801b446:	3102      	adds	r1, #2
 801b448:	f8ca 1000 	str.w	r1, [sl]
 801b44c:	f1bb 0f00 	cmp.w	fp, #0
 801b450:	d051      	beq.n	801b4f6 <__hexnan+0x132>
 801b452:	454c      	cmp	r4, r9
 801b454:	d206      	bcs.n	801b464 <__hexnan+0xa0>
 801b456:	2d07      	cmp	r5, #7
 801b458:	dc04      	bgt.n	801b464 <__hexnan+0xa0>
 801b45a:	462a      	mov	r2, r5
 801b45c:	4649      	mov	r1, r9
 801b45e:	4620      	mov	r0, r4
 801b460:	f7ff ff8a 	bl	801b378 <L_shift>
 801b464:	4544      	cmp	r4, r8
 801b466:	d936      	bls.n	801b4d6 <__hexnan+0x112>
 801b468:	f1a8 0204 	sub.w	r2, r8, #4
 801b46c:	4623      	mov	r3, r4
 801b46e:	f853 1b04 	ldr.w	r1, [r3], #4
 801b472:	f842 1f04 	str.w	r1, [r2, #4]!
 801b476:	429f      	cmp	r7, r3
 801b478:	d2f9      	bcs.n	801b46e <__hexnan+0xaa>
 801b47a:	1b3b      	subs	r3, r7, r4
 801b47c:	f023 0303 	bic.w	r3, r3, #3
 801b480:	3304      	adds	r3, #4
 801b482:	3401      	adds	r4, #1
 801b484:	3e03      	subs	r6, #3
 801b486:	42b4      	cmp	r4, r6
 801b488:	bf88      	it	hi
 801b48a:	2304      	movhi	r3, #4
 801b48c:	4443      	add	r3, r8
 801b48e:	2200      	movs	r2, #0
 801b490:	f843 2b04 	str.w	r2, [r3], #4
 801b494:	429f      	cmp	r7, r3
 801b496:	d2fb      	bcs.n	801b490 <__hexnan+0xcc>
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	b91b      	cbnz	r3, 801b4a4 <__hexnan+0xe0>
 801b49c:	4547      	cmp	r7, r8
 801b49e:	d128      	bne.n	801b4f2 <__hexnan+0x12e>
 801b4a0:	2301      	movs	r3, #1
 801b4a2:	603b      	str	r3, [r7, #0]
 801b4a4:	2005      	movs	r0, #5
 801b4a6:	b007      	add	sp, #28
 801b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ac:	3501      	adds	r5, #1
 801b4ae:	2d08      	cmp	r5, #8
 801b4b0:	f10b 0b01 	add.w	fp, fp, #1
 801b4b4:	dd06      	ble.n	801b4c4 <__hexnan+0x100>
 801b4b6:	4544      	cmp	r4, r8
 801b4b8:	d9c1      	bls.n	801b43e <__hexnan+0x7a>
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	f844 3c04 	str.w	r3, [r4, #-4]
 801b4c0:	2501      	movs	r5, #1
 801b4c2:	3c04      	subs	r4, #4
 801b4c4:	6822      	ldr	r2, [r4, #0]
 801b4c6:	f000 000f 	and.w	r0, r0, #15
 801b4ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b4ce:	6020      	str	r0, [r4, #0]
 801b4d0:	e7b5      	b.n	801b43e <__hexnan+0x7a>
 801b4d2:	2508      	movs	r5, #8
 801b4d4:	e7b3      	b.n	801b43e <__hexnan+0x7a>
 801b4d6:	9b01      	ldr	r3, [sp, #4]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d0dd      	beq.n	801b498 <__hexnan+0xd4>
 801b4dc:	f1c3 0320 	rsb	r3, r3, #32
 801b4e0:	f04f 32ff 	mov.w	r2, #4294967295
 801b4e4:	40da      	lsrs	r2, r3
 801b4e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b4ea:	4013      	ands	r3, r2
 801b4ec:	f846 3c04 	str.w	r3, [r6, #-4]
 801b4f0:	e7d2      	b.n	801b498 <__hexnan+0xd4>
 801b4f2:	3f04      	subs	r7, #4
 801b4f4:	e7d0      	b.n	801b498 <__hexnan+0xd4>
 801b4f6:	2004      	movs	r0, #4
 801b4f8:	e7d5      	b.n	801b4a6 <__hexnan+0xe2>
	...

0801b4fc <malloc>:
 801b4fc:	4b02      	ldr	r3, [pc, #8]	@ (801b508 <malloc+0xc>)
 801b4fe:	4601      	mov	r1, r0
 801b500:	6818      	ldr	r0, [r3, #0]
 801b502:	f000 b825 	b.w	801b550 <_malloc_r>
 801b506:	bf00      	nop
 801b508:	240002ac 	.word	0x240002ac

0801b50c <sbrk_aligned>:
 801b50c:	b570      	push	{r4, r5, r6, lr}
 801b50e:	4e0f      	ldr	r6, [pc, #60]	@ (801b54c <sbrk_aligned+0x40>)
 801b510:	460c      	mov	r4, r1
 801b512:	6831      	ldr	r1, [r6, #0]
 801b514:	4605      	mov	r5, r0
 801b516:	b911      	cbnz	r1, 801b51e <sbrk_aligned+0x12>
 801b518:	f000 ff92 	bl	801c440 <_sbrk_r>
 801b51c:	6030      	str	r0, [r6, #0]
 801b51e:	4621      	mov	r1, r4
 801b520:	4628      	mov	r0, r5
 801b522:	f000 ff8d 	bl	801c440 <_sbrk_r>
 801b526:	1c43      	adds	r3, r0, #1
 801b528:	d103      	bne.n	801b532 <sbrk_aligned+0x26>
 801b52a:	f04f 34ff 	mov.w	r4, #4294967295
 801b52e:	4620      	mov	r0, r4
 801b530:	bd70      	pop	{r4, r5, r6, pc}
 801b532:	1cc4      	adds	r4, r0, #3
 801b534:	f024 0403 	bic.w	r4, r4, #3
 801b538:	42a0      	cmp	r0, r4
 801b53a:	d0f8      	beq.n	801b52e <sbrk_aligned+0x22>
 801b53c:	1a21      	subs	r1, r4, r0
 801b53e:	4628      	mov	r0, r5
 801b540:	f000 ff7e 	bl	801c440 <_sbrk_r>
 801b544:	3001      	adds	r0, #1
 801b546:	d1f2      	bne.n	801b52e <sbrk_aligned+0x22>
 801b548:	e7ef      	b.n	801b52a <sbrk_aligned+0x1e>
 801b54a:	bf00      	nop
 801b54c:	2401f934 	.word	0x2401f934

0801b550 <_malloc_r>:
 801b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b554:	1ccd      	adds	r5, r1, #3
 801b556:	f025 0503 	bic.w	r5, r5, #3
 801b55a:	3508      	adds	r5, #8
 801b55c:	2d0c      	cmp	r5, #12
 801b55e:	bf38      	it	cc
 801b560:	250c      	movcc	r5, #12
 801b562:	2d00      	cmp	r5, #0
 801b564:	4606      	mov	r6, r0
 801b566:	db01      	blt.n	801b56c <_malloc_r+0x1c>
 801b568:	42a9      	cmp	r1, r5
 801b56a:	d904      	bls.n	801b576 <_malloc_r+0x26>
 801b56c:	230c      	movs	r3, #12
 801b56e:	6033      	str	r3, [r6, #0]
 801b570:	2000      	movs	r0, #0
 801b572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b64c <_malloc_r+0xfc>
 801b57a:	f000 f87b 	bl	801b674 <__malloc_lock>
 801b57e:	f8d8 3000 	ldr.w	r3, [r8]
 801b582:	461c      	mov	r4, r3
 801b584:	bb44      	cbnz	r4, 801b5d8 <_malloc_r+0x88>
 801b586:	4629      	mov	r1, r5
 801b588:	4630      	mov	r0, r6
 801b58a:	f7ff ffbf 	bl	801b50c <sbrk_aligned>
 801b58e:	1c43      	adds	r3, r0, #1
 801b590:	4604      	mov	r4, r0
 801b592:	d158      	bne.n	801b646 <_malloc_r+0xf6>
 801b594:	f8d8 4000 	ldr.w	r4, [r8]
 801b598:	4627      	mov	r7, r4
 801b59a:	2f00      	cmp	r7, #0
 801b59c:	d143      	bne.n	801b626 <_malloc_r+0xd6>
 801b59e:	2c00      	cmp	r4, #0
 801b5a0:	d04b      	beq.n	801b63a <_malloc_r+0xea>
 801b5a2:	6823      	ldr	r3, [r4, #0]
 801b5a4:	4639      	mov	r1, r7
 801b5a6:	4630      	mov	r0, r6
 801b5a8:	eb04 0903 	add.w	r9, r4, r3
 801b5ac:	f000 ff48 	bl	801c440 <_sbrk_r>
 801b5b0:	4581      	cmp	r9, r0
 801b5b2:	d142      	bne.n	801b63a <_malloc_r+0xea>
 801b5b4:	6821      	ldr	r1, [r4, #0]
 801b5b6:	1a6d      	subs	r5, r5, r1
 801b5b8:	4629      	mov	r1, r5
 801b5ba:	4630      	mov	r0, r6
 801b5bc:	f7ff ffa6 	bl	801b50c <sbrk_aligned>
 801b5c0:	3001      	adds	r0, #1
 801b5c2:	d03a      	beq.n	801b63a <_malloc_r+0xea>
 801b5c4:	6823      	ldr	r3, [r4, #0]
 801b5c6:	442b      	add	r3, r5
 801b5c8:	6023      	str	r3, [r4, #0]
 801b5ca:	f8d8 3000 	ldr.w	r3, [r8]
 801b5ce:	685a      	ldr	r2, [r3, #4]
 801b5d0:	bb62      	cbnz	r2, 801b62c <_malloc_r+0xdc>
 801b5d2:	f8c8 7000 	str.w	r7, [r8]
 801b5d6:	e00f      	b.n	801b5f8 <_malloc_r+0xa8>
 801b5d8:	6822      	ldr	r2, [r4, #0]
 801b5da:	1b52      	subs	r2, r2, r5
 801b5dc:	d420      	bmi.n	801b620 <_malloc_r+0xd0>
 801b5de:	2a0b      	cmp	r2, #11
 801b5e0:	d917      	bls.n	801b612 <_malloc_r+0xc2>
 801b5e2:	1961      	adds	r1, r4, r5
 801b5e4:	42a3      	cmp	r3, r4
 801b5e6:	6025      	str	r5, [r4, #0]
 801b5e8:	bf18      	it	ne
 801b5ea:	6059      	strne	r1, [r3, #4]
 801b5ec:	6863      	ldr	r3, [r4, #4]
 801b5ee:	bf08      	it	eq
 801b5f0:	f8c8 1000 	streq.w	r1, [r8]
 801b5f4:	5162      	str	r2, [r4, r5]
 801b5f6:	604b      	str	r3, [r1, #4]
 801b5f8:	4630      	mov	r0, r6
 801b5fa:	f000 f841 	bl	801b680 <__malloc_unlock>
 801b5fe:	f104 000b 	add.w	r0, r4, #11
 801b602:	1d23      	adds	r3, r4, #4
 801b604:	f020 0007 	bic.w	r0, r0, #7
 801b608:	1ac2      	subs	r2, r0, r3
 801b60a:	bf1c      	itt	ne
 801b60c:	1a1b      	subne	r3, r3, r0
 801b60e:	50a3      	strne	r3, [r4, r2]
 801b610:	e7af      	b.n	801b572 <_malloc_r+0x22>
 801b612:	6862      	ldr	r2, [r4, #4]
 801b614:	42a3      	cmp	r3, r4
 801b616:	bf0c      	ite	eq
 801b618:	f8c8 2000 	streq.w	r2, [r8]
 801b61c:	605a      	strne	r2, [r3, #4]
 801b61e:	e7eb      	b.n	801b5f8 <_malloc_r+0xa8>
 801b620:	4623      	mov	r3, r4
 801b622:	6864      	ldr	r4, [r4, #4]
 801b624:	e7ae      	b.n	801b584 <_malloc_r+0x34>
 801b626:	463c      	mov	r4, r7
 801b628:	687f      	ldr	r7, [r7, #4]
 801b62a:	e7b6      	b.n	801b59a <_malloc_r+0x4a>
 801b62c:	461a      	mov	r2, r3
 801b62e:	685b      	ldr	r3, [r3, #4]
 801b630:	42a3      	cmp	r3, r4
 801b632:	d1fb      	bne.n	801b62c <_malloc_r+0xdc>
 801b634:	2300      	movs	r3, #0
 801b636:	6053      	str	r3, [r2, #4]
 801b638:	e7de      	b.n	801b5f8 <_malloc_r+0xa8>
 801b63a:	230c      	movs	r3, #12
 801b63c:	6033      	str	r3, [r6, #0]
 801b63e:	4630      	mov	r0, r6
 801b640:	f000 f81e 	bl	801b680 <__malloc_unlock>
 801b644:	e794      	b.n	801b570 <_malloc_r+0x20>
 801b646:	6005      	str	r5, [r0, #0]
 801b648:	e7d6      	b.n	801b5f8 <_malloc_r+0xa8>
 801b64a:	bf00      	nop
 801b64c:	2401f938 	.word	0x2401f938

0801b650 <__ascii_mbtowc>:
 801b650:	b082      	sub	sp, #8
 801b652:	b901      	cbnz	r1, 801b656 <__ascii_mbtowc+0x6>
 801b654:	a901      	add	r1, sp, #4
 801b656:	b142      	cbz	r2, 801b66a <__ascii_mbtowc+0x1a>
 801b658:	b14b      	cbz	r3, 801b66e <__ascii_mbtowc+0x1e>
 801b65a:	7813      	ldrb	r3, [r2, #0]
 801b65c:	600b      	str	r3, [r1, #0]
 801b65e:	7812      	ldrb	r2, [r2, #0]
 801b660:	1e10      	subs	r0, r2, #0
 801b662:	bf18      	it	ne
 801b664:	2001      	movne	r0, #1
 801b666:	b002      	add	sp, #8
 801b668:	4770      	bx	lr
 801b66a:	4610      	mov	r0, r2
 801b66c:	e7fb      	b.n	801b666 <__ascii_mbtowc+0x16>
 801b66e:	f06f 0001 	mvn.w	r0, #1
 801b672:	e7f8      	b.n	801b666 <__ascii_mbtowc+0x16>

0801b674 <__malloc_lock>:
 801b674:	4801      	ldr	r0, [pc, #4]	@ (801b67c <__malloc_lock+0x8>)
 801b676:	f7fe bdc4 	b.w	801a202 <__retarget_lock_acquire_recursive>
 801b67a:	bf00      	nop
 801b67c:	2401f930 	.word	0x2401f930

0801b680 <__malloc_unlock>:
 801b680:	4801      	ldr	r0, [pc, #4]	@ (801b688 <__malloc_unlock+0x8>)
 801b682:	f7fe bdbf 	b.w	801a204 <__retarget_lock_release_recursive>
 801b686:	bf00      	nop
 801b688:	2401f930 	.word	0x2401f930

0801b68c <_Balloc>:
 801b68c:	b570      	push	{r4, r5, r6, lr}
 801b68e:	69c6      	ldr	r6, [r0, #28]
 801b690:	4604      	mov	r4, r0
 801b692:	460d      	mov	r5, r1
 801b694:	b976      	cbnz	r6, 801b6b4 <_Balloc+0x28>
 801b696:	2010      	movs	r0, #16
 801b698:	f7ff ff30 	bl	801b4fc <malloc>
 801b69c:	4602      	mov	r2, r0
 801b69e:	61e0      	str	r0, [r4, #28]
 801b6a0:	b920      	cbnz	r0, 801b6ac <_Balloc+0x20>
 801b6a2:	4b18      	ldr	r3, [pc, #96]	@ (801b704 <_Balloc+0x78>)
 801b6a4:	4818      	ldr	r0, [pc, #96]	@ (801b708 <_Balloc+0x7c>)
 801b6a6:	216b      	movs	r1, #107	@ 0x6b
 801b6a8:	f000 feda 	bl	801c460 <__assert_func>
 801b6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b6b0:	6006      	str	r6, [r0, #0]
 801b6b2:	60c6      	str	r6, [r0, #12]
 801b6b4:	69e6      	ldr	r6, [r4, #28]
 801b6b6:	68f3      	ldr	r3, [r6, #12]
 801b6b8:	b183      	cbz	r3, 801b6dc <_Balloc+0x50>
 801b6ba:	69e3      	ldr	r3, [r4, #28]
 801b6bc:	68db      	ldr	r3, [r3, #12]
 801b6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b6c2:	b9b8      	cbnz	r0, 801b6f4 <_Balloc+0x68>
 801b6c4:	2101      	movs	r1, #1
 801b6c6:	fa01 f605 	lsl.w	r6, r1, r5
 801b6ca:	1d72      	adds	r2, r6, #5
 801b6cc:	0092      	lsls	r2, r2, #2
 801b6ce:	4620      	mov	r0, r4
 801b6d0:	f000 fee4 	bl	801c49c <_calloc_r>
 801b6d4:	b160      	cbz	r0, 801b6f0 <_Balloc+0x64>
 801b6d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b6da:	e00e      	b.n	801b6fa <_Balloc+0x6e>
 801b6dc:	2221      	movs	r2, #33	@ 0x21
 801b6de:	2104      	movs	r1, #4
 801b6e0:	4620      	mov	r0, r4
 801b6e2:	f000 fedb 	bl	801c49c <_calloc_r>
 801b6e6:	69e3      	ldr	r3, [r4, #28]
 801b6e8:	60f0      	str	r0, [r6, #12]
 801b6ea:	68db      	ldr	r3, [r3, #12]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d1e4      	bne.n	801b6ba <_Balloc+0x2e>
 801b6f0:	2000      	movs	r0, #0
 801b6f2:	bd70      	pop	{r4, r5, r6, pc}
 801b6f4:	6802      	ldr	r2, [r0, #0]
 801b6f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b700:	e7f7      	b.n	801b6f2 <_Balloc+0x66>
 801b702:	bf00      	nop
 801b704:	0801e50a 	.word	0x0801e50a
 801b708:	0801e5ea 	.word	0x0801e5ea

0801b70c <_Bfree>:
 801b70c:	b570      	push	{r4, r5, r6, lr}
 801b70e:	69c6      	ldr	r6, [r0, #28]
 801b710:	4605      	mov	r5, r0
 801b712:	460c      	mov	r4, r1
 801b714:	b976      	cbnz	r6, 801b734 <_Bfree+0x28>
 801b716:	2010      	movs	r0, #16
 801b718:	f7ff fef0 	bl	801b4fc <malloc>
 801b71c:	4602      	mov	r2, r0
 801b71e:	61e8      	str	r0, [r5, #28]
 801b720:	b920      	cbnz	r0, 801b72c <_Bfree+0x20>
 801b722:	4b09      	ldr	r3, [pc, #36]	@ (801b748 <_Bfree+0x3c>)
 801b724:	4809      	ldr	r0, [pc, #36]	@ (801b74c <_Bfree+0x40>)
 801b726:	218f      	movs	r1, #143	@ 0x8f
 801b728:	f000 fe9a 	bl	801c460 <__assert_func>
 801b72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b730:	6006      	str	r6, [r0, #0]
 801b732:	60c6      	str	r6, [r0, #12]
 801b734:	b13c      	cbz	r4, 801b746 <_Bfree+0x3a>
 801b736:	69eb      	ldr	r3, [r5, #28]
 801b738:	6862      	ldr	r2, [r4, #4]
 801b73a:	68db      	ldr	r3, [r3, #12]
 801b73c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b740:	6021      	str	r1, [r4, #0]
 801b742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b746:	bd70      	pop	{r4, r5, r6, pc}
 801b748:	0801e50a 	.word	0x0801e50a
 801b74c:	0801e5ea 	.word	0x0801e5ea

0801b750 <__multadd>:
 801b750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b754:	690d      	ldr	r5, [r1, #16]
 801b756:	4607      	mov	r7, r0
 801b758:	460c      	mov	r4, r1
 801b75a:	461e      	mov	r6, r3
 801b75c:	f101 0c14 	add.w	ip, r1, #20
 801b760:	2000      	movs	r0, #0
 801b762:	f8dc 3000 	ldr.w	r3, [ip]
 801b766:	b299      	uxth	r1, r3
 801b768:	fb02 6101 	mla	r1, r2, r1, r6
 801b76c:	0c1e      	lsrs	r6, r3, #16
 801b76e:	0c0b      	lsrs	r3, r1, #16
 801b770:	fb02 3306 	mla	r3, r2, r6, r3
 801b774:	b289      	uxth	r1, r1
 801b776:	3001      	adds	r0, #1
 801b778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b77c:	4285      	cmp	r5, r0
 801b77e:	f84c 1b04 	str.w	r1, [ip], #4
 801b782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b786:	dcec      	bgt.n	801b762 <__multadd+0x12>
 801b788:	b30e      	cbz	r6, 801b7ce <__multadd+0x7e>
 801b78a:	68a3      	ldr	r3, [r4, #8]
 801b78c:	42ab      	cmp	r3, r5
 801b78e:	dc19      	bgt.n	801b7c4 <__multadd+0x74>
 801b790:	6861      	ldr	r1, [r4, #4]
 801b792:	4638      	mov	r0, r7
 801b794:	3101      	adds	r1, #1
 801b796:	f7ff ff79 	bl	801b68c <_Balloc>
 801b79a:	4680      	mov	r8, r0
 801b79c:	b928      	cbnz	r0, 801b7aa <__multadd+0x5a>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	4b0c      	ldr	r3, [pc, #48]	@ (801b7d4 <__multadd+0x84>)
 801b7a2:	480d      	ldr	r0, [pc, #52]	@ (801b7d8 <__multadd+0x88>)
 801b7a4:	21ba      	movs	r1, #186	@ 0xba
 801b7a6:	f000 fe5b 	bl	801c460 <__assert_func>
 801b7aa:	6922      	ldr	r2, [r4, #16]
 801b7ac:	3202      	adds	r2, #2
 801b7ae:	f104 010c 	add.w	r1, r4, #12
 801b7b2:	0092      	lsls	r2, r2, #2
 801b7b4:	300c      	adds	r0, #12
 801b7b6:	f7fe fd26 	bl	801a206 <memcpy>
 801b7ba:	4621      	mov	r1, r4
 801b7bc:	4638      	mov	r0, r7
 801b7be:	f7ff ffa5 	bl	801b70c <_Bfree>
 801b7c2:	4644      	mov	r4, r8
 801b7c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b7c8:	3501      	adds	r5, #1
 801b7ca:	615e      	str	r6, [r3, #20]
 801b7cc:	6125      	str	r5, [r4, #16]
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7d4:	0801e579 	.word	0x0801e579
 801b7d8:	0801e5ea 	.word	0x0801e5ea

0801b7dc <__s2b>:
 801b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b7e0:	460c      	mov	r4, r1
 801b7e2:	4615      	mov	r5, r2
 801b7e4:	461f      	mov	r7, r3
 801b7e6:	2209      	movs	r2, #9
 801b7e8:	3308      	adds	r3, #8
 801b7ea:	4606      	mov	r6, r0
 801b7ec:	fb93 f3f2 	sdiv	r3, r3, r2
 801b7f0:	2100      	movs	r1, #0
 801b7f2:	2201      	movs	r2, #1
 801b7f4:	429a      	cmp	r2, r3
 801b7f6:	db09      	blt.n	801b80c <__s2b+0x30>
 801b7f8:	4630      	mov	r0, r6
 801b7fa:	f7ff ff47 	bl	801b68c <_Balloc>
 801b7fe:	b940      	cbnz	r0, 801b812 <__s2b+0x36>
 801b800:	4602      	mov	r2, r0
 801b802:	4b19      	ldr	r3, [pc, #100]	@ (801b868 <__s2b+0x8c>)
 801b804:	4819      	ldr	r0, [pc, #100]	@ (801b86c <__s2b+0x90>)
 801b806:	21d3      	movs	r1, #211	@ 0xd3
 801b808:	f000 fe2a 	bl	801c460 <__assert_func>
 801b80c:	0052      	lsls	r2, r2, #1
 801b80e:	3101      	adds	r1, #1
 801b810:	e7f0      	b.n	801b7f4 <__s2b+0x18>
 801b812:	9b08      	ldr	r3, [sp, #32]
 801b814:	6143      	str	r3, [r0, #20]
 801b816:	2d09      	cmp	r5, #9
 801b818:	f04f 0301 	mov.w	r3, #1
 801b81c:	6103      	str	r3, [r0, #16]
 801b81e:	dd16      	ble.n	801b84e <__s2b+0x72>
 801b820:	f104 0909 	add.w	r9, r4, #9
 801b824:	46c8      	mov	r8, r9
 801b826:	442c      	add	r4, r5
 801b828:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b82c:	4601      	mov	r1, r0
 801b82e:	3b30      	subs	r3, #48	@ 0x30
 801b830:	220a      	movs	r2, #10
 801b832:	4630      	mov	r0, r6
 801b834:	f7ff ff8c 	bl	801b750 <__multadd>
 801b838:	45a0      	cmp	r8, r4
 801b83a:	d1f5      	bne.n	801b828 <__s2b+0x4c>
 801b83c:	f1a5 0408 	sub.w	r4, r5, #8
 801b840:	444c      	add	r4, r9
 801b842:	1b2d      	subs	r5, r5, r4
 801b844:	1963      	adds	r3, r4, r5
 801b846:	42bb      	cmp	r3, r7
 801b848:	db04      	blt.n	801b854 <__s2b+0x78>
 801b84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b84e:	340a      	adds	r4, #10
 801b850:	2509      	movs	r5, #9
 801b852:	e7f6      	b.n	801b842 <__s2b+0x66>
 801b854:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b858:	4601      	mov	r1, r0
 801b85a:	3b30      	subs	r3, #48	@ 0x30
 801b85c:	220a      	movs	r2, #10
 801b85e:	4630      	mov	r0, r6
 801b860:	f7ff ff76 	bl	801b750 <__multadd>
 801b864:	e7ee      	b.n	801b844 <__s2b+0x68>
 801b866:	bf00      	nop
 801b868:	0801e579 	.word	0x0801e579
 801b86c:	0801e5ea 	.word	0x0801e5ea

0801b870 <__hi0bits>:
 801b870:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b874:	4603      	mov	r3, r0
 801b876:	bf36      	itet	cc
 801b878:	0403      	lslcc	r3, r0, #16
 801b87a:	2000      	movcs	r0, #0
 801b87c:	2010      	movcc	r0, #16
 801b87e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b882:	bf3c      	itt	cc
 801b884:	021b      	lslcc	r3, r3, #8
 801b886:	3008      	addcc	r0, #8
 801b888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b88c:	bf3c      	itt	cc
 801b88e:	011b      	lslcc	r3, r3, #4
 801b890:	3004      	addcc	r0, #4
 801b892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b896:	bf3c      	itt	cc
 801b898:	009b      	lslcc	r3, r3, #2
 801b89a:	3002      	addcc	r0, #2
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	db05      	blt.n	801b8ac <__hi0bits+0x3c>
 801b8a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b8a4:	f100 0001 	add.w	r0, r0, #1
 801b8a8:	bf08      	it	eq
 801b8aa:	2020      	moveq	r0, #32
 801b8ac:	4770      	bx	lr

0801b8ae <__lo0bits>:
 801b8ae:	6803      	ldr	r3, [r0, #0]
 801b8b0:	4602      	mov	r2, r0
 801b8b2:	f013 0007 	ands.w	r0, r3, #7
 801b8b6:	d00b      	beq.n	801b8d0 <__lo0bits+0x22>
 801b8b8:	07d9      	lsls	r1, r3, #31
 801b8ba:	d421      	bmi.n	801b900 <__lo0bits+0x52>
 801b8bc:	0798      	lsls	r0, r3, #30
 801b8be:	bf49      	itett	mi
 801b8c0:	085b      	lsrmi	r3, r3, #1
 801b8c2:	089b      	lsrpl	r3, r3, #2
 801b8c4:	2001      	movmi	r0, #1
 801b8c6:	6013      	strmi	r3, [r2, #0]
 801b8c8:	bf5c      	itt	pl
 801b8ca:	6013      	strpl	r3, [r2, #0]
 801b8cc:	2002      	movpl	r0, #2
 801b8ce:	4770      	bx	lr
 801b8d0:	b299      	uxth	r1, r3
 801b8d2:	b909      	cbnz	r1, 801b8d8 <__lo0bits+0x2a>
 801b8d4:	0c1b      	lsrs	r3, r3, #16
 801b8d6:	2010      	movs	r0, #16
 801b8d8:	b2d9      	uxtb	r1, r3
 801b8da:	b909      	cbnz	r1, 801b8e0 <__lo0bits+0x32>
 801b8dc:	3008      	adds	r0, #8
 801b8de:	0a1b      	lsrs	r3, r3, #8
 801b8e0:	0719      	lsls	r1, r3, #28
 801b8e2:	bf04      	itt	eq
 801b8e4:	091b      	lsreq	r3, r3, #4
 801b8e6:	3004      	addeq	r0, #4
 801b8e8:	0799      	lsls	r1, r3, #30
 801b8ea:	bf04      	itt	eq
 801b8ec:	089b      	lsreq	r3, r3, #2
 801b8ee:	3002      	addeq	r0, #2
 801b8f0:	07d9      	lsls	r1, r3, #31
 801b8f2:	d403      	bmi.n	801b8fc <__lo0bits+0x4e>
 801b8f4:	085b      	lsrs	r3, r3, #1
 801b8f6:	f100 0001 	add.w	r0, r0, #1
 801b8fa:	d003      	beq.n	801b904 <__lo0bits+0x56>
 801b8fc:	6013      	str	r3, [r2, #0]
 801b8fe:	4770      	bx	lr
 801b900:	2000      	movs	r0, #0
 801b902:	4770      	bx	lr
 801b904:	2020      	movs	r0, #32
 801b906:	4770      	bx	lr

0801b908 <__i2b>:
 801b908:	b510      	push	{r4, lr}
 801b90a:	460c      	mov	r4, r1
 801b90c:	2101      	movs	r1, #1
 801b90e:	f7ff febd 	bl	801b68c <_Balloc>
 801b912:	4602      	mov	r2, r0
 801b914:	b928      	cbnz	r0, 801b922 <__i2b+0x1a>
 801b916:	4b05      	ldr	r3, [pc, #20]	@ (801b92c <__i2b+0x24>)
 801b918:	4805      	ldr	r0, [pc, #20]	@ (801b930 <__i2b+0x28>)
 801b91a:	f240 1145 	movw	r1, #325	@ 0x145
 801b91e:	f000 fd9f 	bl	801c460 <__assert_func>
 801b922:	2301      	movs	r3, #1
 801b924:	6144      	str	r4, [r0, #20]
 801b926:	6103      	str	r3, [r0, #16]
 801b928:	bd10      	pop	{r4, pc}
 801b92a:	bf00      	nop
 801b92c:	0801e579 	.word	0x0801e579
 801b930:	0801e5ea 	.word	0x0801e5ea

0801b934 <__multiply>:
 801b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b938:	4614      	mov	r4, r2
 801b93a:	690a      	ldr	r2, [r1, #16]
 801b93c:	6923      	ldr	r3, [r4, #16]
 801b93e:	429a      	cmp	r2, r3
 801b940:	bfa8      	it	ge
 801b942:	4623      	movge	r3, r4
 801b944:	460f      	mov	r7, r1
 801b946:	bfa4      	itt	ge
 801b948:	460c      	movge	r4, r1
 801b94a:	461f      	movge	r7, r3
 801b94c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b950:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b954:	68a3      	ldr	r3, [r4, #8]
 801b956:	6861      	ldr	r1, [r4, #4]
 801b958:	eb0a 0609 	add.w	r6, sl, r9
 801b95c:	42b3      	cmp	r3, r6
 801b95e:	b085      	sub	sp, #20
 801b960:	bfb8      	it	lt
 801b962:	3101      	addlt	r1, #1
 801b964:	f7ff fe92 	bl	801b68c <_Balloc>
 801b968:	b930      	cbnz	r0, 801b978 <__multiply+0x44>
 801b96a:	4602      	mov	r2, r0
 801b96c:	4b44      	ldr	r3, [pc, #272]	@ (801ba80 <__multiply+0x14c>)
 801b96e:	4845      	ldr	r0, [pc, #276]	@ (801ba84 <__multiply+0x150>)
 801b970:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b974:	f000 fd74 	bl	801c460 <__assert_func>
 801b978:	f100 0514 	add.w	r5, r0, #20
 801b97c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b980:	462b      	mov	r3, r5
 801b982:	2200      	movs	r2, #0
 801b984:	4543      	cmp	r3, r8
 801b986:	d321      	bcc.n	801b9cc <__multiply+0x98>
 801b988:	f107 0114 	add.w	r1, r7, #20
 801b98c:	f104 0214 	add.w	r2, r4, #20
 801b990:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b994:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b998:	9302      	str	r3, [sp, #8]
 801b99a:	1b13      	subs	r3, r2, r4
 801b99c:	3b15      	subs	r3, #21
 801b99e:	f023 0303 	bic.w	r3, r3, #3
 801b9a2:	3304      	adds	r3, #4
 801b9a4:	f104 0715 	add.w	r7, r4, #21
 801b9a8:	42ba      	cmp	r2, r7
 801b9aa:	bf38      	it	cc
 801b9ac:	2304      	movcc	r3, #4
 801b9ae:	9301      	str	r3, [sp, #4]
 801b9b0:	9b02      	ldr	r3, [sp, #8]
 801b9b2:	9103      	str	r1, [sp, #12]
 801b9b4:	428b      	cmp	r3, r1
 801b9b6:	d80c      	bhi.n	801b9d2 <__multiply+0x9e>
 801b9b8:	2e00      	cmp	r6, #0
 801b9ba:	dd03      	ble.n	801b9c4 <__multiply+0x90>
 801b9bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d05b      	beq.n	801ba7c <__multiply+0x148>
 801b9c4:	6106      	str	r6, [r0, #16]
 801b9c6:	b005      	add	sp, #20
 801b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9cc:	f843 2b04 	str.w	r2, [r3], #4
 801b9d0:	e7d8      	b.n	801b984 <__multiply+0x50>
 801b9d2:	f8b1 a000 	ldrh.w	sl, [r1]
 801b9d6:	f1ba 0f00 	cmp.w	sl, #0
 801b9da:	d024      	beq.n	801ba26 <__multiply+0xf2>
 801b9dc:	f104 0e14 	add.w	lr, r4, #20
 801b9e0:	46a9      	mov	r9, r5
 801b9e2:	f04f 0c00 	mov.w	ip, #0
 801b9e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b9ea:	f8d9 3000 	ldr.w	r3, [r9]
 801b9ee:	fa1f fb87 	uxth.w	fp, r7
 801b9f2:	b29b      	uxth	r3, r3
 801b9f4:	fb0a 330b 	mla	r3, sl, fp, r3
 801b9f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b9fc:	f8d9 7000 	ldr.w	r7, [r9]
 801ba00:	4463      	add	r3, ip
 801ba02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ba06:	fb0a c70b 	mla	r7, sl, fp, ip
 801ba0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ba0e:	b29b      	uxth	r3, r3
 801ba10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba14:	4572      	cmp	r2, lr
 801ba16:	f849 3b04 	str.w	r3, [r9], #4
 801ba1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ba1e:	d8e2      	bhi.n	801b9e6 <__multiply+0xb2>
 801ba20:	9b01      	ldr	r3, [sp, #4]
 801ba22:	f845 c003 	str.w	ip, [r5, r3]
 801ba26:	9b03      	ldr	r3, [sp, #12]
 801ba28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ba2c:	3104      	adds	r1, #4
 801ba2e:	f1b9 0f00 	cmp.w	r9, #0
 801ba32:	d021      	beq.n	801ba78 <__multiply+0x144>
 801ba34:	682b      	ldr	r3, [r5, #0]
 801ba36:	f104 0c14 	add.w	ip, r4, #20
 801ba3a:	46ae      	mov	lr, r5
 801ba3c:	f04f 0a00 	mov.w	sl, #0
 801ba40:	f8bc b000 	ldrh.w	fp, [ip]
 801ba44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ba48:	fb09 770b 	mla	r7, r9, fp, r7
 801ba4c:	4457      	add	r7, sl
 801ba4e:	b29b      	uxth	r3, r3
 801ba50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba54:	f84e 3b04 	str.w	r3, [lr], #4
 801ba58:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ba5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba60:	f8be 3000 	ldrh.w	r3, [lr]
 801ba64:	fb09 330a 	mla	r3, r9, sl, r3
 801ba68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ba6c:	4562      	cmp	r2, ip
 801ba6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ba72:	d8e5      	bhi.n	801ba40 <__multiply+0x10c>
 801ba74:	9f01      	ldr	r7, [sp, #4]
 801ba76:	51eb      	str	r3, [r5, r7]
 801ba78:	3504      	adds	r5, #4
 801ba7a:	e799      	b.n	801b9b0 <__multiply+0x7c>
 801ba7c:	3e01      	subs	r6, #1
 801ba7e:	e79b      	b.n	801b9b8 <__multiply+0x84>
 801ba80:	0801e579 	.word	0x0801e579
 801ba84:	0801e5ea 	.word	0x0801e5ea

0801ba88 <__pow5mult>:
 801ba88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba8c:	4615      	mov	r5, r2
 801ba8e:	f012 0203 	ands.w	r2, r2, #3
 801ba92:	4607      	mov	r7, r0
 801ba94:	460e      	mov	r6, r1
 801ba96:	d007      	beq.n	801baa8 <__pow5mult+0x20>
 801ba98:	4c25      	ldr	r4, [pc, #148]	@ (801bb30 <__pow5mult+0xa8>)
 801ba9a:	3a01      	subs	r2, #1
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801baa2:	f7ff fe55 	bl	801b750 <__multadd>
 801baa6:	4606      	mov	r6, r0
 801baa8:	10ad      	asrs	r5, r5, #2
 801baaa:	d03d      	beq.n	801bb28 <__pow5mult+0xa0>
 801baac:	69fc      	ldr	r4, [r7, #28]
 801baae:	b97c      	cbnz	r4, 801bad0 <__pow5mult+0x48>
 801bab0:	2010      	movs	r0, #16
 801bab2:	f7ff fd23 	bl	801b4fc <malloc>
 801bab6:	4602      	mov	r2, r0
 801bab8:	61f8      	str	r0, [r7, #28]
 801baba:	b928      	cbnz	r0, 801bac8 <__pow5mult+0x40>
 801babc:	4b1d      	ldr	r3, [pc, #116]	@ (801bb34 <__pow5mult+0xac>)
 801babe:	481e      	ldr	r0, [pc, #120]	@ (801bb38 <__pow5mult+0xb0>)
 801bac0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801bac4:	f000 fccc 	bl	801c460 <__assert_func>
 801bac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bacc:	6004      	str	r4, [r0, #0]
 801bace:	60c4      	str	r4, [r0, #12]
 801bad0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bad8:	b94c      	cbnz	r4, 801baee <__pow5mult+0x66>
 801bada:	f240 2171 	movw	r1, #625	@ 0x271
 801bade:	4638      	mov	r0, r7
 801bae0:	f7ff ff12 	bl	801b908 <__i2b>
 801bae4:	2300      	movs	r3, #0
 801bae6:	f8c8 0008 	str.w	r0, [r8, #8]
 801baea:	4604      	mov	r4, r0
 801baec:	6003      	str	r3, [r0, #0]
 801baee:	f04f 0900 	mov.w	r9, #0
 801baf2:	07eb      	lsls	r3, r5, #31
 801baf4:	d50a      	bpl.n	801bb0c <__pow5mult+0x84>
 801baf6:	4631      	mov	r1, r6
 801baf8:	4622      	mov	r2, r4
 801bafa:	4638      	mov	r0, r7
 801bafc:	f7ff ff1a 	bl	801b934 <__multiply>
 801bb00:	4631      	mov	r1, r6
 801bb02:	4680      	mov	r8, r0
 801bb04:	4638      	mov	r0, r7
 801bb06:	f7ff fe01 	bl	801b70c <_Bfree>
 801bb0a:	4646      	mov	r6, r8
 801bb0c:	106d      	asrs	r5, r5, #1
 801bb0e:	d00b      	beq.n	801bb28 <__pow5mult+0xa0>
 801bb10:	6820      	ldr	r0, [r4, #0]
 801bb12:	b938      	cbnz	r0, 801bb24 <__pow5mult+0x9c>
 801bb14:	4622      	mov	r2, r4
 801bb16:	4621      	mov	r1, r4
 801bb18:	4638      	mov	r0, r7
 801bb1a:	f7ff ff0b 	bl	801b934 <__multiply>
 801bb1e:	6020      	str	r0, [r4, #0]
 801bb20:	f8c0 9000 	str.w	r9, [r0]
 801bb24:	4604      	mov	r4, r0
 801bb26:	e7e4      	b.n	801baf2 <__pow5mult+0x6a>
 801bb28:	4630      	mov	r0, r6
 801bb2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb2e:	bf00      	nop
 801bb30:	0801e644 	.word	0x0801e644
 801bb34:	0801e50a 	.word	0x0801e50a
 801bb38:	0801e5ea 	.word	0x0801e5ea

0801bb3c <__lshift>:
 801bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb40:	460c      	mov	r4, r1
 801bb42:	6849      	ldr	r1, [r1, #4]
 801bb44:	6923      	ldr	r3, [r4, #16]
 801bb46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb4a:	68a3      	ldr	r3, [r4, #8]
 801bb4c:	4607      	mov	r7, r0
 801bb4e:	4691      	mov	r9, r2
 801bb50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb54:	f108 0601 	add.w	r6, r8, #1
 801bb58:	42b3      	cmp	r3, r6
 801bb5a:	db0b      	blt.n	801bb74 <__lshift+0x38>
 801bb5c:	4638      	mov	r0, r7
 801bb5e:	f7ff fd95 	bl	801b68c <_Balloc>
 801bb62:	4605      	mov	r5, r0
 801bb64:	b948      	cbnz	r0, 801bb7a <__lshift+0x3e>
 801bb66:	4602      	mov	r2, r0
 801bb68:	4b28      	ldr	r3, [pc, #160]	@ (801bc0c <__lshift+0xd0>)
 801bb6a:	4829      	ldr	r0, [pc, #164]	@ (801bc10 <__lshift+0xd4>)
 801bb6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bb70:	f000 fc76 	bl	801c460 <__assert_func>
 801bb74:	3101      	adds	r1, #1
 801bb76:	005b      	lsls	r3, r3, #1
 801bb78:	e7ee      	b.n	801bb58 <__lshift+0x1c>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	f100 0114 	add.w	r1, r0, #20
 801bb80:	f100 0210 	add.w	r2, r0, #16
 801bb84:	4618      	mov	r0, r3
 801bb86:	4553      	cmp	r3, sl
 801bb88:	db33      	blt.n	801bbf2 <__lshift+0xb6>
 801bb8a:	6920      	ldr	r0, [r4, #16]
 801bb8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bb90:	f104 0314 	add.w	r3, r4, #20
 801bb94:	f019 091f 	ands.w	r9, r9, #31
 801bb98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bb9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bba0:	d02b      	beq.n	801bbfa <__lshift+0xbe>
 801bba2:	f1c9 0e20 	rsb	lr, r9, #32
 801bba6:	468a      	mov	sl, r1
 801bba8:	2200      	movs	r2, #0
 801bbaa:	6818      	ldr	r0, [r3, #0]
 801bbac:	fa00 f009 	lsl.w	r0, r0, r9
 801bbb0:	4310      	orrs	r0, r2
 801bbb2:	f84a 0b04 	str.w	r0, [sl], #4
 801bbb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbba:	459c      	cmp	ip, r3
 801bbbc:	fa22 f20e 	lsr.w	r2, r2, lr
 801bbc0:	d8f3      	bhi.n	801bbaa <__lshift+0x6e>
 801bbc2:	ebac 0304 	sub.w	r3, ip, r4
 801bbc6:	3b15      	subs	r3, #21
 801bbc8:	f023 0303 	bic.w	r3, r3, #3
 801bbcc:	3304      	adds	r3, #4
 801bbce:	f104 0015 	add.w	r0, r4, #21
 801bbd2:	4584      	cmp	ip, r0
 801bbd4:	bf38      	it	cc
 801bbd6:	2304      	movcc	r3, #4
 801bbd8:	50ca      	str	r2, [r1, r3]
 801bbda:	b10a      	cbz	r2, 801bbe0 <__lshift+0xa4>
 801bbdc:	f108 0602 	add.w	r6, r8, #2
 801bbe0:	3e01      	subs	r6, #1
 801bbe2:	4638      	mov	r0, r7
 801bbe4:	612e      	str	r6, [r5, #16]
 801bbe6:	4621      	mov	r1, r4
 801bbe8:	f7ff fd90 	bl	801b70c <_Bfree>
 801bbec:	4628      	mov	r0, r5
 801bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf2:	f842 0f04 	str.w	r0, [r2, #4]!
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	e7c5      	b.n	801bb86 <__lshift+0x4a>
 801bbfa:	3904      	subs	r1, #4
 801bbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc00:	f841 2f04 	str.w	r2, [r1, #4]!
 801bc04:	459c      	cmp	ip, r3
 801bc06:	d8f9      	bhi.n	801bbfc <__lshift+0xc0>
 801bc08:	e7ea      	b.n	801bbe0 <__lshift+0xa4>
 801bc0a:	bf00      	nop
 801bc0c:	0801e579 	.word	0x0801e579
 801bc10:	0801e5ea 	.word	0x0801e5ea

0801bc14 <__mcmp>:
 801bc14:	690a      	ldr	r2, [r1, #16]
 801bc16:	4603      	mov	r3, r0
 801bc18:	6900      	ldr	r0, [r0, #16]
 801bc1a:	1a80      	subs	r0, r0, r2
 801bc1c:	b530      	push	{r4, r5, lr}
 801bc1e:	d10e      	bne.n	801bc3e <__mcmp+0x2a>
 801bc20:	3314      	adds	r3, #20
 801bc22:	3114      	adds	r1, #20
 801bc24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bc28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bc2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bc30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bc34:	4295      	cmp	r5, r2
 801bc36:	d003      	beq.n	801bc40 <__mcmp+0x2c>
 801bc38:	d205      	bcs.n	801bc46 <__mcmp+0x32>
 801bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 801bc3e:	bd30      	pop	{r4, r5, pc}
 801bc40:	42a3      	cmp	r3, r4
 801bc42:	d3f3      	bcc.n	801bc2c <__mcmp+0x18>
 801bc44:	e7fb      	b.n	801bc3e <__mcmp+0x2a>
 801bc46:	2001      	movs	r0, #1
 801bc48:	e7f9      	b.n	801bc3e <__mcmp+0x2a>
	...

0801bc4c <__mdiff>:
 801bc4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc50:	4689      	mov	r9, r1
 801bc52:	4606      	mov	r6, r0
 801bc54:	4611      	mov	r1, r2
 801bc56:	4648      	mov	r0, r9
 801bc58:	4614      	mov	r4, r2
 801bc5a:	f7ff ffdb 	bl	801bc14 <__mcmp>
 801bc5e:	1e05      	subs	r5, r0, #0
 801bc60:	d112      	bne.n	801bc88 <__mdiff+0x3c>
 801bc62:	4629      	mov	r1, r5
 801bc64:	4630      	mov	r0, r6
 801bc66:	f7ff fd11 	bl	801b68c <_Balloc>
 801bc6a:	4602      	mov	r2, r0
 801bc6c:	b928      	cbnz	r0, 801bc7a <__mdiff+0x2e>
 801bc6e:	4b3f      	ldr	r3, [pc, #252]	@ (801bd6c <__mdiff+0x120>)
 801bc70:	f240 2137 	movw	r1, #567	@ 0x237
 801bc74:	483e      	ldr	r0, [pc, #248]	@ (801bd70 <__mdiff+0x124>)
 801bc76:	f000 fbf3 	bl	801c460 <__assert_func>
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bc80:	4610      	mov	r0, r2
 801bc82:	b003      	add	sp, #12
 801bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc88:	bfbc      	itt	lt
 801bc8a:	464b      	movlt	r3, r9
 801bc8c:	46a1      	movlt	r9, r4
 801bc8e:	4630      	mov	r0, r6
 801bc90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bc94:	bfba      	itte	lt
 801bc96:	461c      	movlt	r4, r3
 801bc98:	2501      	movlt	r5, #1
 801bc9a:	2500      	movge	r5, #0
 801bc9c:	f7ff fcf6 	bl	801b68c <_Balloc>
 801bca0:	4602      	mov	r2, r0
 801bca2:	b918      	cbnz	r0, 801bcac <__mdiff+0x60>
 801bca4:	4b31      	ldr	r3, [pc, #196]	@ (801bd6c <__mdiff+0x120>)
 801bca6:	f240 2145 	movw	r1, #581	@ 0x245
 801bcaa:	e7e3      	b.n	801bc74 <__mdiff+0x28>
 801bcac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bcb0:	6926      	ldr	r6, [r4, #16]
 801bcb2:	60c5      	str	r5, [r0, #12]
 801bcb4:	f109 0310 	add.w	r3, r9, #16
 801bcb8:	f109 0514 	add.w	r5, r9, #20
 801bcbc:	f104 0e14 	add.w	lr, r4, #20
 801bcc0:	f100 0b14 	add.w	fp, r0, #20
 801bcc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bcc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bccc:	9301      	str	r3, [sp, #4]
 801bcce:	46d9      	mov	r9, fp
 801bcd0:	f04f 0c00 	mov.w	ip, #0
 801bcd4:	9b01      	ldr	r3, [sp, #4]
 801bcd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bcda:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bcde:	9301      	str	r3, [sp, #4]
 801bce0:	fa1f f38a 	uxth.w	r3, sl
 801bce4:	4619      	mov	r1, r3
 801bce6:	b283      	uxth	r3, r0
 801bce8:	1acb      	subs	r3, r1, r3
 801bcea:	0c00      	lsrs	r0, r0, #16
 801bcec:	4463      	add	r3, ip
 801bcee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bcf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bcfc:	4576      	cmp	r6, lr
 801bcfe:	f849 3b04 	str.w	r3, [r9], #4
 801bd02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd06:	d8e5      	bhi.n	801bcd4 <__mdiff+0x88>
 801bd08:	1b33      	subs	r3, r6, r4
 801bd0a:	3b15      	subs	r3, #21
 801bd0c:	f023 0303 	bic.w	r3, r3, #3
 801bd10:	3415      	adds	r4, #21
 801bd12:	3304      	adds	r3, #4
 801bd14:	42a6      	cmp	r6, r4
 801bd16:	bf38      	it	cc
 801bd18:	2304      	movcc	r3, #4
 801bd1a:	441d      	add	r5, r3
 801bd1c:	445b      	add	r3, fp
 801bd1e:	461e      	mov	r6, r3
 801bd20:	462c      	mov	r4, r5
 801bd22:	4544      	cmp	r4, r8
 801bd24:	d30e      	bcc.n	801bd44 <__mdiff+0xf8>
 801bd26:	f108 0103 	add.w	r1, r8, #3
 801bd2a:	1b49      	subs	r1, r1, r5
 801bd2c:	f021 0103 	bic.w	r1, r1, #3
 801bd30:	3d03      	subs	r5, #3
 801bd32:	45a8      	cmp	r8, r5
 801bd34:	bf38      	it	cc
 801bd36:	2100      	movcc	r1, #0
 801bd38:	440b      	add	r3, r1
 801bd3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bd3e:	b191      	cbz	r1, 801bd66 <__mdiff+0x11a>
 801bd40:	6117      	str	r7, [r2, #16]
 801bd42:	e79d      	b.n	801bc80 <__mdiff+0x34>
 801bd44:	f854 1b04 	ldr.w	r1, [r4], #4
 801bd48:	46e6      	mov	lr, ip
 801bd4a:	0c08      	lsrs	r0, r1, #16
 801bd4c:	fa1c fc81 	uxtah	ip, ip, r1
 801bd50:	4471      	add	r1, lr
 801bd52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bd56:	b289      	uxth	r1, r1
 801bd58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bd5c:	f846 1b04 	str.w	r1, [r6], #4
 801bd60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd64:	e7dd      	b.n	801bd22 <__mdiff+0xd6>
 801bd66:	3f01      	subs	r7, #1
 801bd68:	e7e7      	b.n	801bd3a <__mdiff+0xee>
 801bd6a:	bf00      	nop
 801bd6c:	0801e579 	.word	0x0801e579
 801bd70:	0801e5ea 	.word	0x0801e5ea

0801bd74 <__ulp>:
 801bd74:	b082      	sub	sp, #8
 801bd76:	ed8d 0b00 	vstr	d0, [sp]
 801bd7a:	9a01      	ldr	r2, [sp, #4]
 801bd7c:	4b0f      	ldr	r3, [pc, #60]	@ (801bdbc <__ulp+0x48>)
 801bd7e:	4013      	ands	r3, r2
 801bd80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	dc08      	bgt.n	801bd9a <__ulp+0x26>
 801bd88:	425b      	negs	r3, r3
 801bd8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bd8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bd92:	da04      	bge.n	801bd9e <__ulp+0x2a>
 801bd94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bd98:	4113      	asrs	r3, r2
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	e008      	b.n	801bdb0 <__ulp+0x3c>
 801bd9e:	f1a2 0314 	sub.w	r3, r2, #20
 801bda2:	2b1e      	cmp	r3, #30
 801bda4:	bfda      	itte	le
 801bda6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bdaa:	40da      	lsrle	r2, r3
 801bdac:	2201      	movgt	r2, #1
 801bdae:	2300      	movs	r3, #0
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	4610      	mov	r0, r2
 801bdb4:	ec41 0b10 	vmov	d0, r0, r1
 801bdb8:	b002      	add	sp, #8
 801bdba:	4770      	bx	lr
 801bdbc:	7ff00000 	.word	0x7ff00000

0801bdc0 <__b2d>:
 801bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdc4:	6906      	ldr	r6, [r0, #16]
 801bdc6:	f100 0814 	add.w	r8, r0, #20
 801bdca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bdce:	1f37      	subs	r7, r6, #4
 801bdd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bdd4:	4610      	mov	r0, r2
 801bdd6:	f7ff fd4b 	bl	801b870 <__hi0bits>
 801bdda:	f1c0 0320 	rsb	r3, r0, #32
 801bdde:	280a      	cmp	r0, #10
 801bde0:	600b      	str	r3, [r1, #0]
 801bde2:	491b      	ldr	r1, [pc, #108]	@ (801be50 <__b2d+0x90>)
 801bde4:	dc15      	bgt.n	801be12 <__b2d+0x52>
 801bde6:	f1c0 0c0b 	rsb	ip, r0, #11
 801bdea:	fa22 f30c 	lsr.w	r3, r2, ip
 801bdee:	45b8      	cmp	r8, r7
 801bdf0:	ea43 0501 	orr.w	r5, r3, r1
 801bdf4:	bf34      	ite	cc
 801bdf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bdfa:	2300      	movcs	r3, #0
 801bdfc:	3015      	adds	r0, #21
 801bdfe:	fa02 f000 	lsl.w	r0, r2, r0
 801be02:	fa23 f30c 	lsr.w	r3, r3, ip
 801be06:	4303      	orrs	r3, r0
 801be08:	461c      	mov	r4, r3
 801be0a:	ec45 4b10 	vmov	d0, r4, r5
 801be0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be12:	45b8      	cmp	r8, r7
 801be14:	bf3a      	itte	cc
 801be16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801be1a:	f1a6 0708 	subcc.w	r7, r6, #8
 801be1e:	2300      	movcs	r3, #0
 801be20:	380b      	subs	r0, #11
 801be22:	d012      	beq.n	801be4a <__b2d+0x8a>
 801be24:	f1c0 0120 	rsb	r1, r0, #32
 801be28:	fa23 f401 	lsr.w	r4, r3, r1
 801be2c:	4082      	lsls	r2, r0
 801be2e:	4322      	orrs	r2, r4
 801be30:	4547      	cmp	r7, r8
 801be32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801be36:	bf8c      	ite	hi
 801be38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801be3c:	2200      	movls	r2, #0
 801be3e:	4083      	lsls	r3, r0
 801be40:	40ca      	lsrs	r2, r1
 801be42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801be46:	4313      	orrs	r3, r2
 801be48:	e7de      	b.n	801be08 <__b2d+0x48>
 801be4a:	ea42 0501 	orr.w	r5, r2, r1
 801be4e:	e7db      	b.n	801be08 <__b2d+0x48>
 801be50:	3ff00000 	.word	0x3ff00000

0801be54 <__d2b>:
 801be54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be58:	460f      	mov	r7, r1
 801be5a:	2101      	movs	r1, #1
 801be5c:	ec59 8b10 	vmov	r8, r9, d0
 801be60:	4616      	mov	r6, r2
 801be62:	f7ff fc13 	bl	801b68c <_Balloc>
 801be66:	4604      	mov	r4, r0
 801be68:	b930      	cbnz	r0, 801be78 <__d2b+0x24>
 801be6a:	4602      	mov	r2, r0
 801be6c:	4b23      	ldr	r3, [pc, #140]	@ (801befc <__d2b+0xa8>)
 801be6e:	4824      	ldr	r0, [pc, #144]	@ (801bf00 <__d2b+0xac>)
 801be70:	f240 310f 	movw	r1, #783	@ 0x30f
 801be74:	f000 faf4 	bl	801c460 <__assert_func>
 801be78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801be7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801be80:	b10d      	cbz	r5, 801be86 <__d2b+0x32>
 801be82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801be86:	9301      	str	r3, [sp, #4]
 801be88:	f1b8 0300 	subs.w	r3, r8, #0
 801be8c:	d023      	beq.n	801bed6 <__d2b+0x82>
 801be8e:	4668      	mov	r0, sp
 801be90:	9300      	str	r3, [sp, #0]
 801be92:	f7ff fd0c 	bl	801b8ae <__lo0bits>
 801be96:	e9dd 1200 	ldrd	r1, r2, [sp]
 801be9a:	b1d0      	cbz	r0, 801bed2 <__d2b+0x7e>
 801be9c:	f1c0 0320 	rsb	r3, r0, #32
 801bea0:	fa02 f303 	lsl.w	r3, r2, r3
 801bea4:	430b      	orrs	r3, r1
 801bea6:	40c2      	lsrs	r2, r0
 801bea8:	6163      	str	r3, [r4, #20]
 801beaa:	9201      	str	r2, [sp, #4]
 801beac:	9b01      	ldr	r3, [sp, #4]
 801beae:	61a3      	str	r3, [r4, #24]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	bf0c      	ite	eq
 801beb4:	2201      	moveq	r2, #1
 801beb6:	2202      	movne	r2, #2
 801beb8:	6122      	str	r2, [r4, #16]
 801beba:	b1a5      	cbz	r5, 801bee6 <__d2b+0x92>
 801bebc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bec0:	4405      	add	r5, r0
 801bec2:	603d      	str	r5, [r7, #0]
 801bec4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bec8:	6030      	str	r0, [r6, #0]
 801beca:	4620      	mov	r0, r4
 801becc:	b003      	add	sp, #12
 801bece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bed2:	6161      	str	r1, [r4, #20]
 801bed4:	e7ea      	b.n	801beac <__d2b+0x58>
 801bed6:	a801      	add	r0, sp, #4
 801bed8:	f7ff fce9 	bl	801b8ae <__lo0bits>
 801bedc:	9b01      	ldr	r3, [sp, #4]
 801bede:	6163      	str	r3, [r4, #20]
 801bee0:	3020      	adds	r0, #32
 801bee2:	2201      	movs	r2, #1
 801bee4:	e7e8      	b.n	801beb8 <__d2b+0x64>
 801bee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801beea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801beee:	6038      	str	r0, [r7, #0]
 801bef0:	6918      	ldr	r0, [r3, #16]
 801bef2:	f7ff fcbd 	bl	801b870 <__hi0bits>
 801bef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801befa:	e7e5      	b.n	801bec8 <__d2b+0x74>
 801befc:	0801e579 	.word	0x0801e579
 801bf00:	0801e5ea 	.word	0x0801e5ea

0801bf04 <__ratio>:
 801bf04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf08:	4688      	mov	r8, r1
 801bf0a:	4669      	mov	r1, sp
 801bf0c:	4681      	mov	r9, r0
 801bf0e:	f7ff ff57 	bl	801bdc0 <__b2d>
 801bf12:	a901      	add	r1, sp, #4
 801bf14:	4640      	mov	r0, r8
 801bf16:	ec55 4b10 	vmov	r4, r5, d0
 801bf1a:	f7ff ff51 	bl	801bdc0 <__b2d>
 801bf1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801bf22:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801bf26:	1ad2      	subs	r2, r2, r3
 801bf28:	e9dd 3100 	ldrd	r3, r1, [sp]
 801bf2c:	1a5b      	subs	r3, r3, r1
 801bf2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801bf32:	ec57 6b10 	vmov	r6, r7, d0
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	bfd6      	itet	le
 801bf3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bf3e:	462a      	movgt	r2, r5
 801bf40:	463a      	movle	r2, r7
 801bf42:	46ab      	mov	fp, r5
 801bf44:	46a2      	mov	sl, r4
 801bf46:	bfce      	itee	gt
 801bf48:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bf4c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bf50:	ee00 3a90 	vmovle	s1, r3
 801bf54:	ec4b ab17 	vmov	d7, sl, fp
 801bf58:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bf5c:	b003      	add	sp, #12
 801bf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bf62 <__copybits>:
 801bf62:	3901      	subs	r1, #1
 801bf64:	b570      	push	{r4, r5, r6, lr}
 801bf66:	1149      	asrs	r1, r1, #5
 801bf68:	6914      	ldr	r4, [r2, #16]
 801bf6a:	3101      	adds	r1, #1
 801bf6c:	f102 0314 	add.w	r3, r2, #20
 801bf70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bf74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bf78:	1f05      	subs	r5, r0, #4
 801bf7a:	42a3      	cmp	r3, r4
 801bf7c:	d30c      	bcc.n	801bf98 <__copybits+0x36>
 801bf7e:	1aa3      	subs	r3, r4, r2
 801bf80:	3b11      	subs	r3, #17
 801bf82:	f023 0303 	bic.w	r3, r3, #3
 801bf86:	3211      	adds	r2, #17
 801bf88:	42a2      	cmp	r2, r4
 801bf8a:	bf88      	it	hi
 801bf8c:	2300      	movhi	r3, #0
 801bf8e:	4418      	add	r0, r3
 801bf90:	2300      	movs	r3, #0
 801bf92:	4288      	cmp	r0, r1
 801bf94:	d305      	bcc.n	801bfa2 <__copybits+0x40>
 801bf96:	bd70      	pop	{r4, r5, r6, pc}
 801bf98:	f853 6b04 	ldr.w	r6, [r3], #4
 801bf9c:	f845 6f04 	str.w	r6, [r5, #4]!
 801bfa0:	e7eb      	b.n	801bf7a <__copybits+0x18>
 801bfa2:	f840 3b04 	str.w	r3, [r0], #4
 801bfa6:	e7f4      	b.n	801bf92 <__copybits+0x30>

0801bfa8 <__any_on>:
 801bfa8:	f100 0214 	add.w	r2, r0, #20
 801bfac:	6900      	ldr	r0, [r0, #16]
 801bfae:	114b      	asrs	r3, r1, #5
 801bfb0:	4298      	cmp	r0, r3
 801bfb2:	b510      	push	{r4, lr}
 801bfb4:	db11      	blt.n	801bfda <__any_on+0x32>
 801bfb6:	dd0a      	ble.n	801bfce <__any_on+0x26>
 801bfb8:	f011 011f 	ands.w	r1, r1, #31
 801bfbc:	d007      	beq.n	801bfce <__any_on+0x26>
 801bfbe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bfc2:	fa24 f001 	lsr.w	r0, r4, r1
 801bfc6:	fa00 f101 	lsl.w	r1, r0, r1
 801bfca:	428c      	cmp	r4, r1
 801bfcc:	d10b      	bne.n	801bfe6 <__any_on+0x3e>
 801bfce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bfd2:	4293      	cmp	r3, r2
 801bfd4:	d803      	bhi.n	801bfde <__any_on+0x36>
 801bfd6:	2000      	movs	r0, #0
 801bfd8:	bd10      	pop	{r4, pc}
 801bfda:	4603      	mov	r3, r0
 801bfdc:	e7f7      	b.n	801bfce <__any_on+0x26>
 801bfde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bfe2:	2900      	cmp	r1, #0
 801bfe4:	d0f5      	beq.n	801bfd2 <__any_on+0x2a>
 801bfe6:	2001      	movs	r0, #1
 801bfe8:	e7f6      	b.n	801bfd8 <__any_on+0x30>

0801bfea <__ascii_wctomb>:
 801bfea:	4603      	mov	r3, r0
 801bfec:	4608      	mov	r0, r1
 801bfee:	b141      	cbz	r1, 801c002 <__ascii_wctomb+0x18>
 801bff0:	2aff      	cmp	r2, #255	@ 0xff
 801bff2:	d904      	bls.n	801bffe <__ascii_wctomb+0x14>
 801bff4:	228a      	movs	r2, #138	@ 0x8a
 801bff6:	601a      	str	r2, [r3, #0]
 801bff8:	f04f 30ff 	mov.w	r0, #4294967295
 801bffc:	4770      	bx	lr
 801bffe:	700a      	strb	r2, [r1, #0]
 801c000:	2001      	movs	r0, #1
 801c002:	4770      	bx	lr

0801c004 <__ssputs_r>:
 801c004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c008:	688e      	ldr	r6, [r1, #8]
 801c00a:	461f      	mov	r7, r3
 801c00c:	42be      	cmp	r6, r7
 801c00e:	680b      	ldr	r3, [r1, #0]
 801c010:	4682      	mov	sl, r0
 801c012:	460c      	mov	r4, r1
 801c014:	4690      	mov	r8, r2
 801c016:	d82d      	bhi.n	801c074 <__ssputs_r+0x70>
 801c018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c01c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c020:	d026      	beq.n	801c070 <__ssputs_r+0x6c>
 801c022:	6965      	ldr	r5, [r4, #20]
 801c024:	6909      	ldr	r1, [r1, #16]
 801c026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c02a:	eba3 0901 	sub.w	r9, r3, r1
 801c02e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c032:	1c7b      	adds	r3, r7, #1
 801c034:	444b      	add	r3, r9
 801c036:	106d      	asrs	r5, r5, #1
 801c038:	429d      	cmp	r5, r3
 801c03a:	bf38      	it	cc
 801c03c:	461d      	movcc	r5, r3
 801c03e:	0553      	lsls	r3, r2, #21
 801c040:	d527      	bpl.n	801c092 <__ssputs_r+0x8e>
 801c042:	4629      	mov	r1, r5
 801c044:	f7ff fa84 	bl	801b550 <_malloc_r>
 801c048:	4606      	mov	r6, r0
 801c04a:	b360      	cbz	r0, 801c0a6 <__ssputs_r+0xa2>
 801c04c:	6921      	ldr	r1, [r4, #16]
 801c04e:	464a      	mov	r2, r9
 801c050:	f7fe f8d9 	bl	801a206 <memcpy>
 801c054:	89a3      	ldrh	r3, [r4, #12]
 801c056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c05e:	81a3      	strh	r3, [r4, #12]
 801c060:	6126      	str	r6, [r4, #16]
 801c062:	6165      	str	r5, [r4, #20]
 801c064:	444e      	add	r6, r9
 801c066:	eba5 0509 	sub.w	r5, r5, r9
 801c06a:	6026      	str	r6, [r4, #0]
 801c06c:	60a5      	str	r5, [r4, #8]
 801c06e:	463e      	mov	r6, r7
 801c070:	42be      	cmp	r6, r7
 801c072:	d900      	bls.n	801c076 <__ssputs_r+0x72>
 801c074:	463e      	mov	r6, r7
 801c076:	6820      	ldr	r0, [r4, #0]
 801c078:	4632      	mov	r2, r6
 801c07a:	4641      	mov	r1, r8
 801c07c:	f000 f9c6 	bl	801c40c <memmove>
 801c080:	68a3      	ldr	r3, [r4, #8]
 801c082:	1b9b      	subs	r3, r3, r6
 801c084:	60a3      	str	r3, [r4, #8]
 801c086:	6823      	ldr	r3, [r4, #0]
 801c088:	4433      	add	r3, r6
 801c08a:	6023      	str	r3, [r4, #0]
 801c08c:	2000      	movs	r0, #0
 801c08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c092:	462a      	mov	r2, r5
 801c094:	f000 fa16 	bl	801c4c4 <_realloc_r>
 801c098:	4606      	mov	r6, r0
 801c09a:	2800      	cmp	r0, #0
 801c09c:	d1e0      	bne.n	801c060 <__ssputs_r+0x5c>
 801c09e:	6921      	ldr	r1, [r4, #16]
 801c0a0:	4650      	mov	r0, sl
 801c0a2:	f7fe fea7 	bl	801adf4 <_free_r>
 801c0a6:	230c      	movs	r3, #12
 801c0a8:	f8ca 3000 	str.w	r3, [sl]
 801c0ac:	89a3      	ldrh	r3, [r4, #12]
 801c0ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0b2:	81a3      	strh	r3, [r4, #12]
 801c0b4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0b8:	e7e9      	b.n	801c08e <__ssputs_r+0x8a>
	...

0801c0bc <_svfiprintf_r>:
 801c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0c0:	4698      	mov	r8, r3
 801c0c2:	898b      	ldrh	r3, [r1, #12]
 801c0c4:	061b      	lsls	r3, r3, #24
 801c0c6:	b09d      	sub	sp, #116	@ 0x74
 801c0c8:	4607      	mov	r7, r0
 801c0ca:	460d      	mov	r5, r1
 801c0cc:	4614      	mov	r4, r2
 801c0ce:	d510      	bpl.n	801c0f2 <_svfiprintf_r+0x36>
 801c0d0:	690b      	ldr	r3, [r1, #16]
 801c0d2:	b973      	cbnz	r3, 801c0f2 <_svfiprintf_r+0x36>
 801c0d4:	2140      	movs	r1, #64	@ 0x40
 801c0d6:	f7ff fa3b 	bl	801b550 <_malloc_r>
 801c0da:	6028      	str	r0, [r5, #0]
 801c0dc:	6128      	str	r0, [r5, #16]
 801c0de:	b930      	cbnz	r0, 801c0ee <_svfiprintf_r+0x32>
 801c0e0:	230c      	movs	r3, #12
 801c0e2:	603b      	str	r3, [r7, #0]
 801c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0e8:	b01d      	add	sp, #116	@ 0x74
 801c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ee:	2340      	movs	r3, #64	@ 0x40
 801c0f0:	616b      	str	r3, [r5, #20]
 801c0f2:	2300      	movs	r3, #0
 801c0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0f6:	2320      	movs	r3, #32
 801c0f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801c100:	2330      	movs	r3, #48	@ 0x30
 801c102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c2a0 <_svfiprintf_r+0x1e4>
 801c106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c10a:	f04f 0901 	mov.w	r9, #1
 801c10e:	4623      	mov	r3, r4
 801c110:	469a      	mov	sl, r3
 801c112:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c116:	b10a      	cbz	r2, 801c11c <_svfiprintf_r+0x60>
 801c118:	2a25      	cmp	r2, #37	@ 0x25
 801c11a:	d1f9      	bne.n	801c110 <_svfiprintf_r+0x54>
 801c11c:	ebba 0b04 	subs.w	fp, sl, r4
 801c120:	d00b      	beq.n	801c13a <_svfiprintf_r+0x7e>
 801c122:	465b      	mov	r3, fp
 801c124:	4622      	mov	r2, r4
 801c126:	4629      	mov	r1, r5
 801c128:	4638      	mov	r0, r7
 801c12a:	f7ff ff6b 	bl	801c004 <__ssputs_r>
 801c12e:	3001      	adds	r0, #1
 801c130:	f000 80a7 	beq.w	801c282 <_svfiprintf_r+0x1c6>
 801c134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c136:	445a      	add	r2, fp
 801c138:	9209      	str	r2, [sp, #36]	@ 0x24
 801c13a:	f89a 3000 	ldrb.w	r3, [sl]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	f000 809f 	beq.w	801c282 <_svfiprintf_r+0x1c6>
 801c144:	2300      	movs	r3, #0
 801c146:	f04f 32ff 	mov.w	r2, #4294967295
 801c14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c14e:	f10a 0a01 	add.w	sl, sl, #1
 801c152:	9304      	str	r3, [sp, #16]
 801c154:	9307      	str	r3, [sp, #28]
 801c156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c15a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c15c:	4654      	mov	r4, sl
 801c15e:	2205      	movs	r2, #5
 801c160:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c164:	484e      	ldr	r0, [pc, #312]	@ (801c2a0 <_svfiprintf_r+0x1e4>)
 801c166:	f7e4 f8e3 	bl	8000330 <memchr>
 801c16a:	9a04      	ldr	r2, [sp, #16]
 801c16c:	b9d8      	cbnz	r0, 801c1a6 <_svfiprintf_r+0xea>
 801c16e:	06d0      	lsls	r0, r2, #27
 801c170:	bf44      	itt	mi
 801c172:	2320      	movmi	r3, #32
 801c174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c178:	0711      	lsls	r1, r2, #28
 801c17a:	bf44      	itt	mi
 801c17c:	232b      	movmi	r3, #43	@ 0x2b
 801c17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c182:	f89a 3000 	ldrb.w	r3, [sl]
 801c186:	2b2a      	cmp	r3, #42	@ 0x2a
 801c188:	d015      	beq.n	801c1b6 <_svfiprintf_r+0xfa>
 801c18a:	9a07      	ldr	r2, [sp, #28]
 801c18c:	4654      	mov	r4, sl
 801c18e:	2000      	movs	r0, #0
 801c190:	f04f 0c0a 	mov.w	ip, #10
 801c194:	4621      	mov	r1, r4
 801c196:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c19a:	3b30      	subs	r3, #48	@ 0x30
 801c19c:	2b09      	cmp	r3, #9
 801c19e:	d94b      	bls.n	801c238 <_svfiprintf_r+0x17c>
 801c1a0:	b1b0      	cbz	r0, 801c1d0 <_svfiprintf_r+0x114>
 801c1a2:	9207      	str	r2, [sp, #28]
 801c1a4:	e014      	b.n	801c1d0 <_svfiprintf_r+0x114>
 801c1a6:	eba0 0308 	sub.w	r3, r0, r8
 801c1aa:	fa09 f303 	lsl.w	r3, r9, r3
 801c1ae:	4313      	orrs	r3, r2
 801c1b0:	9304      	str	r3, [sp, #16]
 801c1b2:	46a2      	mov	sl, r4
 801c1b4:	e7d2      	b.n	801c15c <_svfiprintf_r+0xa0>
 801c1b6:	9b03      	ldr	r3, [sp, #12]
 801c1b8:	1d19      	adds	r1, r3, #4
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	9103      	str	r1, [sp, #12]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	bfbb      	ittet	lt
 801c1c2:	425b      	neglt	r3, r3
 801c1c4:	f042 0202 	orrlt.w	r2, r2, #2
 801c1c8:	9307      	strge	r3, [sp, #28]
 801c1ca:	9307      	strlt	r3, [sp, #28]
 801c1cc:	bfb8      	it	lt
 801c1ce:	9204      	strlt	r2, [sp, #16]
 801c1d0:	7823      	ldrb	r3, [r4, #0]
 801c1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1d4:	d10a      	bne.n	801c1ec <_svfiprintf_r+0x130>
 801c1d6:	7863      	ldrb	r3, [r4, #1]
 801c1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1da:	d132      	bne.n	801c242 <_svfiprintf_r+0x186>
 801c1dc:	9b03      	ldr	r3, [sp, #12]
 801c1de:	1d1a      	adds	r2, r3, #4
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	9203      	str	r2, [sp, #12]
 801c1e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c1e8:	3402      	adds	r4, #2
 801c1ea:	9305      	str	r3, [sp, #20]
 801c1ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c2b0 <_svfiprintf_r+0x1f4>
 801c1f0:	7821      	ldrb	r1, [r4, #0]
 801c1f2:	2203      	movs	r2, #3
 801c1f4:	4650      	mov	r0, sl
 801c1f6:	f7e4 f89b 	bl	8000330 <memchr>
 801c1fa:	b138      	cbz	r0, 801c20c <_svfiprintf_r+0x150>
 801c1fc:	9b04      	ldr	r3, [sp, #16]
 801c1fe:	eba0 000a 	sub.w	r0, r0, sl
 801c202:	2240      	movs	r2, #64	@ 0x40
 801c204:	4082      	lsls	r2, r0
 801c206:	4313      	orrs	r3, r2
 801c208:	3401      	adds	r4, #1
 801c20a:	9304      	str	r3, [sp, #16]
 801c20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c210:	4824      	ldr	r0, [pc, #144]	@ (801c2a4 <_svfiprintf_r+0x1e8>)
 801c212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c216:	2206      	movs	r2, #6
 801c218:	f7e4 f88a 	bl	8000330 <memchr>
 801c21c:	2800      	cmp	r0, #0
 801c21e:	d036      	beq.n	801c28e <_svfiprintf_r+0x1d2>
 801c220:	4b21      	ldr	r3, [pc, #132]	@ (801c2a8 <_svfiprintf_r+0x1ec>)
 801c222:	bb1b      	cbnz	r3, 801c26c <_svfiprintf_r+0x1b0>
 801c224:	9b03      	ldr	r3, [sp, #12]
 801c226:	3307      	adds	r3, #7
 801c228:	f023 0307 	bic.w	r3, r3, #7
 801c22c:	3308      	adds	r3, #8
 801c22e:	9303      	str	r3, [sp, #12]
 801c230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c232:	4433      	add	r3, r6
 801c234:	9309      	str	r3, [sp, #36]	@ 0x24
 801c236:	e76a      	b.n	801c10e <_svfiprintf_r+0x52>
 801c238:	fb0c 3202 	mla	r2, ip, r2, r3
 801c23c:	460c      	mov	r4, r1
 801c23e:	2001      	movs	r0, #1
 801c240:	e7a8      	b.n	801c194 <_svfiprintf_r+0xd8>
 801c242:	2300      	movs	r3, #0
 801c244:	3401      	adds	r4, #1
 801c246:	9305      	str	r3, [sp, #20]
 801c248:	4619      	mov	r1, r3
 801c24a:	f04f 0c0a 	mov.w	ip, #10
 801c24e:	4620      	mov	r0, r4
 801c250:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c254:	3a30      	subs	r2, #48	@ 0x30
 801c256:	2a09      	cmp	r2, #9
 801c258:	d903      	bls.n	801c262 <_svfiprintf_r+0x1a6>
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d0c6      	beq.n	801c1ec <_svfiprintf_r+0x130>
 801c25e:	9105      	str	r1, [sp, #20]
 801c260:	e7c4      	b.n	801c1ec <_svfiprintf_r+0x130>
 801c262:	fb0c 2101 	mla	r1, ip, r1, r2
 801c266:	4604      	mov	r4, r0
 801c268:	2301      	movs	r3, #1
 801c26a:	e7f0      	b.n	801c24e <_svfiprintf_r+0x192>
 801c26c:	ab03      	add	r3, sp, #12
 801c26e:	9300      	str	r3, [sp, #0]
 801c270:	462a      	mov	r2, r5
 801c272:	4b0e      	ldr	r3, [pc, #56]	@ (801c2ac <_svfiprintf_r+0x1f0>)
 801c274:	a904      	add	r1, sp, #16
 801c276:	4638      	mov	r0, r7
 801c278:	f7fd fa5a 	bl	8019730 <_printf_float>
 801c27c:	1c42      	adds	r2, r0, #1
 801c27e:	4606      	mov	r6, r0
 801c280:	d1d6      	bne.n	801c230 <_svfiprintf_r+0x174>
 801c282:	89ab      	ldrh	r3, [r5, #12]
 801c284:	065b      	lsls	r3, r3, #25
 801c286:	f53f af2d 	bmi.w	801c0e4 <_svfiprintf_r+0x28>
 801c28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c28c:	e72c      	b.n	801c0e8 <_svfiprintf_r+0x2c>
 801c28e:	ab03      	add	r3, sp, #12
 801c290:	9300      	str	r3, [sp, #0]
 801c292:	462a      	mov	r2, r5
 801c294:	4b05      	ldr	r3, [pc, #20]	@ (801c2ac <_svfiprintf_r+0x1f0>)
 801c296:	a904      	add	r1, sp, #16
 801c298:	4638      	mov	r0, r7
 801c29a:	f7fd fcd1 	bl	8019c40 <_printf_i>
 801c29e:	e7ed      	b.n	801c27c <_svfiprintf_r+0x1c0>
 801c2a0:	0801e740 	.word	0x0801e740
 801c2a4:	0801e74a 	.word	0x0801e74a
 801c2a8:	08019731 	.word	0x08019731
 801c2ac:	0801c005 	.word	0x0801c005
 801c2b0:	0801e746 	.word	0x0801e746

0801c2b4 <__sflush_r>:
 801c2b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2bc:	0716      	lsls	r6, r2, #28
 801c2be:	4605      	mov	r5, r0
 801c2c0:	460c      	mov	r4, r1
 801c2c2:	d454      	bmi.n	801c36e <__sflush_r+0xba>
 801c2c4:	684b      	ldr	r3, [r1, #4]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	dc02      	bgt.n	801c2d0 <__sflush_r+0x1c>
 801c2ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	dd48      	ble.n	801c362 <__sflush_r+0xae>
 801c2d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c2d2:	2e00      	cmp	r6, #0
 801c2d4:	d045      	beq.n	801c362 <__sflush_r+0xae>
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c2dc:	682f      	ldr	r7, [r5, #0]
 801c2de:	6a21      	ldr	r1, [r4, #32]
 801c2e0:	602b      	str	r3, [r5, #0]
 801c2e2:	d030      	beq.n	801c346 <__sflush_r+0x92>
 801c2e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c2e6:	89a3      	ldrh	r3, [r4, #12]
 801c2e8:	0759      	lsls	r1, r3, #29
 801c2ea:	d505      	bpl.n	801c2f8 <__sflush_r+0x44>
 801c2ec:	6863      	ldr	r3, [r4, #4]
 801c2ee:	1ad2      	subs	r2, r2, r3
 801c2f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c2f2:	b10b      	cbz	r3, 801c2f8 <__sflush_r+0x44>
 801c2f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c2f6:	1ad2      	subs	r2, r2, r3
 801c2f8:	2300      	movs	r3, #0
 801c2fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c2fc:	6a21      	ldr	r1, [r4, #32]
 801c2fe:	4628      	mov	r0, r5
 801c300:	47b0      	blx	r6
 801c302:	1c43      	adds	r3, r0, #1
 801c304:	89a3      	ldrh	r3, [r4, #12]
 801c306:	d106      	bne.n	801c316 <__sflush_r+0x62>
 801c308:	6829      	ldr	r1, [r5, #0]
 801c30a:	291d      	cmp	r1, #29
 801c30c:	d82b      	bhi.n	801c366 <__sflush_r+0xb2>
 801c30e:	4a2a      	ldr	r2, [pc, #168]	@ (801c3b8 <__sflush_r+0x104>)
 801c310:	410a      	asrs	r2, r1
 801c312:	07d6      	lsls	r6, r2, #31
 801c314:	d427      	bmi.n	801c366 <__sflush_r+0xb2>
 801c316:	2200      	movs	r2, #0
 801c318:	6062      	str	r2, [r4, #4]
 801c31a:	04d9      	lsls	r1, r3, #19
 801c31c:	6922      	ldr	r2, [r4, #16]
 801c31e:	6022      	str	r2, [r4, #0]
 801c320:	d504      	bpl.n	801c32c <__sflush_r+0x78>
 801c322:	1c42      	adds	r2, r0, #1
 801c324:	d101      	bne.n	801c32a <__sflush_r+0x76>
 801c326:	682b      	ldr	r3, [r5, #0]
 801c328:	b903      	cbnz	r3, 801c32c <__sflush_r+0x78>
 801c32a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c32c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c32e:	602f      	str	r7, [r5, #0]
 801c330:	b1b9      	cbz	r1, 801c362 <__sflush_r+0xae>
 801c332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c336:	4299      	cmp	r1, r3
 801c338:	d002      	beq.n	801c340 <__sflush_r+0x8c>
 801c33a:	4628      	mov	r0, r5
 801c33c:	f7fe fd5a 	bl	801adf4 <_free_r>
 801c340:	2300      	movs	r3, #0
 801c342:	6363      	str	r3, [r4, #52]	@ 0x34
 801c344:	e00d      	b.n	801c362 <__sflush_r+0xae>
 801c346:	2301      	movs	r3, #1
 801c348:	4628      	mov	r0, r5
 801c34a:	47b0      	blx	r6
 801c34c:	4602      	mov	r2, r0
 801c34e:	1c50      	adds	r0, r2, #1
 801c350:	d1c9      	bne.n	801c2e6 <__sflush_r+0x32>
 801c352:	682b      	ldr	r3, [r5, #0]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d0c6      	beq.n	801c2e6 <__sflush_r+0x32>
 801c358:	2b1d      	cmp	r3, #29
 801c35a:	d001      	beq.n	801c360 <__sflush_r+0xac>
 801c35c:	2b16      	cmp	r3, #22
 801c35e:	d11e      	bne.n	801c39e <__sflush_r+0xea>
 801c360:	602f      	str	r7, [r5, #0]
 801c362:	2000      	movs	r0, #0
 801c364:	e022      	b.n	801c3ac <__sflush_r+0xf8>
 801c366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c36a:	b21b      	sxth	r3, r3
 801c36c:	e01b      	b.n	801c3a6 <__sflush_r+0xf2>
 801c36e:	690f      	ldr	r7, [r1, #16]
 801c370:	2f00      	cmp	r7, #0
 801c372:	d0f6      	beq.n	801c362 <__sflush_r+0xae>
 801c374:	0793      	lsls	r3, r2, #30
 801c376:	680e      	ldr	r6, [r1, #0]
 801c378:	bf08      	it	eq
 801c37a:	694b      	ldreq	r3, [r1, #20]
 801c37c:	600f      	str	r7, [r1, #0]
 801c37e:	bf18      	it	ne
 801c380:	2300      	movne	r3, #0
 801c382:	eba6 0807 	sub.w	r8, r6, r7
 801c386:	608b      	str	r3, [r1, #8]
 801c388:	f1b8 0f00 	cmp.w	r8, #0
 801c38c:	dde9      	ble.n	801c362 <__sflush_r+0xae>
 801c38e:	6a21      	ldr	r1, [r4, #32]
 801c390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c392:	4643      	mov	r3, r8
 801c394:	463a      	mov	r2, r7
 801c396:	4628      	mov	r0, r5
 801c398:	47b0      	blx	r6
 801c39a:	2800      	cmp	r0, #0
 801c39c:	dc08      	bgt.n	801c3b0 <__sflush_r+0xfc>
 801c39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c3a6:	81a3      	strh	r3, [r4, #12]
 801c3a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3b0:	4407      	add	r7, r0
 801c3b2:	eba8 0800 	sub.w	r8, r8, r0
 801c3b6:	e7e7      	b.n	801c388 <__sflush_r+0xd4>
 801c3b8:	dfbffffe 	.word	0xdfbffffe

0801c3bc <_fflush_r>:
 801c3bc:	b538      	push	{r3, r4, r5, lr}
 801c3be:	690b      	ldr	r3, [r1, #16]
 801c3c0:	4605      	mov	r5, r0
 801c3c2:	460c      	mov	r4, r1
 801c3c4:	b913      	cbnz	r3, 801c3cc <_fflush_r+0x10>
 801c3c6:	2500      	movs	r5, #0
 801c3c8:	4628      	mov	r0, r5
 801c3ca:	bd38      	pop	{r3, r4, r5, pc}
 801c3cc:	b118      	cbz	r0, 801c3d6 <_fflush_r+0x1a>
 801c3ce:	6a03      	ldr	r3, [r0, #32]
 801c3d0:	b90b      	cbnz	r3, 801c3d6 <_fflush_r+0x1a>
 801c3d2:	f7fd fde1 	bl	8019f98 <__sinit>
 801c3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d0f3      	beq.n	801c3c6 <_fflush_r+0xa>
 801c3de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c3e0:	07d0      	lsls	r0, r2, #31
 801c3e2:	d404      	bmi.n	801c3ee <_fflush_r+0x32>
 801c3e4:	0599      	lsls	r1, r3, #22
 801c3e6:	d402      	bmi.n	801c3ee <_fflush_r+0x32>
 801c3e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3ea:	f7fd ff0a 	bl	801a202 <__retarget_lock_acquire_recursive>
 801c3ee:	4628      	mov	r0, r5
 801c3f0:	4621      	mov	r1, r4
 801c3f2:	f7ff ff5f 	bl	801c2b4 <__sflush_r>
 801c3f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c3f8:	07da      	lsls	r2, r3, #31
 801c3fa:	4605      	mov	r5, r0
 801c3fc:	d4e4      	bmi.n	801c3c8 <_fflush_r+0xc>
 801c3fe:	89a3      	ldrh	r3, [r4, #12]
 801c400:	059b      	lsls	r3, r3, #22
 801c402:	d4e1      	bmi.n	801c3c8 <_fflush_r+0xc>
 801c404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c406:	f7fd fefd 	bl	801a204 <__retarget_lock_release_recursive>
 801c40a:	e7dd      	b.n	801c3c8 <_fflush_r+0xc>

0801c40c <memmove>:
 801c40c:	4288      	cmp	r0, r1
 801c40e:	b510      	push	{r4, lr}
 801c410:	eb01 0402 	add.w	r4, r1, r2
 801c414:	d902      	bls.n	801c41c <memmove+0x10>
 801c416:	4284      	cmp	r4, r0
 801c418:	4623      	mov	r3, r4
 801c41a:	d807      	bhi.n	801c42c <memmove+0x20>
 801c41c:	1e43      	subs	r3, r0, #1
 801c41e:	42a1      	cmp	r1, r4
 801c420:	d008      	beq.n	801c434 <memmove+0x28>
 801c422:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c42a:	e7f8      	b.n	801c41e <memmove+0x12>
 801c42c:	4402      	add	r2, r0
 801c42e:	4601      	mov	r1, r0
 801c430:	428a      	cmp	r2, r1
 801c432:	d100      	bne.n	801c436 <memmove+0x2a>
 801c434:	bd10      	pop	{r4, pc}
 801c436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c43e:	e7f7      	b.n	801c430 <memmove+0x24>

0801c440 <_sbrk_r>:
 801c440:	b538      	push	{r3, r4, r5, lr}
 801c442:	4d06      	ldr	r5, [pc, #24]	@ (801c45c <_sbrk_r+0x1c>)
 801c444:	2300      	movs	r3, #0
 801c446:	4604      	mov	r4, r0
 801c448:	4608      	mov	r0, r1
 801c44a:	602b      	str	r3, [r5, #0]
 801c44c:	f7e6 fcfc 	bl	8002e48 <_sbrk>
 801c450:	1c43      	adds	r3, r0, #1
 801c452:	d102      	bne.n	801c45a <_sbrk_r+0x1a>
 801c454:	682b      	ldr	r3, [r5, #0]
 801c456:	b103      	cbz	r3, 801c45a <_sbrk_r+0x1a>
 801c458:	6023      	str	r3, [r4, #0]
 801c45a:	bd38      	pop	{r3, r4, r5, pc}
 801c45c:	2401f92c 	.word	0x2401f92c

0801c460 <__assert_func>:
 801c460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c462:	4614      	mov	r4, r2
 801c464:	461a      	mov	r2, r3
 801c466:	4b09      	ldr	r3, [pc, #36]	@ (801c48c <__assert_func+0x2c>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	4605      	mov	r5, r0
 801c46c:	68d8      	ldr	r0, [r3, #12]
 801c46e:	b954      	cbnz	r4, 801c486 <__assert_func+0x26>
 801c470:	4b07      	ldr	r3, [pc, #28]	@ (801c490 <__assert_func+0x30>)
 801c472:	461c      	mov	r4, r3
 801c474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c478:	9100      	str	r1, [sp, #0]
 801c47a:	462b      	mov	r3, r5
 801c47c:	4905      	ldr	r1, [pc, #20]	@ (801c494 <__assert_func+0x34>)
 801c47e:	f000 f84f 	bl	801c520 <fiprintf>
 801c482:	f000 f85f 	bl	801c544 <abort>
 801c486:	4b04      	ldr	r3, [pc, #16]	@ (801c498 <__assert_func+0x38>)
 801c488:	e7f4      	b.n	801c474 <__assert_func+0x14>
 801c48a:	bf00      	nop
 801c48c:	240002ac 	.word	0x240002ac
 801c490:	0801e78c 	.word	0x0801e78c
 801c494:	0801e75e 	.word	0x0801e75e
 801c498:	0801e751 	.word	0x0801e751

0801c49c <_calloc_r>:
 801c49c:	b570      	push	{r4, r5, r6, lr}
 801c49e:	fba1 5402 	umull	r5, r4, r1, r2
 801c4a2:	b93c      	cbnz	r4, 801c4b4 <_calloc_r+0x18>
 801c4a4:	4629      	mov	r1, r5
 801c4a6:	f7ff f853 	bl	801b550 <_malloc_r>
 801c4aa:	4606      	mov	r6, r0
 801c4ac:	b928      	cbnz	r0, 801c4ba <_calloc_r+0x1e>
 801c4ae:	2600      	movs	r6, #0
 801c4b0:	4630      	mov	r0, r6
 801c4b2:	bd70      	pop	{r4, r5, r6, pc}
 801c4b4:	220c      	movs	r2, #12
 801c4b6:	6002      	str	r2, [r0, #0]
 801c4b8:	e7f9      	b.n	801c4ae <_calloc_r+0x12>
 801c4ba:	462a      	mov	r2, r5
 801c4bc:	4621      	mov	r1, r4
 801c4be:	f7fd fe04 	bl	801a0ca <memset>
 801c4c2:	e7f5      	b.n	801c4b0 <_calloc_r+0x14>

0801c4c4 <_realloc_r>:
 801c4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4c8:	4680      	mov	r8, r0
 801c4ca:	4615      	mov	r5, r2
 801c4cc:	460c      	mov	r4, r1
 801c4ce:	b921      	cbnz	r1, 801c4da <_realloc_r+0x16>
 801c4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4d4:	4611      	mov	r1, r2
 801c4d6:	f7ff b83b 	b.w	801b550 <_malloc_r>
 801c4da:	b92a      	cbnz	r2, 801c4e8 <_realloc_r+0x24>
 801c4dc:	f7fe fc8a 	bl	801adf4 <_free_r>
 801c4e0:	2400      	movs	r4, #0
 801c4e2:	4620      	mov	r0, r4
 801c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4e8:	f000 f833 	bl	801c552 <_malloc_usable_size_r>
 801c4ec:	4285      	cmp	r5, r0
 801c4ee:	4606      	mov	r6, r0
 801c4f0:	d802      	bhi.n	801c4f8 <_realloc_r+0x34>
 801c4f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c4f6:	d8f4      	bhi.n	801c4e2 <_realloc_r+0x1e>
 801c4f8:	4629      	mov	r1, r5
 801c4fa:	4640      	mov	r0, r8
 801c4fc:	f7ff f828 	bl	801b550 <_malloc_r>
 801c500:	4607      	mov	r7, r0
 801c502:	2800      	cmp	r0, #0
 801c504:	d0ec      	beq.n	801c4e0 <_realloc_r+0x1c>
 801c506:	42b5      	cmp	r5, r6
 801c508:	462a      	mov	r2, r5
 801c50a:	4621      	mov	r1, r4
 801c50c:	bf28      	it	cs
 801c50e:	4632      	movcs	r2, r6
 801c510:	f7fd fe79 	bl	801a206 <memcpy>
 801c514:	4621      	mov	r1, r4
 801c516:	4640      	mov	r0, r8
 801c518:	f7fe fc6c 	bl	801adf4 <_free_r>
 801c51c:	463c      	mov	r4, r7
 801c51e:	e7e0      	b.n	801c4e2 <_realloc_r+0x1e>

0801c520 <fiprintf>:
 801c520:	b40e      	push	{r1, r2, r3}
 801c522:	b503      	push	{r0, r1, lr}
 801c524:	4601      	mov	r1, r0
 801c526:	ab03      	add	r3, sp, #12
 801c528:	4805      	ldr	r0, [pc, #20]	@ (801c540 <fiprintf+0x20>)
 801c52a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c52e:	6800      	ldr	r0, [r0, #0]
 801c530:	9301      	str	r3, [sp, #4]
 801c532:	f000 f83f 	bl	801c5b4 <_vfiprintf_r>
 801c536:	b002      	add	sp, #8
 801c538:	f85d eb04 	ldr.w	lr, [sp], #4
 801c53c:	b003      	add	sp, #12
 801c53e:	4770      	bx	lr
 801c540:	240002ac 	.word	0x240002ac

0801c544 <abort>:
 801c544:	b508      	push	{r3, lr}
 801c546:	2006      	movs	r0, #6
 801c548:	f000 fa08 	bl	801c95c <raise>
 801c54c:	2001      	movs	r0, #1
 801c54e:	f7e6 fc03 	bl	8002d58 <_exit>

0801c552 <_malloc_usable_size_r>:
 801c552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c556:	1f18      	subs	r0, r3, #4
 801c558:	2b00      	cmp	r3, #0
 801c55a:	bfbc      	itt	lt
 801c55c:	580b      	ldrlt	r3, [r1, r0]
 801c55e:	18c0      	addlt	r0, r0, r3
 801c560:	4770      	bx	lr

0801c562 <__sfputc_r>:
 801c562:	6893      	ldr	r3, [r2, #8]
 801c564:	3b01      	subs	r3, #1
 801c566:	2b00      	cmp	r3, #0
 801c568:	b410      	push	{r4}
 801c56a:	6093      	str	r3, [r2, #8]
 801c56c:	da08      	bge.n	801c580 <__sfputc_r+0x1e>
 801c56e:	6994      	ldr	r4, [r2, #24]
 801c570:	42a3      	cmp	r3, r4
 801c572:	db01      	blt.n	801c578 <__sfputc_r+0x16>
 801c574:	290a      	cmp	r1, #10
 801c576:	d103      	bne.n	801c580 <__sfputc_r+0x1e>
 801c578:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c57c:	f000 b932 	b.w	801c7e4 <__swbuf_r>
 801c580:	6813      	ldr	r3, [r2, #0]
 801c582:	1c58      	adds	r0, r3, #1
 801c584:	6010      	str	r0, [r2, #0]
 801c586:	7019      	strb	r1, [r3, #0]
 801c588:	4608      	mov	r0, r1
 801c58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c58e:	4770      	bx	lr

0801c590 <__sfputs_r>:
 801c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c592:	4606      	mov	r6, r0
 801c594:	460f      	mov	r7, r1
 801c596:	4614      	mov	r4, r2
 801c598:	18d5      	adds	r5, r2, r3
 801c59a:	42ac      	cmp	r4, r5
 801c59c:	d101      	bne.n	801c5a2 <__sfputs_r+0x12>
 801c59e:	2000      	movs	r0, #0
 801c5a0:	e007      	b.n	801c5b2 <__sfputs_r+0x22>
 801c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5a6:	463a      	mov	r2, r7
 801c5a8:	4630      	mov	r0, r6
 801c5aa:	f7ff ffda 	bl	801c562 <__sfputc_r>
 801c5ae:	1c43      	adds	r3, r0, #1
 801c5b0:	d1f3      	bne.n	801c59a <__sfputs_r+0xa>
 801c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c5b4 <_vfiprintf_r>:
 801c5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b8:	460d      	mov	r5, r1
 801c5ba:	b09d      	sub	sp, #116	@ 0x74
 801c5bc:	4614      	mov	r4, r2
 801c5be:	4698      	mov	r8, r3
 801c5c0:	4606      	mov	r6, r0
 801c5c2:	b118      	cbz	r0, 801c5cc <_vfiprintf_r+0x18>
 801c5c4:	6a03      	ldr	r3, [r0, #32]
 801c5c6:	b90b      	cbnz	r3, 801c5cc <_vfiprintf_r+0x18>
 801c5c8:	f7fd fce6 	bl	8019f98 <__sinit>
 801c5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c5ce:	07d9      	lsls	r1, r3, #31
 801c5d0:	d405      	bmi.n	801c5de <_vfiprintf_r+0x2a>
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	059a      	lsls	r2, r3, #22
 801c5d6:	d402      	bmi.n	801c5de <_vfiprintf_r+0x2a>
 801c5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c5da:	f7fd fe12 	bl	801a202 <__retarget_lock_acquire_recursive>
 801c5de:	89ab      	ldrh	r3, [r5, #12]
 801c5e0:	071b      	lsls	r3, r3, #28
 801c5e2:	d501      	bpl.n	801c5e8 <_vfiprintf_r+0x34>
 801c5e4:	692b      	ldr	r3, [r5, #16]
 801c5e6:	b99b      	cbnz	r3, 801c610 <_vfiprintf_r+0x5c>
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	4630      	mov	r0, r6
 801c5ec:	f000 f938 	bl	801c860 <__swsetup_r>
 801c5f0:	b170      	cbz	r0, 801c610 <_vfiprintf_r+0x5c>
 801c5f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c5f4:	07dc      	lsls	r4, r3, #31
 801c5f6:	d504      	bpl.n	801c602 <_vfiprintf_r+0x4e>
 801c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5fc:	b01d      	add	sp, #116	@ 0x74
 801c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c602:	89ab      	ldrh	r3, [r5, #12]
 801c604:	0598      	lsls	r0, r3, #22
 801c606:	d4f7      	bmi.n	801c5f8 <_vfiprintf_r+0x44>
 801c608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c60a:	f7fd fdfb 	bl	801a204 <__retarget_lock_release_recursive>
 801c60e:	e7f3      	b.n	801c5f8 <_vfiprintf_r+0x44>
 801c610:	2300      	movs	r3, #0
 801c612:	9309      	str	r3, [sp, #36]	@ 0x24
 801c614:	2320      	movs	r3, #32
 801c616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c61a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c61e:	2330      	movs	r3, #48	@ 0x30
 801c620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c7d0 <_vfiprintf_r+0x21c>
 801c624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c628:	f04f 0901 	mov.w	r9, #1
 801c62c:	4623      	mov	r3, r4
 801c62e:	469a      	mov	sl, r3
 801c630:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c634:	b10a      	cbz	r2, 801c63a <_vfiprintf_r+0x86>
 801c636:	2a25      	cmp	r2, #37	@ 0x25
 801c638:	d1f9      	bne.n	801c62e <_vfiprintf_r+0x7a>
 801c63a:	ebba 0b04 	subs.w	fp, sl, r4
 801c63e:	d00b      	beq.n	801c658 <_vfiprintf_r+0xa4>
 801c640:	465b      	mov	r3, fp
 801c642:	4622      	mov	r2, r4
 801c644:	4629      	mov	r1, r5
 801c646:	4630      	mov	r0, r6
 801c648:	f7ff ffa2 	bl	801c590 <__sfputs_r>
 801c64c:	3001      	adds	r0, #1
 801c64e:	f000 80a7 	beq.w	801c7a0 <_vfiprintf_r+0x1ec>
 801c652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c654:	445a      	add	r2, fp
 801c656:	9209      	str	r2, [sp, #36]	@ 0x24
 801c658:	f89a 3000 	ldrb.w	r3, [sl]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	f000 809f 	beq.w	801c7a0 <_vfiprintf_r+0x1ec>
 801c662:	2300      	movs	r3, #0
 801c664:	f04f 32ff 	mov.w	r2, #4294967295
 801c668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c66c:	f10a 0a01 	add.w	sl, sl, #1
 801c670:	9304      	str	r3, [sp, #16]
 801c672:	9307      	str	r3, [sp, #28]
 801c674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c678:	931a      	str	r3, [sp, #104]	@ 0x68
 801c67a:	4654      	mov	r4, sl
 801c67c:	2205      	movs	r2, #5
 801c67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c682:	4853      	ldr	r0, [pc, #332]	@ (801c7d0 <_vfiprintf_r+0x21c>)
 801c684:	f7e3 fe54 	bl	8000330 <memchr>
 801c688:	9a04      	ldr	r2, [sp, #16]
 801c68a:	b9d8      	cbnz	r0, 801c6c4 <_vfiprintf_r+0x110>
 801c68c:	06d1      	lsls	r1, r2, #27
 801c68e:	bf44      	itt	mi
 801c690:	2320      	movmi	r3, #32
 801c692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c696:	0713      	lsls	r3, r2, #28
 801c698:	bf44      	itt	mi
 801c69a:	232b      	movmi	r3, #43	@ 0x2b
 801c69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c6a0:	f89a 3000 	ldrb.w	r3, [sl]
 801c6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6a6:	d015      	beq.n	801c6d4 <_vfiprintf_r+0x120>
 801c6a8:	9a07      	ldr	r2, [sp, #28]
 801c6aa:	4654      	mov	r4, sl
 801c6ac:	2000      	movs	r0, #0
 801c6ae:	f04f 0c0a 	mov.w	ip, #10
 801c6b2:	4621      	mov	r1, r4
 801c6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6b8:	3b30      	subs	r3, #48	@ 0x30
 801c6ba:	2b09      	cmp	r3, #9
 801c6bc:	d94b      	bls.n	801c756 <_vfiprintf_r+0x1a2>
 801c6be:	b1b0      	cbz	r0, 801c6ee <_vfiprintf_r+0x13a>
 801c6c0:	9207      	str	r2, [sp, #28]
 801c6c2:	e014      	b.n	801c6ee <_vfiprintf_r+0x13a>
 801c6c4:	eba0 0308 	sub.w	r3, r0, r8
 801c6c8:	fa09 f303 	lsl.w	r3, r9, r3
 801c6cc:	4313      	orrs	r3, r2
 801c6ce:	9304      	str	r3, [sp, #16]
 801c6d0:	46a2      	mov	sl, r4
 801c6d2:	e7d2      	b.n	801c67a <_vfiprintf_r+0xc6>
 801c6d4:	9b03      	ldr	r3, [sp, #12]
 801c6d6:	1d19      	adds	r1, r3, #4
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	9103      	str	r1, [sp, #12]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	bfbb      	ittet	lt
 801c6e0:	425b      	neglt	r3, r3
 801c6e2:	f042 0202 	orrlt.w	r2, r2, #2
 801c6e6:	9307      	strge	r3, [sp, #28]
 801c6e8:	9307      	strlt	r3, [sp, #28]
 801c6ea:	bfb8      	it	lt
 801c6ec:	9204      	strlt	r2, [sp, #16]
 801c6ee:	7823      	ldrb	r3, [r4, #0]
 801c6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6f2:	d10a      	bne.n	801c70a <_vfiprintf_r+0x156>
 801c6f4:	7863      	ldrb	r3, [r4, #1]
 801c6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6f8:	d132      	bne.n	801c760 <_vfiprintf_r+0x1ac>
 801c6fa:	9b03      	ldr	r3, [sp, #12]
 801c6fc:	1d1a      	adds	r2, r3, #4
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	9203      	str	r2, [sp, #12]
 801c702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c706:	3402      	adds	r4, #2
 801c708:	9305      	str	r3, [sp, #20]
 801c70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c7e0 <_vfiprintf_r+0x22c>
 801c70e:	7821      	ldrb	r1, [r4, #0]
 801c710:	2203      	movs	r2, #3
 801c712:	4650      	mov	r0, sl
 801c714:	f7e3 fe0c 	bl	8000330 <memchr>
 801c718:	b138      	cbz	r0, 801c72a <_vfiprintf_r+0x176>
 801c71a:	9b04      	ldr	r3, [sp, #16]
 801c71c:	eba0 000a 	sub.w	r0, r0, sl
 801c720:	2240      	movs	r2, #64	@ 0x40
 801c722:	4082      	lsls	r2, r0
 801c724:	4313      	orrs	r3, r2
 801c726:	3401      	adds	r4, #1
 801c728:	9304      	str	r3, [sp, #16]
 801c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c72e:	4829      	ldr	r0, [pc, #164]	@ (801c7d4 <_vfiprintf_r+0x220>)
 801c730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c734:	2206      	movs	r2, #6
 801c736:	f7e3 fdfb 	bl	8000330 <memchr>
 801c73a:	2800      	cmp	r0, #0
 801c73c:	d03f      	beq.n	801c7be <_vfiprintf_r+0x20a>
 801c73e:	4b26      	ldr	r3, [pc, #152]	@ (801c7d8 <_vfiprintf_r+0x224>)
 801c740:	bb1b      	cbnz	r3, 801c78a <_vfiprintf_r+0x1d6>
 801c742:	9b03      	ldr	r3, [sp, #12]
 801c744:	3307      	adds	r3, #7
 801c746:	f023 0307 	bic.w	r3, r3, #7
 801c74a:	3308      	adds	r3, #8
 801c74c:	9303      	str	r3, [sp, #12]
 801c74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c750:	443b      	add	r3, r7
 801c752:	9309      	str	r3, [sp, #36]	@ 0x24
 801c754:	e76a      	b.n	801c62c <_vfiprintf_r+0x78>
 801c756:	fb0c 3202 	mla	r2, ip, r2, r3
 801c75a:	460c      	mov	r4, r1
 801c75c:	2001      	movs	r0, #1
 801c75e:	e7a8      	b.n	801c6b2 <_vfiprintf_r+0xfe>
 801c760:	2300      	movs	r3, #0
 801c762:	3401      	adds	r4, #1
 801c764:	9305      	str	r3, [sp, #20]
 801c766:	4619      	mov	r1, r3
 801c768:	f04f 0c0a 	mov.w	ip, #10
 801c76c:	4620      	mov	r0, r4
 801c76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c772:	3a30      	subs	r2, #48	@ 0x30
 801c774:	2a09      	cmp	r2, #9
 801c776:	d903      	bls.n	801c780 <_vfiprintf_r+0x1cc>
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d0c6      	beq.n	801c70a <_vfiprintf_r+0x156>
 801c77c:	9105      	str	r1, [sp, #20]
 801c77e:	e7c4      	b.n	801c70a <_vfiprintf_r+0x156>
 801c780:	fb0c 2101 	mla	r1, ip, r1, r2
 801c784:	4604      	mov	r4, r0
 801c786:	2301      	movs	r3, #1
 801c788:	e7f0      	b.n	801c76c <_vfiprintf_r+0x1b8>
 801c78a:	ab03      	add	r3, sp, #12
 801c78c:	9300      	str	r3, [sp, #0]
 801c78e:	462a      	mov	r2, r5
 801c790:	4b12      	ldr	r3, [pc, #72]	@ (801c7dc <_vfiprintf_r+0x228>)
 801c792:	a904      	add	r1, sp, #16
 801c794:	4630      	mov	r0, r6
 801c796:	f7fc ffcb 	bl	8019730 <_printf_float>
 801c79a:	4607      	mov	r7, r0
 801c79c:	1c78      	adds	r0, r7, #1
 801c79e:	d1d6      	bne.n	801c74e <_vfiprintf_r+0x19a>
 801c7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c7a2:	07d9      	lsls	r1, r3, #31
 801c7a4:	d405      	bmi.n	801c7b2 <_vfiprintf_r+0x1fe>
 801c7a6:	89ab      	ldrh	r3, [r5, #12]
 801c7a8:	059a      	lsls	r2, r3, #22
 801c7aa:	d402      	bmi.n	801c7b2 <_vfiprintf_r+0x1fe>
 801c7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c7ae:	f7fd fd29 	bl	801a204 <__retarget_lock_release_recursive>
 801c7b2:	89ab      	ldrh	r3, [r5, #12]
 801c7b4:	065b      	lsls	r3, r3, #25
 801c7b6:	f53f af1f 	bmi.w	801c5f8 <_vfiprintf_r+0x44>
 801c7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c7bc:	e71e      	b.n	801c5fc <_vfiprintf_r+0x48>
 801c7be:	ab03      	add	r3, sp, #12
 801c7c0:	9300      	str	r3, [sp, #0]
 801c7c2:	462a      	mov	r2, r5
 801c7c4:	4b05      	ldr	r3, [pc, #20]	@ (801c7dc <_vfiprintf_r+0x228>)
 801c7c6:	a904      	add	r1, sp, #16
 801c7c8:	4630      	mov	r0, r6
 801c7ca:	f7fd fa39 	bl	8019c40 <_printf_i>
 801c7ce:	e7e4      	b.n	801c79a <_vfiprintf_r+0x1e6>
 801c7d0:	0801e740 	.word	0x0801e740
 801c7d4:	0801e74a 	.word	0x0801e74a
 801c7d8:	08019731 	.word	0x08019731
 801c7dc:	0801c591 	.word	0x0801c591
 801c7e0:	0801e746 	.word	0x0801e746

0801c7e4 <__swbuf_r>:
 801c7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7e6:	460e      	mov	r6, r1
 801c7e8:	4614      	mov	r4, r2
 801c7ea:	4605      	mov	r5, r0
 801c7ec:	b118      	cbz	r0, 801c7f6 <__swbuf_r+0x12>
 801c7ee:	6a03      	ldr	r3, [r0, #32]
 801c7f0:	b90b      	cbnz	r3, 801c7f6 <__swbuf_r+0x12>
 801c7f2:	f7fd fbd1 	bl	8019f98 <__sinit>
 801c7f6:	69a3      	ldr	r3, [r4, #24]
 801c7f8:	60a3      	str	r3, [r4, #8]
 801c7fa:	89a3      	ldrh	r3, [r4, #12]
 801c7fc:	071a      	lsls	r2, r3, #28
 801c7fe:	d501      	bpl.n	801c804 <__swbuf_r+0x20>
 801c800:	6923      	ldr	r3, [r4, #16]
 801c802:	b943      	cbnz	r3, 801c816 <__swbuf_r+0x32>
 801c804:	4621      	mov	r1, r4
 801c806:	4628      	mov	r0, r5
 801c808:	f000 f82a 	bl	801c860 <__swsetup_r>
 801c80c:	b118      	cbz	r0, 801c816 <__swbuf_r+0x32>
 801c80e:	f04f 37ff 	mov.w	r7, #4294967295
 801c812:	4638      	mov	r0, r7
 801c814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c816:	6823      	ldr	r3, [r4, #0]
 801c818:	6922      	ldr	r2, [r4, #16]
 801c81a:	1a98      	subs	r0, r3, r2
 801c81c:	6963      	ldr	r3, [r4, #20]
 801c81e:	b2f6      	uxtb	r6, r6
 801c820:	4283      	cmp	r3, r0
 801c822:	4637      	mov	r7, r6
 801c824:	dc05      	bgt.n	801c832 <__swbuf_r+0x4e>
 801c826:	4621      	mov	r1, r4
 801c828:	4628      	mov	r0, r5
 801c82a:	f7ff fdc7 	bl	801c3bc <_fflush_r>
 801c82e:	2800      	cmp	r0, #0
 801c830:	d1ed      	bne.n	801c80e <__swbuf_r+0x2a>
 801c832:	68a3      	ldr	r3, [r4, #8]
 801c834:	3b01      	subs	r3, #1
 801c836:	60a3      	str	r3, [r4, #8]
 801c838:	6823      	ldr	r3, [r4, #0]
 801c83a:	1c5a      	adds	r2, r3, #1
 801c83c:	6022      	str	r2, [r4, #0]
 801c83e:	701e      	strb	r6, [r3, #0]
 801c840:	6962      	ldr	r2, [r4, #20]
 801c842:	1c43      	adds	r3, r0, #1
 801c844:	429a      	cmp	r2, r3
 801c846:	d004      	beq.n	801c852 <__swbuf_r+0x6e>
 801c848:	89a3      	ldrh	r3, [r4, #12]
 801c84a:	07db      	lsls	r3, r3, #31
 801c84c:	d5e1      	bpl.n	801c812 <__swbuf_r+0x2e>
 801c84e:	2e0a      	cmp	r6, #10
 801c850:	d1df      	bne.n	801c812 <__swbuf_r+0x2e>
 801c852:	4621      	mov	r1, r4
 801c854:	4628      	mov	r0, r5
 801c856:	f7ff fdb1 	bl	801c3bc <_fflush_r>
 801c85a:	2800      	cmp	r0, #0
 801c85c:	d0d9      	beq.n	801c812 <__swbuf_r+0x2e>
 801c85e:	e7d6      	b.n	801c80e <__swbuf_r+0x2a>

0801c860 <__swsetup_r>:
 801c860:	b538      	push	{r3, r4, r5, lr}
 801c862:	4b29      	ldr	r3, [pc, #164]	@ (801c908 <__swsetup_r+0xa8>)
 801c864:	4605      	mov	r5, r0
 801c866:	6818      	ldr	r0, [r3, #0]
 801c868:	460c      	mov	r4, r1
 801c86a:	b118      	cbz	r0, 801c874 <__swsetup_r+0x14>
 801c86c:	6a03      	ldr	r3, [r0, #32]
 801c86e:	b90b      	cbnz	r3, 801c874 <__swsetup_r+0x14>
 801c870:	f7fd fb92 	bl	8019f98 <__sinit>
 801c874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c878:	0719      	lsls	r1, r3, #28
 801c87a:	d422      	bmi.n	801c8c2 <__swsetup_r+0x62>
 801c87c:	06da      	lsls	r2, r3, #27
 801c87e:	d407      	bmi.n	801c890 <__swsetup_r+0x30>
 801c880:	2209      	movs	r2, #9
 801c882:	602a      	str	r2, [r5, #0]
 801c884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c888:	81a3      	strh	r3, [r4, #12]
 801c88a:	f04f 30ff 	mov.w	r0, #4294967295
 801c88e:	e033      	b.n	801c8f8 <__swsetup_r+0x98>
 801c890:	0758      	lsls	r0, r3, #29
 801c892:	d512      	bpl.n	801c8ba <__swsetup_r+0x5a>
 801c894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c896:	b141      	cbz	r1, 801c8aa <__swsetup_r+0x4a>
 801c898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c89c:	4299      	cmp	r1, r3
 801c89e:	d002      	beq.n	801c8a6 <__swsetup_r+0x46>
 801c8a0:	4628      	mov	r0, r5
 801c8a2:	f7fe faa7 	bl	801adf4 <_free_r>
 801c8a6:	2300      	movs	r3, #0
 801c8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 801c8aa:	89a3      	ldrh	r3, [r4, #12]
 801c8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c8b0:	81a3      	strh	r3, [r4, #12]
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	6063      	str	r3, [r4, #4]
 801c8b6:	6923      	ldr	r3, [r4, #16]
 801c8b8:	6023      	str	r3, [r4, #0]
 801c8ba:	89a3      	ldrh	r3, [r4, #12]
 801c8bc:	f043 0308 	orr.w	r3, r3, #8
 801c8c0:	81a3      	strh	r3, [r4, #12]
 801c8c2:	6923      	ldr	r3, [r4, #16]
 801c8c4:	b94b      	cbnz	r3, 801c8da <__swsetup_r+0x7a>
 801c8c6:	89a3      	ldrh	r3, [r4, #12]
 801c8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c8d0:	d003      	beq.n	801c8da <__swsetup_r+0x7a>
 801c8d2:	4621      	mov	r1, r4
 801c8d4:	4628      	mov	r0, r5
 801c8d6:	f000 f883 	bl	801c9e0 <__smakebuf_r>
 801c8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8de:	f013 0201 	ands.w	r2, r3, #1
 801c8e2:	d00a      	beq.n	801c8fa <__swsetup_r+0x9a>
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	60a2      	str	r2, [r4, #8]
 801c8e8:	6962      	ldr	r2, [r4, #20]
 801c8ea:	4252      	negs	r2, r2
 801c8ec:	61a2      	str	r2, [r4, #24]
 801c8ee:	6922      	ldr	r2, [r4, #16]
 801c8f0:	b942      	cbnz	r2, 801c904 <__swsetup_r+0xa4>
 801c8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c8f6:	d1c5      	bne.n	801c884 <__swsetup_r+0x24>
 801c8f8:	bd38      	pop	{r3, r4, r5, pc}
 801c8fa:	0799      	lsls	r1, r3, #30
 801c8fc:	bf58      	it	pl
 801c8fe:	6962      	ldrpl	r2, [r4, #20]
 801c900:	60a2      	str	r2, [r4, #8]
 801c902:	e7f4      	b.n	801c8ee <__swsetup_r+0x8e>
 801c904:	2000      	movs	r0, #0
 801c906:	e7f7      	b.n	801c8f8 <__swsetup_r+0x98>
 801c908:	240002ac 	.word	0x240002ac

0801c90c <_raise_r>:
 801c90c:	291f      	cmp	r1, #31
 801c90e:	b538      	push	{r3, r4, r5, lr}
 801c910:	4605      	mov	r5, r0
 801c912:	460c      	mov	r4, r1
 801c914:	d904      	bls.n	801c920 <_raise_r+0x14>
 801c916:	2316      	movs	r3, #22
 801c918:	6003      	str	r3, [r0, #0]
 801c91a:	f04f 30ff 	mov.w	r0, #4294967295
 801c91e:	bd38      	pop	{r3, r4, r5, pc}
 801c920:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c922:	b112      	cbz	r2, 801c92a <_raise_r+0x1e>
 801c924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c928:	b94b      	cbnz	r3, 801c93e <_raise_r+0x32>
 801c92a:	4628      	mov	r0, r5
 801c92c:	f000 f830 	bl	801c990 <_getpid_r>
 801c930:	4622      	mov	r2, r4
 801c932:	4601      	mov	r1, r0
 801c934:	4628      	mov	r0, r5
 801c936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c93a:	f000 b817 	b.w	801c96c <_kill_r>
 801c93e:	2b01      	cmp	r3, #1
 801c940:	d00a      	beq.n	801c958 <_raise_r+0x4c>
 801c942:	1c59      	adds	r1, r3, #1
 801c944:	d103      	bne.n	801c94e <_raise_r+0x42>
 801c946:	2316      	movs	r3, #22
 801c948:	6003      	str	r3, [r0, #0]
 801c94a:	2001      	movs	r0, #1
 801c94c:	e7e7      	b.n	801c91e <_raise_r+0x12>
 801c94e:	2100      	movs	r1, #0
 801c950:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c954:	4620      	mov	r0, r4
 801c956:	4798      	blx	r3
 801c958:	2000      	movs	r0, #0
 801c95a:	e7e0      	b.n	801c91e <_raise_r+0x12>

0801c95c <raise>:
 801c95c:	4b02      	ldr	r3, [pc, #8]	@ (801c968 <raise+0xc>)
 801c95e:	4601      	mov	r1, r0
 801c960:	6818      	ldr	r0, [r3, #0]
 801c962:	f7ff bfd3 	b.w	801c90c <_raise_r>
 801c966:	bf00      	nop
 801c968:	240002ac 	.word	0x240002ac

0801c96c <_kill_r>:
 801c96c:	b538      	push	{r3, r4, r5, lr}
 801c96e:	4d07      	ldr	r5, [pc, #28]	@ (801c98c <_kill_r+0x20>)
 801c970:	2300      	movs	r3, #0
 801c972:	4604      	mov	r4, r0
 801c974:	4608      	mov	r0, r1
 801c976:	4611      	mov	r1, r2
 801c978:	602b      	str	r3, [r5, #0]
 801c97a:	f7e6 f9dd 	bl	8002d38 <_kill>
 801c97e:	1c43      	adds	r3, r0, #1
 801c980:	d102      	bne.n	801c988 <_kill_r+0x1c>
 801c982:	682b      	ldr	r3, [r5, #0]
 801c984:	b103      	cbz	r3, 801c988 <_kill_r+0x1c>
 801c986:	6023      	str	r3, [r4, #0]
 801c988:	bd38      	pop	{r3, r4, r5, pc}
 801c98a:	bf00      	nop
 801c98c:	2401f92c 	.word	0x2401f92c

0801c990 <_getpid_r>:
 801c990:	f7e6 b9ca 	b.w	8002d28 <_getpid>

0801c994 <__swhatbuf_r>:
 801c994:	b570      	push	{r4, r5, r6, lr}
 801c996:	460c      	mov	r4, r1
 801c998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c99c:	2900      	cmp	r1, #0
 801c99e:	b096      	sub	sp, #88	@ 0x58
 801c9a0:	4615      	mov	r5, r2
 801c9a2:	461e      	mov	r6, r3
 801c9a4:	da0d      	bge.n	801c9c2 <__swhatbuf_r+0x2e>
 801c9a6:	89a3      	ldrh	r3, [r4, #12]
 801c9a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c9ac:	f04f 0100 	mov.w	r1, #0
 801c9b0:	bf14      	ite	ne
 801c9b2:	2340      	movne	r3, #64	@ 0x40
 801c9b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c9b8:	2000      	movs	r0, #0
 801c9ba:	6031      	str	r1, [r6, #0]
 801c9bc:	602b      	str	r3, [r5, #0]
 801c9be:	b016      	add	sp, #88	@ 0x58
 801c9c0:	bd70      	pop	{r4, r5, r6, pc}
 801c9c2:	466a      	mov	r2, sp
 801c9c4:	f000 f848 	bl	801ca58 <_fstat_r>
 801c9c8:	2800      	cmp	r0, #0
 801c9ca:	dbec      	blt.n	801c9a6 <__swhatbuf_r+0x12>
 801c9cc:	9901      	ldr	r1, [sp, #4]
 801c9ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c9d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c9d6:	4259      	negs	r1, r3
 801c9d8:	4159      	adcs	r1, r3
 801c9da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c9de:	e7eb      	b.n	801c9b8 <__swhatbuf_r+0x24>

0801c9e0 <__smakebuf_r>:
 801c9e0:	898b      	ldrh	r3, [r1, #12]
 801c9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9e4:	079d      	lsls	r5, r3, #30
 801c9e6:	4606      	mov	r6, r0
 801c9e8:	460c      	mov	r4, r1
 801c9ea:	d507      	bpl.n	801c9fc <__smakebuf_r+0x1c>
 801c9ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c9f0:	6023      	str	r3, [r4, #0]
 801c9f2:	6123      	str	r3, [r4, #16]
 801c9f4:	2301      	movs	r3, #1
 801c9f6:	6163      	str	r3, [r4, #20]
 801c9f8:	b003      	add	sp, #12
 801c9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9fc:	ab01      	add	r3, sp, #4
 801c9fe:	466a      	mov	r2, sp
 801ca00:	f7ff ffc8 	bl	801c994 <__swhatbuf_r>
 801ca04:	9f00      	ldr	r7, [sp, #0]
 801ca06:	4605      	mov	r5, r0
 801ca08:	4639      	mov	r1, r7
 801ca0a:	4630      	mov	r0, r6
 801ca0c:	f7fe fda0 	bl	801b550 <_malloc_r>
 801ca10:	b948      	cbnz	r0, 801ca26 <__smakebuf_r+0x46>
 801ca12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca16:	059a      	lsls	r2, r3, #22
 801ca18:	d4ee      	bmi.n	801c9f8 <__smakebuf_r+0x18>
 801ca1a:	f023 0303 	bic.w	r3, r3, #3
 801ca1e:	f043 0302 	orr.w	r3, r3, #2
 801ca22:	81a3      	strh	r3, [r4, #12]
 801ca24:	e7e2      	b.n	801c9ec <__smakebuf_r+0xc>
 801ca26:	89a3      	ldrh	r3, [r4, #12]
 801ca28:	6020      	str	r0, [r4, #0]
 801ca2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca2e:	81a3      	strh	r3, [r4, #12]
 801ca30:	9b01      	ldr	r3, [sp, #4]
 801ca32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ca36:	b15b      	cbz	r3, 801ca50 <__smakebuf_r+0x70>
 801ca38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca3c:	4630      	mov	r0, r6
 801ca3e:	f000 f81d 	bl	801ca7c <_isatty_r>
 801ca42:	b128      	cbz	r0, 801ca50 <__smakebuf_r+0x70>
 801ca44:	89a3      	ldrh	r3, [r4, #12]
 801ca46:	f023 0303 	bic.w	r3, r3, #3
 801ca4a:	f043 0301 	orr.w	r3, r3, #1
 801ca4e:	81a3      	strh	r3, [r4, #12]
 801ca50:	89a3      	ldrh	r3, [r4, #12]
 801ca52:	431d      	orrs	r5, r3
 801ca54:	81a5      	strh	r5, [r4, #12]
 801ca56:	e7cf      	b.n	801c9f8 <__smakebuf_r+0x18>

0801ca58 <_fstat_r>:
 801ca58:	b538      	push	{r3, r4, r5, lr}
 801ca5a:	4d07      	ldr	r5, [pc, #28]	@ (801ca78 <_fstat_r+0x20>)
 801ca5c:	2300      	movs	r3, #0
 801ca5e:	4604      	mov	r4, r0
 801ca60:	4608      	mov	r0, r1
 801ca62:	4611      	mov	r1, r2
 801ca64:	602b      	str	r3, [r5, #0]
 801ca66:	f7e6 f9c7 	bl	8002df8 <_fstat>
 801ca6a:	1c43      	adds	r3, r0, #1
 801ca6c:	d102      	bne.n	801ca74 <_fstat_r+0x1c>
 801ca6e:	682b      	ldr	r3, [r5, #0]
 801ca70:	b103      	cbz	r3, 801ca74 <_fstat_r+0x1c>
 801ca72:	6023      	str	r3, [r4, #0]
 801ca74:	bd38      	pop	{r3, r4, r5, pc}
 801ca76:	bf00      	nop
 801ca78:	2401f92c 	.word	0x2401f92c

0801ca7c <_isatty_r>:
 801ca7c:	b538      	push	{r3, r4, r5, lr}
 801ca7e:	4d06      	ldr	r5, [pc, #24]	@ (801ca98 <_isatty_r+0x1c>)
 801ca80:	2300      	movs	r3, #0
 801ca82:	4604      	mov	r4, r0
 801ca84:	4608      	mov	r0, r1
 801ca86:	602b      	str	r3, [r5, #0]
 801ca88:	f7e6 f9c6 	bl	8002e18 <_isatty>
 801ca8c:	1c43      	adds	r3, r0, #1
 801ca8e:	d102      	bne.n	801ca96 <_isatty_r+0x1a>
 801ca90:	682b      	ldr	r3, [r5, #0]
 801ca92:	b103      	cbz	r3, 801ca96 <_isatty_r+0x1a>
 801ca94:	6023      	str	r3, [r4, #0]
 801ca96:	bd38      	pop	{r3, r4, r5, pc}
 801ca98:	2401f92c 	.word	0x2401f92c
 801ca9c:	00000000 	.word	0x00000000

0801caa0 <sin>:
 801caa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801caa2:	eeb0 7b40 	vmov.f64	d7, d0
 801caa6:	ee17 3a90 	vmov	r3, s15
 801caaa:	4a21      	ldr	r2, [pc, #132]	@ (801cb30 <sin+0x90>)
 801caac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cab0:	4293      	cmp	r3, r2
 801cab2:	d807      	bhi.n	801cac4 <sin+0x24>
 801cab4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801cb28 <sin+0x88>
 801cab8:	2000      	movs	r0, #0
 801caba:	b005      	add	sp, #20
 801cabc:	f85d eb04 	ldr.w	lr, [sp], #4
 801cac0:	f000 b986 	b.w	801cdd0 <__kernel_sin>
 801cac4:	4a1b      	ldr	r2, [pc, #108]	@ (801cb34 <sin+0x94>)
 801cac6:	4293      	cmp	r3, r2
 801cac8:	d904      	bls.n	801cad4 <sin+0x34>
 801caca:	ee30 0b40 	vsub.f64	d0, d0, d0
 801cace:	b005      	add	sp, #20
 801cad0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cad4:	4668      	mov	r0, sp
 801cad6:	f000 f9d3 	bl	801ce80 <__ieee754_rem_pio2>
 801cada:	f000 0003 	and.w	r0, r0, #3
 801cade:	2801      	cmp	r0, #1
 801cae0:	d00a      	beq.n	801caf8 <sin+0x58>
 801cae2:	2802      	cmp	r0, #2
 801cae4:	d00f      	beq.n	801cb06 <sin+0x66>
 801cae6:	b9c0      	cbnz	r0, 801cb1a <sin+0x7a>
 801cae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801caec:	ed9d 0b00 	vldr	d0, [sp]
 801caf0:	2001      	movs	r0, #1
 801caf2:	f000 f96d 	bl	801cdd0 <__kernel_sin>
 801caf6:	e7ea      	b.n	801cace <sin+0x2e>
 801caf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cafc:	ed9d 0b00 	vldr	d0, [sp]
 801cb00:	f000 f8fe 	bl	801cd00 <__kernel_cos>
 801cb04:	e7e3      	b.n	801cace <sin+0x2e>
 801cb06:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cb0a:	ed9d 0b00 	vldr	d0, [sp]
 801cb0e:	2001      	movs	r0, #1
 801cb10:	f000 f95e 	bl	801cdd0 <__kernel_sin>
 801cb14:	eeb1 0b40 	vneg.f64	d0, d0
 801cb18:	e7d9      	b.n	801cace <sin+0x2e>
 801cb1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cb1e:	ed9d 0b00 	vldr	d0, [sp]
 801cb22:	f000 f8ed 	bl	801cd00 <__kernel_cos>
 801cb26:	e7f5      	b.n	801cb14 <sin+0x74>
	...
 801cb30:	3fe921fb 	.word	0x3fe921fb
 801cb34:	7fefffff 	.word	0x7fefffff

0801cb38 <sinf_poly>:
 801cb38:	07cb      	lsls	r3, r1, #31
 801cb3a:	d412      	bmi.n	801cb62 <sinf_poly+0x2a>
 801cb3c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801cb40:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801cb44:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801cb48:	eea6 7b01 	vfma.f64	d7, d6, d1
 801cb4c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801cb50:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb54:	eea6 0b05 	vfma.f64	d0, d6, d5
 801cb58:	eea7 0b01 	vfma.f64	d0, d7, d1
 801cb5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cb60:	4770      	bx	lr
 801cb62:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801cb66:	ee21 5b01 	vmul.f64	d5, d1, d1
 801cb6a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801cb6e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801cb72:	eea1 7b06 	vfma.f64	d7, d1, d6
 801cb76:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801cb7a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801cb7e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801cb82:	ee21 1b05 	vmul.f64	d1, d1, d5
 801cb86:	eea5 0b06 	vfma.f64	d0, d5, d6
 801cb8a:	e7e5      	b.n	801cb58 <sinf_poly+0x20>
 801cb8c:	0000      	movs	r0, r0
	...

0801cb90 <sinf>:
 801cb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb92:	ee10 4a10 	vmov	r4, s0
 801cb96:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801cb9a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801cb9e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cba2:	eef0 7a40 	vmov.f32	s15, s0
 801cba6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801cbaa:	d218      	bcs.n	801cbde <sinf+0x4e>
 801cbac:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cbb0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801cbb4:	d20a      	bcs.n	801cbcc <sinf+0x3c>
 801cbb6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801cbba:	d103      	bne.n	801cbc4 <sinf+0x34>
 801cbbc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801cbc0:	ed8d 1a01 	vstr	s2, [sp, #4]
 801cbc4:	eeb0 0a67 	vmov.f32	s0, s15
 801cbc8:	b003      	add	sp, #12
 801cbca:	bd30      	pop	{r4, r5, pc}
 801cbcc:	483a      	ldr	r0, [pc, #232]	@ (801ccb8 <sinf+0x128>)
 801cbce:	eeb0 0b46 	vmov.f64	d0, d6
 801cbd2:	2100      	movs	r1, #0
 801cbd4:	b003      	add	sp, #12
 801cbd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbda:	f7ff bfad 	b.w	801cb38 <sinf_poly>
 801cbde:	f240 422e 	movw	r2, #1070	@ 0x42e
 801cbe2:	4293      	cmp	r3, r2
 801cbe4:	d824      	bhi.n	801cc30 <sinf+0xa0>
 801cbe6:	4b34      	ldr	r3, [pc, #208]	@ (801ccb8 <sinf+0x128>)
 801cbe8:	ed93 7b08 	vldr	d7, [r3, #32]
 801cbec:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cbf0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cbf4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cbf8:	ee17 1a90 	vmov	r1, s15
 801cbfc:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801cc00:	1609      	asrs	r1, r1, #24
 801cc02:	ee07 1a90 	vmov	s15, r1
 801cc06:	f001 0203 	and.w	r2, r1, #3
 801cc0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cc0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cc12:	ed92 0b00 	vldr	d0, [r2]
 801cc16:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801cc1a:	f011 0f02 	tst.w	r1, #2
 801cc1e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801cc22:	bf08      	it	eq
 801cc24:	4618      	moveq	r0, r3
 801cc26:	ee26 1b06 	vmul.f64	d1, d6, d6
 801cc2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cc2e:	e7d1      	b.n	801cbd4 <sinf+0x44>
 801cc30:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801cc34:	d237      	bcs.n	801cca6 <sinf+0x116>
 801cc36:	4921      	ldr	r1, [pc, #132]	@ (801ccbc <sinf+0x12c>)
 801cc38:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801cc3c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801cc40:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801cc44:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801cc48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801cc4c:	6a10      	ldr	r0, [r2, #32]
 801cc4e:	6912      	ldr	r2, [r2, #16]
 801cc50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801cc54:	40ab      	lsls	r3, r5
 801cc56:	fba0 5003 	umull	r5, r0, r0, r3
 801cc5a:	4359      	muls	r1, r3
 801cc5c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801cc60:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801cc64:	0f9d      	lsrs	r5, r3, #30
 801cc66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801cc6a:	1ac9      	subs	r1, r1, r3
 801cc6c:	f7e3 fd46 	bl	80006fc <__aeabi_l2d>
 801cc70:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801cc74:	4b10      	ldr	r3, [pc, #64]	@ (801ccb8 <sinf+0x128>)
 801cc76:	f004 0203 	and.w	r2, r4, #3
 801cc7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cc7e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801ccb0 <sinf+0x120>
 801cc82:	ed92 0b00 	vldr	d0, [r2]
 801cc86:	ec41 0b17 	vmov	d7, r0, r1
 801cc8a:	f014 0f02 	tst.w	r4, #2
 801cc8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cc92:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801cc96:	4629      	mov	r1, r5
 801cc98:	bf08      	it	eq
 801cc9a:	4618      	moveq	r0, r3
 801cc9c:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cca0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cca4:	e796      	b.n	801cbd4 <sinf+0x44>
 801cca6:	b003      	add	sp, #12
 801cca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ccac:	f000 b816 	b.w	801ccdc <__math_invalidf>
 801ccb0:	54442d18 	.word	0x54442d18
 801ccb4:	3c1921fb 	.word	0x3c1921fb
 801ccb8:	0801e7f0 	.word	0x0801e7f0
 801ccbc:	0801e790 	.word	0x0801e790

0801ccc0 <with_errnof>:
 801ccc0:	b510      	push	{r4, lr}
 801ccc2:	ed2d 8b02 	vpush	{d8}
 801ccc6:	eeb0 8a40 	vmov.f32	s16, s0
 801ccca:	4604      	mov	r4, r0
 801cccc:	f7fd fa6e 	bl	801a1ac <__errno>
 801ccd0:	eeb0 0a48 	vmov.f32	s0, s16
 801ccd4:	ecbd 8b02 	vpop	{d8}
 801ccd8:	6004      	str	r4, [r0, #0]
 801ccda:	bd10      	pop	{r4, pc}

0801ccdc <__math_invalidf>:
 801ccdc:	eef0 7a40 	vmov.f32	s15, s0
 801cce0:	ee30 7a40 	vsub.f32	s14, s0, s0
 801cce4:	eef4 7a67 	vcmp.f32	s15, s15
 801cce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ccf0:	d602      	bvs.n	801ccf8 <__math_invalidf+0x1c>
 801ccf2:	2021      	movs	r0, #33	@ 0x21
 801ccf4:	f7ff bfe4 	b.w	801ccc0 <with_errnof>
 801ccf8:	4770      	bx	lr
 801ccfa:	0000      	movs	r0, r0
 801ccfc:	0000      	movs	r0, r0
	...

0801cd00 <__kernel_cos>:
 801cd00:	eeb0 5b40 	vmov.f64	d5, d0
 801cd04:	ee15 1a90 	vmov	r1, s11
 801cd08:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cd0c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cd10:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801cd14:	d204      	bcs.n	801cd20 <__kernel_cos+0x20>
 801cd16:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801cd1a:	ee17 3a90 	vmov	r3, s15
 801cd1e:	b343      	cbz	r3, 801cd72 <__kernel_cos+0x72>
 801cd20:	ee25 6b05 	vmul.f64	d6, d5, d5
 801cd24:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801cd28:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801cd98 <__kernel_cos+0x98>
 801cd2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cda0 <__kernel_cos+0xa0>
 801cd30:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cd34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cda8 <__kernel_cos+0xa8>
 801cd38:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd3c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cdb0 <__kernel_cos+0xb0>
 801cd40:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd44:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801cdb8 <__kernel_cos+0xb8>
 801cd48:	4b1f      	ldr	r3, [pc, #124]	@ (801cdc8 <__kernel_cos+0xc8>)
 801cd4a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cd4e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cdc0 <__kernel_cos+0xc0>
 801cd52:	4299      	cmp	r1, r3
 801cd54:	eea7 4b06 	vfma.f64	d4, d7, d6
 801cd58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cd5c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801cd60:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cd64:	eea6 1b04 	vfma.f64	d1, d6, d4
 801cd68:	d804      	bhi.n	801cd74 <__kernel_cos+0x74>
 801cd6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801cd6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cd72:	4770      	bx	lr
 801cd74:	4b15      	ldr	r3, [pc, #84]	@ (801cdcc <__kernel_cos+0xcc>)
 801cd76:	4299      	cmp	r1, r3
 801cd78:	d809      	bhi.n	801cd8e <__kernel_cos+0x8e>
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801cd80:	ec43 2b16 	vmov	d6, r2, r3
 801cd84:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cd88:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cd8c:	e7ed      	b.n	801cd6a <__kernel_cos+0x6a>
 801cd8e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801cd92:	e7f7      	b.n	801cd84 <__kernel_cos+0x84>
 801cd94:	f3af 8000 	nop.w
 801cd98:	be8838d4 	.word	0xbe8838d4
 801cd9c:	bda8fae9 	.word	0xbda8fae9
 801cda0:	bdb4b1c4 	.word	0xbdb4b1c4
 801cda4:	3e21ee9e 	.word	0x3e21ee9e
 801cda8:	809c52ad 	.word	0x809c52ad
 801cdac:	be927e4f 	.word	0xbe927e4f
 801cdb0:	19cb1590 	.word	0x19cb1590
 801cdb4:	3efa01a0 	.word	0x3efa01a0
 801cdb8:	16c15177 	.word	0x16c15177
 801cdbc:	bf56c16c 	.word	0xbf56c16c
 801cdc0:	5555554c 	.word	0x5555554c
 801cdc4:	3fa55555 	.word	0x3fa55555
 801cdc8:	3fd33332 	.word	0x3fd33332
 801cdcc:	3fe90000 	.word	0x3fe90000

0801cdd0 <__kernel_sin>:
 801cdd0:	ee10 3a90 	vmov	r3, s1
 801cdd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cdd8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cddc:	d204      	bcs.n	801cde8 <__kernel_sin+0x18>
 801cdde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cde2:	ee17 3a90 	vmov	r3, s15
 801cde6:	b35b      	cbz	r3, 801ce40 <__kernel_sin+0x70>
 801cde8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cdec:	ee20 5b06 	vmul.f64	d5, d0, d6
 801cdf0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801ce48 <__kernel_sin+0x78>
 801cdf4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce50 <__kernel_sin+0x80>
 801cdf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cdfc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce58 <__kernel_sin+0x88>
 801ce00:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ce04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce60 <__kernel_sin+0x90>
 801ce08:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ce0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801ce68 <__kernel_sin+0x98>
 801ce10:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ce14:	b930      	cbnz	r0, 801ce24 <__kernel_sin+0x54>
 801ce16:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801ce70 <__kernel_sin+0xa0>
 801ce1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ce1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801ce22:	4770      	bx	lr
 801ce24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801ce28:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801ce2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801ce30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801ce34:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ce78 <__kernel_sin+0xa8>
 801ce38:	eea5 1b07 	vfma.f64	d1, d5, d7
 801ce3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ce40:	4770      	bx	lr
 801ce42:	bf00      	nop
 801ce44:	f3af 8000 	nop.w
 801ce48:	5acfd57c 	.word	0x5acfd57c
 801ce4c:	3de5d93a 	.word	0x3de5d93a
 801ce50:	8a2b9ceb 	.word	0x8a2b9ceb
 801ce54:	be5ae5e6 	.word	0xbe5ae5e6
 801ce58:	57b1fe7d 	.word	0x57b1fe7d
 801ce5c:	3ec71de3 	.word	0x3ec71de3
 801ce60:	19c161d5 	.word	0x19c161d5
 801ce64:	bf2a01a0 	.word	0xbf2a01a0
 801ce68:	1110f8a6 	.word	0x1110f8a6
 801ce6c:	3f811111 	.word	0x3f811111
 801ce70:	55555549 	.word	0x55555549
 801ce74:	bfc55555 	.word	0xbfc55555
 801ce78:	55555549 	.word	0x55555549
 801ce7c:	3fc55555 	.word	0x3fc55555

0801ce80 <__ieee754_rem_pio2>:
 801ce80:	b570      	push	{r4, r5, r6, lr}
 801ce82:	eeb0 7b40 	vmov.f64	d7, d0
 801ce86:	ee17 5a90 	vmov	r5, s15
 801ce8a:	4b99      	ldr	r3, [pc, #612]	@ (801d0f0 <__ieee754_rem_pio2+0x270>)
 801ce8c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801ce90:	429e      	cmp	r6, r3
 801ce92:	b088      	sub	sp, #32
 801ce94:	4604      	mov	r4, r0
 801ce96:	d807      	bhi.n	801cea8 <__ieee754_rem_pio2+0x28>
 801ce98:	2200      	movs	r2, #0
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	ed84 0b00 	vstr	d0, [r4]
 801cea0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801cea4:	2000      	movs	r0, #0
 801cea6:	e01b      	b.n	801cee0 <__ieee754_rem_pio2+0x60>
 801cea8:	4b92      	ldr	r3, [pc, #584]	@ (801d0f4 <__ieee754_rem_pio2+0x274>)
 801ceaa:	429e      	cmp	r6, r3
 801ceac:	d83b      	bhi.n	801cf26 <__ieee754_rem_pio2+0xa6>
 801ceae:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801ceb2:	2d00      	cmp	r5, #0
 801ceb4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d0b0 <__ieee754_rem_pio2+0x230>
 801ceb8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801cebc:	dd19      	ble.n	801cef2 <__ieee754_rem_pio2+0x72>
 801cebe:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cec2:	429e      	cmp	r6, r3
 801cec4:	d00e      	beq.n	801cee4 <__ieee754_rem_pio2+0x64>
 801cec6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d0b8 <__ieee754_rem_pio2+0x238>
 801ceca:	ee37 6b45 	vsub.f64	d6, d7, d5
 801cece:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ced2:	ed84 6b00 	vstr	d6, [r4]
 801ced6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ceda:	ed84 7b02 	vstr	d7, [r4, #8]
 801cede:	2001      	movs	r0, #1
 801cee0:	b008      	add	sp, #32
 801cee2:	bd70      	pop	{r4, r5, r6, pc}
 801cee4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d0c0 <__ieee754_rem_pio2+0x240>
 801cee8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d0c8 <__ieee754_rem_pio2+0x248>
 801ceec:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cef0:	e7eb      	b.n	801ceca <__ieee754_rem_pio2+0x4a>
 801cef2:	429e      	cmp	r6, r3
 801cef4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801cef8:	d00e      	beq.n	801cf18 <__ieee754_rem_pio2+0x98>
 801cefa:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d0b8 <__ieee754_rem_pio2+0x238>
 801cefe:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cf02:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cf06:	ed84 6b00 	vstr	d6, [r4]
 801cf0a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 801cf12:	ed84 7b02 	vstr	d7, [r4, #8]
 801cf16:	e7e3      	b.n	801cee0 <__ieee754_rem_pio2+0x60>
 801cf18:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d0c0 <__ieee754_rem_pio2+0x240>
 801cf1c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d0c8 <__ieee754_rem_pio2+0x248>
 801cf20:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cf24:	e7eb      	b.n	801cefe <__ieee754_rem_pio2+0x7e>
 801cf26:	4b74      	ldr	r3, [pc, #464]	@ (801d0f8 <__ieee754_rem_pio2+0x278>)
 801cf28:	429e      	cmp	r6, r3
 801cf2a:	d870      	bhi.n	801d00e <__ieee754_rem_pio2+0x18e>
 801cf2c:	f000 f8ec 	bl	801d108 <fabs>
 801cf30:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cf34:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d0d0 <__ieee754_rem_pio2+0x250>
 801cf38:	eea0 7b06 	vfma.f64	d7, d0, d6
 801cf3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801cf40:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801cf44:	ee17 0a90 	vmov	r0, s15
 801cf48:	eeb1 4b45 	vneg.f64	d4, d5
 801cf4c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d0b0 <__ieee754_rem_pio2+0x230>
 801cf50:	eea5 0b47 	vfms.f64	d0, d5, d7
 801cf54:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d0b8 <__ieee754_rem_pio2+0x238>
 801cf58:	281f      	cmp	r0, #31
 801cf5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801cf5e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801cf62:	dc05      	bgt.n	801cf70 <__ieee754_rem_pio2+0xf0>
 801cf64:	4b65      	ldr	r3, [pc, #404]	@ (801d0fc <__ieee754_rem_pio2+0x27c>)
 801cf66:	1e42      	subs	r2, r0, #1
 801cf68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf6c:	42b3      	cmp	r3, r6
 801cf6e:	d109      	bne.n	801cf84 <__ieee754_rem_pio2+0x104>
 801cf70:	ee16 3a90 	vmov	r3, s13
 801cf74:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cf78:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801cf7c:	2b10      	cmp	r3, #16
 801cf7e:	ea4f 5226 	mov.w	r2, r6, asr #20
 801cf82:	dc02      	bgt.n	801cf8a <__ieee754_rem_pio2+0x10a>
 801cf84:	ed84 6b00 	vstr	d6, [r4]
 801cf88:	e01a      	b.n	801cfc0 <__ieee754_rem_pio2+0x140>
 801cf8a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d0c0 <__ieee754_rem_pio2+0x240>
 801cf8e:	eeb0 6b40 	vmov.f64	d6, d0
 801cf92:	eea4 6b03 	vfma.f64	d6, d4, d3
 801cf96:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cf9a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801cf9e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d0c8 <__ieee754_rem_pio2+0x248>
 801cfa2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801cfa6:	ee36 3b47 	vsub.f64	d3, d6, d7
 801cfaa:	ee13 3a90 	vmov	r3, s7
 801cfae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801cfb2:	1ad3      	subs	r3, r2, r3
 801cfb4:	2b31      	cmp	r3, #49	@ 0x31
 801cfb6:	dc17      	bgt.n	801cfe8 <__ieee754_rem_pio2+0x168>
 801cfb8:	eeb0 0b46 	vmov.f64	d0, d6
 801cfbc:	ed84 3b00 	vstr	d3, [r4]
 801cfc0:	ed94 6b00 	vldr	d6, [r4]
 801cfc4:	2d00      	cmp	r5, #0
 801cfc6:	ee30 0b46 	vsub.f64	d0, d0, d6
 801cfca:	ee30 0b47 	vsub.f64	d0, d0, d7
 801cfce:	ed84 0b02 	vstr	d0, [r4, #8]
 801cfd2:	da85      	bge.n	801cee0 <__ieee754_rem_pio2+0x60>
 801cfd4:	eeb1 6b46 	vneg.f64	d6, d6
 801cfd8:	eeb1 0b40 	vneg.f64	d0, d0
 801cfdc:	ed84 6b00 	vstr	d6, [r4]
 801cfe0:	ed84 0b02 	vstr	d0, [r4, #8]
 801cfe4:	4240      	negs	r0, r0
 801cfe6:	e77b      	b.n	801cee0 <__ieee754_rem_pio2+0x60>
 801cfe8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d0d8 <__ieee754_rem_pio2+0x258>
 801cfec:	eeb0 0b46 	vmov.f64	d0, d6
 801cff0:	eea4 0b07 	vfma.f64	d0, d4, d7
 801cff4:	ee36 6b40 	vsub.f64	d6, d6, d0
 801cff8:	eea4 6b07 	vfma.f64	d6, d4, d7
 801cffc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d0e0 <__ieee754_rem_pio2+0x260>
 801d000:	eeb0 7b46 	vmov.f64	d7, d6
 801d004:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d008:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d00c:	e7ba      	b.n	801cf84 <__ieee754_rem_pio2+0x104>
 801d00e:	4b3c      	ldr	r3, [pc, #240]	@ (801d100 <__ieee754_rem_pio2+0x280>)
 801d010:	429e      	cmp	r6, r3
 801d012:	d906      	bls.n	801d022 <__ieee754_rem_pio2+0x1a2>
 801d014:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d018:	ed80 7b02 	vstr	d7, [r0, #8]
 801d01c:	ed80 7b00 	vstr	d7, [r0]
 801d020:	e740      	b.n	801cea4 <__ieee754_rem_pio2+0x24>
 801d022:	ee10 3a10 	vmov	r3, s0
 801d026:	1532      	asrs	r2, r6, #20
 801d028:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d02c:	4618      	mov	r0, r3
 801d02e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d032:	ec41 0b17 	vmov	d7, r0, r1
 801d036:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d03a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d0e8 <__ieee754_rem_pio2+0x268>
 801d03e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d042:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d046:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d04a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d04e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d052:	a808      	add	r0, sp, #32
 801d054:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d058:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d05c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d060:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d064:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d068:	2103      	movs	r1, #3
 801d06a:	ed30 7b02 	vldmdb	r0!, {d7}
 801d06e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d076:	460b      	mov	r3, r1
 801d078:	f101 31ff 	add.w	r1, r1, #4294967295
 801d07c:	d0f5      	beq.n	801d06a <__ieee754_rem_pio2+0x1ea>
 801d07e:	4921      	ldr	r1, [pc, #132]	@ (801d104 <__ieee754_rem_pio2+0x284>)
 801d080:	9101      	str	r1, [sp, #4]
 801d082:	2102      	movs	r1, #2
 801d084:	9100      	str	r1, [sp, #0]
 801d086:	a802      	add	r0, sp, #8
 801d088:	4621      	mov	r1, r4
 801d08a:	f000 f845 	bl	801d118 <__kernel_rem_pio2>
 801d08e:	2d00      	cmp	r5, #0
 801d090:	f6bf af26 	bge.w	801cee0 <__ieee754_rem_pio2+0x60>
 801d094:	ed94 7b00 	vldr	d7, [r4]
 801d098:	eeb1 7b47 	vneg.f64	d7, d7
 801d09c:	ed84 7b00 	vstr	d7, [r4]
 801d0a0:	ed94 7b02 	vldr	d7, [r4, #8]
 801d0a4:	eeb1 7b47 	vneg.f64	d7, d7
 801d0a8:	ed84 7b02 	vstr	d7, [r4, #8]
 801d0ac:	e79a      	b.n	801cfe4 <__ieee754_rem_pio2+0x164>
 801d0ae:	bf00      	nop
 801d0b0:	54400000 	.word	0x54400000
 801d0b4:	3ff921fb 	.word	0x3ff921fb
 801d0b8:	1a626331 	.word	0x1a626331
 801d0bc:	3dd0b461 	.word	0x3dd0b461
 801d0c0:	1a600000 	.word	0x1a600000
 801d0c4:	3dd0b461 	.word	0x3dd0b461
 801d0c8:	2e037073 	.word	0x2e037073
 801d0cc:	3ba3198a 	.word	0x3ba3198a
 801d0d0:	6dc9c883 	.word	0x6dc9c883
 801d0d4:	3fe45f30 	.word	0x3fe45f30
 801d0d8:	2e000000 	.word	0x2e000000
 801d0dc:	3ba3198a 	.word	0x3ba3198a
 801d0e0:	252049c1 	.word	0x252049c1
 801d0e4:	397b839a 	.word	0x397b839a
 801d0e8:	00000000 	.word	0x00000000
 801d0ec:	41700000 	.word	0x41700000
 801d0f0:	3fe921fb 	.word	0x3fe921fb
 801d0f4:	4002d97b 	.word	0x4002d97b
 801d0f8:	413921fb 	.word	0x413921fb
 801d0fc:	0801e8d0 	.word	0x0801e8d0
 801d100:	7fefffff 	.word	0x7fefffff
 801d104:	0801e950 	.word	0x0801e950

0801d108 <fabs>:
 801d108:	ec51 0b10 	vmov	r0, r1, d0
 801d10c:	4602      	mov	r2, r0
 801d10e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d112:	ec43 2b10 	vmov	d0, r2, r3
 801d116:	4770      	bx	lr

0801d118 <__kernel_rem_pio2>:
 801d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d11c:	ed2d 8b06 	vpush	{d8-d10}
 801d120:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d124:	469b      	mov	fp, r3
 801d126:	9001      	str	r0, [sp, #4]
 801d128:	4bbb      	ldr	r3, [pc, #748]	@ (801d418 <__kernel_rem_pio2+0x300>)
 801d12a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801d12c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801d130:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801d134:	f112 0f14 	cmn.w	r2, #20
 801d138:	bfa8      	it	ge
 801d13a:	1ed3      	subge	r3, r2, #3
 801d13c:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d140:	bfb8      	it	lt
 801d142:	2300      	movlt	r3, #0
 801d144:	f06f 0517 	mvn.w	r5, #23
 801d148:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d400 <__kernel_rem_pio2+0x2e8>
 801d14c:	bfa4      	itt	ge
 801d14e:	2018      	movge	r0, #24
 801d150:	fb93 f3f0 	sdivge	r3, r3, r0
 801d154:	fb03 5505 	mla	r5, r3, r5, r5
 801d158:	eba3 040a 	sub.w	r4, r3, sl
 801d15c:	4415      	add	r5, r2
 801d15e:	460f      	mov	r7, r1
 801d160:	eb09 060a 	add.w	r6, r9, sl
 801d164:	a81a      	add	r0, sp, #104	@ 0x68
 801d166:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801d16a:	2200      	movs	r2, #0
 801d16c:	42b2      	cmp	r2, r6
 801d16e:	dd0e      	ble.n	801d18e <__kernel_rem_pio2+0x76>
 801d170:	aa1a      	add	r2, sp, #104	@ 0x68
 801d172:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801d176:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801d17a:	2600      	movs	r6, #0
 801d17c:	454e      	cmp	r6, r9
 801d17e:	dc25      	bgt.n	801d1cc <__kernel_rem_pio2+0xb4>
 801d180:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d400 <__kernel_rem_pio2+0x2e8>
 801d184:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d188:	4614      	mov	r4, r2
 801d18a:	2000      	movs	r0, #0
 801d18c:	e015      	b.n	801d1ba <__kernel_rem_pio2+0xa2>
 801d18e:	42d4      	cmn	r4, r2
 801d190:	d409      	bmi.n	801d1a6 <__kernel_rem_pio2+0x8e>
 801d192:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801d196:	ee07 1a90 	vmov	s15, r1
 801d19a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d19e:	eca0 7b02 	vstmia	r0!, {d7}
 801d1a2:	3201      	adds	r2, #1
 801d1a4:	e7e2      	b.n	801d16c <__kernel_rem_pio2+0x54>
 801d1a6:	eeb0 7b46 	vmov.f64	d7, d6
 801d1aa:	e7f8      	b.n	801d19e <__kernel_rem_pio2+0x86>
 801d1ac:	ecbc 5b02 	vldmia	ip!, {d5}
 801d1b0:	ed94 6b00 	vldr	d6, [r4]
 801d1b4:	3001      	adds	r0, #1
 801d1b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d1ba:	4550      	cmp	r0, sl
 801d1bc:	f1a4 0408 	sub.w	r4, r4, #8
 801d1c0:	ddf4      	ble.n	801d1ac <__kernel_rem_pio2+0x94>
 801d1c2:	ecae 7b02 	vstmia	lr!, {d7}
 801d1c6:	3601      	adds	r6, #1
 801d1c8:	3208      	adds	r2, #8
 801d1ca:	e7d7      	b.n	801d17c <__kernel_rem_pio2+0x64>
 801d1cc:	aa06      	add	r2, sp, #24
 801d1ce:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d408 <__kernel_rem_pio2+0x2f0>
 801d1d2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d410 <__kernel_rem_pio2+0x2f8>
 801d1d6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801d1da:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d1de:	9203      	str	r2, [sp, #12]
 801d1e0:	9302      	str	r3, [sp, #8]
 801d1e2:	464c      	mov	r4, r9
 801d1e4:	00e3      	lsls	r3, r4, #3
 801d1e6:	9304      	str	r3, [sp, #16]
 801d1e8:	ab92      	add	r3, sp, #584	@ 0x248
 801d1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d1ee:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d1f2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d1f4:	ab06      	add	r3, sp, #24
 801d1f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d1fa:	461e      	mov	r6, r3
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	2800      	cmp	r0, #0
 801d200:	f1a2 0208 	sub.w	r2, r2, #8
 801d204:	dc4a      	bgt.n	801d29c <__kernel_rem_pio2+0x184>
 801d206:	4628      	mov	r0, r5
 801d208:	9305      	str	r3, [sp, #20]
 801d20a:	f000 fa01 	bl	801d610 <scalbn>
 801d20e:	eeb0 8b40 	vmov.f64	d8, d0
 801d212:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d216:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d21a:	f000 fa79 	bl	801d710 <floor>
 801d21e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d222:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d226:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d22a:	2d00      	cmp	r5, #0
 801d22c:	ee17 8a90 	vmov	r8, s15
 801d230:	9b05      	ldr	r3, [sp, #20]
 801d232:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d236:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d23a:	dd41      	ble.n	801d2c0 <__kernel_rem_pio2+0x1a8>
 801d23c:	1e60      	subs	r0, r4, #1
 801d23e:	aa06      	add	r2, sp, #24
 801d240:	f1c5 0c18 	rsb	ip, r5, #24
 801d244:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d248:	fa46 f20c 	asr.w	r2, r6, ip
 801d24c:	4490      	add	r8, r2
 801d24e:	fa02 f20c 	lsl.w	r2, r2, ip
 801d252:	1ab6      	subs	r6, r6, r2
 801d254:	aa06      	add	r2, sp, #24
 801d256:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d25a:	f1c5 0217 	rsb	r2, r5, #23
 801d25e:	4116      	asrs	r6, r2
 801d260:	2e00      	cmp	r6, #0
 801d262:	dd3c      	ble.n	801d2de <__kernel_rem_pio2+0x1c6>
 801d264:	f04f 0c00 	mov.w	ip, #0
 801d268:	f108 0801 	add.w	r8, r8, #1
 801d26c:	4660      	mov	r0, ip
 801d26e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d272:	4564      	cmp	r4, ip
 801d274:	dc66      	bgt.n	801d344 <__kernel_rem_pio2+0x22c>
 801d276:	2d00      	cmp	r5, #0
 801d278:	dd03      	ble.n	801d282 <__kernel_rem_pio2+0x16a>
 801d27a:	2d01      	cmp	r5, #1
 801d27c:	d072      	beq.n	801d364 <__kernel_rem_pio2+0x24c>
 801d27e:	2d02      	cmp	r5, #2
 801d280:	d07a      	beq.n	801d378 <__kernel_rem_pio2+0x260>
 801d282:	2e02      	cmp	r6, #2
 801d284:	d12b      	bne.n	801d2de <__kernel_rem_pio2+0x1c6>
 801d286:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d28a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d28e:	b330      	cbz	r0, 801d2de <__kernel_rem_pio2+0x1c6>
 801d290:	4628      	mov	r0, r5
 801d292:	f000 f9bd 	bl	801d610 <scalbn>
 801d296:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d29a:	e020      	b.n	801d2de <__kernel_rem_pio2+0x1c6>
 801d29c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d2a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d2a4:	3801      	subs	r0, #1
 801d2a6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d2aa:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d2ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d2b2:	eca6 0a01 	vstmia	r6!, {s0}
 801d2b6:	ed92 0b00 	vldr	d0, [r2]
 801d2ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d2be:	e79e      	b.n	801d1fe <__kernel_rem_pio2+0xe6>
 801d2c0:	d105      	bne.n	801d2ce <__kernel_rem_pio2+0x1b6>
 801d2c2:	1e62      	subs	r2, r4, #1
 801d2c4:	a906      	add	r1, sp, #24
 801d2c6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d2ca:	15f6      	asrs	r6, r6, #23
 801d2cc:	e7c8      	b.n	801d260 <__kernel_rem_pio2+0x148>
 801d2ce:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d2d2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2da:	da31      	bge.n	801d340 <__kernel_rem_pio2+0x228>
 801d2dc:	2600      	movs	r6, #0
 801d2de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2e6:	f040 809b 	bne.w	801d420 <__kernel_rem_pio2+0x308>
 801d2ea:	1e62      	subs	r2, r4, #1
 801d2ec:	2000      	movs	r0, #0
 801d2ee:	454a      	cmp	r2, r9
 801d2f0:	da49      	bge.n	801d386 <__kernel_rem_pio2+0x26e>
 801d2f2:	2800      	cmp	r0, #0
 801d2f4:	d062      	beq.n	801d3bc <__kernel_rem_pio2+0x2a4>
 801d2f6:	3c01      	subs	r4, #1
 801d2f8:	ab06      	add	r3, sp, #24
 801d2fa:	3d18      	subs	r5, #24
 801d2fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d300:	2b00      	cmp	r3, #0
 801d302:	d0f8      	beq.n	801d2f6 <__kernel_rem_pio2+0x1de>
 801d304:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d308:	4628      	mov	r0, r5
 801d30a:	f000 f981 	bl	801d610 <scalbn>
 801d30e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d408 <__kernel_rem_pio2+0x2f0>
 801d312:	1c62      	adds	r2, r4, #1
 801d314:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d316:	00d3      	lsls	r3, r2, #3
 801d318:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d31c:	4622      	mov	r2, r4
 801d31e:	2a00      	cmp	r2, #0
 801d320:	f280 80a8 	bge.w	801d474 <__kernel_rem_pio2+0x35c>
 801d324:	4622      	mov	r2, r4
 801d326:	2a00      	cmp	r2, #0
 801d328:	f2c0 80c6 	blt.w	801d4b8 <__kernel_rem_pio2+0x3a0>
 801d32c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d32e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d332:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d400 <__kernel_rem_pio2+0x2e8>
 801d336:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d41c <__kernel_rem_pio2+0x304>
 801d33a:	2000      	movs	r0, #0
 801d33c:	1aa1      	subs	r1, r4, r2
 801d33e:	e0b0      	b.n	801d4a2 <__kernel_rem_pio2+0x38a>
 801d340:	2602      	movs	r6, #2
 801d342:	e78f      	b.n	801d264 <__kernel_rem_pio2+0x14c>
 801d344:	f853 2b04 	ldr.w	r2, [r3], #4
 801d348:	b948      	cbnz	r0, 801d35e <__kernel_rem_pio2+0x246>
 801d34a:	b122      	cbz	r2, 801d356 <__kernel_rem_pio2+0x23e>
 801d34c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d350:	f843 2c04 	str.w	r2, [r3, #-4]
 801d354:	2201      	movs	r2, #1
 801d356:	f10c 0c01 	add.w	ip, ip, #1
 801d35a:	4610      	mov	r0, r2
 801d35c:	e789      	b.n	801d272 <__kernel_rem_pio2+0x15a>
 801d35e:	ebae 0202 	sub.w	r2, lr, r2
 801d362:	e7f5      	b.n	801d350 <__kernel_rem_pio2+0x238>
 801d364:	1e62      	subs	r2, r4, #1
 801d366:	ab06      	add	r3, sp, #24
 801d368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d36c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d370:	a906      	add	r1, sp, #24
 801d372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d376:	e784      	b.n	801d282 <__kernel_rem_pio2+0x16a>
 801d378:	1e62      	subs	r2, r4, #1
 801d37a:	ab06      	add	r3, sp, #24
 801d37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d380:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d384:	e7f4      	b.n	801d370 <__kernel_rem_pio2+0x258>
 801d386:	ab06      	add	r3, sp, #24
 801d388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d38c:	3a01      	subs	r2, #1
 801d38e:	4318      	orrs	r0, r3
 801d390:	e7ad      	b.n	801d2ee <__kernel_rem_pio2+0x1d6>
 801d392:	3301      	adds	r3, #1
 801d394:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d398:	2800      	cmp	r0, #0
 801d39a:	d0fa      	beq.n	801d392 <__kernel_rem_pio2+0x27a>
 801d39c:	9a04      	ldr	r2, [sp, #16]
 801d39e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d3a2:	446a      	add	r2, sp
 801d3a4:	eb04 000b 	add.w	r0, r4, fp
 801d3a8:	a91a      	add	r1, sp, #104	@ 0x68
 801d3aa:	1c66      	adds	r6, r4, #1
 801d3ac:	3a98      	subs	r2, #152	@ 0x98
 801d3ae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d3b2:	4423      	add	r3, r4
 801d3b4:	42b3      	cmp	r3, r6
 801d3b6:	da04      	bge.n	801d3c2 <__kernel_rem_pio2+0x2aa>
 801d3b8:	461c      	mov	r4, r3
 801d3ba:	e713      	b.n	801d1e4 <__kernel_rem_pio2+0xcc>
 801d3bc:	9a03      	ldr	r2, [sp, #12]
 801d3be:	2301      	movs	r3, #1
 801d3c0:	e7e8      	b.n	801d394 <__kernel_rem_pio2+0x27c>
 801d3c2:	9902      	ldr	r1, [sp, #8]
 801d3c4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d3c8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d3cc:	9104      	str	r1, [sp, #16]
 801d3ce:	ee07 1a90 	vmov	s15, r1
 801d3d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d3d6:	2400      	movs	r4, #0
 801d3d8:	eca0 7b02 	vstmia	r0!, {d7}
 801d3dc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d400 <__kernel_rem_pio2+0x2e8>
 801d3e0:	4686      	mov	lr, r0
 801d3e2:	4554      	cmp	r4, sl
 801d3e4:	dd03      	ble.n	801d3ee <__kernel_rem_pio2+0x2d6>
 801d3e6:	eca2 7b02 	vstmia	r2!, {d7}
 801d3ea:	3601      	adds	r6, #1
 801d3ec:	e7e2      	b.n	801d3b4 <__kernel_rem_pio2+0x29c>
 801d3ee:	ecbc 5b02 	vldmia	ip!, {d5}
 801d3f2:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d3f6:	3401      	adds	r4, #1
 801d3f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d3fc:	e7f1      	b.n	801d3e2 <__kernel_rem_pio2+0x2ca>
 801d3fe:	bf00      	nop
	...
 801d40c:	3e700000 	.word	0x3e700000
 801d410:	00000000 	.word	0x00000000
 801d414:	41700000 	.word	0x41700000
 801d418:	0801ea98 	.word	0x0801ea98
 801d41c:	0801ea58 	.word	0x0801ea58
 801d420:	4268      	negs	r0, r5
 801d422:	eeb0 0b48 	vmov.f64	d0, d8
 801d426:	f000 f8f3 	bl	801d610 <scalbn>
 801d42a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d5f8 <__kernel_rem_pio2+0x4e0>
 801d42e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d436:	db17      	blt.n	801d468 <__kernel_rem_pio2+0x350>
 801d438:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d600 <__kernel_rem_pio2+0x4e8>
 801d43c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d440:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d444:	aa06      	add	r2, sp, #24
 801d446:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d44a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d44e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d452:	3518      	adds	r5, #24
 801d454:	ee10 3a10 	vmov	r3, s0
 801d458:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d45c:	ee17 3a10 	vmov	r3, s14
 801d460:	3401      	adds	r4, #1
 801d462:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d466:	e74d      	b.n	801d304 <__kernel_rem_pio2+0x1ec>
 801d468:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d46c:	aa06      	add	r2, sp, #24
 801d46e:	ee10 3a10 	vmov	r3, s0
 801d472:	e7f6      	b.n	801d462 <__kernel_rem_pio2+0x34a>
 801d474:	a806      	add	r0, sp, #24
 801d476:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d47a:	9001      	str	r0, [sp, #4]
 801d47c:	ee07 0a90 	vmov	s15, r0
 801d480:	3a01      	subs	r2, #1
 801d482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d486:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d48a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d48e:	ed21 7b02 	vstmdb	r1!, {d7}
 801d492:	e744      	b.n	801d31e <__kernel_rem_pio2+0x206>
 801d494:	ecbc 5b02 	vldmia	ip!, {d5}
 801d498:	ecb5 6b02 	vldmia	r5!, {d6}
 801d49c:	3001      	adds	r0, #1
 801d49e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d4a2:	4548      	cmp	r0, r9
 801d4a4:	dc01      	bgt.n	801d4aa <__kernel_rem_pio2+0x392>
 801d4a6:	4281      	cmp	r1, r0
 801d4a8:	daf4      	bge.n	801d494 <__kernel_rem_pio2+0x37c>
 801d4aa:	a842      	add	r0, sp, #264	@ 0x108
 801d4ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d4b0:	ed81 7b00 	vstr	d7, [r1]
 801d4b4:	3a01      	subs	r2, #1
 801d4b6:	e736      	b.n	801d326 <__kernel_rem_pio2+0x20e>
 801d4b8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d4ba:	2a02      	cmp	r2, #2
 801d4bc:	dc0a      	bgt.n	801d4d4 <__kernel_rem_pio2+0x3bc>
 801d4be:	2a00      	cmp	r2, #0
 801d4c0:	dc2d      	bgt.n	801d51e <__kernel_rem_pio2+0x406>
 801d4c2:	d046      	beq.n	801d552 <__kernel_rem_pio2+0x43a>
 801d4c4:	f008 0007 	and.w	r0, r8, #7
 801d4c8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d4cc:	ecbd 8b06 	vpop	{d8-d10}
 801d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4d4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d4d6:	2a03      	cmp	r2, #3
 801d4d8:	d1f4      	bne.n	801d4c4 <__kernel_rem_pio2+0x3ac>
 801d4da:	a942      	add	r1, sp, #264	@ 0x108
 801d4dc:	f1a3 0208 	sub.w	r2, r3, #8
 801d4e0:	440a      	add	r2, r1
 801d4e2:	4611      	mov	r1, r2
 801d4e4:	4620      	mov	r0, r4
 801d4e6:	2800      	cmp	r0, #0
 801d4e8:	f1a1 0108 	sub.w	r1, r1, #8
 801d4ec:	dc52      	bgt.n	801d594 <__kernel_rem_pio2+0x47c>
 801d4ee:	4621      	mov	r1, r4
 801d4f0:	2901      	cmp	r1, #1
 801d4f2:	f1a2 0208 	sub.w	r2, r2, #8
 801d4f6:	dc5d      	bgt.n	801d5b4 <__kernel_rem_pio2+0x49c>
 801d4f8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d608 <__kernel_rem_pio2+0x4f0>
 801d4fc:	aa42      	add	r2, sp, #264	@ 0x108
 801d4fe:	4413      	add	r3, r2
 801d500:	2c01      	cmp	r4, #1
 801d502:	dc67      	bgt.n	801d5d4 <__kernel_rem_pio2+0x4bc>
 801d504:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d508:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d50c:	2e00      	cmp	r6, #0
 801d50e:	d167      	bne.n	801d5e0 <__kernel_rem_pio2+0x4c8>
 801d510:	ed87 5b00 	vstr	d5, [r7]
 801d514:	ed87 6b02 	vstr	d6, [r7, #8]
 801d518:	ed87 7b04 	vstr	d7, [r7, #16]
 801d51c:	e7d2      	b.n	801d4c4 <__kernel_rem_pio2+0x3ac>
 801d51e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d608 <__kernel_rem_pio2+0x4f0>
 801d522:	aa42      	add	r2, sp, #264	@ 0x108
 801d524:	4413      	add	r3, r2
 801d526:	4622      	mov	r2, r4
 801d528:	2a00      	cmp	r2, #0
 801d52a:	da24      	bge.n	801d576 <__kernel_rem_pio2+0x45e>
 801d52c:	b34e      	cbz	r6, 801d582 <__kernel_rem_pio2+0x46a>
 801d52e:	eeb1 7b46 	vneg.f64	d7, d6
 801d532:	ed87 7b00 	vstr	d7, [r7]
 801d536:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d53a:	aa44      	add	r2, sp, #272	@ 0x110
 801d53c:	2301      	movs	r3, #1
 801d53e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d542:	429c      	cmp	r4, r3
 801d544:	da20      	bge.n	801d588 <__kernel_rem_pio2+0x470>
 801d546:	b10e      	cbz	r6, 801d54c <__kernel_rem_pio2+0x434>
 801d548:	eeb1 7b47 	vneg.f64	d7, d7
 801d54c:	ed87 7b02 	vstr	d7, [r7, #8]
 801d550:	e7b8      	b.n	801d4c4 <__kernel_rem_pio2+0x3ac>
 801d552:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d608 <__kernel_rem_pio2+0x4f0>
 801d556:	aa42      	add	r2, sp, #264	@ 0x108
 801d558:	4413      	add	r3, r2
 801d55a:	2c00      	cmp	r4, #0
 801d55c:	da05      	bge.n	801d56a <__kernel_rem_pio2+0x452>
 801d55e:	b10e      	cbz	r6, 801d564 <__kernel_rem_pio2+0x44c>
 801d560:	eeb1 7b47 	vneg.f64	d7, d7
 801d564:	ed87 7b00 	vstr	d7, [r7]
 801d568:	e7ac      	b.n	801d4c4 <__kernel_rem_pio2+0x3ac>
 801d56a:	ed33 6b02 	vldmdb	r3!, {d6}
 801d56e:	3c01      	subs	r4, #1
 801d570:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d574:	e7f1      	b.n	801d55a <__kernel_rem_pio2+0x442>
 801d576:	ed33 7b02 	vldmdb	r3!, {d7}
 801d57a:	3a01      	subs	r2, #1
 801d57c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d580:	e7d2      	b.n	801d528 <__kernel_rem_pio2+0x410>
 801d582:	eeb0 7b46 	vmov.f64	d7, d6
 801d586:	e7d4      	b.n	801d532 <__kernel_rem_pio2+0x41a>
 801d588:	ecb2 6b02 	vldmia	r2!, {d6}
 801d58c:	3301      	adds	r3, #1
 801d58e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d592:	e7d6      	b.n	801d542 <__kernel_rem_pio2+0x42a>
 801d594:	ed91 7b00 	vldr	d7, [r1]
 801d598:	ed91 5b02 	vldr	d5, [r1, #8]
 801d59c:	3801      	subs	r0, #1
 801d59e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d5a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d5a6:	ed81 6b00 	vstr	d6, [r1]
 801d5aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d5ae:	ed81 7b02 	vstr	d7, [r1, #8]
 801d5b2:	e798      	b.n	801d4e6 <__kernel_rem_pio2+0x3ce>
 801d5b4:	ed92 7b00 	vldr	d7, [r2]
 801d5b8:	ed92 5b02 	vldr	d5, [r2, #8]
 801d5bc:	3901      	subs	r1, #1
 801d5be:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d5c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d5c6:	ed82 6b00 	vstr	d6, [r2]
 801d5ca:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d5ce:	ed82 7b02 	vstr	d7, [r2, #8]
 801d5d2:	e78d      	b.n	801d4f0 <__kernel_rem_pio2+0x3d8>
 801d5d4:	ed33 6b02 	vldmdb	r3!, {d6}
 801d5d8:	3c01      	subs	r4, #1
 801d5da:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d5de:	e78f      	b.n	801d500 <__kernel_rem_pio2+0x3e8>
 801d5e0:	eeb1 5b45 	vneg.f64	d5, d5
 801d5e4:	eeb1 6b46 	vneg.f64	d6, d6
 801d5e8:	ed87 5b00 	vstr	d5, [r7]
 801d5ec:	eeb1 7b47 	vneg.f64	d7, d7
 801d5f0:	ed87 6b02 	vstr	d6, [r7, #8]
 801d5f4:	e790      	b.n	801d518 <__kernel_rem_pio2+0x400>
 801d5f6:	bf00      	nop
 801d5f8:	00000000 	.word	0x00000000
 801d5fc:	41700000 	.word	0x41700000
 801d600:	00000000 	.word	0x00000000
 801d604:	3e700000 	.word	0x3e700000
	...

0801d610 <scalbn>:
 801d610:	ee10 1a90 	vmov	r1, s1
 801d614:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d618:	b98b      	cbnz	r3, 801d63e <scalbn+0x2e>
 801d61a:	ee10 3a10 	vmov	r3, s0
 801d61e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d622:	4319      	orrs	r1, r3
 801d624:	d00a      	beq.n	801d63c <scalbn+0x2c>
 801d626:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801d6d8 <scalbn+0xc8>
 801d62a:	4b37      	ldr	r3, [pc, #220]	@ (801d708 <scalbn+0xf8>)
 801d62c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d630:	4298      	cmp	r0, r3
 801d632:	da0b      	bge.n	801d64c <scalbn+0x3c>
 801d634:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801d6e0 <scalbn+0xd0>
 801d638:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d63c:	4770      	bx	lr
 801d63e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d642:	4293      	cmp	r3, r2
 801d644:	d107      	bne.n	801d656 <scalbn+0x46>
 801d646:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d64a:	4770      	bx	lr
 801d64c:	ee10 1a90 	vmov	r1, s1
 801d650:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d654:	3b36      	subs	r3, #54	@ 0x36
 801d656:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d65a:	4290      	cmp	r0, r2
 801d65c:	dd0d      	ble.n	801d67a <scalbn+0x6a>
 801d65e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801d6e8 <scalbn+0xd8>
 801d662:	ee10 3a90 	vmov	r3, s1
 801d666:	eeb0 6b47 	vmov.f64	d6, d7
 801d66a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801d6f0 <scalbn+0xe0>
 801d66e:	2b00      	cmp	r3, #0
 801d670:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d674:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d678:	4770      	bx	lr
 801d67a:	4418      	add	r0, r3
 801d67c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d680:	4298      	cmp	r0, r3
 801d682:	dcec      	bgt.n	801d65e <scalbn+0x4e>
 801d684:	2800      	cmp	r0, #0
 801d686:	dd0a      	ble.n	801d69e <scalbn+0x8e>
 801d688:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d68c:	ec53 2b10 	vmov	r2, r3, d0
 801d690:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d694:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d698:	ec43 2b10 	vmov	d0, r2, r3
 801d69c:	4770      	bx	lr
 801d69e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d6a2:	da09      	bge.n	801d6b8 <scalbn+0xa8>
 801d6a4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801d6e0 <scalbn+0xd0>
 801d6a8:	ee10 3a90 	vmov	r3, s1
 801d6ac:	eeb0 6b47 	vmov.f64	d6, d7
 801d6b0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801d6f8 <scalbn+0xe8>
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	e7db      	b.n	801d670 <scalbn+0x60>
 801d6b8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d6bc:	ec53 2b10 	vmov	r2, r3, d0
 801d6c0:	3036      	adds	r0, #54	@ 0x36
 801d6c2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d6c6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d6ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d700 <scalbn+0xf0>
 801d6ce:	ec43 2b10 	vmov	d0, r2, r3
 801d6d2:	e7b1      	b.n	801d638 <scalbn+0x28>
 801d6d4:	f3af 8000 	nop.w
 801d6d8:	00000000 	.word	0x00000000
 801d6dc:	43500000 	.word	0x43500000
 801d6e0:	c2f8f359 	.word	0xc2f8f359
 801d6e4:	01a56e1f 	.word	0x01a56e1f
 801d6e8:	8800759c 	.word	0x8800759c
 801d6ec:	7e37e43c 	.word	0x7e37e43c
 801d6f0:	8800759c 	.word	0x8800759c
 801d6f4:	fe37e43c 	.word	0xfe37e43c
 801d6f8:	c2f8f359 	.word	0xc2f8f359
 801d6fc:	81a56e1f 	.word	0x81a56e1f
 801d700:	00000000 	.word	0x00000000
 801d704:	3c900000 	.word	0x3c900000
 801d708:	ffff3cb0 	.word	0xffff3cb0
 801d70c:	00000000 	.word	0x00000000

0801d710 <floor>:
 801d710:	ee10 3a90 	vmov	r3, s1
 801d714:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801d718:	ee10 2a10 	vmov	r2, s0
 801d71c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801d720:	2913      	cmp	r1, #19
 801d722:	b530      	push	{r4, r5, lr}
 801d724:	4615      	mov	r5, r2
 801d726:	dc33      	bgt.n	801d790 <floor+0x80>
 801d728:	2900      	cmp	r1, #0
 801d72a:	da18      	bge.n	801d75e <floor+0x4e>
 801d72c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d7f0 <floor+0xe0>
 801d730:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d734:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d73c:	dd0a      	ble.n	801d754 <floor+0x44>
 801d73e:	2b00      	cmp	r3, #0
 801d740:	da50      	bge.n	801d7e4 <floor+0xd4>
 801d742:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d746:	4313      	orrs	r3, r2
 801d748:	2200      	movs	r2, #0
 801d74a:	4293      	cmp	r3, r2
 801d74c:	4b2a      	ldr	r3, [pc, #168]	@ (801d7f8 <floor+0xe8>)
 801d74e:	bf08      	it	eq
 801d750:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d754:	4619      	mov	r1, r3
 801d756:	4610      	mov	r0, r2
 801d758:	ec41 0b10 	vmov	d0, r0, r1
 801d75c:	e01f      	b.n	801d79e <floor+0x8e>
 801d75e:	4827      	ldr	r0, [pc, #156]	@ (801d7fc <floor+0xec>)
 801d760:	4108      	asrs	r0, r1
 801d762:	ea03 0400 	and.w	r4, r3, r0
 801d766:	4314      	orrs	r4, r2
 801d768:	d019      	beq.n	801d79e <floor+0x8e>
 801d76a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d7f0 <floor+0xe0>
 801d76e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d772:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d77a:	ddeb      	ble.n	801d754 <floor+0x44>
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	bfbe      	ittt	lt
 801d780:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d784:	410a      	asrlt	r2, r1
 801d786:	189b      	addlt	r3, r3, r2
 801d788:	ea23 0300 	bic.w	r3, r3, r0
 801d78c:	2200      	movs	r2, #0
 801d78e:	e7e1      	b.n	801d754 <floor+0x44>
 801d790:	2933      	cmp	r1, #51	@ 0x33
 801d792:	dd05      	ble.n	801d7a0 <floor+0x90>
 801d794:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d798:	d101      	bne.n	801d79e <floor+0x8e>
 801d79a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d79e:	bd30      	pop	{r4, r5, pc}
 801d7a0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d7a8:	40e0      	lsrs	r0, r4
 801d7aa:	4210      	tst	r0, r2
 801d7ac:	d0f7      	beq.n	801d79e <floor+0x8e>
 801d7ae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d7f0 <floor+0xe0>
 801d7b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d7b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7be:	ddc9      	ble.n	801d754 <floor+0x44>
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	da02      	bge.n	801d7ca <floor+0xba>
 801d7c4:	2914      	cmp	r1, #20
 801d7c6:	d103      	bne.n	801d7d0 <floor+0xc0>
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	ea22 0200 	bic.w	r2, r2, r0
 801d7ce:	e7c1      	b.n	801d754 <floor+0x44>
 801d7d0:	2401      	movs	r4, #1
 801d7d2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d7d6:	fa04 f101 	lsl.w	r1, r4, r1
 801d7da:	440a      	add	r2, r1
 801d7dc:	42aa      	cmp	r2, r5
 801d7de:	bf38      	it	cc
 801d7e0:	191b      	addcc	r3, r3, r4
 801d7e2:	e7f2      	b.n	801d7ca <floor+0xba>
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	4613      	mov	r3, r2
 801d7e8:	e7b4      	b.n	801d754 <floor+0x44>
 801d7ea:	bf00      	nop
 801d7ec:	f3af 8000 	nop.w
 801d7f0:	8800759c 	.word	0x8800759c
 801d7f4:	7e37e43c 	.word	0x7e37e43c
 801d7f8:	bff00000 	.word	0xbff00000
 801d7fc:	000fffff 	.word	0x000fffff

0801d800 <_init>:
 801d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d802:	bf00      	nop
 801d804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d806:	bc08      	pop	{r3}
 801d808:	469e      	mov	lr, r3
 801d80a:	4770      	bx	lr

0801d80c <_fini>:
 801d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d80e:	bf00      	nop
 801d810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d812:	bc08      	pop	{r3}
 801d814:	469e      	mov	lr, r3
 801d816:	4770      	bx	lr
