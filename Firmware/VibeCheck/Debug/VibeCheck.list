
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cdc8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  0801d098  0801d098  0001e098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801df28  0801df28  0001ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801df30  0801df30  0001ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801df34  0801df34  0001ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002cc  24000000  0801df38  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000060a0  240002cc  0801e204  0001f2cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400636c  0801e204  0001f36c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001f2cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039f7d  00000000  00000000  0001f2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007349  00000000  00000000  00059277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002908  00000000  00000000  000605c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fc4  00000000  00000000  00062ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e663  00000000  00000000  00064e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003eeea  00000000  00000000  000a34ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172dd6  00000000  00000000  000e23d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002551af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c490  00000000  00000000  002551f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00261684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000072  00000000  00000000  0026172a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002cc 	.word	0x240002cc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801d080 	.word	0x0801d080

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d0 	.word	0x240002d0
 800030c:	0801d080 	.word	0x0801d080

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00a fb97 	bl	800b230 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fadf 	bl	80010e0 <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9a9 	bl	8000ea0 <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9b4 	bl	8000ebc <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b54:	2201      	movs	r2, #1
 8000b56:	210d      	movs	r1, #13
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 faf5 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b5e:	2202      	movs	r2, #2
 8000b60:	210e      	movs	r1, #14
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 faf0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b68:	2204      	movs	r2, #4
 8000b6a:	2113      	movs	r1, #19
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 faeb 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b72:	2200      	movs	r2, #0
 8000b74:	2115      	movs	r1, #21
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fae6 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2116      	movs	r1, #22
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fae1 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2117      	movs	r1, #23
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fadc 	bl	8001148 <LSM6DS3_WriteRegister>

	LSM6DS3_WriteOffsets(sensor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f805 	bl	8000ba0 <LSM6DS3_WriteOffsets>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop

08000ba0 <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	ed93 7a00 	vldr	s14, [r3]
 8000bb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bbc:	edc7 7a00 	vstr	s15, [r7]
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000bcc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd8:	edc7 7a00 	vstr	s15, [r7]
 8000bdc:	783b      	ldrb	r3, [r7, #0]
 8000bde:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be8:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c28 <LSM6DS3_WriteOffsets+0x88>
 8000bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
 8000bf8:	783b      	ldrb	r3, [r7, #0]
 8000bfa:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2173      	movs	r1, #115	@ 0x73
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 faa0 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2174      	movs	r1, #116	@ 0x74
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 fa9a 	bl	8001148 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	461a      	mov	r2, r3
 8000c18:	2175      	movs	r1, #117	@ 0x75
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fa94 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	3a800000 	.word	0x3a800000

08000c2c <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d04d      	beq.n	8000cde <LSM6DS3_StartAccel+0xb2>
 8000c42:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d84c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c4a:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d042      	beq.n	8000cd8 <LSM6DS3_StartAccel+0xac>
 8000c52:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d844      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c5a:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d037      	beq.n	8000cd2 <LSM6DS3_StartAccel+0xa6>
 8000c62:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d83c      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c6a:	f240 3241 	movw	r2, #833	@ 0x341
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d02c      	beq.n	8000ccc <LSM6DS3_StartAccel+0xa0>
 8000c72:	f240 3241 	movw	r2, #833	@ 0x341
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d834      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c7a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c7e:	d022      	beq.n	8000cc6 <LSM6DS3_StartAccel+0x9a>
 8000c80:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000c84:	d82e      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c86:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c88:	d01a      	beq.n	8000cc0 <LSM6DS3_StartAccel+0x94>
 8000c8a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000c8c:	d82a      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c8e:	2b68      	cmp	r3, #104	@ 0x68
 8000c90:	d013      	beq.n	8000cba <LSM6DS3_StartAccel+0x8e>
 8000c92:	2b68      	cmp	r3, #104	@ 0x68
 8000c94:	d826      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c96:	2b34      	cmp	r3, #52	@ 0x34
 8000c98:	d00c      	beq.n	8000cb4 <LSM6DS3_StartAccel+0x88>
 8000c9a:	2b34      	cmp	r3, #52	@ 0x34
 8000c9c:	d822      	bhi.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
 8000c9e:	2b0d      	cmp	r3, #13
 8000ca0:	d002      	beq.n	8000ca8 <LSM6DS3_StartAccel+0x7c>
 8000ca2:	2b1a      	cmp	r3, #26
 8000ca4:	d003      	beq.n	8000cae <LSM6DS3_StartAccel+0x82>
 8000ca6:	e01d      	b.n	8000ce4 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e01d      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e01a      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000cb4:	2330      	movs	r3, #48	@ 0x30
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e017      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e014      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000cc0:	2350      	movs	r3, #80	@ 0x50
 8000cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc4:	e011      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000cc6:	2360      	movs	r3, #96	@ 0x60
 8000cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cca:	e00e      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000ccc:	2370      	movs	r3, #112	@ 0x70
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	e00b      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000cd2:	2380      	movs	r3, #128	@ 0x80
 8000cd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd6:	e008      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000cd8:	2390      	movs	r3, #144	@ 0x90
 8000cda:	73fb      	strb	r3, [r7, #15]
		break;
 8000cdc:	e005      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000cde:	23a0      	movs	r3, #160	@ 0xa0
 8000ce0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce2:	e002      	b.n	8000cea <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ce8:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	3b02      	subs	r3, #2
 8000cf2:	2b0e      	cmp	r3, #14
 8000cf4:	d82c      	bhi.n	8000d50 <LSM6DS3_StartAccel+0x124>
 8000cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cfc <LSM6DS3_StartAccel+0xd0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d3f 	.word	0x08000d3f
 8000d08:	08000d51 	.word	0x08000d51
 8000d0c:	08000d51 	.word	0x08000d51
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d45 	.word	0x08000d45
 8000d18:	08000d51 	.word	0x08000d51
 8000d1c:	08000d51 	.word	0x08000d51
 8000d20:	08000d51 	.word	0x08000d51
 8000d24:	08000d51 	.word	0x08000d51
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d51 	.word	0x08000d51
 8000d30:	08000d51 	.word	0x08000d51
 8000d34:	08000d4b 	.word	0x08000d4b
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73bb      	strb	r3, [r7, #14]
		break;
 8000d3c:	e00b      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
		break;
 8000d42:	e008      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000d44:	230c      	movs	r3, #12
 8000d46:	73bb      	strb	r3, [r7, #14]
		break;
 8000d48:	e005      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d4e:	e002      	b.n	8000d56 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
		break;
 8000d54:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000d56:	7bfa      	ldrb	r2, [r7, #15]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2110      	movs	r1, #16
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f9f0 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d04d      	beq.n	8000e22 <LSM6DS3_StartGyro+0xb2>
 8000d86:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d84c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d8e:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d042      	beq.n	8000e1c <LSM6DS3_StartGyro+0xac>
 8000d96:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d844      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000d9e:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d037      	beq.n	8000e16 <LSM6DS3_StartGyro+0xa6>
 8000da6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d83c      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dae:	f240 3241 	movw	r2, #833	@ 0x341
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02c      	beq.n	8000e10 <LSM6DS3_StartGyro+0xa0>
 8000db6:	f240 3241 	movw	r2, #833	@ 0x341
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d834      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dbe:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc2:	d022      	beq.n	8000e0a <LSM6DS3_StartGyro+0x9a>
 8000dc4:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000dc8:	d82e      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dca:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dcc:	d01a      	beq.n	8000e04 <LSM6DS3_StartGyro+0x94>
 8000dce:	2bd0      	cmp	r3, #208	@ 0xd0
 8000dd0:	d82a      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dd2:	2b68      	cmp	r3, #104	@ 0x68
 8000dd4:	d013      	beq.n	8000dfe <LSM6DS3_StartGyro+0x8e>
 8000dd6:	2b68      	cmp	r3, #104	@ 0x68
 8000dd8:	d826      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000dda:	2b34      	cmp	r3, #52	@ 0x34
 8000ddc:	d00c      	beq.n	8000df8 <LSM6DS3_StartGyro+0x88>
 8000dde:	2b34      	cmp	r3, #52	@ 0x34
 8000de0:	d822      	bhi.n	8000e28 <LSM6DS3_StartGyro+0xb8>
 8000de2:	2b0d      	cmp	r3, #13
 8000de4:	d002      	beq.n	8000dec <LSM6DS3_StartGyro+0x7c>
 8000de6:	2b1a      	cmp	r3, #26
 8000de8:	d003      	beq.n	8000df2 <LSM6DS3_StartGyro+0x82>
 8000dea:	e01d      	b.n	8000e28 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000dec:	2310      	movs	r3, #16
 8000dee:	73fb      	strb	r3, [r7, #15]
		break;
 8000df0:	e01d      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000df2:	2320      	movs	r3, #32
 8000df4:	73fb      	strb	r3, [r7, #15]
		break;
 8000df6:	e01a      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfc:	e017      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	73fb      	strb	r3, [r7, #15]
		break;
 8000e02:	e014      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e04:	2350      	movs	r3, #80	@ 0x50
 8000e06:	73fb      	strb	r3, [r7, #15]
		break;
 8000e08:	e011      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e0a:	2360      	movs	r3, #96	@ 0x60
 8000e0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0e:	e00e      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e10:	2370      	movs	r3, #112	@ 0x70
 8000e12:	73fb      	strb	r3, [r7, #15]
		break;
 8000e14:	e00b      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e008      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e1c:	2390      	movs	r3, #144	@ 0x90
 8000e1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e20:	e005      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e22:	23a0      	movs	r3, #160	@ 0xa0
 8000e24:	73fb      	strb	r3, [r7, #15]
		break;
 8000e26:	e002      	b.n	8000e2e <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2c:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e38:	d01f      	beq.n	8000e7a <LSM6DS3_StartGyro+0x10a>
 8000e3a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e3e:	d81f      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e44:	d016      	beq.n	8000e74 <LSM6DS3_StartGyro+0x104>
 8000e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4a:	d819      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e50:	d00d      	beq.n	8000e6e <LSM6DS3_StartGyro+0xfe>
 8000e52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e56:	d813      	bhi.n	8000e80 <LSM6DS3_StartGyro+0x110>
 8000e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e5a:	d002      	beq.n	8000e62 <LSM6DS3_StartGyro+0xf2>
 8000e5c:	2bf5      	cmp	r3, #245	@ 0xf5
 8000e5e:	d003      	beq.n	8000e68 <LSM6DS3_StartGyro+0xf8>
 8000e60:	e00e      	b.n	8000e80 <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000e62:	2302      	movs	r3, #2
 8000e64:	73bb      	strb	r3, [r7, #14]
		break;
 8000e66:	e00e      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		break;
 8000e6c:	e00b      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	73bb      	strb	r3, [r7, #14]
		break;
 8000e72:	e008      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000e74:	2308      	movs	r3, #8
 8000e76:	73bb      	strb	r3, [r7, #14]
		break;
 8000e78:	e005      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	73bb      	strb	r3, [r7, #14]
		break;
 8000e7e:	e002      	b.n	8000e86 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73bb      	strb	r3, [r7, #14]
		break;
 8000e84:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2111      	movs	r1, #17
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f958 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f94b 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2111      	movs	r1, #17
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f93d 	bl	8001148 <LSM6DS3_WriteRegister>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08d      	sub	sp, #52	@ 0x34
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd4 <LSM6DS3_ReadAccel+0xfc>)
 8000ee8:	f107 0318 	add.w	r3, r7, #24
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681c      	ldr	r4, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	f107 0110 	add.w	r1, r7, #16
 8000f0e:	f107 0018 	add.w	r0, r7, #24
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	4623      	mov	r3, r4
 8000f18:	2207      	movs	r2, #7
 8000f1a:	f000 f941 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	7d3b      	ldrb	r3, [r7, #20]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f3a:	7d7b      	ldrb	r3, [r7, #21]
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7dbb      	ldrb	r3, [r7, #22]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f66:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbe:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8000fd8 <LSM6DS3_ReadAccel+0x100>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	edc3 7a00 	vstr	s15, [r3]

}
 8000fcc:	bf00      	nop
 8000fce:	372c      	adds	r7, #44	@ 0x2c
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	0801d098 	.word	0x0801d098
 8000fd8:	47000000 	.word	0x47000000

08000fdc <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08d      	sub	sp, #52	@ 0x34
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fea:	4a3b      	ldr	r2, [pc, #236]	@ (80010d8 <LSM6DS3_ReadGyro+0xfc>)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ff4:	6018      	str	r0, [r3, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	8019      	strh	r1, [r3, #0]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	0c0a      	lsrs	r2, r1, #16
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	8912      	ldrh	r2, [r2, #8]
 800100e:	f107 0110 	add.w	r1, r7, #16
 8001012:	f107 0018 	add.w	r0, r7, #24
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	2207      	movs	r2, #7
 800101e:	f000 f8bf 	bl	80011a0 <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001022:	7c7b      	ldrb	r3, [r7, #17]
 8001024:	b21a      	sxth	r2, r3
 8001026:	7cbb      	ldrb	r3, [r7, #18]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	b21a      	sxth	r2, r3
 8001034:	7d3b      	ldrb	r3, [r7, #20]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	b21a      	sxth	r2, r3
 8001042:	7dbb      	ldrb	r3, [r7, #22]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	847b      	strh	r3, [r7, #34]	@ 0x22

	*x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	edc3 7a00 	vstr	s15, [r3]
	*y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001086:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a00 	vstr	s15, [r3]
	*z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80010dc <LSM6DS3_ReadGyro+0x100>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
}
 80010d0:	bf00      	nop
 80010d2:	372c      	adds	r7, #44	@ 0x2c
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	0801d0a0 	.word	0x0801d0a0
 80010dc:	47000000 	.word	0x47000000

080010e0 <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	460b      	mov	r3, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	753b      	strb	r3, [r7, #20]
 80010f8:	2300      	movs	r3, #0
 80010fa:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	f00a f892 	bl	800b230 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, HAL_MAX_DELAY);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 0210 	add.w	r2, r7, #16
 8001114:	f107 0114 	add.w	r1, r7, #20
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	f00f fb34 	bl	801078c <HAL_SPI_TransmitReceive>
 8001124:	4603      	mov	r3, r0
 8001126:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6858      	ldr	r0, [r3, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	891b      	ldrh	r3, [r3, #8]
 8001130:	2201      	movs	r2, #1
 8001132:	4619      	mov	r1, r3
 8001134:	f00a f87c 	bl	800b230 <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 8001138:	7c7a      	ldrb	r2, [r7, #17]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	701a      	strb	r2, [r3, #0]

	return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	891b      	ldrh	r3, [r3, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	f00a f860 	bl	800b230 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, HAL_MAX_DELAY);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	2202      	movs	r2, #2
 800117e:	f00f f917 	bl	80103b0 <HAL_SPI_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6858      	ldr	r0, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	891b      	ldrh	r3, [r3, #8]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	f00a f84d 	bl	800b230 <HAL_GPIO_WritePin>

	return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80011a0:	b470      	push	{r4, r5, r6}
 80011a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80011a6:	4684      	mov	ip, r0
 80011a8:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011aa:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011ac:	4816      	ldr	r0, [pc, #88]	@ (8001208 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 80011ae:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 80011b0:	685e      	ldr	r6, [r3, #4]
 80011b2:	4030      	ands	r0, r6
 80011b4:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 80011b6:	68d8      	ldr	r0, [r3, #12]
 80011b8:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 80011bc:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f040 0001 	orr.w	r0, r0, #1
 80011c4:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80011cc:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011ce:	b1a2      	cbz	r2, 80011fa <SPI_TxRx_Fast+0x5a>
 80011d0:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 80011d4:	6958      	ldr	r0, [r3, #20]
 80011d6:	0780      	lsls	r0, r0, #30
 80011d8:	d5fc      	bpl.n	80011d4 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 80011da:	f81c 0b01 	ldrb.w	r0, [ip], #1
 80011de:	45b4      	cmp	ip, r6
 80011e0:	f883 0020 	strb.w	r0, [r3, #32]
 80011e4:	d1f6      	bne.n	80011d4 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 80011e6:	440a      	add	r2, r1
	}

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 80011e8:	6958      	ldr	r0, [r3, #20]
 80011ea:	07c0      	lsls	r0, r0, #31
 80011ec:	d5fc      	bpl.n	80011e8 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 80011ee:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 80011f2:	f801 0b01 	strb.w	r0, [r1], #1
 80011f6:	4291      	cmp	r1, r2
 80011f8:	d1f6      	bne.n	80011e8 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 8001202:	61a5      	str	r5, [r4, #24]
}
 8001204:	bc70      	pop	{r4, r5, r6}
 8001206:	4770      	bx	lr
 8001208:	ffff0000 	.word	0xffff0000

0800120c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001216:	f004 fbd6 	bl	80059c6 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24002dac 	.word	0x24002dac

08001228 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 8001232:	f005 f9e7 	bl	8006604 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24002dcc 	.word	0x24002dcc

08001244 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 800124e:	f005 f9f5 	bl	800663c <VibeCheckWaveGen_DMACpltCallback>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	24002dcc 	.word	0x24002dcc

08001260 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	4619      	mov	r1, r3
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <HAL_GPIO_EXTI_Callback+0x1c>)
 8001270:	f003 f97c 	bl	800456c <VibeCheckSensor_EXTICallback>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24004398 	.word	0x24004398

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001286:	f000 ff23 	bl	80020d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f005 fcd3 	bl	8006c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f84d 	bl	800132c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001292:	f000 f8bb 	bl	800140c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fdbf 	bl	8001e18 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f000 fd8d 	bl	8001db8 <MX_DMA_Init>
  MX_DAC1_Init();
 800129e:	f000 f9cb 	bl	8001638 <MX_DAC1_Init>
  MX_I2C2_Init();
 80012a2:	f000 fa05 	bl	80016b0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80012a6:	f000 fa43 	bl	8001730 <MX_SPI2_Init>
  MX_SPI3_Init();
 80012aa:	f000 fa97 	bl	80017dc <MX_SPI3_Init>
  MX_SPI4_Init();
 80012ae:	f000 faeb 	bl	8001888 <MX_SPI4_Init>
  MX_TIM4_Init();
 80012b2:	f000 fc6f 	bl	8001b94 <MX_TIM4_Init>
  MX_TIM3_Init();
 80012b6:	f000 fbdf 	bl	8001a78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 fd31 	bl	8001d20 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012be:	f000 fb39 	bl	8001934 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012c2:	f000 fb8b 	bl	80019dc <MX_TIM2_Init>
  MX_ADC1_Init();
 80012c6:	f000 f8d1 	bl	800146c <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ca:	f000 f94b 	bl	8001564 <MX_ADC2_Init>
  MX_UART7_Init();
 80012ce:	f000 fcd9 	bl	8001c84 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 80012d2:	f016 fa79 	bl	80177c8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <main+0x84>)
 80012d8:	f00f fed2 	bl	8011080 <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <main+0x88>)
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <main+0x8c>)
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <main+0x90>)
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <main+0x94>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <main+0x98>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <main+0x9c>)
 80012f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <main+0xa0>)
 80012f4:	490b      	ldr	r1, [pc, #44]	@ (8001324 <main+0xa4>)
 80012f6:	480c      	ldr	r0, [pc, #48]	@ (8001328 <main+0xa8>)
 80012f8:	f001 fe40 	bl	8002f7c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 80012fc:	480a      	ldr	r0, [pc, #40]	@ (8001328 <main+0xa8>)
 80012fe:	f002 f817 	bl	8003330 <VibeCheck_Loop>
 8001302:	e7fb      	b.n	80012fc <main+0x7c>
 8001304:	24000704 	.word	0x24000704
 8001308:	24000630 	.word	0x24000630
 800130c:	240005a8 	.word	0x240005a8
 8001310:	24000520 	.word	0x24000520
 8001314:	40000024 	.word	0x40000024
 8001318:	2400079c 	.word	0x2400079c
 800131c:	240003c8 	.word	0x240003c8
 8001320:	240006b8 	.word	0x240006b8
 8001324:	24000750 	.word	0x24000750
 8001328:	24000988 	.word	0x24000988

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09c      	sub	sp, #112	@ 0x70
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	224c      	movs	r2, #76	@ 0x4c
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f018 fb05 	bl	801994a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2220      	movs	r2, #32
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f018 faff 	bl	801994a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800134c:	2002      	movs	r0, #2
 800134e:	f00b fb75 	bl	800ca3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <SystemClock_Config+0xdc>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a2b      	ldr	r2, [pc, #172]	@ (8001408 <SystemClock_Config+0xdc>)
 800135c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <SystemClock_Config+0xdc>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800136e:	bf00      	nop
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <SystemClock_Config+0xdc>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800137c:	d1f8      	bne.n	8001370 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800137e:	2321      	movs	r3, #33	@ 0x21
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	2302      	movs	r3, #2
 8001392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001398:	2328      	movs	r3, #40	@ 0x28
 800139a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013a8:	230c      	movs	r3, #12
 80013aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00b fb89 	bl	800cad0 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013c4:	f000 feb0 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	233f      	movs	r3, #63	@ 0x3f
 80013ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2303      	movs	r3, #3
 80013ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013d4:	2308      	movs	r3, #8
 80013d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013d8:	2340      	movs	r3, #64	@ 0x40
 80013da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013dc:	2340      	movs	r3, #64	@ 0x40
 80013de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013e6:	2340      	movs	r3, #64	@ 0x40
 80013e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2103      	movs	r1, #3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b ff48 	bl	800d284 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013fa:	f000 fe95 	bl	8002128 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3770      	adds	r7, #112	@ 0x70
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	58024800 	.word	0x58024800

0800140c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	@ 0xb8
 8001410:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	22b8      	movs	r2, #184	@ 0xb8
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f018 fa96 	bl	801994a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800141e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4618      	mov	r0, r3
 8001454:	f00c faa2 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800145e:	f000 fe63 	bl	8002128 <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	37b8      	adds	r7, #184	@ 0xb8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	@ 0x30
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2224      	movs	r2, #36	@ 0x24
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f018 fa60 	bl	801994a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800148c:	4a32      	ldr	r2, [pc, #200]	@ (8001558 <MX_ADC1_Init+0xec>)
 800148e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001490:	4b30      	ldr	r3, [pc, #192]	@ (8001554 <MX_ADC1_Init+0xe8>)
 8001492:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001496:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001498:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014b6:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f0:	4818      	ldr	r0, [pc, #96]	@ (8001554 <MX_ADC1_Init+0xe8>)
 80014f2:	f005 fe9b 	bl	800722c <HAL_ADC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80014fc:	f000 fe14 	bl	8002128 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800150c:	f006 feda 	bl	80082c4 <HAL_ADCEx_MultiModeConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001516:	f000 fe07 	bl	8002128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_ADC1_Init+0xf0>)
 800151c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151e:	2306      	movs	r3, #6
 8001520:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_ADC1_Init+0xf4>)
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800152a:	2304      	movs	r3, #4
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_ADC1_Init+0xe8>)
 800153e:	f006 f87d 	bl	800763c <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001548:	f000 fdee 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3730      	adds	r7, #48	@ 0x30
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	240002e8 	.word	0x240002e8
 8001558:	40022000 	.word	0x40022000
 800155c:	10c00010 	.word	0x10c00010
 8001560:	47ff0000 	.word	0x47ff0000

08001564 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2224      	movs	r2, #36	@ 0x24
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f018 f9ea 	bl	801994a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001576:	4b2c      	ldr	r3, [pc, #176]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001578:	4a2c      	ldr	r2, [pc, #176]	@ (800162c <MX_ADC2_Init+0xc8>)
 800157a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800157e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001582:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800158a:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001590:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001592:	2204      	movs	r2, #4
 8001594:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001596:	4b24      	ldr	r3, [pc, #144]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001598:	2200      	movs	r2, #0
 800159a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <MX_ADC2_Init+0xc4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80015a2:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015dc:	4812      	ldr	r0, [pc, #72]	@ (8001628 <MX_ADC2_Init+0xc4>)
 80015de:	f005 fe25 	bl	800722c <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80015e8:	f000 fd9e 	bl	8002128 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <MX_ADC2_Init+0xcc>)
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	2306      	movs	r3, #6
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <MX_ADC2_Init+0xd0>)
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2304      	movs	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_ADC2_Init+0xc4>)
 8001610:	f006 f814 	bl	800763c <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800161a:	f000 fd85 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24000358 	.word	0x24000358
 800162c:	40022100 	.word	0x40022100
 8001630:	0c900008 	.word	0x0c900008
 8001634:	47ff0000 	.word	0x47ff0000

08001638 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2224      	movs	r2, #36	@ 0x24
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f018 f980 	bl	801994a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_DAC1_Init+0x70>)
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <MX_DAC1_Init+0x74>)
 800164e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001650:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <MX_DAC1_Init+0x70>)
 8001652:	f007 f8a1 	bl	8008798 <HAL_DAC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800165c:	f000 fd64 	bl	8002128 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8001664:	2306      	movs	r3, #6
 8001666:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001668:	2302      	movs	r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800166c:	2301      	movs	r3, #1
 800166e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <MX_DAC1_Init+0x70>)
 800167c:	f007 f978 	bl	8008970 <HAL_DAC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 fd4f 	bl	8002128 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2210      	movs	r2, #16
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_DAC1_Init+0x70>)
 8001692:	f007 f96d 	bl	8008970 <HAL_DAC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800169c:	f000 fd44 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	240003c8 	.word	0x240003c8
 80016ac:	40007400 	.word	0x40007400

080016b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <MX_I2C2_Init+0x78>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016bc:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <MX_I2C2_Init+0x7c>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016cc:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016ea:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016ec:	f009 fdd4 	bl	800b298 <HAL_I2C_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016f6:	f000 fd17 	bl	8002128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016fa:	2100      	movs	r1, #0
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <MX_I2C2_Init+0x74>)
 80016fe:	f009 fe67 	bl	800b3d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001708:	f000 fd0e 	bl	8002128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	4805      	ldr	r0, [pc, #20]	@ (8001724 <MX_I2C2_Init+0x74>)
 8001710:	f009 fea9 	bl	800b466 <HAL_I2CEx_ConfigDigitalFilter>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 fd05 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240004cc 	.word	0x240004cc
 8001728:	40005800 	.word	0x40005800
 800172c:	307075b1 	.word	0x307075b1

08001730 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <MX_SPI2_Init+0xa8>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800173c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b22      	ldr	r3, [pc, #136]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800174a:	2207      	movs	r2, #7
 800174c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800175c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001768:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001784:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_SPI2_Init+0xa4>)
 80017c2:	f00e fcd1 	bl	8010168 <HAL_SPI_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017cc:	f000 fcac 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24000520 	.word	0x24000520
 80017d8:	40003800 	.word	0x40003800

080017dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017e0:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017e2:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <MX_SPI3_Init+0xa8>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b24      	ldr	r3, [pc, #144]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <MX_SPI3_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001806:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001808:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800180c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800183c:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <MX_SPI3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_SPI3_Init+0xa4>)
 800186e:	f00e fc7b 	bl	8010168 <HAL_SPI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001878:	f000 fc56 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	240005a8 	.word	0x240005a8
 8001884:	40003c00 	.word	0x40003c00

08001888 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <MX_SPI4_Init+0xa4>)
 800188e:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <MX_SPI4_Init+0xa8>)
 8001890:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b26      	ldr	r3, [pc, #152]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001894:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001898:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <MX_SPI4_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a0:	4b22      	ldr	r3, [pc, #136]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018b8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018bc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018c0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_SPI4_Init+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001902:	2200      	movs	r2, #0
 8001904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001908:	2200      	movs	r2, #0
 800190a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <MX_SPI4_Init+0xa4>)
 800190e:	2200      	movs	r2, #0
 8001910:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_SPI4_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_SPI4_Init+0xa4>)
 800191a:	f00e fc25 	bl	8010168 <HAL_SPI_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001924:	f000 fc00 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000630 	.word	0x24000630
 8001930:	40013400 	.word	0x40013400

08001934 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <MX_TIM1_Init+0xa4>)
 8001956:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001958:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001966:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800197e:	4815      	ldr	r0, [pc, #84]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 8001980:	f00f fb27 	bl	8010fd2 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800198a:	f000 fbcd 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4619      	mov	r1, r3
 800199a:	480e      	ldr	r0, [pc, #56]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 800199c:	f010 fad8 	bl	8011f50 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019a6:	f000 fbbf 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019aa:	2320      	movs	r3, #32
 80019ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <MX_TIM1_Init+0xa0>)
 80019bc:	f011 f91a 	bl	8012bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019c6:	f000 fbaf 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	240006b8 	.word	0x240006b8
 80019d8:	40010000 	.word	0x40010000

080019dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <MX_TIM2_Init+0x98>)
 80019fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a04:	22ef      	movs	r2, #239	@ 0xef
 8001a06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a22:	4814      	ldr	r0, [pc, #80]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a24:	f00f fad5 	bl	8010fd2 <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a2e:	f000 fb7b 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a40:	f010 fa86 	bl	8011f50 <HAL_TIM_ConfigClockSource>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a4a:	f000 fb6d 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <MX_TIM2_Init+0x98>)
 8001a5c:	f011 f8ca 	bl	8012bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a66:	f000 fb5f 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	24000704 	.word	0x24000704

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	@ 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001aac:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <MX_TIM3_Init+0x118>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ab0:	4b36      	ldr	r3, [pc, #216]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001abc:	4b33      	ldr	r3, [pc, #204]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad0:	482e      	ldr	r0, [pc, #184]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001ad2:	f00f fa7e 	bl	8010fd2 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001adc:	f000 fb24 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	4827      	ldr	r0, [pc, #156]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001aee:	f010 fa2f 	bl	8011f50 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001af8:	f000 fb16 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afc:	4823      	ldr	r0, [pc, #140]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001afe:	f00f fbc3 	bl	8011288 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b08:	f000 fb0e 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481c      	ldr	r0, [pc, #112]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b1c:	f011 f86a 	bl	8012bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b26:	f000 faff 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b42:	f010 f8f1 	bl	8011d28 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b4c:	f000 faec 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b58:	f010 f8e6 	bl	8011d28 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b62:	f000 fae1 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b66:	463b      	mov	r3, r7
 8001b68:	2208      	movs	r2, #8
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4807      	ldr	r0, [pc, #28]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b6e:	f010 f8db 	bl	8011d28 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b78:	f000 fad6 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b7c:	4803      	ldr	r0, [pc, #12]	@ (8001b8c <MX_TIM3_Init+0x114>)
 8001b7e:	f000 fee1 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001b82:	bf00      	nop
 8001b84:	3738      	adds	r7, #56	@ 0x38
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	24000750 	.word	0x24000750
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	@ 0x38
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	615a      	str	r2, [r3, #20]
 8001bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <MX_TIM4_Init+0xec>)
 8001bca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bde:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bec:	4823      	ldr	r0, [pc, #140]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001bee:	f00f f9f0 	bl	8010fd2 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001bf8:	f000 fa96 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c06:	4619      	mov	r1, r3
 8001c08:	481c      	ldr	r0, [pc, #112]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c0a:	f010 f9a1 	bl	8011f50 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001c14:	f000 fa88 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c18:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c1a:	f00f fb35 	bl	8011288 <HAL_TIM_PWM_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001c24:	f000 fa80 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c38:	f010 ffdc 	bl	8012bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001c42:	f000 fa71 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c46:	2360      	movs	r3, #96	@ 0x60
 8001c48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c5e:	f010 f863 	bl	8011d28 <HAL_TIM_PWM_ConfigChannel>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001c68:	f000 fa5e 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <MX_TIM4_Init+0xe8>)
 8001c6e:	f000 fe69 	bl	8002944 <HAL_TIM_MspPostInit>

}
 8001c72:	bf00      	nop
 8001c74:	3738      	adds	r7, #56	@ 0x38
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2400079c 	.word	0x2400079c
 8001c80:	40000800 	.word	0x40000800

08001c84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c8a:	4a24      	ldr	r2, [pc, #144]	@ (8001d1c <MX_UART7_Init+0x98>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cb0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001cb4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cce:	4812      	ldr	r0, [pc, #72]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cd0:	f011 f84a 	bl	8012d68 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001cda:	f000 fa25 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001ce2:	f012 f956 	bl	8013f92 <HAL_UARTEx_SetTxFifoThreshold>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001cec:	f000 fa1c 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4809      	ldr	r0, [pc, #36]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001cf4:	f012 f98b 	bl	801400e <HAL_UARTEx_SetRxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001cfe:	f000 fa13 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	@ (8001d18 <MX_UART7_Init+0x94>)
 8001d04:	f012 f90c 	bl	8013f20 <HAL_UARTEx_DisableFifoMode>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d0e:	f000 fa0b 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	24000860 	.word	0x24000860
 8001d1c:	40007800 	.word	0x40007800

08001d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <MX_USART1_UART_Init+0x94>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d68:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d6a:	f010 fffd 	bl	8012d68 <HAL_UART_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d74:	f000 f9d8 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d7c:	f012 f909 	bl	8013f92 <HAL_UARTEx_SetTxFifoThreshold>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d86:	f000 f9cf 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4808      	ldr	r0, [pc, #32]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d8e:	f012 f93e 	bl	801400e <HAL_UARTEx_SetRxFifoThreshold>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d98:	f000 f9c6 	bl	8002128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_USART1_UART_Init+0x90>)
 8001d9e:	f012 f8bf 	bl	8013f20 <HAL_UARTEx_DisableFifoMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001da8:	f000 f9be 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	240008f4 	.word	0x240008f4
 8001db4:	40011000 	.word	0x40011000

08001db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dc4:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_DMA_Init+0x5c>)
 8001dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	200b      	movs	r0, #11
 8001de2:	f006 fc2c 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001de6:	200b      	movs	r0, #11
 8001de8:	f006 fc43 	bl	8008672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	200c      	movs	r0, #12
 8001df2:	f006 fc24 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001df6:	200c      	movs	r0, #12
 8001df8:	f006 fc3b 	bl	8008672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	200d      	movs	r0, #13
 8001e02:	f006 fc1c 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e06:	200d      	movs	r0, #13
 8001e08:	f006 fc33 	bl	8008672 <HAL_NVIC_EnableIRQ>

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	58024400 	.word	0x58024400

08001e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	4ba2      	ldr	r3, [pc, #648]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	4aa0      	ldr	r2, [pc, #640]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3e:	4b9e      	ldr	r3, [pc, #632]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	4b9a      	ldr	r3, [pc, #616]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	4a99      	ldr	r2, [pc, #612]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5c:	4b96      	ldr	r3, [pc, #600]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	4b93      	ldr	r3, [pc, #588]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a91      	ldr	r2, [pc, #580]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b8b      	ldr	r3, [pc, #556]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b87      	ldr	r3, [pc, #540]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	4a82      	ldr	r2, [pc, #520]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb6:	4b80      	ldr	r3, [pc, #512]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b7c      	ldr	r3, [pc, #496]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a7b      	ldr	r2, [pc, #492]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b78      	ldr	r3, [pc, #480]	@ (80020b8 <MX_GPIO_Init+0x2a0>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4875      	ldr	r0, [pc, #468]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001ee8:	f009 f9a2 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4873      	ldr	r0, [pc, #460]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001ef2:	f009 f99d 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4872      	ldr	r0, [pc, #456]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001efc:	f009 f998 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	210a      	movs	r1, #10
 8001f04:	486f      	ldr	r0, [pc, #444]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001f06:	f009 f993 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f10:	486d      	ldr	r0, [pc, #436]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001f12:	f009 f98d 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	2101      	movs	r1, #1
 8001f1a:	486c      	ldr	r0, [pc, #432]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 8001f1c:	f009 f988 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f26:	4868      	ldr	r0, [pc, #416]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001f28:	f009 f982 	bl	800b230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	485e      	ldr	r0, [pc, #376]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001f42:	f008 ffb5 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001f46:	2310      	movs	r3, #16
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4857      	ldr	r0, [pc, #348]	@ (80020bc <MX_GPIO_Init+0x2a4>)
 8001f5e:	f008 ffa7 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001f62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	4851      	ldr	r0, [pc, #324]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001f7a:	f008 ff99 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	484a      	ldr	r0, [pc, #296]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8001f96:	f008 ff8b 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8001f9a:	230b      	movs	r3, #11
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4844      	ldr	r0, [pc, #272]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001fb2:	f008 ff7d 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin BIG_RED_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|BIG_RED_BUTTON_Pin;
 8001fb6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	483e      	ldr	r0, [pc, #248]	@ (80020c4 <MX_GPIO_Init+0x2ac>)
 8001fcc:	f008 ff70 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4837      	ldr	r0, [pc, #220]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 8001fea:	f008 ff61 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 8001fee:	f240 3306 	movw	r3, #774	@ 0x306
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4831      	ldr	r0, [pc, #196]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 8002006:	f008 ff53 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 800200a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4828      	ldr	r0, [pc, #160]	@ (80020c0 <MX_GPIO_Init+0x2a8>)
 8002020:	f008 ff46 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 8002024:	2301      	movs	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4824      	ldr	r0, [pc, #144]	@ (80020cc <MX_GPIO_Init+0x2b4>)
 800203c:	f008 ff38 	bl	800aeb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 8002040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	@ (80020c8 <MX_GPIO_Init+0x2b0>)
 800205a:	f008 ff29 	bl	800aeb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2007      	movs	r0, #7
 8002064:	f006 faeb 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002068:	2007      	movs	r0, #7
 800206a:	f006 fb02 	bl	8008672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2008      	movs	r0, #8
 8002074:	f006 fae3 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002078:	2008      	movs	r0, #8
 800207a:	f006 fafa 	bl	8008672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2009      	movs	r0, #9
 8002084:	f006 fadb 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002088:	2009      	movs	r0, #9
 800208a:	f006 faf2 	bl	8008672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2017      	movs	r0, #23
 8002094:	f006 fad3 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002098:	2017      	movs	r0, #23
 800209a:	f006 faea 	bl	8008672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2028      	movs	r0, #40	@ 0x28
 80020a4:	f006 facb 	bl	800863e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020a8:	2028      	movs	r0, #40	@ 0x28
 80020aa:	f006 fae2 	bl	8008672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	@ 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	58021000 	.word	0x58021000
 80020c0:	58020800 	.word	0x58020800
 80020c4:	58020000 	.word	0x58020000
 80020c8:	58020400 	.word	0x58020400
 80020cc:	58020c00 	.word	0x58020c00

080020d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020d6:	463b      	mov	r3, r7
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020e2:	f006 fae1 	bl	80086a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020f2:	231f      	movs	r3, #31
 80020f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80020f6:	2387      	movs	r3, #135	@ 0x87
 80020f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80020fe:	2300      	movs	r3, #0
 8002100:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002106:	2301      	movs	r3, #1
 8002108:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002112:	463b      	mov	r3, r7
 8002114:	4618      	mov	r0, r3
 8002116:	f006 faff 	bl	8008718 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800211a:	2004      	movs	r0, #4
 800211c:	f006 fadc 	bl	80086d8 <HAL_MPU_Enable>

}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <Error_Handler+0x8>

08002134 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	745a      	strb	r2, [r3, #17]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	745a      	strb	r2, [r3, #17]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	7c1b      	ldrb	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d030      	beq.n	800220e <Sequencer_Update+0x76>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02c      	beq.n	800220e <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d927      	bls.n	800220e <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	441a      	add	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d10a      	bne.n	800220a <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7c5b      	ldrb	r3, [r3, #17]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	e002      	b.n	800220a <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <Sequencer_Update+0x78>
		}
	}

	return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	741a      	strb	r2, [r3, #16]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	741a      	strb	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7c1b      	ldrb	r3, [r3, #16]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_MspInit+0x30>)
 8002280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002284:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_MspInit+0x30>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_MspInit+0x30>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	58024400 	.word	0x58024400

080022ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a39      	ldr	r2, [pc, #228]	@ (80023b0 <HAL_ADC_MspInit+0x104>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d133      	bne.n	8002336 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022ce:	4b39      	ldr	r3, [pc, #228]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4a37      	ldr	r2, [pc, #220]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022d8:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10e      	bne.n	80022fe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022e0:	4b35      	ldr	r3, [pc, #212]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022e6:	4a34      	ldr	r2, [pc, #208]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022e8:	f043 0320 	orr.w	r3, r3, #32
 80022ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80022f0:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 80022f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fe:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002304:	4a2c      	ldr	r2, [pc, #176]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800231c:	2330      	movs	r3, #48	@ 0x30
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4823      	ldr	r0, [pc, #140]	@ (80023bc <HAL_ADC_MspInit+0x110>)
 8002330:	f008 fdbe 	bl	800aeb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002334:	e037      	b.n	80023a6 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <HAL_ADC_MspInit+0x114>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d132      	bne.n	80023a6 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 8002348:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_ADC_MspInit+0x108>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002352:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002358:	4a17      	ldr	r2, [pc, #92]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	@ 0xc0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <HAL_ADC_MspInit+0x118>)
 80023a2:	f008 fd85 	bl	800aeb0 <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	@ 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000
 80023b4:	24004630 	.word	0x24004630
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58020800 	.word	0x58020800
 80023c0:	40022100 	.word	0x40022100
 80023c4:	58020000 	.word	0x58020000

080023c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_DAC_MspInit+0x140>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f040 808a 	bne.w	8002500 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023ec:	4b47      	ldr	r3, [pc, #284]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023f2:	4a46      	ldr	r2, [pc, #280]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80023f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_DAC_MspInit+0x144>)
 80023fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_DAC_MspInit+0x144>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	4a3e      	ldr	r2, [pc, #248]	@ (800250c <HAL_DAC_MspInit+0x144>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_DAC_MspInit+0x144>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002428:	2330      	movs	r3, #48	@ 0x30
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242c:	2303      	movs	r3, #3
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	4835      	ldr	r0, [pc, #212]	@ (8002510 <HAL_DAC_MspInit+0x148>)
 800243c:	f008 fd38 	bl	800aeb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8002440:	4b34      	ldr	r3, [pc, #208]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002442:	4a35      	ldr	r2, [pc, #212]	@ (8002518 <HAL_DAC_MspInit+0x150>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002446:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002448:	2243      	movs	r2, #67	@ 0x43
 800244a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002452:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002458:	4b2e      	ldr	r3, [pc, #184]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800245a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800245e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002462:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002466:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002468:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800246a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800246e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002476:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002484:	4823      	ldr	r0, [pc, #140]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002486:	f006 fc3f 	bl	8008d08 <HAL_DMA_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002490:	f7ff fe4a 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a1f      	ldr	r2, [pc, #124]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_DAC_MspInit+0x14c>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <HAL_DAC_MspInit+0x158>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024a8:	2244      	movs	r2, #68	@ 0x44
 80024aa:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024be:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ce:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80024e4:	480d      	ldr	r0, [pc, #52]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024e6:	f006 fc0f 	bl	8008d08 <HAL_DMA_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80024f0:	f7ff fe1a 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a09      	ldr	r2, [pc, #36]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	4a08      	ldr	r2, [pc, #32]	@ (800251c <HAL_DAC_MspInit+0x154>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40007400 	.word	0x40007400
 800250c:	58024400 	.word	0x58024400
 8002510:	58020000 	.word	0x58020000
 8002514:	240003dc 	.word	0x240003dc
 8002518:	40020010 	.word	0x40020010
 800251c:	24000454 	.word	0x24000454
 8002520:	40020028 	.word	0x40020028

08002524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0b8      	sub	sp, #224	@ 0xe0
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22b8      	movs	r2, #184	@ 0xb8
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f017 fa00 	bl	801994a <memset>
  if(hi2c->Instance==I2C2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_I2C_MspInit+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d146      	bne.n	80025e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002554:	f04f 0208 	mov.w	r2, #8
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f00b fa16 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff fdd7 	bl	8002128 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 800257c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002580:	4a1b      	ldr	r2, [pc, #108]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002598:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800259c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a0:	2312      	movs	r3, #18
 80025a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025b2:	2304      	movs	r3, #4
 80025b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <HAL_I2C_MspInit+0xd0>)
 80025c0:	f008 fc76 	bl	800aeb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_I2C_MspInit+0xcc>)
 80025d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	37e0      	adds	r7, #224	@ 0xe0
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40005800 	.word	0x40005800
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020400 	.word	0x58020400

080025f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0bc      	sub	sp, #240	@ 0xf0
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	22b8      	movs	r2, #184	@ 0xb8
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f017 f996 	bl	801994a <memset>
  if(hspi->Instance==SPI2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a72      	ldr	r2, [pc, #456]	@ (80027ec <HAL_SPI_MspInit+0x1f4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d146      	bne.n	80026b6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002634:	2300      	movs	r3, #0
 8002636:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	4618      	mov	r0, r3
 800263e:	f00b f9ad 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002648:	f7ff fd6e 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800264e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002652:	4a67      	ldr	r2, [pc, #412]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002658:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800265c:	4b64      	ldr	r3, [pc, #400]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800265e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800266c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002670:	4a5f      	ldr	r2, [pc, #380]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002688:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800268c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a2:	2305      	movs	r3, #5
 80026a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026ac:	4619      	mov	r1, r3
 80026ae:	4851      	ldr	r0, [pc, #324]	@ (80027f4 <HAL_SPI_MspInit+0x1fc>)
 80026b0:	f008 fbfe 	bl	800aeb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80026b4:	e096      	b.n	80027e4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4f      	ldr	r2, [pc, #316]	@ (80027f8 <HAL_SPI_MspInit+0x200>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d146      	bne.n	800274e <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80026c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00b f961 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80026e0:	f7ff fd22 	bl	8002128 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026e4:	4b42      	ldr	r3, [pc, #264]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026ea:	4a41      	ldr	r2, [pc, #260]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026f4:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80026f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002708:	4a39      	ldr	r2, [pc, #228]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002712:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 8002720:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800273a:	2306      	movs	r3, #6
 800273c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002744:	4619      	mov	r1, r3
 8002746:	482d      	ldr	r0, [pc, #180]	@ (80027fc <HAL_SPI_MspInit+0x204>)
 8002748:	f008 fbb2 	bl	800aeb0 <HAL_GPIO_Init>
}
 800274c:	e04a      	b.n	80027e4 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_SPI_MspInit+0x208>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d145      	bne.n	80027e4 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276a:	f107 0320 	add.w	r3, r7, #32
 800276e:	4618      	mov	r0, r3
 8002770:	f00b f914 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800277a:	f7ff fcd5 	bl	8002128 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	4a1a      	ldr	r2, [pc, #104]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800278a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ac:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_SPI_MspInit+0x1f8>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 80027ba:	2364      	movs	r3, #100	@ 0x64
 80027bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80027d2:	2305      	movs	r3, #5
 80027d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027dc:	4619      	mov	r1, r3
 80027de:	4809      	ldr	r0, [pc, #36]	@ (8002804 <HAL_SPI_MspInit+0x20c>)
 80027e0:	f008 fb66 	bl	800aeb0 <HAL_GPIO_Init>
}
 80027e4:	bf00      	nop
 80027e6:	37f0      	adds	r7, #240	@ 0xf0
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40003800 	.word	0x40003800
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58020400 	.word	0x58020400
 80027f8:	40003c00 	.word	0x40003c00
 80027fc:	58020800 	.word	0x58020800
 8002800:	40013400 	.word	0x40013400
 8002804:	58021000 	.word	0x58021000

08002808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a45      	ldr	r2, [pc, #276]	@ (800292c <HAL_TIM_Base_MspInit+0x124>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10f      	bne.n	800283a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800281a:	4b45      	ldr	r3, [pc, #276]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800281c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002820:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002838:	e074      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002842:	d10f      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002844:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284a:	4a39      	ldr	r2, [pc, #228]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002854:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	e05f      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_TIM_Base_MspInit+0x12c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d117      	bne.n	800289e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800286e:	4b30      	ldr	r3, [pc, #192]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002874:	4a2e      	ldr	r2, [pc, #184]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800287e:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 8002880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	201d      	movs	r0, #29
 8002892:	f005 fed4 	bl	800863e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002896:	201d      	movs	r0, #29
 8002898:	f005 feeb 	bl	8008672 <HAL_NVIC_EnableIRQ>
}
 800289c:	e042      	b.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a25      	ldr	r2, [pc, #148]	@ (8002938 <HAL_TIM_Base_MspInit+0x130>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d13d      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ae:	4a20      	ldr	r2, [pc, #128]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_TIM_Base_MspInit+0x128>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_TIM_Base_MspInit+0x138>)
 80028ca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028ce:	221d      	movs	r2, #29
 80028d0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028d4:	2240      	movs	r2, #64	@ 0x40
 80028d6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d8:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ec:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002908:	480c      	ldr	r0, [pc, #48]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 800290a:	f006 f9fd 	bl	8008d08 <HAL_DMA_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 8002914:	f7ff fc08 	bl	8002128 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_TIM_Base_MspInit+0x134>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40010000 	.word	0x40010000
 8002930:	58024400 	.word	0x58024400
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800
 800293c:	240007e8 	.word	0x240007e8
 8002940:	40020040 	.word	0x40020040

08002944 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_TIM_MspPostInit+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d120      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 8002968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296c:	4a24      	ldr	r2, [pc, #144]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002976:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002984:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4818      	ldr	r0, [pc, #96]	@ (8002a04 <HAL_TIM_MspPostInit+0xc0>)
 80029a2:	f008 fa85 	bl	800aeb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029a6:	e024      	b.n	80029f2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a16      	ldr	r2, [pc, #88]	@ (8002a08 <HAL_TIM_MspPostInit+0xc4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d11f      	bne.n	80029f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b2:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b8:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029ba:	f043 0308 	orr.w	r3, r3, #8
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <HAL_TIM_MspPostInit+0xbc>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 80029d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e2:	2302      	movs	r3, #2
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	4807      	ldr	r0, [pc, #28]	@ (8002a0c <HAL_TIM_MspPostInit+0xc8>)
 80029ee:	f008 fa5f 	bl	800aeb0 <HAL_GPIO_Init>
}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	@ 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40000400 	.word	0x40000400
 8002a00:	58024400 	.word	0x58024400
 8002a04:	58020800 	.word	0x58020800
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	58020c00 	.word	0x58020c00

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b0ba      	sub	sp, #232	@ 0xe8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a28:	f107 0318 	add.w	r3, r7, #24
 8002a2c:	22b8      	movs	r2, #184	@ 0xb8
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f016 ff8a 	bl	801994a <memset>
  if(huart->Instance==UART7)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b70 <HAL_UART_MspInit+0x160>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d147      	bne.n	8002ad0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002a40:	f04f 0202 	mov.w	r2, #2
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00a ffa0 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a62:	f7ff fb61 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a66:	4b43      	ldr	r3, [pc, #268]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a6c:	4a41      	ldr	r2, [pc, #260]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a76:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a84:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a8c:	f043 0310 	orr.w	r3, r3, #16
 8002a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a94:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002aa2:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002abc:	2307      	movs	r3, #7
 8002abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ac2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482b      	ldr	r0, [pc, #172]	@ (8002b78 <HAL_UART_MspInit+0x168>)
 8002aca:	f008 f9f1 	bl	800aeb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ace:	e04a      	b.n	8002b66 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <HAL_UART_MspInit+0x16c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d145      	bne.n	8002b66 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ada:	f04f 0201 	mov.w	r2, #1
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aec:	f107 0318 	add.w	r3, r7, #24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00a ff53 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002afc:	f7ff fb14 	bl	8002128 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b00:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b06:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b2e:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <HAL_UART_MspInit+0x164>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002b3c:	23c0      	movs	r3, #192	@ 0xc0
 8002b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b54:	2307      	movs	r3, #7
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4807      	ldr	r0, [pc, #28]	@ (8002b80 <HAL_UART_MspInit+0x170>)
 8002b62:	f008 f9a5 	bl	800aeb0 <HAL_GPIO_Init>
}
 8002b66:	bf00      	nop
 8002b68:	37e8      	adds	r7, #232	@ 0xe8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40007800 	.word	0x40007800
 8002b74:	58024400 	.word	0x58024400
 8002b78:	58021000 	.word	0x58021000
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	58020400 	.word	0x58020400

08002b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <NMI_Handler+0x4>

08002b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <BusFault_Handler+0x4>

08002ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <UsageFault_Handler+0x4>

08002bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bda:	f004 f89d 	bl	8006d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002be6:	2002      	movs	r0, #2
 8002be8:	f008 fb3b 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002bf4:	2004      	movs	r0, #4
 8002bf6:	f008 fb34 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c02:	2008      	movs	r0, #8
 8002c04:	f008 fb2d 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <DMA1_Stream0_IRQHandler+0x10>)
 8002c12:	f006 fe3b 	bl	800988c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	240003dc 	.word	0x240003dc

08002c20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <DMA1_Stream1_IRQHandler+0x10>)
 8002c26:	f006 fe31 	bl	800988c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	24000454 	.word	0x24000454

08002c34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <DMA1_Stream2_IRQHandler+0x10>)
 8002c3a:	f006 fe27 	bl	800988c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	240007e8 	.word	0x240007e8

08002c48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002c4c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c50:	f008 fb07 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002c54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c58:	f008 fb03 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <TIM3_IRQHandler+0x10>)
 8002c66:	f00e ff57 	bl	8011b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000750 	.word	0x24000750

08002c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002c78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002c7c:	f008 faf1 	bl	800b262 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <OTG_HS_IRQHandler+0x10>)
 8002c8a:	f008 fd79 	bl	800b780 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	24005b1c 	.word	0x24005b1c

08002c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return 1;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_kill>:

int _kill(int pid, int sig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cb2:	f016 febb 	bl	8019a2c <__errno>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2216      	movs	r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
  return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_exit>:

void _exit (int status)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <_exit+0x12>

08002cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00a      	b.n	8002d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cf0:	f3af 8000 	nop.w
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbf0      	blt.n	8002cf0 <_read+0x12>
  }

  return len;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e009      	b.n	8002d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf1      	blt.n	8002d2a <_write+0x12>
  }
  return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_close>:

int _close(int file)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d78:	605a      	str	r2, [r3, #4]
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_isatty>:

int _isatty(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f016 fe20 	bl	8019a2c <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	@ (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	24050000 	.word	0x24050000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	24004634 	.word	0x24004634
 8002e20:	24006370 	.word	0x24006370

08002e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e28:	4b32      	ldr	r3, [pc, #200]	@ (8002ef4 <SystemInit+0xd0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	4a31      	ldr	r2, [pc, #196]	@ (8002ef4 <SystemInit+0xd0>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <SystemInit+0xd4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b06      	cmp	r3, #6
 8002e42:	d807      	bhi.n	8002e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <SystemInit+0xd4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <SystemInit+0xd4>)
 8002e4e:	f043 0307 	orr.w	r3, r3, #7
 8002e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e54:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <SystemInit+0xd8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a28      	ldr	r2, [pc, #160]	@ (8002efc <SystemInit+0xd8>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <SystemInit+0xd8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <SystemInit+0xd8>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4924      	ldr	r1, [pc, #144]	@ (8002efc <SystemInit+0xd8>)
 8002e6c:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <SystemInit+0xdc>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e72:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <SystemInit+0xd4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <SystemInit+0xd4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <SystemInit+0xd4>)
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <SystemInit+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <SystemInit+0xd8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <SystemInit+0xd8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ea0:	4b16      	ldr	r3, [pc, #88]	@ (8002efc <SystemInit+0xd8>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <SystemInit+0xe0>)
 8002ea4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <SystemInit+0xd8>)
 8002ea8:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <SystemInit+0xe4>)
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <SystemInit+0xd8>)
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <SystemInit+0xe8>)
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <SystemInit+0xd8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002eb8:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <SystemInit+0xd8>)
 8002eba:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <SystemInit+0xe8>)
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <SystemInit+0xd8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8002efc <SystemInit+0xd8>)
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <SystemInit+0xe8>)
 8002ec8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <SystemInit+0xd8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8002efc <SystemInit+0xd8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <SystemInit+0xd8>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002edc:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <SystemInit+0xd8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <SystemInit+0xec>)
 8002ee4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ee8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	52002000 	.word	0x52002000
 8002efc:	58024400 	.word	0x58024400
 8002f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f04:	02020200 	.word	0x02020200
 8002f08:	01ff0000 	.word	0x01ff0000
 8002f0c:	01010280 	.word	0x01010280
 8002f10:	52004000 	.word	0x52004000

08002f14 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e019      	b.n	8002f66 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb8      	it	lt
 8002f44:	425b      	neglt	r3, r3
 8002f46:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3e1      	bcc.n	8002f32 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3724      	adds	r7, #36	@ 0x24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b0e5      	sub	sp, #404	@ 0x194
 8002f80:	af10      	add	r7, sp, #64	@ 0x40
 8002f82:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 8002f86:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002f8a:	6020      	str	r0, [r4, #0]
 8002f8c:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002f90:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8002f94:	6001      	str	r1, [r0, #0]
 8002f96:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002f9a:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002f9e:	600a      	str	r2, [r1, #0]
 8002fa0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002fa4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002fa8:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 8002faa:	200a      	movs	r0, #10
 8002fac:	f003 fed4 	bl	8006d58 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8002fb0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 ff60 	bl	8004e80 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8002fc0:	4acc      	ldr	r2, [pc, #816]	@ (80032f4 <VibeCheck_Init+0x378>)
 8002fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fc6:	6810      	ldr	r0, [r2, #0]
 8002fc8:	6018      	str	r0, [r3, #0]
 8002fca:	8891      	ldrh	r1, [r2, #4]
 8002fcc:	7992      	ldrb	r2, [r2, #6]
 8002fce:	8099      	strh	r1, [r3, #4]
 8002fd0:	719a      	strb	r2, [r3, #6]
 8002fd2:	f207 130f 	addw	r3, r7, #271	@ 0x10f
 8002fd6:	2239      	movs	r2, #57	@ 0x39
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f016 fcb5 	bl	801994a <memset>
 8002fe0:	4bc5      	ldr	r3, [pc, #788]	@ (80032f8 <VibeCheck_Init+0x37c>)
 8002fe2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8002fe6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002fea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f242 4324 	movw	r3, #9252	@ 0x2424
 8002ff4:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8002ff6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 8002ffa:	4ac0      	ldr	r2, [pc, #768]	@ (80032fc <VibeCheck_Init+0x380>)
 8002ffc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003000:	6810      	ldr	r0, [r2, #0]
 8003002:	6851      	ldr	r1, [r2, #4]
 8003004:	c303      	stmia	r3!, {r0, r1}
 8003006:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800300a:	2238      	movs	r2, #56	@ 0x38
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f016 fc9b 	bl	801994a <memset>
 8003014:	4bba      	ldr	r3, [pc, #744]	@ (8003300 <VibeCheck_Init+0x384>)
 8003016:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 800301a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800301e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003028:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 800302a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 800302e:	4bb5      	ldr	r3, [pc, #724]	@ (8003304 <VibeCheck_Init+0x388>)
 8003030:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003032:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003036:	223c      	movs	r2, #60	@ 0x3c
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f016 fc85 	bl	801994a <memset>
 8003040:	4bb1      	ldr	r3, [pc, #708]	@ (8003308 <VibeCheck_Init+0x38c>)
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 8003046:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800304a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003054:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 8003056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 800305a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800305e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003062:	4aaa      	ldr	r2, [pc, #680]	@ (800330c <VibeCheck_Init+0x390>)
 8003064:	460b      	mov	r3, r1
 8003066:	6810      	ldr	r0, [r2, #0]
 8003068:	6018      	str	r0, [r3, #0]
 800306a:	8890      	ldrh	r0, [r2, #4]
 800306c:	7992      	ldrb	r2, [r2, #6]
 800306e:	8098      	strh	r0, [r3, #4]
 8003070:	719a      	strb	r2, [r3, #6]
 8003072:	1dcb      	adds	r3, r1, #7
 8003074:	2239      	movs	r2, #57	@ 0x39
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f016 fc66 	bl	801994a <memset>
 800307e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003082:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003086:	4aa2      	ldr	r2, [pc, #648]	@ (8003310 <VibeCheck_Init+0x394>)
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 800308a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800308e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	f643 2310 	movw	r3, #14864	@ 0x3a10
 8003098:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 800309a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800309e:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80030a2:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80030a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030ac:	681e      	ldr	r6, [r3, #0]
 80030ae:	466d      	mov	r5, sp
 80030b0:	f507 748a 	add.w	r4, r7, #276	@ 0x114
 80030b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80030cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ce:	4630      	mov	r0, r6
 80030d0:	f002 f804 	bl	80050dc <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 80030d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80030d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030dc:	681e      	ldr	r6, [r3, #0]
 80030de:	466d      	mov	r5, sp
 80030e0:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 80030e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80030f8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80030fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030fe:	4630      	mov	r0, r6
 8003100:	f001 ffec 	bl	80050dc <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003104:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003108:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800310c:	681e      	ldr	r6, [r3, #0]
 800310e:	466d      	mov	r5, sp
 8003110:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003120:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003124:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003128:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800312c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800312e:	4630      	mov	r0, r6
 8003130:	f001 ffd4 	bl	80050dc <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003134:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003138:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003144:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 8003148:	466d      	mov	r5, sp
 800314a:	f106 040c 	add.w	r4, r6, #12
 800314e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800315a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800315e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003162:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f001 ffb8 	bl	80050dc <VibeCheckShell_RegisterInputHandler>

	VibeCheckShell_OutputHandler wavegen_sender = {
 800316c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003170:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003174:	4a67      	ldr	r2, [pc, #412]	@ (8003314 <VibeCheck_Init+0x398>)
 8003176:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckWaveGenSender_Execute,
			.obj = &vc->wavegen
 8003178:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800317c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f242 4344 	movw	r3, #9284	@ 0x2444
 8003186:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler wavegen_sender = {
 8003188:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800318c:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003190:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003192:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003196:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800319a:	4a5f      	ldr	r2, [pc, #380]	@ (8003318 <VibeCheck_Init+0x39c>)
 800319c:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 800319e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80031ac:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 80031ae:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031b2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80031b6:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031bc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031c0:	4a56      	ldr	r2, [pc, #344]	@ (800331c <VibeCheck_Init+0x3a0>)
 80031c2:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 80031c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f643 2310 	movw	r3, #14864	@ 0x3a10
 80031d2:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80031d4:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80031d8:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031dc:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_RegisterOutputHandler(&vc->shell, wavegen_sender);
 80031de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80031f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031f4:	f001 ffa4 	bl	8005140 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 80031f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80031fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003206:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800320a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800320e:	f001 ff97 	bl	8005140 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003212:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003216:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003220:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003224:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003228:	f001 ff8a 	bl	8005140 <VibeCheckShell_RegisterOutputHandler>

	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 800322c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003230:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f242 4324 	movw	r3, #9252	@ 0x2424
 800323a:	4413      	add	r3, r2
 800323c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003240:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8003244:	6811      	ldr	r1, [r2, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f002 fa10 	bl	800566c <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 800324c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f242 4344 	movw	r3, #9284	@ 0x2444
 800325a:	4413      	add	r3, r2
 800325c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8003260:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 8003264:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8003268:	f5a1 71a4 	sub.w	r1, r1, #328	@ 0x148
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	6809      	ldr	r1, [r1, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 ff4b 	bl	800610c <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 8003276:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800327a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f243 4390 	movw	r3, #13456	@ 0x3490
 8003284:	4413      	add	r3, r2
 8003286:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f889 	bl	80033a2 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, base_sequence_times, base_sequence_colors, base_sequence_len);
 8003290:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003294:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f243 4090 	movw	r0, #13456	@ 0x3490
 800329e:	4418      	add	r0, r3
 80032a0:	2310      	movs	r3, #16
 80032a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <VibeCheck_Init+0x3a4>)
 80032a4:	491f      	ldr	r1, [pc, #124]	@ (8003324 <VibeCheck_Init+0x3a8>)
 80032a6:	f000 f92f 	bl	8003508 <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80032aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f243 4090 	movw	r0, #13456	@ 0x3490
 80032b8:	4418      	add	r0, r3
 80032ba:	2304      	movs	r3, #4
 80032bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <VibeCheck_Init+0x3ac>)
 80032be:	491b      	ldr	r1, [pc, #108]	@ (800332c <VibeCheck_Init+0x3b0>)
 80032c0:	f000 f959 	bl	8003576 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 80032c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80032c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f643 2010 	movw	r0, #14864	@ 0x3a10
 80032d2:	4418      	add	r0, r3
 80032d4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80032de:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80032e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80032e6:	f000 fb5d 	bl	80039a4 <VibeCheckSensor_Init>
}
 80032ea:	bf00      	nop
 80032ec:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	0801d0a8 	.word	0x0801d0a8
 80032f8:	08005c0d 	.word	0x08005c0d
 80032fc:	0801d0b0 	.word	0x0801d0b0
 8003300:	08006a0d 	.word	0x08006a0d
 8003304:	00626772 	.word	0x00626772
 8003308:	080037dd 	.word	0x080037dd
 800330c:	0801d0b8 	.word	0x0801d0b8
 8003310:	08004ad9 	.word	0x08004ad9
 8003314:	08006b69 	.word	0x08006b69
 8003318:	08004d29 	.word	0x08004d29
 800331c:	08004df5 	.word	0x08004df5
 8003320:	0801d384 	.word	0x0801d384
 8003324:	0801d344 	.word	0x0801d344
 8003328:	0801d2d8 	.word	0x0801d2d8
 800332c:	0801d2c8 	.word	0x0801d2c8

08003330 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	f242 4344 	movw	r3, #9284	@ 0x2444
 800333e:	4413      	add	r3, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f002 ff83 	bl	800624c <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	f243 4390 	movw	r3, #13456	@ 0x3490
 800334c:	4413      	add	r3, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f85d 	bl	800340e <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	f643 2310 	movw	r3, #14864	@ 0x3a10
 800335a:	4413      	add	r3, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fc2f 	bl	8003bc0 <VibeCheckSensor_Update>

	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fdc5 	bl	8004ef4 <VibeCheckShell_Update>
 800336a:	4603      	mov	r3, r0
 800336c:	617b      	str	r3, [r7, #20]

	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f107 020c 	add.w	r2, r7, #12
 8003374:	f107 0110 	add.w	r1, r7, #16
 8003378:	4618      	mov	r0, r3
 800337a:	f001 ff57 	bl	800522c <VibeCheckShell_GetOutput>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <VibeCheck_Loop+0x6a>
		while (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) != USBD_OK);  /* block until the USB transmission starts to make sure we send all data */
 8003384:	bf00      	nop
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	b292      	uxth	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f014 fae2 	bl	8017958 <CDC_Transmit_HS>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f5      	bne.n	8003386 <VibeCheck_Loop+0x56>
}
 800339a:	bf00      	nop
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe febe 	bl	8002134 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe feb8 	bl	8002134 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2263      	movs	r2, #99	@ 0x63
 80033d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e008      	b.n	80033f2 <VibeCheckRGB_Init+0x50>
		rgb->bit_stream[i] = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	3210      	adds	r2, #16
 80033e6:	2100      	movs	r1, #0
 80033e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 80033f8:	d3f2      	bcc.n	80033e0 <VibeCheckRGB_Init+0x3e>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f94a 	bl	8003694 <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f961 	bl	80036c8 <VibeCheckRGB_SendColors>
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	@ 0x28
 8003412:	af02      	add	r7, sp, #8
 8003414:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003416:	f003 fc93 	bl	8006d40 <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8003422:	f107 0210 	add.w	r2, r7, #16
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe feb5 	bl	8002198 <Sequencer_Update>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d028      	beq.n	8003486 <VibeCheckRGB_Update+0x78>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	e01e      	b.n	8003478 <VibeCheckRGB_Update+0x6a>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 157c 	ldr.w	r1, [r3, #1404]	@ 0x57c
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	441a      	add	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	441a      	add	r2, r3
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	18ca      	adds	r2, r1, r3
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	8811      	ldrh	r1, [r2, #0]
 800345a:	7892      	ldrb	r2, [r2, #2]
 800345c:	8019      	strh	r1, [r3, #0]
 800345e:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003460:	7b3a      	ldrb	r2, [r7, #12]
 8003462:	7b79      	ldrb	r1, [r7, #13]
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	69f9      	ldr	r1, [r7, #28]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8b9 	bl	80035e4 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b08      	cmp	r3, #8
 800347c:	d9dd      	bls.n	800343a <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f922 	bl	80036c8 <VibeCheckRGB_SendColors>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003484:	e03c      	b.n	8003500 <VibeCheckRGB_Update+0xf2>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fee6 	bl	800225e <Sequencer_IsRunning>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d133      	bne.n	8003500 <VibeCheckRGB_Update+0xf2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 800349e:	f107 0210 	add.w	r2, r7, #16
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fe77 	bl	8002198 <Sequencer_Update>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d027      	beq.n	8003500 <VibeCheckRGB_Update+0xf2>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e01e      	b.n	80034f4 <VibeCheckRGB_Update+0xe6>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 1564 	ldr.w	r1, [r3, #1380]	@ 0x564
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	441a      	add	r2, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	441a      	add	r2, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	18ca      	adds	r2, r1, r3
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	8811      	ldrh	r1, [r2, #0]
 80034d6:	7892      	ldrb	r2, [r2, #2]
 80034d8:	8019      	strh	r1, [r3, #0]
 80034da:	709a      	strb	r2, [r3, #2]
			VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 80034dc:	7a3a      	ldrb	r2, [r7, #8]
 80034de:	7a79      	ldrb	r1, [r7, #9]
 80034e0:	7abb      	ldrb	r3, [r7, #10]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	460b      	mov	r3, r1
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f87b 	bl	80035e4 <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d9dd      	bls.n	80034b6 <VibeCheckRGB_Update+0xa8>
		VibeCheckRGB_SendColors(rgb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8e4 	bl	80036c8 <VibeCheckRGB_SendColors>
}
 8003500:	bf00      	nop
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	f8c3 2564 	str.w	r2, [r3, #1380]	@ 0x564
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f503 60aa 	add.w	r0, r3, #1360	@ 0x550
 8003524:	2301      	movs	r3, #1
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	f7fe fe1f 	bl	800216c <Sequencer_SetSequence>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f503 64aa 	add.w	r4, r3, #1360	@ 0x550
 8003544:	f003 fbfc 	bl	8006d40 <HAL_GetTick>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f7fe fe65 	bl	800221c <Sequencer_Start>
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bd90      	pop	{r4, r7, pc}

0800355a <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 63aa 	add.w	r3, r3, #1360	@ 0x550
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fe6b 	bl	8002244 <Sequencer_Stop>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	f8c3 257c 	str.w	r2, [r3, #1404]	@ 0x57c
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 60ad 	add.w	r0, r3, #1384	@ 0x568
 8003592:	2300      	movs	r3, #0
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	f7fe fde8 	bl	800216c <Sequencer_SetSequence>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 64ad 	add.w	r4, r3, #1384	@ 0x568
 80035b2:	f003 fbc5 	bl	8006d40 <HAL_GetTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	4619      	mov	r1, r3
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7fe fe2e 	bl	800221c <Sequencer_Start>
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd90      	pop	{r4, r7, pc}

080035c8 <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fe34 	bl	8002244 <Sequencer_Stop>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	460b      	mov	r3, r1
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d901      	bls.n	8003604 <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 8003600:	2308      	movs	r3, #8
 8003602:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4613      	mov	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	4413      	add	r3, r2
 800360e:	440b      	add	r3, r1
 8003610:	3304      	adds	r3, #4
 8003612:	79fa      	ldrb	r2, [r7, #7]
 8003614:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	440b      	add	r3, r1
 8003622:	3305      	adds	r3, #5
 8003624:	79ba      	ldrb	r2, [r7, #6]
 8003626:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	440b      	add	r3, r1
 8003634:	3306      	adds	r3, #6
 8003636:	7e3a      	ldrb	r2, [r7, #24]
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8003646:	b480      	push	{r7}
 8003648:	b085      	sub	sp, #20
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d901      	bls.n	800365a <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8003656:	2308      	movs	r3, #8
 8003658:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	18ca      	adds	r2, r1, r3
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	3204      	adds	r2, #4
 800366c:	8811      	ldrh	r1, [r2, #0]
 800366e:	7892      	ldrb	r2, [r2, #2]
 8003670:	8019      	strh	r1, [r3, #0]
 8003672:	709a      	strb	r2, [r3, #2]
 8003674:	2300      	movs	r3, #0
 8003676:	7b3a      	ldrb	r2, [r7, #12]
 8003678:	f362 0307 	bfi	r3, r2, #0, #8
 800367c:	7b7a      	ldrb	r2, [r7, #13]
 800367e:	f362 230f 	bfi	r3, r2, #8, #8
 8003682:	7bba      	ldrb	r2, [r7, #14]
 8003684:	f362 4317 	bfi	r3, r2, #16, #8
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e00a      	b.n	80036b8 <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	2200      	movs	r2, #0
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff99 	bl	80035e4 <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3301      	adds	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d9f1      	bls.n	80036a2 <VibeCheckRGB_SetAllOff+0xe>
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 80036d0:	23e0      	movs	r3, #224	@ 0xe0
 80036d2:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e06e      	b.n	80037b8 <VibeCheckRGB_SendColors+0xf0>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 80036da:	2308      	movs	r3, #8
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e01d      	b.n	800371c <VibeCheckRGB_SendColors+0x54>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	440b      	add	r3, r1
 80036ec:	3305      	adds	r3, #5
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	fa42 f303 	asr.w	r3, r2, r3
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <VibeCheckRGB_SendColors+0x3e>
 8003702:	2130      	movs	r1, #48	@ 0x30
 8003704:	e000      	b.n	8003708 <VibeCheckRGB_SendColors+0x40>
 8003706:	2118      	movs	r1, #24
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	61fa      	str	r2, [r7, #28]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	3310      	adds	r3, #16
 8003712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3b01      	subs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1de      	bne.n	80036e0 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 8003722:	2308      	movs	r3, #8
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e01d      	b.n	8003764 <VibeCheckRGB_SendColors+0x9c>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	440b      	add	r3, r1
 8003734:	3304      	adds	r3, #4
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3b01      	subs	r3, #1
 800373e:	fa42 f303 	asr.w	r3, r2, r3
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <VibeCheckRGB_SendColors+0x86>
 800374a:	2130      	movs	r1, #48	@ 0x30
 800374c:	e000      	b.n	8003750 <VibeCheckRGB_SendColors+0x88>
 800374e:	2118      	movs	r1, #24
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	3310      	adds	r3, #16
 800375a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	3b01      	subs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1de      	bne.n	8003728 <VibeCheckRGB_SendColors+0x60>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 800376a:	2308      	movs	r3, #8
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e01d      	b.n	80037ac <VibeCheckRGB_SendColors+0xe4>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	440b      	add	r3, r1
 800377c:	3306      	adds	r3, #6
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3b01      	subs	r3, #1
 8003786:	fa42 f303 	asr.w	r3, r2, r3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <VibeCheckRGB_SendColors+0xce>
 8003792:	2130      	movs	r1, #48	@ 0x30
 8003794:	e000      	b.n	8003798 <VibeCheckRGB_SendColors+0xd0>
 8003796:	2118      	movs	r1, #24
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	3310      	adds	r3, #16
 80037a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1de      	bne.n	8003770 <VibeCheckRGB_SendColors+0xa8>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d98d      	bls.n	80036da <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0220 	add.w	r2, r3, #32
 80037c8:	f44f 7326 	mov.w	r3, #664	@ 0x298
 80037cc:	2100      	movs	r1, #0
 80037ce:	f00d ff6f 	bl	80116b0 <HAL_TIM_PWM_Start_DMA>
}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b09c      	sub	sp, #112	@ 0x70
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80037ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ee:	2240      	movs	r2, #64	@ 0x40
 80037f0:	4619      	mov	r1, r3
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f001 fd96 	bl	8005324 <VibeCheckShell_GetNextString>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80c2 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8003800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003804:	4962      	ldr	r1, [pc, #392]	@ (8003990 <VibeCheckRGBCMD_Execute+0x1b4>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fd82 	bl	8000310 <strcmp>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d141      	bne.n	8003896 <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8003812:	f107 0320 	add.w	r3, r7, #32
 8003816:	4619      	mov	r1, r3
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f001 fdf3 	bl	8005404 <VibeCheckShell_GetNextInt>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80af 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f001 fde9 	bl	8005404 <VibeCheckShell_GetNextInt>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a5 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 800383a:	f107 0318 	add.w	r3, r7, #24
 800383e:	4619      	mov	r1, r3
 8003840:	6838      	ldr	r0, [r7, #0]
 8003842:	f001 fddf 	bl	8005404 <VibeCheckShell_GetNextInt>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809b 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	4619      	mov	r1, r3
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	f001 fdd5 	bl	8005404 <VibeCheckShell_GetNextInt>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8091 	beq.w	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	4618      	mov	r0, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	b2d9      	uxtb	r1, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	4601      	mov	r1, r0
 8003878:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800387a:	f7ff feb3 	bl	80035e4 <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 800387e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003880:	f7ff ff22 	bl	80036c8 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 8003884:	4943      	ldr	r1, [pc, #268]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f001 fe64 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	f001 fedf 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003892:	2301      	movs	r3, #1
 8003894:	e077      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 8003896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389a:	493f      	ldr	r1, [pc, #252]	@ (8003998 <VibeCheckRGBCMD_Execute+0x1bc>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fd37 	bl	8000310 <strcmp>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d137      	bne.n	8003918 <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	4619      	mov	r1, r3
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f001 fda8 	bl	8005404 <VibeCheckShell_GetNextInt>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d064      	beq.n	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4619      	mov	r1, r3
 80038be:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80038c0:	f7ff fec1 	bl	8003646 <VibeCheckRGB_GetColor>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	733a      	strb	r2, [r7, #12]
 80038ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038ce:	737a      	strb	r2, [r7, #13]
 80038d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80038d4:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 80038d6:	492f      	ldr	r1, [pc, #188]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 80038d8:	6838      	ldr	r0, [r7, #0]
 80038da:	f001 fe3b 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f001 fea8 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 80038e4:	7b3b      	ldrb	r3, [r7, #12]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6838      	ldr	r0, [r7, #0]
 80038ea:	f001 fe6d 	bl	80055c8 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038ee:	6838      	ldr	r0, [r7, #0]
 80038f0:	f001 fea0 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 80038f4:	7b7b      	ldrb	r3, [r7, #13]
 80038f6:	4619      	mov	r1, r3
 80038f8:	6838      	ldr	r0, [r7, #0]
 80038fa:	f001 fe65 	bl	80055c8 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 80038fe:	6838      	ldr	r0, [r7, #0]
 8003900:	f001 fe98 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	4619      	mov	r1, r3
 8003908:	6838      	ldr	r0, [r7, #0]
 800390a:	f001 fe5d 	bl	80055c8 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f001 fe9e 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8003914:	2301      	movs	r3, #1
 8003916:	e036      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))  /* TODO: revisit this once we have a clearer idea of how the LED sequence should behave */
 8003918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800391c:	491f      	ldr	r1, [pc, #124]	@ (800399c <VibeCheckRGBCMD_Execute+0x1c0>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fcf6 	bl	8000310 <strcmp>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 800392a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800392c:	f7ff fe03 	bl	8003536 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 8003930:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003932:	f7ff fe37 	bl	80035a4 <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003936:	4917      	ldr	r1, [pc, #92]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f001 fe0b 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800393e:	6838      	ldr	r0, [r7, #0]
 8003940:	f001 fe86 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003944:	2301      	movs	r3, #1
 8003946:	e01e      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 8003948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800394c:	4914      	ldr	r1, [pc, #80]	@ (80039a0 <VibeCheckRGBCMD_Execute+0x1c4>)
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fcde 	bl	8000310 <strcmp>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 800395a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800395c:	f7ff fdfd 	bl	800355a <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 8003960:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003962:	f7ff fe31 	bl	80035c8 <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 8003966:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003968:	f7ff fe94 	bl	8003694 <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 800396c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800396e:	f7ff feab 	bl	80036c8 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003972:	4908      	ldr	r1, [pc, #32]	@ (8003994 <VibeCheckRGBCMD_Execute+0x1b8>)
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f001 fded 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f001 fe68 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3768      	adds	r7, #104	@ 0x68
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	0801d0c0 	.word	0x0801d0c0
 8003994:	0801d0c4 	.word	0x0801d0c4
 8003998:	0801d0c8 	.word	0x0801d0c8
 800399c:	0801d0cc 	.word	0x0801d0cc
 80039a0:	0801d0d4 	.word	0x0801d0d4

080039a4 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b0a1      	sub	sp, #132	@ 0x84
 80039a8:	af06      	add	r7, sp, #24
 80039aa:	6178      	str	r0, [r7, #20]
 80039ac:	6139      	str	r1, [r7, #16]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	sensor->data_ready = 0;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	sensor->time_prev_update = 0;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	sensor->generate_fake_data = 0;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c

	sensor->time_micros = time_micros;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80039de:	e04a      	b.n	8003a76 <VibeCheckSensor_Init+0xd2>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 80039e0:	6979      	ldr	r1, [r7, #20]
 80039e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3304      	adds	r3, #4
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 8003a0a:	6979      	ldr	r1, [r7, #20]
 8003a0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3308      	adds	r3, #8
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	330c      	adds	r3, #12
 8003a30:	220d      	movs	r2, #13
 8003a32:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 8003a34:	6979      	ldr	r1, [r7, #20]
 8003a36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3310      	adds	r3, #16
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 8003a48:	6979      	ldr	r1, [r7, #20]
 8003a4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3314      	adds	r3, #20
 8003a58:	220d      	movs	r2, #13
 8003a5a:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 8003a5c:	6979      	ldr	r1, [r7, #20]
 8003a5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	227d      	movs	r2, #125	@ 0x7d
 8003a6e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a72:	3301      	adds	r3, #1
 8003a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d9b1      	bls.n	80039e0 <VibeCheckSensor_Init+0x3c>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a88:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 8003a8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <VibeCheckSensor_Init+0x204>)
 8003a8c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8003a96:	4a45      	ldr	r2, [pc, #276]	@ (8003bac <VibeCheckSensor_Init+0x208>)
 8003a98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aa0:	6018      	str	r0, [r3, #0]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <VibeCheckSensor_Init+0x20c>)
 8003aa8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8003ab2:	4a40      	ldr	r2, [pc, #256]	@ (8003bb4 <VibeCheckSensor_Init+0x210>)
 8003ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003abc:	6018      	str	r0, [r3, #0]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb8 <VibeCheckSensor_Init+0x214>)
 8003ac4:	f107 0320 	add.w	r3, r7, #32
 8003ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 8003ace:	4a3b      	ldr	r2, [pc, #236]	@ (8003bbc <VibeCheckSensor_Init+0x218>)
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ad8:	6018      	str	r0, [r3, #0]
 8003ada:	3304      	adds	r3, #4
 8003adc:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ae2:	e059      	b.n	8003b98 <VibeCheckSensor_Init+0x1f4>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8003ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	3350      	adds	r3, #80	@ 0x50
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	1d1d      	adds	r5, r3, #4
 8003af0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	18d6      	adds	r6, r2, r3
 8003afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3360      	adds	r3, #96	@ 0x60
 8003b04:	f107 0208 	add.w	r2, r7, #8
 8003b08:	4413      	add	r3, r2
 8003b0a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	18cb      	adds	r3, r1, r3
 8003b1e:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8003b22:	6039      	str	r1, [r7, #0]
 8003b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b2c:	f107 0308 	add.w	r3, r7, #8
 8003b30:	18c3      	adds	r3, r0, r3
 8003b32:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 8003b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b3e:	f107 0308 	add.w	r3, r7, #8
 8003b42:	18c3      	adds	r3, r0, r3
 8003b44:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8003b48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	18c3      	adds	r3, r0, r3
 8003b56:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8003b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	18e3      	adds	r3, r4, r3
 8003b68:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	3360      	adds	r3, #96	@ 0x60
 8003b72:	f107 0c08 	add.w	ip, r7, #8
 8003b76:	4463      	add	r3, ip
 8003b78:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	9403      	str	r4, [sp, #12]
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	9101      	str	r1, [sp, #4]
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f7fc ff93 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b94:	3301      	adds	r3, #1
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d9a2      	bls.n	8003ae4 <VibeCheckSensor_Init+0x140>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	376c      	adds	r7, #108	@ 0x6c
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba8:	0801d0dc 	.word	0x0801d0dc
 8003bac:	0801d0e8 	.word	0x0801d0e8
 8003bb0:	0801d0f0 	.word	0x0801d0f0
 8003bb4:	0801d0fc 	.word	0x0801d0fc
 8003bb8:	0801d104 	.word	0x0801d104
 8003bbc:	0801d110 	.word	0x0801d110

08003bc0 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003bc8:	f003 f8ba 	bl	8006d40 <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2bfa      	cmp	r3, #250	@ 0xfa
 8003bda:	f240 8105 	bls.w	8003de8 <VibeCheckSensor_Update+0x228>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e09e      	b.n	8003d22 <VibeCheckSensor_Update+0x162>
		{
			if (!sensor->status[i].is_connected)
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	33b4      	adds	r3, #180	@ 0xb4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12f      	bne.n	8003c5a <VibeCheckSensor_Update+0x9a>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	3350      	adds	r3, #80	@ 0x50
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc ff80 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8084 	beq.w	8003d1c <VibeCheckSensor_Update+0x15c>
				{
					sensor->status[i].is_connected = 1;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	33b4      	adds	r3, #180	@ 0xb4
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	33c4      	adds	r3, #196	@ 0xc4
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	33c0      	adds	r3, #192	@ 0xc0
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fbab 	bl	80043ae <VibeCheckSensor_UpdateSensor>
 8003c58:	e060      	b.n	8003d1c <VibeCheckSensor_Update+0x15c>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	33b8      	adds	r3, #184	@ 0xb8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d12b      	bne.n	8003cc8 <VibeCheckSensor_Update+0x108>
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	33bc      	adds	r3, #188	@ 0xbc
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d120      	bne.n	8003cc8 <VibeCheckSensor_Update+0x108>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	015b      	lsls	r3, r3, #5
 8003c8a:	3350      	adds	r3, #80	@ 0x50
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc ff3a 	bl	8000b0c <LSM6DS3_TestCommunication>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d13e      	bne.n	8003d1c <VibeCheckSensor_Update+0x15c>
					{
						sensor->status[i].is_connected = 0;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	33b4      	adds	r3, #180	@ 0xb4
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	33c4      	adds	r3, #196	@ 0xc4
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8003cc6:	e029      	b.n	8003d1c <VibeCheckSensor_Update+0x15c>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	33c0      	adds	r3, #192	@ 0xc0
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <VibeCheckSensor_Update+0x134>
					{
						sensor->status[i].received_data_flag = 0;
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	33c0      	adds	r3, #192	@ 0xc0
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e013      	b.n	8003d1c <VibeCheckSensor_Update+0x15c>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	33b4      	adds	r3, #180	@ 0xb4
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	33c4      	adds	r3, #196	@ 0xc4
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f67f af5d 	bls.w	8003be4 <VibeCheckSensor_Update+0x24>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d055      	beq.n	8003de0 <VibeCheckSensor_Update+0x220>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003df0 <VibeCheckSensor_Update+0x230>
 8003d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d46:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4a:	f018 fb61 	bl	801c410 <sinf>
 8003d4e:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	ee07 3a90 	vmov	s15, r3
 8003d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003df0 <VibeCheckSensor_Update+0x230>
 8003d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d64:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8003df4 <VibeCheckSensor_Update+0x234>
 8003d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d70:	f018 fb4e 	bl	801c410 <sinf>
 8003d74:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003df0 <VibeCheckSensor_Update+0x230>
 8003d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d8a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003df8 <VibeCheckSensor_Update+0x238>
 8003d8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d92:	eeb0 0a67 	vmov.f32	s0, s15
 8003d96:	f018 fb3b 	bl	801c410 <sinf>
 8003d9a:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 8003d9e:	ed97 1a03 	vldr	s2, [r7, #12]
 8003da2:	edd7 0a04 	vldr	s1, [r7, #16]
 8003da6:	ed97 0a05 	vldr	s0, [r7, #20]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	2101      	movs	r1, #1
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fb47 	bl	8004442 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8003db4:	ed97 1a04 	vldr	s2, [r7, #16]
 8003db8:	edd7 0a05 	vldr	s1, [r7, #20]
 8003dbc:	ed97 0a03 	vldr	s0, [r7, #12]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fb3c 	bl	8004442 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8003dca:	ed97 1a05 	vldr	s2, [r7, #20]
 8003dce:	edd7 0a03 	vldr	s1, [r7, #12]
 8003dd2:	ed97 0a04 	vldr	s0, [r7, #16]
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	2103      	movs	r1, #3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fb31 	bl	8004442 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	}
}
 8003de8:	bf00      	nop
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40c90fd0 	.word	0x40c90fd0
 8003df4:	3f860a8b 	.word	0x3f860a8b
 8003df8:	40060a8b 	.word	0x40060a8b

08003dfc <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <VibeCheckSensor_StartAccel+0x14>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	33b4      	adds	r3, #180	@ 0xb4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d013      	beq.n	8003e4e <VibeCheckSensor_StartAccel+0x52>
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	33b8      	adds	r3, #184	@ 0xb8
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <VibeCheckSensor_StartAccel+0x52>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	015b      	lsls	r3, r3, #5
 8003e40:	3350      	adds	r3, #80	@ 0x50
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc feef 	bl	8000c2c <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	33b8      	adds	r3, #184	@ 0xb8
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <VibeCheckSensor_StopAccel+0x14>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	33b4      	adds	r3, #180	@ 0xb4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <VibeCheckSensor_StopAccel+0x52>
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	33b8      	adds	r3, #184	@ 0xb8
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d008      	beq.n	8003ebc <VibeCheckSensor_StopAccel+0x52>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	015b      	lsls	r3, r3, #5
 8003eae:	3350      	adds	r3, #80	@ 0x50
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fff2 	bl	8000ea0 <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	33b8      	adds	r3, #184	@ 0xb8
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <VibeCheckSensor_StartGyro+0x14>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	33b4      	adds	r3, #180	@ 0xb4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d013      	beq.n	8003f2a <VibeCheckSensor_StartGyro+0x52>
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	33bc      	adds	r3, #188	@ 0xbc
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d108      	bne.n	8003f2a <VibeCheckSensor_StartGyro+0x52>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	3350      	adds	r3, #80	@ 0x50
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc ff23 	bl	8000d70 <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	33bc      	adds	r3, #188	@ 0xbc
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <VibeCheckSensor_StopGyro+0x14>
 8003f56:	2302      	movs	r3, #2
 8003f58:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	33b4      	adds	r3, #180	@ 0xb4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <VibeCheckSensor_StopGyro+0x52>
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	33bc      	adds	r3, #188	@ 0xbc
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <VibeCheckSensor_StopGyro+0x52>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	015b      	lsls	r3, r3, #5
 8003f8a:	3350      	adds	r3, #80	@ 0x50
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc ff92 	bl	8000ebc <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	33bc      	adds	r3, #188	@ 0xbc
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <VibeCheckSensor_SetAccelODR+0x16>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	210a      	movs	r1, #10
 8003fce:	480a      	ldr	r0, [pc, #40]	@ (8003ff8 <VibeCheckSensor_SetAccelODR+0x44>)
 8003fd0:	f7fe ffa0 	bl	8002f14 <FindClosest>
 8003fd4:	68f9      	ldr	r1, [r7, #12]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f9e0 	bl	80043ae <VibeCheckSensor_UpdateSensor>
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	0801d534 	.word	0x0801d534

08003ffc <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <VibeCheckSensor_SetGyroODR+0x16>
 800400e:	2302      	movs	r3, #2
 8004010:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	210a      	movs	r1, #10
 8004016:	480a      	ldr	r0, [pc, #40]	@ (8004040 <VibeCheckSensor_SetGyroODR+0x44>)
 8004018:	f7fe ff7c 	bl	8002f14 <FindClosest>
 800401c:	68f9      	ldr	r1, [r7, #12]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3314      	adds	r3, #20
 800402c:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f9bc 	bl	80043ae <VibeCheckSensor_UpdateSensor>
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	0801d534 	.word	0x0801d534

08004044 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <VibeCheckSensor_SetAccelRange+0x16>
 8004056:	2302      	movs	r3, #2
 8004058:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	2104      	movs	r1, #4
 800405e:	480a      	ldr	r0, [pc, #40]	@ (8004088 <VibeCheckSensor_SetAccelRange+0x44>)
 8004060:	f7fe ff58 	bl	8002f14 <FindClosest>
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	4613      	mov	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3310      	adds	r3, #16
 8004074:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f998 	bl	80043ae <VibeCheckSensor_UpdateSensor>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	0801d55c 	.word	0x0801d55c

0800408c <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <VibeCheckSensor_SetGyroRange+0x16>
 800409e:	2302      	movs	r3, #2
 80040a0:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	2105      	movs	r1, #5
 80040a6:	480a      	ldr	r0, [pc, #40]	@ (80040d0 <VibeCheckSensor_SetGyroRange+0x44>)
 80040a8:	f7fe ff34 	bl	8002f14 <FindClosest>
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3318      	adds	r3, #24
 80040bc:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f974 	bl	80043ae <VibeCheckSensor_UpdateSensor>
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	0801d56c 	.word	0x0801d56c

080040d4 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6178      	str	r0, [r7, #20]
 80040dc:	6139      	str	r1, [r7, #16]
 80040de:	ed87 0a03 	vstr	s0, [r7, #12]
 80040e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80040e6:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <VibeCheckSensor_SetOffsets+0x20>
 80040f0:	2302      	movs	r3, #2
 80040f2:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 80040f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80041c4 <VibeCheckSensor_SetOffsets+0xf0>
 80040fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	dd01      	ble.n	800410a <VibeCheckSensor_SetOffsets+0x36>
 8004106:	4b30      	ldr	r3, [pc, #192]	@ (80041c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004108:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 800410a:	edd7 7a03 	vldr	s15, [r7, #12]
 800410e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80041cc <VibeCheckSensor_SetOffsets+0xf8>
 8004112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	d501      	bpl.n	8004120 <VibeCheckSensor_SetOffsets+0x4c>
 800411c:	4b2c      	ldr	r3, [pc, #176]	@ (80041d0 <VibeCheckSensor_SetOffsets+0xfc>)
 800411e:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004120:	edd7 7a02 	vldr	s15, [r7, #8]
 8004124:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80041c4 <VibeCheckSensor_SetOffsets+0xf0>
 8004128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	dd01      	ble.n	8004136 <VibeCheckSensor_SetOffsets+0x62>
 8004132:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004134:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004136:	edd7 7a02 	vldr	s15, [r7, #8]
 800413a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80041cc <VibeCheckSensor_SetOffsets+0xf8>
 800413e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d501      	bpl.n	800414c <VibeCheckSensor_SetOffsets+0x78>
 8004148:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <VibeCheckSensor_SetOffsets+0xfc>)
 800414a:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 800414c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004150:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80041c4 <VibeCheckSensor_SetOffsets+0xf0>
 8004154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	dd01      	ble.n	8004162 <VibeCheckSensor_SetOffsets+0x8e>
 800415e:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <VibeCheckSensor_SetOffsets+0xf4>)
 8004160:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004162:	edd7 7a01 	vldr	s15, [r7, #4]
 8004166:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80041cc <VibeCheckSensor_SetOffsets+0xf8>
 800416a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004172:	d501      	bpl.n	8004178 <VibeCheckSensor_SetOffsets+0xa4>
 8004174:	4b16      	ldr	r3, [pc, #88]	@ (80041d0 <VibeCheckSensor_SetOffsets+0xfc>)
 8004176:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 800418a:	6979      	ldr	r1, [r7, #20]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3304      	adds	r3, #4
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 800419e:	6979      	ldr	r1, [r7, #20]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3308      	adds	r3, #8
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 80041b2:	6939      	ldr	r1, [r7, #16]
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f000 f8fa 	bl	80043ae <VibeCheckSensor_UpdateSensor>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	3dfe0000 	.word	0x3dfe0000
 80041c8:	3dfe0000 	.word	0x3dfe0000
 80041cc:	bdfe0000 	.word	0xbdfe0000
 80041d0:	bdfe0000 	.word	0xbdfe0000

080041d4 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <VibeCheckSensor_GetAccelODR+0x14>
 80041e4:	2302      	movs	r3, #2
 80041e6:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	330c      	adds	r3, #12
 80041f8:	681b      	ldr	r3, [r3, #0]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <VibeCheckSensor_GetGyroODR+0x14>
 8004216:	2302      	movs	r3, #2
 8004218:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3314      	adds	r3, #20
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <VibeCheckSensor_GetAccelRange+0x14>
 8004248:	2302      	movs	r3, #2
 800424a:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	3310      	adds	r3, #16
 800425c:	681b      	ldr	r3, [r3, #0]
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <VibeCheckSensor_GetGyroRange+0x14>
 800427a:	2302      	movs	r3, #2
 800427c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3318      	adds	r3, #24
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <VibeCheckSensor_GetOffsets+0x18>
 80042b0:	2302      	movs	r3, #2
 80042b2:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 80042c8:	68f9      	ldr	r1, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3304      	adds	r3, #4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3308      	adds	r3, #8
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <VibeCheckSensor_ConnectionChanged>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e027      	b.n	800439a <VibeCheckSensor_ConnectionChanged+0x62>
	{
		if (sensor->status[i].connection_change_flag)
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	33c4      	adds	r3, #196	@ 0xc4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <VibeCheckSensor_ConnectionChanged+0x5c>
		{
			sensor->status[i].connection_change_flag = 0;
 8004360:	68f9      	ldr	r1, [r7, #12]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	33c4      	adds	r3, #196	@ 0xc4
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
			*channel = i;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	33b4      	adds	r3, #180	@ 0xb4
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
			return 1;
 8004390:	2301      	movs	r3, #1
 8004392:	e006      	b.n	80043a2 <VibeCheckSensor_ConnectionChanged+0x6a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3301      	adds	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d9d4      	bls.n	800434a <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <VibeCheckSensor_UpdateSensor+0x14>
 80043be:	2302      	movs	r3, #2
 80043c0:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	33b4      	adds	r3, #180	@ 0xb4
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d030      	beq.n	800443a <VibeCheckSensor_UpdateSensor+0x8c>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	015b      	lsls	r3, r3, #5
 80043dc:	3350      	adds	r3, #80	@ 0x50
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	3304      	adds	r3, #4
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fc fbab 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	33b8      	adds	r3, #184	@ 0xb8
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <VibeCheckSensor_UpdateSensor+0x64>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015b      	lsls	r3, r3, #5
 8004404:	3350      	adds	r3, #80	@ 0x50
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fc0d 	bl	8000c2c <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	33bc      	adds	r3, #188	@ 0xbc
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <VibeCheckSensor_UpdateSensor+0x8c>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	015b      	lsls	r3, r3, #5
 800442c:	3350      	adds	r3, #80	@ 0x50
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc fc9b 	bl	8000d70 <LSM6DS3_StartGyro>
	}
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6178      	str	r0, [r7, #20]
 800444a:	460b      	mov	r3, r1
 800444c:	60fa      	str	r2, [r7, #12]
 800444e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004452:	edc7 0a01 	vstr	s1, [r7, #4]
 8004456:	ed87 1a00 	vstr	s2, [r7]
 800445a:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	33f0      	adds	r3, #240	@ 0xf0
 8004470:	7cfa      	ldrb	r2, [r7, #19]
 8004472:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	33f4      	adds	r3, #244	@ 0xf4
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 8004492:	6979      	ldr	r1, [r7, #20]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	33f8      	adds	r3, #248	@ 0xf8
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80044aa:	6979      	ldr	r1, [r7, #20]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	33fc      	adds	r3, #252	@ 0xfc
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
 80044c2:	6979      	ldr	r1, [r7, #20]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
	if (sensor->data_ind == VC_SENSOR_DATA_PER_PACKET)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044ea:	2b0a      	cmp	r3, #10
 80044ec:	d104      	bne.n	80044f8 <VibeCheckSensor_AddData+0xb6>
	{
		sensor->data_ready = 1;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 80044f6:	e00c      	b.n	8004512 <VibeCheckSensor_AddData+0xd0>
	else if (sensor->data_ind == 2 * VC_SENSOR_DATA_PER_PACKET)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 80044fe:	2b14      	cmp	r3, #20
 8004500:	d107      	bne.n	8004512 <VibeCheckSensor_AddData+0xd0>
		sensor->data_ind = 0;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
		sensor->data_ready = 1;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2201      	movs	r2, #1
 800450e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, VibeCheckSensor_Data** data)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <VibeCheckSensor_GetDataReady+0x40>
	{
		sensor->data_ready = 0;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
		if (sensor->data_ind < VC_SENSOR_DATA_PER_PACKET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 8004540:	2b09      	cmp	r3, #9
 8004542:	d805      	bhi.n	8004550 <VibeCheckSensor_GetDataReady+0x32>
		{
			/* ready to send the second half */
			*data = &sensor->data[VC_SENSOR_DATA_PER_PACKET];
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 72dc 	add.w	r2, r3, #440	@ 0x1b8
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e004      	b.n	800455a <VibeCheckSensor_GetDataReady+0x3c>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	601a      	str	r2, [r3, #0]
		}
		return 1;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <VibeCheckSensor_GetDataReady+0x42>
	}
	return 0;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	@ 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	e097      	b.n	80046ae <VibeCheckSensor_EXTICallback+0x142>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	3303      	adds	r3, #3
 8004584:	015b      	lsls	r3, r3, #5
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	429a      	cmp	r2, r3
 8004590:	d13f      	bne.n	8004612 <VibeCheckSensor_EXTICallback+0xa6>
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	33b8      	adds	r3, #184	@ 0xb8
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d034      	beq.n	8004612 <VibeCheckSensor_EXTICallback+0xa6>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	3350      	adds	r3, #80	@ 0x50
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	1d18      	adds	r0, r3, #4
 80045b4:	f107 0318 	add.w	r3, r7, #24
 80045b8:	f107 021c 	add.w	r2, r7, #28
 80045bc:	f107 0120 	add.w	r1, r7, #32
 80045c0:	f7fc fc8a 	bl	8000ed8 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b2d9      	uxtb	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80045e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80045e8:	eeb0 1a66 	vmov.f32	s2, s13
 80045ec:	eef0 0a47 	vmov.f32	s1, s14
 80045f0:	eeb0 0a67 	vmov.f32	s0, s15
 80045f4:	461a      	mov	r2, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ff23 	bl	8004442 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	33c0      	adds	r3, #192	@ 0xc0
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
			break;
 8004610:	e052      	b.n	80046b8 <VibeCheckSensor_EXTICallback+0x14c>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	4413      	add	r3, r2
 800461a:	336c      	adds	r3, #108	@ 0x6c
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	429a      	cmp	r2, r3
 8004622:	d141      	bne.n	80046a8 <VibeCheckSensor_EXTICallback+0x13c>
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	33bc      	adds	r3, #188	@ 0xbc
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d036      	beq.n	80046a8 <VibeCheckSensor_EXTICallback+0x13c>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	015b      	lsls	r3, r3, #5
 800463e:	3350      	adds	r3, #80	@ 0x50
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4413      	add	r3, r2
 8004644:	1d18      	adds	r0, r3, #4
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	f107 0210 	add.w	r2, r7, #16
 800464e:	f107 0114 	add.w	r1, r7, #20
 8004652:	f7fc fcc3 	bl	8000fdc <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	b2db      	uxtb	r3, r3
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3301      	adds	r3, #1
 8004660:	b2d9      	uxtb	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	edd7 7a05 	vldr	s15, [r7, #20]
 8004676:	ed97 7a04 	vldr	s14, [r7, #16]
 800467a:	edd7 6a03 	vldr	s13, [r7, #12]
 800467e:	eeb0 1a66 	vmov.f32	s2, s13
 8004682:	eef0 0a47 	vmov.f32	s1, s14
 8004686:	eeb0 0a67 	vmov.f32	s0, s15
 800468a:	461a      	mov	r2, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff fed8 	bl	8004442 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	33c0      	adds	r3, #192	@ 0xc0
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
			break;
 80046a6:	e007      	b.n	80046b8 <VibeCheckSensor_EXTICallback+0x14c>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	3301      	adds	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	f67f af64 	bls.w	800457e <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	@ 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b09c      	sub	sp, #112	@ 0x70
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046d0:	2240      	movs	r2, #64	@ 0x40
 80046d2:	4619      	mov	r1, r3
 80046d4:	68b8      	ldr	r0, [r7, #8]
 80046d6:	f000 fe25 	bl	8005324 <VibeCheckShell_GetNextString>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80eb 	beq.w	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 80046e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046e6:	4977      	ldr	r1, [pc, #476]	@ (80048c4 <VibeCheckSensorCMD_Set+0x204>)
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb fe11 	bl	8000310 <strcmp>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d14f      	bne.n	8004794 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80046f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80046f8:	2240      	movs	r2, #64	@ 0x40
 80046fa:	4619      	mov	r1, r3
 80046fc:	68b8      	ldr	r0, [r7, #8]
 80046fe:	f000 fe11 	bl	8005324 <VibeCheckShell_GetNextString>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80d7 	beq.w	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 800470a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800470e:	496e      	ldr	r1, [pc, #440]	@ (80048c8 <VibeCheckSensorCMD_Set+0x208>)
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fdfd 	bl	8000310 <strcmp>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d118      	bne.n	800474e <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 800471c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004720:	4619      	mov	r1, r3
 8004722:	68b8      	ldr	r0, [r7, #8]
 8004724:	f000 fe6e 	bl	8005404 <VibeCheckShell_GetNextInt>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80c4 	beq.w	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	461a      	mov	r2, r3
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fc3c 	bl	8003fb4 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 800473c:	4963      	ldr	r1, [pc, #396]	@ (80048cc <VibeCheckSensorCMD_Set+0x20c>)
 800473e:	68b8      	ldr	r0, [r7, #8]
 8004740:	f000 ff08 	bl	8005554 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004744:	68b8      	ldr	r0, [r7, #8]
 8004746:	f000 ff83 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800474a:	2301      	movs	r3, #1
 800474c:	e0b5      	b.n	80048ba <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 800474e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004752:	495f      	ldr	r1, [pc, #380]	@ (80048d0 <VibeCheckSensorCMD_Set+0x210>)
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fddb 	bl	8000310 <strcmp>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 80ab 	bne.w	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8004762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004766:	4619      	mov	r1, r3
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f000 fe4b 	bl	8005404 <VibeCheckShell_GetNextInt>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 80a1 	beq.w	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	461a      	mov	r2, r3
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fc61 	bl	8004044 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8004782:	4952      	ldr	r1, [pc, #328]	@ (80048cc <VibeCheckSensorCMD_Set+0x20c>)
 8004784:	68b8      	ldr	r0, [r7, #8]
 8004786:	f000 fee5 	bl	8005554 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	f000 ff60 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8004790:	2301      	movs	r3, #1
 8004792:	e092      	b.n	80048ba <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8004794:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004798:	494e      	ldr	r1, [pc, #312]	@ (80048d4 <VibeCheckSensorCMD_Set+0x214>)
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb fdb8 	bl	8000310 <strcmp>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d14b      	bne.n	800483e <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80047a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047aa:	2240      	movs	r2, #64	@ 0x40
 80047ac:	4619      	mov	r1, r3
 80047ae:	68b8      	ldr	r0, [r7, #8]
 80047b0:	f000 fdb8 	bl	8005324 <VibeCheckShell_GetNextString>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d07e      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 80047ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047be:	4942      	ldr	r1, [pc, #264]	@ (80048c8 <VibeCheckSensorCMD_Set+0x208>)
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fb fda5 	bl	8000310 <strcmp>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d117      	bne.n	80047fc <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 80047cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047d0:	4619      	mov	r1, r3
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f000 fe16 	bl	8005404 <VibeCheckShell_GetNextInt>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d06c      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	461a      	mov	r2, r3
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fc09 	bl	8003ffc <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 80047ea:	4938      	ldr	r1, [pc, #224]	@ (80048cc <VibeCheckSensorCMD_Set+0x20c>)
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f000 feb1 	bl	8005554 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80047f2:	68b8      	ldr	r0, [r7, #8]
 80047f4:	f000 ff2c 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e05e      	b.n	80048ba <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 80047fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004800:	4933      	ldr	r1, [pc, #204]	@ (80048d0 <VibeCheckSensorCMD_Set+0x210>)
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fd84 	bl	8000310 <strcmp>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d154      	bne.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 800480e:	f107 0320 	add.w	r3, r7, #32
 8004812:	4619      	mov	r1, r3
 8004814:	68b8      	ldr	r0, [r7, #8]
 8004816:	f000 fdf5 	bl	8005404 <VibeCheckShell_GetNextInt>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d04b      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	461a      	mov	r2, r3
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff fc30 	bl	800408c <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 800482c:	4927      	ldr	r1, [pc, #156]	@ (80048cc <VibeCheckSensorCMD_Set+0x20c>)
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f000 fe90 	bl	8005554 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8004834:	68b8      	ldr	r0, [r7, #8]
 8004836:	f000 ff0b 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800483a:	2301      	movs	r3, #1
 800483c:	e03d      	b.n	80048ba <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 800483e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004842:	4925      	ldr	r1, [pc, #148]	@ (80048d8 <VibeCheckSensorCMD_Set+0x218>)
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fd63 	bl	8000310 <strcmp>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d133      	bne.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 8004850:	f107 031c 	add.w	r3, r7, #28
 8004854:	4619      	mov	r1, r3
 8004856:	68b8      	ldr	r0, [r7, #8]
 8004858:	f000 fdf0 	bl	800543c <VibeCheckShell_GetNextFloat>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02a      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 8004862:	f107 0318 	add.w	r3, r7, #24
 8004866:	4619      	mov	r1, r3
 8004868:	68b8      	ldr	r0, [r7, #8]
 800486a:	f000 fde7 	bl	800543c <VibeCheckShell_GetNextFloat>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d021      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 8004874:	f107 0314 	add.w	r3, r7, #20
 8004878:	4619      	mov	r1, r3
 800487a:	68b8      	ldr	r0, [r7, #8]
 800487c:	f000 fdde 	bl	800543c <VibeCheckShell_GetNextFloat>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d018      	beq.n	80048b8 <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 8004886:	edd7 7a07 	vldr	s15, [r7, #28]
 800488a:	ed97 7a06 	vldr	s14, [r7, #24]
 800488e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004892:	eeb0 1a66 	vmov.f32	s2, s13
 8004896:	eef0 0a47 	vmov.f32	s1, s14
 800489a:	eeb0 0a67 	vmov.f32	s0, s15
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff fc17 	bl	80040d4 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 80048a6:	4909      	ldr	r1, [pc, #36]	@ (80048cc <VibeCheckSensorCMD_Set+0x20c>)
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f000 fe53 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80048ae:	68b8      	ldr	r0, [r7, #8]
 80048b0:	f000 fece 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3770      	adds	r7, #112	@ 0x70
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	0801d118 	.word	0x0801d118
 80048c8:	0801d120 	.word	0x0801d120
 80048cc:	0801d124 	.word	0x0801d124
 80048d0:	0801d128 	.word	0x0801d128
 80048d4:	0801d130 	.word	0x0801d130
 80048d8:	0801d138 	.word	0x0801d138

080048dc <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b09a      	sub	sp, #104	@ 0x68
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80048e8:	f107 0320 	add.w	r3, r7, #32
 80048ec:	2240      	movs	r2, #64	@ 0x40
 80048ee:	4619      	mov	r1, r3
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f000 fd17 	bl	8005324 <VibeCheckShell_GetNextString>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80dc 	beq.w	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
	{
		if (!strcmp(str, "accel"))
 80048fe:	f107 0320 	add.w	r3, r7, #32
 8004902:	496f      	ldr	r1, [pc, #444]	@ (8004ac0 <VibeCheckSensorCMD_Get+0x1e4>)
 8004904:	4618      	mov	r0, r3
 8004906:	f7fb fd03 	bl	8000310 <strcmp>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d147      	bne.n	80049a0 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004910:	f107 0320 	add.w	r3, r7, #32
 8004914:	2240      	movs	r2, #64	@ 0x40
 8004916:	4619      	mov	r1, r3
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f000 fd03 	bl	8005324 <VibeCheckShell_GetNextString>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80c8 	beq.w	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 8004926:	f107 0320 	add.w	r3, r7, #32
 800492a:	4966      	ldr	r1, [pc, #408]	@ (8004ac4 <VibeCheckSensorCMD_Get+0x1e8>)
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fcef 	bl	8000310 <strcmp>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d114      	bne.n	8004962 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004938:	4963      	ldr	r1, [pc, #396]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1ec>)
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f000 fe0a 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004940:	68b8      	ldr	r0, [r7, #8]
 8004942:	f000 fe77 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fc43 	bl	80041d4 <VibeCheckSensor_GetAccelODR>
 800494e:	4603      	mov	r3, r0
 8004950:	4619      	mov	r1, r3
 8004952:	68b8      	ldr	r0, [r7, #8]
 8004954:	f000 fe38 	bl	80055c8 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f000 fe79 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800495e:	2301      	movs	r3, #1
 8004960:	e0aa      	b.n	8004ab8 <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 8004962:	f107 0320 	add.w	r3, r7, #32
 8004966:	4959      	ldr	r1, [pc, #356]	@ (8004acc <VibeCheckSensorCMD_Get+0x1f0>)
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fcd1 	bl	8000310 <strcmp>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 80a0 	bne.w	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004976:	4954      	ldr	r1, [pc, #336]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1ec>)
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f000 fdeb 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 800497e:	68b8      	ldr	r0, [r7, #8]
 8004980:	f000 fe58 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fc56 	bl	8004238 <VibeCheckSensor_GetAccelRange>
 800498c:	4603      	mov	r3, r0
 800498e:	4619      	mov	r1, r3
 8004990:	68b8      	ldr	r0, [r7, #8]
 8004992:	f000 fe19 	bl	80055c8 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f000 fe5a 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800499c:	2301      	movs	r3, #1
 800499e:	e08b      	b.n	8004ab8 <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 80049a0:	f107 0320 	add.w	r3, r7, #32
 80049a4:	494a      	ldr	r1, [pc, #296]	@ (8004ad0 <VibeCheckSensorCMD_Get+0x1f4>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb fcb2 	bl	8000310 <strcmp>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d145      	bne.n	8004a3e <VibeCheckSensorCMD_Get+0x162>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80049b2:	f107 0320 	add.w	r3, r7, #32
 80049b6:	2240      	movs	r2, #64	@ 0x40
 80049b8:	4619      	mov	r1, r3
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f000 fcb2 	bl	8005324 <VibeCheckShell_GetNextString>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d077      	beq.n	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
			{
				if (!strcmp(str, "odr"))
 80049c6:	f107 0320 	add.w	r3, r7, #32
 80049ca:	493e      	ldr	r1, [pc, #248]	@ (8004ac4 <VibeCheckSensorCMD_Get+0x1e8>)
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fb fc9f 	bl	8000310 <strcmp>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d114      	bne.n	8004a02 <VibeCheckSensorCMD_Get+0x126>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80049d8:	493b      	ldr	r1, [pc, #236]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1ec>)
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f000 fdba 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f000 fe27 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff fc0c 	bl	8004206 <VibeCheckSensor_GetGyroODR>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	68b8      	ldr	r0, [r7, #8]
 80049f4:	f000 fde8 	bl	80055c8 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80049f8:	68b8      	ldr	r0, [r7, #8]
 80049fa:	f000 fe29 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e05a      	b.n	8004ab8 <VibeCheckSensorCMD_Get+0x1dc>
				}
				else if (!strcmp(str, "range"))
 8004a02:	f107 0320 	add.w	r3, r7, #32
 8004a06:	4931      	ldr	r1, [pc, #196]	@ (8004acc <VibeCheckSensorCMD_Get+0x1f0>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fb fc81 	bl	8000310 <strcmp>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d150      	bne.n	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8004a14:	492c      	ldr	r1, [pc, #176]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1ec>)
 8004a16:	68b8      	ldr	r0, [r7, #8]
 8004a18:	f000 fd9c 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f000 fe09 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fc20 	bl	800426a <VibeCheckSensor_GetGyroRange>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	f000 fdca 	bl	80055c8 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f000 fe0b 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e03c      	b.n	8004ab8 <VibeCheckSensorCMD_Get+0x1dc>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 8004a3e:	f107 0320 	add.w	r3, r7, #32
 8004a42:	4924      	ldr	r1, [pc, #144]	@ (8004ad4 <VibeCheckSensorCMD_Get+0x1f8>)
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fc63 	bl	8000310 <strcmp>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d132      	bne.n	8004ab6 <VibeCheckSensorCMD_Get+0x1da>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 8004a50:	f107 0118 	add.w	r1, r7, #24
 8004a54:	f107 021c 	add.w	r2, r7, #28
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fc1a 	bl	800429c <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 8004a68:	4917      	ldr	r1, [pc, #92]	@ (8004ac8 <VibeCheckSensorCMD_Get+0x1ec>)
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f000 fd72 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a70:	68b8      	ldr	r0, [r7, #8]
 8004a72:	f000 fddf 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 8004a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7e:	68b8      	ldr	r0, [r7, #8]
 8004a80:	f000 fdba 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a84:	68b8      	ldr	r0, [r7, #8]
 8004a86:	f000 fdd5 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8004a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f000 fdb0 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f000 fdcb 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8004a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	68b8      	ldr	r0, [r7, #8]
 8004aa8:	f000 fda6 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f000 fdcf 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <VibeCheckSensorCMD_Get+0x1dc>
		}
	}

	return 0;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3760      	adds	r7, #96	@ 0x60
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	0801d118 	.word	0x0801d118
 8004ac4:	0801d120 	.word	0x0801d120
 8004ac8:	0801d124 	.word	0x0801d124
 8004acc:	0801d128 	.word	0x0801d128
 8004ad0:	0801d130 	.word	0x0801d130
 8004ad4:	0801d138 	.word	0x0801d138

08004ad8 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b094      	sub	sp, #80	@ 0x50
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	2240      	movs	r2, #64	@ 0x40
 8004aec:	4619      	mov	r1, r3
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	f000 fc18 	bl	8005324 <VibeCheckShell_GetNextString>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8101 	beq.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
	{
		if (!strcmp(str, "fakedata"))
 8004afc:	f107 030c 	add.w	r3, r7, #12
 8004b00:	4981      	ldr	r1, [pc, #516]	@ (8004d08 <VibeCheckSensorCMD_Execute+0x230>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fc04 	bl	8000310 <strcmp>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d135      	bne.n	8004b7a <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	2240      	movs	r2, #64	@ 0x40
 8004b14:	4619      	mov	r1, r3
 8004b16:	6838      	ldr	r0, [r7, #0]
 8004b18:	f000 fc04 	bl	8005324 <VibeCheckShell_GetNextString>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 80ed 	beq.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004b24:	f107 030c 	add.w	r3, r7, #12
 8004b28:	4978      	ldr	r1, [pc, #480]	@ (8004d0c <VibeCheckSensorCMD_Execute+0x234>)
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fb fbf0 	bl	8000310 <strcmp>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 8004b36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b38:	f7ff fbe2 	bl	8004300 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b3c:	4974      	ldr	r1, [pc, #464]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004b3e:	6838      	ldr	r0, [r7, #0]
 8004b40:	f000 fd08 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	f000 fd83 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0d8      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
				}
				else if (!strcmp(str, "stop"))
 8004b4e:	f107 030c 	add.w	r3, r7, #12
 8004b52:	4970      	ldr	r1, [pc, #448]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x23c>)
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fb fbdb 	bl	8000310 <strcmp>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 80ce 	bne.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8004b62:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004b64:	f7ff fbda 	bl	800431c <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8004b68:	4969      	ldr	r1, [pc, #420]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004b6a:	6838      	ldr	r0, [r7, #0]
 8004b6c:	f000 fcf2 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	f000 fd6d 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0c2      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8004b7a:	f107 0208 	add.w	r2, r7, #8
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc75 	bl	8005474 <VibeCheckShell_TurnToInt>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80b6 	beq.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	2240      	movs	r2, #64	@ 0x40
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6838      	ldr	r0, [r7, #0]
 8004b9c:	f000 fbc2 	bl	8005324 <VibeCheckShell_GetNextString>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80ab 	beq.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
			{
				if (!strcmp(str, "start"))
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4957      	ldr	r1, [pc, #348]	@ (8004d0c <VibeCheckSensorCMD_Execute+0x234>)
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fb fbae 	bl	8000310 <strcmp>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d138      	bne.n	8004c2c <VibeCheckSensorCMD_Execute+0x154>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004bba:	f107 030c 	add.w	r3, r7, #12
 8004bbe:	2240      	movs	r2, #64	@ 0x40
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6838      	ldr	r0, [r7, #0]
 8004bc4:	f000 fbae 	bl	8005324 <VibeCheckShell_GetNextString>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8097 	beq.w	8004cfe <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004bd0:	f107 030c 	add.w	r3, r7, #12
 8004bd4:	4950      	ldr	r1, [pc, #320]	@ (8004d18 <VibeCheckSensorCMD_Execute+0x240>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fb9a 	bl	8000310 <strcmp>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10d      	bne.n	8004bfe <VibeCheckSensorCMD_Execute+0x126>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4619      	mov	r1, r3
 8004be6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004be8:	f7ff f908 	bl	8003dfc <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004bec:	4948      	ldr	r1, [pc, #288]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004bee:	6838      	ldr	r0, [r7, #0]
 8004bf0:	f000 fcb0 	bl	8005554 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004bf4:	6838      	ldr	r0, [r7, #0]
 8004bf6:	f000 fd2b 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e080      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004bfe:	f107 030c 	add.w	r3, r7, #12
 8004c02:	4946      	ldr	r1, [pc, #280]	@ (8004d1c <VibeCheckSensorCMD_Execute+0x244>)
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fb83 	bl	8000310 <strcmp>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d176      	bne.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c16:	f7ff f95f 	bl	8003ed8 <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c1a:	493d      	ldr	r1, [pc, #244]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004c1c:	6838      	ldr	r0, [r7, #0]
 8004c1e:	f000 fc99 	bl	8005554 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c22:	6838      	ldr	r0, [r7, #0]
 8004c24:	f000 fd14 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e069      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4938      	ldr	r1, [pc, #224]	@ (8004d14 <VibeCheckSensorCMD_Execute+0x23c>)
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fb6c 	bl	8000310 <strcmp>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d137      	bne.n	8004cae <VibeCheckSensorCMD_Execute+0x1d6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	2240      	movs	r2, #64	@ 0x40
 8004c44:	4619      	mov	r1, r3
 8004c46:	6838      	ldr	r0, [r7, #0]
 8004c48:	f000 fb6c 	bl	8005324 <VibeCheckShell_GetNextString>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d055      	beq.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
					{
						if (!strcmp(str, "accel"))
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	4930      	ldr	r1, [pc, #192]	@ (8004d18 <VibeCheckSensorCMD_Execute+0x240>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fb59 	bl	8000310 <strcmp>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <VibeCheckSensorCMD_Execute+0x1a8>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4619      	mov	r1, r3
 8004c68:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c6a:	f7ff f8fe 	bl	8003e6a <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c6e:	4928      	ldr	r1, [pc, #160]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004c70:	6838      	ldr	r0, [r7, #0]
 8004c72:	f000 fc6f 	bl	8005554 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f000 fcea 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e03f      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
						}
						else if (!strcmp(str, "gyro"))
 8004c80:	f107 030c 	add.w	r3, r7, #12
 8004c84:	4925      	ldr	r1, [pc, #148]	@ (8004d1c <VibeCheckSensorCMD_Execute+0x244>)
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb fb42 	bl	8000310 <strcmp>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d135      	bne.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4619      	mov	r1, r3
 8004c96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004c98:	f7ff f955 	bl	8003f46 <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8004c9c:	491c      	ldr	r1, [pc, #112]	@ (8004d10 <VibeCheckSensorCMD_Execute+0x238>)
 8004c9e:	6838      	ldr	r0, [r7, #0]
 8004ca0:	f000 fc58 	bl	8005554 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f000 fcd3 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e028      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8004cae:	f107 030c 	add.w	r3, r7, #12
 8004cb2:	491b      	ldr	r1, [pc, #108]	@ (8004d20 <VibeCheckSensorCMD_Execute+0x248>)
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fb fb2b 	bl	8000310 <strcmp>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <VibeCheckSensorCMD_Execute+0x1fe>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004cc8:	f7ff fcfa 	bl	80046c0 <VibeCheckSensorCMD_Set>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d015      	beq.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e014      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
					}
				}
				else if (!strcmp(str, "get"))
 8004cd6:	f107 030c 	add.w	r3, r7, #12
 8004cda:	4912      	ldr	r1, [pc, #72]	@ (8004d24 <VibeCheckSensorCMD_Execute+0x24c>)
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fb fb17 	bl	8000310 <strcmp>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6839      	ldr	r1, [r7, #0]
 8004cee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004cf0:	f7ff fdf4 	bl	80048dc <VibeCheckSensorCMD_Get>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <VibeCheckSensorCMD_Execute+0x226>
					{
						return 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <VibeCheckSensorCMD_Execute+0x228>
				}
			}
		}
	}

	return 0;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3750      	adds	r7, #80	@ 0x50
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	0801d140 	.word	0x0801d140
 8004d0c:	0801d14c 	.word	0x0801d14c
 8004d10:	0801d124 	.word	0x0801d124
 8004d14:	0801d154 	.word	0x0801d154
 8004d18:	0801d118 	.word	0x0801d118
 8004d1c:	0801d130 	.word	0x0801d130
 8004d20:	0801d15c 	.word	0x0801d15c
 8004d24:	0801d160 	.word	0x0801d160

08004d28 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	613b      	str	r3, [r7, #16]

	VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6938      	ldr	r0, [r7, #16]
 8004d3e:	f7ff fbee 	bl	800451e <VibeCheckSensor_GetDataReady>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d04e      	beq.n	8004de6 <VibeCheckSensorSender_Data_Execute+0xbe>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8004d48:	4929      	ldr	r1, [pc, #164]	@ (8004df0 <VibeCheckSensorSender_Data_Execute+0xc8>)
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f000 fc02 	bl	8005554 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f000 fc6f 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, VC_SENSOR_DATA_PER_PACKET);
 8004d56:	210a      	movs	r1, #10
 8004d58:	6838      	ldr	r0, [r7, #0]
 8004d5a:	f000 fc35 	bl	80055c8 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004d62:	e038      	b.n	8004dd6 <VibeCheckSensorSender_Data_Execute+0xae>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f000 fc65 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f000 fc29 	bl	80055c8 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d76:	6838      	ldr	r0, [r7, #0]
 8004d78:	f000 fc5c 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	4619      	mov	r1, r3
 8004d82:	6838      	ldr	r0, [r7, #0]
 8004d84:	f000 fc20 	bl	80055c8 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d88:	6838      	ldr	r0, [r7, #0]
 8004d8a:	f000 fc53 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d94:	eeb0 0a67 	vmov.f32	s0, s15
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f000 fc2d 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004d9e:	6838      	ldr	r0, [r7, #0]
 8004da0:	f000 fc48 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004daa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dae:	6838      	ldr	r0, [r7, #0]
 8004db0:	f000 fc22 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f000 fc3d 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f000 fc17 	bl	80055f8 <VibeCheckShell_PutOutputFloat>

			data++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3314      	adds	r3, #20
 8004dce:	60fb      	str	r3, [r7, #12]
			data_written++;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
		while (data_written < VC_SENSOR_DATA_PER_PACKET)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d9c3      	bls.n	8004d64 <VibeCheckSensorSender_Data_Execute+0x3c>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f000 fc37 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <VibeCheckSensorSender_Data_Execute+0xc0>
	}

	return 0;
 8004de6:	2300      	movs	r3, #0

}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	0801d164 	.word	0x0801d164

08004df4 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 8004e02:	f107 020c 	add.w	r2, r7, #12
 8004e06:	f107 0310 	add.w	r3, r7, #16
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f7ff fa93 	bl	8004338 <VibeCheckSensor_ConnectionChanged>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d026      	beq.n	8004e66 <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8004e18:	4915      	ldr	r1, [pc, #84]	@ (8004e70 <VibeCheckSensorSender_Status_Execute+0x7c>)
 8004e1a:	6838      	ldr	r0, [r7, #0]
 8004e1c:	f000 fb9a 	bl	8005554 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e20:	6838      	ldr	r0, [r7, #0]
 8004e22:	f000 fc07 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8004e26:	4913      	ldr	r1, [pc, #76]	@ (8004e74 <VibeCheckSensorSender_Status_Execute+0x80>)
 8004e28:	6838      	ldr	r0, [r7, #0]
 8004e2a:	f000 fb93 	bl	8005554 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e2e:	6838      	ldr	r0, [r7, #0]
 8004e30:	f000 fc00 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4619      	mov	r1, r3
 8004e38:	6838      	ldr	r0, [r7, #0]
 8004e3a:	f000 fbc5 	bl	80055c8 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8004e3e:	6838      	ldr	r0, [r7, #0]
 8004e40:	f000 fbf8 	bl	8005634 <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d004      	beq.n	8004e54 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8004e4a:	490b      	ldr	r1, [pc, #44]	@ (8004e78 <VibeCheckSensorSender_Status_Execute+0x84>)
 8004e4c:	6838      	ldr	r0, [r7, #0]
 8004e4e:	f000 fb81 	bl	8005554 <VibeCheckShell_PutOutputString>
 8004e52:	e003      	b.n	8004e5c <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8004e54:	4909      	ldr	r1, [pc, #36]	@ (8004e7c <VibeCheckSensorSender_Status_Execute+0x88>)
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f000 fb7c 	bl	8005554 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8004e5c:	6838      	ldr	r0, [r7, #0]
 8004e5e:	f000 fbf7 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	0801d16c 	.word	0x0801d16c
 8004e74:	0801d170 	.word	0x0801d170
 8004e78:	0801d178 	.word	0x0801d178
 8004e7c:	0801d184 	.word	0x0801d184

08004e80 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	shell->input_tail = 0;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
	shell->input_count = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
	shell->input_delimiter_count = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

	shell->output_head = 0;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6153      	str	r3, [r2, #20]
	shell->output_count = 0;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6193      	str	r3, [r2, #24]

	shell->ih_count = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
	shell->oh_count = 0;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b099      	sub	sp, #100	@ 0x64
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8004efc:	2300      	movs	r3, #0
 8004efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f0a:	d302      	bcc.n	8004f12 <VibeCheckShell_Update+0x1e>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8092 	beq.w	8005042 <VibeCheckShell_Update+0x14e>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8004f24:	e08d      	b.n	8005042 <VibeCheckShell_Update+0x14e>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	2240      	movs	r2, #64	@ 0x40
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9f8 	bl	8005324 <VibeCheckShell_GetNextString>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d04d      	beq.n	8004fd6 <VibeCheckShell_Update+0xe2>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f3e:	e041      	b.n	8004fc4 <VibeCheckShell_Update+0xd0>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8004f40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	f241 0218 	movw	r2, #4120	@ 0x1018
 8004f4e:	441a      	add	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	f107 020c 	add.w	r2, r7, #12
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb f9d7 	bl	8000310 <strcmp>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11e      	bne.n	8004fa6 <VibeCheckShell_Update+0xb2>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	18ca      	adds	r2, r1, r3
 8004f76:	f241 035c 	movw	r3, #4188	@ 0x105c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f503 5383 	add.w	r3, r3, #4192	@ 0x1060
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	47a0      	blx	r4
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11f      	bne.n	8004fde <VibeCheckShell_Update+0xea>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8004fa4:	e01b      	b.n	8004fde <VibeCheckShell_Update+0xea>
				}

				if (i == shell->ih_count - 1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004fac:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d102      	bne.n	8004fbe <VibeCheckShell_Update+0xca>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004fca:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8004fce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d3b5      	bcc.n	8004f40 <VibeCheckShell_Update+0x4c>
 8004fd4:	e004      	b.n	8004fe0 <VibeCheckShell_Update+0xec>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004fdc:	e000      	b.n	8004fe0 <VibeCheckShell_Update+0xec>
					break;
 8004fde:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005014:	d103      	bne.n	800501e <VibeCheckShell_Update+0x12a>
				shell->input_tail = 0;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 800501e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005022:	4619      	mov	r1, r3
 8005024:	482c      	ldr	r0, [pc, #176]	@ (80050d8 <VibeCheckShell_Update+0x1e4>)
 8005026:	f014 fc98 	bl	801995a <strchr>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <VibeCheckShell_Update+0x13e>
		{
 8005030:	e7d6      	b.n	8004fe0 <VibeCheckShell_Update+0xec>
				break;  /* found the delimiter */
 8005032:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c
	while (shell->input_delimiter_count)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f af6c 	bne.w	8004f26 <VibeCheckShell_Update+0x32>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005052:	e018      	b.n	8005086 <VibeCheckShell_Update+0x192>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005058:	f202 4244 	addw	r2, r2, #1092	@ 0x444
 800505c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005064:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	4790      	blx	r2
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <VibeCheckShell_Update+0x18c>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8005080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005082:	3301      	adds	r3, #1
 8005084:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800508c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005092:	429a      	cmp	r2, r3
 8005094:	d3de      	bcc.n	8005054 <VibeCheckShell_Update+0x160>
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a2:	d302      	bcc.n	80050aa <VibeCheckShell_Update+0x1b6>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80050aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80050ae:	2300      	movs	r3, #0
 80050b0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80050b4:	f362 0307 	bfi	r3, r2, #0, #8
 80050b8:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80050bc:	f362 230f 	bfi	r3, r2, #8, #8
 80050c0:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80050c4:	f362 4317 	bfi	r3, r2, #16, #8
 80050c8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80050cc:	f362 631f 	bfi	r3, r2, #24, #8
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3764      	adds	r7, #100	@ 0x64
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	0801d194 	.word	0x0801d194

080050dc <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 0014 	add.w	r0, r7, #20
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80050f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80050fa:	d81a      	bhi.n	8005132 <VibeCheckShell_RegisterInputHandler+0x56>
		shell->input_handlers[shell->ih_count++] = handler;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005102:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005106:	1c53      	adds	r3, r2, #1
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800510e:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	18ca      	adds	r2, r1, r3
 800511e:	f241 0318 	movw	r3, #4120	@ 0x1018
 8005122:	4413      	add	r3, r2
 8005124:	3304      	adds	r3, #4
 8005126:	f107 0114 	add.w	r1, r7, #20
 800512a:	2248      	movs	r2, #72	@ 0x48
 800512c:	4618      	mov	r0, r3
 800512e:	f014 fcaa 	bl	8019a86 <memcpy>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800513c:	b004      	add	sp, #16
 800513e:	4770      	bx	lr

08005140 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005154:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005158:	2b3f      	cmp	r3, #63	@ 0x3f
 800515a:	d814      	bhi.n	8005186 <VibeCheckShell_RegisterOutputHandler+0x46>
		shell->output_handlers[shell->oh_count++] = handler;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005162:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800516e:	f8c1 2420 	str.w	r2, [r1, #1056]	@ 0x420
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	1d3a      	adds	r2, r7, #4
 800517e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005182:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e035      	b.n	8005212 <VibeCheckShell_PutInput+0x7e>
	{
		if (*input)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d036      	beq.n	800521c <VibeCheckShell_PutInput+0x88>
		{
			shell->input[shell->input_head++] = *input;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f8c2 1800 	str.w	r1, [r2, #2048]	@ 0x800
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	7811      	ldrb	r1, [r2, #0]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80051ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ce:	d103      	bne.n	80051d8 <VibeCheckShell_PutInput+0x44>
					shell->input_head = 0;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
			shell->input_count++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	480e      	ldr	r0, [pc, #56]	@ (8005228 <VibeCheckShell_PutInput+0x94>)
 80051ee:	f014 fbb4 	bl	801995a <strchr>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <VibeCheckShell_PutInput+0x72>
				shell->input_delimiter_count++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8c3 280c 	str.w	r2, [r3, #2060]	@ 0x80c

			input++;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3301      	adds	r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3c5      	bcc.n	80051a6 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 800521a:	e000      	b.n	800521e <VibeCheckShell_PutInput+0x8a>
			break;
 800521c:	bf00      	nop
}
 800521e:	bf00      	nop
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	0801d194 	.word	0x0801d194

0800522c <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	if (shell->output_head == shell->output_tail)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	429a      	cmp	r2, r3
 800524a:	d101      	bne.n	8005250 <VibeCheckShell_GetOutput+0x24>
		return 0;
 800524c:	2300      	movs	r3, #0
 800524e:	e062      	b.n	8005316 <VibeCheckShell_GetOutput+0xea>

	if (shell->output_head > shell->output_tail)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d930      	bls.n	80052c6 <VibeCheckShell_GetOutput+0x9a>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[shell->output_tail];
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	441a      	add	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	601a      	str	r2, [r3, #0]
		*len = shell->output_head - shell->output_tail;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	1ad2      	subs	r2, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
		shell->output_count -= shell->output_head - shell->output_tail;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529c:	6959      	ldr	r1, [r3, #20]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	1acb      	subs	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052b0:	6193      	str	r3, [r2, #24]
		shell->output_tail = shell->output_head;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052c0:	6153      	str	r3, [r2, #20]
		return 1;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e027      	b.n	8005316 <VibeCheckShell_GetOutput+0xea>
	}
	else
	{
		/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
		*output = &shell->output[shell->output_tail];
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f503 6301 	add.w	r3, r3, #2064	@ 0x810
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	441a      	add	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	601a      	str	r2, [r3, #0]
		*len = VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f5c3 6200 	rsb	r2, r3, #2048	@ 0x800
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	601a      	str	r2, [r3, #0]
		shell->output_count -= VC_SHELL_IO_BUF_LEN - shell->output_tail;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005306:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530e:	461a      	mov	r2, r3
 8005310:	2300      	movs	r3, #0
 8005312:	6153      	str	r3, [r2, #20]
		return 1;
 8005314:	2301      	movs	r3, #1
	}

}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e057      	b.n	80053e6 <VibeCheckShell_GetNextString+0xc2>
	{

		char x = shell->input[shell->input_tail];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005342:	7cfb      	ldrb	r3, [r7, #19]
 8005344:	4619      	mov	r1, r3
 8005346:	482c      	ldr	r0, [pc, #176]	@ (80053f8 <VibeCheckShell_GetNextString+0xd4>)
 8005348:	f014 fb07 	bl	801995a <strchr>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <VibeCheckShell_GetNextString+0x42>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <VibeCheckShell_GetNextString+0x3e>
			{
				*next = '\0';
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
				return 1;
 800535e:	2301      	movs	r3, #1
 8005360:	e046      	b.n	80053f0 <VibeCheckShell_GetNextString+0xcc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 8005362:	2300      	movs	r3, #0
 8005364:	e044      	b.n	80053f0 <VibeCheckShell_GetNextString+0xcc>
		}
		else
		{
			shell->input_count--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800536c:	1e5a      	subs	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
			shell->input_tail++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d103      	bne.n	8005396 <VibeCheckShell_GetNextString+0x72>
				shell->input_tail = 0;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	4619      	mov	r1, r3
 800539a:	4818      	ldr	r0, [pc, #96]	@ (80053fc <VibeCheckShell_GetNextString+0xd8>)
 800539c:	f014 fadd 	bl	801995a <strchr>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <VibeCheckShell_GetNextString+0x92>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01c      	beq.n	80053e6 <VibeCheckShell_GetNextString+0xc2>
				{
					*next = '\0';
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
					return 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e01c      	b.n	80053f0 <VibeCheckShell_GetNextString+0xcc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 80053b6:	7cfb      	ldrb	r3, [r7, #19]
 80053b8:	74bb      	strb	r3, [r7, #18]
 80053ba:	7cbb      	ldrb	r3, [r7, #18]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <VibeCheckShell_GetNextString+0xdc>)
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d103      	bne.n	80053d4 <VibeCheckShell_GetNextString+0xb0>
 80053cc:	7cbb      	ldrb	r3, [r7, #18]
 80053ce:	f103 0220 	add.w	r2, r3, #32
 80053d2:	e000      	b.n	80053d6 <VibeCheckShell_GetNextString+0xb2>
 80053d4:	7cba      	ldrb	r2, [r7, #18]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
				i++;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3301      	adds	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d3a3      	bcc.n	8005336 <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	0801d194 	.word	0x0801d194
 80053fc:	0801d198 	.word	0x0801d198
 8005400:	0801d840 	.word	0x0801d840

08005404 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b092      	sub	sp, #72	@ 0x48
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800540e:	f107 0308 	add.w	r3, r7, #8
 8005412:	2240      	movs	r2, #64	@ 0x40
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff84 	bl	8005324 <VibeCheckShell_GetNextString>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f823 	bl	8005474 <VibeCheckShell_TurnToInt>
 800542e:	4603      	mov	r3, r0
 8005430:	e000      	b.n	8005434 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3748      	adds	r7, #72	@ 0x48
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b092      	sub	sp, #72	@ 0x48
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	2240      	movs	r2, #64	@ 0x40
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff68 	bl	8005324 <VibeCheckShell_GetNextString>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 f83d 	bl	80054e0 <VibeCheckShell_TurnToFloat>
 8005466:	4603      	mov	r3, r0
 8005468:	e000      	b.n	800546c <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3748      	adds	r7, #72	@ 0x48
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 800547e:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <VibeCheckShell_TurnToInt+0x68>)
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	ca07      	ldmia	r2, {r0, r1, r2}
 8005486:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e012      	b.n	80054b6 <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f014 fa5a 	bl	801995a <strchr>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 80054ac:	2300      	movs	r3, #0
 80054ae:	e010      	b.n	80054d2 <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fa ff8a 	bl	80003d0 <strlen>
 80054bc:	4602      	mov	r2, r0
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d3e5      	bcc.n	8005490 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f012 fe9e 	bl	8018206 <atoi>
 80054ca:	4602      	mov	r2, r0
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	601a      	str	r2, [r3, #0]
	return 1;
 80054d0:	2301      	movs	r3, #1
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	0801d19c 	.word	0x0801d19c

080054e0 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b089      	sub	sp, #36	@ 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 80054ea:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <VibeCheckShell_TurnToFloat+0x70>)
 80054ec:	f107 040c 	add.w	r4, r7, #12
 80054f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054f2:	c407      	stmia	r4!, {r0, r1, r2}
 80054f4:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e012      	b.n	8005522 <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f014 fa24 	bl	801995a <strchr>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8005518:	2300      	movs	r3, #0
 800551a:	e014      	b.n	8005546 <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	3301      	adds	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fa ff54 	bl	80003d0 <strlen>
 8005528:	4602      	mov	r2, r0
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4293      	cmp	r3, r2
 800552e:	d3e5      	bcc.n	80054fc <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f012 fe65 	bl	8018200 <atof>
 8005536:	eeb0 7b40 	vmov.f64	d7, d0
 800553a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8005544:	2301      	movs	r3, #1
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	@ 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	0801d1a8 	.word	0x0801d1a8

08005554 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
	while (*str)
 800555e:	e027      	b.n	80055b0 <VibeCheckShell_PutOutputString+0x5c>
	{
		shell->output[shell->output_head++] = *(str++);
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	1c53      	adds	r3, r2, #1
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8005576:	6101      	str	r1, [r0, #16]
 8005578:	7811      	ldrb	r1, [r2, #0]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	460a      	mov	r2, r1
 8005580:	f883 2810 	strb.w	r2, [r3, #2064]	@ 0x810
		shell->output_count++;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	3301      	adds	r3, #1
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005594:	6193      	str	r3, [r2, #24]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a2:	d105      	bne.n	80055b0 <VibeCheckShell_PutOutputString+0x5c>
			shell->output_head = 0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055aa:	461a      	mov	r2, r3
 80055ac:	2300      	movs	r3, #0
 80055ae:	6113      	str	r3, [r2, #16]
	while (*str)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1d3      	bne.n	8005560 <VibeCheckShell_PutOutputString+0xc>
	}
}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b092      	sub	sp, #72	@ 0x48
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	4906      	ldr	r1, [pc, #24]	@ (80055f4 <VibeCheckShell_PutOutputInt+0x2c>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f014 f952 	bl	8019884 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff ffb4 	bl	8005554 <VibeCheckShell_PutOutputString>
}
 80055ec:	bf00      	nop
 80055ee:	3748      	adds	r7, #72	@ 0x48
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	0801d1b8 	.word	0x0801d1b8

080055f8 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b092      	sub	sp, #72	@ 0x48
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%f", val);
 8005604:	edd7 7a00 	vldr	s15, [r7]
 8005608:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800560c:	f107 0008 	add.w	r0, r7, #8
 8005610:	ec53 2b17 	vmov	r2, r3, d7
 8005614:	4906      	ldr	r1, [pc, #24]	@ (8005630 <VibeCheckShell_PutOutputFloat+0x38>)
 8005616:	f014 f935 	bl	8019884 <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 800561a:	f107 0308 	add.w	r3, r7, #8
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ff97 	bl	8005554 <VibeCheckShell_PutOutputString>
}
 8005626:	bf00      	nop
 8005628:	3748      	adds	r7, #72	@ 0x48
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	0801d1bc 	.word	0x0801d1bc

08005634 <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 800563c:	4903      	ldr	r1, [pc, #12]	@ (800564c <VibeCheckShell_PutOutputSeparator+0x18>)
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ff88 	bl	8005554 <VibeCheckShell_PutOutputString>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0801d1c0 	.word	0x0801d1c0

08005650 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 8005658:	4903      	ldr	r1, [pc, #12]	@ (8005668 <VibeCheckShell_PutOutputDelimiter+0x18>)
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff7a 	bl	8005554 <VibeCheckShell_PutOutputString>
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	0801d194 	.word	0x0801d194

0800566c <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_MIN_FREQ_HZ;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005682:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = 1.0f;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800568a:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	60da      	str	r2, [r3, #12]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f640 125f 	movw	r2, #2399	@ 0x95f
 800569e:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056a6:	eeb0 0a67 	vmov.f32	s0, s15
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f84a 	bl	8005744 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80056b6:	eeb0 0a67 	vmov.f32	s0, s15
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f928 	bl	8005910 <VibeCheckStrobe_SetExposure>

}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	HAL_TIM_Base_Start_IT(strobe->htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f00b fd51 	bl	801117c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f00b fe33 	bl	801134c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2104      	movs	r1, #4
 80056ec:	4618      	mov	r0, r3
 80056ee:	f00b fe2d 	bl	801134c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2108      	movs	r1, #8
 80056f8:	4618      	mov	r0, r3
 80056fa:	f00b fe27 	bl	801134c <HAL_TIM_PWM_Start>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(strobe->htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f00b fd32 	bl	801117c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2100      	movs	r1, #0
 800571e:	4618      	mov	r0, r3
 8005720:	f00b ff30 	bl	8011584 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2104      	movs	r1, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f00b ff2a 	bl	8011584 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2108      	movs	r1, #8
 8005736:	4618      	mov	r0, r3
 8005738:	f00b ff24 	bl	8011584 <HAL_TIM_PWM_Stop>
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <VibeCheckStrobe_SetFrequency>:

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 8005750:	edd7 7a00 	vldr	s15, [r7]
 8005754:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800575c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005760:	d502      	bpl.n	8005768 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 8005762:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005766:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 8005768:	edd7 7a00 	vldr	s15, [r7]
 800576c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80057d8 <VibeCheckStrobe_SetFrequency+0x94>
 8005770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005778:	dd01      	ble.n	800577e <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 800577a:	4b18      	ldr	r3, [pc, #96]	@ (80057dc <VibeCheckStrobe_SetFrequency+0x98>)
 800577c:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 800577e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80057e0 <VibeCheckStrobe_SetFrequency+0x9c>
 8005782:	ed97 7a00 	vldr	s14, [r7]
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800578e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005796:	ee17 2a90 	vmov	r2, s15
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b2:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80057e0 <VibeCheckStrobe_SetFrequency+0x9c>
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6912      	ldr	r2, [r2, #16]
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	447a0000 	.word	0x447a0000
 80057dc:	447a0000 	.word	0x447a0000
 80057e0:	47c35000 	.word	0x47c35000

080057e4 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	ee07 3a90 	vmov	s15, r3
}
 80057f4:	eeb0 0a67 	vmov.f32	s0, s15
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 8005810:	edd7 7a00 	vldr	s15, [r7]
 8005814:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80058dc <VibeCheckStrobe_SetPhase+0xd8>
 8005818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	d501      	bpl.n	8005826 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 8005822:	4b2f      	ldr	r3, [pc, #188]	@ (80058e0 <VibeCheckStrobe_SetPhase+0xdc>)
 8005824:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8005826:	edd7 7a00 	vldr	s15, [r7]
 800582a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80058e4 <VibeCheckStrobe_SetPhase+0xe0>
 800582e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005836:	dd01      	ble.n	800583c <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8005838:	4b2b      	ldr	r3, [pc, #172]	@ (80058e8 <VibeCheckStrobe_SetPhase+0xe4>)
 800583a:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005842:	ed97 7a00 	vldr	s14, [r7]
 8005846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584a:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 800584e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005852:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80058ec <VibeCheckStrobe_SetPhase+0xe8>
 8005856:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800586e:	ee17 3a90 	vmov	r3, s15
 8005872:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d029      	beq.n	80058ce <VibeCheckStrobe_SetPhase+0xca>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d125      	bne.n	80058ce <VibeCheckStrobe_SetPhase+0xca>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d121      	bne.n	80058ce <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80058aa:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80058ec <VibeCheckStrobe_SetPhase+0xe8>
 80058ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80058b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	441a      	add	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	615a      	str	r2, [r3, #20]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	619a      	str	r2, [r3, #24]
	}
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	c3340000 	.word	0xc3340000
 80058e0:	c3340000 	.word	0xc3340000
 80058e4:	43340000 	.word	0x43340000
 80058e8:	43340000 	.word	0x43340000
 80058ec:	43b40000 	.word	0x43b40000

080058f0 <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	ee07 3a90 	vmov	s15, r3
}
 8005900:	eeb0 0a67 	vmov.f32	s0, s15
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 800591c:	edd7 7a00 	vldr	s15, [r7]
 8005920:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800599c <VibeCheckStrobe_SetExposure+0x8c>
 8005924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005928:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80059a0 <VibeCheckStrobe_SetExposure+0x90>
 800592c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005934:	ee17 3a90 	vmov	r3, s15
 8005938:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	429a      	cmp	r2, r3
 8005946:	d904      	bls.n	8005952 <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800595c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80059a0 <VibeCheckStrobe_SetExposure+0x90>
 8005960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005964:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80059a4 <VibeCheckStrobe_SetExposure+0x94>
 8005968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	3a83126f 	.word	0x3a83126f
 80059a0:	47c35000 	.word	0x47c35000
 80059a4:	447a0000 	.word	0x447a0000

080059a8 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	ee07 3a90 	vmov	s15, r3
}
 80059b8:	eeb0 0a67 	vmov.f32	s0, s15
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6912      	ldr	r2, [r2, #16]
 80059e0:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	61da      	str	r2, [r3, #28]
	}

	if (strobe->phase_change_pending)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6952      	ldr	r2, [r2, #20]
 80059fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 0;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	619a      	str	r2, [r3, #24]
	}
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b096      	sub	sp, #88	@ 0x58
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005a1e:	f107 0318 	add.w	r3, r7, #24
 8005a22:	2240      	movs	r2, #64	@ 0x40
 8005a24:	4619      	mov	r1, r3
 8005a26:	6838      	ldr	r0, [r7, #0]
 8005a28:	f7ff fc7c 	bl	8005324 <VibeCheckShell_GetNextString>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d065      	beq.n	8005afe <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8005a32:	f107 0318 	add.w	r3, r7, #24
 8005a36:	4934      	ldr	r1, [pc, #208]	@ (8005b08 <VibeCheckStrobeCMD_Set+0xf4>)
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fa fc69 	bl	8000310 <strcmp>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d118      	bne.n	8005a76 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f7ff fcf6 	bl	800543c <VibeCheckShell_GetNextFloat>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d053      	beq.n	8005afe <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8005a56:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fe70 	bl	8005744 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005a64:	4929      	ldr	r1, [pc, #164]	@ (8005b0c <VibeCheckStrobeCMD_Set+0xf8>)
 8005a66:	6838      	ldr	r0, [r7, #0]
 8005a68:	f7ff fd74 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005a6c:	6838      	ldr	r0, [r7, #0]
 8005a6e:	f7ff fdef 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e044      	b.n	8005b00 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8005a76:	f107 0318 	add.w	r3, r7, #24
 8005a7a:	4925      	ldr	r1, [pc, #148]	@ (8005b10 <VibeCheckStrobeCMD_Set+0xfc>)
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fa fc47 	bl	8000310 <strcmp>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d118      	bne.n	8005aba <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005a88:	f107 0310 	add.w	r3, r7, #16
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6838      	ldr	r0, [r7, #0]
 8005a90:	f7ff fcd4 	bl	800543c <VibeCheckShell_GetNextFloat>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d031      	beq.n	8005afe <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8005a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff feae 	bl	8005804 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005aa8:	4918      	ldr	r1, [pc, #96]	@ (8005b0c <VibeCheckStrobeCMD_Set+0xf8>)
 8005aaa:	6838      	ldr	r0, [r7, #0]
 8005aac:	f7ff fd52 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005ab0:	6838      	ldr	r0, [r7, #0]
 8005ab2:	f7ff fdcd 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e022      	b.n	8005b00 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8005aba:	f107 0318 	add.w	r3, r7, #24
 8005abe:	4915      	ldr	r1, [pc, #84]	@ (8005b14 <VibeCheckStrobeCMD_Set+0x100>)
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fa fc25 	bl	8000310 <strcmp>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d118      	bne.n	8005afe <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8005acc:	f107 030c 	add.w	r3, r7, #12
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6838      	ldr	r0, [r7, #0]
 8005ad4:	f7ff fcb2 	bl	800543c <VibeCheckShell_GetNextFloat>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00f      	beq.n	8005afe <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8005ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff ff12 	bl	8005910 <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8005aec:	4907      	ldr	r1, [pc, #28]	@ (8005b0c <VibeCheckStrobeCMD_Set+0xf8>)
 8005aee:	6838      	ldr	r0, [r7, #0]
 8005af0:	f7ff fd30 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005af4:	6838      	ldr	r0, [r7, #0]
 8005af6:	f7ff fdab 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3758      	adds	r7, #88	@ 0x58
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	0801d1c4 	.word	0x0801d1c4
 8005b0c:	0801d1d0 	.word	0x0801d1d0
 8005b10:	0801d1d4 	.word	0x0801d1d4
 8005b14:	0801d1dc 	.word	0x0801d1dc

08005b18 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b092      	sub	sp, #72	@ 0x48
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b22:	f107 0308 	add.w	r3, r7, #8
 8005b26:	2240      	movs	r2, #64	@ 0x40
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6838      	ldr	r0, [r7, #0]
 8005b2c:	f7ff fbfa 	bl	8005324 <VibeCheckShell_GetNextString>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d05c      	beq.n	8005bf0 <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4930      	ldr	r1, [pc, #192]	@ (8005bfc <VibeCheckStrobeCMD_Get+0xe4>)
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fa fbe7 	bl	8000310 <strcmp>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d115      	bne.n	8005b74 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b48:	492d      	ldr	r1, [pc, #180]	@ (8005c00 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b4a:	6838      	ldr	r0, [r7, #0]
 8005b4c:	f7ff fd02 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b50:	6838      	ldr	r0, [r7, #0]
 8005b52:	f7ff fd6f 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fe44 	bl	80057e4 <VibeCheckStrobe_GetFrequency>
 8005b5c:	eef0 7a40 	vmov.f32	s15, s0
 8005b60:	eeb0 0a67 	vmov.f32	s0, s15
 8005b64:	6838      	ldr	r0, [r7, #0]
 8005b66:	f7ff fd47 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005b6a:	6838      	ldr	r0, [r7, #0]
 8005b6c:	f7ff fd70 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e03e      	b.n	8005bf2 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8005b74:	f107 0308 	add.w	r3, r7, #8
 8005b78:	4922      	ldr	r1, [pc, #136]	@ (8005c04 <VibeCheckStrobeCMD_Get+0xec>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fa fbc8 	bl	8000310 <strcmp>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d115      	bne.n	8005bb2 <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005b86:	491e      	ldr	r1, [pc, #120]	@ (8005c00 <VibeCheckStrobeCMD_Get+0xe8>)
 8005b88:	6838      	ldr	r0, [r7, #0]
 8005b8a:	f7ff fce3 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005b8e:	6838      	ldr	r0, [r7, #0]
 8005b90:	f7ff fd50 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff feab 	bl	80058f0 <VibeCheckStrobe_GetPhase>
 8005b9a:	eef0 7a40 	vmov.f32	s15, s0
 8005b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba2:	6838      	ldr	r0, [r7, #0]
 8005ba4:	f7ff fd28 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f7ff fd51 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e01f      	b.n	8005bf2 <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4914      	ldr	r1, [pc, #80]	@ (8005c08 <VibeCheckStrobeCMD_Get+0xf0>)
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fa fba9 	bl	8000310 <strcmp>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d115      	bne.n	8005bf0 <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8005bc4:	490e      	ldr	r1, [pc, #56]	@ (8005c00 <VibeCheckStrobeCMD_Get+0xe8>)
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f7ff fcc4 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005bcc:	6838      	ldr	r0, [r7, #0]
 8005bce:	f7ff fd31 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fee8 	bl	80059a8 <VibeCheckStrobe_GetExposure>
 8005bd8:	eef0 7a40 	vmov.f32	s15, s0
 8005bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8005be0:	6838      	ldr	r0, [r7, #0]
 8005be2:	f7ff fd09 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005be6:	6838      	ldr	r0, [r7, #0]
 8005be8:	f7ff fd32 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3748      	adds	r7, #72	@ 0x48
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	0801d1c4 	.word	0x0801d1c4
 8005c00:	0801d1d0 	.word	0x0801d1d0
 8005c04:	0801d1d4 	.word	0x0801d1d4
 8005c08:	0801d1dc 	.word	0x0801d1dc

08005c0c <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b094      	sub	sp, #80	@ 0x50
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	2240      	movs	r2, #64	@ 0x40
 8005c20:	4619      	mov	r1, r3
 8005c22:	6838      	ldr	r0, [r7, #0]
 8005c24:	f7ff fb7e 	bl	8005324 <VibeCheckShell_GetNextString>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d04d      	beq.n	8005cca <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	4928      	ldr	r1, [pc, #160]	@ (8005cd4 <VibeCheckStrobeCMD_Execute+0xc8>)
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa fb6b 	bl	8000310 <strcmp>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8005c40:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c42:	f7ff fd41 	bl	80056c8 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005c46:	4924      	ldr	r1, [pc, #144]	@ (8005cd8 <VibeCheckStrobeCMD_Execute+0xcc>)
 8005c48:	6838      	ldr	r0, [r7, #0]
 8005c4a:	f7ff fc83 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c4e:	6838      	ldr	r0, [r7, #0]
 8005c50:	f7ff fcfe 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e039      	b.n	8005ccc <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8005c58:	f107 030c 	add.w	r3, r7, #12
 8005c5c:	491f      	ldr	r1, [pc, #124]	@ (8005cdc <VibeCheckStrobeCMD_Execute+0xd0>)
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fb56 	bl	8000310 <strcmp>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8005c6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c6c:	f7ff fd4b 	bl	8005706 <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8005c70:	4919      	ldr	r1, [pc, #100]	@ (8005cd8 <VibeCheckStrobeCMD_Execute+0xcc>)
 8005c72:	6838      	ldr	r0, [r7, #0]
 8005c74:	f7ff fc6e 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f7ff fce9 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e024      	b.n	8005ccc <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8005c82:	f107 030c 	add.w	r3, r7, #12
 8005c86:	4916      	ldr	r1, [pc, #88]	@ (8005ce0 <VibeCheckStrobeCMD_Execute+0xd4>)
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fa fb41 	bl	8000310 <strcmp>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c98:	f7ff febc 	bl	8005a14 <VibeCheckStrobeCMD_Set>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d013      	beq.n	8005cca <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e012      	b.n	8005ccc <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	490e      	ldr	r1, [pc, #56]	@ (8005ce4 <VibeCheckStrobeCMD_Execute+0xd8>)
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fa fb2f 	bl	8000310 <strcmp>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005cbc:	f7ff ff2c 	bl	8005b18 <VibeCheckStrobeCMD_Get>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3750      	adds	r7, #80	@ 0x50
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	0801d1e8 	.word	0x0801d1e8
 8005cd8:	0801d1d0 	.word	0x0801d1d0
 8005cdc:	0801d1f0 	.word	0x0801d1f0
 8005ce0:	0801d1f8 	.word	0x0801d1f8
 8005ce4:	0801d1fc 	.word	0x0801d1fc

08005ce8 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	ed2d 8b02 	vpush	{d8}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e032      	b.n	8005d66 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8005d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d04:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d16:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8005d88 <ComputeSineWave+0xa0>
 8005d1a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d30:	eeb0 0b47 	vmov.f64	d0, d7
 8005d34:	f016 faf4 	bl	801c320 <sin>
 8005d38:	eeb0 7b40 	vmov.f64	d7, d0
 8005d3c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005d40:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005d44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d48:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8005d80 <ComputeSineWave+0x98>
 8005d4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	60fa      	str	r2, [r7, #12]
 8005d56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d5a:	ee17 2a90 	vmov	r2, s15
 8005d5e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	3301      	adds	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d3c8      	bcc.n	8005d00 <ComputeSineWave+0x18>
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	ecbd 8b02 	vpop	{d8}
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	f3af 8000 	nop.w
 8005d80:	00000000 	.word	0x00000000
 8005d84:	409ffe00 	.word	0x409ffe00
 8005d88:	40490fd0 	.word	0x40490fd0

08005d8c <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e02c      	b.n	8005dfa <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	085b      	lsrs	r3, r3, #1
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d212      	bcs.n	8005dd0 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8005daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005db6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005e10 <ComputeSquareWave+0x84>
 8005dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	60fa      	str	r2, [r7, #12]
 8005dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc8:	ee17 2a90 	vmov	r2, s15
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e011      	b.n	8005df4 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8005dd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ddc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005e10 <ComputeSquareWave+0x84>
 8005de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	60fa      	str	r2, [r7, #12]
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
 8005df2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	3301      	adds	r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3ce      	bcc.n	8005da0 <ComputeSquareWave+0x14>
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	44fff000 	.word	0x44fff000

08005e14 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e052      	b.n	8005ece <ComputeSawWave+0xba>
		if (i < len / 2)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d222      	bcs.n	8005e78 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e5e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005ee4 <ComputeSawWave+0xd0>
 8005e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1d1a      	adds	r2, r3, #4
 8005e6a:	60fa      	str	r2, [r7, #12]
 8005e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e70:	ee17 2a90 	vmov	r2, s15
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e027      	b.n	8005ec8 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8005e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e9a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	ee07 3a90 	vmov	s15, r3
 8005ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005ee4 <ComputeSawWave+0xd0>
 8005eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	60fa      	str	r2, [r7, #12]
 8005ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec2:	ee17 2a90 	vmov	r2, s15
 8005ec6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3a8      	bcc.n	8005e28 <ComputeSawWave+0x14>
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	44fff000 	.word	0x44fff000

08005ee8 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e082      	b.n	8006002 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	089b      	lsrs	r3, r3, #2
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d221      	bcs.n	8005f4a <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	ee07 3a90 	vmov	s15, r3
 8005f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f30:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800601c <ComputeTriangleWave+0x134>
 8005f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	60fa      	str	r2, [r7, #12]
 8005f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f42:	ee17 2a90 	vmov	r2, s15
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e058      	b.n	8005ffc <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	089b      	lsrs	r3, r3, #2
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d227      	bcs.n	8005faa <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 8005f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f7a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f90:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800601c <ComputeTriangleWave+0x134>
 8005f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	60fa      	str	r2, [r7, #12]
 8005f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa2:	ee17 2a90 	vmov	r2, s15
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e028      	b.n	8005ffc <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 8005faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fae:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fce:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fdc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fe4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800601c <ComputeTriangleWave+0x134>
 8005fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	60fa      	str	r2, [r7, #12]
 8005ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff6:	ee17 2a90 	vmov	r2, s15
 8005ffa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	3301      	adds	r3, #1
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	f4ff af78 	bcc.w	8005efc <ComputeTriangleWave+0x14>
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	44fff000 	.word	0x44fff000

08006020 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e008      	b.n	8006042 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	1d1a      	adds	r2, r3, #4
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800603a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	3301      	adds	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d3f2      	bcc.n	8006030 <ComputeNullWave+0x10>
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d044      	beq.n	80060f8 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006074:	7e1b      	ldrb	r3, [r3, #24]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d844      	bhi.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
 800607a:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <VibeCheckWaveGen_RecomputeWave+0x28>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006091 	.word	0x08006091
 8006084:	080060ab 	.word	0x080060ab
 8006088:	080060c5 	.word	0x080060c5
 800608c:	080060df 	.word	0x080060df
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006096:	edd3 7a08 	vldr	s15, [r3, #32]
 800609a:	eeb0 0a67 	vmov.f32	s0, s15
 800609e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060a2:	6838      	ldr	r0, [r7, #0]
 80060a4:	f7ff fe20 	bl	8005ce8 <ComputeSineWave>
			break;
 80060a8:	e02c      	b.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80060b4:	eeb0 0a67 	vmov.f32	s0, s15
 80060b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f7ff fe65 	bl	8005d8c <ComputeSquareWave>
			break;
 80060c2:	e01f      	b.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80060ce:	eeb0 0a67 	vmov.f32	s0, s15
 80060d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f7ff fe9c 	bl	8005e14 <ComputeSawWave>
			break;
 80060dc:	e012      	b.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80060e8:	eeb0 0a67 	vmov.f32	s0, s15
 80060ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060f0:	6838      	ldr	r0, [r7, #0]
 80060f2:	f7ff fef9 	bl	8005ee8 <ComputeTriangleWave>
			break;
 80060f6:	e005      	b.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 80060f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80060fc:	6838      	ldr	r0, [r7, #0]
 80060fe:	f7ff ff8f 	bl	8006020 <ComputeNullWave>
	}
}
 8006102:	e7ff      	b.n	8006104 <VibeCheckWaveGen_RecomputeWave+0xac>
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = 440.0f;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612a:	461a      	mov	r2, r3
 800612c:	4b44      	ldr	r3, [pc, #272]	@ (8006240 <VibeCheckWaveGen_Init+0x134>)
 800612e:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = 0.001f;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006136:	461a      	mov	r2, r3
 8006138:	4b42      	ldr	r3, [pc, #264]	@ (8006244 <VibeCheckWaveGen_Init+0x138>)
 800613a:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006142:	2200      	movs	r2, #0
 8006144:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614c:	461a      	mov	r2, r3
 800614e:	2300      	movs	r3, #0
 8006150:	6253      	str	r3, [r2, #36]	@ 0x24
	wavegen->is_muted = 0;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6293      	str	r3, [r2, #40]	@ 0x28
	wavegen->mute_button_flag = 0;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	62d3      	str	r3, [r2, #44]	@ 0x2c
	wavegen->time_prev_button_press = 0;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006170:	461a      	mov	r2, r3
 8006172:	2300      	movs	r3, #0
 8006174:	6313      	str	r3, [r2, #48]	@ 0x30

	wavegen->wave_ping_compute_pending = 0;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006188:	461a      	mov	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006194:	461a      	mov	r2, r3
 8006196:	2300      	movs	r3, #0
 8006198:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a0:	461a      	mov	r2, r3
 80061a2:	2300      	movs	r3, #0
 80061a4:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061ac:	461a      	mov	r2, r3
 80061ae:	2300      	movs	r3, #0
 80061b0:	6353      	str	r3, [r2, #52]	@ 0x34

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	220b      	movs	r2, #11
 80061ba:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80061c6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f920 	bl	8006410 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3308      	adds	r3, #8
 80061d4:	4619      	mov	r1, r3
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff ff3e 	bl	8006058 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ff37 	bl	8006058 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6858      	ldr	r0, [r3, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f103 0208 	add.w	r2, r3, #8
 80061f4:	2300      	movs	r3, #0
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061fc:	2100      	movs	r1, #0
 80061fe:	f002 faed 	bl	80087dc <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6858      	ldr	r0, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006214:	2110      	movs	r1, #16
 8006216:	f002 fae1 	bl	80087dc <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f00a ff2e 	bl	8011080 <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8006224:	2200      	movs	r2, #0
 8006226:	2108      	movs	r1, #8
 8006228:	4807      	ldr	r0, [pc, #28]	@ (8006248 <VibeCheckWaveGen_Init+0x13c>)
 800622a:	f005 f801 	bl	800b230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 800622e:	2200      	movs	r2, #0
 8006230:	2102      	movs	r1, #2
 8006232:	4805      	ldr	r0, [pc, #20]	@ (8006248 <VibeCheckWaveGen_Init+0x13c>)
 8006234:	f004 fffc 	bl	800b230 <HAL_GPIO_WritePin>
}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	43dc0000 	.word	0x43dc0000
 8006244:	3a83126f 	.word	0x3a83126f
 8006248:	58020000 	.word	0x58020000

0800624c <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	/* check the mute button */
	uint32_t time = HAL_GetTick();
 8006254:	f000 fd74 	bl	8006d40 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]
	if (time - wavegen->time_prev_button_press > VC_WAVE_BUTTON_DEBOUNCE_MS && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2bfa      	cmp	r3, #250	@ 0xfa
 8006268:	d939      	bls.n	80062de <VibeCheckWaveGen_Update+0x92>
 800626a:	2104      	movs	r1, #4
 800626c:	4843      	ldr	r0, [pc, #268]	@ (800637c <VibeCheckWaveGen_Update+0x130>)
 800626e:	f004 ffc7 	bl	800b200 <HAL_GPIO_ReadPin>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d032      	beq.n	80062de <VibeCheckWaveGen_Update+0x92>

		/*
		 * the line driver seems to have some kind of slow start built in so no
		 * need to worry about pops when muting via the hardware pin
		 */
		if (wavegen->is_muted)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <VibeCheckWaveGen_Update+0x5a>
		{
			wavegen->is_muted = 0;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8006290:	2200      	movs	r2, #0
 8006292:	2108      	movs	r1, #8
 8006294:	4839      	ldr	r0, [pc, #228]	@ (800637c <VibeCheckWaveGen_Update+0x130>)
 8006296:	f004 ffcb 	bl	800b230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 800629a:	2200      	movs	r2, #0
 800629c:	2102      	movs	r1, #2
 800629e:	4837      	ldr	r0, [pc, #220]	@ (800637c <VibeCheckWaveGen_Update+0x130>)
 80062a0:	f004 ffc6 	bl	800b230 <HAL_GPIO_WritePin>
 80062a4:	e00f      	b.n	80062c6 <VibeCheckWaveGen_Update+0x7a>
		}
		else
		{
			wavegen->is_muted = 1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ac:	461a      	mov	r2, r3
 80062ae:	2301      	movs	r3, #1
 80062b0:	6293      	str	r3, [r2, #40]	@ 0x28
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 80062b2:	2201      	movs	r2, #1
 80062b4:	2108      	movs	r1, #8
 80062b6:	4831      	ldr	r0, [pc, #196]	@ (800637c <VibeCheckWaveGen_Update+0x130>)
 80062b8:	f004 ffba 	bl	800b230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 80062bc:	2201      	movs	r2, #1
 80062be:	2102      	movs	r1, #2
 80062c0:	482e      	ldr	r0, [pc, #184]	@ (800637c <VibeCheckWaveGen_Update+0x130>)
 80062c2:	f004 ffb5 	bl	800b230 <HAL_GPIO_WritePin>
		}

		wavegen->mute_button_flag = 1;  /* can alert the shell via this flag when we press the mute button */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062cc:	461a      	mov	r2, r3
 80062ce:	2301      	movs	r3, #1
 80062d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
		wavegen->time_prev_button_press = time;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d8:	461a      	mov	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <VibeCheckWaveGen_Update+0xb6>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff feb1 	bl	8006058 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <VibeCheckWaveGen_Update+0xdc>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fe9e 	bl	8006058 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006322:	461a      	mov	r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	f241 0338 	movw	r3, #4152	@ 0x1038
 800632e:	4413      	add	r3, r2
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fb ff2e 	bl	8002198 <Sequencer_Update>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d017      	beq.n	8006372 <VibeCheckWaveGen_Update+0x126>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <VibeCheckWaveGen_Update+0x110>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4a0b      	ldr	r2, [pc, #44]	@ (8006380 <VibeCheckWaveGen_Update+0x134>)
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	edd3 7a00 	vldr	s15, [r3]
 800635a:	e005      	b.n	8006368 <VibeCheckWaveGen_Update+0x11c>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4a09      	ldr	r2, [pc, #36]	@ (8006384 <VibeCheckWaveGen_Update+0x138>)
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	edd3 7a00 	vldr	s15, [r3]
 8006368:	eeb0 0a67 	vmov.f32	s0, s15
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f84f 	bl	8006410 <VibeCheckWaveGen_SetFrequency>
	}

}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	58020000 	.word	0x58020000
 8006380:	0801d704 	.word	0x0801d704
 8006384:	0801d5e8 	.word	0x0801d5e8

08006388 <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d111      	bne.n	80063c0 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a2:	461a      	mov	r2, r3
 80063a4:	2301      	movs	r3, #1
 80063a6:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ae:	461a      	mov	r2, r3
 80063b0:	2301      	movs	r3, #1
 80063b2:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ba:	461a      	mov	r2, r3
 80063bc:	2301      	movs	r3, #1
 80063be:	60d3      	str	r3, [r2, #12]
	}

}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d011      	beq.n	8006404 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e6:	461a      	mov	r2, r3
 80063e8:	2300      	movs	r3, #0
 80063ea:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f2:	461a      	mov	r2, r3
 80063f4:	2301      	movs	r3, #1
 80063f6:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063fe:	461a      	mov	r2, r3
 8006400:	2301      	movs	r3, #1
 8006402:	60d3      	str	r3, [r2, #12]
	}
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 800641c:	edd7 7a00 	vldr	s15, [r7]
 8006420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006428:	d502      	bpl.n	8006430 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 8006430:	edd7 7a00 	vldr	s15, [r7]
 8006434:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80064b0 <VibeCheckWaveGen_SetFrequency+0xa0>
 8006438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	dd01      	ble.n	8006446 <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 8006442:	4b1c      	ldr	r3, [pc, #112]	@ (80064b4 <VibeCheckWaveGen_SetFrequency+0xa4>)
 8006444:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 8006446:	edd7 7a00 	vldr	s15, [r7]
 800644a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80064b8 <VibeCheckWaveGen_SetFrequency+0xa8>
 800644e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006452:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80064bc <VibeCheckWaveGen_SetFrequency+0xac>
 8006456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800645e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006466:	ee17 3a90 	vmov	r3, s15
 800646a:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800647e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80064bc <VibeCheckWaveGen_SetFrequency+0xac>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80064b8 <VibeCheckWaveGen_SetFrequency+0xa8>
 800648a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006494:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	46989600 	.word	0x46989600
 80064b4:	46989600 	.word	0x46989600
 80064b8:	44000000 	.word	0x44000000
 80064bc:	4b989680 	.word	0x4b989680

080064c0 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	ee07 3a90 	vmov	s15, r3
}
 80064d4:	eeb0 0a67 	vmov.f32	s0, s15
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b083      	sub	sp, #12
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 80064ee:	edd7 7a00 	vldr	s15, [r7]
 80064f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fa:	d502      	bpl.n	8006502 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 8006502:	edd7 7a00 	vldr	s15, [r7]
 8006506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800650a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	dd02      	ble.n	800651a <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 8006514:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006518:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006520:	461a      	mov	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800652c:	461a      	mov	r2, r3
 800652e:	2301      	movs	r3, #1
 8006530:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006538:	461a      	mov	r2, r3
 800653a:	2301      	movs	r3, #1
 800653c:	60d3      	str	r3, [r2, #12]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	ee07 3a90 	vmov	s15, r3
}
 800655e:	eeb0 0a67 	vmov.f32	s0, s15
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800657e:	461a      	mov	r2, r3
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658a:	461a      	mov	r2, r3
 800658c:	2301      	movs	r3, #1
 800658e:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006596:	461a      	mov	r2, r3
 8006598:	2301      	movs	r3, #1
 800659a:	60d3      	str	r3, [r2, #12]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b6:	7e1b      	ldrb	r3, [r3, #24]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <VibeCheckWaveGen_WasMuteButtonPressed>:

uint32_t VibeCheckWaveGen_WasMuteButtonPressed(VibeCheckWaveGen* wavegen, uint32_t* is_muted)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	if (wavegen->mute_button_flag)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00d      	beq.n	80065f6 <VibeCheckWaveGen_WasMuteButtonPressed+0x32>
	{
		wavegen->mute_button_flag = 0;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
		*is_muted = wavegen->is_muted;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	601a      	str	r2, [r3, #0]
		return 1;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <VibeCheckWaveGen_WasMuteButtonPressed+0x34>
	}

	return 0;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661e:	461a      	mov	r2, r3
 8006620:	2300      	movs	r3, #0
 8006622:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800662a:	461a      	mov	r2, r3
 800662c:	2301      	movs	r3, #1
 800662e:	6113      	str	r3, [r2, #16]
	}
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006656:	461a      	mov	r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006662:	461a      	mov	r2, r3
 8006664:	2301      	movs	r3, #1
 8006666:	6153      	str	r3, [r2, #20]
	}
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006682:	4413      	add	r3, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f7fb fd55 	bl	8002134 <Sequencer_Init>
	if (wavegen->demo_num)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f241 0038 	movw	r0, #4152	@ 0x1038
 800669c:	4418      	add	r0, r3
 800669e:	2301      	movs	r3, #1
 80066a0:	221a      	movs	r2, #26
 80066a2:	4916      	ldr	r1, [pc, #88]	@ (80066fc <VibeCheckWaveGen_StartDemo+0x88>)
 80066a4:	f7fb fd62 	bl	800216c <Sequencer_SetSequence>
 80066a8:	e008      	b.n	80066bc <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f241 0038 	movw	r0, #4152	@ 0x1038
 80066b0:	4418      	add	r0, r3
 80066b2:	2301      	movs	r3, #1
 80066b4:	222d      	movs	r2, #45	@ 0x2d
 80066b6:	4912      	ldr	r1, [pc, #72]	@ (8006700 <VibeCheckWaveGen_StartDemo+0x8c>)
 80066b8:	f7fb fd58 	bl	800216c <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d6:	635a      	str	r2, [r3, #52]	@ 0x34
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f241 0438 	movw	r4, #4152	@ 0x1038
 80066de:	441c      	add	r4, r3
 80066e0:	f000 fb2e 	bl	8006d40 <HAL_GetTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4619      	mov	r1, r3
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7fb fd97 	bl	800221c <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fe4a 	bl	8006388 <VibeCheckWaveGen_Start>
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd90      	pop	{r4, r7, pc}
 80066fc:	0801d580 	.word	0x0801d580
 8006700:	0801d650 	.word	0x0801d650

08006704 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fe5d 	bl	80063cc <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	f241 0338 	movw	r3, #4152	@ 0x1038
 8006718:	4413      	add	r3, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f7fb fd92 	bl	8002244 <Sequencer_Stop>
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b094      	sub	sp, #80	@ 0x50
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	2240      	movs	r2, #64	@ 0x40
 8006738:	4619      	mov	r1, r3
 800673a:	6838      	ldr	r0, [r7, #0]
 800673c:	f7fe fdf2 	bl	8005324 <VibeCheckShell_GetNextString>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80b0 	beq.w	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 8006748:	f107 0310 	add.w	r3, r7, #16
 800674c:	4959      	ldr	r1, [pc, #356]	@ (80068b4 <VibeCheckWaveGenCMD_Set+0x18c>)
 800674e:	4618      	mov	r0, r3
 8006750:	f7f9 fdde 	bl	8000310 <strcmp>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d119      	bne.n	800678e <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4619      	mov	r1, r3
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f7fe fe6b 	bl	800543c <VibeCheckShell_GetNextFloat>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 809d 	beq.w	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 800676e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006772:	eeb0 0a67 	vmov.f32	s0, s15
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fe4a 	bl	8006410 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 800677c:	494e      	ldr	r1, [pc, #312]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 800677e:	6838      	ldr	r0, [r7, #0]
 8006780:	f7fe fee8 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006784:	6838      	ldr	r0, [r7, #0]
 8006786:	f7fe ff63 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 800678a:	2301      	movs	r3, #1
 800678c:	e08d      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	494a      	ldr	r1, [pc, #296]	@ (80068bc <VibeCheckWaveGenCMD_Set+0x194>)
 8006794:	4618      	mov	r0, r3
 8006796:	f7f9 fdbb 	bl	8000310 <strcmp>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d118      	bne.n	80067d2 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80067a0:	f107 0308 	add.w	r3, r7, #8
 80067a4:	4619      	mov	r1, r3
 80067a6:	6838      	ldr	r0, [r7, #0]
 80067a8:	f7fe fe48 	bl	800543c <VibeCheckShell_GetNextFloat>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d07a      	beq.n	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 80067b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80067b6:	eeb0 0a67 	vmov.f32	s0, s15
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fe91 	bl	80064e2 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 80067c0:	493d      	ldr	r1, [pc, #244]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 80067c2:	6838      	ldr	r0, [r7, #0]
 80067c4:	f7fe fec6 	bl	8005554 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80067c8:	6838      	ldr	r0, [r7, #0]
 80067ca:	f7fe ff41 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e06b      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 80067d2:	f107 0310 	add.w	r3, r7, #16
 80067d6:	493a      	ldr	r1, [pc, #232]	@ (80068c0 <VibeCheckWaveGenCMD_Set+0x198>)
 80067d8:	4618      	mov	r0, r3
 80067da:	f7f9 fd99 	bl	8000310 <strcmp>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d161      	bne.n	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	2240      	movs	r2, #64	@ 0x40
 80067ea:	4619      	mov	r1, r3
 80067ec:	6838      	ldr	r0, [r7, #0]
 80067ee:	f7fe fd99 	bl	8005324 <VibeCheckShell_GetNextString>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d057      	beq.n	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	4931      	ldr	r1, [pc, #196]	@ (80068c4 <VibeCheckWaveGenCMD_Set+0x19c>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 fd86 	bl	8000310 <strcmp>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 800680a:	2100      	movs	r1, #0
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fead 	bl	800656c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006812:	4929      	ldr	r1, [pc, #164]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 8006814:	6838      	ldr	r0, [r7, #0]
 8006816:	f7fe fe9d 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f7fe ff18 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006820:	2301      	movs	r3, #1
 8006822:	e042      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8006824:	f107 0310 	add.w	r3, r7, #16
 8006828:	4927      	ldr	r1, [pc, #156]	@ (80068c8 <VibeCheckWaveGenCMD_Set+0x1a0>)
 800682a:	4618      	mov	r0, r3
 800682c:	f7f9 fd70 	bl	8000310 <strcmp>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10c      	bne.n	8006850 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 8006836:	2101      	movs	r1, #1
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fe97 	bl	800656c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800683e:	491e      	ldr	r1, [pc, #120]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 8006840:	6838      	ldr	r0, [r7, #0]
 8006842:	f7fe fe87 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006846:	6838      	ldr	r0, [r7, #0]
 8006848:	f7fe ff02 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 800684c:	2301      	movs	r3, #1
 800684e:	e02c      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 8006850:	f107 0310 	add.w	r3, r7, #16
 8006854:	491d      	ldr	r1, [pc, #116]	@ (80068cc <VibeCheckWaveGenCMD_Set+0x1a4>)
 8006856:	4618      	mov	r0, r3
 8006858:	f7f9 fd5a 	bl	8000310 <strcmp>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10c      	bne.n	800687c <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 8006862:	2102      	movs	r1, #2
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fe81 	bl	800656c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800686a:	4913      	ldr	r1, [pc, #76]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 800686c:	6838      	ldr	r0, [r7, #0]
 800686e:	f7fe fe71 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006872:	6838      	ldr	r0, [r7, #0]
 8006874:	f7fe feec 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006878:	2301      	movs	r3, #1
 800687a:	e016      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 800687c:	f107 0310 	add.w	r3, r7, #16
 8006880:	4913      	ldr	r1, [pc, #76]	@ (80068d0 <VibeCheckWaveGenCMD_Set+0x1a8>)
 8006882:	4618      	mov	r0, r3
 8006884:	f7f9 fd44 	bl	8000310 <strcmp>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 800688e:	2103      	movs	r1, #3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff fe6b 	bl	800656c <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006896:	4908      	ldr	r1, [pc, #32]	@ (80068b8 <VibeCheckWaveGenCMD_Set+0x190>)
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	f7fe fe5b 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f7fe fed6 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3750      	adds	r7, #80	@ 0x50
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	0801d200 	.word	0x0801d200
 80068b8:	0801d20c 	.word	0x0801d20c
 80068bc:	0801d210 	.word	0x0801d210
 80068c0:	0801d21c 	.word	0x0801d21c
 80068c4:	0801d228 	.word	0x0801d228
 80068c8:	0801d230 	.word	0x0801d230
 80068cc:	0801d238 	.word	0x0801d238
 80068d0:	0801d23c 	.word	0x0801d23c

080068d4 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b092      	sub	sp, #72	@ 0x48
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	2240      	movs	r2, #64	@ 0x40
 80068e4:	4619      	mov	r1, r3
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	f7fe fd1c 	bl	8005324 <VibeCheckShell_GetNextString>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d077      	beq.n	80069e2 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	493d      	ldr	r1, [pc, #244]	@ (80069ec <VibeCheckWaveGenCMD_Get+0x118>)
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7f9 fd09 	bl	8000310 <strcmp>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d115      	bne.n	8006930 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006904:	493a      	ldr	r1, [pc, #232]	@ (80069f0 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006906:	6838      	ldr	r0, [r7, #0]
 8006908:	f7fe fe24 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800690c:	6838      	ldr	r0, [r7, #0]
 800690e:	f7fe fe91 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fdd4 	bl	80064c0 <VibeCheckWaveGen_GetFrequency>
 8006918:	eef0 7a40 	vmov.f32	s15, s0
 800691c:	eeb0 0a67 	vmov.f32	s0, s15
 8006920:	6838      	ldr	r0, [r7, #0]
 8006922:	f7fe fe69 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006926:	6838      	ldr	r0, [r7, #0]
 8006928:	f7fe fe92 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800692c:	2301      	movs	r3, #1
 800692e:	e059      	b.n	80069e4 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	492f      	ldr	r1, [pc, #188]	@ (80069f4 <VibeCheckWaveGenCMD_Get+0x120>)
 8006936:	4618      	mov	r0, r3
 8006938:	f7f9 fcea 	bl	8000310 <strcmp>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d115      	bne.n	800696e <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006942:	492b      	ldr	r1, [pc, #172]	@ (80069f0 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006944:	6838      	ldr	r0, [r7, #0]
 8006946:	f7fe fe05 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 800694a:	6838      	ldr	r0, [r7, #0]
 800694c:	f7fe fe72 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fdfa 	bl	800654a <VibeCheckWaveGen_GetAmplitude>
 8006956:	eef0 7a40 	vmov.f32	s15, s0
 800695a:	eeb0 0a67 	vmov.f32	s0, s15
 800695e:	6838      	ldr	r0, [r7, #0]
 8006960:	f7fe fe4a 	bl	80055f8 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006964:	6838      	ldr	r0, [r7, #0]
 8006966:	f7fe fe73 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 800696a:	2301      	movs	r3, #1
 800696c:	e03a      	b.n	80069e4 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 800696e:	f107 0308 	add.w	r3, r7, #8
 8006972:	4921      	ldr	r1, [pc, #132]	@ (80069f8 <VibeCheckWaveGenCMD_Get+0x124>)
 8006974:	4618      	mov	r0, r3
 8006976:	f7f9 fccb 	bl	8000310 <strcmp>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d130      	bne.n	80069e2 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006980:	491b      	ldr	r1, [pc, #108]	@ (80069f0 <VibeCheckWaveGenCMD_Get+0x11c>)
 8006982:	6838      	ldr	r0, [r7, #0]
 8006984:	f7fe fde6 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006988:	6838      	ldr	r0, [r7, #0]
 800698a:	f7fe fe53 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fe0a 	bl	80065a8 <VibeCheckWaveGen_GetWaveform>
 8006994:	4603      	mov	r3, r0
 8006996:	2b03      	cmp	r3, #3
 8006998:	d81e      	bhi.n	80069d8 <VibeCheckWaveGenCMD_Get+0x104>
 800699a:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <VibeCheckWaveGenCMD_Get+0xcc>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b1 	.word	0x080069b1
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069c5 	.word	0x080069c5
 80069ac:	080069cf 	.word	0x080069cf
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 80069b0:	4912      	ldr	r1, [pc, #72]	@ (80069fc <VibeCheckWaveGenCMD_Get+0x128>)
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fe fdce 	bl	8005554 <VibeCheckShell_PutOutputString>
				break;
 80069b8:	e00e      	b.n	80069d8 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 80069ba:	4911      	ldr	r1, [pc, #68]	@ (8006a00 <VibeCheckWaveGenCMD_Get+0x12c>)
 80069bc:	6838      	ldr	r0, [r7, #0]
 80069be:	f7fe fdc9 	bl	8005554 <VibeCheckShell_PutOutputString>
				break;
 80069c2:	e009      	b.n	80069d8 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 80069c4:	490f      	ldr	r1, [pc, #60]	@ (8006a04 <VibeCheckWaveGenCMD_Get+0x130>)
 80069c6:	6838      	ldr	r0, [r7, #0]
 80069c8:	f7fe fdc4 	bl	8005554 <VibeCheckShell_PutOutputString>
				break;
 80069cc:	e004      	b.n	80069d8 <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 80069ce:	490e      	ldr	r1, [pc, #56]	@ (8006a08 <VibeCheckWaveGenCMD_Get+0x134>)
 80069d0:	6838      	ldr	r0, [r7, #0]
 80069d2:	f7fe fdbf 	bl	8005554 <VibeCheckShell_PutOutputString>
				break;
 80069d6:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 80069d8:	6838      	ldr	r0, [r7, #0]
 80069da:	f7fe fe39 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3748      	adds	r7, #72	@ 0x48
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	0801d200 	.word	0x0801d200
 80069f0:	0801d20c 	.word	0x0801d20c
 80069f4:	0801d210 	.word	0x0801d210
 80069f8:	0801d21c 	.word	0x0801d21c
 80069fc:	0801d228 	.word	0x0801d228
 8006a00:	0801d230 	.word	0x0801d230
 8006a04:	0801d238 	.word	0x0801d238
 8006a08:	0801d23c 	.word	0x0801d23c

08006a0c <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b094      	sub	sp, #80	@ 0x50
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006a1a:	f107 030c 	add.w	r3, r7, #12
 8006a1e:	2240      	movs	r2, #64	@ 0x40
 8006a20:	4619      	mov	r1, r3
 8006a22:	6838      	ldr	r0, [r7, #0]
 8006a24:	f7fe fc7e 	bl	8005324 <VibeCheckShell_GetNextString>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 808b 	beq.w	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	4946      	ldr	r1, [pc, #280]	@ (8006b50 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7f9 fc6a 	bl	8000310 <strcmp>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8006a42:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a44:	f7ff fca0 	bl	8006388 <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a48:	4942      	ldr	r1, [pc, #264]	@ (8006b54 <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a4a:	6838      	ldr	r0, [r7, #0]
 8006a4c:	f7fe fd82 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a50:	6838      	ldr	r0, [r7, #0]
 8006a52:	f7fe fdfd 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e076      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	493e      	ldr	r1, [pc, #248]	@ (8006b58 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7f9 fc55 	bl	8000310 <strcmp>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8006a6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a6e:	f7ff fcad 	bl	80063cc <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006a72:	4938      	ldr	r1, [pc, #224]	@ (8006b54 <VibeCheckWaveGenCMD_Execute+0x148>)
 8006a74:	6838      	ldr	r0, [r7, #0]
 8006a76:	f7fe fd6d 	bl	8005554 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006a7a:	6838      	ldr	r0, [r7, #0]
 8006a7c:	f7fe fde8 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e061      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	4934      	ldr	r1, [pc, #208]	@ (8006b5c <VibeCheckWaveGenCMD_Execute+0x150>)
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7f9 fc40 	bl	8000310 <strcmp>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d108      	bne.n	8006aa8 <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a9a:	f7ff fe45 	bl	8006728 <VibeCheckWaveGenCMD_Set>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d050      	beq.n	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e04f      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	492c      	ldr	r1, [pc, #176]	@ (8006b60 <VibeCheckWaveGenCMD_Execute+0x154>)
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7f9 fc2e 	bl	8000310 <strcmp>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d108      	bne.n	8006acc <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006abe:	f7ff ff09 	bl	80068d4 <VibeCheckWaveGenCMD_Get>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d03e      	beq.n	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e03d      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	4924      	ldr	r1, [pc, #144]	@ (8006b64 <VibeCheckWaveGenCMD_Execute+0x158>)
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7f9 fc1c 	bl	8000310 <strcmp>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d133      	bne.n	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006ade:	f107 030c 	add.w	r3, r7, #12
 8006ae2:	2240      	movs	r2, #64	@ 0x40
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f7fe fc1c 	bl	8005324 <VibeCheckShell_GetNextString>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d029      	beq.n	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	4916      	ldr	r1, [pc, #88]	@ (8006b50 <VibeCheckWaveGenCMD_Execute+0x144>)
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7f9 fc09 	bl	8000310 <strcmp>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8006b04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b06:	f7ff fdb5 	bl	8006674 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006b0a:	4912      	ldr	r1, [pc, #72]	@ (8006b54 <VibeCheckWaveGenCMD_Execute+0x148>)
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7fe fd21 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006b12:	6838      	ldr	r0, [r7, #0]
 8006b14:	f7fe fd9c 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e015      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	490d      	ldr	r1, [pc, #52]	@ (8006b58 <VibeCheckWaveGenCMD_Execute+0x14c>)
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7f9 fbf4 	bl	8000310 <strcmp>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8006b2e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b30:	f7ff fde8 	bl	8006704 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8006b34:	4907      	ldr	r1, [pc, #28]	@ (8006b54 <VibeCheckWaveGenCMD_Execute+0x148>)
 8006b36:	6838      	ldr	r0, [r7, #0]
 8006b38:	f7fe fd0c 	bl	8005554 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8006b3c:	6838      	ldr	r0, [r7, #0]
 8006b3e:	f7fe fd87 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3750      	adds	r7, #80	@ 0x50
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	0801d248 	.word	0x0801d248
 8006b54:	0801d20c 	.word	0x0801d20c
 8006b58:	0801d250 	.word	0x0801d250
 8006b5c:	0801d258 	.word	0x0801d258
 8006b60:	0801d25c 	.word	0x0801d25c
 8006b64:	0801d260 	.word	0x0801d260

08006b68 <VibeCheckWaveGenSender_Execute>:


uint32_t VibeCheckWaveGenSender_Execute(void* obj, VibeCheckShell* shell)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
	/* this will send a message to the host when the mute button is pressed */

	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]

	uint32_t is_muted;
	if (VibeCheckWaveGen_WasMuteButtonPressed(wavegen, &is_muted))
 8006b76:	f107 0308 	add.w	r3, r7, #8
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff fd21 	bl	80065c4 <VibeCheckWaveGen_WasMuteButtonPressed>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01e      	beq.n	8006bc6 <VibeCheckWaveGenSender_Execute+0x5e>
	{
		VibeCheckShell_PutOutputString(shell, "msg");
 8006b88:	4911      	ldr	r1, [pc, #68]	@ (8006bd0 <VibeCheckWaveGenSender_Execute+0x68>)
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f7fe fce2 	bl	8005554 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006b90:	6838      	ldr	r0, [r7, #0]
 8006b92:	f7fe fd4f 	bl	8005634 <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "wavegen");
 8006b96:	490f      	ldr	r1, [pc, #60]	@ (8006bd4 <VibeCheckWaveGenSender_Execute+0x6c>)
 8006b98:	6838      	ldr	r0, [r7, #0]
 8006b9a:	f7fe fcdb 	bl	8005554 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8006b9e:	6838      	ldr	r0, [r7, #0]
 8006ba0:	f7fe fd48 	bl	8005634 <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <VibeCheckWaveGenSender_Execute+0x4c>
			VibeCheckShell_PutOutputString(shell, "muted");
 8006baa:	490b      	ldr	r1, [pc, #44]	@ (8006bd8 <VibeCheckWaveGenSender_Execute+0x70>)
 8006bac:	6838      	ldr	r0, [r7, #0]
 8006bae:	f7fe fcd1 	bl	8005554 <VibeCheckShell_PutOutputString>
 8006bb2:	e003      	b.n	8006bbc <VibeCheckWaveGenSender_Execute+0x54>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8006bb4:	4909      	ldr	r1, [pc, #36]	@ (8006bdc <VibeCheckWaveGenSender_Execute+0x74>)
 8006bb6:	6838      	ldr	r0, [r7, #0]
 8006bb8:	f7fe fccc 	bl	8005554 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8006bbc:	6838      	ldr	r0, [r7, #0]
 8006bbe:	f7fe fd47 	bl	8005650 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <VibeCheckWaveGenSender_Execute+0x60>
	}

	return 0;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	0801d268 	.word	0x0801d268
 8006bd4:	0801d26c 	.word	0x0801d26c
 8006bd8:	0801d274 	.word	0x0801d274
 8006bdc:	0801d27c 	.word	0x0801d27c

08006be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006be4:	f7fc f91e 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006be8:	480c      	ldr	r0, [pc, #48]	@ (8006c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006bea:	490d      	ldr	r1, [pc, #52]	@ (8006c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006bec:	4a0d      	ldr	r2, [pc, #52]	@ (8006c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bf0:	e002      	b.n	8006bf8 <LoopCopyDataInit>

08006bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bf6:	3304      	adds	r3, #4

08006bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bfc:	d3f9      	bcc.n	8006bf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8006c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006c00:	4c0a      	ldr	r4, [pc, #40]	@ (8006c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c04:	e001      	b.n	8006c0a <LoopFillZerobss>

08006c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c08:	3204      	adds	r2, #4

08006c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c0c:	d3fb      	bcc.n	8006c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c0e:	f012 ff13 	bl	8019a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c12:	f7fa fb35 	bl	8001280 <main>
  bx  lr
 8006c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006c18:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8006c1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006c20:	240002cc 	.word	0x240002cc
  ldr r2, =_sidata
 8006c24:	0801df38 	.word	0x0801df38
  ldr r2, =_sbss
 8006c28:	240002cc 	.word	0x240002cc
  ldr r4, =_ebss
 8006c2c:	2400636c 	.word	0x2400636c

08006c30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c30:	e7fe      	b.n	8006c30 <ADC3_IRQHandler>
	...

08006c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c3a:	2003      	movs	r0, #3
 8006c3c:	f001 fcf4 	bl	8008628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c40:	f006 fcd6 	bl	800d5f0 <HAL_RCC_GetSysClockFreq>
 8006c44:	4602      	mov	r2, r0
 8006c46:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <HAL_Init+0x68>)
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	4913      	ldr	r1, [pc, #76]	@ (8006ca0 <HAL_Init+0x6c>)
 8006c52:	5ccb      	ldrb	r3, [r1, r3]
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <HAL_Init+0x68>)
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca0 <HAL_Init+0x6c>)
 8006c68:	5cd3      	ldrb	r3, [r2, r3]
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	fa22 f303 	lsr.w	r3, r2, r3
 8006c74:	4a0b      	ldr	r2, [pc, #44]	@ (8006ca4 <HAL_Init+0x70>)
 8006c76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c78:	4a0b      	ldr	r2, [pc, #44]	@ (8006ca8 <HAL_Init+0x74>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c7e:	200f      	movs	r0, #15
 8006c80:	f000 f814 	bl	8006cac <HAL_InitTick>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e002      	b.n	8006c94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c8e:	f7fb faf3 	bl	8002278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	0801d2b8 	.word	0x0801d2b8
 8006ca4:	24000004 	.word	0x24000004
 8006ca8:	24000000 	.word	0x24000000

08006cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006cb4:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <HAL_InitTick+0x60>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e021      	b.n	8006d04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006cc0:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <HAL_InitTick+0x64>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <HAL_InitTick+0x60>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 fcd9 	bl	800868e <HAL_SYSTICK_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e00e      	b.n	8006d04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b0f      	cmp	r3, #15
 8006cea:	d80a      	bhi.n	8006d02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cec:	2200      	movs	r2, #0
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	f001 fca3 	bl	800863e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cf8:	4a06      	ldr	r2, [pc, #24]	@ (8006d14 <HAL_InitTick+0x68>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e000      	b.n	8006d04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	2400000c 	.word	0x2400000c
 8006d10:	24000000 	.word	0x24000000
 8006d14:	24000008 	.word	0x24000008

08006d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <HAL_IncTick+0x20>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_IncTick+0x24>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4413      	add	r3, r2
 8006d28:	4a04      	ldr	r2, [pc, #16]	@ (8006d3c <HAL_IncTick+0x24>)
 8006d2a:	6013      	str	r3, [r2, #0]
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2400000c 	.word	0x2400000c
 8006d3c:	24004638 	.word	0x24004638

08006d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  return uwTick;
 8006d44:	4b03      	ldr	r3, [pc, #12]	@ (8006d54 <HAL_GetTick+0x14>)
 8006d46:	681b      	ldr	r3, [r3, #0]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	24004638 	.word	0x24004638

08006d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d60:	f7ff ffee 	bl	8006d40 <HAL_GetTick>
 8006d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d005      	beq.n	8006d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d72:	4b0a      	ldr	r3, [pc, #40]	@ (8006d9c <HAL_Delay+0x44>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d7e:	bf00      	nop
 8006d80:	f7ff ffde 	bl	8006d40 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d8f7      	bhi.n	8006d80 <HAL_Delay+0x28>
  {
  }
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	2400000c 	.word	0x2400000c

08006da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	609a      	str	r2, [r3, #8]
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3360      	adds	r3, #96	@ 0x60
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a10      	ldr	r2, [pc, #64]	@ (8006e68 <LL_ADC_SetOffset+0x60>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10b      	bne.n	8006e44 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006e42:	e00b      	b.n	8006e5c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	430b      	orrs	r3, r1
 8006e56:	431a      	orrs	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	601a      	str	r2, [r3, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	58026000 	.word	0x58026000

08006e6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3360      	adds	r3, #96	@ 0x60
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	611a      	str	r2, [r3, #16]
}
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
	...

08006ecc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4a0c      	ldr	r2, [pc, #48]	@ (8006f0c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3360      	adds	r3, #96	@ 0x60
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	601a      	str	r2, [r3, #0]
  }
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	58026000 	.word	0x58026000

08006f10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <LL_ADC_SetOffsetSaturation+0x40>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10e      	bne.n	8006f42 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3360      	adds	r3, #96	@ 0x60
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	58026000 	.word	0x58026000

08006f54 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a0c      	ldr	r2, [pc, #48]	@ (8006f94 <LL_ADC_SetOffsetSign+0x40>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10e      	bne.n	8006f86 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3360      	adds	r3, #96	@ 0x60
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	58026000 	.word	0x58026000

08006f98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3360      	adds	r3, #96	@ 0x60
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe8 <LL_ADC_SetOffsetState+0x50>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d108      	bne.n	8006fcc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8006fca:	e007      	b.n	8006fdc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	601a      	str	r2, [r3, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	58026000 	.word	0x58026000

08006fec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3330      	adds	r3, #48	@ 0x30
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	0a1b      	lsrs	r3, r3, #8
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	4413      	add	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	211f      	movs	r1, #31
 8007018:	fa01 f303 	lsl.w	r3, r1, r3
 800701c:	43db      	mvns	r3, r3
 800701e:	401a      	ands	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	0e9b      	lsrs	r3, r3, #26
 8007024:	f003 011f 	and.w	r1, r3, #31
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	fa01 f303 	lsl.w	r3, r1, r3
 8007032:	431a      	orrs	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3314      	adds	r3, #20
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	0e5b      	lsrs	r3, r3, #25
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	4413      	add	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	0d1b      	lsrs	r3, r3, #20
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2107      	movs	r1, #7
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	43db      	mvns	r3, r3
 8007078:	401a      	ands	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	0d1b      	lsrs	r3, r3, #20
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007114 <LL_ADC_SetChannelSingleDiff+0x78>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d115      	bne.n	80070dc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070bc:	43db      	mvns	r3, r3
 80070be:	401a      	ands	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f003 0318 	and.w	r3, r3, #24
 80070c6:	4914      	ldr	r1, [pc, #80]	@ (8007118 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80070c8:	40d9      	lsrs	r1, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	400b      	ands	r3, r1
 80070ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d2:	431a      	orrs	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80070da:	e014      	b.n	8007106 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e8:	43db      	mvns	r3, r3
 80070ea:	401a      	ands	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f003 0318 	and.w	r3, r3, #24
 80070f2:	4909      	ldr	r1, [pc, #36]	@ (8007118 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80070f4:	40d9      	lsrs	r1, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	400b      	ands	r3, r1
 80070fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070fe:	431a      	orrs	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8007106:	bf00      	nop
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	58026000 	.word	0x58026000
 8007118:	000fffff 	.word	0x000fffff

0800711c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <LL_ADC_DisableDeepPowerDown+0x20>)
 800712a:	4013      	ands	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6093      	str	r3, [r2, #8]
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	5fffffc0 	.word	0x5fffffc0

08007140 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007154:	d101      	bne.n	800715a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <LL_ADC_EnableInternalRegulator+0x24>)
 8007176:	4013      	ands	r3, r2
 8007178:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	6fffffc0 	.word	0x6fffffc0

08007190 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a4:	d101      	bne.n	80071aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <LL_ADC_IsEnabled+0x18>
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <LL_ADC_IsEnabled+0x1a>
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d101      	bne.n	80071f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b08      	cmp	r3, #8
 8007216:	d101      	bne.n	800721c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007238:	2300      	movs	r3, #0
 800723a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e1ee      	b.n	8007624 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fb f829 	bl	80022ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ff67 	bl	8007140 <LL_ADC_IsDeepPowerDownEnabled>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff ff4d 	bl	800711c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff ff82 	bl	8007190 <LL_ADC_IsInternalRegulatorEnabled>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d114      	bne.n	80072bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff ff66 	bl	8007168 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800729c:	4b8e      	ldr	r3, [pc, #568]	@ (80074d8 <HAL_ADC_Init+0x2ac>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	099b      	lsrs	r3, r3, #6
 80072a2:	4a8e      	ldr	r2, [pc, #568]	@ (80074dc <HAL_ADC_Init+0x2b0>)
 80072a4:	fba2 2303 	umull	r2, r3, r2, r3
 80072a8:	099b      	lsrs	r3, r3, #6
 80072aa:	3301      	adds	r3, #1
 80072ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80072ae:	e002      	b.n	80072b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f9      	bne.n	80072b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ff65 	bl	8007190 <LL_ADC_IsInternalRegulatorEnabled>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d0:	f043 0210 	orr.w	r2, r3, #16
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072dc:	f043 0201 	orr.w	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff ff76 	bl	80071de <LL_ADC_REG_IsConversionOngoing>
 80072f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8188 	bne.w	8007612 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f040 8184 	bne.w	8007612 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007312:	f043 0202 	orr.w	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff ff4a 	bl	80071b8 <LL_ADC_IsEnabled>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d136      	bne.n	8007398 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6c      	ldr	r2, [pc, #432]	@ (80074e0 <HAL_ADC_Init+0x2b4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d004      	beq.n	800733e <HAL_ADC_Init+0x112>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a6a      	ldr	r2, [pc, #424]	@ (80074e4 <HAL_ADC_Init+0x2b8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d10e      	bne.n	800735c <HAL_ADC_Init+0x130>
 800733e:	4868      	ldr	r0, [pc, #416]	@ (80074e0 <HAL_ADC_Init+0x2b4>)
 8007340:	f7ff ff3a 	bl	80071b8 <LL_ADC_IsEnabled>
 8007344:	4604      	mov	r4, r0
 8007346:	4867      	ldr	r0, [pc, #412]	@ (80074e4 <HAL_ADC_Init+0x2b8>)
 8007348:	f7ff ff36 	bl	80071b8 <LL_ADC_IsEnabled>
 800734c:	4603      	mov	r3, r0
 800734e:	4323      	orrs	r3, r4
 8007350:	2b00      	cmp	r3, #0
 8007352:	bf0c      	ite	eq
 8007354:	2301      	moveq	r3, #1
 8007356:	2300      	movne	r3, #0
 8007358:	b2db      	uxtb	r3, r3
 800735a:	e008      	b.n	800736e <HAL_ADC_Init+0x142>
 800735c:	4862      	ldr	r0, [pc, #392]	@ (80074e8 <HAL_ADC_Init+0x2bc>)
 800735e:	f7ff ff2b 	bl	80071b8 <LL_ADC_IsEnabled>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d012      	beq.n	8007398 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5a      	ldr	r2, [pc, #360]	@ (80074e0 <HAL_ADC_Init+0x2b4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <HAL_ADC_Init+0x15a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a58      	ldr	r2, [pc, #352]	@ (80074e4 <HAL_ADC_Init+0x2b8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d101      	bne.n	800738a <HAL_ADC_Init+0x15e>
 8007386:	4a59      	ldr	r2, [pc, #356]	@ (80074ec <HAL_ADC_Init+0x2c0>)
 8007388:	e000      	b.n	800738c <HAL_ADC_Init+0x160>
 800738a:	4a59      	ldr	r2, [pc, #356]	@ (80074f0 <HAL_ADC_Init+0x2c4>)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f7ff fd04 	bl	8006da0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a52      	ldr	r2, [pc, #328]	@ (80074e8 <HAL_ADC_Init+0x2bc>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d129      	bne.n	80073f6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7e5b      	ldrb	r3, [r3, #25]
 80073a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80073ac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80073b2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d013      	beq.n	80073e4 <HAL_ADC_Init+0x1b8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b0c      	cmp	r3, #12
 80073c2:	d00d      	beq.n	80073e0 <HAL_ADC_Init+0x1b4>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b1c      	cmp	r3, #28
 80073ca:	d007      	beq.n	80073dc <HAL_ADC_Init+0x1b0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b18      	cmp	r3, #24
 80073d2:	d101      	bne.n	80073d8 <HAL_ADC_Init+0x1ac>
 80073d4:	2318      	movs	r3, #24
 80073d6:	e006      	b.n	80073e6 <HAL_ADC_Init+0x1ba>
 80073d8:	2300      	movs	r3, #0
 80073da:	e004      	b.n	80073e6 <HAL_ADC_Init+0x1ba>
 80073dc:	2310      	movs	r3, #16
 80073de:	e002      	b.n	80073e6 <HAL_ADC_Init+0x1ba>
 80073e0:	2308      	movs	r3, #8
 80073e2:	e000      	b.n	80073e6 <HAL_ADC_Init+0x1ba>
 80073e4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80073e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80073f0:	4313      	orrs	r3, r2
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e00e      	b.n	8007414 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7e5b      	ldrb	r3, [r3, #25]
 80073fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007400:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007406:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800740e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007410:	4313      	orrs	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d106      	bne.n	800742c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	3b01      	subs	r3, #1
 8007424:	045b      	lsls	r3, r3, #17
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	d009      	beq.n	8007448 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	4313      	orrs	r3, r2
 8007446:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a26      	ldr	r2, [pc, #152]	@ (80074e8 <HAL_ADC_Init+0x2bc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d115      	bne.n	800747e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	4b26      	ldr	r3, [pc, #152]	@ (80074f4 <HAL_ADC_Init+0x2c8>)
 800745a:	4013      	ands	r3, r2
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6812      	ldr	r2, [r2, #0]
 8007460:	69b9      	ldr	r1, [r7, #24]
 8007462:	430b      	orrs	r3, r1
 8007464:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	611a      	str	r2, [r3, #16]
 800747c:	e009      	b.n	8007492 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	4b1c      	ldr	r3, [pc, #112]	@ (80074f8 <HAL_ADC_Init+0x2cc>)
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	430b      	orrs	r3, r1
 8007490:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fea1 	bl	80071de <LL_ADC_REG_IsConversionOngoing>
 800749c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff feae 	bl	8007204 <LL_ADC_INJ_IsConversionOngoing>
 80074a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 808e 	bne.w	80075ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 808a 	bne.w	80075ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a0a      	ldr	r2, [pc, #40]	@ (80074e8 <HAL_ADC_Init+0x2bc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d11b      	bne.n	80074fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7e1b      	ldrb	r3, [r3, #24]
 80074c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	e018      	b.n	800750a <HAL_ADC_Init+0x2de>
 80074d8:	24000000 	.word	0x24000000
 80074dc:	053e2d63 	.word	0x053e2d63
 80074e0:	40022000 	.word	0x40022000
 80074e4:	40022100 	.word	0x40022100
 80074e8:	58026000 	.word	0x58026000
 80074ec:	40022300 	.word	0x40022300
 80074f0:	58026300 	.word	0x58026300
 80074f4:	fff04007 	.word	0xfff04007
 80074f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7e1b      	ldrb	r3, [r3, #24]
 8007500:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8007506:	4313      	orrs	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	4b46      	ldr	r3, [pc, #280]	@ (800762c <HAL_ADC_Init+0x400>)
 8007512:	4013      	ands	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6812      	ldr	r2, [r2, #0]
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	430b      	orrs	r3, r1
 800751c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007524:	2b01      	cmp	r3, #1
 8007526:	d137      	bne.n	8007598 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3f      	ldr	r2, [pc, #252]	@ (8007630 <HAL_ADC_Init+0x404>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d116      	bne.n	8007566 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	4b3d      	ldr	r3, [pc, #244]	@ (8007634 <HAL_ADC_Init+0x408>)
 8007540:	4013      	ands	r3, r2
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800754a:	4311      	orrs	r1, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007550:	4311      	orrs	r1, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007556:	430a      	orrs	r2, r1
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	611a      	str	r2, [r3, #16]
 8007564:	e020      	b.n	80075a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	4b32      	ldr	r3, [pc, #200]	@ (8007638 <HAL_ADC_Init+0x40c>)
 800756e:	4013      	ands	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007574:	3a01      	subs	r2, #1
 8007576:	0411      	lsls	r1, r2, #16
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800757c:	4311      	orrs	r1, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007582:	4311      	orrs	r1, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007588:	430a      	orrs	r2, r1
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	611a      	str	r2, [r3, #16]
 8007596:	e007      	b.n	80075a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 0201 	bic.w	r2, r2, #1
 80075a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007630 <HAL_ADC_Init+0x404>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d002      	beq.n	80075ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fd67 	bl	800809c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d10c      	bne.n	80075f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	f023 010f 	bic.w	r1, r3, #15
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	1e5a      	subs	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80075ee:	e007      	b.n	8007600 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 020f 	bic.w	r2, r2, #15
 80075fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007604:	f023 0303 	bic.w	r3, r3, #3
 8007608:	f043 0201 	orr.w	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007610:	e007      	b.n	8007622 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007616:	f043 0210 	orr.w	r2, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007622:	7ffb      	ldrb	r3, [r7, #31]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3724      	adds	r7, #36	@ 0x24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}
 800762c:	ffffbffc 	.word	0xffffbffc
 8007630:	58026000 	.word	0x58026000
 8007634:	fc00f81f 	.word	0xfc00f81f
 8007638:	fc00f81e 	.word	0xfc00f81e

0800763c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b0b9      	sub	sp, #228	@ 0xe4
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007656:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4aab      	ldr	r2, [pc, #684]	@ (800790c <HAL_ADC_ConfigChannel+0x2d0>)
 800765e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007666:	2b01      	cmp	r3, #1
 8007668:	d102      	bne.n	8007670 <HAL_ADC_ConfigChannel+0x34>
 800766a:	2302      	movs	r3, #2
 800766c:	f000 bcfe 	b.w	800806c <HAL_ADC_ConfigChannel+0xa30>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fdae 	bl	80071de <LL_ADC_REG_IsConversionOngoing>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 84e2 	bne.w	800804e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	db38      	blt.n	8007704 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a9e      	ldr	r2, [pc, #632]	@ (8007910 <HAL_ADC_ConfigChannel+0x2d4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d033      	beq.n	8007704 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d108      	bne.n	80076ba <HAL_ADC_ConfigChannel+0x7e>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	0e9b      	lsrs	r3, r3, #26
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2201      	movs	r2, #1
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	e01d      	b.n	80076f6 <HAL_ADC_ConfigChannel+0xba>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076c6:	fa93 f3a3 	rbit	r3, r3
 80076ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80076ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80076d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80076de:	2320      	movs	r3, #32
 80076e0:	e004      	b.n	80076ec <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80076e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076e6:	fab3 f383 	clz	r3, r3
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	2201      	movs	r2, #1
 80076f2:	fa02 f303 	lsl.w	r3, r2, r3
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	69d1      	ldr	r1, [r2, #28]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	430b      	orrs	r3, r1
 8007702:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6859      	ldr	r1, [r3, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f7ff fc6b 	bl	8006fec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fd5f 	bl	80071de <LL_ADC_REG_IsConversionOngoing>
 8007720:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fd6b 	bl	8007204 <LL_ADC_INJ_IsConversionOngoing>
 800772e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 8270 	bne.w	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800773c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007740:	2b00      	cmp	r3, #0
 8007742:	f040 826b 	bne.w	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	461a      	mov	r2, r3
 8007754:	f7ff fc76 	bl	8007044 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a6c      	ldr	r2, [pc, #432]	@ (8007910 <HAL_ADC_ConfigChannel+0x2d4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d10d      	bne.n	800777e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800777c:	e032      	b.n	80077e4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800777e:	4b65      	ldr	r3, [pc, #404]	@ (8007914 <HAL_ADC_ConfigChannel+0x2d8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778a:	d10b      	bne.n	80077a4 <HAL_ADC_ConfigChannel+0x168>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	fa02 f303 	lsl.w	r3, r2, r3
 80077a2:	e01d      	b.n	80077e0 <HAL_ADC_ConfigChannel+0x1a4>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <HAL_ADC_ConfigChannel+0x18e>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	695a      	ldr	r2, [r3, #20]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	089b      	lsrs	r3, r3, #2
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	fa02 f303 	lsl.w	r3, r2, r3
 80077c8:	e00a      	b.n	80077e0 <HAL_ADC_ConfigChannel+0x1a4>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	695a      	ldr	r2, [r3, #20]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	089b      	lsrs	r3, r3, #2
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d048      	beq.n	800787e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6818      	ldr	r0, [r3, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6919      	ldr	r1, [r3, #16]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077fc:	f7ff fb04 	bl	8006e08 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a42      	ldr	r2, [pc, #264]	@ (8007910 <HAL_ADC_ConfigChannel+0x2d4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d119      	bne.n	800783e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6919      	ldr	r1, [r3, #16]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	461a      	mov	r2, r3
 8007818:	f7ff fb9c 	bl	8006f54 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	6919      	ldr	r1, [r3, #16]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d102      	bne.n	8007834 <HAL_ADC_ConfigChannel+0x1f8>
 800782e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007832:	e000      	b.n	8007836 <HAL_ADC_ConfigChannel+0x1fa>
 8007834:	2300      	movs	r3, #0
 8007836:	461a      	mov	r2, r3
 8007838:	f7ff fb6a 	bl	8006f10 <LL_ADC_SetOffsetSaturation>
 800783c:	e1ee      	b.n	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6919      	ldr	r1, [r3, #16]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <HAL_ADC_ConfigChannel+0x21a>
 8007850:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007854:	e000      	b.n	8007858 <HAL_ADC_ConfigChannel+0x21c>
 8007856:	2300      	movs	r3, #0
 8007858:	461a      	mov	r2, r3
 800785a:	f7ff fb37 	bl	8006ecc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6919      	ldr	r1, [r3, #16]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	7e1b      	ldrb	r3, [r3, #24]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d102      	bne.n	8007874 <HAL_ADC_ConfigChannel+0x238>
 800786e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007872:	e000      	b.n	8007876 <HAL_ADC_ConfigChannel+0x23a>
 8007874:	2300      	movs	r3, #0
 8007876:	461a      	mov	r2, r3
 8007878:	f7ff fb0e 	bl	8006e98 <LL_ADC_SetDataRightShift>
 800787c:	e1ce      	b.n	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a23      	ldr	r2, [pc, #140]	@ (8007910 <HAL_ADC_ConfigChannel+0x2d4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	f040 8181 	bne.w	8007b8c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff faeb 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007896:	4603      	mov	r3, r0
 8007898:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <HAL_ADC_ConfigChannel+0x27a>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fae0 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 80078ac:	4603      	mov	r3, r0
 80078ae:	0e9b      	lsrs	r3, r3, #26
 80078b0:	f003 021f 	and.w	r2, r3, #31
 80078b4:	e01e      	b.n	80078f4 <HAL_ADC_ConfigChannel+0x2b8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fad5 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078cc:	fa93 f3a3 	rbit	r3, r3
 80078d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80078d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80078dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80078e4:	2320      	movs	r3, #32
 80078e6:	e004      	b.n	80078f2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80078e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078ec:	fab3 f383 	clz	r3, r3
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x2dc>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	0e9b      	lsrs	r3, r3, #26
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	e01e      	b.n	800794a <HAL_ADC_ConfigChannel+0x30e>
 800790c:	47ff0000 	.word	0x47ff0000
 8007910:	58026000 	.word	0x58026000
 8007914:	5c001000 	.word	0x5c001000
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007924:	fa93 f3a3 	rbit	r3, r3
 8007928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800792c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8007934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800793c:	2320      	movs	r3, #32
 800793e:	e004      	b.n	800794a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8007940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007944:	fab3 f383 	clz	r3, r3
 8007948:	b2db      	uxtb	r3, r3
 800794a:	429a      	cmp	r2, r3
 800794c:	d106      	bne.n	800795c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff fb1e 	bl	8006f98 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2101      	movs	r1, #1
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fa82 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007968:	4603      	mov	r3, r0
 800796a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <HAL_ADC_ConfigChannel+0x34c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fa77 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 800797e:	4603      	mov	r3, r0
 8007980:	0e9b      	lsrs	r3, r3, #26
 8007982:	f003 021f 	and.w	r2, r3, #31
 8007986:	e01e      	b.n	80079c6 <HAL_ADC_ConfigChannel+0x38a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff fa6c 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007994:	4603      	mov	r3, r0
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800799e:	fa93 f3a3 	rbit	r3, r3
 80079a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80079a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80079ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80079b6:	2320      	movs	r3, #32
 80079b8:	e004      	b.n	80079c4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80079ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079be:	fab3 f383 	clz	r3, r3
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <HAL_ADC_ConfigChannel+0x3a2>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	0e9b      	lsrs	r3, r3, #26
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	e018      	b.n	8007a10 <HAL_ADC_ConfigChannel+0x3d4>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079ea:	fa93 f3a3 	rbit	r3, r3
 80079ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80079f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80079fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8007a02:	2320      	movs	r3, #32
 8007a04:	e004      	b.n	8007a10 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8007a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a0a:	fab3 f383 	clz	r3, r3
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d106      	bne.n	8007a22 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fabb 	bl	8006f98 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2102      	movs	r1, #2
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fa1f 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <HAL_ADC_ConfigChannel+0x412>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2102      	movs	r1, #2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fa14 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007a44:	4603      	mov	r3, r0
 8007a46:	0e9b      	lsrs	r3, r3, #26
 8007a48:	f003 021f 	and.w	r2, r3, #31
 8007a4c:	e01e      	b.n	8007a8c <HAL_ADC_ConfigChannel+0x450>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2102      	movs	r1, #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fa09 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a64:	fa93 f3a3 	rbit	r3, r3
 8007a68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8007a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8007a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	e004      	b.n	8007a8a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8007a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a84:	fab3 f383 	clz	r3, r3
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <HAL_ADC_ConfigChannel+0x468>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	0e9b      	lsrs	r3, r3, #26
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	e014      	b.n	8007ace <HAL_ADC_ConfigChannel+0x492>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aac:	fa93 f3a3 	rbit	r3, r3
 8007ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8007ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	e004      	b.n	8007ace <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ac8:	fab3 f383 	clz	r3, r3
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d106      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fa5c 	bl	8006f98 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2103      	movs	r1, #3
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff f9c0 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <HAL_ADC_ConfigChannel+0x4d0>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2103      	movs	r1, #3
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff f9b5 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007b02:	4603      	mov	r3, r0
 8007b04:	0e9b      	lsrs	r3, r3, #26
 8007b06:	f003 021f 	and.w	r2, r3, #31
 8007b0a:	e017      	b.n	8007b3c <HAL_ADC_ConfigChannel+0x500>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2103      	movs	r1, #3
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff f9aa 	bl	8006e6c <LL_ADC_GetOffsetChannel>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b1e:	fa93 f3a3 	rbit	r3, r3
 8007b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b26:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8007b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8007b2e:	2320      	movs	r3, #32
 8007b30:	e003      	b.n	8007b3a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8007b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b34:	fab3 f383 	clz	r3, r3
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <HAL_ADC_ConfigChannel+0x518>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	0e9b      	lsrs	r3, r3, #26
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	e011      	b.n	8007b78 <HAL_ADC_ConfigChannel+0x53c>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5c:	fa93 f3a3 	rbit	r3, r3
 8007b60:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8007b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8007b66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	e003      	b.n	8007b78 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8007b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b72:	fab3 f383 	clz	r3, r3
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d14f      	bne.n	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2200      	movs	r2, #0
 8007b82:	2103      	movs	r1, #3
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fa07 	bl	8006f98 <LL_ADC_SetOffsetState>
 8007b8a:	e047      	b.n	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	069b      	lsls	r3, r3, #26
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d107      	bne.n	8007bb0 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bae:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	069b      	lsls	r3, r3, #26
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d107      	bne.n	8007bd4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bd2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	069b      	lsls	r3, r3, #26
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d107      	bne.n	8007bf8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007bf6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	069b      	lsls	r3, r3, #26
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d107      	bne.n	8007c1c <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fac9 	bl	80071b8 <LL_ADC_IsEnabled>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 8219 	bne.w	8008060 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f7ff fa2e 	bl	800709c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4aa1      	ldr	r2, [pc, #644]	@ (8007ecc <HAL_ADC_ConfigChannel+0x890>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f040 812e 	bne.w	8007ea8 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <HAL_ADC_ConfigChannel+0x638>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	0e9b      	lsrs	r3, r3, #26
 8007c62:	3301      	adds	r3, #1
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	2b09      	cmp	r3, #9
 8007c6a:	bf94      	ite	ls
 8007c6c:	2301      	movls	r3, #1
 8007c6e:	2300      	movhi	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e019      	b.n	8007ca8 <HAL_ADC_ConfigChannel+0x66c>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c7c:	fa93 f3a3 	rbit	r3, r3
 8007c80:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8007c8c:	2320      	movs	r3, #32
 8007c8e:	e003      	b.n	8007c98 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8007c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c92:	fab3 f383 	clz	r3, r3
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	bf94      	ite	ls
 8007ca2:	2301      	movls	r3, #1
 8007ca4:	2300      	movhi	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d079      	beq.n	8007da0 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_ADC_ConfigChannel+0x68c>
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	0e9b      	lsrs	r3, r3, #26
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	069b      	lsls	r3, r3, #26
 8007cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cc6:	e015      	b.n	8007cf4 <HAL_ADC_ConfigChannel+0x6b8>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd0:	fa93 f3a3 	rbit	r3, r3
 8007cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8007cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8007cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	e003      	b.n	8007cec <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce6:	fab3 f383 	clz	r3, r3
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	069b      	lsls	r3, r3, #26
 8007cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d109      	bne.n	8007d14 <HAL_ADC_ConfigChannel+0x6d8>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	0e9b      	lsrs	r3, r3, #26
 8007d06:	3301      	adds	r3, #1
 8007d08:	f003 031f 	and.w	r3, r3, #31
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	e017      	b.n	8007d44 <HAL_ADC_ConfigChannel+0x708>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d1c:	fa93 f3a3 	rbit	r3, r3
 8007d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d24:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	e003      	b.n	8007d38 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8007d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d32:	fab3 f383 	clz	r3, r3
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f003 031f 	and.w	r3, r3, #31
 8007d3e:	2101      	movs	r1, #1
 8007d40:	fa01 f303 	lsl.w	r3, r1, r3
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10a      	bne.n	8007d6a <HAL_ADC_ConfigChannel+0x72e>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0e9b      	lsrs	r3, r3, #26
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	f003 021f 	and.w	r2, r3, #31
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	051b      	lsls	r3, r3, #20
 8007d68:	e018      	b.n	8007d9c <HAL_ADC_ConfigChannel+0x760>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d72:	fa93 f3a3 	rbit	r3, r3
 8007d76:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8007d82:	2320      	movs	r3, #32
 8007d84:	e003      	b.n	8007d8e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	fab3 f383 	clz	r3, r3
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f003 021f 	and.w	r2, r3, #31
 8007d94:	4613      	mov	r3, r2
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	4413      	add	r3, r2
 8007d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	e07e      	b.n	8007e9e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d107      	bne.n	8007dbc <HAL_ADC_ConfigChannel+0x780>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	0e9b      	lsrs	r3, r3, #26
 8007db2:	3301      	adds	r3, #1
 8007db4:	069b      	lsls	r3, r3, #26
 8007db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007dba:	e015      	b.n	8007de8 <HAL_ADC_ConfigChannel+0x7ac>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	fa93 f3a3 	rbit	r3, r3
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	e003      	b.n	8007de0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8007dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dda:	fab3 f383 	clz	r3, r3
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	3301      	adds	r3, #1
 8007de2:	069b      	lsls	r3, r3, #26
 8007de4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_ADC_ConfigChannel+0x7cc>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	0e9b      	lsrs	r3, r3, #26
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	2101      	movs	r1, #1
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	e017      	b.n	8007e38 <HAL_ADC_ConfigChannel+0x7fc>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	fa93 f3a3 	rbit	r3, r3
 8007e14:	61bb      	str	r3, [r7, #24]
  return result;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8007e20:	2320      	movs	r3, #32
 8007e22:	e003      	b.n	8007e2c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	fab3 f383 	clz	r3, r3
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2101      	movs	r1, #1
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	ea42 0103 	orr.w	r1, r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10d      	bne.n	8007e64 <HAL_ADC_ConfigChannel+0x828>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	0e9b      	lsrs	r3, r3, #26
 8007e4e:	3301      	adds	r3, #1
 8007e50:	f003 021f 	and.w	r2, r3, #31
 8007e54:	4613      	mov	r3, r2
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	4413      	add	r3, r2
 8007e5a:	3b1e      	subs	r3, #30
 8007e5c:	051b      	lsls	r3, r3, #20
 8007e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007e62:	e01b      	b.n	8007e9c <HAL_ADC_ConfigChannel+0x860>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	fa93 f3a3 	rbit	r3, r3
 8007e70:	60fb      	str	r3, [r7, #12]
  return result;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	e003      	b.n	8007e88 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	fab3 f383 	clz	r3, r3
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f003 021f 	and.w	r2, r3, #31
 8007e8e:	4613      	mov	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4413      	add	r3, r2
 8007e94:	3b1e      	subs	r3, #30
 8007e96:	051b      	lsls	r3, r3, #20
 8007e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	6892      	ldr	r2, [r2, #8]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f7ff f8ce 	bl	8007044 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f280 80d7 	bge.w	8008060 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a06      	ldr	r2, [pc, #24]	@ (8007ed0 <HAL_ADC_ConfigChannel+0x894>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_ADC_ConfigChannel+0x88a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a04      	ldr	r2, [pc, #16]	@ (8007ed4 <HAL_ADC_ConfigChannel+0x898>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10a      	bne.n	8007edc <HAL_ADC_ConfigChannel+0x8a0>
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <HAL_ADC_ConfigChannel+0x89c>)
 8007ec8:	e009      	b.n	8007ede <HAL_ADC_ConfigChannel+0x8a2>
 8007eca:	bf00      	nop
 8007ecc:	47ff0000 	.word	0x47ff0000
 8007ed0:	40022000 	.word	0x40022000
 8007ed4:	40022100 	.word	0x40022100
 8007ed8:	40022300 	.word	0x40022300
 8007edc:	4b65      	ldr	r3, [pc, #404]	@ (8008074 <HAL_ADC_ConfigChannel+0xa38>)
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe ff84 	bl	8006dec <LL_ADC_GetCommonPathInternalCh>
 8007ee4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a62      	ldr	r2, [pc, #392]	@ (8008078 <HAL_ADC_ConfigChannel+0xa3c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_ADC_ConfigChannel+0x8c0>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a61      	ldr	r2, [pc, #388]	@ (800807c <HAL_ADC_ConfigChannel+0xa40>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d10e      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x8de>
 8007efc:	485e      	ldr	r0, [pc, #376]	@ (8008078 <HAL_ADC_ConfigChannel+0xa3c>)
 8007efe:	f7ff f95b 	bl	80071b8 <LL_ADC_IsEnabled>
 8007f02:	4604      	mov	r4, r0
 8007f04:	485d      	ldr	r0, [pc, #372]	@ (800807c <HAL_ADC_ConfigChannel+0xa40>)
 8007f06:	f7ff f957 	bl	80071b8 <LL_ADC_IsEnabled>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	bf0c      	ite	eq
 8007f12:	2301      	moveq	r3, #1
 8007f14:	2300      	movne	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e008      	b.n	8007f2c <HAL_ADC_ConfigChannel+0x8f0>
 8007f1a:	4859      	ldr	r0, [pc, #356]	@ (8008080 <HAL_ADC_ConfigChannel+0xa44>)
 8007f1c:	f7ff f94c 	bl	80071b8 <LL_ADC_IsEnabled>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bf0c      	ite	eq
 8007f26:	2301      	moveq	r3, #1
 8007f28:	2300      	movne	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8084 	beq.w	800803a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a53      	ldr	r2, [pc, #332]	@ (8008084 <HAL_ADC_ConfigChannel+0xa48>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d132      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x966>
 8007f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d12c      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8008080 <HAL_ADC_ConfigChannel+0xa44>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	f040 8086 	bne.w	8008060 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a47      	ldr	r2, [pc, #284]	@ (8008078 <HAL_ADC_ConfigChannel+0xa3c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_ADC_ConfigChannel+0x92c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a46      	ldr	r2, [pc, #280]	@ (800807c <HAL_ADC_ConfigChannel+0xa40>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d101      	bne.n	8007f6c <HAL_ADC_ConfigChannel+0x930>
 8007f68:	4a47      	ldr	r2, [pc, #284]	@ (8008088 <HAL_ADC_ConfigChannel+0xa4c>)
 8007f6a:	e000      	b.n	8007f6e <HAL_ADC_ConfigChannel+0x932>
 8007f6c:	4a41      	ldr	r2, [pc, #260]	@ (8008074 <HAL_ADC_ConfigChannel+0xa38>)
 8007f6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f7fe ff24 	bl	8006dc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007f7e:	4b43      	ldr	r3, [pc, #268]	@ (800808c <HAL_ADC_ConfigChannel+0xa50>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	099b      	lsrs	r3, r3, #6
 8007f84:	4a42      	ldr	r2, [pc, #264]	@ (8008090 <HAL_ADC_ConfigChannel+0xa54>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	099b      	lsrs	r3, r3, #6
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	005b      	lsls	r3, r3, #1
 8007f90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f92:	e002      	b.n	8007f9a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f9      	bne.n	8007f94 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007fa0:	e05e      	b.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8008094 <HAL_ADC_ConfigChannel+0xa58>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d120      	bne.n	8007fee <HAL_ADC_ConfigChannel+0x9b2>
 8007fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11a      	bne.n	8007fee <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a30      	ldr	r2, [pc, #192]	@ (8008080 <HAL_ADC_ConfigChannel+0xa44>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d14e      	bne.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8008078 <HAL_ADC_ConfigChannel+0xa3c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d004      	beq.n	8007fd6 <HAL_ADC_ConfigChannel+0x99a>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800807c <HAL_ADC_ConfigChannel+0xa40>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d101      	bne.n	8007fda <HAL_ADC_ConfigChannel+0x99e>
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008088 <HAL_ADC_ConfigChannel+0xa4c>)
 8007fd8:	e000      	b.n	8007fdc <HAL_ADC_ConfigChannel+0x9a0>
 8007fda:	4a26      	ldr	r2, [pc, #152]	@ (8008074 <HAL_ADC_ConfigChannel+0xa38>)
 8007fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fe0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	f7fe feed 	bl	8006dc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007fec:	e038      	b.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a29      	ldr	r2, [pc, #164]	@ (8008098 <HAL_ADC_ConfigChannel+0xa5c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d133      	bne.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
 8007ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d12d      	bne.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1d      	ldr	r2, [pc, #116]	@ (8008080 <HAL_ADC_ConfigChannel+0xa44>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d128      	bne.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <HAL_ADC_ConfigChannel+0xa3c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d004      	beq.n	8008022 <HAL_ADC_ConfigChannel+0x9e6>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a17      	ldr	r2, [pc, #92]	@ (800807c <HAL_ADC_ConfigChannel+0xa40>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d101      	bne.n	8008026 <HAL_ADC_ConfigChannel+0x9ea>
 8008022:	4a19      	ldr	r2, [pc, #100]	@ (8008088 <HAL_ADC_ConfigChannel+0xa4c>)
 8008024:	e000      	b.n	8008028 <HAL_ADC_ConfigChannel+0x9ec>
 8008026:	4a13      	ldr	r2, [pc, #76]	@ (8008074 <HAL_ADC_ConfigChannel+0xa38>)
 8008028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800802c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f7fe fec7 	bl	8006dc6 <LL_ADC_SetCommonPathInternalCh>
 8008038:	e012      	b.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800803e:	f043 0220 	orr.w	r2, r3, #32
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800804c:	e008      	b.n	8008060 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008068:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800806c:	4618      	mov	r0, r3
 800806e:	37e4      	adds	r7, #228	@ 0xe4
 8008070:	46bd      	mov	sp, r7
 8008072:	bd90      	pop	{r4, r7, pc}
 8008074:	58026300 	.word	0x58026300
 8008078:	40022000 	.word	0x40022000
 800807c:	40022100 	.word	0x40022100
 8008080:	58026000 	.word	0x58026000
 8008084:	c7520000 	.word	0xc7520000
 8008088:	40022300 	.word	0x40022300
 800808c:	24000000 	.word	0x24000000
 8008090:	053e2d63 	.word	0x053e2d63
 8008094:	c3210000 	.word	0xc3210000
 8008098:	cb840000 	.word	0xcb840000

0800809c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a6c      	ldr	r2, [pc, #432]	@ (800825c <ADC_ConfigureBoostMode+0x1c0>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <ADC_ConfigureBoostMode+0x1c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a6b      	ldr	r2, [pc, #428]	@ (8008260 <ADC_ConfigureBoostMode+0x1c4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d109      	bne.n	80080cc <ADC_ConfigureBoostMode+0x30>
 80080b8:	4b6a      	ldr	r3, [pc, #424]	@ (8008264 <ADC_ConfigureBoostMode+0x1c8>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bf14      	ite	ne
 80080c4:	2301      	movne	r3, #1
 80080c6:	2300      	moveq	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	e008      	b.n	80080de <ADC_ConfigureBoostMode+0x42>
 80080cc:	4b66      	ldr	r3, [pc, #408]	@ (8008268 <ADC_ConfigureBoostMode+0x1cc>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	bf14      	ite	ne
 80080d8:	2301      	movne	r3, #1
 80080da:	2300      	moveq	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d01c      	beq.n	800811c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80080e2:	f005 fbff 	bl	800d8e4 <HAL_RCC_GetHCLKFreq>
 80080e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080f0:	d010      	beq.n	8008114 <ADC_ConfigureBoostMode+0x78>
 80080f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80080f6:	d873      	bhi.n	80081e0 <ADC_ConfigureBoostMode+0x144>
 80080f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080fc:	d002      	beq.n	8008104 <ADC_ConfigureBoostMode+0x68>
 80080fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008102:	d16d      	bne.n	80081e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	0c1b      	lsrs	r3, r3, #16
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	60fb      	str	r3, [r7, #12]
        break;
 8008112:	e068      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	089b      	lsrs	r3, r3, #2
 8008118:	60fb      	str	r3, [r7, #12]
        break;
 800811a:	e064      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800811c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008120:	f04f 0100 	mov.w	r1, #0
 8008124:	f006 fdda 	bl	800ecdc <HAL_RCCEx_GetPeriphCLKFreq>
 8008128:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008132:	d051      	beq.n	80081d8 <ADC_ConfigureBoostMode+0x13c>
 8008134:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8008138:	d854      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 800813a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800813e:	d047      	beq.n	80081d0 <ADC_ConfigureBoostMode+0x134>
 8008140:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8008144:	d84e      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 8008146:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800814a:	d03d      	beq.n	80081c8 <ADC_ConfigureBoostMode+0x12c>
 800814c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8008150:	d848      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 8008152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008156:	d033      	beq.n	80081c0 <ADC_ConfigureBoostMode+0x124>
 8008158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800815c:	d842      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 800815e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008162:	d029      	beq.n	80081b8 <ADC_ConfigureBoostMode+0x11c>
 8008164:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8008168:	d83c      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 800816a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800816e:	d01a      	beq.n	80081a6 <ADC_ConfigureBoostMode+0x10a>
 8008170:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008174:	d836      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 8008176:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800817a:	d014      	beq.n	80081a6 <ADC_ConfigureBoostMode+0x10a>
 800817c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008180:	d830      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 8008182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008186:	d00e      	beq.n	80081a6 <ADC_ConfigureBoostMode+0x10a>
 8008188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800818c:	d82a      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 800818e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008192:	d008      	beq.n	80081a6 <ADC_ConfigureBoostMode+0x10a>
 8008194:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008198:	d824      	bhi.n	80081e4 <ADC_ConfigureBoostMode+0x148>
 800819a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800819e:	d002      	beq.n	80081a6 <ADC_ConfigureBoostMode+0x10a>
 80081a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80081a4:	d11e      	bne.n	80081e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	0c9b      	lsrs	r3, r3, #18
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	60fb      	str	r3, [r7, #12]
        break;
 80081b6:	e016      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	091b      	lsrs	r3, r3, #4
 80081bc:	60fb      	str	r3, [r7, #12]
        break;
 80081be:	e012      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	60fb      	str	r3, [r7, #12]
        break;
 80081c6:	e00e      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	099b      	lsrs	r3, r3, #6
 80081cc:	60fb      	str	r3, [r7, #12]
        break;
 80081ce:	e00a      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	09db      	lsrs	r3, r3, #7
 80081d4:	60fb      	str	r3, [r7, #12]
        break;
 80081d6:	e006      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	60fb      	str	r3, [r7, #12]
        break;
 80081de:	e002      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80081e0:	bf00      	nop
 80081e2:	e000      	b.n	80081e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80081e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a1f      	ldr	r2, [pc, #124]	@ (800826c <ADC_ConfigureBoostMode+0x1d0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d808      	bhi.n	8008206 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008202:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008204:	e025      	b.n	8008252 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <ADC_ConfigureBoostMode+0x1d4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d80a      	bhi.n	8008224 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008220:	609a      	str	r2, [r3, #8]
}
 8008222:	e016      	b.n	8008252 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a13      	ldr	r2, [pc, #76]	@ (8008274 <ADC_ConfigureBoostMode+0x1d8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d80a      	bhi.n	8008242 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	e007      	b.n	8008252 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008250:	609a      	str	r2, [r3, #8]
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40022000 	.word	0x40022000
 8008260:	40022100 	.word	0x40022100
 8008264:	40022300 	.word	0x40022300
 8008268:	58026300 	.word	0x58026300
 800826c:	005f5e10 	.word	0x005f5e10
 8008270:	00bebc20 	.word	0x00bebc20
 8008274:	017d7840 	.word	0x017d7840

08008278 <LL_ADC_IsEnabled>:
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <LL_ADC_IsEnabled+0x18>
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <LL_ADC_IsEnabled+0x1a>
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <LL_ADC_REG_IsConversionOngoing>:
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d101      	bne.n	80082b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b0a3      	sub	sp, #140	@ 0x8c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80082de:	2302      	movs	r3, #2
 80082e0:	e0c1      	b.n	8008466 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80082ea:	2300      	movs	r3, #0
 80082ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80082ee:	2300      	movs	r3, #0
 80082f0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d102      	bne.n	8008302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80082fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e001      	b.n	8008306 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008310:	f043 0220 	orr.w	r2, r3, #32
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e0a0      	b.n	8008466 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff ffb9 	bl	800829e <LL_ADC_REG_IsConversionOngoing>
 800832c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff ffb2 	bl	800829e <LL_ADC_REG_IsConversionOngoing>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 8081 	bne.w	8008444 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008346:	2b00      	cmp	r3, #0
 8008348:	d17c      	bne.n	8008444 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a48      	ldr	r2, [pc, #288]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d004      	beq.n	800835e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a46      	ldr	r2, [pc, #280]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d101      	bne.n	8008362 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800835e:	4b46      	ldr	r3, [pc, #280]	@ (8008478 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008360:	e000      	b.n	8008364 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008362:	4b46      	ldr	r3, [pc, #280]	@ (800847c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008364:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d039      	beq.n	80083e2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800836e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	431a      	orrs	r2, r3
 800837c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800837e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a3a      	ldr	r2, [pc, #232]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d004      	beq.n	8008394 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a39      	ldr	r2, [pc, #228]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10e      	bne.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008394:	4836      	ldr	r0, [pc, #216]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008396:	f7ff ff6f 	bl	8008278 <LL_ADC_IsEnabled>
 800839a:	4604      	mov	r4, r0
 800839c:	4835      	ldr	r0, [pc, #212]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800839e:	f7ff ff6b 	bl	8008278 <LL_ADC_IsEnabled>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4323      	orrs	r3, r4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bf0c      	ite	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	2300      	movne	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	e008      	b.n	80083c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80083b2:	4833      	ldr	r0, [pc, #204]	@ (8008480 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80083b4:	f7ff ff60 	bl	8008278 <LL_ADC_IsEnabled>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d047      	beq.n	8008458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80083c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008484 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80083ce:	4013      	ands	r3, r2
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	6811      	ldr	r1, [r2, #0]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	6892      	ldr	r2, [r2, #8]
 80083d8:	430a      	orrs	r2, r1
 80083da:	431a      	orrs	r2, r3
 80083dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80083e0:	e03a      	b.n	8008458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80083e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80083ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d10e      	bne.n	8008420 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008402:	481b      	ldr	r0, [pc, #108]	@ (8008470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008404:	f7ff ff38 	bl	8008278 <LL_ADC_IsEnabled>
 8008408:	4604      	mov	r4, r0
 800840a:	481a      	ldr	r0, [pc, #104]	@ (8008474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800840c:	f7ff ff34 	bl	8008278 <LL_ADC_IsEnabled>
 8008410:	4603      	mov	r3, r0
 8008412:	4323      	orrs	r3, r4
 8008414:	2b00      	cmp	r3, #0
 8008416:	bf0c      	ite	eq
 8008418:	2301      	moveq	r3, #1
 800841a:	2300      	movne	r3, #0
 800841c:	b2db      	uxtb	r3, r3
 800841e:	e008      	b.n	8008432 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008420:	4817      	ldr	r0, [pc, #92]	@ (8008480 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008422:	f7ff ff29 	bl	8008278 <LL_ADC_IsEnabled>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	bf0c      	ite	eq
 800842c:	2301      	moveq	r3, #1
 800842e:	2300      	movne	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d010      	beq.n	8008458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008436:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800843c:	4013      	ands	r3, r2
 800843e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008440:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008442:	e009      	b.n	8008458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8008456:	e000      	b.n	800845a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008458:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008462:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8008466:	4618      	mov	r0, r3
 8008468:	378c      	adds	r7, #140	@ 0x8c
 800846a:	46bd      	mov	sp, r7
 800846c:	bd90      	pop	{r4, r7, pc}
 800846e:	bf00      	nop
 8008470:	40022000 	.word	0x40022000
 8008474:	40022100 	.word	0x40022100
 8008478:	40022300 	.word	0x40022300
 800847c:	58026300 	.word	0x58026300
 8008480:	58026000 	.word	0x58026000
 8008484:	fffff0e0 	.word	0xfffff0e0

08008488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008498:	4b0b      	ldr	r3, [pc, #44]	@ (80084c8 <__NVIC_SetPriorityGrouping+0x40>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084a4:	4013      	ands	r3, r2
 80084a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <__NVIC_SetPriorityGrouping+0x44>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80084b6:	4a04      	ldr	r2, [pc, #16]	@ (80084c8 <__NVIC_SetPriorityGrouping+0x40>)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	60d3      	str	r3, [r2, #12]
}
 80084bc:	bf00      	nop
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	e000ed00 	.word	0xe000ed00
 80084cc:	05fa0000 	.word	0x05fa0000

080084d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <__NVIC_GetPriorityGrouping+0x18>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	f003 0307 	and.w	r3, r3, #7
}
 80084de:	4618      	mov	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	e000ed00 	.word	0xe000ed00

080084ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80084f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	db0b      	blt.n	8008516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	f003 021f 	and.w	r2, r3, #31
 8008504:	4907      	ldr	r1, [pc, #28]	@ (8008524 <__NVIC_EnableIRQ+0x38>)
 8008506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	2001      	movs	r0, #1
 800850e:	fa00 f202 	lsl.w	r2, r0, r2
 8008512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	e000e100 	.word	0xe000e100

08008528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008538:	2b00      	cmp	r3, #0
 800853a:	db0a      	blt.n	8008552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	490c      	ldr	r1, [pc, #48]	@ (8008574 <__NVIC_SetPriority+0x4c>)
 8008542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008546:	0112      	lsls	r2, r2, #4
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	440b      	add	r3, r1
 800854c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008550:	e00a      	b.n	8008568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	4908      	ldr	r1, [pc, #32]	@ (8008578 <__NVIC_SetPriority+0x50>)
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	3b04      	subs	r3, #4
 8008560:	0112      	lsls	r2, r2, #4
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	440b      	add	r3, r1
 8008566:	761a      	strb	r2, [r3, #24]
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	e000e100 	.word	0xe000e100
 8008578:	e000ed00 	.word	0xe000ed00

0800857c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	@ 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f1c3 0307 	rsb	r3, r3, #7
 8008596:	2b04      	cmp	r3, #4
 8008598:	bf28      	it	cs
 800859a:	2304      	movcs	r3, #4
 800859c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	3304      	adds	r3, #4
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d902      	bls.n	80085ac <NVIC_EncodePriority+0x30>
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3b03      	subs	r3, #3
 80085aa:	e000      	b.n	80085ae <NVIC_EncodePriority+0x32>
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	43da      	mvns	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	401a      	ands	r2, r3
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80085c4:	f04f 31ff 	mov.w	r1, #4294967295
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	fa01 f303 	lsl.w	r3, r1, r3
 80085ce:	43d9      	mvns	r1, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085d4:	4313      	orrs	r3, r2
         );
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3724      	adds	r7, #36	@ 0x24
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085f4:	d301      	bcc.n	80085fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085f6:	2301      	movs	r3, #1
 80085f8:	e00f      	b.n	800861a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008624 <SysTick_Config+0x40>)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3b01      	subs	r3, #1
 8008600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008602:	210f      	movs	r1, #15
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	f7ff ff8e 	bl	8008528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800860c:	4b05      	ldr	r3, [pc, #20]	@ (8008624 <SysTick_Config+0x40>)
 800860e:	2200      	movs	r2, #0
 8008610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008612:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <SysTick_Config+0x40>)
 8008614:	2207      	movs	r2, #7
 8008616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	e000e010 	.word	0xe000e010

08008628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ff29 	bl	8008488 <__NVIC_SetPriorityGrouping>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b086      	sub	sp, #24
 8008642:	af00      	add	r7, sp, #0
 8008644:	4603      	mov	r3, r0
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
 800864a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800864c:	f7ff ff40 	bl	80084d0 <__NVIC_GetPriorityGrouping>
 8008650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	f7ff ff90 	bl	800857c <NVIC_EncodePriority>
 800865c:	4602      	mov	r2, r0
 800865e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff ff5f 	bl	8008528 <__NVIC_SetPriority>
}
 800866a:	bf00      	nop
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	4603      	mov	r3, r0
 800867a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800867c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ff33 	bl	80084ec <__NVIC_EnableIRQ>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff ffa4 	bl	80085e4 <SysTick_Config>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80086ac:	f3bf 8f5f 	dmb	sy
}
 80086b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80086b2:	4b07      	ldr	r3, [pc, #28]	@ (80086d0 <HAL_MPU_Disable+0x28>)
 80086b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b6:	4a06      	ldr	r2, [pc, #24]	@ (80086d0 <HAL_MPU_Disable+0x28>)
 80086b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80086be:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <HAL_MPU_Disable+0x2c>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	605a      	str	r2, [r3, #4]
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	e000ed00 	.word	0xe000ed00
 80086d4:	e000ed90 	.word	0xe000ed90

080086d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80086e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008710 <HAL_MPU_Enable+0x38>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80086ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008714 <HAL_MPU_Enable+0x3c>)
 80086ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ee:	4a09      	ldr	r2, [pc, #36]	@ (8008714 <HAL_MPU_Enable+0x3c>)
 80086f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80086f6:	f3bf 8f4f 	dsb	sy
}
 80086fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086fc:	f3bf 8f6f 	isb	sy
}
 8008700:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	e000ed90 	.word	0xe000ed90
 8008714:	e000ed00 	.word	0xe000ed00

08008718 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	785a      	ldrb	r2, [r3, #1]
 8008724:	4b1b      	ldr	r3, [pc, #108]	@ (8008794 <HAL_MPU_ConfigRegion+0x7c>)
 8008726:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008728:	4b1a      	ldr	r3, [pc, #104]	@ (8008794 <HAL_MPU_ConfigRegion+0x7c>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	4a19      	ldr	r2, [pc, #100]	@ (8008794 <HAL_MPU_ConfigRegion+0x7c>)
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8008734:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <HAL_MPU_ConfigRegion+0x7c>)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7b1b      	ldrb	r3, [r3, #12]
 8008740:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	7adb      	ldrb	r3, [r3, #11]
 8008746:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	7a9b      	ldrb	r3, [r3, #10]
 800874e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7b5b      	ldrb	r3, [r3, #13]
 8008756:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7b9b      	ldrb	r3, [r3, #14]
 800875e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7bdb      	ldrb	r3, [r3, #15]
 8008766:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7a5b      	ldrb	r3, [r3, #9]
 800876e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7a1b      	ldrb	r3, [r3, #8]
 8008776:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008778:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008780:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008782:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008784:	6113      	str	r3, [r2, #16]
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	e000ed90 	.word	0xe000ed90

08008798 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e014      	b.n	80087d4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	791b      	ldrb	r3, [r3, #4]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7f9 fe04 	bl	80023c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e0a2      	b.n	800893a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	795b      	ldrb	r3, [r3, #5]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_DAC_Start_DMA+0x24>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e09c      	b.n	800893a <HAL_DAC_Start_DMA+0x15e>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2202      	movs	r2, #2
 800880a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d129      	bne.n	8008866 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	4a4b      	ldr	r2, [pc, #300]	@ (8008944 <HAL_DAC_Start_DMA+0x168>)
 8008818:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	4a4a      	ldr	r2, [pc, #296]	@ (8008948 <HAL_DAC_Start_DMA+0x16c>)
 8008820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	4a49      	ldr	r2, [pc, #292]	@ (800894c <HAL_DAC_Start_DMA+0x170>)
 8008828:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008838:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_DAC_Start_DMA+0x6c>
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	2b04      	cmp	r3, #4
 8008844:	d005      	beq.n	8008852 <HAL_DAC_Start_DMA+0x76>
 8008846:	e009      	b.n	800885c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	613b      	str	r3, [r7, #16]
        break;
 8008850:	e033      	b.n	80088ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	330c      	adds	r3, #12
 8008858:	613b      	str	r3, [r7, #16]
        break;
 800885a:	e02e      	b.n	80088ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3310      	adds	r3, #16
 8008862:	613b      	str	r3, [r7, #16]
        break;
 8008864:	e029      	b.n	80088ba <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4a39      	ldr	r2, [pc, #228]	@ (8008950 <HAL_DAC_Start_DMA+0x174>)
 800886c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	4a38      	ldr	r2, [pc, #224]	@ (8008954 <HAL_DAC_Start_DMA+0x178>)
 8008874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	4a37      	ldr	r2, [pc, #220]	@ (8008958 <HAL_DAC_Start_DMA+0x17c>)
 800887c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800888c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_DAC_Start_DMA+0xc0>
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	2b04      	cmp	r3, #4
 8008898:	d005      	beq.n	80088a6 <HAL_DAC_Start_DMA+0xca>
 800889a:	e009      	b.n	80088b0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	613b      	str	r3, [r7, #16]
        break;
 80088a4:	e009      	b.n	80088ba <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3318      	adds	r3, #24
 80088ac:	613b      	str	r3, [r7, #16]
        break;
 80088ae:	e004      	b.n	80088ba <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	331c      	adds	r3, #28
 80088b6:	613b      	str	r3, [r7, #16]
        break;
 80088b8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d111      	bne.n	80088e4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6898      	ldr	r0, [r3, #8]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	f000 fd6d 	bl	80093b8 <HAL_DMA_Start_IT>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
 80088e2:	e010      	b.n	8008906 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80088f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68d8      	ldr	r0, [r3, #12]
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	f000 fd5b 	bl	80093b8 <HAL_DMA_Start_IT>
 8008902:	4603      	mov	r3, r0
 8008904:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10c      	bne.n	800892c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6819      	ldr	r1, [r3, #0]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2201      	movs	r2, #1
 8008920:	409a      	lsls	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e005      	b.n	8008938 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f043 0204 	orr.w	r2, r3, #4
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	08008bf5 	.word	0x08008bf5
 8008948:	08008c17 	.word	0x08008c17
 800894c:	08008c33 	.word	0x08008c33
 8008950:	08008c9d 	.word	0x08008c9d
 8008954:	08008cbf 	.word	0x08008cbf
 8008958:	08008cdb 	.word	0x08008cdb

0800895c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	@ 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <HAL_DAC_ConfigChannel+0x1e>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e12a      	b.n	8008be8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	795b      	ldrb	r3, [r3, #5]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_DAC_ConfigChannel+0x2e>
 800899a:	2302      	movs	r3, #2
 800899c:	e124      	b.n	8008be8 <HAL_DAC_ConfigChannel+0x278>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2202      	movs	r2, #2
 80089a8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d17a      	bne.n	8008aa8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80089b2:	f7fe f9c5 	bl	8006d40 <HAL_GetTick>
 80089b6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d13d      	bne.n	8008a3a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089be:	e018      	b.n	80089f2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089c0:	f7fe f9be 	bl	8006d40 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d911      	bls.n	80089f2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089d4:	4b86      	ldr	r3, [pc, #536]	@ (8008bf0 <HAL_DAC_ConfigChannel+0x280>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f043 0208 	orr.w	r2, r3, #8
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2203      	movs	r2, #3
 80089ec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e0fa      	b.n	8008be8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f8:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf0 <HAL_DAC_ConfigChannel+0x280>)
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1df      	bne.n	80089c0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	6992      	ldr	r2, [r2, #24]
 8008a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a0a:	e020      	b.n	8008a4e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008a0c:	f7fe f998 	bl	8006d40 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d90f      	bls.n	8008a3a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da0a      	bge.n	8008a3a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f043 0208 	orr.w	r2, r3, #8
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2203      	movs	r2, #3
 8008a34:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e0d6      	b.n	8008be8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dbe3      	blt.n	8008a0c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	6992      	ldr	r2, [r2, #24]
 8008a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8008a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	ea02 0103 	and.w	r1, r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f003 0310 	and.w	r3, r3, #16
 8008a72:	409a      	lsls	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	21ff      	movs	r1, #255	@ 0xff
 8008a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	ea02 0103 	and.w	r1, r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	409a      	lsls	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d11d      	bne.n	8008aec <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	221f      	movs	r2, #31
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f003 0310 	and.w	r3, r3, #16
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	2207      	movs	r2, #7
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4013      	ands	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b14:	e00f      	b.n	8008b36 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d102      	bne.n	8008b24 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b22:	e008      	b.n	8008b36 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b30:	e001      	b.n	8008b36 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6819      	ldr	r1, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f003 0310 	and.w	r3, r3, #16
 8008b6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43da      	mvns	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	400a      	ands	r2, r1
 8008b7c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	22c0      	movs	r2, #192	@ 0xc0
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	43da      	mvns	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	400a      	ands	r2, r1
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3728      	adds	r7, #40	@ 0x28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20008000 	.word	0x20008000

08008bf4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c00:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7f8 fb1e 	bl	8001244 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	711a      	strb	r2, [r3, #4]
}
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c22:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7f8 faff 	bl	8001228 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f043 0204 	orr.w	r2, r3, #4
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff fe85 	bl	800895c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	711a      	strb	r2, [r3, #4]
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff ffd8 	bl	8008c60 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	711a      	strb	r2, [r3, #4]
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff ffd1 	bl	8008c74 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f043 0204 	orr.w	r2, r3, #4
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff ffc7 	bl	8008c88 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	711a      	strb	r2, [r3, #4]
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008d10:	f7fe f816 	bl	8006d40 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e312      	b.n	8009346 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a66      	ldr	r2, [pc, #408]	@ (8008ec0 <HAL_DMA_Init+0x1b8>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d04a      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a65      	ldr	r2, [pc, #404]	@ (8008ec4 <HAL_DMA_Init+0x1bc>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d045      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a63      	ldr	r2, [pc, #396]	@ (8008ec8 <HAL_DMA_Init+0x1c0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d040      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a62      	ldr	r2, [pc, #392]	@ (8008ecc <HAL_DMA_Init+0x1c4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d03b      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a60      	ldr	r2, [pc, #384]	@ (8008ed0 <HAL_DMA_Init+0x1c8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d036      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a5f      	ldr	r2, [pc, #380]	@ (8008ed4 <HAL_DMA_Init+0x1cc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d031      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a5d      	ldr	r2, [pc, #372]	@ (8008ed8 <HAL_DMA_Init+0x1d0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d02c      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8008edc <HAL_DMA_Init+0x1d4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d027      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a5a      	ldr	r2, [pc, #360]	@ (8008ee0 <HAL_DMA_Init+0x1d8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d022      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a59      	ldr	r2, [pc, #356]	@ (8008ee4 <HAL_DMA_Init+0x1dc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d01d      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a57      	ldr	r2, [pc, #348]	@ (8008ee8 <HAL_DMA_Init+0x1e0>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d018      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a56      	ldr	r2, [pc, #344]	@ (8008eec <HAL_DMA_Init+0x1e4>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a54      	ldr	r2, [pc, #336]	@ (8008ef0 <HAL_DMA_Init+0x1e8>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00e      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a53      	ldr	r2, [pc, #332]	@ (8008ef4 <HAL_DMA_Init+0x1ec>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a51      	ldr	r2, [pc, #324]	@ (8008ef8 <HAL_DMA_Init+0x1f0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <HAL_DMA_Init+0xb8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a50      	ldr	r2, [pc, #320]	@ (8008efc <HAL_DMA_Init+0x1f4>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d101      	bne.n	8008dc4 <HAL_DMA_Init+0xbc>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_DMA_Init+0xbe>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 813c 	beq.w	8009044 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a37      	ldr	r2, [pc, #220]	@ (8008ec0 <HAL_DMA_Init+0x1b8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d04a      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a36      	ldr	r2, [pc, #216]	@ (8008ec4 <HAL_DMA_Init+0x1bc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d045      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a34      	ldr	r2, [pc, #208]	@ (8008ec8 <HAL_DMA_Init+0x1c0>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d040      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a33      	ldr	r2, [pc, #204]	@ (8008ecc <HAL_DMA_Init+0x1c4>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d03b      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a31      	ldr	r2, [pc, #196]	@ (8008ed0 <HAL_DMA_Init+0x1c8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d036      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a30      	ldr	r2, [pc, #192]	@ (8008ed4 <HAL_DMA_Init+0x1cc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d031      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8008ed8 <HAL_DMA_Init+0x1d0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d02c      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a2d      	ldr	r2, [pc, #180]	@ (8008edc <HAL_DMA_Init+0x1d4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d027      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee0 <HAL_DMA_Init+0x1d8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d022      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <HAL_DMA_Init+0x1dc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d01d      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a28      	ldr	r2, [pc, #160]	@ (8008ee8 <HAL_DMA_Init+0x1e0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d018      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a27      	ldr	r2, [pc, #156]	@ (8008eec <HAL_DMA_Init+0x1e4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d013      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a25      	ldr	r2, [pc, #148]	@ (8008ef0 <HAL_DMA_Init+0x1e8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00e      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a24      	ldr	r2, [pc, #144]	@ (8008ef4 <HAL_DMA_Init+0x1ec>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d009      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a22      	ldr	r2, [pc, #136]	@ (8008ef8 <HAL_DMA_Init+0x1f0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <HAL_DMA_Init+0x174>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a21      	ldr	r2, [pc, #132]	@ (8008efc <HAL_DMA_Init+0x1f4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d108      	bne.n	8008e8e <HAL_DMA_Init+0x186>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e007      	b.n	8008e9e <HAL_DMA_Init+0x196>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0201 	bic.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e9e:	e02f      	b.n	8008f00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ea0:	f7fd ff4e 	bl	8006d40 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d928      	bls.n	8008f00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2203      	movs	r2, #3
 8008eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e242      	b.n	8009346 <HAL_DMA_Init+0x63e>
 8008ec0:	40020010 	.word	0x40020010
 8008ec4:	40020028 	.word	0x40020028
 8008ec8:	40020040 	.word	0x40020040
 8008ecc:	40020058 	.word	0x40020058
 8008ed0:	40020070 	.word	0x40020070
 8008ed4:	40020088 	.word	0x40020088
 8008ed8:	400200a0 	.word	0x400200a0
 8008edc:	400200b8 	.word	0x400200b8
 8008ee0:	40020410 	.word	0x40020410
 8008ee4:	40020428 	.word	0x40020428
 8008ee8:	40020440 	.word	0x40020440
 8008eec:	40020458 	.word	0x40020458
 8008ef0:	40020470 	.word	0x40020470
 8008ef4:	40020488 	.word	0x40020488
 8008ef8:	400204a0 	.word	0x400204a0
 8008efc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1c8      	bne.n	8008ea0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4b83      	ldr	r3, [pc, #524]	@ (8009128 <HAL_DMA_Init+0x420>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008f26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d107      	bne.n	8008f64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b28      	cmp	r3, #40	@ 0x28
 8008f6a:	d903      	bls.n	8008f74 <HAL_DMA_Init+0x26c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f72:	d91f      	bls.n	8008fb4 <HAL_DMA_Init+0x2ac>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f7a:	d903      	bls.n	8008f84 <HAL_DMA_Init+0x27c>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	2b42      	cmp	r3, #66	@ 0x42
 8008f82:	d917      	bls.n	8008fb4 <HAL_DMA_Init+0x2ac>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	2b46      	cmp	r3, #70	@ 0x46
 8008f8a:	d903      	bls.n	8008f94 <HAL_DMA_Init+0x28c>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b48      	cmp	r3, #72	@ 0x48
 8008f92:	d90f      	bls.n	8008fb4 <HAL_DMA_Init+0x2ac>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b4e      	cmp	r3, #78	@ 0x4e
 8008f9a:	d903      	bls.n	8008fa4 <HAL_DMA_Init+0x29c>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b52      	cmp	r3, #82	@ 0x52
 8008fa2:	d907      	bls.n	8008fb4 <HAL_DMA_Init+0x2ac>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b73      	cmp	r3, #115	@ 0x73
 8008faa:	d905      	bls.n	8008fb8 <HAL_DMA_Init+0x2b0>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b77      	cmp	r3, #119	@ 0x77
 8008fb2:	d801      	bhi.n	8008fb8 <HAL_DMA_Init+0x2b0>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e000      	b.n	8008fba <HAL_DMA_Init+0x2b2>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fc4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d117      	bne.n	8009020 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 fdca 	bl	800ab9c <DMA_CheckFifoParam>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d008      	beq.n	8009020 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2240      	movs	r2, #64	@ 0x40
 8009012:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e192      	b.n	8009346 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fd05 	bl	800aa38 <DMA_CalcBaseAndBitshift>
 800902e:	4603      	mov	r3, r0
 8009030:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	223f      	movs	r2, #63	@ 0x3f
 800903c:	409a      	lsls	r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	609a      	str	r2, [r3, #8]
 8009042:	e0c8      	b.n	80091d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a38      	ldr	r2, [pc, #224]	@ (800912c <HAL_DMA_Init+0x424>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d022      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a37      	ldr	r2, [pc, #220]	@ (8009130 <HAL_DMA_Init+0x428>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d01d      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a35      	ldr	r2, [pc, #212]	@ (8009134 <HAL_DMA_Init+0x42c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d018      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a34      	ldr	r2, [pc, #208]	@ (8009138 <HAL_DMA_Init+0x430>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d013      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a32      	ldr	r2, [pc, #200]	@ (800913c <HAL_DMA_Init+0x434>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00e      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a31      	ldr	r2, [pc, #196]	@ (8009140 <HAL_DMA_Init+0x438>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a2f      	ldr	r2, [pc, #188]	@ (8009144 <HAL_DMA_Init+0x43c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_DMA_Init+0x38c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a2e      	ldr	r2, [pc, #184]	@ (8009148 <HAL_DMA_Init+0x440>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d101      	bne.n	8009098 <HAL_DMA_Init+0x390>
 8009094:	2301      	movs	r3, #1
 8009096:	e000      	b.n	800909a <HAL_DMA_Init+0x392>
 8009098:	2300      	movs	r3, #0
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8092 	beq.w	80091c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a21      	ldr	r2, [pc, #132]	@ (800912c <HAL_DMA_Init+0x424>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d021      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a20      	ldr	r2, [pc, #128]	@ (8009130 <HAL_DMA_Init+0x428>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01c      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009134 <HAL_DMA_Init+0x42c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d017      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009138 <HAL_DMA_Init+0x430>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d012      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a1b      	ldr	r2, [pc, #108]	@ (800913c <HAL_DMA_Init+0x434>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d00d      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009140 <HAL_DMA_Init+0x438>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d008      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a18      	ldr	r2, [pc, #96]	@ (8009144 <HAL_DMA_Init+0x43c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d003      	beq.n	80090ee <HAL_DMA_Init+0x3e6>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <HAL_DMA_Init+0x440>)
 80090ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4b10      	ldr	r3, [pc, #64]	@ (800914c <HAL_DMA_Init+0x444>)
 800910a:	4013      	ands	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b40      	cmp	r3, #64	@ 0x40
 8009114:	d01c      	beq.n	8009150 <HAL_DMA_Init+0x448>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b80      	cmp	r3, #128	@ 0x80
 800911c:	d102      	bne.n	8009124 <HAL_DMA_Init+0x41c>
 800911e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009122:	e016      	b.n	8009152 <HAL_DMA_Init+0x44a>
 8009124:	2300      	movs	r3, #0
 8009126:	e014      	b.n	8009152 <HAL_DMA_Init+0x44a>
 8009128:	fe10803f 	.word	0xfe10803f
 800912c:	58025408 	.word	0x58025408
 8009130:	5802541c 	.word	0x5802541c
 8009134:	58025430 	.word	0x58025430
 8009138:	58025444 	.word	0x58025444
 800913c:	58025458 	.word	0x58025458
 8009140:	5802546c 	.word	0x5802546c
 8009144:	58025480 	.word	0x58025480
 8009148:	58025494 	.word	0x58025494
 800914c:	fffe000f 	.word	0xfffe000f
 8009150:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	68d2      	ldr	r2, [r2, #12]
 8009156:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009180:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b6e      	ldr	r3, [pc, #440]	@ (8009350 <HAL_DMA_Init+0x648>)
 8009198:	4413      	add	r3, r2
 800919a:	4a6e      	ldr	r2, [pc, #440]	@ (8009354 <HAL_DMA_Init+0x64c>)
 800919c:	fba2 2303 	umull	r2, r3, r2, r3
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	009a      	lsls	r2, r3, #2
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fc45 	bl	800aa38 <DMA_CalcBaseAndBitshift>
 80091ae:	4603      	mov	r3, r0
 80091b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2201      	movs	r2, #1
 80091bc:	409a      	lsls	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	605a      	str	r2, [r3, #4]
 80091c2:	e008      	b.n	80091d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2240      	movs	r2, #64	@ 0x40
 80091c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2203      	movs	r2, #3
 80091ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e0b7      	b.n	8009346 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a5f      	ldr	r2, [pc, #380]	@ (8009358 <HAL_DMA_Init+0x650>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d072      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a5d      	ldr	r2, [pc, #372]	@ (800935c <HAL_DMA_Init+0x654>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d06d      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a5c      	ldr	r2, [pc, #368]	@ (8009360 <HAL_DMA_Init+0x658>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d068      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a5a      	ldr	r2, [pc, #360]	@ (8009364 <HAL_DMA_Init+0x65c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d063      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a59      	ldr	r2, [pc, #356]	@ (8009368 <HAL_DMA_Init+0x660>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d05e      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a57      	ldr	r2, [pc, #348]	@ (800936c <HAL_DMA_Init+0x664>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d059      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a56      	ldr	r2, [pc, #344]	@ (8009370 <HAL_DMA_Init+0x668>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d054      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a54      	ldr	r2, [pc, #336]	@ (8009374 <HAL_DMA_Init+0x66c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d04f      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a53      	ldr	r2, [pc, #332]	@ (8009378 <HAL_DMA_Init+0x670>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d04a      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a51      	ldr	r2, [pc, #324]	@ (800937c <HAL_DMA_Init+0x674>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d045      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a50      	ldr	r2, [pc, #320]	@ (8009380 <HAL_DMA_Init+0x678>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d040      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a4e      	ldr	r2, [pc, #312]	@ (8009384 <HAL_DMA_Init+0x67c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d03b      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a4d      	ldr	r2, [pc, #308]	@ (8009388 <HAL_DMA_Init+0x680>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d036      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a4b      	ldr	r2, [pc, #300]	@ (800938c <HAL_DMA_Init+0x684>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d031      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a4a      	ldr	r2, [pc, #296]	@ (8009390 <HAL_DMA_Init+0x688>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d02c      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a48      	ldr	r2, [pc, #288]	@ (8009394 <HAL_DMA_Init+0x68c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d027      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a47      	ldr	r2, [pc, #284]	@ (8009398 <HAL_DMA_Init+0x690>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d022      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a45      	ldr	r2, [pc, #276]	@ (800939c <HAL_DMA_Init+0x694>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d01d      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a44      	ldr	r2, [pc, #272]	@ (80093a0 <HAL_DMA_Init+0x698>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d018      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a42      	ldr	r2, [pc, #264]	@ (80093a4 <HAL_DMA_Init+0x69c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d013      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a41      	ldr	r2, [pc, #260]	@ (80093a8 <HAL_DMA_Init+0x6a0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00e      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a3f      	ldr	r2, [pc, #252]	@ (80093ac <HAL_DMA_Init+0x6a4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d009      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a3e      	ldr	r2, [pc, #248]	@ (80093b0 <HAL_DMA_Init+0x6a8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d004      	beq.n	80092c6 <HAL_DMA_Init+0x5be>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a3c      	ldr	r2, [pc, #240]	@ (80093b4 <HAL_DMA_Init+0x6ac>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d101      	bne.n	80092ca <HAL_DMA_Init+0x5c2>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <HAL_DMA_Init+0x5c4>
 80092ca:	2300      	movs	r3, #0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d032      	beq.n	8009336 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f001 fcdf 	bl	800ac94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	2b80      	cmp	r3, #128	@ 0x80
 80092dc:	d102      	bne.n	80092e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80092f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d010      	beq.n	8009324 <HAL_DMA_Init+0x61c>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b08      	cmp	r3, #8
 8009308:	d80c      	bhi.n	8009324 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 fd5c 	bl	800adc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009314:	2200      	movs	r2, #0
 8009316:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	e008      	b.n	8009336 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	a7fdabf8 	.word	0xa7fdabf8
 8009354:	cccccccd 	.word	0xcccccccd
 8009358:	40020010 	.word	0x40020010
 800935c:	40020028 	.word	0x40020028
 8009360:	40020040 	.word	0x40020040
 8009364:	40020058 	.word	0x40020058
 8009368:	40020070 	.word	0x40020070
 800936c:	40020088 	.word	0x40020088
 8009370:	400200a0 	.word	0x400200a0
 8009374:	400200b8 	.word	0x400200b8
 8009378:	40020410 	.word	0x40020410
 800937c:	40020428 	.word	0x40020428
 8009380:	40020440 	.word	0x40020440
 8009384:	40020458 	.word	0x40020458
 8009388:	40020470 	.word	0x40020470
 800938c:	40020488 	.word	0x40020488
 8009390:	400204a0 	.word	0x400204a0
 8009394:	400204b8 	.word	0x400204b8
 8009398:	58025408 	.word	0x58025408
 800939c:	5802541c 	.word	0x5802541c
 80093a0:	58025430 	.word	0x58025430
 80093a4:	58025444 	.word	0x58025444
 80093a8:	58025458 	.word	0x58025458
 80093ac:	5802546c 	.word	0x5802546c
 80093b0:	58025480 	.word	0x58025480
 80093b4:	58025494 	.word	0x58025494

080093b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e226      	b.n	8009822 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_DMA_Start_IT+0x2a>
 80093de:	2302      	movs	r3, #2
 80093e0:	e21f      	b.n	8009822 <HAL_DMA_Start_IT+0x46a>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	f040 820a 	bne.w	800980c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2202      	movs	r2, #2
 80093fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a68      	ldr	r2, [pc, #416]	@ (80095ac <HAL_DMA_Start_IT+0x1f4>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d04a      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a66      	ldr	r2, [pc, #408]	@ (80095b0 <HAL_DMA_Start_IT+0x1f8>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d045      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a65      	ldr	r2, [pc, #404]	@ (80095b4 <HAL_DMA_Start_IT+0x1fc>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d040      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a63      	ldr	r2, [pc, #396]	@ (80095b8 <HAL_DMA_Start_IT+0x200>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d03b      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a62      	ldr	r2, [pc, #392]	@ (80095bc <HAL_DMA_Start_IT+0x204>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d036      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a60      	ldr	r2, [pc, #384]	@ (80095c0 <HAL_DMA_Start_IT+0x208>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d031      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a5f      	ldr	r2, [pc, #380]	@ (80095c4 <HAL_DMA_Start_IT+0x20c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d02c      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a5d      	ldr	r2, [pc, #372]	@ (80095c8 <HAL_DMA_Start_IT+0x210>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d027      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a5c      	ldr	r2, [pc, #368]	@ (80095cc <HAL_DMA_Start_IT+0x214>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d022      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a5a      	ldr	r2, [pc, #360]	@ (80095d0 <HAL_DMA_Start_IT+0x218>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01d      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a59      	ldr	r2, [pc, #356]	@ (80095d4 <HAL_DMA_Start_IT+0x21c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d018      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a57      	ldr	r2, [pc, #348]	@ (80095d8 <HAL_DMA_Start_IT+0x220>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d013      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a56      	ldr	r2, [pc, #344]	@ (80095dc <HAL_DMA_Start_IT+0x224>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00e      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a54      	ldr	r2, [pc, #336]	@ (80095e0 <HAL_DMA_Start_IT+0x228>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d009      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a53      	ldr	r2, [pc, #332]	@ (80095e4 <HAL_DMA_Start_IT+0x22c>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d004      	beq.n	80094a6 <HAL_DMA_Start_IT+0xee>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a51      	ldr	r2, [pc, #324]	@ (80095e8 <HAL_DMA_Start_IT+0x230>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d108      	bne.n	80094b8 <HAL_DMA_Start_IT+0x100>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0201 	bic.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e007      	b.n	80094c8 <HAL_DMA_Start_IT+0x110>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f001 f906 	bl	800a6e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a34      	ldr	r2, [pc, #208]	@ (80095ac <HAL_DMA_Start_IT+0x1f4>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d04a      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a33      	ldr	r2, [pc, #204]	@ (80095b0 <HAL_DMA_Start_IT+0x1f8>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d045      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a31      	ldr	r2, [pc, #196]	@ (80095b4 <HAL_DMA_Start_IT+0x1fc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d040      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a30      	ldr	r2, [pc, #192]	@ (80095b8 <HAL_DMA_Start_IT+0x200>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d03b      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a2e      	ldr	r2, [pc, #184]	@ (80095bc <HAL_DMA_Start_IT+0x204>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d036      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2d      	ldr	r2, [pc, #180]	@ (80095c0 <HAL_DMA_Start_IT+0x208>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d031      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2b      	ldr	r2, [pc, #172]	@ (80095c4 <HAL_DMA_Start_IT+0x20c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d02c      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <HAL_DMA_Start_IT+0x210>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d027      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a28      	ldr	r2, [pc, #160]	@ (80095cc <HAL_DMA_Start_IT+0x214>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d022      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a27      	ldr	r2, [pc, #156]	@ (80095d0 <HAL_DMA_Start_IT+0x218>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d01d      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a25      	ldr	r2, [pc, #148]	@ (80095d4 <HAL_DMA_Start_IT+0x21c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d018      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a24      	ldr	r2, [pc, #144]	@ (80095d8 <HAL_DMA_Start_IT+0x220>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d013      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a22      	ldr	r2, [pc, #136]	@ (80095dc <HAL_DMA_Start_IT+0x224>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d00e      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a21      	ldr	r2, [pc, #132]	@ (80095e0 <HAL_DMA_Start_IT+0x228>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d009      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a1f      	ldr	r2, [pc, #124]	@ (80095e4 <HAL_DMA_Start_IT+0x22c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d004      	beq.n	8009574 <HAL_DMA_Start_IT+0x1bc>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a1e      	ldr	r2, [pc, #120]	@ (80095e8 <HAL_DMA_Start_IT+0x230>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d101      	bne.n	8009578 <HAL_DMA_Start_IT+0x1c0>
 8009574:	2301      	movs	r3, #1
 8009576:	e000      	b.n	800957a <HAL_DMA_Start_IT+0x1c2>
 8009578:	2300      	movs	r3, #0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d036      	beq.n	80095ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f023 021e 	bic.w	r2, r3, #30
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0216 	orr.w	r2, r2, #22
 8009590:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d03e      	beq.n	8009618 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0208 	orr.w	r2, r2, #8
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e035      	b.n	8009618 <HAL_DMA_Start_IT+0x260>
 80095ac:	40020010 	.word	0x40020010
 80095b0:	40020028 	.word	0x40020028
 80095b4:	40020040 	.word	0x40020040
 80095b8:	40020058 	.word	0x40020058
 80095bc:	40020070 	.word	0x40020070
 80095c0:	40020088 	.word	0x40020088
 80095c4:	400200a0 	.word	0x400200a0
 80095c8:	400200b8 	.word	0x400200b8
 80095cc:	40020410 	.word	0x40020410
 80095d0:	40020428 	.word	0x40020428
 80095d4:	40020440 	.word	0x40020440
 80095d8:	40020458 	.word	0x40020458
 80095dc:	40020470 	.word	0x40020470
 80095e0:	40020488 	.word	0x40020488
 80095e4:	400204a0 	.word	0x400204a0
 80095e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f023 020e 	bic.w	r2, r3, #14
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 020a 	orr.w	r2, r2, #10
 80095fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d007      	beq.n	8009618 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0204 	orr.w	r2, r2, #4
 8009616:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a83      	ldr	r2, [pc, #524]	@ (800982c <HAL_DMA_Start_IT+0x474>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d072      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a82      	ldr	r2, [pc, #520]	@ (8009830 <HAL_DMA_Start_IT+0x478>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d06d      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a80      	ldr	r2, [pc, #512]	@ (8009834 <HAL_DMA_Start_IT+0x47c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d068      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a7f      	ldr	r2, [pc, #508]	@ (8009838 <HAL_DMA_Start_IT+0x480>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d063      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a7d      	ldr	r2, [pc, #500]	@ (800983c <HAL_DMA_Start_IT+0x484>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d05e      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a7c      	ldr	r2, [pc, #496]	@ (8009840 <HAL_DMA_Start_IT+0x488>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d059      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a7a      	ldr	r2, [pc, #488]	@ (8009844 <HAL_DMA_Start_IT+0x48c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d054      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a79      	ldr	r2, [pc, #484]	@ (8009848 <HAL_DMA_Start_IT+0x490>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d04f      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a77      	ldr	r2, [pc, #476]	@ (800984c <HAL_DMA_Start_IT+0x494>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d04a      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a76      	ldr	r2, [pc, #472]	@ (8009850 <HAL_DMA_Start_IT+0x498>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d045      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a74      	ldr	r2, [pc, #464]	@ (8009854 <HAL_DMA_Start_IT+0x49c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d040      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a73      	ldr	r2, [pc, #460]	@ (8009858 <HAL_DMA_Start_IT+0x4a0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d03b      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a71      	ldr	r2, [pc, #452]	@ (800985c <HAL_DMA_Start_IT+0x4a4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d036      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a70      	ldr	r2, [pc, #448]	@ (8009860 <HAL_DMA_Start_IT+0x4a8>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d031      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a6e      	ldr	r2, [pc, #440]	@ (8009864 <HAL_DMA_Start_IT+0x4ac>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d02c      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a6d      	ldr	r2, [pc, #436]	@ (8009868 <HAL_DMA_Start_IT+0x4b0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d027      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a6b      	ldr	r2, [pc, #428]	@ (800986c <HAL_DMA_Start_IT+0x4b4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d022      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a6a      	ldr	r2, [pc, #424]	@ (8009870 <HAL_DMA_Start_IT+0x4b8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d01d      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a68      	ldr	r2, [pc, #416]	@ (8009874 <HAL_DMA_Start_IT+0x4bc>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d018      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a67      	ldr	r2, [pc, #412]	@ (8009878 <HAL_DMA_Start_IT+0x4c0>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d013      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a65      	ldr	r2, [pc, #404]	@ (800987c <HAL_DMA_Start_IT+0x4c4>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00e      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a64      	ldr	r2, [pc, #400]	@ (8009880 <HAL_DMA_Start_IT+0x4c8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a62      	ldr	r2, [pc, #392]	@ (8009884 <HAL_DMA_Start_IT+0x4cc>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_DMA_Start_IT+0x350>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a61      	ldr	r2, [pc, #388]	@ (8009888 <HAL_DMA_Start_IT+0x4d0>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d101      	bne.n	800970c <HAL_DMA_Start_IT+0x354>
 8009708:	2301      	movs	r3, #1
 800970a:	e000      	b.n	800970e <HAL_DMA_Start_IT+0x356>
 800970c:	2300      	movs	r3, #0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d01a      	beq.n	8009748 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800972a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800972e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009742:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009746:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a37      	ldr	r2, [pc, #220]	@ (800982c <HAL_DMA_Start_IT+0x474>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d04a      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a36      	ldr	r2, [pc, #216]	@ (8009830 <HAL_DMA_Start_IT+0x478>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d045      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a34      	ldr	r2, [pc, #208]	@ (8009834 <HAL_DMA_Start_IT+0x47c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d040      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a33      	ldr	r2, [pc, #204]	@ (8009838 <HAL_DMA_Start_IT+0x480>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d03b      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a31      	ldr	r2, [pc, #196]	@ (800983c <HAL_DMA_Start_IT+0x484>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d036      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a30      	ldr	r2, [pc, #192]	@ (8009840 <HAL_DMA_Start_IT+0x488>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d031      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a2e      	ldr	r2, [pc, #184]	@ (8009844 <HAL_DMA_Start_IT+0x48c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d02c      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a2d      	ldr	r2, [pc, #180]	@ (8009848 <HAL_DMA_Start_IT+0x490>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d027      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a2b      	ldr	r2, [pc, #172]	@ (800984c <HAL_DMA_Start_IT+0x494>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d022      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009850 <HAL_DMA_Start_IT+0x498>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d01d      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a28      	ldr	r2, [pc, #160]	@ (8009854 <HAL_DMA_Start_IT+0x49c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d018      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a27      	ldr	r2, [pc, #156]	@ (8009858 <HAL_DMA_Start_IT+0x4a0>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d013      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a25      	ldr	r2, [pc, #148]	@ (800985c <HAL_DMA_Start_IT+0x4a4>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00e      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a24      	ldr	r2, [pc, #144]	@ (8009860 <HAL_DMA_Start_IT+0x4a8>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d009      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a22      	ldr	r2, [pc, #136]	@ (8009864 <HAL_DMA_Start_IT+0x4ac>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <HAL_DMA_Start_IT+0x430>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a21      	ldr	r2, [pc, #132]	@ (8009868 <HAL_DMA_Start_IT+0x4b0>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d108      	bne.n	80097fa <HAL_DMA_Start_IT+0x442>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e012      	b.n	8009820 <HAL_DMA_Start_IT+0x468>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	e009      	b.n	8009820 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009812:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	40020010 	.word	0x40020010
 8009830:	40020028 	.word	0x40020028
 8009834:	40020040 	.word	0x40020040
 8009838:	40020058 	.word	0x40020058
 800983c:	40020070 	.word	0x40020070
 8009840:	40020088 	.word	0x40020088
 8009844:	400200a0 	.word	0x400200a0
 8009848:	400200b8 	.word	0x400200b8
 800984c:	40020410 	.word	0x40020410
 8009850:	40020428 	.word	0x40020428
 8009854:	40020440 	.word	0x40020440
 8009858:	40020458 	.word	0x40020458
 800985c:	40020470 	.word	0x40020470
 8009860:	40020488 	.word	0x40020488
 8009864:	400204a0 	.word	0x400204a0
 8009868:	400204b8 	.word	0x400204b8
 800986c:	58025408 	.word	0x58025408
 8009870:	5802541c 	.word	0x5802541c
 8009874:	58025430 	.word	0x58025430
 8009878:	58025444 	.word	0x58025444
 800987c:	58025458 	.word	0x58025458
 8009880:	5802546c 	.word	0x5802546c
 8009884:	58025480 	.word	0x58025480
 8009888:	58025494 	.word	0x58025494

0800988c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	@ 0x28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009898:	4b67      	ldr	r3, [pc, #412]	@ (8009a38 <HAL_DMA_IRQHandler+0x1ac>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a67      	ldr	r2, [pc, #412]	@ (8009a3c <HAL_DMA_IRQHandler+0x1b0>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	0a9b      	lsrs	r3, r3, #10
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a5f      	ldr	r2, [pc, #380]	@ (8009a40 <HAL_DMA_IRQHandler+0x1b4>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d04a      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a5d      	ldr	r2, [pc, #372]	@ (8009a44 <HAL_DMA_IRQHandler+0x1b8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d045      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a5c      	ldr	r2, [pc, #368]	@ (8009a48 <HAL_DMA_IRQHandler+0x1bc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d040      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a5a      	ldr	r2, [pc, #360]	@ (8009a4c <HAL_DMA_IRQHandler+0x1c0>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d03b      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a59      	ldr	r2, [pc, #356]	@ (8009a50 <HAL_DMA_IRQHandler+0x1c4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d036      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a57      	ldr	r2, [pc, #348]	@ (8009a54 <HAL_DMA_IRQHandler+0x1c8>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d031      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a56      	ldr	r2, [pc, #344]	@ (8009a58 <HAL_DMA_IRQHandler+0x1cc>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d02c      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a54      	ldr	r2, [pc, #336]	@ (8009a5c <HAL_DMA_IRQHandler+0x1d0>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d027      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a53      	ldr	r2, [pc, #332]	@ (8009a60 <HAL_DMA_IRQHandler+0x1d4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d022      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a51      	ldr	r2, [pc, #324]	@ (8009a64 <HAL_DMA_IRQHandler+0x1d8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d01d      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a50      	ldr	r2, [pc, #320]	@ (8009a68 <HAL_DMA_IRQHandler+0x1dc>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d018      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a4e      	ldr	r2, [pc, #312]	@ (8009a6c <HAL_DMA_IRQHandler+0x1e0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d013      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a4d      	ldr	r2, [pc, #308]	@ (8009a70 <HAL_DMA_IRQHandler+0x1e4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00e      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a4b      	ldr	r2, [pc, #300]	@ (8009a74 <HAL_DMA_IRQHandler+0x1e8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d009      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a4a      	ldr	r2, [pc, #296]	@ (8009a78 <HAL_DMA_IRQHandler+0x1ec>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d004      	beq.n	800995e <HAL_DMA_IRQHandler+0xd2>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a48      	ldr	r2, [pc, #288]	@ (8009a7c <HAL_DMA_IRQHandler+0x1f0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d101      	bne.n	8009962 <HAL_DMA_IRQHandler+0xd6>
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <HAL_DMA_IRQHandler+0xd8>
 8009962:	2300      	movs	r3, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 842b 	beq.w	800a1c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800996e:	f003 031f 	and.w	r3, r3, #31
 8009972:	2208      	movs	r2, #8
 8009974:	409a      	lsls	r2, r3
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	4013      	ands	r3, r2
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 80a2 	beq.w	8009ac4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a2e      	ldr	r2, [pc, #184]	@ (8009a40 <HAL_DMA_IRQHandler+0x1b4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d04a      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a2d      	ldr	r2, [pc, #180]	@ (8009a44 <HAL_DMA_IRQHandler+0x1b8>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d045      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a2b      	ldr	r2, [pc, #172]	@ (8009a48 <HAL_DMA_IRQHandler+0x1bc>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d040      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a2a      	ldr	r2, [pc, #168]	@ (8009a4c <HAL_DMA_IRQHandler+0x1c0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d03b      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a28      	ldr	r2, [pc, #160]	@ (8009a50 <HAL_DMA_IRQHandler+0x1c4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d036      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a27      	ldr	r2, [pc, #156]	@ (8009a54 <HAL_DMA_IRQHandler+0x1c8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d031      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a25      	ldr	r2, [pc, #148]	@ (8009a58 <HAL_DMA_IRQHandler+0x1cc>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d02c      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a24      	ldr	r2, [pc, #144]	@ (8009a5c <HAL_DMA_IRQHandler+0x1d0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d027      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a22      	ldr	r2, [pc, #136]	@ (8009a60 <HAL_DMA_IRQHandler+0x1d4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d022      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a21      	ldr	r2, [pc, #132]	@ (8009a64 <HAL_DMA_IRQHandler+0x1d8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d01d      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009a68 <HAL_DMA_IRQHandler+0x1dc>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d018      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a6c <HAL_DMA_IRQHandler+0x1e0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009a70 <HAL_DMA_IRQHandler+0x1e4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1b      	ldr	r2, [pc, #108]	@ (8009a74 <HAL_DMA_IRQHandler+0x1e8>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a19      	ldr	r2, [pc, #100]	@ (8009a78 <HAL_DMA_IRQHandler+0x1ec>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x194>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a18      	ldr	r2, [pc, #96]	@ (8009a7c <HAL_DMA_IRQHandler+0x1f0>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d12f      	bne.n	8009a80 <HAL_DMA_IRQHandler+0x1f4>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf14      	ite	ne
 8009a2e:	2301      	movne	r3, #1
 8009a30:	2300      	moveq	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	e02e      	b.n	8009a94 <HAL_DMA_IRQHandler+0x208>
 8009a36:	bf00      	nop
 8009a38:	24000000 	.word	0x24000000
 8009a3c:	1b4e81b5 	.word	0x1b4e81b5
 8009a40:	40020010 	.word	0x40020010
 8009a44:	40020028 	.word	0x40020028
 8009a48:	40020040 	.word	0x40020040
 8009a4c:	40020058 	.word	0x40020058
 8009a50:	40020070 	.word	0x40020070
 8009a54:	40020088 	.word	0x40020088
 8009a58:	400200a0 	.word	0x400200a0
 8009a5c:	400200b8 	.word	0x400200b8
 8009a60:	40020410 	.word	0x40020410
 8009a64:	40020428 	.word	0x40020428
 8009a68:	40020440 	.word	0x40020440
 8009a6c:	40020458 	.word	0x40020458
 8009a70:	40020470 	.word	0x40020470
 8009a74:	40020488 	.word	0x40020488
 8009a78:	400204a0 	.word	0x400204a0
 8009a7c:	400204b8 	.word	0x400204b8
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0308 	and.w	r3, r3, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf14      	ite	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	2300      	moveq	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d015      	beq.n	8009ac4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0204 	bic.w	r2, r2, #4
 8009aa6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	409a      	lsls	r2, r3
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009abc:	f043 0201 	orr.w	r2, r3, #1
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ac8:	f003 031f 	and.w	r3, r3, #31
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06e      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a69      	ldr	r2, [pc, #420]	@ (8009c84 <HAL_DMA_IRQHandler+0x3f8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d04a      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a67      	ldr	r2, [pc, #412]	@ (8009c88 <HAL_DMA_IRQHandler+0x3fc>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d045      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a66      	ldr	r2, [pc, #408]	@ (8009c8c <HAL_DMA_IRQHandler+0x400>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d040      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a64      	ldr	r2, [pc, #400]	@ (8009c90 <HAL_DMA_IRQHandler+0x404>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d03b      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a63      	ldr	r2, [pc, #396]	@ (8009c94 <HAL_DMA_IRQHandler+0x408>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d036      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a61      	ldr	r2, [pc, #388]	@ (8009c98 <HAL_DMA_IRQHandler+0x40c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d031      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a60      	ldr	r2, [pc, #384]	@ (8009c9c <HAL_DMA_IRQHandler+0x410>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d02c      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a5e      	ldr	r2, [pc, #376]	@ (8009ca0 <HAL_DMA_IRQHandler+0x414>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d027      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a5d      	ldr	r2, [pc, #372]	@ (8009ca4 <HAL_DMA_IRQHandler+0x418>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d022      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a5b      	ldr	r2, [pc, #364]	@ (8009ca8 <HAL_DMA_IRQHandler+0x41c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d01d      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a5a      	ldr	r2, [pc, #360]	@ (8009cac <HAL_DMA_IRQHandler+0x420>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d018      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a58      	ldr	r2, [pc, #352]	@ (8009cb0 <HAL_DMA_IRQHandler+0x424>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d013      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a57      	ldr	r2, [pc, #348]	@ (8009cb4 <HAL_DMA_IRQHandler+0x428>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00e      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a55      	ldr	r2, [pc, #340]	@ (8009cb8 <HAL_DMA_IRQHandler+0x42c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d009      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a54      	ldr	r2, [pc, #336]	@ (8009cbc <HAL_DMA_IRQHandler+0x430>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d004      	beq.n	8009b7a <HAL_DMA_IRQHandler+0x2ee>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a52      	ldr	r2, [pc, #328]	@ (8009cc0 <HAL_DMA_IRQHandler+0x434>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d10a      	bne.n	8009b90 <HAL_DMA_IRQHandler+0x304>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bf14      	ite	ne
 8009b88:	2301      	movne	r3, #1
 8009b8a:	2300      	moveq	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	e003      	b.n	8009b98 <HAL_DMA_IRQHandler+0x30c>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2300      	movs	r3, #0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00d      	beq.n	8009bb8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ba0:	f003 031f 	and.w	r3, r3, #31
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	409a      	lsls	r2, r3
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb0:	f043 0202 	orr.w	r2, r3, #2
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bbc:	f003 031f 	and.w	r3, r3, #31
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	409a      	lsls	r2, r3
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 808f 	beq.w	8009cec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c84 <HAL_DMA_IRQHandler+0x3f8>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d04a      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8009c88 <HAL_DMA_IRQHandler+0x3fc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d045      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a29      	ldr	r2, [pc, #164]	@ (8009c8c <HAL_DMA_IRQHandler+0x400>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d040      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a27      	ldr	r2, [pc, #156]	@ (8009c90 <HAL_DMA_IRQHandler+0x404>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d03b      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a26      	ldr	r2, [pc, #152]	@ (8009c94 <HAL_DMA_IRQHandler+0x408>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d036      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a24      	ldr	r2, [pc, #144]	@ (8009c98 <HAL_DMA_IRQHandler+0x40c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d031      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a23      	ldr	r2, [pc, #140]	@ (8009c9c <HAL_DMA_IRQHandler+0x410>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d02c      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a21      	ldr	r2, [pc, #132]	@ (8009ca0 <HAL_DMA_IRQHandler+0x414>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d027      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a20      	ldr	r2, [pc, #128]	@ (8009ca4 <HAL_DMA_IRQHandler+0x418>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d022      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ca8 <HAL_DMA_IRQHandler+0x41c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d01d      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a1d      	ldr	r2, [pc, #116]	@ (8009cac <HAL_DMA_IRQHandler+0x420>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d018      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb0 <HAL_DMA_IRQHandler+0x424>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d013      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb4 <HAL_DMA_IRQHandler+0x428>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00e      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a18      	ldr	r2, [pc, #96]	@ (8009cb8 <HAL_DMA_IRQHandler+0x42c>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d009      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a17      	ldr	r2, [pc, #92]	@ (8009cbc <HAL_DMA_IRQHandler+0x430>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d004      	beq.n	8009c6e <HAL_DMA_IRQHandler+0x3e2>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a15      	ldr	r2, [pc, #84]	@ (8009cc0 <HAL_DMA_IRQHandler+0x434>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d12a      	bne.n	8009cc4 <HAL_DMA_IRQHandler+0x438>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf14      	ite	ne
 8009c7c:	2301      	movne	r3, #1
 8009c7e:	2300      	moveq	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	e023      	b.n	8009ccc <HAL_DMA_IRQHandler+0x440>
 8009c84:	40020010 	.word	0x40020010
 8009c88:	40020028 	.word	0x40020028
 8009c8c:	40020040 	.word	0x40020040
 8009c90:	40020058 	.word	0x40020058
 8009c94:	40020070 	.word	0x40020070
 8009c98:	40020088 	.word	0x40020088
 8009c9c:	400200a0 	.word	0x400200a0
 8009ca0:	400200b8 	.word	0x400200b8
 8009ca4:	40020410 	.word	0x40020410
 8009ca8:	40020428 	.word	0x40020428
 8009cac:	40020440 	.word	0x40020440
 8009cb0:	40020458 	.word	0x40020458
 8009cb4:	40020470 	.word	0x40020470
 8009cb8:	40020488 	.word	0x40020488
 8009cbc:	400204a0 	.word	0x400204a0
 8009cc0:	400204b8 	.word	0x400204b8
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00d      	beq.n	8009cec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	2204      	movs	r2, #4
 8009cda:	409a      	lsls	r2, r3
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce4:	f043 0204 	orr.w	r2, r3, #4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cf0:	f003 031f 	and.w	r3, r3, #31
 8009cf4:	2210      	movs	r2, #16
 8009cf6:	409a      	lsls	r2, r3
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80a6 	beq.w	8009e4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a85      	ldr	r2, [pc, #532]	@ (8009f1c <HAL_DMA_IRQHandler+0x690>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d04a      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a83      	ldr	r2, [pc, #524]	@ (8009f20 <HAL_DMA_IRQHandler+0x694>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d045      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a82      	ldr	r2, [pc, #520]	@ (8009f24 <HAL_DMA_IRQHandler+0x698>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d040      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a80      	ldr	r2, [pc, #512]	@ (8009f28 <HAL_DMA_IRQHandler+0x69c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d03b      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a7f      	ldr	r2, [pc, #508]	@ (8009f2c <HAL_DMA_IRQHandler+0x6a0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d036      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a7d      	ldr	r2, [pc, #500]	@ (8009f30 <HAL_DMA_IRQHandler+0x6a4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d031      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a7c      	ldr	r2, [pc, #496]	@ (8009f34 <HAL_DMA_IRQHandler+0x6a8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d02c      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a7a      	ldr	r2, [pc, #488]	@ (8009f38 <HAL_DMA_IRQHandler+0x6ac>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d027      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a79      	ldr	r2, [pc, #484]	@ (8009f3c <HAL_DMA_IRQHandler+0x6b0>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a77      	ldr	r2, [pc, #476]	@ (8009f40 <HAL_DMA_IRQHandler+0x6b4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01d      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a76      	ldr	r2, [pc, #472]	@ (8009f44 <HAL_DMA_IRQHandler+0x6b8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a74      	ldr	r2, [pc, #464]	@ (8009f48 <HAL_DMA_IRQHandler+0x6bc>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a73      	ldr	r2, [pc, #460]	@ (8009f4c <HAL_DMA_IRQHandler+0x6c0>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a71      	ldr	r2, [pc, #452]	@ (8009f50 <HAL_DMA_IRQHandler+0x6c4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a70      	ldr	r2, [pc, #448]	@ (8009f54 <HAL_DMA_IRQHandler+0x6c8>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_DMA_IRQHandler+0x516>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009f58 <HAL_DMA_IRQHandler+0x6cc>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d10a      	bne.n	8009db8 <HAL_DMA_IRQHandler+0x52c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0308 	and.w	r3, r3, #8
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bf14      	ite	ne
 8009db0:	2301      	movne	r3, #1
 8009db2:	2300      	moveq	r3, #0
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	e009      	b.n	8009dcc <HAL_DMA_IRQHandler+0x540>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bf14      	ite	ne
 8009dc6:	2301      	movne	r3, #1
 8009dc8:	2300      	moveq	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d03e      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dd4:	f003 031f 	and.w	r3, r3, #31
 8009dd8:	2210      	movs	r2, #16
 8009dda:	409a      	lsls	r2, r3
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d018      	beq.n	8009e20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d108      	bne.n	8009e0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d024      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
 8009e0c:	e01f      	b.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01b      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	4798      	blx	r3
 8009e1e:	e016      	b.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d107      	bne.n	8009e3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f022 0208 	bic.w	r2, r2, #8
 8009e3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	2220      	movs	r2, #32
 8009e58:	409a      	lsls	r2, r3
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8110 	beq.w	800a084 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a2c      	ldr	r2, [pc, #176]	@ (8009f1c <HAL_DMA_IRQHandler+0x690>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d04a      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a2b      	ldr	r2, [pc, #172]	@ (8009f20 <HAL_DMA_IRQHandler+0x694>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d045      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a29      	ldr	r2, [pc, #164]	@ (8009f24 <HAL_DMA_IRQHandler+0x698>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d040      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a28      	ldr	r2, [pc, #160]	@ (8009f28 <HAL_DMA_IRQHandler+0x69c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d03b      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a26      	ldr	r2, [pc, #152]	@ (8009f2c <HAL_DMA_IRQHandler+0x6a0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d036      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a25      	ldr	r2, [pc, #148]	@ (8009f30 <HAL_DMA_IRQHandler+0x6a4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d031      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a23      	ldr	r2, [pc, #140]	@ (8009f34 <HAL_DMA_IRQHandler+0x6a8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d02c      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a22      	ldr	r2, [pc, #136]	@ (8009f38 <HAL_DMA_IRQHandler+0x6ac>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d027      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a20      	ldr	r2, [pc, #128]	@ (8009f3c <HAL_DMA_IRQHandler+0x6b0>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d022      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8009f40 <HAL_DMA_IRQHandler+0x6b4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d01d      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f44 <HAL_DMA_IRQHandler+0x6b8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d018      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8009f48 <HAL_DMA_IRQHandler+0x6bc>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d013      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f4c <HAL_DMA_IRQHandler+0x6c0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d00e      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a19      	ldr	r2, [pc, #100]	@ (8009f50 <HAL_DMA_IRQHandler+0x6c4>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d009      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <HAL_DMA_IRQHandler+0x6c8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_DMA_IRQHandler+0x678>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <HAL_DMA_IRQHandler+0x6cc>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d12b      	bne.n	8009f5c <HAL_DMA_IRQHandler+0x6d0>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0310 	and.w	r3, r3, #16
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bf14      	ite	ne
 8009f12:	2301      	movne	r3, #1
 8009f14:	2300      	moveq	r3, #0
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	e02a      	b.n	8009f70 <HAL_DMA_IRQHandler+0x6e4>
 8009f1a:	bf00      	nop
 8009f1c:	40020010 	.word	0x40020010
 8009f20:	40020028 	.word	0x40020028
 8009f24:	40020040 	.word	0x40020040
 8009f28:	40020058 	.word	0x40020058
 8009f2c:	40020070 	.word	0x40020070
 8009f30:	40020088 	.word	0x40020088
 8009f34:	400200a0 	.word	0x400200a0
 8009f38:	400200b8 	.word	0x400200b8
 8009f3c:	40020410 	.word	0x40020410
 8009f40:	40020428 	.word	0x40020428
 8009f44:	40020440 	.word	0x40020440
 8009f48:	40020458 	.word	0x40020458
 8009f4c:	40020470 	.word	0x40020470
 8009f50:	40020488 	.word	0x40020488
 8009f54:	400204a0 	.word	0x400204a0
 8009f58:	400204b8 	.word	0x400204b8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2301      	movne	r3, #1
 8009f6c:	2300      	moveq	r3, #0
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 8087 	beq.w	800a084 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f7a:	f003 031f 	and.w	r3, r3, #31
 8009f7e:	2220      	movs	r2, #32
 8009f80:	409a      	lsls	r2, r3
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d139      	bne.n	800a006 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 0216 	bic.w	r2, r2, #22
 8009fa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695a      	ldr	r2, [r3, #20]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <HAL_DMA_IRQHandler+0x736>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d007      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0208 	bic.w	r2, r2, #8
 8009fd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fd6:	f003 031f 	and.w	r3, r3, #31
 8009fda:	223f      	movs	r2, #63	@ 0x3f
 8009fdc:	409a      	lsls	r2, r3
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 834a 	beq.w	800a690 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
          }
          return;
 800a004:	e344      	b.n	800a690 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d018      	beq.n	800a046 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d108      	bne.n	800a034 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a026:	2b00      	cmp	r3, #0
 800a028:	d02c      	beq.n	800a084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
 800a032:	e027      	b.n	800a084 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d023      	beq.n	800a084 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	4798      	blx	r3
 800a044:	e01e      	b.n	800a084 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0210 	bic.w	r2, r2, #16
 800a062:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8306 	beq.w	800a69a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8088 	beq.w	800a1ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2204      	movs	r2, #4
 800a0a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a7a      	ldr	r2, [pc, #488]	@ (800a294 <HAL_DMA_IRQHandler+0xa08>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d04a      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a79      	ldr	r2, [pc, #484]	@ (800a298 <HAL_DMA_IRQHandler+0xa0c>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d045      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a77      	ldr	r2, [pc, #476]	@ (800a29c <HAL_DMA_IRQHandler+0xa10>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d040      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a76      	ldr	r2, [pc, #472]	@ (800a2a0 <HAL_DMA_IRQHandler+0xa14>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d03b      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a74      	ldr	r2, [pc, #464]	@ (800a2a4 <HAL_DMA_IRQHandler+0xa18>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d036      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a73      	ldr	r2, [pc, #460]	@ (800a2a8 <HAL_DMA_IRQHandler+0xa1c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d031      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a71      	ldr	r2, [pc, #452]	@ (800a2ac <HAL_DMA_IRQHandler+0xa20>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d02c      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a70      	ldr	r2, [pc, #448]	@ (800a2b0 <HAL_DMA_IRQHandler+0xa24>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d027      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a6e      	ldr	r2, [pc, #440]	@ (800a2b4 <HAL_DMA_IRQHandler+0xa28>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d022      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a6d      	ldr	r2, [pc, #436]	@ (800a2b8 <HAL_DMA_IRQHandler+0xa2c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d01d      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a6b      	ldr	r2, [pc, #428]	@ (800a2bc <HAL_DMA_IRQHandler+0xa30>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d018      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a6a      	ldr	r2, [pc, #424]	@ (800a2c0 <HAL_DMA_IRQHandler+0xa34>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d013      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a68      	ldr	r2, [pc, #416]	@ (800a2c4 <HAL_DMA_IRQHandler+0xa38>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00e      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a67      	ldr	r2, [pc, #412]	@ (800a2c8 <HAL_DMA_IRQHandler+0xa3c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d009      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a65      	ldr	r2, [pc, #404]	@ (800a2cc <HAL_DMA_IRQHandler+0xa40>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d004      	beq.n	800a144 <HAL_DMA_IRQHandler+0x8b8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a64      	ldr	r2, [pc, #400]	@ (800a2d0 <HAL_DMA_IRQHandler+0xa44>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d108      	bne.n	800a156 <HAL_DMA_IRQHandler+0x8ca>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e007      	b.n	800a166 <HAL_DMA_IRQHandler+0x8da>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0201 	bic.w	r2, r2, #1
 800a164:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a16e:	429a      	cmp	r2, r3
 800a170:	d307      	bcc.n	800a182 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f2      	bne.n	800a166 <HAL_DMA_IRQHandler+0x8da>
 800a180:	e000      	b.n	800a184 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a182:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2203      	movs	r2, #3
 800a196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800a19a:	e003      	b.n	800a1a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8272 	beq.w	800a69a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	e26c      	b.n	800a69a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a43      	ldr	r2, [pc, #268]	@ (800a2d4 <HAL_DMA_IRQHandler+0xa48>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d022      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a42      	ldr	r2, [pc, #264]	@ (800a2d8 <HAL_DMA_IRQHandler+0xa4c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d01d      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a40      	ldr	r2, [pc, #256]	@ (800a2dc <HAL_DMA_IRQHandler+0xa50>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d018      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a3f      	ldr	r2, [pc, #252]	@ (800a2e0 <HAL_DMA_IRQHandler+0xa54>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d013      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a3d      	ldr	r2, [pc, #244]	@ (800a2e4 <HAL_DMA_IRQHandler+0xa58>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d00e      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a3c      	ldr	r2, [pc, #240]	@ (800a2e8 <HAL_DMA_IRQHandler+0xa5c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d009      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a3a      	ldr	r2, [pc, #232]	@ (800a2ec <HAL_DMA_IRQHandler+0xa60>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d004      	beq.n	800a210 <HAL_DMA_IRQHandler+0x984>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a39      	ldr	r2, [pc, #228]	@ (800a2f0 <HAL_DMA_IRQHandler+0xa64>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d101      	bne.n	800a214 <HAL_DMA_IRQHandler+0x988>
 800a210:	2301      	movs	r3, #1
 800a212:	e000      	b.n	800a216 <HAL_DMA_IRQHandler+0x98a>
 800a214:	2300      	movs	r3, #0
 800a216:	2b00      	cmp	r3, #0
 800a218:	f000 823f 	beq.w	800a69a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	2204      	movs	r2, #4
 800a22e:	409a      	lsls	r2, r3
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	4013      	ands	r3, r2
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80cd 	beq.w	800a3d4 <HAL_DMA_IRQHandler+0xb48>
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 80c7 	beq.w	800a3d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a24a:	f003 031f 	and.w	r3, r3, #31
 800a24e:	2204      	movs	r2, #4
 800a250:	409a      	lsls	r2, r3
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d049      	beq.n	800a2f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a266:	2b00      	cmp	r3, #0
 800a268:	d109      	bne.n	800a27e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 8210 	beq.w	800a694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a27c:	e20a      	b.n	800a694 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8206 	beq.w	800a694 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a290:	e200      	b.n	800a694 <HAL_DMA_IRQHandler+0xe08>
 800a292:	bf00      	nop
 800a294:	40020010 	.word	0x40020010
 800a298:	40020028 	.word	0x40020028
 800a29c:	40020040 	.word	0x40020040
 800a2a0:	40020058 	.word	0x40020058
 800a2a4:	40020070 	.word	0x40020070
 800a2a8:	40020088 	.word	0x40020088
 800a2ac:	400200a0 	.word	0x400200a0
 800a2b0:	400200b8 	.word	0x400200b8
 800a2b4:	40020410 	.word	0x40020410
 800a2b8:	40020428 	.word	0x40020428
 800a2bc:	40020440 	.word	0x40020440
 800a2c0:	40020458 	.word	0x40020458
 800a2c4:	40020470 	.word	0x40020470
 800a2c8:	40020488 	.word	0x40020488
 800a2cc:	400204a0 	.word	0x400204a0
 800a2d0:	400204b8 	.word	0x400204b8
 800a2d4:	58025408 	.word	0x58025408
 800a2d8:	5802541c 	.word	0x5802541c
 800a2dc:	58025430 	.word	0x58025430
 800a2e0:	58025444 	.word	0x58025444
 800a2e4:	58025458 	.word	0x58025458
 800a2e8:	5802546c 	.word	0x5802546c
 800a2ec:	58025480 	.word	0x58025480
 800a2f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f003 0320 	and.w	r3, r3, #32
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d160      	bne.n	800a3c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a7f      	ldr	r2, [pc, #508]	@ (800a500 <HAL_DMA_IRQHandler+0xc74>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d04a      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a7d      	ldr	r2, [pc, #500]	@ (800a504 <HAL_DMA_IRQHandler+0xc78>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d045      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a7c      	ldr	r2, [pc, #496]	@ (800a508 <HAL_DMA_IRQHandler+0xc7c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d040      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a7a      	ldr	r2, [pc, #488]	@ (800a50c <HAL_DMA_IRQHandler+0xc80>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d03b      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a79      	ldr	r2, [pc, #484]	@ (800a510 <HAL_DMA_IRQHandler+0xc84>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d036      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a77      	ldr	r2, [pc, #476]	@ (800a514 <HAL_DMA_IRQHandler+0xc88>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d031      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a76      	ldr	r2, [pc, #472]	@ (800a518 <HAL_DMA_IRQHandler+0xc8c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d02c      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a74      	ldr	r2, [pc, #464]	@ (800a51c <HAL_DMA_IRQHandler+0xc90>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d027      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a73      	ldr	r2, [pc, #460]	@ (800a520 <HAL_DMA_IRQHandler+0xc94>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d022      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a71      	ldr	r2, [pc, #452]	@ (800a524 <HAL_DMA_IRQHandler+0xc98>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d01d      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a70      	ldr	r2, [pc, #448]	@ (800a528 <HAL_DMA_IRQHandler+0xc9c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d018      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a6e      	ldr	r2, [pc, #440]	@ (800a52c <HAL_DMA_IRQHandler+0xca0>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d013      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a6d      	ldr	r2, [pc, #436]	@ (800a530 <HAL_DMA_IRQHandler+0xca4>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00e      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a6b      	ldr	r2, [pc, #428]	@ (800a534 <HAL_DMA_IRQHandler+0xca8>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d009      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a6a      	ldr	r2, [pc, #424]	@ (800a538 <HAL_DMA_IRQHandler+0xcac>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d004      	beq.n	800a39e <HAL_DMA_IRQHandler+0xb12>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a68      	ldr	r2, [pc, #416]	@ (800a53c <HAL_DMA_IRQHandler+0xcb0>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d108      	bne.n	800a3b0 <HAL_DMA_IRQHandler+0xb24>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0208 	bic.w	r2, r2, #8
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e007      	b.n	800a3c0 <HAL_DMA_IRQHandler+0xb34>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0204 	bic.w	r2, r2, #4
 800a3be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f000 8165 	beq.w	800a694 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3d2:	e15f      	b.n	800a694 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3d8:	f003 031f 	and.w	r3, r3, #31
 800a3dc:	2202      	movs	r2, #2
 800a3de:	409a      	lsls	r2, r3
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80c5 	beq.w	800a574 <HAL_DMA_IRQHandler+0xce8>
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f003 0302 	and.w	r3, r3, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80bf 	beq.w	800a574 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	2202      	movs	r2, #2
 800a400:	409a      	lsls	r2, r3
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d018      	beq.n	800a442 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 813a 	beq.w	800a698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a42c:	e134      	b.n	800a698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 8130 	beq.w	800a698 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a440:	e12a      	b.n	800a698 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f040 8089 	bne.w	800a560 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a2b      	ldr	r2, [pc, #172]	@ (800a500 <HAL_DMA_IRQHandler+0xc74>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d04a      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a29      	ldr	r2, [pc, #164]	@ (800a504 <HAL_DMA_IRQHandler+0xc78>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d045      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a28      	ldr	r2, [pc, #160]	@ (800a508 <HAL_DMA_IRQHandler+0xc7c>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d040      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a26      	ldr	r2, [pc, #152]	@ (800a50c <HAL_DMA_IRQHandler+0xc80>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d03b      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a25      	ldr	r2, [pc, #148]	@ (800a510 <HAL_DMA_IRQHandler+0xc84>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d036      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a23      	ldr	r2, [pc, #140]	@ (800a514 <HAL_DMA_IRQHandler+0xc88>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d031      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a22      	ldr	r2, [pc, #136]	@ (800a518 <HAL_DMA_IRQHandler+0xc8c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d02c      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a20      	ldr	r2, [pc, #128]	@ (800a51c <HAL_DMA_IRQHandler+0xc90>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d027      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a520 <HAL_DMA_IRQHandler+0xc94>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d022      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a524 <HAL_DMA_IRQHandler+0xc98>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d01d      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a528 <HAL_DMA_IRQHandler+0xc9c>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d018      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a52c <HAL_DMA_IRQHandler+0xca0>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d013      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a19      	ldr	r2, [pc, #100]	@ (800a530 <HAL_DMA_IRQHandler+0xca4>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d00e      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a17      	ldr	r2, [pc, #92]	@ (800a534 <HAL_DMA_IRQHandler+0xca8>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d009      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a16      	ldr	r2, [pc, #88]	@ (800a538 <HAL_DMA_IRQHandler+0xcac>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d004      	beq.n	800a4ee <HAL_DMA_IRQHandler+0xc62>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a14      	ldr	r2, [pc, #80]	@ (800a53c <HAL_DMA_IRQHandler+0xcb0>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d128      	bne.n	800a540 <HAL_DMA_IRQHandler+0xcb4>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0214 	bic.w	r2, r2, #20
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	e027      	b.n	800a550 <HAL_DMA_IRQHandler+0xcc4>
 800a500:	40020010 	.word	0x40020010
 800a504:	40020028 	.word	0x40020028
 800a508:	40020040 	.word	0x40020040
 800a50c:	40020058 	.word	0x40020058
 800a510:	40020070 	.word	0x40020070
 800a514:	40020088 	.word	0x40020088
 800a518:	400200a0 	.word	0x400200a0
 800a51c:	400200b8 	.word	0x400200b8
 800a520:	40020410 	.word	0x40020410
 800a524:	40020428 	.word	0x40020428
 800a528:	40020440 	.word	0x40020440
 800a52c:	40020458 	.word	0x40020458
 800a530:	40020470 	.word	0x40020470
 800a534:	40020488 	.word	0x40020488
 800a538:	400204a0 	.word	0x400204a0
 800a53c:	400204b8 	.word	0x400204b8
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 020a 	bic.w	r2, r2, #10
 800a54e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8097 	beq.w	800a698 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a572:	e091      	b.n	800a698 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a578:	f003 031f 	and.w	r3, r3, #31
 800a57c:	2208      	movs	r2, #8
 800a57e:	409a      	lsls	r2, r3
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	4013      	ands	r3, r2
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 8088 	beq.w	800a69a <HAL_DMA_IRQHandler+0xe0e>
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f003 0308 	and.w	r3, r3, #8
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8082 	beq.w	800a69a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a41      	ldr	r2, [pc, #260]	@ (800a6a0 <HAL_DMA_IRQHandler+0xe14>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d04a      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a3f      	ldr	r2, [pc, #252]	@ (800a6a4 <HAL_DMA_IRQHandler+0xe18>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d045      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a3e      	ldr	r2, [pc, #248]	@ (800a6a8 <HAL_DMA_IRQHandler+0xe1c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d040      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a3c      	ldr	r2, [pc, #240]	@ (800a6ac <HAL_DMA_IRQHandler+0xe20>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d03b      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a3b      	ldr	r2, [pc, #236]	@ (800a6b0 <HAL_DMA_IRQHandler+0xe24>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d036      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a39      	ldr	r2, [pc, #228]	@ (800a6b4 <HAL_DMA_IRQHandler+0xe28>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d031      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a38      	ldr	r2, [pc, #224]	@ (800a6b8 <HAL_DMA_IRQHandler+0xe2c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d02c      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a36      	ldr	r2, [pc, #216]	@ (800a6bc <HAL_DMA_IRQHandler+0xe30>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d027      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a35      	ldr	r2, [pc, #212]	@ (800a6c0 <HAL_DMA_IRQHandler+0xe34>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d022      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a33      	ldr	r2, [pc, #204]	@ (800a6c4 <HAL_DMA_IRQHandler+0xe38>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d01d      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a32      	ldr	r2, [pc, #200]	@ (800a6c8 <HAL_DMA_IRQHandler+0xe3c>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d018      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a30      	ldr	r2, [pc, #192]	@ (800a6cc <HAL_DMA_IRQHandler+0xe40>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d013      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a2f      	ldr	r2, [pc, #188]	@ (800a6d0 <HAL_DMA_IRQHandler+0xe44>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00e      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a2d      	ldr	r2, [pc, #180]	@ (800a6d4 <HAL_DMA_IRQHandler+0xe48>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d009      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a2c      	ldr	r2, [pc, #176]	@ (800a6d8 <HAL_DMA_IRQHandler+0xe4c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d004      	beq.n	800a636 <HAL_DMA_IRQHandler+0xdaa>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a2a      	ldr	r2, [pc, #168]	@ (800a6dc <HAL_DMA_IRQHandler+0xe50>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d108      	bne.n	800a648 <HAL_DMA_IRQHandler+0xdbc>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 021c 	bic.w	r2, r2, #28
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e007      	b.n	800a658 <HAL_DMA_IRQHandler+0xdcc>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 020e 	bic.w	r2, r2, #14
 800a656:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	2201      	movs	r2, #1
 800a662:	409a      	lsls	r2, r3
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
 800a68e:	e004      	b.n	800a69a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a690:	bf00      	nop
 800a692:	e002      	b.n	800a69a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a694:	bf00      	nop
 800a696:	e000      	b.n	800a69a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a698:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a69a:	3728      	adds	r7, #40	@ 0x28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	40020010 	.word	0x40020010
 800a6a4:	40020028 	.word	0x40020028
 800a6a8:	40020040 	.word	0x40020040
 800a6ac:	40020058 	.word	0x40020058
 800a6b0:	40020070 	.word	0x40020070
 800a6b4:	40020088 	.word	0x40020088
 800a6b8:	400200a0 	.word	0x400200a0
 800a6bc:	400200b8 	.word	0x400200b8
 800a6c0:	40020410 	.word	0x40020410
 800a6c4:	40020428 	.word	0x40020428
 800a6c8:	40020440 	.word	0x40020440
 800a6cc:	40020458 	.word	0x40020458
 800a6d0:	40020470 	.word	0x40020470
 800a6d4:	40020488 	.word	0x40020488
 800a6d8:	400204a0 	.word	0x400204a0
 800a6dc:	400204b8 	.word	0x400204b8

0800a6e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a7f      	ldr	r2, [pc, #508]	@ (800a8fc <DMA_SetConfig+0x21c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d072      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a7d      	ldr	r2, [pc, #500]	@ (800a900 <DMA_SetConfig+0x220>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d06d      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a7c      	ldr	r2, [pc, #496]	@ (800a904 <DMA_SetConfig+0x224>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d068      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a7a      	ldr	r2, [pc, #488]	@ (800a908 <DMA_SetConfig+0x228>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d063      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a79      	ldr	r2, [pc, #484]	@ (800a90c <DMA_SetConfig+0x22c>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d05e      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a77      	ldr	r2, [pc, #476]	@ (800a910 <DMA_SetConfig+0x230>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d059      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a76      	ldr	r2, [pc, #472]	@ (800a914 <DMA_SetConfig+0x234>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d054      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a74      	ldr	r2, [pc, #464]	@ (800a918 <DMA_SetConfig+0x238>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d04f      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a73      	ldr	r2, [pc, #460]	@ (800a91c <DMA_SetConfig+0x23c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d04a      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a71      	ldr	r2, [pc, #452]	@ (800a920 <DMA_SetConfig+0x240>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d045      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a70      	ldr	r2, [pc, #448]	@ (800a924 <DMA_SetConfig+0x244>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d040      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a6e      	ldr	r2, [pc, #440]	@ (800a928 <DMA_SetConfig+0x248>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d03b      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a6d      	ldr	r2, [pc, #436]	@ (800a92c <DMA_SetConfig+0x24c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d036      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a6b      	ldr	r2, [pc, #428]	@ (800a930 <DMA_SetConfig+0x250>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d031      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a6a      	ldr	r2, [pc, #424]	@ (800a934 <DMA_SetConfig+0x254>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d02c      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a68      	ldr	r2, [pc, #416]	@ (800a938 <DMA_SetConfig+0x258>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d027      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a67      	ldr	r2, [pc, #412]	@ (800a93c <DMA_SetConfig+0x25c>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d022      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a65      	ldr	r2, [pc, #404]	@ (800a940 <DMA_SetConfig+0x260>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d01d      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a64      	ldr	r2, [pc, #400]	@ (800a944 <DMA_SetConfig+0x264>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d018      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a62      	ldr	r2, [pc, #392]	@ (800a948 <DMA_SetConfig+0x268>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a61      	ldr	r2, [pc, #388]	@ (800a94c <DMA_SetConfig+0x26c>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00e      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a5f      	ldr	r2, [pc, #380]	@ (800a950 <DMA_SetConfig+0x270>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d009      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a5e      	ldr	r2, [pc, #376]	@ (800a954 <DMA_SetConfig+0x274>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d004      	beq.n	800a7ea <DMA_SetConfig+0x10a>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a5c      	ldr	r2, [pc, #368]	@ (800a958 <DMA_SetConfig+0x278>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d101      	bne.n	800a7ee <DMA_SetConfig+0x10e>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <DMA_SetConfig+0x110>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00d      	beq.n	800a810 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a7fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a80e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a39      	ldr	r2, [pc, #228]	@ (800a8fc <DMA_SetConfig+0x21c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d04a      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a38      	ldr	r2, [pc, #224]	@ (800a900 <DMA_SetConfig+0x220>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d045      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a36      	ldr	r2, [pc, #216]	@ (800a904 <DMA_SetConfig+0x224>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d040      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a35      	ldr	r2, [pc, #212]	@ (800a908 <DMA_SetConfig+0x228>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d03b      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a33      	ldr	r2, [pc, #204]	@ (800a90c <DMA_SetConfig+0x22c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d036      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a32      	ldr	r2, [pc, #200]	@ (800a910 <DMA_SetConfig+0x230>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d031      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a30      	ldr	r2, [pc, #192]	@ (800a914 <DMA_SetConfig+0x234>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d02c      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a2f      	ldr	r2, [pc, #188]	@ (800a918 <DMA_SetConfig+0x238>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d027      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a2d      	ldr	r2, [pc, #180]	@ (800a91c <DMA_SetConfig+0x23c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d022      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a2c      	ldr	r2, [pc, #176]	@ (800a920 <DMA_SetConfig+0x240>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d01d      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a2a      	ldr	r2, [pc, #168]	@ (800a924 <DMA_SetConfig+0x244>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d018      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a29      	ldr	r2, [pc, #164]	@ (800a928 <DMA_SetConfig+0x248>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a27      	ldr	r2, [pc, #156]	@ (800a92c <DMA_SetConfig+0x24c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00e      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a26      	ldr	r2, [pc, #152]	@ (800a930 <DMA_SetConfig+0x250>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d009      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a24      	ldr	r2, [pc, #144]	@ (800a934 <DMA_SetConfig+0x254>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d004      	beq.n	800a8b0 <DMA_SetConfig+0x1d0>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a23      	ldr	r2, [pc, #140]	@ (800a938 <DMA_SetConfig+0x258>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d101      	bne.n	800a8b4 <DMA_SetConfig+0x1d4>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <DMA_SetConfig+0x1d6>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d059      	beq.n	800a96e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8be:	f003 031f 	and.w	r3, r3, #31
 800a8c2:	223f      	movs	r2, #63	@ 0x3f
 800a8c4:	409a      	lsls	r2, r3
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a8d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b40      	cmp	r3, #64	@ 0x40
 800a8e8:	d138      	bne.n	800a95c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a8fa:	e086      	b.n	800aa0a <DMA_SetConfig+0x32a>
 800a8fc:	40020010 	.word	0x40020010
 800a900:	40020028 	.word	0x40020028
 800a904:	40020040 	.word	0x40020040
 800a908:	40020058 	.word	0x40020058
 800a90c:	40020070 	.word	0x40020070
 800a910:	40020088 	.word	0x40020088
 800a914:	400200a0 	.word	0x400200a0
 800a918:	400200b8 	.word	0x400200b8
 800a91c:	40020410 	.word	0x40020410
 800a920:	40020428 	.word	0x40020428
 800a924:	40020440 	.word	0x40020440
 800a928:	40020458 	.word	0x40020458
 800a92c:	40020470 	.word	0x40020470
 800a930:	40020488 	.word	0x40020488
 800a934:	400204a0 	.word	0x400204a0
 800a938:	400204b8 	.word	0x400204b8
 800a93c:	58025408 	.word	0x58025408
 800a940:	5802541c 	.word	0x5802541c
 800a944:	58025430 	.word	0x58025430
 800a948:	58025444 	.word	0x58025444
 800a94c:	58025458 	.word	0x58025458
 800a950:	5802546c 	.word	0x5802546c
 800a954:	58025480 	.word	0x58025480
 800a958:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	60da      	str	r2, [r3, #12]
}
 800a96c:	e04d      	b.n	800aa0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a29      	ldr	r2, [pc, #164]	@ (800aa18 <DMA_SetConfig+0x338>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d022      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a27      	ldr	r2, [pc, #156]	@ (800aa1c <DMA_SetConfig+0x33c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d01d      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a26      	ldr	r2, [pc, #152]	@ (800aa20 <DMA_SetConfig+0x340>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d018      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a24      	ldr	r2, [pc, #144]	@ (800aa24 <DMA_SetConfig+0x344>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d013      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a23      	ldr	r2, [pc, #140]	@ (800aa28 <DMA_SetConfig+0x348>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d00e      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a21      	ldr	r2, [pc, #132]	@ (800aa2c <DMA_SetConfig+0x34c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d009      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a20      	ldr	r2, [pc, #128]	@ (800aa30 <DMA_SetConfig+0x350>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d004      	beq.n	800a9be <DMA_SetConfig+0x2de>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa34 <DMA_SetConfig+0x354>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d101      	bne.n	800a9c2 <DMA_SetConfig+0x2e2>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <DMA_SetConfig+0x2e4>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9cc:	f003 031f 	and.w	r3, r3, #31
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	409a      	lsls	r2, r3
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	2b40      	cmp	r3, #64	@ 0x40
 800a9e6:	d108      	bne.n	800a9fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	60da      	str	r2, [r3, #12]
}
 800a9f8:	e007      	b.n	800aa0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	60da      	str	r2, [r3, #12]
}
 800aa0a:	bf00      	nop
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	58025408 	.word	0x58025408
 800aa1c:	5802541c 	.word	0x5802541c
 800aa20:	58025430 	.word	0x58025430
 800aa24:	58025444 	.word	0x58025444
 800aa28:	58025458 	.word	0x58025458
 800aa2c:	5802546c 	.word	0x5802546c
 800aa30:	58025480 	.word	0x58025480
 800aa34:	58025494 	.word	0x58025494

0800aa38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a42      	ldr	r2, [pc, #264]	@ (800ab50 <DMA_CalcBaseAndBitshift+0x118>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d04a      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a41      	ldr	r2, [pc, #260]	@ (800ab54 <DMA_CalcBaseAndBitshift+0x11c>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d045      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a3f      	ldr	r2, [pc, #252]	@ (800ab58 <DMA_CalcBaseAndBitshift+0x120>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d040      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a3e      	ldr	r2, [pc, #248]	@ (800ab5c <DMA_CalcBaseAndBitshift+0x124>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d03b      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a3c      	ldr	r2, [pc, #240]	@ (800ab60 <DMA_CalcBaseAndBitshift+0x128>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d036      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a3b      	ldr	r2, [pc, #236]	@ (800ab64 <DMA_CalcBaseAndBitshift+0x12c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d031      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a39      	ldr	r2, [pc, #228]	@ (800ab68 <DMA_CalcBaseAndBitshift+0x130>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d02c      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a38      	ldr	r2, [pc, #224]	@ (800ab6c <DMA_CalcBaseAndBitshift+0x134>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d027      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a36      	ldr	r2, [pc, #216]	@ (800ab70 <DMA_CalcBaseAndBitshift+0x138>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d022      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a35      	ldr	r2, [pc, #212]	@ (800ab74 <DMA_CalcBaseAndBitshift+0x13c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d01d      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a33      	ldr	r2, [pc, #204]	@ (800ab78 <DMA_CalcBaseAndBitshift+0x140>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d018      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a32      	ldr	r2, [pc, #200]	@ (800ab7c <DMA_CalcBaseAndBitshift+0x144>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d013      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a30      	ldr	r2, [pc, #192]	@ (800ab80 <DMA_CalcBaseAndBitshift+0x148>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00e      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a2f      	ldr	r2, [pc, #188]	@ (800ab84 <DMA_CalcBaseAndBitshift+0x14c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d009      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a2d      	ldr	r2, [pc, #180]	@ (800ab88 <DMA_CalcBaseAndBitshift+0x150>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d004      	beq.n	800aae0 <DMA_CalcBaseAndBitshift+0xa8>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a2c      	ldr	r2, [pc, #176]	@ (800ab8c <DMA_CalcBaseAndBitshift+0x154>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d101      	bne.n	800aae4 <DMA_CalcBaseAndBitshift+0xac>
 800aae0:	2301      	movs	r3, #1
 800aae2:	e000      	b.n	800aae6 <DMA_CalcBaseAndBitshift+0xae>
 800aae4:	2300      	movs	r3, #0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d024      	beq.n	800ab34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	3b10      	subs	r3, #16
 800aaf2:	4a27      	ldr	r2, [pc, #156]	@ (800ab90 <DMA_CalcBaseAndBitshift+0x158>)
 800aaf4:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf8:	091b      	lsrs	r3, r3, #4
 800aafa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	4a24      	ldr	r2, [pc, #144]	@ (800ab94 <DMA_CalcBaseAndBitshift+0x15c>)
 800ab04:	5cd3      	ldrb	r3, [r2, r3]
 800ab06:	461a      	mov	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d908      	bls.n	800ab24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	4b1f      	ldr	r3, [pc, #124]	@ (800ab98 <DMA_CalcBaseAndBitshift+0x160>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	1d1a      	adds	r2, r3, #4
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab22:	e00d      	b.n	800ab40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <DMA_CalcBaseAndBitshift+0x160>)
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab32:	e005      	b.n	800ab40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	40020010 	.word	0x40020010
 800ab54:	40020028 	.word	0x40020028
 800ab58:	40020040 	.word	0x40020040
 800ab5c:	40020058 	.word	0x40020058
 800ab60:	40020070 	.word	0x40020070
 800ab64:	40020088 	.word	0x40020088
 800ab68:	400200a0 	.word	0x400200a0
 800ab6c:	400200b8 	.word	0x400200b8
 800ab70:	40020410 	.word	0x40020410
 800ab74:	40020428 	.word	0x40020428
 800ab78:	40020440 	.word	0x40020440
 800ab7c:	40020458 	.word	0x40020458
 800ab80:	40020470 	.word	0x40020470
 800ab84:	40020488 	.word	0x40020488
 800ab88:	400204a0 	.word	0x400204a0
 800ab8c:	400204b8 	.word	0x400204b8
 800ab90:	aaaaaaab 	.word	0xaaaaaaab
 800ab94:	0801d7b8 	.word	0x0801d7b8
 800ab98:	fffffc00 	.word	0xfffffc00

0800ab9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d120      	bne.n	800abf2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d858      	bhi.n	800ac6a <DMA_CheckFifoParam+0xce>
 800abb8:	a201      	add	r2, pc, #4	@ (adr r2, 800abc0 <DMA_CheckFifoParam+0x24>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800abd1 	.word	0x0800abd1
 800abc4:	0800abe3 	.word	0x0800abe3
 800abc8:	0800abd1 	.word	0x0800abd1
 800abcc:	0800ac6b 	.word	0x0800ac6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d048      	beq.n	800ac6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abe0:	e045      	b.n	800ac6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800abea:	d142      	bne.n	800ac72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abf0:	e03f      	b.n	800ac72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abfa:	d123      	bne.n	800ac44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d838      	bhi.n	800ac76 <DMA_CheckFifoParam+0xda>
 800ac04:	a201      	add	r2, pc, #4	@ (adr r2, 800ac0c <DMA_CheckFifoParam+0x70>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac1d 	.word	0x0800ac1d
 800ac10:	0800ac23 	.word	0x0800ac23
 800ac14:	0800ac1d 	.word	0x0800ac1d
 800ac18:	0800ac35 	.word	0x0800ac35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]
        break;
 800ac20:	e030      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d025      	beq.n	800ac7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac32:	e022      	b.n	800ac7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ac3c:	d11f      	bne.n	800ac7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac42:	e01c      	b.n	800ac7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d902      	bls.n	800ac52 <DMA_CheckFifoParam+0xb6>
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d003      	beq.n	800ac58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ac50:	e018      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	73fb      	strb	r3, [r7, #15]
        break;
 800ac56:	e015      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00e      	beq.n	800ac82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	73fb      	strb	r3, [r7, #15]
    break;
 800ac68:	e00b      	b.n	800ac82 <DMA_CheckFifoParam+0xe6>
        break;
 800ac6a:	bf00      	nop
 800ac6c:	e00a      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        break;
 800ac6e:	bf00      	nop
 800ac70:	e008      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        break;
 800ac72:	bf00      	nop
 800ac74:	e006      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        break;
 800ac76:	bf00      	nop
 800ac78:	e004      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        break;
 800ac7a:	bf00      	nop
 800ac7c:	e002      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
        break;
 800ac7e:	bf00      	nop
 800ac80:	e000      	b.n	800ac84 <DMA_CheckFifoParam+0xe8>
    break;
 800ac82:	bf00      	nop
    }
  }

  return status;
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop

0800ac94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a38      	ldr	r2, [pc, #224]	@ (800ad88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d022      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a36      	ldr	r2, [pc, #216]	@ (800ad8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d01d      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a35      	ldr	r2, [pc, #212]	@ (800ad90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d018      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a33      	ldr	r2, [pc, #204]	@ (800ad94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d013      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a32      	ldr	r2, [pc, #200]	@ (800ad98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d00e      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a30      	ldr	r2, [pc, #192]	@ (800ad9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d009      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a2f      	ldr	r2, [pc, #188]	@ (800ada0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d004      	beq.n	800acf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a2d      	ldr	r2, [pc, #180]	@ (800ada4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d101      	bne.n	800acf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e000      	b.n	800acf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acf6:	2300      	movs	r3, #0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d01a      	beq.n	800ad32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	3b08      	subs	r3, #8
 800ad04:	4a28      	ldr	r2, [pc, #160]	@ (800ada8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	091b      	lsrs	r3, r3, #4
 800ad0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	4b26      	ldr	r3, [pc, #152]	@ (800adac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a24      	ldr	r2, [pc, #144]	@ (800adb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ad20:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	2201      	movs	r2, #1
 800ad2a:	409a      	lsls	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ad30:	e024      	b.n	800ad7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	3b10      	subs	r3, #16
 800ad3a:	4a1e      	ldr	r2, [pc, #120]	@ (800adb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ad3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad40:	091b      	lsrs	r3, r3, #4
 800ad42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	4a1c      	ldr	r2, [pc, #112]	@ (800adb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d806      	bhi.n	800ad5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	4a1b      	ldr	r2, [pc, #108]	@ (800adbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d902      	bls.n	800ad5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3308      	adds	r3, #8
 800ad58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4b18      	ldr	r3, [pc, #96]	@ (800adc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad5e:	4413      	add	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	461a      	mov	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a16      	ldr	r2, [pc, #88]	@ (800adc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f003 031f 	and.w	r3, r3, #31
 800ad74:	2201      	movs	r2, #1
 800ad76:	409a      	lsls	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ad7c:	bf00      	nop
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	58025408 	.word	0x58025408
 800ad8c:	5802541c 	.word	0x5802541c
 800ad90:	58025430 	.word	0x58025430
 800ad94:	58025444 	.word	0x58025444
 800ad98:	58025458 	.word	0x58025458
 800ad9c:	5802546c 	.word	0x5802546c
 800ada0:	58025480 	.word	0x58025480
 800ada4:	58025494 	.word	0x58025494
 800ada8:	cccccccd 	.word	0xcccccccd
 800adac:	16009600 	.word	0x16009600
 800adb0:	58025880 	.word	0x58025880
 800adb4:	aaaaaaab 	.word	0xaaaaaaab
 800adb8:	400204b8 	.word	0x400204b8
 800adbc:	4002040f 	.word	0x4002040f
 800adc0:	10008200 	.word	0x10008200
 800adc4:	40020880 	.word	0x40020880

0800adc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d04a      	beq.n	800ae74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d847      	bhi.n	800ae74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a25      	ldr	r2, [pc, #148]	@ (800ae80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d022      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a24      	ldr	r2, [pc, #144]	@ (800ae84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d01d      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a22      	ldr	r2, [pc, #136]	@ (800ae88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d018      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a21      	ldr	r2, [pc, #132]	@ (800ae8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d013      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a1f      	ldr	r2, [pc, #124]	@ (800ae90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d00e      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ae94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d009      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1c      	ldr	r2, [pc, #112]	@ (800ae98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d004      	beq.n	800ae34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a1b      	ldr	r2, [pc, #108]	@ (800ae9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d101      	bne.n	800ae38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	4b17      	ldr	r3, [pc, #92]	@ (800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	461a      	mov	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a15      	ldr	r2, [pc, #84]	@ (800aea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae50:	671a      	str	r2, [r3, #112]	@ 0x70
 800ae52:	e009      	b.n	800ae68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4b14      	ldr	r3, [pc, #80]	@ (800aea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a11      	ldr	r2, [pc, #68]	@ (800aeac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	409a      	lsls	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	58025408 	.word	0x58025408
 800ae84:	5802541c 	.word	0x5802541c
 800ae88:	58025430 	.word	0x58025430
 800ae8c:	58025444 	.word	0x58025444
 800ae90:	58025458 	.word	0x58025458
 800ae94:	5802546c 	.word	0x5802546c
 800ae98:	58025480 	.word	0x58025480
 800ae9c:	58025494 	.word	0x58025494
 800aea0:	1600963f 	.word	0x1600963f
 800aea4:	58025940 	.word	0x58025940
 800aea8:	1000823f 	.word	0x1000823f
 800aeac:	40020940 	.word	0x40020940

0800aeb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b089      	sub	sp, #36	@ 0x24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aebe:	4b86      	ldr	r3, [pc, #536]	@ (800b0d8 <HAL_GPIO_Init+0x228>)
 800aec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aec2:	e18c      	b.n	800b1de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	2101      	movs	r1, #1
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	fa01 f303 	lsl.w	r3, r1, r3
 800aed0:	4013      	ands	r3, r2
 800aed2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 817e 	beq.w	800b1d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f003 0303 	and.w	r3, r3, #3
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d005      	beq.n	800aef4 <HAL_GPIO_Init+0x44>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f003 0303 	and.w	r3, r3, #3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d130      	bne.n	800af56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	2203      	movs	r2, #3
 800af00:	fa02 f303 	lsl.w	r3, r2, r3
 800af04:	43db      	mvns	r3, r3
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	4013      	ands	r3, r2
 800af0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	005b      	lsls	r3, r3, #1
 800af14:	fa02 f303 	lsl.w	r3, r2, r3
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af2a:	2201      	movs	r2, #1
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	fa02 f303 	lsl.w	r3, r2, r3
 800af32:	43db      	mvns	r3, r3
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	4013      	ands	r3, r2
 800af38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	091b      	lsrs	r3, r3, #4
 800af40:	f003 0201 	and.w	r2, r3, #1
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	fa02 f303 	lsl.w	r3, r2, r3
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d017      	beq.n	800af92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	2203      	movs	r2, #3
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	43db      	mvns	r3, r3
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	4013      	ands	r3, r2
 800af78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	4313      	orrs	r3, r2
 800af8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	f003 0303 	and.w	r3, r3, #3
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d123      	bne.n	800afe6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	08da      	lsrs	r2, r3, #3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3208      	adds	r2, #8
 800afa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	f003 0307 	and.w	r3, r3, #7
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	220f      	movs	r2, #15
 800afb6:	fa02 f303 	lsl.w	r3, r2, r3
 800afba:	43db      	mvns	r3, r3
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	4013      	ands	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	fa02 f303 	lsl.w	r3, r2, r3
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	08da      	lsrs	r2, r3, #3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3208      	adds	r2, #8
 800afe0:	69b9      	ldr	r1, [r7, #24]
 800afe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	2203      	movs	r2, #3
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	43db      	mvns	r3, r3
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	4013      	ands	r3, r2
 800affc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f003 0203 	and.w	r2, r3, #3
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	fa02 f303 	lsl.w	r3, r2, r3
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	4313      	orrs	r3, r2
 800b012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 80d8 	beq.w	800b1d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b028:	4b2c      	ldr	r3, [pc, #176]	@ (800b0dc <HAL_GPIO_Init+0x22c>)
 800b02a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b02e:	4a2b      	ldr	r2, [pc, #172]	@ (800b0dc <HAL_GPIO_Init+0x22c>)
 800b030:	f043 0302 	orr.w	r3, r3, #2
 800b034:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b038:	4b28      	ldr	r3, [pc, #160]	@ (800b0dc <HAL_GPIO_Init+0x22c>)
 800b03a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b03e:	f003 0302 	and.w	r3, r3, #2
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b046:	4a26      	ldr	r2, [pc, #152]	@ (800b0e0 <HAL_GPIO_Init+0x230>)
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	089b      	lsrs	r3, r3, #2
 800b04c:	3302      	adds	r3, #2
 800b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	220f      	movs	r2, #15
 800b05e:	fa02 f303 	lsl.w	r3, r2, r3
 800b062:	43db      	mvns	r3, r3
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	4013      	ands	r3, r2
 800b068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e4 <HAL_GPIO_Init+0x234>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d04a      	beq.n	800b108 <HAL_GPIO_Init+0x258>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e8 <HAL_GPIO_Init+0x238>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d02b      	beq.n	800b0d2 <HAL_GPIO_Init+0x222>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0ec <HAL_GPIO_Init+0x23c>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d025      	beq.n	800b0ce <HAL_GPIO_Init+0x21e>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a1a      	ldr	r2, [pc, #104]	@ (800b0f0 <HAL_GPIO_Init+0x240>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d01f      	beq.n	800b0ca <HAL_GPIO_Init+0x21a>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a19      	ldr	r2, [pc, #100]	@ (800b0f4 <HAL_GPIO_Init+0x244>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d019      	beq.n	800b0c6 <HAL_GPIO_Init+0x216>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a18      	ldr	r2, [pc, #96]	@ (800b0f8 <HAL_GPIO_Init+0x248>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d013      	beq.n	800b0c2 <HAL_GPIO_Init+0x212>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a17      	ldr	r2, [pc, #92]	@ (800b0fc <HAL_GPIO_Init+0x24c>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d00d      	beq.n	800b0be <HAL_GPIO_Init+0x20e>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a16      	ldr	r2, [pc, #88]	@ (800b100 <HAL_GPIO_Init+0x250>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d007      	beq.n	800b0ba <HAL_GPIO_Init+0x20a>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a15      	ldr	r2, [pc, #84]	@ (800b104 <HAL_GPIO_Init+0x254>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d101      	bne.n	800b0b6 <HAL_GPIO_Init+0x206>
 800b0b2:	2309      	movs	r3, #9
 800b0b4:	e029      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0b6:	230a      	movs	r3, #10
 800b0b8:	e027      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0ba:	2307      	movs	r3, #7
 800b0bc:	e025      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0be:	2306      	movs	r3, #6
 800b0c0:	e023      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0c2:	2305      	movs	r3, #5
 800b0c4:	e021      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0c6:	2304      	movs	r3, #4
 800b0c8:	e01f      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e01d      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e01b      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e019      	b.n	800b10a <HAL_GPIO_Init+0x25a>
 800b0d6:	bf00      	nop
 800b0d8:	58000080 	.word	0x58000080
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	58000400 	.word	0x58000400
 800b0e4:	58020000 	.word	0x58020000
 800b0e8:	58020400 	.word	0x58020400
 800b0ec:	58020800 	.word	0x58020800
 800b0f0:	58020c00 	.word	0x58020c00
 800b0f4:	58021000 	.word	0x58021000
 800b0f8:	58021400 	.word	0x58021400
 800b0fc:	58021800 	.word	0x58021800
 800b100:	58021c00 	.word	0x58021c00
 800b104:	58022400 	.word	0x58022400
 800b108:	2300      	movs	r3, #0
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	f002 0203 	and.w	r2, r2, #3
 800b110:	0092      	lsls	r2, r2, #2
 800b112:	4093      	lsls	r3, r2
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	4313      	orrs	r3, r2
 800b118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b11a:	4938      	ldr	r1, [pc, #224]	@ (800b1fc <HAL_GPIO_Init+0x34c>)
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	089b      	lsrs	r3, r3, #2
 800b120:	3302      	adds	r3, #2
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	43db      	mvns	r3, r3
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	4013      	ands	r3, r2
 800b138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b14e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	43db      	mvns	r3, r3
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	4013      	ands	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d003      	beq.n	800b17c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b17c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	43db      	mvns	r3, r3
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	4013      	ands	r3, r2
 800b192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	43db      	mvns	r3, r3
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f47f ae6b 	bne.w	800aec4 <HAL_GPIO_Init+0x14>
  }
}
 800b1ee:	bf00      	nop
 800b1f0:	bf00      	nop
 800b1f2:	3724      	adds	r7, #36	@ 0x24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	58000400 	.word	0x58000400

0800b200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	887b      	ldrh	r3, [r7, #2]
 800b212:	4013      	ands	r3, r2
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b218:	2301      	movs	r3, #1
 800b21a:	73fb      	strb	r3, [r7, #15]
 800b21c:	e001      	b.n	800b222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	807b      	strh	r3, [r7, #2]
 800b23c:	4613      	mov	r3, r2
 800b23e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b240:	787b      	ldrb	r3, [r7, #1]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b246:	887a      	ldrh	r2, [r7, #2]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b24c:	e003      	b.n	800b256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b24e:	887b      	ldrh	r3, [r7, #2]
 800b250:	041a      	lsls	r2, r3, #16
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	619a      	str	r2, [r3, #24]
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	4603      	mov	r3, r0
 800b26a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b26c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b270:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b274:	88fb      	ldrh	r3, [r7, #6]
 800b276:	4013      	ands	r3, r2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d008      	beq.n	800b28e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b27c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7f5 ffe9 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b28e:	bf00      	nop
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e08b      	b.n	800b3c2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7f7 f930 	bl	8002524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2224      	movs	r2, #36	@ 0x24
 800b2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0201 	bic.w	r2, r2, #1
 800b2da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b2e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689a      	ldr	r2, [r3, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d107      	bne.n	800b312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689a      	ldr	r2, [r3, #8]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b30e:	609a      	str	r2, [r3, #8]
 800b310:	e006      	b.n	800b320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b31e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d108      	bne.n	800b33a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b336:	605a      	str	r2, [r3, #4]
 800b338:	e007      	b.n	800b34a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6859      	ldr	r1, [r3, #4]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	4b1d      	ldr	r3, [pc, #116]	@ (800b3cc <HAL_I2C_Init+0x134>)
 800b356:	430b      	orrs	r3, r1
 800b358:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b368:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69d9      	ldr	r1, [r3, #28]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1a      	ldr	r2, [r3, #32]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f042 0201 	orr.w	r2, r2, #1
 800b3a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	02008000 	.word	0x02008000

0800b3d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	d138      	bne.n	800b458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e032      	b.n	800b45a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2224      	movs	r2, #36	@ 0x24
 800b400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0201 	bic.w	r2, r2, #1
 800b412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6819      	ldr	r1, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f042 0201 	orr.w	r2, r2, #1
 800b442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b454:	2300      	movs	r3, #0
 800b456:	e000      	b.n	800b45a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b458:	2302      	movs	r3, #2
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b466:	b480      	push	{r7}
 800b468:	b085      	sub	sp, #20
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d139      	bne.n	800b4f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b486:	2302      	movs	r3, #2
 800b488:	e033      	b.n	800b4f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2224      	movs	r2, #36	@ 0x24
 800b496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0201 	bic.w	r2, r2, #1
 800b4a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	021b      	lsls	r3, r3, #8
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f042 0201 	orr.w	r2, r2, #1
 800b4da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2220      	movs	r2, #32
 800b4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e000      	b.n	800b4f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b4f0:	2302      	movs	r3, #2
  }
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b086      	sub	sp, #24
 800b502:	af02      	add	r7, sp, #8
 800b504:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0fe      	b.n	800b70e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f00c fb5f 	bl	8017be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2203      	movs	r2, #3
 800b52e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4618      	mov	r0, r3
 800b538:	f008 ff1b 	bl	8014372 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	7c1a      	ldrb	r2, [r3, #16]
 800b544:	f88d 2000 	strb.w	r2, [sp]
 800b548:	3304      	adds	r3, #4
 800b54a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b54c:	f008 fdec 	bl	8014128 <USB_CoreInit>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2202      	movs	r2, #2
 800b55a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e0d5      	b.n	800b70e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2100      	movs	r1, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f008 ff13 	bl	8014394 <USB_SetCurrentMode>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0c6      	b.n	800b70e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
 800b584:	e04a      	b.n	800b61c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b586:	7bfa      	ldrb	r2, [r7, #15]
 800b588:	6879      	ldr	r1, [r7, #4]
 800b58a:	4613      	mov	r3, r2
 800b58c:	00db      	lsls	r3, r3, #3
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	440b      	add	r3, r1
 800b594:	3315      	adds	r3, #21
 800b596:	2201      	movs	r2, #1
 800b598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b59a:	7bfa      	ldrb	r2, [r7, #15]
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	3314      	adds	r3, #20
 800b5aa:	7bfa      	ldrb	r2, [r7, #15]
 800b5ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b5ae:	7bfa      	ldrb	r2, [r7, #15]
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	b298      	uxth	r0, r3
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	332e      	adds	r3, #46	@ 0x2e
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b5c6:	7bfa      	ldrb	r2, [r7, #15]
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3318      	adds	r3, #24
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b5da:	7bfa      	ldrb	r2, [r7, #15]
 800b5dc:	6879      	ldr	r1, [r7, #4]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	00db      	lsls	r3, r3, #3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	331c      	adds	r3, #28
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b5ee:	7bfa      	ldrb	r2, [r7, #15]
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	4413      	add	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3320      	adds	r3, #32
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b602:	7bfa      	ldrb	r2, [r7, #15]
 800b604:	6879      	ldr	r1, [r7, #4]
 800b606:	4613      	mov	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4413      	add	r3, r2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	440b      	add	r3, r1
 800b610:	3324      	adds	r3, #36	@ 0x24
 800b612:	2200      	movs	r2, #0
 800b614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	3301      	adds	r3, #1
 800b61a:	73fb      	strb	r3, [r7, #15]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	791b      	ldrb	r3, [r3, #4]
 800b620:	7bfa      	ldrb	r2, [r7, #15]
 800b622:	429a      	cmp	r2, r3
 800b624:	d3af      	bcc.n	800b586 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]
 800b62a:	e044      	b.n	800b6b6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b62c:	7bfa      	ldrb	r2, [r7, #15]
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4613      	mov	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	440b      	add	r3, r1
 800b63a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b642:	7bfa      	ldrb	r2, [r7, #15]
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	440b      	add	r3, r1
 800b650:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b654:	7bfa      	ldrb	r2, [r7, #15]
 800b656:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b658:	7bfa      	ldrb	r2, [r7, #15]
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	4613      	mov	r3, r2
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	4413      	add	r3, r2
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	440b      	add	r3, r1
 800b666:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b66a:	2200      	movs	r2, #0
 800b66c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b66e:	7bfa      	ldrb	r2, [r7, #15]
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	4613      	mov	r3, r2
 800b674:	00db      	lsls	r3, r3, #3
 800b676:	4413      	add	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	440b      	add	r3, r1
 800b67c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b684:	7bfa      	ldrb	r2, [r7, #15]
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4613      	mov	r3, r2
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	440b      	add	r3, r1
 800b692:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b696:	2200      	movs	r2, #0
 800b698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b69a:	7bfa      	ldrb	r2, [r7, #15]
 800b69c:	6879      	ldr	r1, [r7, #4]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	00db      	lsls	r3, r3, #3
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	440b      	add	r3, r1
 800b6a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	73fb      	strb	r3, [r7, #15]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	791b      	ldrb	r3, [r3, #4]
 800b6ba:	7bfa      	ldrb	r2, [r7, #15]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d3b5      	bcc.n	800b62c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7c1a      	ldrb	r2, [r3, #16]
 800b6c8:	f88d 2000 	strb.w	r2, [sp]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6d0:	f008 feac 	bl	801442c <USB_DevInit>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e013      	b.n	800b70e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	7b1b      	ldrb	r3, [r3, #12]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d102      	bne.n	800b702 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 f96d 	bl	800c9dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4618      	mov	r0, r3
 800b708:	f009 feeb 	bl	80154e2 <USB_DevDisconnect>

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <HAL_PCD_Start+0x1c>
 800b72e:	2302      	movs	r3, #2
 800b730:	e022      	b.n	800b778 <HAL_PCD_Start+0x62>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2201      	movs	r2, #1
 800b736:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d105      	bne.n	800b75a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b752:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f008 fdf6 	bl	8014350 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4618      	mov	r0, r3
 800b76a:	f009 fe99 	bl	80154a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b780:	b590      	push	{r4, r7, lr}
 800b782:	b08d      	sub	sp, #52	@ 0x34
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4618      	mov	r0, r3
 800b798:	f009 ff57 	bl	801564a <USB_GetMode>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f040 84b9 	bne.w	800c116 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f009 febb 	bl	8015524 <USB_ReadInterrupts>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 84af 	beq.w	800c114 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f009 fea8 	bl	8015524 <USB_ReadInterrupts>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d107      	bne.n	800b7ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	695a      	ldr	r2, [r3, #20]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f002 0202 	and.w	r2, r2, #2
 800b7ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f009 fe96 	bl	8015524 <USB_ReadInterrupts>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f003 0310 	and.w	r3, r3, #16
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d161      	bne.n	800b8c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	699a      	ldr	r2, [r3, #24]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0210 	bic.w	r2, r2, #16
 800b810:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	f003 020f 	and.w	r2, r3, #15
 800b81e:	4613      	mov	r3, r2
 800b820:	00db      	lsls	r3, r3, #3
 800b822:	4413      	add	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	4413      	add	r3, r2
 800b82e:	3304      	adds	r3, #4
 800b830:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	0c5b      	lsrs	r3, r3, #17
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d124      	bne.n	800b888 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b844:	4013      	ands	r3, r2
 800b846:	2b00      	cmp	r3, #0
 800b848:	d035      	beq.n	800b8b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	091b      	lsrs	r3, r3, #4
 800b852:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b858:	b29b      	uxth	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	6a38      	ldr	r0, [r7, #32]
 800b85e:	f009 fccd 	bl	80151fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	68da      	ldr	r2, [r3, #12]
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	091b      	lsrs	r3, r3, #4
 800b86a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b86e:	441a      	add	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	695a      	ldr	r2, [r3, #20]
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	091b      	lsrs	r3, r3, #4
 800b87c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b880:	441a      	add	r2, r3
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	615a      	str	r2, [r3, #20]
 800b886:	e016      	b.n	800b8b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	0c5b      	lsrs	r3, r3, #17
 800b88c:	f003 030f 	and.w	r3, r3, #15
 800b890:	2b06      	cmp	r3, #6
 800b892:	d110      	bne.n	800b8b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b89a:	2208      	movs	r2, #8
 800b89c:	4619      	mov	r1, r3
 800b89e:	6a38      	ldr	r0, [r7, #32]
 800b8a0:	f009 fcac 	bl	80151fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	695a      	ldr	r2, [r3, #20]
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	091b      	lsrs	r3, r3, #4
 800b8ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8b0:	441a      	add	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699a      	ldr	r2, [r3, #24]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f042 0210 	orr.w	r2, r2, #16
 800b8c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f009 fe2a 	bl	8015524 <USB_ReadInterrupts>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b8d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b8da:	f040 80a7 	bne.w	800ba2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f009 fe2f 	bl	801554a <USB_ReadDevAllOutEpInterrupt>
 800b8ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b8ee:	e099      	b.n	800ba24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 808e 	beq.w	800ba18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f009 fe53 	bl	80155b2 <USB_ReadDevOutEPInterrupt>
 800b90c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00c      	beq.n	800b932 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b924:	461a      	mov	r2, r3
 800b926:	2301      	movs	r3, #1
 800b928:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b92a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fecf 	bl	800c6d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f003 0308 	and.w	r3, r3, #8
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b948:	461a      	mov	r2, r3
 800b94a:	2308      	movs	r3, #8
 800b94c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b94e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 ffa5 	bl	800c8a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f003 0310 	and.w	r3, r3, #16
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	4413      	add	r3, r2
 800b968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b96c:	461a      	mov	r2, r3
 800b96e:	2310      	movs	r3, #16
 800b970:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	f003 0302 	and.w	r3, r3, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d030      	beq.n	800b9de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b984:	2b80      	cmp	r3, #128	@ 0x80
 800b986:	d109      	bne.n	800b99c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b99a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b99c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b99e:	4613      	mov	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	78db      	ldrb	r3, [r3, #3]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d108      	bne.n	800b9cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f00c fa06 	bl	8017dd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2302      	movs	r3, #2
 800b9dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d008      	beq.n	800b9fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2320      	movs	r3, #32
 800b9f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d009      	beq.n	800ba18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba10:	461a      	mov	r2, r3
 800ba12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ba18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	085b      	lsrs	r3, r3, #1
 800ba22:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f47f af62 	bne.w	800b8f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f009 fd77 	bl	8015524 <USB_ReadInterrupts>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba40:	f040 80db 	bne.w	800bbfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f009 fd98 	bl	801557e <USB_ReadDevAllInEpInterrupt>
 800ba4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800ba54:	e0cd      	b.n	800bbf2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ba56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba58:	f003 0301 	and.w	r3, r3, #1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f000 80c2 	beq.w	800bbe6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f009 fdbe 	bl	80155ee <USB_ReadDevInEPInterrupt>
 800ba72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d057      	beq.n	800bb2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	f003 030f 	and.w	r3, r3, #15
 800ba84:	2201      	movs	r2, #1
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	43db      	mvns	r3, r3
 800ba98:	69f9      	ldr	r1, [r7, #28]
 800ba9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba9e:	4013      	ands	r3, r2
 800baa0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baae:	461a      	mov	r2, r3
 800bab0:	2301      	movs	r3, #1
 800bab2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	799b      	ldrb	r3, [r3, #6]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d132      	bne.n	800bb22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac0:	4613      	mov	r3, r2
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	3320      	adds	r3, #32
 800bacc:	6819      	ldr	r1, [r3, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad2:	4613      	mov	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4403      	add	r3, r0
 800badc:	331c      	adds	r3, #28
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4419      	add	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bae6:	4613      	mov	r3, r2
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4403      	add	r3, r0
 800baf0:	3320      	adds	r3, #32
 800baf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d113      	bne.n	800bb22 <HAL_PCD_IRQHandler+0x3a2>
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bafe:	4613      	mov	r3, r2
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	440b      	add	r3, r1
 800bb08:	3324      	adds	r3, #36	@ 0x24
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d108      	bne.n	800bb22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	f009 fdc7 	bl	80156b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f00c f8d0 	bl	8017cce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb44:	461a      	mov	r2, r3
 800bb46:	2308      	movs	r3, #8
 800bb48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f003 0310 	and.w	r3, r3, #16
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb56:	015a      	lsls	r2, r3, #5
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb60:	461a      	mov	r2, r3
 800bb62:	2310      	movs	r3, #16
 800bb64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d008      	beq.n	800bb82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	2340      	movs	r3, #64	@ 0x40
 800bb80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d023      	beq.n	800bbd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800bb8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb8e:	6a38      	ldr	r0, [r7, #32]
 800bb90:	f008 fdaa 	bl	80146e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bb94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb96:	4613      	mov	r3, r2
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	3310      	adds	r3, #16
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	4413      	add	r3, r2
 800bba4:	3304      	adds	r3, #4
 800bba6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d108      	bne.n	800bbc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f00c f91d 	bl	8017dfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbce:	461a      	mov	r2, r3
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bbde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fce8 	bl	800c5b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	3301      	adds	r3, #1
 800bbea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbee:	085b      	lsrs	r3, r3, #1
 800bbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f47f af2e 	bne.w	800ba56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f009 fc90 	bl	8015524 <USB_ReadInterrupts>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc0e:	d122      	bne.n	800bc56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d108      	bne.n	800bc40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bc36:	2100      	movs	r1, #0
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fef3 	bl	800ca24 <HAL_PCDEx_LPM_Callback>
 800bc3e:	e002      	b.n	800bc46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f00c f8bb 	bl	8017dbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	695a      	ldr	r2, [r3, #20]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bc54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f009 fc62 	bl	8015524 <USB_ReadInterrupts>
 800bc60:	4603      	mov	r3, r0
 800bc62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc6a:	d112      	bne.n	800bc92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d102      	bne.n	800bc82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f00c f877 	bl	8017d70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	695a      	ldr	r2, [r3, #20]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bc90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f009 fc44 	bl	8015524 <USB_ReadInterrupts>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bca6:	d121      	bne.n	800bcec <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	695a      	ldr	r2, [r3, #20]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800bcb6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d111      	bne.n	800bce6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcd0:	089b      	lsrs	r3, r3, #2
 800bcd2:	f003 020f 	and.w	r2, r3, #15
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800bcdc:	2101      	movs	r1, #1
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fea0 	bl	800ca24 <HAL_PCDEx_LPM_Callback>
 800bce4:	e002      	b.n	800bcec <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f00c f842 	bl	8017d70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f009 fc17 	bl	8015524 <USB_ReadInterrupts>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bcfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd00:	f040 80b7 	bne.w	800be72 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	69fa      	ldr	r2, [r7, #28]
 800bd0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd12:	f023 0301 	bic.w	r3, r3, #1
 800bd16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2110      	movs	r1, #16
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f008 fce2 	bl	80146e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd24:	2300      	movs	r3, #0
 800bd26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd28:	e046      	b.n	800bdb8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2c:	015a      	lsls	r2, r3, #5
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	4413      	add	r3, r2
 800bd32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd36:	461a      	mov	r2, r3
 800bd38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd4e:	0151      	lsls	r1, r2, #5
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	440a      	add	r2, r1
 800bd54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bd70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd82:	0151      	lsls	r1, r2, #5
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	440a      	add	r2, r1
 800bd88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bda2:	0151      	lsls	r1, r2, #5
 800bda4:	69fa      	ldr	r2, [r7, #28]
 800bda6:	440a      	add	r2, r1
 800bda8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bdb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	791b      	ldrb	r3, [r3, #4]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d3b2      	bcc.n	800bd2a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	69fa      	ldr	r2, [r7, #28]
 800bdce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdd2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bdd6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7bdb      	ldrb	r3, [r3, #15]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d016      	beq.n	800be0e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bde6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdea:	69fa      	ldr	r2, [r7, #28]
 800bdec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bdf0:	f043 030b 	orr.w	r3, r3, #11
 800bdf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be00:	69fa      	ldr	r2, [r7, #28]
 800be02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be06:	f043 030b 	orr.w	r3, r3, #11
 800be0a:	6453      	str	r3, [r2, #68]	@ 0x44
 800be0c:	e015      	b.n	800be3a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be14:	695a      	ldr	r2, [r3, #20]
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be1c:	4619      	mov	r1, r3
 800be1e:	f242 032b 	movw	r3, #8235	@ 0x202b
 800be22:	4313      	orrs	r3, r2
 800be24:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	69fa      	ldr	r2, [r7, #28]
 800be30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be34:	f043 030b 	orr.w	r3, r3, #11
 800be38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	69fa      	ldr	r2, [r7, #28]
 800be44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be48:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800be4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800be5c:	461a      	mov	r2, r3
 800be5e:	f009 fc27 	bl	80156b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	695a      	ldr	r2, [r3, #20]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800be70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f009 fb54 	bl	8015524 <USB_ReadInterrupts>
 800be7c:	4603      	mov	r3, r0
 800be7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be86:	d123      	bne.n	800bed0 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f009 fbeb 	bl	8015668 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4618      	mov	r0, r3
 800be98:	f008 fc9f 	bl	80147da <USB_GetDevSpeed>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681c      	ldr	r4, [r3, #0]
 800bea8:	f001 fd1c 	bl	800d8e4 <HAL_RCC_GetHCLKFreq>
 800beac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800beb2:	461a      	mov	r2, r3
 800beb4:	4620      	mov	r0, r4
 800beb6:	f008 f9a9 	bl	801420c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f00b ff2f 	bl	8017d1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	695a      	ldr	r2, [r3, #20]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bece:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f009 fb25 	bl	8015524 <USB_ReadInterrupts>
 800beda:	4603      	mov	r3, r0
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b08      	cmp	r3, #8
 800bee2:	d10a      	bne.n	800befa <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f00b ff0c 	bl	8017d02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	695a      	ldr	r2, [r3, #20]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f002 0208 	and.w	r2, r2, #8
 800bef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f009 fb10 	bl	8015524 <USB_ReadInterrupts>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf0a:	2b80      	cmp	r3, #128	@ 0x80
 800bf0c:	d123      	bne.n	800bf56 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bf0e:	6a3b      	ldr	r3, [r7, #32]
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf1e:	e014      	b.n	800bf4a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf24:	4613      	mov	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d105      	bne.n	800bf44 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb08 	bl	800c554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	3301      	adds	r3, #1
 800bf48:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	791b      	ldrb	r3, [r3, #4]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d3e4      	bcc.n	800bf20 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f009 fae2 	bl	8015524 <USB_ReadInterrupts>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf6a:	d13c      	bne.n	800bfe6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf70:	e02b      	b.n	800bfca <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf86:	4613      	mov	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	440b      	add	r3, r1
 800bf90:	3318      	adds	r3, #24
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d115      	bne.n	800bfc4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bf98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	da12      	bge.n	800bfc4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	3317      	adds	r3, #23
 800bfae:	2201      	movs	r2, #1
 800bfb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fac8 	bl	800c554 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	791b      	ldrb	r3, [r3, #4]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d3cd      	bcc.n	800bf72 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	695a      	ldr	r2, [r3, #20]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bfe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f009 fa9a 	bl	8015524 <USB_ReadInterrupts>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bffa:	d156      	bne.n	800c0aa <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bffc:	2301      	movs	r3, #1
 800bffe:	627b      	str	r3, [r7, #36]	@ 0x24
 800c000:	e045      	b.n	800c08e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	015a      	lsls	r2, r3, #5
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	4413      	add	r3, r2
 800c00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c016:	4613      	mov	r3, r2
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	4413      	add	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	440b      	add	r3, r1
 800c020:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d12e      	bne.n	800c088 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c02a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	da2b      	bge.n	800c088 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c03c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c040:	429a      	cmp	r2, r3
 800c042:	d121      	bne.n	800c088 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c048:	4613      	mov	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c056:	2201      	movs	r2, #1
 800c058:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	69fa      	ldr	r2, [r7, #28]
 800c07c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c084:	6053      	str	r3, [r2, #4]
            break;
 800c086:	e008      	b.n	800c09a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08a:	3301      	adds	r3, #1
 800c08c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	791b      	ldrb	r3, [r3, #4]
 800c092:	461a      	mov	r2, r3
 800c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c096:	4293      	cmp	r3, r2
 800c098:	d3b3      	bcc.n	800c002 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	695a      	ldr	r2, [r3, #20]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c0a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f009 fa38 	bl	8015524 <USB_ReadInterrupts>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0be:	d10a      	bne.n	800c0d6 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f00b fead 	bl	8017e20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	695a      	ldr	r2, [r3, #20]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c0d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f009 fa22 	bl	8015524 <USB_ReadInterrupts>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f003 0304 	and.w	r3, r3, #4
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d115      	bne.n	800c116 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f00b fe9d 	bl	8017e3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6859      	ldr	r1, [r3, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	430a      	orrs	r2, r1
 800c110:	605a      	str	r2, [r3, #4]
 800c112:	e000      	b.n	800c116 <HAL_PCD_IRQHandler+0x996>
      return;
 800c114:	bf00      	nop
    }
  }
}
 800c116:	3734      	adds	r7, #52	@ 0x34
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd90      	pop	{r4, r7, pc}

0800c11c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d101      	bne.n	800c136 <HAL_PCD_SetAddress+0x1a>
 800c132:	2302      	movs	r3, #2
 800c134:	e012      	b.n	800c15c <HAL_PCD_SetAddress+0x40>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	78fa      	ldrb	r2, [r7, #3]
 800c142:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f009 f981 	bl	8015454 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	461a      	mov	r2, r3
 800c172:	4603      	mov	r3, r0
 800c174:	70fb      	strb	r3, [r7, #3]
 800c176:	460b      	mov	r3, r1
 800c178:	803b      	strh	r3, [r7, #0]
 800c17a:	4613      	mov	r3, r2
 800c17c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c186:	2b00      	cmp	r3, #0
 800c188:	da0f      	bge.n	800c1aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c18a:	78fb      	ldrb	r3, [r7, #3]
 800c18c:	f003 020f 	and.w	r2, r3, #15
 800c190:	4613      	mov	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	4413      	add	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	3310      	adds	r3, #16
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	4413      	add	r3, r2
 800c19e:	3304      	adds	r3, #4
 800c1a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	705a      	strb	r2, [r3, #1]
 800c1a8:	e00f      	b.n	800c1ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1aa:	78fb      	ldrb	r3, [r7, #3]
 800c1ac:	f003 020f 	and.w	r2, r3, #15
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	4413      	add	r3, r2
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	f003 030f 	and.w	r3, r3, #15
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c1d6:	883a      	ldrh	r2, [r7, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	78ba      	ldrb	r2, [r7, #2]
 800c1e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	785b      	ldrb	r3, [r3, #1]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c1f4:	78bb      	ldrb	r3, [r7, #2]
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d102      	bne.n	800c200 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c206:	2b01      	cmp	r3, #1
 800c208:	d101      	bne.n	800c20e <HAL_PCD_EP_Open+0xaa>
 800c20a:	2302      	movs	r3, #2
 800c20c:	e00e      	b.n	800c22c <HAL_PCD_EP_Open+0xc8>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68f9      	ldr	r1, [r7, #12]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f008 fb01 	bl	8014824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c22a:	7afb      	ldrb	r3, [r7, #11]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c244:	2b00      	cmp	r3, #0
 800c246:	da0f      	bge.n	800c268 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	f003 020f 	and.w	r2, r3, #15
 800c24e:	4613      	mov	r3, r2
 800c250:	00db      	lsls	r3, r3, #3
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	3310      	adds	r3, #16
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4413      	add	r3, r2
 800c25c:	3304      	adds	r3, #4
 800c25e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	705a      	strb	r2, [r3, #1]
 800c266:	e00f      	b.n	800c288 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	f003 020f 	and.w	r2, r3, #15
 800c26e:	4613      	mov	r3, r2
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	3304      	adds	r3, #4
 800c280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c288:	78fb      	ldrb	r3, [r7, #3]
 800c28a:	f003 030f 	and.w	r3, r3, #15
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d101      	bne.n	800c2a2 <HAL_PCD_EP_Close+0x6e>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e00e      	b.n	800c2c0 <HAL_PCD_EP_Close+0x8c>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f008 fb3f 	bl	8014934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2d8:	7afb      	ldrb	r3, [r7, #11]
 800c2da:	f003 020f 	and.w	r2, r3, #15
 800c2de:	4613      	mov	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	4413      	add	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2200      	movs	r2, #0
 800c302:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	2200      	movs	r2, #0
 800c308:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c30a:	7afb      	ldrb	r3, [r7, #11]
 800c30c:	f003 030f 	and.w	r3, r3, #15
 800c310:	b2da      	uxtb	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	799b      	ldrb	r3, [r3, #6]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d102      	bne.n	800c324 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6818      	ldr	r0, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	799b      	ldrb	r3, [r3, #6]
 800c32c:	461a      	mov	r2, r3
 800c32e:	6979      	ldr	r1, [r7, #20]
 800c330:	f008 fbdc 	bl	8014aec <USB_EPStartXfer>

  return HAL_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c33e:	b480      	push	{r7}
 800c340:	b083      	sub	sp, #12
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	460b      	mov	r3, r1
 800c348:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	f003 020f 	and.w	r2, r3, #15
 800c350:	6879      	ldr	r1, [r7, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c360:	681b      	ldr	r3, [r3, #0]
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b086      	sub	sp, #24
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
 800c37a:	460b      	mov	r3, r1
 800c37c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	f003 020f 	and.w	r2, r3, #15
 800c384:	4613      	mov	r3, r2
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	4413      	add	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	3310      	adds	r3, #16
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	3304      	adds	r3, #4
 800c394:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c3ae:	7afb      	ldrb	r3, [r7, #11]
 800c3b0:	f003 030f 	and.w	r3, r3, #15
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	799b      	ldrb	r3, [r3, #6]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d102      	bne.n	800c3c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	799b      	ldrb	r3, [r3, #6]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6979      	ldr	r1, [r7, #20]
 800c3d4:	f008 fb8a 	bl	8014aec <USB_EPStartXfer>

  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c3ee:	78fb      	ldrb	r3, [r7, #3]
 800c3f0:	f003 030f 	and.w	r3, r3, #15
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7912      	ldrb	r2, [r2, #4]
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d901      	bls.n	800c400 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e04f      	b.n	800c4a0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c404:	2b00      	cmp	r3, #0
 800c406:	da0f      	bge.n	800c428 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	f003 020f 	and.w	r2, r3, #15
 800c40e:	4613      	mov	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	4413      	add	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	3310      	adds	r3, #16
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	3304      	adds	r3, #4
 800c41e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2201      	movs	r2, #1
 800c424:	705a      	strb	r2, [r3, #1]
 800c426:	e00d      	b.n	800c444 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	4613      	mov	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	4413      	add	r3, r2
 800c43a:	3304      	adds	r3, #4
 800c43c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2201      	movs	r2, #1
 800c448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c44a:	78fb      	ldrb	r3, [r7, #3]
 800c44c:	f003 030f 	and.w	r3, r3, #15
 800c450:	b2da      	uxtb	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d101      	bne.n	800c464 <HAL_PCD_EP_SetStall+0x82>
 800c460:	2302      	movs	r3, #2
 800c462:	e01d      	b.n	800c4a0 <HAL_PCD_EP_SetStall+0xbe>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68f9      	ldr	r1, [r7, #12]
 800c472:	4618      	mov	r0, r3
 800c474:	f008 ff1a 	bl	80152ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	f003 030f 	and.w	r3, r3, #15
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d109      	bne.n	800c496 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	7999      	ldrb	r1, [r3, #6]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c490:	461a      	mov	r2, r3
 800c492:	f009 f90d 	bl	80156b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	7912      	ldrb	r2, [r2, #4]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d901      	bls.n	800c4c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e042      	b.n	800c54c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c4c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	da0f      	bge.n	800c4ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4ce:	78fb      	ldrb	r3, [r7, #3]
 800c4d0:	f003 020f 	and.w	r2, r3, #15
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	3310      	adds	r3, #16
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	705a      	strb	r2, [r3, #1]
 800c4ec:	e00f      	b.n	800c50e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	f003 020f 	and.w	r2, r3, #15
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	00db      	lsls	r3, r3, #3
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4413      	add	r3, r2
 800c504:	3304      	adds	r3, #4
 800c506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	f003 030f 	and.w	r3, r3, #15
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c526:	2b01      	cmp	r3, #1
 800c528:	d101      	bne.n	800c52e <HAL_PCD_EP_ClrStall+0x86>
 800c52a:	2302      	movs	r3, #2
 800c52c:	e00e      	b.n	800c54c <HAL_PCD_EP_ClrStall+0xa4>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f008 ff23 	bl	8015388 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c564:	2b00      	cmp	r3, #0
 800c566:	da0c      	bge.n	800c582 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c568:	78fb      	ldrb	r3, [r7, #3]
 800c56a:	f003 020f 	and.w	r2, r3, #15
 800c56e:	4613      	mov	r3, r2
 800c570:	00db      	lsls	r3, r3, #3
 800c572:	4413      	add	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	3310      	adds	r3, #16
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	4413      	add	r3, r2
 800c57c:	3304      	adds	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e00c      	b.n	800c59c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c582:	78fb      	ldrb	r3, [r7, #3]
 800c584:	f003 020f 	and.w	r2, r3, #15
 800c588:	4613      	mov	r3, r2
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	4413      	add	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	4413      	add	r3, r2
 800c598:	3304      	adds	r3, #4
 800c59a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68f9      	ldr	r1, [r7, #12]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f008 fd42 	bl	801502c <USB_EPStopXfer>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b08a      	sub	sp, #40	@ 0x28
 800c5ba:	af02      	add	r7, sp, #8
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	4413      	add	r3, r2
 800c5d2:	009b      	lsls	r3, r3, #2
 800c5d4:	3310      	adds	r3, #16
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	4413      	add	r3, r2
 800c5da:	3304      	adds	r3, #4
 800c5dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	695a      	ldr	r2, [r3, #20]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d901      	bls.n	800c5ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	e06b      	b.n	800c6c6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	429a      	cmp	r2, r3
 800c602:	d902      	bls.n	800c60a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	3303      	adds	r3, #3
 800c60e:	089b      	lsrs	r3, r3, #2
 800c610:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c612:	e02a      	b.n	800c66a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	691a      	ldr	r2, [r3, #16]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	69fa      	ldr	r2, [r7, #28]
 800c626:	429a      	cmp	r2, r3
 800c628:	d902      	bls.n	800c630 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	3303      	adds	r3, #3
 800c634:	089b      	lsrs	r3, r3, #2
 800c636:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	68d9      	ldr	r1, [r3, #12]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c648:	9300      	str	r3, [sp, #0]
 800c64a:	4603      	mov	r3, r0
 800c64c:	6978      	ldr	r0, [r7, #20]
 800c64e:	f008 fd97 	bl	8015180 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	441a      	add	r2, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	695a      	ldr	r2, [r3, #20]
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	441a      	add	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	4413      	add	r3, r2
 800c672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d809      	bhi.n	800c694 <PCD_WriteEmptyTxFifo+0xde>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	695a      	ldr	r2, [r3, #20]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c688:	429a      	cmp	r2, r3
 800c68a:	d203      	bcs.n	800c694 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1bf      	bne.n	800c614 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	691a      	ldr	r2, [r3, #16]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d811      	bhi.n	800c6c4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f003 030f 	and.w	r3, r3, #15
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	43db      	mvns	r3, r3
 800c6ba:	6939      	ldr	r1, [r7, #16]
 800c6bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3720      	adds	r7, #32
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	333c      	adds	r3, #60	@ 0x3c
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	015a      	lsls	r2, r3, #5
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	799b      	ldrb	r3, [r3, #6]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d17b      	bne.n	800c7fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d015      	beq.n	800c73c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	4a61      	ldr	r2, [pc, #388]	@ (800c898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	f240 80b9 	bls.w	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80b3 	beq.w	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	015a      	lsls	r2, r3, #5
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	4413      	add	r3, r2
 800c72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c732:	461a      	mov	r2, r3
 800c734:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c738:	6093      	str	r3, [r2, #8]
 800c73a:	e0a7      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	f003 0320 	and.w	r3, r3, #32
 800c742:	2b00      	cmp	r3, #0
 800c744:	d009      	beq.n	800c75a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c752:	461a      	mov	r2, r3
 800c754:	2320      	movs	r3, #32
 800c756:	6093      	str	r3, [r2, #8]
 800c758:	e098      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c760:	2b00      	cmp	r3, #0
 800c762:	f040 8093 	bne.w	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	4a4b      	ldr	r2, [pc, #300]	@ (800c898 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d90f      	bls.n	800c78e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	015a      	lsls	r2, r3, #5
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	4413      	add	r3, r2
 800c780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c784:	461a      	mov	r2, r3
 800c786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c78a:	6093      	str	r3, [r2, #8]
 800c78c:	e07e      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	4613      	mov	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	4413      	add	r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a1a      	ldr	r2, [r3, #32]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	0159      	lsls	r1, r3, #5
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	440b      	add	r3, r1
 800c7b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7ba:	1ad2      	subs	r2, r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d114      	bne.n	800c7f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d109      	bne.n	800c7e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6818      	ldr	r0, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7d8:	461a      	mov	r2, r3
 800c7da:	2101      	movs	r1, #1
 800c7dc:	f008 ff68 	bl	80156b0 <USB_EP0_OutStart>
 800c7e0:	e006      	b.n	800c7f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68da      	ldr	r2, [r3, #12]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f00b fa4e 	bl	8017c98 <HAL_PCD_DataOutStageCallback>
 800c7fc:	e046      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	4a26      	ldr	r2, [pc, #152]	@ (800c89c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d124      	bne.n	800c850 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00a      	beq.n	800c826 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	015a      	lsls	r2, r3, #5
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	4413      	add	r3, r2
 800c818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c81c:	461a      	mov	r2, r3
 800c81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c822:	6093      	str	r3, [r2, #8]
 800c824:	e032      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	f003 0320 	and.w	r3, r3, #32
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d008      	beq.n	800c842 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	015a      	lsls	r2, r3, #5
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	4413      	add	r3, r2
 800c838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c83c:	461a      	mov	r2, r3
 800c83e:	2320      	movs	r3, #32
 800c840:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	b2db      	uxtb	r3, r3
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f00b fa25 	bl	8017c98 <HAL_PCD_DataOutStageCallback>
 800c84e:	e01d      	b.n	800c88c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d114      	bne.n	800c880 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	4613      	mov	r3, r2
 800c85c:	00db      	lsls	r3, r3, #3
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	440b      	add	r3, r1
 800c864:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d108      	bne.n	800c880 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c878:	461a      	mov	r2, r3
 800c87a:	2100      	movs	r1, #0
 800c87c:	f008 ff18 	bl	80156b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f00b fa06 	bl	8017c98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3720      	adds	r7, #32
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	4f54300a 	.word	0x4f54300a
 800c89c:	4f54310a 	.word	0x4f54310a

0800c8a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	333c      	adds	r3, #60	@ 0x3c
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	015a      	lsls	r2, r3, #5
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4a15      	ldr	r2, [pc, #84]	@ (800c928 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d90e      	bls.n	800c8f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d009      	beq.n	800c8f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f00b f9bd 	bl	8017c74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c928 <PCD_EP_OutSetupPacket_int+0x88>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d90c      	bls.n	800c91c <PCD_EP_OutSetupPacket_int+0x7c>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	799b      	ldrb	r3, [r3, #6]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d108      	bne.n	800c91c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6818      	ldr	r0, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c914:	461a      	mov	r2, r3
 800c916:	2101      	movs	r1, #1
 800c918:	f008 feca 	bl	80156b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	4f54300a 	.word	0x4f54300a

0800c92c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b085      	sub	sp, #20
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
 800c938:	4613      	mov	r3, r2
 800c93a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c942:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d107      	bne.n	800c95a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c94a:	883b      	ldrh	r3, [r7, #0]
 800c94c:	0419      	lsls	r1, r3, #16
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68ba      	ldr	r2, [r7, #8]
 800c954:	430a      	orrs	r2, r1
 800c956:	629a      	str	r2, [r3, #40]	@ 0x28
 800c958:	e028      	b.n	800c9ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	4413      	add	r3, r2
 800c966:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c968:	2300      	movs	r3, #0
 800c96a:	73fb      	strb	r3, [r7, #15]
 800c96c:	e00d      	b.n	800c98a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	3340      	adds	r3, #64	@ 0x40
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	0c1b      	lsrs	r3, r3, #16
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	4413      	add	r3, r2
 800c982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	3301      	adds	r3, #1
 800c988:	73fb      	strb	r3, [r7, #15]
 800c98a:	7bfa      	ldrb	r2, [r7, #15]
 800c98c:	78fb      	ldrb	r3, [r7, #3]
 800c98e:	3b01      	subs	r3, #1
 800c990:	429a      	cmp	r2, r3
 800c992:	d3ec      	bcc.n	800c96e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c994:	883b      	ldrh	r3, [r7, #0]
 800c996:	0418      	lsls	r0, r3, #16
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6819      	ldr	r1, [r3, #0]
 800c99c:	78fb      	ldrb	r3, [r7, #3]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	4302      	orrs	r2, r0
 800c9a4:	3340      	adds	r3, #64	@ 0x40
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	440b      	add	r3, r1
 800c9aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3714      	adds	r7, #20
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c9ba:	b480      	push	{r7}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	887a      	ldrh	r2, [r7, #2]
 800c9cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b085      	sub	sp, #20
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca0a:	4b05      	ldr	r3, [pc, #20]	@ (800ca20 <HAL_PCDEx_ActivateLPM+0x44>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	10000003 	.word	0x10000003

0800ca24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ca44:	4b19      	ldr	r3, [pc, #100]	@ (800caac <HAL_PWREx_ConfigSupply+0x70>)
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d00a      	beq.n	800ca66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ca50:	4b16      	ldr	r3, [pc, #88]	@ (800caac <HAL_PWREx_ConfigSupply+0x70>)
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f003 0307 	and.w	r3, r3, #7
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d001      	beq.n	800ca62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e01f      	b.n	800caa2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	e01d      	b.n	800caa2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ca66:	4b11      	ldr	r3, [pc, #68]	@ (800caac <HAL_PWREx_ConfigSupply+0x70>)
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f023 0207 	bic.w	r2, r3, #7
 800ca6e:	490f      	ldr	r1, [pc, #60]	@ (800caac <HAL_PWREx_ConfigSupply+0x70>)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ca76:	f7fa f963 	bl	8006d40 <HAL_GetTick>
 800ca7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ca7c:	e009      	b.n	800ca92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ca7e:	f7fa f95f 	bl	8006d40 <HAL_GetTick>
 800ca82:	4602      	mov	r2, r0
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca8c:	d901      	bls.n	800ca92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e007      	b.n	800caa2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ca92:	4b06      	ldr	r3, [pc, #24]	@ (800caac <HAL_PWREx_ConfigSupply+0x70>)
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca9e:	d1ee      	bne.n	800ca7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	58024800 	.word	0x58024800

0800cab0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800cab4:	4b05      	ldr	r3, [pc, #20]	@ (800cacc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	4a04      	ldr	r2, [pc, #16]	@ (800cacc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800caba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cabe:	60d3      	str	r3, [r2, #12]
}
 800cac0:	bf00      	nop
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	58024800 	.word	0x58024800

0800cad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b08c      	sub	sp, #48	@ 0x30
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e3c8      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 8087 	beq.w	800cbfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800caf0:	4b88      	ldr	r3, [pc, #544]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800caf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cafa:	4b86      	ldr	r3, [pc, #536]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb02:	2b10      	cmp	r3, #16
 800cb04:	d007      	beq.n	800cb16 <HAL_RCC_OscConfig+0x46>
 800cb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb08:	2b18      	cmp	r3, #24
 800cb0a:	d110      	bne.n	800cb2e <HAL_RCC_OscConfig+0x5e>
 800cb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0e:	f003 0303 	and.w	r3, r3, #3
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d10b      	bne.n	800cb2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb16:	4b7f      	ldr	r3, [pc, #508]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d06c      	beq.n	800cbfc <HAL_RCC_OscConfig+0x12c>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d168      	bne.n	800cbfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e3a2      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb36:	d106      	bne.n	800cb46 <HAL_RCC_OscConfig+0x76>
 800cb38:	4b76      	ldr	r3, [pc, #472]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a75      	ldr	r2, [pc, #468]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	e02e      	b.n	800cba4 <HAL_RCC_OscConfig+0xd4>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10c      	bne.n	800cb68 <HAL_RCC_OscConfig+0x98>
 800cb4e:	4b71      	ldr	r3, [pc, #452]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a70      	ldr	r2, [pc, #448]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	4b6e      	ldr	r3, [pc, #440]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a6d      	ldr	r2, [pc, #436]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e01d      	b.n	800cba4 <HAL_RCC_OscConfig+0xd4>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb70:	d10c      	bne.n	800cb8c <HAL_RCC_OscConfig+0xbc>
 800cb72:	4b68      	ldr	r3, [pc, #416]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a67      	ldr	r2, [pc, #412]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb7c:	6013      	str	r3, [r2, #0]
 800cb7e:	4b65      	ldr	r3, [pc, #404]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a64      	ldr	r2, [pc, #400]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	e00b      	b.n	800cba4 <HAL_RCC_OscConfig+0xd4>
 800cb8c:	4b61      	ldr	r3, [pc, #388]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a60      	ldr	r2, [pc, #384]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	4b5e      	ldr	r3, [pc, #376]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a5d      	ldr	r2, [pc, #372]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cb9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d013      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbac:	f7fa f8c8 	bl	8006d40 <HAL_GetTick>
 800cbb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbb2:	e008      	b.n	800cbc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cbb4:	f7fa f8c4 	bl	8006d40 <HAL_GetTick>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	2b64      	cmp	r3, #100	@ 0x64
 800cbc0:	d901      	bls.n	800cbc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e356      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cbc6:	4b53      	ldr	r3, [pc, #332]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d0f0      	beq.n	800cbb4 <HAL_RCC_OscConfig+0xe4>
 800cbd2:	e014      	b.n	800cbfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd4:	f7fa f8b4 	bl	8006d40 <HAL_GetTick>
 800cbd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cbda:	e008      	b.n	800cbee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cbdc:	f7fa f8b0 	bl	8006d40 <HAL_GetTick>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	2b64      	cmp	r3, #100	@ 0x64
 800cbe8:	d901      	bls.n	800cbee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e342      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cbee:	4b49      	ldr	r3, [pc, #292]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1f0      	bne.n	800cbdc <HAL_RCC_OscConfig+0x10c>
 800cbfa:	e000      	b.n	800cbfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 808c 	beq.w	800cd24 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc0c:	4b41      	ldr	r3, [pc, #260]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc16:	4b3f      	ldr	r3, [pc, #252]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d007      	beq.n	800cc32 <HAL_RCC_OscConfig+0x162>
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	2b18      	cmp	r3, #24
 800cc26:	d137      	bne.n	800cc98 <HAL_RCC_OscConfig+0x1c8>
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	f003 0303 	and.w	r3, r3, #3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d132      	bne.n	800cc98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc32:	4b38      	ldr	r3, [pc, #224]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <HAL_RCC_OscConfig+0x17a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e314      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cc4a:	4b32      	ldr	r3, [pc, #200]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f023 0219 	bic.w	r2, r3, #25
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	492f      	ldr	r1, [pc, #188]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc5c:	f7fa f870 	bl	8006d40 <HAL_GetTick>
 800cc60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc62:	e008      	b.n	800cc76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc64:	f7fa f86c 	bl	8006d40 <HAL_GetTick>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e2fe      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cc76:	4b27      	ldr	r3, [pc, #156]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0304 	and.w	r3, r3, #4
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f0      	beq.n	800cc64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc82:	4b24      	ldr	r3, [pc, #144]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	061b      	lsls	r3, r3, #24
 800cc90:	4920      	ldr	r1, [pc, #128]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc96:	e045      	b.n	800cd24 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d026      	beq.n	800ccee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cca0:	4b1c      	ldr	r3, [pc, #112]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f023 0219 	bic.w	r2, r3, #25
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	4919      	ldr	r1, [pc, #100]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccb2:	f7fa f845 	bl	8006d40 <HAL_GetTick>
 800ccb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccb8:	e008      	b.n	800cccc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccba:	f7fa f841 	bl	8006d40 <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d901      	bls.n	800cccc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e2d3      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cccc:	4b11      	ldr	r3, [pc, #68]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 0304 	and.w	r3, r3, #4
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0f0      	beq.n	800ccba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccd8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	061b      	lsls	r3, r3, #24
 800cce6:	490b      	ldr	r1, [pc, #44]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800cce8:	4313      	orrs	r3, r2
 800ccea:	604b      	str	r3, [r1, #4]
 800ccec:	e01a      	b.n	800cd24 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ccee:	4b09      	ldr	r3, [pc, #36]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a08      	ldr	r2, [pc, #32]	@ (800cd14 <HAL_RCC_OscConfig+0x244>)
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccfa:	f7fa f821 	bl	8006d40 <HAL_GetTick>
 800ccfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cd00:	e00a      	b.n	800cd18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd02:	f7fa f81d 	bl	8006d40 <HAL_GetTick>
 800cd06:	4602      	mov	r2, r0
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d903      	bls.n	800cd18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e2af      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
 800cd14:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cd18:	4b96      	ldr	r3, [pc, #600]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1ee      	bne.n	800cd02 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d06a      	beq.n	800ce06 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cd30:	4b90      	ldr	r3, [pc, #576]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd38:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cd3a:	4b8e      	ldr	r3, [pc, #568]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	2b08      	cmp	r3, #8
 800cd44:	d007      	beq.n	800cd56 <HAL_RCC_OscConfig+0x286>
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	2b18      	cmp	r3, #24
 800cd4a:	d11b      	bne.n	800cd84 <HAL_RCC_OscConfig+0x2b4>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f003 0303 	and.w	r3, r3, #3
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d116      	bne.n	800cd84 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd56:	4b87      	ldr	r3, [pc, #540]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d005      	beq.n	800cd6e <HAL_RCC_OscConfig+0x29e>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	2b80      	cmp	r3, #128	@ 0x80
 800cd68:	d001      	beq.n	800cd6e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e282      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cd6e:	4b81      	ldr	r3, [pc, #516]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	061b      	lsls	r3, r3, #24
 800cd7c:	497d      	ldr	r1, [pc, #500]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cd82:	e040      	b.n	800ce06 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	69db      	ldr	r3, [r3, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d023      	beq.n	800cdd4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cd8c:	4b79      	ldr	r3, [pc, #484]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a78      	ldr	r2, [pc, #480]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd98:	f7f9 ffd2 	bl	8006d40 <HAL_GetTick>
 800cd9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cd9e:	e008      	b.n	800cdb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cda0:	f7f9 ffce 	bl	8006d40 <HAL_GetTick>
 800cda4:	4602      	mov	r2, r0
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d901      	bls.n	800cdb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e260      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cdb2:	4b70      	ldr	r3, [pc, #448]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0f0      	beq.n	800cda0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cdbe:	4b6d      	ldr	r3, [pc, #436]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	061b      	lsls	r3, r3, #24
 800cdcc:	4969      	ldr	r1, [pc, #420]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60cb      	str	r3, [r1, #12]
 800cdd2:	e018      	b.n	800ce06 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cdd4:	4b67      	ldr	r3, [pc, #412]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a66      	ldr	r2, [pc, #408]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde0:	f7f9 ffae 	bl	8006d40 <HAL_GetTick>
 800cde4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cde6:	e008      	b.n	800cdfa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cde8:	f7f9 ffaa 	bl	8006d40 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e23c      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cdfa:	4b5e      	ldr	r3, [pc, #376]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1f0      	bne.n	800cde8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 0308 	and.w	r3, r3, #8
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d036      	beq.n	800ce80 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	695b      	ldr	r3, [r3, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d019      	beq.n	800ce4e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce1a:	4b56      	ldr	r3, [pc, #344]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce1e:	4a55      	ldr	r2, [pc, #340]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce20:	f043 0301 	orr.w	r3, r3, #1
 800ce24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce26:	f7f9 ff8b 	bl	8006d40 <HAL_GetTick>
 800ce2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce2c:	e008      	b.n	800ce40 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce2e:	f7f9 ff87 	bl	8006d40 <HAL_GetTick>
 800ce32:	4602      	mov	r2, r0
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d901      	bls.n	800ce40 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e219      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ce40:	4b4c      	ldr	r3, [pc, #304]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce44:	f003 0302 	and.w	r3, r3, #2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0f0      	beq.n	800ce2e <HAL_RCC_OscConfig+0x35e>
 800ce4c:	e018      	b.n	800ce80 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce4e:	4b49      	ldr	r3, [pc, #292]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce52:	4a48      	ldr	r2, [pc, #288]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce54:	f023 0301 	bic.w	r3, r3, #1
 800ce58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce5a:	f7f9 ff71 	bl	8006d40 <HAL_GetTick>
 800ce5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ce60:	e008      	b.n	800ce74 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce62:	f7f9 ff6d 	bl	8006d40 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d901      	bls.n	800ce74 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e1ff      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ce74:	4b3f      	ldr	r3, [pc, #252]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce78:	f003 0302 	and.w	r3, r3, #2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f0      	bne.n	800ce62 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d036      	beq.n	800cefa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d019      	beq.n	800cec8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce94:	4b37      	ldr	r3, [pc, #220]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a36      	ldr	r2, [pc, #216]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ce9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cea0:	f7f9 ff4e 	bl	8006d40 <HAL_GetTick>
 800cea4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cea6:	e008      	b.n	800ceba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cea8:	f7f9 ff4a 	bl	8006d40 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d901      	bls.n	800ceba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e1dc      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ceba:	4b2e      	ldr	r3, [pc, #184]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0f0      	beq.n	800cea8 <HAL_RCC_OscConfig+0x3d8>
 800cec6:	e018      	b.n	800cefa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cec8:	4b2a      	ldr	r3, [pc, #168]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a29      	ldr	r2, [pc, #164]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ced2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ced4:	f7f9 ff34 	bl	8006d40 <HAL_GetTick>
 800ced8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ceda:	e008      	b.n	800ceee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cedc:	f7f9 ff30 	bl	8006d40 <HAL_GetTick>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d901      	bls.n	800ceee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e1c2      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ceee:	4b21      	ldr	r3, [pc, #132]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1f0      	bne.n	800cedc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f003 0304 	and.w	r3, r3, #4
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8086 	beq.w	800d014 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cf08:	4b1b      	ldr	r3, [pc, #108]	@ (800cf78 <HAL_RCC_OscConfig+0x4a8>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a1a      	ldr	r2, [pc, #104]	@ (800cf78 <HAL_RCC_OscConfig+0x4a8>)
 800cf0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cf14:	f7f9 ff14 	bl	8006d40 <HAL_GetTick>
 800cf18:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf1a:	e008      	b.n	800cf2e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf1c:	f7f9 ff10 	bl	8006d40 <HAL_GetTick>
 800cf20:	4602      	mov	r2, r0
 800cf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	2b64      	cmp	r3, #100	@ 0x64
 800cf28:	d901      	bls.n	800cf2e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e1a2      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf2e:	4b12      	ldr	r3, [pc, #72]	@ (800cf78 <HAL_RCC_OscConfig+0x4a8>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f0      	beq.n	800cf1c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d106      	bne.n	800cf50 <HAL_RCC_OscConfig+0x480>
 800cf42:	4b0c      	ldr	r3, [pc, #48]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf46:	4a0b      	ldr	r2, [pc, #44]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf48:	f043 0301 	orr.w	r3, r3, #1
 800cf4c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf4e:	e032      	b.n	800cfb6 <HAL_RCC_OscConfig+0x4e6>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d111      	bne.n	800cf7c <HAL_RCC_OscConfig+0x4ac>
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf5c:	4a05      	ldr	r2, [pc, #20]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf5e:	f023 0301 	bic.w	r3, r3, #1
 800cf62:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf64:	4b03      	ldr	r3, [pc, #12]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf68:	4a02      	ldr	r2, [pc, #8]	@ (800cf74 <HAL_RCC_OscConfig+0x4a4>)
 800cf6a:	f023 0304 	bic.w	r3, r3, #4
 800cf6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf70:	e021      	b.n	800cfb6 <HAL_RCC_OscConfig+0x4e6>
 800cf72:	bf00      	nop
 800cf74:	58024400 	.word	0x58024400
 800cf78:	58024800 	.word	0x58024800
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	2b05      	cmp	r3, #5
 800cf82:	d10c      	bne.n	800cf9e <HAL_RCC_OscConfig+0x4ce>
 800cf84:	4b83      	ldr	r3, [pc, #524]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cf86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf88:	4a82      	ldr	r2, [pc, #520]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cf8a:	f043 0304 	orr.w	r3, r3, #4
 800cf8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf90:	4b80      	ldr	r3, [pc, #512]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cf92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf94:	4a7f      	ldr	r2, [pc, #508]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf9c:	e00b      	b.n	800cfb6 <HAL_RCC_OscConfig+0x4e6>
 800cf9e:	4b7d      	ldr	r3, [pc, #500]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cfa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfa2:	4a7c      	ldr	r2, [pc, #496]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cfa4:	f023 0301 	bic.w	r3, r3, #1
 800cfa8:	6713      	str	r3, [r2, #112]	@ 0x70
 800cfaa:	4b7a      	ldr	r3, [pc, #488]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cfac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfae:	4a79      	ldr	r2, [pc, #484]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cfb0:	f023 0304 	bic.w	r3, r3, #4
 800cfb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d015      	beq.n	800cfea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfbe:	f7f9 febf 	bl	8006d40 <HAL_GetTick>
 800cfc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cfc4:	e00a      	b.n	800cfdc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfc6:	f7f9 febb 	bl	8006d40 <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d901      	bls.n	800cfdc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	e14b      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cfdc:	4b6d      	ldr	r3, [pc, #436]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800cfde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfe0:	f003 0302 	and.w	r3, r3, #2
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0ee      	beq.n	800cfc6 <HAL_RCC_OscConfig+0x4f6>
 800cfe8:	e014      	b.n	800d014 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfea:	f7f9 fea9 	bl	8006d40 <HAL_GetTick>
 800cfee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cff0:	e00a      	b.n	800d008 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cff2:	f7f9 fea5 	bl	8006d40 <HAL_GetTick>
 800cff6:	4602      	mov	r2, r0
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d000:	4293      	cmp	r3, r2
 800d002:	d901      	bls.n	800d008 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e135      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d008:	4b62      	ldr	r3, [pc, #392]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d00a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d00c:	f003 0302 	and.w	r3, r3, #2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1ee      	bne.n	800cff2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 812a 	beq.w	800d272 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d01e:	4b5d      	ldr	r3, [pc, #372]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d026:	2b18      	cmp	r3, #24
 800d028:	f000 80ba 	beq.w	800d1a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d030:	2b02      	cmp	r3, #2
 800d032:	f040 8095 	bne.w	800d160 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d036:	4b57      	ldr	r3, [pc, #348]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a56      	ldr	r2, [pc, #344]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d03c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d042:	f7f9 fe7d 	bl	8006d40 <HAL_GetTick>
 800d046:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d048:	e008      	b.n	800d05c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d04a:	f7f9 fe79 	bl	8006d40 <HAL_GetTick>
 800d04e:	4602      	mov	r2, r0
 800d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	2b02      	cmp	r3, #2
 800d056:	d901      	bls.n	800d05c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d058:	2303      	movs	r3, #3
 800d05a:	e10b      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d05c:	4b4d      	ldr	r3, [pc, #308]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1f0      	bne.n	800d04a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d068:	4b4a      	ldr	r3, [pc, #296]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d06a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d06c:	4b4a      	ldr	r3, [pc, #296]	@ (800d198 <HAL_RCC_OscConfig+0x6c8>)
 800d06e:	4013      	ands	r3, r2
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d078:	0112      	lsls	r2, r2, #4
 800d07a:	430a      	orrs	r2, r1
 800d07c:	4945      	ldr	r1, [pc, #276]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	628b      	str	r3, [r1, #40]	@ 0x28
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d086:	3b01      	subs	r3, #1
 800d088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d090:	3b01      	subs	r3, #1
 800d092:	025b      	lsls	r3, r3, #9
 800d094:	b29b      	uxth	r3, r3
 800d096:	431a      	orrs	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d09c:	3b01      	subs	r3, #1
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	061b      	lsls	r3, r3, #24
 800d0ae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d0b2:	4938      	ldr	r1, [pc, #224]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d0b8:	4b36      	ldr	r3, [pc, #216]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0bc:	4a35      	ldr	r2, [pc, #212]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0be:	f023 0301 	bic.w	r3, r3, #1
 800d0c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d0c4:	4b33      	ldr	r3, [pc, #204]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0c8:	4b34      	ldr	r3, [pc, #208]	@ (800d19c <HAL_RCC_OscConfig+0x6cc>)
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d0d0:	00d2      	lsls	r2, r2, #3
 800d0d2:	4930      	ldr	r1, [pc, #192]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0dc:	f023 020c 	bic.w	r2, r3, #12
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0e4:	492b      	ldr	r1, [pc, #172]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d0ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ee:	f023 0202 	bic.w	r2, r3, #2
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0f6:	4927      	ldr	r1, [pc, #156]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d0fc:	4b25      	ldr	r3, [pc, #148]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d100:	4a24      	ldr	r2, [pc, #144]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d108:	4b22      	ldr	r3, [pc, #136]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10c:	4a21      	ldr	r2, [pc, #132]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d10e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d114:	4b1f      	ldr	r3, [pc, #124]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d118:	4a1e      	ldr	r2, [pc, #120]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d11a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d11e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d120:	4b1c      	ldr	r3, [pc, #112]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d124:	4a1b      	ldr	r2, [pc, #108]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d12c:	4b19      	ldr	r3, [pc, #100]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a18      	ldr	r2, [pc, #96]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d138:	f7f9 fe02 	bl	8006d40 <HAL_GetTick>
 800d13c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d13e:	e008      	b.n	800d152 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d140:	f7f9 fdfe 	bl	8006d40 <HAL_GetTick>
 800d144:	4602      	mov	r2, r0
 800d146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d901      	bls.n	800d152 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	e090      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d152:	4b10      	ldr	r3, [pc, #64]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0f0      	beq.n	800d140 <HAL_RCC_OscConfig+0x670>
 800d15e:	e088      	b.n	800d272 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d160:	4b0c      	ldr	r3, [pc, #48]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a0b      	ldr	r2, [pc, #44]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d16a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d16c:	f7f9 fde8 	bl	8006d40 <HAL_GetTick>
 800d170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d172:	e008      	b.n	800d186 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d174:	f7f9 fde4 	bl	8006d40 <HAL_GetTick>
 800d178:	4602      	mov	r2, r0
 800d17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17c:	1ad3      	subs	r3, r2, r3
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d901      	bls.n	800d186 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e076      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d186:	4b03      	ldr	r3, [pc, #12]	@ (800d194 <HAL_RCC_OscConfig+0x6c4>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1f0      	bne.n	800d174 <HAL_RCC_OscConfig+0x6a4>
 800d192:	e06e      	b.n	800d272 <HAL_RCC_OscConfig+0x7a2>
 800d194:	58024400 	.word	0x58024400
 800d198:	fffffc0c 	.word	0xfffffc0c
 800d19c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d1a0:	4b36      	ldr	r3, [pc, #216]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d1a6:	4b35      	ldr	r3, [pc, #212]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d031      	beq.n	800d218 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f003 0203 	and.w	r2, r3, #3
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d12a      	bne.n	800d218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	091b      	lsrs	r3, r3, #4
 800d1c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d122      	bne.n	800d218 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d11a      	bne.n	800d218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	0a5b      	lsrs	r3, r3, #9
 800d1e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d111      	bne.n	800d218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	0c1b      	lsrs	r3, r3, #16
 800d1f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d200:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d202:	429a      	cmp	r2, r3
 800d204:	d108      	bne.n	800d218 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	0e1b      	lsrs	r3, r3, #24
 800d20a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d212:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d214:	429a      	cmp	r2, r3
 800d216:	d001      	beq.n	800d21c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e02b      	b.n	800d274 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d21c:	4b17      	ldr	r3, [pc, #92]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d220:	08db      	lsrs	r3, r3, #3
 800d222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d226:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d01f      	beq.n	800d272 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d232:	4b12      	ldr	r3, [pc, #72]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d236:	4a11      	ldr	r2, [pc, #68]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d238:	f023 0301 	bic.w	r3, r3, #1
 800d23c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d23e:	f7f9 fd7f 	bl	8006d40 <HAL_GetTick>
 800d242:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d244:	bf00      	nop
 800d246:	f7f9 fd7b 	bl	8006d40 <HAL_GetTick>
 800d24a:	4602      	mov	r2, r0
 800d24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24e:	4293      	cmp	r3, r2
 800d250:	d0f9      	beq.n	800d246 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d252:	4b0a      	ldr	r3, [pc, #40]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d256:	4b0a      	ldr	r3, [pc, #40]	@ (800d280 <HAL_RCC_OscConfig+0x7b0>)
 800d258:	4013      	ands	r3, r2
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d25e:	00d2      	lsls	r2, r2, #3
 800d260:	4906      	ldr	r1, [pc, #24]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d262:	4313      	orrs	r3, r2
 800d264:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d266:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26a:	4a04      	ldr	r2, [pc, #16]	@ (800d27c <HAL_RCC_OscConfig+0x7ac>)
 800d26c:	f043 0301 	orr.w	r3, r3, #1
 800d270:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3730      	adds	r7, #48	@ 0x30
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	58024400 	.word	0x58024400
 800d280:	ffff0007 	.word	0xffff0007

0800d284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b086      	sub	sp, #24
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e19c      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d298:	4b8a      	ldr	r3, [pc, #552]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 030f 	and.w	r3, r3, #15
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d910      	bls.n	800d2c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2a6:	4b87      	ldr	r3, [pc, #540]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f023 020f 	bic.w	r2, r3, #15
 800d2ae:	4985      	ldr	r1, [pc, #532]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2b6:	4b83      	ldr	r3, [pc, #524]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 030f 	and.w	r3, r3, #15
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d001      	beq.n	800d2c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e184      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d010      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	691a      	ldr	r2, [r3, #16]
 800d2d8:	4b7b      	ldr	r3, [pc, #492]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d908      	bls.n	800d2f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d2e4:	4b78      	ldr	r3, [pc, #480]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	4975      	ldr	r1, [pc, #468]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 0308 	and.w	r3, r3, #8
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d010      	beq.n	800d324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	695a      	ldr	r2, [r3, #20]
 800d306:	4b70      	ldr	r3, [pc, #448]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d30e:	429a      	cmp	r2, r3
 800d310:	d908      	bls.n	800d324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d312:	4b6d      	ldr	r3, [pc, #436]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d314:	69db      	ldr	r3, [r3, #28]
 800d316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	496a      	ldr	r1, [pc, #424]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d320:	4313      	orrs	r3, r2
 800d322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0310 	and.w	r3, r3, #16
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d010      	beq.n	800d352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	699a      	ldr	r2, [r3, #24]
 800d334:	4b64      	ldr	r3, [pc, #400]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d908      	bls.n	800d352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d340:	4b61      	ldr	r3, [pc, #388]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d342:	69db      	ldr	r3, [r3, #28]
 800d344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	495e      	ldr	r1, [pc, #376]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d010      	beq.n	800d380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69da      	ldr	r2, [r3, #28]
 800d362:	4b59      	ldr	r3, [pc, #356]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d908      	bls.n	800d380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d36e:	4b56      	ldr	r3, [pc, #344]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d370:	6a1b      	ldr	r3, [r3, #32]
 800d372:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	4953      	ldr	r1, [pc, #332]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d37c:	4313      	orrs	r3, r2
 800d37e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 0302 	and.w	r3, r3, #2
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d010      	beq.n	800d3ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68da      	ldr	r2, [r3, #12]
 800d390:	4b4d      	ldr	r3, [pc, #308]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	f003 030f 	and.w	r3, r3, #15
 800d398:	429a      	cmp	r2, r3
 800d39a:	d908      	bls.n	800d3ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d39c:	4b4a      	ldr	r3, [pc, #296]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	f023 020f 	bic.w	r2, r3, #15
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	4947      	ldr	r1, [pc, #284]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d055      	beq.n	800d466 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d3ba:	4b43      	ldr	r3, [pc, #268]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	4940      	ldr	r1, [pc, #256]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d107      	bne.n	800d3e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d3d4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d121      	bne.n	800d424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e0f6      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d107      	bne.n	800d3fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d3ec:	4b36      	ldr	r3, [pc, #216]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d115      	bne.n	800d424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e0ea      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d107      	bne.n	800d414 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d404:	4b30      	ldr	r3, [pc, #192]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d109      	bne.n	800d424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e0de      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d414:	4b2c      	ldr	r3, [pc, #176]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d101      	bne.n	800d424 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e0d6      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d424:	4b28      	ldr	r3, [pc, #160]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	f023 0207 	bic.w	r2, r3, #7
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	4925      	ldr	r1, [pc, #148]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d432:	4313      	orrs	r3, r2
 800d434:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d436:	f7f9 fc83 	bl	8006d40 <HAL_GetTick>
 800d43a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d43c:	e00a      	b.n	800d454 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d43e:	f7f9 fc7f 	bl	8006d40 <HAL_GetTick>
 800d442:	4602      	mov	r2, r0
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d901      	bls.n	800d454 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d450:	2303      	movs	r3, #3
 800d452:	e0be      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d454:	4b1c      	ldr	r3, [pc, #112]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	429a      	cmp	r2, r3
 800d464:	d1eb      	bne.n	800d43e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f003 0302 	and.w	r3, r3, #2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d010      	beq.n	800d494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	4b14      	ldr	r3, [pc, #80]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	f003 030f 	and.w	r3, r3, #15
 800d47e:	429a      	cmp	r2, r3
 800d480:	d208      	bcs.n	800d494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d482:	4b11      	ldr	r3, [pc, #68]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	f023 020f 	bic.w	r2, r3, #15
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	490e      	ldr	r1, [pc, #56]	@ (800d4c8 <HAL_RCC_ClockConfig+0x244>)
 800d490:	4313      	orrs	r3, r2
 800d492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d494:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 030f 	and.w	r3, r3, #15
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d214      	bcs.n	800d4cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4a2:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f023 020f 	bic.w	r2, r3, #15
 800d4aa:	4906      	ldr	r1, [pc, #24]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d4b2:	4b04      	ldr	r3, [pc, #16]	@ (800d4c4 <HAL_RCC_ClockConfig+0x240>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 030f 	and.w	r3, r3, #15
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d005      	beq.n	800d4cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e086      	b.n	800d5d2 <HAL_RCC_ClockConfig+0x34e>
 800d4c4:	52002000 	.word	0x52002000
 800d4c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d010      	beq.n	800d4fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	691a      	ldr	r2, [r3, #16]
 800d4dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d208      	bcs.n	800d4fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d4e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	4939      	ldr	r1, [pc, #228]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f003 0308 	and.w	r3, r3, #8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d010      	beq.n	800d528 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	695a      	ldr	r2, [r3, #20]
 800d50a:	4b34      	ldr	r3, [pc, #208]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d50c:	69db      	ldr	r3, [r3, #28]
 800d50e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d512:	429a      	cmp	r2, r3
 800d514:	d208      	bcs.n	800d528 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d516:	4b31      	ldr	r3, [pc, #196]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	492e      	ldr	r1, [pc, #184]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d524:	4313      	orrs	r3, r2
 800d526:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 0310 	and.w	r3, r3, #16
 800d530:	2b00      	cmp	r3, #0
 800d532:	d010      	beq.n	800d556 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	699a      	ldr	r2, [r3, #24]
 800d538:	4b28      	ldr	r3, [pc, #160]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d53a:	69db      	ldr	r3, [r3, #28]
 800d53c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d540:	429a      	cmp	r2, r3
 800d542:	d208      	bcs.n	800d556 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d544:	4b25      	ldr	r3, [pc, #148]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d546:	69db      	ldr	r3, [r3, #28]
 800d548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	4922      	ldr	r1, [pc, #136]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d552:	4313      	orrs	r3, r2
 800d554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f003 0320 	and.w	r3, r3, #32
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d010      	beq.n	800d584 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	69da      	ldr	r2, [r3, #28]
 800d566:	4b1d      	ldr	r3, [pc, #116]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d568:	6a1b      	ldr	r3, [r3, #32]
 800d56a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d56e:	429a      	cmp	r2, r3
 800d570:	d208      	bcs.n	800d584 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d572:	4b1a      	ldr	r3, [pc, #104]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	4917      	ldr	r1, [pc, #92]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d580:	4313      	orrs	r3, r2
 800d582:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d584:	f000 f834 	bl	800d5f0 <HAL_RCC_GetSysClockFreq>
 800d588:	4602      	mov	r2, r0
 800d58a:	4b14      	ldr	r3, [pc, #80]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	0a1b      	lsrs	r3, r3, #8
 800d590:	f003 030f 	and.w	r3, r3, #15
 800d594:	4912      	ldr	r1, [pc, #72]	@ (800d5e0 <HAL_RCC_ClockConfig+0x35c>)
 800d596:	5ccb      	ldrb	r3, [r1, r3]
 800d598:	f003 031f 	and.w	r3, r3, #31
 800d59c:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <HAL_RCC_ClockConfig+0x358>)
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f003 030f 	and.w	r3, r3, #15
 800d5aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d5e0 <HAL_RCC_ClockConfig+0x35c>)
 800d5ac:	5cd3      	ldrb	r3, [r2, r3]
 800d5ae:	f003 031f 	and.w	r3, r3, #31
 800d5b2:	693a      	ldr	r2, [r7, #16]
 800d5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d5e4 <HAL_RCC_ClockConfig+0x360>)
 800d5ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d5bc:	4a0a      	ldr	r2, [pc, #40]	@ (800d5e8 <HAL_RCC_ClockConfig+0x364>)
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ec <HAL_RCC_ClockConfig+0x368>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f9 fb70 	bl	8006cac <HAL_InitTick>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3718      	adds	r7, #24
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	58024400 	.word	0x58024400
 800d5e0:	0801d2b8 	.word	0x0801d2b8
 800d5e4:	24000004 	.word	0x24000004
 800d5e8:	24000000 	.word	0x24000000
 800d5ec:	24000008 	.word	0x24000008

0800d5f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b089      	sub	sp, #36	@ 0x24
 800d5f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d5f6:	4bb3      	ldr	r3, [pc, #716]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5fe:	2b18      	cmp	r3, #24
 800d600:	f200 8155 	bhi.w	800d8ae <HAL_RCC_GetSysClockFreq+0x2be>
 800d604:	a201      	add	r2, pc, #4	@ (adr r2, 800d60c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60a:	bf00      	nop
 800d60c:	0800d671 	.word	0x0800d671
 800d610:	0800d8af 	.word	0x0800d8af
 800d614:	0800d8af 	.word	0x0800d8af
 800d618:	0800d8af 	.word	0x0800d8af
 800d61c:	0800d8af 	.word	0x0800d8af
 800d620:	0800d8af 	.word	0x0800d8af
 800d624:	0800d8af 	.word	0x0800d8af
 800d628:	0800d8af 	.word	0x0800d8af
 800d62c:	0800d697 	.word	0x0800d697
 800d630:	0800d8af 	.word	0x0800d8af
 800d634:	0800d8af 	.word	0x0800d8af
 800d638:	0800d8af 	.word	0x0800d8af
 800d63c:	0800d8af 	.word	0x0800d8af
 800d640:	0800d8af 	.word	0x0800d8af
 800d644:	0800d8af 	.word	0x0800d8af
 800d648:	0800d8af 	.word	0x0800d8af
 800d64c:	0800d69d 	.word	0x0800d69d
 800d650:	0800d8af 	.word	0x0800d8af
 800d654:	0800d8af 	.word	0x0800d8af
 800d658:	0800d8af 	.word	0x0800d8af
 800d65c:	0800d8af 	.word	0x0800d8af
 800d660:	0800d8af 	.word	0x0800d8af
 800d664:	0800d8af 	.word	0x0800d8af
 800d668:	0800d8af 	.word	0x0800d8af
 800d66c:	0800d6a3 	.word	0x0800d6a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d670:	4b94      	ldr	r3, [pc, #592]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 0320 	and.w	r3, r3, #32
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d009      	beq.n	800d690 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d67c:	4b91      	ldr	r3, [pc, #580]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	08db      	lsrs	r3, r3, #3
 800d682:	f003 0303 	and.w	r3, r3, #3
 800d686:	4a90      	ldr	r2, [pc, #576]	@ (800d8c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d688:	fa22 f303 	lsr.w	r3, r2, r3
 800d68c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d68e:	e111      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d690:	4b8d      	ldr	r3, [pc, #564]	@ (800d8c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d692:	61bb      	str	r3, [r7, #24]
      break;
 800d694:	e10e      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d696:	4b8d      	ldr	r3, [pc, #564]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d698:	61bb      	str	r3, [r7, #24]
      break;
 800d69a:	e10b      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d69c:	4b8c      	ldr	r3, [pc, #560]	@ (800d8d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d69e:	61bb      	str	r3, [r7, #24]
      break;
 800d6a0:	e108      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6a2:	4b88      	ldr	r3, [pc, #544]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a6:	f003 0303 	and.w	r3, r3, #3
 800d6aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d6ac:	4b85      	ldr	r3, [pc, #532]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b0:	091b      	lsrs	r3, r3, #4
 800d6b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d6b8:	4b82      	ldr	r3, [pc, #520]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6c2:	4b80      	ldr	r3, [pc, #512]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6c6:	08db      	lsrs	r3, r3, #3
 800d6c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	fb02 f303 	mul.w	r3, r2, r3
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f000 80e1 	beq.w	800d8a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	f000 8083 	beq.w	800d7f4 <HAL_RCC_GetSysClockFreq+0x204>
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	f200 80a1 	bhi.w	800d838 <HAL_RCC_GetSysClockFreq+0x248>
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d003      	beq.n	800d704 <HAL_RCC_GetSysClockFreq+0x114>
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d056      	beq.n	800d7b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d702:	e099      	b.n	800d838 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d704:	4b6f      	ldr	r3, [pc, #444]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 0320 	and.w	r3, r3, #32
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d02d      	beq.n	800d76c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d710:	4b6c      	ldr	r3, [pc, #432]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	08db      	lsrs	r3, r3, #3
 800d716:	f003 0303 	and.w	r3, r3, #3
 800d71a:	4a6b      	ldr	r2, [pc, #428]	@ (800d8c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d71c:	fa22 f303 	lsr.w	r3, r2, r3
 800d720:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	ee07 3a90 	vmov	s15, r3
 800d728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73a:	4b62      	ldr	r3, [pc, #392]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d74e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d8d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d766:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d76a:	e087      	b.n	800d87c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d776:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d8d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77e:	4b51      	ldr	r3, [pc, #324]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d792:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d8d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7ae:	e065      	b.n	800d87c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800d7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c2:	4b40      	ldr	r3, [pc, #256]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d7d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d8d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d7f2:	e043      	b.n	800d87c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d8e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d806:	4b2f      	ldr	r3, [pc, #188]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d816:	ed97 6a02 	vldr	s12, [r7, #8]
 800d81a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d8d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d832:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d836:	e021      	b.n	800d87c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	ee07 3a90 	vmov	s15, r3
 800d83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d842:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d8dc <HAL_RCC_GetSysClockFreq+0x2ec>
 800d846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84a:	4b1e      	ldr	r3, [pc, #120]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d85e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d8d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d876:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d87a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d87c:	4b11      	ldr	r3, [pc, #68]	@ (800d8c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d87e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d880:	0a5b      	lsrs	r3, r3, #9
 800d882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d886:	3301      	adds	r3, #1
 800d888:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	ee07 3a90 	vmov	s15, r3
 800d890:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d894:	edd7 6a07 	vldr	s13, [r7, #28]
 800d898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d89c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a0:	ee17 3a90 	vmov	r3, s15
 800d8a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d8a6:	e005      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61bb      	str	r3, [r7, #24]
      break;
 800d8ac:	e002      	b.n	800d8b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d8ae:	4b07      	ldr	r3, [pc, #28]	@ (800d8cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d8b0:	61bb      	str	r3, [r7, #24]
      break;
 800d8b2:	bf00      	nop
  }

  return sysclockfreq;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3724      	adds	r7, #36	@ 0x24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	58024400 	.word	0x58024400
 800d8c8:	03d09000 	.word	0x03d09000
 800d8cc:	003d0900 	.word	0x003d0900
 800d8d0:	016e3600 	.word	0x016e3600
 800d8d4:	46000000 	.word	0x46000000
 800d8d8:	4c742400 	.word	0x4c742400
 800d8dc:	4a742400 	.word	0x4a742400
 800d8e0:	4bb71b00 	.word	0x4bb71b00

0800d8e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d8ea:	f7ff fe81 	bl	800d5f0 <HAL_RCC_GetSysClockFreq>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	4b10      	ldr	r3, [pc, #64]	@ (800d934 <HAL_RCC_GetHCLKFreq+0x50>)
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	0a1b      	lsrs	r3, r3, #8
 800d8f6:	f003 030f 	and.w	r3, r3, #15
 800d8fa:	490f      	ldr	r1, [pc, #60]	@ (800d938 <HAL_RCC_GetHCLKFreq+0x54>)
 800d8fc:	5ccb      	ldrb	r3, [r1, r3]
 800d8fe:	f003 031f 	and.w	r3, r3, #31
 800d902:	fa22 f303 	lsr.w	r3, r2, r3
 800d906:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d908:	4b0a      	ldr	r3, [pc, #40]	@ (800d934 <HAL_RCC_GetHCLKFreq+0x50>)
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	f003 030f 	and.w	r3, r3, #15
 800d910:	4a09      	ldr	r2, [pc, #36]	@ (800d938 <HAL_RCC_GetHCLKFreq+0x54>)
 800d912:	5cd3      	ldrb	r3, [r2, r3]
 800d914:	f003 031f 	and.w	r3, r3, #31
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	fa22 f303 	lsr.w	r3, r2, r3
 800d91e:	4a07      	ldr	r2, [pc, #28]	@ (800d93c <HAL_RCC_GetHCLKFreq+0x58>)
 800d920:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d922:	4a07      	ldr	r2, [pc, #28]	@ (800d940 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d928:	4b04      	ldr	r3, [pc, #16]	@ (800d93c <HAL_RCC_GetHCLKFreq+0x58>)
 800d92a:	681b      	ldr	r3, [r3, #0]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	58024400 	.word	0x58024400
 800d938:	0801d2b8 	.word	0x0801d2b8
 800d93c:	24000004 	.word	0x24000004
 800d940:	24000000 	.word	0x24000000

0800d944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d948:	f7ff ffcc 	bl	800d8e4 <HAL_RCC_GetHCLKFreq>
 800d94c:	4602      	mov	r2, r0
 800d94e:	4b06      	ldr	r3, [pc, #24]	@ (800d968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d950:	69db      	ldr	r3, [r3, #28]
 800d952:	091b      	lsrs	r3, r3, #4
 800d954:	f003 0307 	and.w	r3, r3, #7
 800d958:	4904      	ldr	r1, [pc, #16]	@ (800d96c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d95a:	5ccb      	ldrb	r3, [r1, r3]
 800d95c:	f003 031f 	and.w	r3, r3, #31
 800d960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d964:	4618      	mov	r0, r3
 800d966:	bd80      	pop	{r7, pc}
 800d968:	58024400 	.word	0x58024400
 800d96c:	0801d2b8 	.word	0x0801d2b8

0800d970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d974:	f7ff ffb6 	bl	800d8e4 <HAL_RCC_GetHCLKFreq>
 800d978:	4602      	mov	r2, r0
 800d97a:	4b06      	ldr	r3, [pc, #24]	@ (800d994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	0a1b      	lsrs	r3, r3, #8
 800d980:	f003 0307 	and.w	r3, r3, #7
 800d984:	4904      	ldr	r1, [pc, #16]	@ (800d998 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d986:	5ccb      	ldrb	r3, [r1, r3]
 800d988:	f003 031f 	and.w	r3, r3, #31
 800d98c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d990:	4618      	mov	r0, r3
 800d992:	bd80      	pop	{r7, pc}
 800d994:	58024400 	.word	0x58024400
 800d998:	0801d2b8 	.word	0x0801d2b8

0800d99c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d99c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9a0:	b0c6      	sub	sp, #280	@ 0x118
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	ea54 0305 	orrs.w	r3, r4, r5
 800d9c6:	d049      	beq.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9d2:	d02f      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d9d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9d8:	d828      	bhi.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d9da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9de:	d01a      	beq.n	800da16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d9e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d9e4:	d822      	bhi.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d9ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9ee:	d007      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d9f0:	e01c      	b.n	800da2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9f2:	4bab      	ldr	r3, [pc, #684]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f6:	4aaa      	ldr	r2, [pc, #680]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d9fe:	e01a      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da04:	3308      	adds	r3, #8
 800da06:	2102      	movs	r1, #2
 800da08:	4618      	mov	r0, r3
 800da0a:	f002 fa49 	bl	800fea0 <RCCEx_PLL2_Config>
 800da0e:	4603      	mov	r3, r0
 800da10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800da14:	e00f      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da1a:	3328      	adds	r3, #40	@ 0x28
 800da1c:	2102      	movs	r1, #2
 800da1e:	4618      	mov	r0, r3
 800da20:	f002 faf0 	bl	8010004 <RCCEx_PLL3_Config>
 800da24:	4603      	mov	r3, r0
 800da26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800da2a:	e004      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800da32:	e000      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800da34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d10a      	bne.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800da3e:	4b98      	ldr	r3, [pc, #608]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800da46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da4c:	4a94      	ldr	r2, [pc, #592]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da4e:	430b      	orrs	r3, r1
 800da50:	6513      	str	r3, [r2, #80]	@ 0x50
 800da52:	e003      	b.n	800da5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800da5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800da68:	f04f 0900 	mov.w	r9, #0
 800da6c:	ea58 0309 	orrs.w	r3, r8, r9
 800da70:	d047      	beq.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800da72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da78:	2b04      	cmp	r3, #4
 800da7a:	d82a      	bhi.n	800dad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800da7c:	a201      	add	r2, pc, #4	@ (adr r2, 800da84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800da7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da82:	bf00      	nop
 800da84:	0800da99 	.word	0x0800da99
 800da88:	0800daa7 	.word	0x0800daa7
 800da8c:	0800dabd 	.word	0x0800dabd
 800da90:	0800dadb 	.word	0x0800dadb
 800da94:	0800dadb 	.word	0x0800dadb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da98:	4b81      	ldr	r3, [pc, #516]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9c:	4a80      	ldr	r2, [pc, #512]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800daa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800daa4:	e01a      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800daa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daaa:	3308      	adds	r3, #8
 800daac:	2100      	movs	r1, #0
 800daae:	4618      	mov	r0, r3
 800dab0:	f002 f9f6 	bl	800fea0 <RCCEx_PLL2_Config>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800daba:	e00f      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac0:	3328      	adds	r3, #40	@ 0x28
 800dac2:	2100      	movs	r1, #0
 800dac4:	4618      	mov	r0, r3
 800dac6:	f002 fa9d 	bl	8010004 <RCCEx_PLL3_Config>
 800daca:	4603      	mov	r3, r0
 800dacc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dad0:	e004      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dad8:	e000      	b.n	800dadc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dada:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dadc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10a      	bne.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dae4:	4b6e      	ldr	r3, [pc, #440]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dae8:	f023 0107 	bic.w	r1, r3, #7
 800daec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daf2:	4a6b      	ldr	r2, [pc, #428]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800daf4:	430b      	orrs	r3, r1
 800daf6:	6513      	str	r3, [r2, #80]	@ 0x50
 800daf8:	e003      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dafa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dafe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800db02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800db0e:	f04f 0b00 	mov.w	fp, #0
 800db12:	ea5a 030b 	orrs.w	r3, sl, fp
 800db16:	d05b      	beq.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800db18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db20:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800db24:	d03b      	beq.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800db26:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800db2a:	d834      	bhi.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db30:	d037      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800db32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db36:	d82e      	bhi.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db38:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db3c:	d033      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800db3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800db42:	d828      	bhi.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db48:	d01a      	beq.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800db4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db4e:	d822      	bhi.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800db54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db58:	d007      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800db5a:	e01c      	b.n	800db96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db5c:	4b50      	ldr	r3, [pc, #320]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db60:	4a4f      	ldr	r2, [pc, #316]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800db62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db68:	e01e      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db6e:	3308      	adds	r3, #8
 800db70:	2100      	movs	r1, #0
 800db72:	4618      	mov	r0, r3
 800db74:	f002 f994 	bl	800fea0 <RCCEx_PLL2_Config>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800db7e:	e013      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db84:	3328      	adds	r3, #40	@ 0x28
 800db86:	2100      	movs	r1, #0
 800db88:	4618      	mov	r0, r3
 800db8a:	f002 fa3b 	bl	8010004 <RCCEx_PLL3_Config>
 800db8e:	4603      	mov	r3, r0
 800db90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db94:	e008      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800db9c:	e004      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800db9e:	bf00      	nop
 800dba0:	e002      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800dba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10b      	bne.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800dbb0:	4b3b      	ldr	r3, [pc, #236]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbb4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800dbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dbc0:	4a37      	ldr	r2, [pc, #220]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dbc2:	430b      	orrs	r3, r1
 800dbc4:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbc6:	e003      	b.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800dbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800dbdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dbe6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800dbea:	460b      	mov	r3, r1
 800dbec:	4313      	orrs	r3, r2
 800dbee:	d05d      	beq.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800dbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbf8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dbfc:	d03b      	beq.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800dbfe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800dc02:	d834      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc08:	d037      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800dc0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dc0e:	d82e      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc14:	d033      	beq.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800dc16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dc1a:	d828      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc20:	d01a      	beq.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800dc22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc26:	d822      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d003      	beq.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800dc2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dc30:	d007      	beq.n	800dc42 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800dc32:	e01c      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc34:	4b1a      	ldr	r3, [pc, #104]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc38:	4a19      	ldr	r2, [pc, #100]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc40:	e01e      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc46:	3308      	adds	r3, #8
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 f928 	bl	800fea0 <RCCEx_PLL2_Config>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dc56:	e013      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc5c:	3328      	adds	r3, #40	@ 0x28
 800dc5e:	2100      	movs	r1, #0
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 f9cf 	bl	8010004 <RCCEx_PLL3_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc6c:	e008      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dc74:	e004      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc76:	bf00      	nop
 800dc78:	e002      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc7a:	bf00      	nop
 800dc7c:	e000      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800dc7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10d      	bne.n	800dca4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dc88:	4b05      	ldr	r3, [pc, #20]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800dc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dc98:	4a01      	ldr	r2, [pc, #4]	@ (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800dc9a:	430b      	orrs	r3, r1
 800dc9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc9e:	e005      	b.n	800dcac <HAL_RCCEx_PeriphCLKConfig+0x310>
 800dca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dca8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dcb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800dcc2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	d03a      	beq.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800dccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcd2:	2b30      	cmp	r3, #48	@ 0x30
 800dcd4:	d01f      	beq.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800dcd6:	2b30      	cmp	r3, #48	@ 0x30
 800dcd8:	d819      	bhi.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dcda:	2b20      	cmp	r3, #32
 800dcdc:	d00c      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800dcde:	2b20      	cmp	r3, #32
 800dce0:	d815      	bhi.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d019      	beq.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800dce6:	2b10      	cmp	r3, #16
 800dce8:	d111      	bne.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcea:	4baa      	ldr	r3, [pc, #680]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcee:	4aa9      	ldr	r2, [pc, #676]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dcf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dcf6:	e011      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dcf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	2102      	movs	r1, #2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f002 f8cd 	bl	800fea0 <RCCEx_PLL2_Config>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dd0c:	e006      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dd14:	e002      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dd16:	bf00      	nop
 800dd18:	e000      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dd1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10a      	bne.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800dd24:	4b9b      	ldr	r3, [pc, #620]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800dd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd32:	4a98      	ldr	r2, [pc, #608]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd34:	430b      	orrs	r3, r1
 800dd36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dd38:	e003      	b.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dd42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800dd4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dd52:	2300      	movs	r3, #0
 800dd54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	d051      	beq.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dd62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd6c:	d035      	beq.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800dd6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dd72:	d82e      	bhi.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd78:	d031      	beq.n	800ddde <HAL_RCCEx_PeriphCLKConfig+0x442>
 800dd7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800dd7e:	d828      	bhi.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd84:	d01a      	beq.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800dd86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd8a:	d822      	bhi.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d003      	beq.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800dd90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd94:	d007      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800dd96:	e01c      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd98:	4b7e      	ldr	r3, [pc, #504]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd9c:	4a7d      	ldr	r2, [pc, #500]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dda2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dda4:	e01c      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddaa:	3308      	adds	r3, #8
 800ddac:	2100      	movs	r1, #0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f002 f876 	bl	800fea0 <RCCEx_PLL2_Config>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ddba:	e011      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc0:	3328      	adds	r3, #40	@ 0x28
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f002 f91d 	bl	8010004 <RCCEx_PLL3_Config>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ddd0:	e006      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ddd8:	e002      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ddda:	bf00      	nop
 800dddc:	e000      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ddde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dde0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dde8:	4b6a      	ldr	r3, [pc, #424]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ddea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ddf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddf6:	4a67      	ldr	r2, [pc, #412]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ddf8:	430b      	orrs	r3, r1
 800ddfa:	6513      	str	r3, [r2, #80]	@ 0x50
 800ddfc:	e003      	b.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800de06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800de12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de16:	2300      	movs	r3, #0
 800de18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800de1c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800de20:	460b      	mov	r3, r1
 800de22:	4313      	orrs	r3, r2
 800de24:	d053      	beq.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de30:	d033      	beq.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800de32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800de36:	d82c      	bhi.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de3c:	d02f      	beq.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800de3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800de42:	d826      	bhi.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de48:	d02b      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800de4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800de4e:	d820      	bhi.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de54:	d012      	beq.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800de56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de5a:	d81a      	bhi.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d022      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800de60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de64:	d115      	bne.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de6a:	3308      	adds	r3, #8
 800de6c:	2101      	movs	r1, #1
 800de6e:	4618      	mov	r0, r3
 800de70:	f002 f816 	bl	800fea0 <RCCEx_PLL2_Config>
 800de74:	4603      	mov	r3, r0
 800de76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de7a:	e015      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de80:	3328      	adds	r3, #40	@ 0x28
 800de82:	2101      	movs	r1, #1
 800de84:	4618      	mov	r0, r3
 800de86:	f002 f8bd 	bl	8010004 <RCCEx_PLL3_Config>
 800de8a:	4603      	mov	r3, r0
 800de8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de90:	e00a      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800de98:	e006      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de9a:	bf00      	nop
 800de9c:	e004      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800de9e:	bf00      	nop
 800dea0:	e002      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dea2:	bf00      	nop
 800dea4:	e000      	b.n	800dea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10a      	bne.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800deb0:	4b38      	ldr	r3, [pc, #224]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800deb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800deb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800deb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800debc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800debe:	4a35      	ldr	r2, [pc, #212]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dec0:	430b      	orrs	r3, r1
 800dec2:	6513      	str	r3, [r2, #80]	@ 0x50
 800dec4:	e003      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800deca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800deda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dede:	2300      	movs	r3, #0
 800dee0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dee4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dee8:	460b      	mov	r3, r1
 800deea:	4313      	orrs	r3, r2
 800deec:	d058      	beq.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800deee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800def6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800defa:	d033      	beq.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800defc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df00:	d82c      	bhi.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df06:	d02f      	beq.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800df08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df0c:	d826      	bhi.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df12:	d02b      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800df14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800df18:	d820      	bhi.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df1e:	d012      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800df20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df24:	d81a      	bhi.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800df26:	2b00      	cmp	r3, #0
 800df28:	d022      	beq.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800df2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df2e:	d115      	bne.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df34:	3308      	adds	r3, #8
 800df36:	2101      	movs	r1, #1
 800df38:	4618      	mov	r0, r3
 800df3a:	f001 ffb1 	bl	800fea0 <RCCEx_PLL2_Config>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800df44:	e015      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df4a:	3328      	adds	r3, #40	@ 0x28
 800df4c:	2101      	movs	r1, #1
 800df4e:	4618      	mov	r0, r3
 800df50:	f002 f858 	bl	8010004 <RCCEx_PLL3_Config>
 800df54:	4603      	mov	r3, r0
 800df56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800df5a:	e00a      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800df62:	e006      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df64:	bf00      	nop
 800df66:	e004      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df68:	bf00      	nop
 800df6a:	e002      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df6c:	bf00      	nop
 800df6e:	e000      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800df70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10e      	bne.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800df7a:	4b06      	ldr	r3, [pc, #24]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800df82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df8a:	4a02      	ldr	r2, [pc, #8]	@ (800df94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800df8c:	430b      	orrs	r3, r1
 800df8e:	6593      	str	r3, [r2, #88]	@ 0x58
 800df90:	e006      	b.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800df92:	bf00      	nop
 800df94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800dfac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfb6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	d037      	beq.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfca:	d00e      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800dfcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfd0:	d816      	bhi.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d018      	beq.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800dfd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dfda:	d111      	bne.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfdc:	4bc4      	ldr	r3, [pc, #784]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe0:	4ac3      	ldr	r2, [pc, #780]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dfe8:	e00f      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfee:	3308      	adds	r3, #8
 800dff0:	2101      	movs	r1, #1
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 ff54 	bl	800fea0 <RCCEx_PLL2_Config>
 800dff8:	4603      	mov	r3, r0
 800dffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800dffe:	e004      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e006:	e000      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800e008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e00a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10a      	bne.n	800e028 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e012:	4bb7      	ldr	r3, [pc, #732]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e016:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e020:	4ab3      	ldr	r2, [pc, #716]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e022:	430b      	orrs	r3, r1
 800e024:	6513      	str	r3, [r2, #80]	@ 0x50
 800e026:	e003      	b.n	800e030 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e02c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e03c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e040:	2300      	movs	r3, #0
 800e042:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e046:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e04a:	460b      	mov	r3, r1
 800e04c:	4313      	orrs	r3, r2
 800e04e:	d039      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e056:	2b03      	cmp	r3, #3
 800e058:	d81c      	bhi.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800e05a:	a201      	add	r2, pc, #4	@ (adr r2, 800e060 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800e05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e060:	0800e09d 	.word	0x0800e09d
 800e064:	0800e071 	.word	0x0800e071
 800e068:	0800e07f 	.word	0x0800e07f
 800e06c:	0800e09d 	.word	0x0800e09d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e070:	4b9f      	ldr	r3, [pc, #636]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e074:	4a9e      	ldr	r2, [pc, #632]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e07c:	e00f      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e082:	3308      	adds	r3, #8
 800e084:	2102      	movs	r1, #2
 800e086:	4618      	mov	r0, r3
 800e088:	f001 ff0a 	bl	800fea0 <RCCEx_PLL2_Config>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e092:	e004      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e09a:	e000      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800e09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e09e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10a      	bne.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e0a6:	4b92      	ldr	r3, [pc, #584]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0aa:	f023 0103 	bic.w	r1, r3, #3
 800e0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0b4:	4a8e      	ldr	r2, [pc, #568]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e0b6:	430b      	orrs	r3, r1
 800e0b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e0ba:	e003      	b.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e0d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e0da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	f000 8099 	beq.w	800e218 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e0e6:	4b83      	ldr	r3, [pc, #524]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a82      	ldr	r2, [pc, #520]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e0ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e0f2:	f7f8 fe25 	bl	8006d40 <HAL_GetTick>
 800e0f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0fa:	e00b      	b.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0fc:	f7f8 fe20 	bl	8006d40 <HAL_GetTick>
 800e100:	4602      	mov	r2, r0
 800e102:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	2b64      	cmp	r3, #100	@ 0x64
 800e10a:	d903      	bls.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800e10c:	2303      	movs	r3, #3
 800e10e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e112:	e005      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e114:	4b77      	ldr	r3, [pc, #476]	@ (800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0ed      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800e120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e124:	2b00      	cmp	r3, #0
 800e126:	d173      	bne.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e128:	4b71      	ldr	r3, [pc, #452]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e12a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e134:	4053      	eors	r3, r2
 800e136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d015      	beq.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e13e:	4b6c      	ldr	r3, [pc, #432]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e146:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e14a:	4b69      	ldr	r3, [pc, #420]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e14c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e14e:	4a68      	ldr	r2, [pc, #416]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e154:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e156:	4b66      	ldr	r3, [pc, #408]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e15a:	4a65      	ldr	r2, [pc, #404]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e15c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e160:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e162:	4a63      	ldr	r2, [pc, #396]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e168:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e16e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e176:	d118      	bne.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e178:	f7f8 fde2 	bl	8006d40 <HAL_GetTick>
 800e17c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e180:	e00d      	b.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e182:	f7f8 fddd 	bl	8006d40 <HAL_GetTick>
 800e186:	4602      	mov	r2, r0
 800e188:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e18c:	1ad2      	subs	r2, r2, r3
 800e18e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e192:	429a      	cmp	r2, r3
 800e194:	d903      	bls.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800e19c:	e005      	b.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e19e:	4b54      	ldr	r3, [pc, #336]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1a2:	f003 0302 	and.w	r3, r3, #2
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0eb      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800e1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d129      	bne.n	800e206 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1c2:	d10e      	bne.n	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800e1c4:	4b4a      	ldr	r3, [pc, #296]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1d4:	091a      	lsrs	r2, r3, #4
 800e1d6:	4b48      	ldr	r3, [pc, #288]	@ (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800e1d8:	4013      	ands	r3, r2
 800e1da:	4a45      	ldr	r2, [pc, #276]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1dc:	430b      	orrs	r3, r1
 800e1de:	6113      	str	r3, [r2, #16]
 800e1e0:	e005      	b.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 800e1e2:	4b43      	ldr	r3, [pc, #268]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1e4:	691b      	ldr	r3, [r3, #16]
 800e1e6:	4a42      	ldr	r2, [pc, #264]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e1ec:	6113      	str	r3, [r2, #16]
 800e1ee:	4b40      	ldr	r3, [pc, #256]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e1f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1fe:	4a3c      	ldr	r2, [pc, #240]	@ (800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800e200:	430b      	orrs	r3, r1
 800e202:	6713      	str	r3, [r2, #112]	@ 0x70
 800e204:	e008      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e20a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800e20e:	e003      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e220:	f002 0301 	and.w	r3, r2, #1
 800e224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e228:	2300      	movs	r3, #0
 800e22a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e22e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e232:	460b      	mov	r3, r1
 800e234:	4313      	orrs	r3, r2
 800e236:	f000 808f 	beq.w	800e358 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e23e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e240:	2b28      	cmp	r3, #40	@ 0x28
 800e242:	d871      	bhi.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e331 	.word	0x0800e331
 800e250:	0800e329 	.word	0x0800e329
 800e254:	0800e329 	.word	0x0800e329
 800e258:	0800e329 	.word	0x0800e329
 800e25c:	0800e329 	.word	0x0800e329
 800e260:	0800e329 	.word	0x0800e329
 800e264:	0800e329 	.word	0x0800e329
 800e268:	0800e329 	.word	0x0800e329
 800e26c:	0800e2fd 	.word	0x0800e2fd
 800e270:	0800e329 	.word	0x0800e329
 800e274:	0800e329 	.word	0x0800e329
 800e278:	0800e329 	.word	0x0800e329
 800e27c:	0800e329 	.word	0x0800e329
 800e280:	0800e329 	.word	0x0800e329
 800e284:	0800e329 	.word	0x0800e329
 800e288:	0800e329 	.word	0x0800e329
 800e28c:	0800e313 	.word	0x0800e313
 800e290:	0800e329 	.word	0x0800e329
 800e294:	0800e329 	.word	0x0800e329
 800e298:	0800e329 	.word	0x0800e329
 800e29c:	0800e329 	.word	0x0800e329
 800e2a0:	0800e329 	.word	0x0800e329
 800e2a4:	0800e329 	.word	0x0800e329
 800e2a8:	0800e329 	.word	0x0800e329
 800e2ac:	0800e331 	.word	0x0800e331
 800e2b0:	0800e329 	.word	0x0800e329
 800e2b4:	0800e329 	.word	0x0800e329
 800e2b8:	0800e329 	.word	0x0800e329
 800e2bc:	0800e329 	.word	0x0800e329
 800e2c0:	0800e329 	.word	0x0800e329
 800e2c4:	0800e329 	.word	0x0800e329
 800e2c8:	0800e329 	.word	0x0800e329
 800e2cc:	0800e331 	.word	0x0800e331
 800e2d0:	0800e329 	.word	0x0800e329
 800e2d4:	0800e329 	.word	0x0800e329
 800e2d8:	0800e329 	.word	0x0800e329
 800e2dc:	0800e329 	.word	0x0800e329
 800e2e0:	0800e329 	.word	0x0800e329
 800e2e4:	0800e329 	.word	0x0800e329
 800e2e8:	0800e329 	.word	0x0800e329
 800e2ec:	0800e331 	.word	0x0800e331
 800e2f0:	58024400 	.word	0x58024400
 800e2f4:	58024800 	.word	0x58024800
 800e2f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e300:	3308      	adds	r3, #8
 800e302:	2101      	movs	r1, #1
 800e304:	4618      	mov	r0, r3
 800e306:	f001 fdcb 	bl	800fea0 <RCCEx_PLL2_Config>
 800e30a:	4603      	mov	r3, r0
 800e30c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e310:	e00f      	b.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e316:	3328      	adds	r3, #40	@ 0x28
 800e318:	2101      	movs	r1, #1
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 fe72 	bl	8010004 <RCCEx_PLL3_Config>
 800e320:	4603      	mov	r3, r0
 800e322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e326:	e004      	b.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e32e:	e000      	b.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e336:	2b00      	cmp	r3, #0
 800e338:	d10a      	bne.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e33a:	4bbf      	ldr	r3, [pc, #764]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e33e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e346:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e348:	4abb      	ldr	r2, [pc, #748]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e34a:	430b      	orrs	r3, r1
 800e34c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e34e:	e003      	b.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f002 0302 	and.w	r3, r2, #2
 800e364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e368:	2300      	movs	r3, #0
 800e36a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e36e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e372:	460b      	mov	r3, r1
 800e374:	4313      	orrs	r3, r2
 800e376:	d041      	beq.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e37c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e37e:	2b05      	cmp	r3, #5
 800e380:	d824      	bhi.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e382:	a201      	add	r2, pc, #4	@ (adr r2, 800e388 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e388:	0800e3d5 	.word	0x0800e3d5
 800e38c:	0800e3a1 	.word	0x0800e3a1
 800e390:	0800e3b7 	.word	0x0800e3b7
 800e394:	0800e3d5 	.word	0x0800e3d5
 800e398:	0800e3d5 	.word	0x0800e3d5
 800e39c:	0800e3d5 	.word	0x0800e3d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a4:	3308      	adds	r3, #8
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f001 fd79 	bl	800fea0 <RCCEx_PLL2_Config>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e3b4:	e00f      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ba:	3328      	adds	r3, #40	@ 0x28
 800e3bc:	2101      	movs	r1, #1
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f001 fe20 	bl	8010004 <RCCEx_PLL3_Config>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e3ca:	e004      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3d2:	e000      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d10a      	bne.n	800e3f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e3de:	4b96      	ldr	r3, [pc, #600]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e2:	f023 0107 	bic.w	r1, r3, #7
 800e3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3ec:	4a92      	ldr	r2, [pc, #584]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3ee:	430b      	orrs	r3, r1
 800e3f0:	6553      	str	r3, [r2, #84]	@ 0x54
 800e3f2:	e003      	b.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e404:	f002 0304 	and.w	r3, r2, #4
 800e408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e40c:	2300      	movs	r3, #0
 800e40e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e412:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e416:	460b      	mov	r3, r1
 800e418:	4313      	orrs	r3, r2
 800e41a:	d044      	beq.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e424:	2b05      	cmp	r3, #5
 800e426:	d825      	bhi.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e428:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42e:	bf00      	nop
 800e430:	0800e47d 	.word	0x0800e47d
 800e434:	0800e449 	.word	0x0800e449
 800e438:	0800e45f 	.word	0x0800e45f
 800e43c:	0800e47d 	.word	0x0800e47d
 800e440:	0800e47d 	.word	0x0800e47d
 800e444:	0800e47d 	.word	0x0800e47d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e44c:	3308      	adds	r3, #8
 800e44e:	2101      	movs	r1, #1
 800e450:	4618      	mov	r0, r3
 800e452:	f001 fd25 	bl	800fea0 <RCCEx_PLL2_Config>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e45c:	e00f      	b.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e462:	3328      	adds	r3, #40	@ 0x28
 800e464:	2101      	movs	r1, #1
 800e466:	4618      	mov	r0, r3
 800e468:	f001 fdcc 	bl	8010004 <RCCEx_PLL3_Config>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e472:	e004      	b.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e474:	2301      	movs	r3, #1
 800e476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e47a:	e000      	b.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800e47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e47e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10b      	bne.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e486:	4b6c      	ldr	r3, [pc, #432]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e48a:	f023 0107 	bic.w	r1, r3, #7
 800e48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e496:	4a68      	ldr	r2, [pc, #416]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e498:	430b      	orrs	r3, r1
 800e49a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e49c:	e003      	b.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e49e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f002 0320 	and.w	r3, r2, #32
 800e4b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e4bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	d055      	beq.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4d2:	d033      	beq.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e4d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e4d8:	d82c      	bhi.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4de:	d02f      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e4:	d826      	bhi.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4ea:	d02b      	beq.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e4ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e4f0:	d820      	bhi.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4f6:	d012      	beq.n	800e51e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e4f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4fc:	d81a      	bhi.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d022      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e506:	d115      	bne.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e50c:	3308      	adds	r3, #8
 800e50e:	2100      	movs	r1, #0
 800e510:	4618      	mov	r0, r3
 800e512:	f001 fcc5 	bl	800fea0 <RCCEx_PLL2_Config>
 800e516:	4603      	mov	r3, r0
 800e518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e51c:	e015      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e522:	3328      	adds	r3, #40	@ 0x28
 800e524:	2102      	movs	r1, #2
 800e526:	4618      	mov	r0, r3
 800e528:	f001 fd6c 	bl	8010004 <RCCEx_PLL3_Config>
 800e52c:	4603      	mov	r3, r0
 800e52e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e532:	e00a      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e534:	2301      	movs	r3, #1
 800e536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e53a:	e006      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e53c:	bf00      	nop
 800e53e:	e004      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e540:	bf00      	nop
 800e542:	e002      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e544:	bf00      	nop
 800e546:	e000      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e54a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10b      	bne.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e552:	4b39      	ldr	r3, [pc, #228]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e556:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e562:	4a35      	ldr	r2, [pc, #212]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e564:	430b      	orrs	r3, r1
 800e566:	6553      	str	r3, [r2, #84]	@ 0x54
 800e568:	e003      	b.n	800e572 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e56a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e56e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e57e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e582:	2300      	movs	r3, #0
 800e584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e588:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e58c:	460b      	mov	r3, r1
 800e58e:	4313      	orrs	r3, r2
 800e590:	d058      	beq.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e59a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e59e:	d033      	beq.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e5a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e5a4:	d82c      	bhi.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5aa:	d02f      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e5ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5b0:	d826      	bhi.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5b6:	d02b      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e5b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e5bc:	d820      	bhi.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5c2:	d012      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e5c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5c8:	d81a      	bhi.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d022      	beq.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e5ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5d2:	d115      	bne.n	800e600 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d8:	3308      	adds	r3, #8
 800e5da:	2100      	movs	r1, #0
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f001 fc5f 	bl	800fea0 <RCCEx_PLL2_Config>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e5e8:	e015      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ee:	3328      	adds	r3, #40	@ 0x28
 800e5f0:	2102      	movs	r1, #2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f001 fd06 	bl	8010004 <RCCEx_PLL3_Config>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e5fe:	e00a      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e606:	e006      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e608:	bf00      	nop
 800e60a:	e004      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e60c:	bf00      	nop
 800e60e:	e002      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e610:	bf00      	nop
 800e612:	e000      	b.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10e      	bne.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e61e:	4b06      	ldr	r3, [pc, #24]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e622:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e62a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e62e:	4a02      	ldr	r2, [pc, #8]	@ (800e638 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e630:	430b      	orrs	r3, r1
 800e632:	6593      	str	r3, [r2, #88]	@ 0x58
 800e634:	e006      	b.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e636:	bf00      	nop
 800e638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e63c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e650:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e654:	2300      	movs	r3, #0
 800e656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e65a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e65e:	460b      	mov	r3, r1
 800e660:	4313      	orrs	r3, r2
 800e662:	d055      	beq.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e66c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e670:	d033      	beq.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e672:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e676:	d82c      	bhi.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e67c:	d02f      	beq.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e67e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e682:	d826      	bhi.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e684:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e688:	d02b      	beq.n	800e6e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e68a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e68e:	d820      	bhi.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e694:	d012      	beq.n	800e6bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e69a:	d81a      	bhi.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d022      	beq.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e6a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6a4:	d115      	bne.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f001 fbf6 	bl	800fea0 <RCCEx_PLL2_Config>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e6ba:	e015      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c0:	3328      	adds	r3, #40	@ 0x28
 800e6c2:	2102      	movs	r1, #2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f001 fc9d 	bl	8010004 <RCCEx_PLL3_Config>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e6d0:	e00a      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e6d8:	e006      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e6da:	bf00      	nop
 800e6dc:	e004      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e6de:	bf00      	nop
 800e6e0:	e002      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e6e2:	bf00      	nop
 800e6e4:	e000      	b.n	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e6e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d10b      	bne.n	800e708 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e6f0:	4ba0      	ldr	r3, [pc, #640]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e700:	4a9c      	ldr	r2, [pc, #624]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e702:	430b      	orrs	r3, r1
 800e704:	6593      	str	r3, [r2, #88]	@ 0x58
 800e706:	e003      	b.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e70c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e718:	f002 0308 	and.w	r3, r2, #8
 800e71c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e720:	2300      	movs	r3, #0
 800e722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e726:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e72a:	460b      	mov	r3, r1
 800e72c:	4313      	orrs	r3, r2
 800e72e:	d01e      	beq.n	800e76e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800e730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e73c:	d10c      	bne.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e742:	3328      	adds	r3, #40	@ 0x28
 800e744:	2102      	movs	r1, #2
 800e746:	4618      	mov	r0, r3
 800e748:	f001 fc5c 	bl	8010004 <RCCEx_PLL3_Config>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d002      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e758:	4b86      	ldr	r3, [pc, #536]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e75c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e768:	4a82      	ldr	r2, [pc, #520]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e76a:	430b      	orrs	r3, r1
 800e76c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	f002 0310 	and.w	r3, r2, #16
 800e77a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e77e:	2300      	movs	r3, #0
 800e780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e784:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e788:	460b      	mov	r3, r1
 800e78a:	4313      	orrs	r3, r2
 800e78c:	d01e      	beq.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e79a:	d10c      	bne.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7a0:	3328      	adds	r3, #40	@ 0x28
 800e7a2:	2102      	movs	r1, #2
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f001 fc2d 	bl	8010004 <RCCEx_PLL3_Config>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e7b6:	4b6f      	ldr	r3, [pc, #444]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e7b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e7c6:	4a6b      	ldr	r2, [pc, #428]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e7c8:	430b      	orrs	r3, r1
 800e7ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e7d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e7da:	2300      	movs	r3, #0
 800e7dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e7de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	d03e      	beq.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e7f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7f4:	d022      	beq.n	800e83c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800e7f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7fa:	d81b      	bhi.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d003      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800e800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e804:	d00b      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800e806:	e015      	b.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e80c:	3308      	adds	r3, #8
 800e80e:	2100      	movs	r1, #0
 800e810:	4618      	mov	r0, r3
 800e812:	f001 fb45 	bl	800fea0 <RCCEx_PLL2_Config>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e81c:	e00f      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e822:	3328      	adds	r3, #40	@ 0x28
 800e824:	2102      	movs	r1, #2
 800e826:	4618      	mov	r0, r3
 800e828:	f001 fbec 	bl	8010004 <RCCEx_PLL3_Config>
 800e82c:	4603      	mov	r3, r0
 800e82e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e832:	e004      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e834:	2301      	movs	r3, #1
 800e836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e83a:	e000      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800e83c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e83e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10b      	bne.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e846:	4b4b      	ldr	r3, [pc, #300]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e84a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e856:	4a47      	ldr	r2, [pc, #284]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e858:	430b      	orrs	r3, r1
 800e85a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e85c:	e003      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e85e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e862:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e872:	673b      	str	r3, [r7, #112]	@ 0x70
 800e874:	2300      	movs	r3, #0
 800e876:	677b      	str	r3, [r7, #116]	@ 0x74
 800e878:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e87c:	460b      	mov	r3, r1
 800e87e:	4313      	orrs	r3, r2
 800e880:	d03b      	beq.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e88a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e88e:	d01f      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e890:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e894:	d818      	bhi.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800e896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e89a:	d003      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800e89c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8a0:	d007      	beq.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800e8a2:	e011      	b.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8a4:	4b33      	ldr	r3, [pc, #204]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a8:	4a32      	ldr	r2, [pc, #200]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e8ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e8b0:	e00f      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8b6:	3328      	adds	r3, #40	@ 0x28
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f001 fba2 	bl	8010004 <RCCEx_PLL3_Config>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800e8c6:	e004      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e8ce:	e000      	b.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800e8d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10b      	bne.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e8da:	4b26      	ldr	r3, [pc, #152]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8ea:	4a22      	ldr	r2, [pc, #136]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e8ec:	430b      	orrs	r3, r1
 800e8ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800e8f0:	e003      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e8f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e902:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e906:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e908:	2300      	movs	r3, #0
 800e90a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e90c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e910:	460b      	mov	r3, r1
 800e912:	4313      	orrs	r3, r2
 800e914:	d034      	beq.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e91a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800e920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e924:	d007      	beq.n	800e936 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800e926:	e011      	b.n	800e94c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e928:	4b12      	ldr	r3, [pc, #72]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92c:	4a11      	ldr	r2, [pc, #68]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e92e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e934:	e00e      	b.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e93a:	3308      	adds	r3, #8
 800e93c:	2102      	movs	r1, #2
 800e93e:	4618      	mov	r0, r3
 800e940:	f001 faae 	bl	800fea0 <RCCEx_PLL2_Config>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e94a:	e003      	b.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800e94c:	2301      	movs	r3, #1
 800e94e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10d      	bne.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e95c:	4b05      	ldr	r3, [pc, #20]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e960:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e96a:	4a02      	ldr	r2, [pc, #8]	@ (800e974 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e96c:	430b      	orrs	r3, r1
 800e96e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e970:	e006      	b.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e972:	bf00      	nop
 800e974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e97c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e98c:	663b      	str	r3, [r7, #96]	@ 0x60
 800e98e:	2300      	movs	r3, #0
 800e990:	667b      	str	r3, [r7, #100]	@ 0x64
 800e992:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e996:	460b      	mov	r3, r1
 800e998:	4313      	orrs	r3, r2
 800e99a:	d00c      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9a0:	3328      	adds	r3, #40	@ 0x28
 800e9a2:	2102      	movs	r1, #2
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f001 fb2d 	bl	8010004 <RCCEx_PLL3_Config>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e9c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	d036      	beq.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9dc:	d018      	beq.n	800ea10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800e9de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e9e2:	d811      	bhi.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e9e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9e8:	d014      	beq.n	800ea14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800e9ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9ee:	d80b      	bhi.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d011      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e9f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9f8:	d106      	bne.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9fa:	4bb7      	ldr	r3, [pc, #732]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9fe:	4ab6      	ldr	r2, [pc, #728]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ea06:	e008      	b.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea0e:	e004      	b.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ea10:	bf00      	nop
 800ea12:	e002      	b.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ea14:	bf00      	nop
 800ea16:	e000      	b.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ea18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10a      	bne.n	800ea38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea22:	4bad      	ldr	r3, [pc, #692]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ea2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea30:	4aa9      	ldr	r2, [pc, #676]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea32:	430b      	orrs	r3, r1
 800ea34:	6553      	str	r3, [r2, #84]	@ 0x54
 800ea36:	e003      	b.n	800ea40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ea40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ea4c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea4e:	2300      	movs	r3, #0
 800ea50:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ea56:	460b      	mov	r3, r1
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	d009      	beq.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ea5c:	4b9e      	ldr	r3, [pc, #632]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ea64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea6a:	4a9b      	ldr	r2, [pc, #620]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea6c:	430b      	orrs	r3, r1
 800ea6e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ea70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ea7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea7e:	2300      	movs	r3, #0
 800ea80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ea86:	460b      	mov	r3, r1
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	d009      	beq.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea8c:	4b92      	ldr	r3, [pc, #584]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea90:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ea94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea9a:	4a8f      	ldr	r2, [pc, #572]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800eaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800eaac:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaae:	2300      	movs	r3, #0
 800eab0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eab2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800eab6:	460b      	mov	r3, r1
 800eab8:	4313      	orrs	r3, r2
 800eaba:	d00e      	beq.n	800eada <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800eabc:	4b86      	ldr	r3, [pc, #536]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	4a85      	ldr	r2, [pc, #532]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eac2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eac6:	6113      	str	r3, [r2, #16]
 800eac8:	4b83      	ldr	r3, [pc, #524]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eaca:	6919      	ldr	r1, [r3, #16]
 800eacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ead0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ead4:	4a80      	ldr	r2, [pc, #512]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ead6:	430b      	orrs	r3, r1
 800ead8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800eada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800eae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eae8:	2300      	movs	r3, #0
 800eaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eaec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	d009      	beq.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800eaf6:	4b78      	ldr	r3, [pc, #480]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eaf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eafa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800eafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb04:	4a74      	ldr	r2, [pc, #464]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb06:	430b      	orrs	r3, r1
 800eb08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800eb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800eb16:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb18:	2300      	movs	r3, #0
 800eb1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800eb20:	460b      	mov	r3, r1
 800eb22:	4313      	orrs	r3, r2
 800eb24:	d00a      	beq.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eb26:	4b6c      	ldr	r3, [pc, #432]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb2a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800eb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb36:	4a68      	ldr	r2, [pc, #416]	@ (800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800eb38:	430b      	orrs	r3, r1
 800eb3a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	2100      	movs	r1, #0
 800eb46:	62b9      	str	r1, [r7, #40]	@ 0x28
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800eb52:	460b      	mov	r3, r1
 800eb54:	4313      	orrs	r3, r2
 800eb56:	d011      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb5c:	3308      	adds	r3, #8
 800eb5e:	2100      	movs	r1, #0
 800eb60:	4618      	mov	r0, r3
 800eb62:	f001 f99d 	bl	800fea0 <RCCEx_PLL2_Config>
 800eb66:	4603      	mov	r3, r0
 800eb68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800eb6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d003      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eb78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	2100      	movs	r1, #0
 800eb86:	6239      	str	r1, [r7, #32]
 800eb88:	f003 0302 	and.w	r3, r3, #2
 800eb8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb92:	460b      	mov	r3, r1
 800eb94:	4313      	orrs	r3, r2
 800eb96:	d011      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb9c:	3308      	adds	r3, #8
 800eb9e:	2101      	movs	r1, #1
 800eba0:	4618      	mov	r0, r3
 800eba2:	f001 f97d 	bl	800fea0 <RCCEx_PLL2_Config>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ebac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d003      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ebbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	61b9      	str	r1, [r7, #24]
 800ebc8:	f003 0304 	and.w	r3, r3, #4
 800ebcc:	61fb      	str	r3, [r7, #28]
 800ebce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	d011      	beq.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ebd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebdc:	3308      	adds	r3, #8
 800ebde:	2102      	movs	r1, #2
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f001 f95d 	bl	800fea0 <RCCEx_PLL2_Config>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ebec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d003      	beq.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ebfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	2100      	movs	r1, #0
 800ec06:	6139      	str	r1, [r7, #16]
 800ec08:	f003 0308 	and.w	r3, r3, #8
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ec12:	460b      	mov	r3, r1
 800ec14:	4313      	orrs	r3, r2
 800ec16:	d011      	beq.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec1c:	3328      	adds	r3, #40	@ 0x28
 800ec1e:	2100      	movs	r1, #0
 800ec20:	4618      	mov	r0, r3
 800ec22:	f001 f9ef 	bl	8010004 <RCCEx_PLL3_Config>
 800ec26:	4603      	mov	r3, r0
 800ec28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ec2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ec3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	2100      	movs	r1, #0
 800ec46:	60b9      	str	r1, [r7, #8]
 800ec48:	f003 0310 	and.w	r3, r3, #16
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec52:	460b      	mov	r3, r1
 800ec54:	4313      	orrs	r3, r2
 800ec56:	d011      	beq.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec5c:	3328      	adds	r3, #40	@ 0x28
 800ec5e:	2101      	movs	r1, #1
 800ec60:	4618      	mov	r0, r3
 800ec62:	f001 f9cf 	bl	8010004 <RCCEx_PLL3_Config>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ec6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d003      	beq.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ec7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec84:	2100      	movs	r1, #0
 800ec86:	6039      	str	r1, [r7, #0]
 800ec88:	f003 0320 	and.w	r3, r3, #32
 800ec8c:	607b      	str	r3, [r7, #4]
 800ec8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec92:	460b      	mov	r3, r1
 800ec94:	4313      	orrs	r3, r2
 800ec96:	d011      	beq.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec9c:	3328      	adds	r3, #40	@ 0x28
 800ec9e:	2102      	movs	r1, #2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f001 f9af 	bl	8010004 <RCCEx_PLL3_Config>
 800eca6:	4603      	mov	r3, r0
 800eca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ecac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d003      	beq.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ecb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ecbc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d101      	bne.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	e000      	b.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ecc8:	2301      	movs	r3, #1
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecd6:	bf00      	nop
 800ecd8:	58024400 	.word	0x58024400

0800ecdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b090      	sub	sp, #64	@ 0x40
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ece6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ecee:	430b      	orrs	r3, r1
 800ecf0:	f040 8094 	bne.w	800ee1c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ecf4:	4b9b      	ldr	r3, [pc, #620]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecf8:	f003 0307 	and.w	r3, r3, #7
 800ecfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	2b04      	cmp	r3, #4
 800ed02:	f200 8087 	bhi.w	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ed06:	a201      	add	r2, pc, #4	@ (adr r2, 800ed0c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ed08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0c:	0800ed21 	.word	0x0800ed21
 800ed10:	0800ed49 	.word	0x0800ed49
 800ed14:	0800ed71 	.word	0x0800ed71
 800ed18:	0800ee0d 	.word	0x0800ee0d
 800ed1c:	0800ed99 	.word	0x0800ed99
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed20:	4b90      	ldr	r3, [pc, #576]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed2c:	d108      	bne.n	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 ff62 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed3c:	f000 bc93 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed44:	f000 bc8f 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed48:	4b86      	ldr	r3, [pc, #536]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed54:	d108      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed56:	f107 0318 	add.w	r3, r7, #24
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fca6 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed64:	f000 bc7f 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed6c:	f000 bc7b 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed70:	4b7c      	ldr	r3, [pc, #496]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed7c:	d108      	bne.n	800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed7e:	f107 030c 	add.w	r3, r7, #12
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 fde6 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed8c:	f000 bc6b 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed94:	f000 bc67 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed98:	4b72      	ldr	r3, [pc, #456]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ed9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eda0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eda2:	4b70      	ldr	r3, [pc, #448]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f003 0304 	and.w	r3, r3, #4
 800edaa:	2b04      	cmp	r3, #4
 800edac:	d10c      	bne.n	800edc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800edae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d109      	bne.n	800edc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edb4:	4b6b      	ldr	r3, [pc, #428]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	08db      	lsrs	r3, r3, #3
 800edba:	f003 0303 	and.w	r3, r3, #3
 800edbe:	4a6a      	ldr	r2, [pc, #424]	@ (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800edc0:	fa22 f303 	lsr.w	r3, r2, r3
 800edc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edc6:	e01f      	b.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800edc8:	4b66      	ldr	r3, [pc, #408]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800edd4:	d106      	bne.n	800ede4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800edd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eddc:	d102      	bne.n	800ede4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800edde:	4b63      	ldr	r3, [pc, #396]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ede0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ede2:	e011      	b.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ede4:	4b5f      	ldr	r3, [pc, #380]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800edec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800edf0:	d106      	bne.n	800ee00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800edf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800edf8:	d102      	bne.n	800ee00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800edfa:	4b5d      	ldr	r3, [pc, #372]	@ (800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edfe:	e003      	b.n	800ee08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ee04:	f000 bc2f 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee08:	f000 bc2d 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ee0c:	4b59      	ldr	r3, [pc, #356]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ee0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee10:	f000 bc29 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee18:	f000 bc25 	b.w	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ee1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ee24:	430b      	orrs	r3, r1
 800ee26:	f040 80a7 	bne.w	800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ee2a:	4b4e      	ldr	r3, [pc, #312]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee2e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ee32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ee34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee3a:	d054      	beq.n	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ee42:	f200 808b 	bhi.w	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee4c:	f000 8083 	beq.w	800ef56 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ee50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ee56:	f200 8081 	bhi.w	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee60:	d02f      	beq.n	800eec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ee62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee68:	d878      	bhi.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d004      	beq.n	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ee70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee76:	d012      	beq.n	800ee9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ee78:	e070      	b.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee7a:	4b3a      	ldr	r3, [pc, #232]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee86:	d107      	bne.n	800ee98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 feb5 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee96:	e3e6      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee9c:	e3e3      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee9e:	4b31      	ldr	r3, [pc, #196]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eeaa:	d107      	bne.n	800eebc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eeac:	f107 0318 	add.w	r3, r7, #24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 fbfb 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eeba:	e3d4      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eec0:	e3d1      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eec2:	4b28      	ldr	r3, [pc, #160]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eeca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eece:	d107      	bne.n	800eee0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eed0:	f107 030c 	add.w	r3, r7, #12
 800eed4:	4618      	mov	r0, r3
 800eed6:	f000 fd3d 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eede:	e3c2      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eee4:	e3bf      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eee6:	4b1f      	ldr	r3, [pc, #124]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eeee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eef0:	4b1c      	ldr	r3, [pc, #112]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f003 0304 	and.w	r3, r3, #4
 800eef8:	2b04      	cmp	r3, #4
 800eefa:	d10c      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800eefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d109      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef02:	4b18      	ldr	r3, [pc, #96]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	08db      	lsrs	r3, r3, #3
 800ef08:	f003 0303 	and.w	r3, r3, #3
 800ef0c:	4a16      	ldr	r2, [pc, #88]	@ (800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ef0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef14:	e01e      	b.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef16:	4b13      	ldr	r3, [pc, #76]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef22:	d106      	bne.n	800ef32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ef24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef2a:	d102      	bne.n	800ef32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ef2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ef6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ef2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef30:	e010      	b.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef32:	4b0c      	ldr	r3, [pc, #48]	@ (800ef64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef3e:	d106      	bne.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ef40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef46:	d102      	bne.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef48:	4b09      	ldr	r3, [pc, #36]	@ (800ef70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef4c:	e002      	b.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ef52:	e388      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef54:	e387      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef56:	4b07      	ldr	r3, [pc, #28]	@ (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ef58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef5a:	e384      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef60:	e381      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ef62:	bf00      	nop
 800ef64:	58024400 	.word	0x58024400
 800ef68:	03d09000 	.word	0x03d09000
 800ef6c:	003d0900 	.word	0x003d0900
 800ef70:	016e3600 	.word	0x016e3600
 800ef74:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ef78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef7c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ef80:	430b      	orrs	r3, r1
 800ef82:	f040 809c 	bne.w	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ef86:	4b9e      	ldr	r3, [pc, #632]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ef8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef96:	d054      	beq.n	800f042 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ef98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ef9e:	f200 808b 	bhi.w	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efa8:	f000 8083 	beq.w	800f0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800efac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800efb2:	f200 8081 	bhi.w	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efbc:	d02f      	beq.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800efbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efc4:	d878      	bhi.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800efc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800efcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800efd2:	d012      	beq.n	800effa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800efd4:	e070      	b.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800efd6:	4b8a      	ldr	r3, [pc, #552]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efe2:	d107      	bne.n	800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efe8:	4618      	mov	r0, r3
 800efea:	f000 fe07 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eff2:	e338      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eff8:	e335      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800effa:	4b81      	ldr	r3, [pc, #516]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f006:	d107      	bne.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f008:	f107 0318 	add.w	r3, r7, #24
 800f00c:	4618      	mov	r0, r3
 800f00e:	f000 fb4d 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f016:	e326      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f01c:	e323      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f01e:	4b78      	ldr	r3, [pc, #480]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f02a:	d107      	bne.n	800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f02c:	f107 030c 	add.w	r3, r7, #12
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fc8f 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f03a:	e314      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f040:	e311      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f042:	4b6f      	ldr	r3, [pc, #444]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f04a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f04c:	4b6c      	ldr	r3, [pc, #432]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b04      	cmp	r3, #4
 800f056:	d10c      	bne.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800f058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d109      	bne.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f05e:	4b68      	ldr	r3, [pc, #416]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	08db      	lsrs	r3, r3, #3
 800f064:	f003 0303 	and.w	r3, r3, #3
 800f068:	4a66      	ldr	r2, [pc, #408]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f06a:	fa22 f303 	lsr.w	r3, r2, r3
 800f06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f070:	e01e      	b.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f072:	4b63      	ldr	r3, [pc, #396]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f07e:	d106      	bne.n	800f08e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f086:	d102      	bne.n	800f08e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f088:	4b5f      	ldr	r3, [pc, #380]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f08c:	e010      	b.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f08e:	4b5c      	ldr	r3, [pc, #368]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f09a:	d106      	bne.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800f09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f09e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0a2:	d102      	bne.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f0a4:	4b59      	ldr	r3, [pc, #356]	@ (800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0a8:	e002      	b.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f0ae:	e2da      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f0b0:	e2d9      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f0b2:	4b57      	ldr	r3, [pc, #348]	@ (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0b6:	e2d6      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0bc:	e2d3      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f0be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0c2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f0c6:	430b      	orrs	r3, r1
 800f0c8:	f040 80a7 	bne.w	800f21a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f0cc:	4b4c      	ldr	r3, [pc, #304]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f0d0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f0d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0dc:	d055      	beq.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800f0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f0e4:	f200 8096 	bhi.w	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0ee:	f000 8084 	beq.w	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f0f8:	f200 808c 	bhi.w	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f102:	d030      	beq.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800f104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f10a:	f200 8083 	bhi.w	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800f10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f11a:	d012      	beq.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800f11c:	e07a      	b.n	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f11e:	4b38      	ldr	r3, [pc, #224]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f12a:	d107      	bne.n	800f13c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f12c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f130:	4618      	mov	r0, r3
 800f132:	f000 fd63 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f13a:	e294      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f140:	e291      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f142:	4b2f      	ldr	r3, [pc, #188]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f14a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f14e:	d107      	bne.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f150:	f107 0318 	add.w	r3, r7, #24
 800f154:	4618      	mov	r0, r3
 800f156:	f000 faa9 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f15a:	69bb      	ldr	r3, [r7, #24]
 800f15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f15e:	e282      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f164:	e27f      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f166:	4b26      	ldr	r3, [pc, #152]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f172:	d107      	bne.n	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f174:	f107 030c 	add.w	r3, r7, #12
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 fbeb 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f182:	e270      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f188:	e26d      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f18a:	4b1d      	ldr	r3, [pc, #116]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f18c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f18e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f192:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f194:	4b1a      	ldr	r3, [pc, #104]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f003 0304 	and.w	r3, r3, #4
 800f19c:	2b04      	cmp	r3, #4
 800f19e:	d10c      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800f1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f1a6:	4b16      	ldr	r3, [pc, #88]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	08db      	lsrs	r3, r3, #3
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	4a14      	ldr	r2, [pc, #80]	@ (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800f1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1b8:	e01e      	b.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f1ba:	4b11      	ldr	r3, [pc, #68]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1c6:	d106      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1ce:	d102      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f1d0:	4b0d      	ldr	r3, [pc, #52]	@ (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800f1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1d4:	e010      	b.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1e2:	d106      	bne.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1ea:	d102      	bne.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1ec:	4b07      	ldr	r3, [pc, #28]	@ (800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1f0:	e002      	b.n	800f1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1f6:	e236      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f1f8:	e235      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1fa:	4b05      	ldr	r3, [pc, #20]	@ (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1fe:	e232      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f200:	58024400 	.word	0x58024400
 800f204:	03d09000 	.word	0x03d09000
 800f208:	003d0900 	.word	0x003d0900
 800f20c:	016e3600 	.word	0x016e3600
 800f210:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800f214:	2300      	movs	r3, #0
 800f216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f218:	e225      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f21e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f222:	430b      	orrs	r3, r1
 800f224:	f040 8085 	bne.w	800f332 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f228:	4b9c      	ldr	r3, [pc, #624]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f22c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f230:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f238:	d06b      	beq.n	800f312 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f240:	d874      	bhi.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f244:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f248:	d056      	beq.n	800f2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f250:	d86c      	bhi.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f254:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f258:	d03b      	beq.n	800f2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f260:	d864      	bhi.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f268:	d021      	beq.n	800f2ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f270:	d85c      	bhi.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	2b00      	cmp	r3, #0
 800f276:	d004      	beq.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f27e:	d004      	beq.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f280:	e054      	b.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f282:	f7fe fb5f 	bl	800d944 <HAL_RCC_GetPCLK1Freq>
 800f286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f288:	e1ed      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f28a:	4b84      	ldr	r3, [pc, #528]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f292:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f296:	d107      	bne.n	800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f298:	f107 0318 	add.w	r3, r7, #24
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 fa05 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2a6:	e1de      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ac:	e1db      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f2ae:	4b7b      	ldr	r3, [pc, #492]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f2b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2ba:	d107      	bne.n	800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2bc:	f107 030c 	add.w	r3, r7, #12
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fb47 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2ca:	e1cc      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2d0:	e1c9      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f2d2:	4b72      	ldr	r3, [pc, #456]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f003 0304 	and.w	r3, r3, #4
 800f2da:	2b04      	cmp	r3, #4
 800f2dc:	d109      	bne.n	800f2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2de:	4b6f      	ldr	r3, [pc, #444]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	08db      	lsrs	r3, r3, #3
 800f2e4:	f003 0303 	and.w	r3, r3, #3
 800f2e8:	4a6d      	ldr	r2, [pc, #436]	@ (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2f0:	e1b9      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2f6:	e1b6      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f2f8:	4b68      	ldr	r3, [pc, #416]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f304:	d102      	bne.n	800f30c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800f306:	4b67      	ldr	r3, [pc, #412]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f30a:	e1ac      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f30c:	2300      	movs	r3, #0
 800f30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f310:	e1a9      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f312:	4b62      	ldr	r3, [pc, #392]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f31a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f31e:	d102      	bne.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800f320:	4b61      	ldr	r3, [pc, #388]	@ (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f324:	e19f      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f32a:	e19c      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f330:	e199      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f332:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f336:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f33a:	430b      	orrs	r3, r1
 800f33c:	d173      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f33e:	4b57      	ldr	r3, [pc, #348]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f342:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f346:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f34e:	d02f      	beq.n	800f3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f356:	d863      	bhi.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d004      	beq.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f364:	d012      	beq.n	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f366:	e05b      	b.n	800f420 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f368:	4b4c      	ldr	r3, [pc, #304]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f374:	d107      	bne.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f376:	f107 0318 	add.w	r3, r7, #24
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 f996 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f384:	e16f      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f386:	2300      	movs	r3, #0
 800f388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f38a:	e16c      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f38c:	4b43      	ldr	r3, [pc, #268]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f398:	d107      	bne.n	800f3aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f39a:	f107 030c 	add.w	r3, r7, #12
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 fad8 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3a8:	e15d      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3ae:	e15a      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3b0:	4b3a      	ldr	r3, [pc, #232]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3b8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3ba:	4b38      	ldr	r3, [pc, #224]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f003 0304 	and.w	r3, r3, #4
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d10c      	bne.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d109      	bne.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3cc:	4b33      	ldr	r3, [pc, #204]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	08db      	lsrs	r3, r3, #3
 800f3d2:	f003 0303 	and.w	r3, r3, #3
 800f3d6:	4a32      	ldr	r2, [pc, #200]	@ (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3de:	e01e      	b.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f3e0:	4b2e      	ldr	r3, [pc, #184]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3ec:	d106      	bne.n	800f3fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3f4:	d102      	bne.n	800f3fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f3f6:	4b2b      	ldr	r3, [pc, #172]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3fa:	e010      	b.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3fc:	4b27      	ldr	r3, [pc, #156]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f408:	d106      	bne.n	800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f40c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f410:	d102      	bne.n	800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f412:	4b25      	ldr	r3, [pc, #148]	@ (800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f416:	e002      	b.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f41c:	e123      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f41e:	e122      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f420:	2300      	movs	r3, #0
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f424:	e11f      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f42a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f42e:	430b      	orrs	r3, r1
 800f430:	d13c      	bne.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f432:	4b1a      	ldr	r3, [pc, #104]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f43a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d004      	beq.n	800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f448:	d012      	beq.n	800f470 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f44a:	e023      	b.n	800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f44c:	4b13      	ldr	r3, [pc, #76]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f458:	d107      	bne.n	800f46a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f45a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fbcc 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f468:	e0fd      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f46a:	2300      	movs	r3, #0
 800f46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f46e:	e0fa      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f470:	4b0a      	ldr	r3, [pc, #40]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f478:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f47c:	d107      	bne.n	800f48e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f47e:	f107 0318 	add.w	r3, r7, #24
 800f482:	4618      	mov	r0, r3
 800f484:	f000 f912 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f48c:	e0eb      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f492:	e0e8      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f498:	e0e5      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f49a:	bf00      	nop
 800f49c:	58024400 	.word	0x58024400
 800f4a0:	03d09000 	.word	0x03d09000
 800f4a4:	003d0900 	.word	0x003d0900
 800f4a8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f4ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f4b4:	430b      	orrs	r3, r1
 800f4b6:	f040 8085 	bne.w	800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f4ba:	4b6d      	ldr	r3, [pc, #436]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f4bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f4c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ca:	d06b      	beq.n	800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4d2:	d874      	bhi.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4da:	d056      	beq.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e2:	d86c      	bhi.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4ea:	d03b      	beq.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4f2:	d864      	bhi.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4fa:	d021      	beq.n	800f540 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f502:	d85c      	bhi.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f506:	2b00      	cmp	r3, #0
 800f508:	d004      	beq.n	800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f50c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f510:	d004      	beq.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f512:	e054      	b.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f514:	f000 f8b4 	bl	800f680 <HAL_RCCEx_GetD3PCLK1Freq>
 800f518:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f51a:	e0a4      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f51c:	4b54      	ldr	r3, [pc, #336]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f528:	d107      	bne.n	800f53a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f52a:	f107 0318 	add.w	r3, r7, #24
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f8bc 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f538:	e095      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f53e:	e092      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f540:	4b4b      	ldr	r3, [pc, #300]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f54c:	d107      	bne.n	800f55e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f54e:	f107 030c 	add.w	r3, r7, #12
 800f552:	4618      	mov	r0, r3
 800f554:	f000 f9fe 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f55c:	e083      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f562:	e080      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f564:	4b42      	ldr	r3, [pc, #264]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f003 0304 	and.w	r3, r3, #4
 800f56c:	2b04      	cmp	r3, #4
 800f56e:	d109      	bne.n	800f584 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f570:	4b3f      	ldr	r3, [pc, #252]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	08db      	lsrs	r3, r3, #3
 800f576:	f003 0303 	and.w	r3, r3, #3
 800f57a:	4a3e      	ldr	r2, [pc, #248]	@ (800f674 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f57c:	fa22 f303 	lsr.w	r3, r2, r3
 800f580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f582:	e070      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f584:	2300      	movs	r3, #0
 800f586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f588:	e06d      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f58a:	4b39      	ldr	r3, [pc, #228]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f596:	d102      	bne.n	800f59e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800f598:	4b37      	ldr	r3, [pc, #220]	@ (800f678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f59c:	e063      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5a2:	e060      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f5a4:	4b32      	ldr	r3, [pc, #200]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5b0:	d102      	bne.n	800f5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800f5b2:	4b32      	ldr	r3, [pc, #200]	@ (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5b6:	e056      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5bc:	e053      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5c2:	e050      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f5cc:	430b      	orrs	r3, r1
 800f5ce:	d148      	bne.n	800f662 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f5d0:	4b27      	ldr	r3, [pc, #156]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f5d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5e0:	d02a      	beq.n	800f638 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f5e8:	d838      	bhi.n	800f65c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d004      	beq.n	800f5fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f5f6:	d00d      	beq.n	800f614 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f5f8:	e030      	b.n	800f65c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f606:	d102      	bne.n	800f60e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800f608:	4b1c      	ldr	r3, [pc, #112]	@ (800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f60c:	e02b      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f612:	e028      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f614:	4b16      	ldr	r3, [pc, #88]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f61c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f620:	d107      	bne.n	800f632 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fae8 	bl	800fbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f630:	e019      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f636:	e016      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f638:	4b0d      	ldr	r3, [pc, #52]	@ (800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f644:	d107      	bne.n	800f656 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f646:	f107 0318 	add.w	r3, r7, #24
 800f64a:	4618      	mov	r0, r3
 800f64c:	f000 f82e 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f654:	e007      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f65a:	e004      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f660:	e001      	b.n	800f666 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800f662:	2300      	movs	r3, #0
 800f664:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3740      	adds	r7, #64	@ 0x40
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	58024400 	.word	0x58024400
 800f674:	03d09000 	.word	0x03d09000
 800f678:	003d0900 	.word	0x003d0900
 800f67c:	016e3600 	.word	0x016e3600

0800f680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f684:	f7fe f92e 	bl	800d8e4 <HAL_RCC_GetHCLKFreq>
 800f688:	4602      	mov	r2, r0
 800f68a:	4b06      	ldr	r3, [pc, #24]	@ (800f6a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f68c:	6a1b      	ldr	r3, [r3, #32]
 800f68e:	091b      	lsrs	r3, r3, #4
 800f690:	f003 0307 	and.w	r3, r3, #7
 800f694:	4904      	ldr	r1, [pc, #16]	@ (800f6a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f696:	5ccb      	ldrb	r3, [r1, r3]
 800f698:	f003 031f 	and.w	r3, r3, #31
 800f69c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	58024400 	.word	0x58024400
 800f6a8:	0801d2b8 	.word	0x0801d2b8

0800f6ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b089      	sub	sp, #36	@ 0x24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f6b4:	4ba1      	ldr	r3, [pc, #644]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6b8:	f003 0303 	and.w	r3, r3, #3
 800f6bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f6be:	4b9f      	ldr	r3, [pc, #636]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c2:	0b1b      	lsrs	r3, r3, #12
 800f6c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f6c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ce:	091b      	lsrs	r3, r3, #4
 800f6d0:	f003 0301 	and.w	r3, r3, #1
 800f6d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f6d6:	4b99      	ldr	r3, [pc, #612]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6da:	08db      	lsrs	r3, r3, #3
 800f6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	fb02 f303 	mul.w	r3, r2, r3
 800f6e6:	ee07 3a90 	vmov	s15, r3
 800f6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 8111 	beq.w	800f91c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	f000 8083 	beq.w	800f808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b02      	cmp	r3, #2
 800f706:	f200 80a1 	bhi.w	800f84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d003      	beq.n	800f718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d056      	beq.n	800f7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f716:	e099      	b.n	800f84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f718:	4b88      	ldr	r3, [pc, #544]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	f003 0320 	and.w	r3, r3, #32
 800f720:	2b00      	cmp	r3, #0
 800f722:	d02d      	beq.n	800f780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f724:	4b85      	ldr	r3, [pc, #532]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	08db      	lsrs	r3, r3, #3
 800f72a:	f003 0303 	and.w	r3, r3, #3
 800f72e:	4a84      	ldr	r2, [pc, #528]	@ (800f940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f730:	fa22 f303 	lsr.w	r3, r2, r3
 800f734:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	ee07 3a90 	vmov	s15, r3
 800f73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	ee07 3a90 	vmov	s15, r3
 800f746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f74e:	4b7b      	ldr	r3, [pc, #492]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f756:	ee07 3a90 	vmov	s15, r3
 800f75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f762:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f77a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f77e:	e087      	b.n	800f890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	ee07 3a90 	vmov	s15, r3
 800f786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f78a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f792:	4b6a      	ldr	r3, [pc, #424]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f79a:	ee07 3a90 	vmov	s15, r3
 800f79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7c2:	e065      	b.n	800f890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	ee07 3a90 	vmov	s15, r3
 800f7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7d6:	4b59      	ldr	r3, [pc, #356]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7de:	ee07 3a90 	vmov	s15, r3
 800f7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f806:	e043      	b.n	800f890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	ee07 3a90 	vmov	s15, r3
 800f80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f812:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f81a:	4b48      	ldr	r3, [pc, #288]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f822:	ee07 3a90 	vmov	s15, r3
 800f826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f82e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f84a:	e021      	b.n	800f890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	ee07 3a90 	vmov	s15, r3
 800f852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f856:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f85e:	4b37      	ldr	r3, [pc, #220]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f866:	ee07 3a90 	vmov	s15, r3
 800f86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f872:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f88e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f890:	4b2a      	ldr	r3, [pc, #168]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f894:	0a5b      	lsrs	r3, r3, #9
 800f896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f89a:	ee07 3a90 	vmov	s15, r3
 800f89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8b6:	ee17 2a90 	vmov	r2, s15
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f8be:	4b1f      	ldr	r3, [pc, #124]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c2:	0c1b      	lsrs	r3, r3, #16
 800f8c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8c8:	ee07 3a90 	vmov	s15, r3
 800f8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8e4:	ee17 2a90 	vmov	r2, s15
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f8ec:	4b13      	ldr	r3, [pc, #76]	@ (800f93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8f0:	0e1b      	lsrs	r3, r3, #24
 800f8f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8f6:	ee07 3a90 	vmov	s15, r3
 800f8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f902:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f906:	edd7 6a07 	vldr	s13, [r7, #28]
 800f90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f912:	ee17 2a90 	vmov	r2, s15
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f91a:	e008      	b.n	800f92e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	609a      	str	r2, [r3, #8]
}
 800f92e:	bf00      	nop
 800f930:	3724      	adds	r7, #36	@ 0x24
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	58024400 	.word	0x58024400
 800f940:	03d09000 	.word	0x03d09000
 800f944:	46000000 	.word	0x46000000
 800f948:	4c742400 	.word	0x4c742400
 800f94c:	4a742400 	.word	0x4a742400
 800f950:	4bb71b00 	.word	0x4bb71b00

0800f954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f954:	b480      	push	{r7}
 800f956:	b089      	sub	sp, #36	@ 0x24
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f95c:	4ba1      	ldr	r3, [pc, #644]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f966:	4b9f      	ldr	r3, [pc, #636]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96a:	0d1b      	lsrs	r3, r3, #20
 800f96c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f972:	4b9c      	ldr	r3, [pc, #624]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f976:	0a1b      	lsrs	r3, r3, #8
 800f978:	f003 0301 	and.w	r3, r3, #1
 800f97c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f97e:	4b99      	ldr	r3, [pc, #612]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f982:	08db      	lsrs	r3, r3, #3
 800f984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	fb02 f303 	mul.w	r3, r2, r3
 800f98e:	ee07 3a90 	vmov	s15, r3
 800f992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 8111 	beq.w	800fbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	f000 8083 	beq.w	800fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	f200 80a1 	bhi.w	800faf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d056      	beq.n	800fa6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f9be:	e099      	b.n	800faf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9c0:	4b88      	ldr	r3, [pc, #544]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f003 0320 	and.w	r3, r3, #32
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d02d      	beq.n	800fa28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f9cc:	4b85      	ldr	r3, [pc, #532]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	08db      	lsrs	r3, r3, #3
 800f9d2:	f003 0303 	and.w	r3, r3, #3
 800f9d6:	4a84      	ldr	r2, [pc, #528]	@ (800fbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800f9dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	ee07 3a90 	vmov	s15, r3
 800f9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	ee07 3a90 	vmov	s15, r3
 800f9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9f6:	4b7b      	ldr	r3, [pc, #492]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fe:	ee07 3a90 	vmov	s15, r3
 800fa02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa06:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fa26:	e087      	b.n	800fb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	ee07 3a90 	vmov	s15, r3
 800fa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa3a:	4b6a      	ldr	r3, [pc, #424]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa42:	ee07 3a90 	vmov	s15, r3
 800fa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa6a:	e065      	b.n	800fb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	ee07 3a90 	vmov	s15, r3
 800fa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa7e:	4b59      	ldr	r3, [pc, #356]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa86:	ee07 3a90 	vmov	s15, r3
 800fa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faae:	e043      	b.n	800fb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	ee07 3a90 	vmov	s15, r3
 800fab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fac2:	4b48      	ldr	r3, [pc, #288]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faca:	ee07 3a90 	vmov	s15, r3
 800face:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fad6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faf2:	e021      	b.n	800fb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	ee07 3a90 	vmov	s15, r3
 800fafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb06:	4b37      	ldr	r3, [pc, #220]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fb38:	4b2a      	ldr	r3, [pc, #168]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb3c:	0a5b      	lsrs	r3, r3, #9
 800fb3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb42:	ee07 3a90 	vmov	s15, r3
 800fb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb52:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb5e:	ee17 2a90 	vmov	r2, s15
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fb66:	4b1f      	ldr	r3, [pc, #124]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb6a:	0c1b      	lsrs	r3, r3, #16
 800fb6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb70:	ee07 3a90 	vmov	s15, r3
 800fb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fb7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb80:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb8c:	ee17 2a90 	vmov	r2, s15
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fb94:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb98:	0e1b      	lsrs	r3, r3, #24
 800fb9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb9e:	ee07 3a90 	vmov	s15, r3
 800fba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbba:	ee17 2a90 	vmov	r2, s15
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fbc2:	e008      	b.n	800fbd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	609a      	str	r2, [r3, #8]
}
 800fbd6:	bf00      	nop
 800fbd8:	3724      	adds	r7, #36	@ 0x24
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	58024400 	.word	0x58024400
 800fbe8:	03d09000 	.word	0x03d09000
 800fbec:	46000000 	.word	0x46000000
 800fbf0:	4c742400 	.word	0x4c742400
 800fbf4:	4a742400 	.word	0x4a742400
 800fbf8:	4bb71b00 	.word	0x4bb71b00

0800fbfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b089      	sub	sp, #36	@ 0x24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fc04:	4ba0      	ldr	r3, [pc, #640]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc08:	f003 0303 	and.w	r3, r3, #3
 800fc0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fc0e:	4b9e      	ldr	r3, [pc, #632]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc12:	091b      	lsrs	r3, r3, #4
 800fc14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fc24:	4b98      	ldr	r3, [pc, #608]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc28:	08db      	lsrs	r3, r3, #3
 800fc2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	fb02 f303 	mul.w	r3, r2, r3
 800fc34:	ee07 3a90 	vmov	s15, r3
 800fc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 8111 	beq.w	800fe6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	f000 8083 	beq.w	800fd56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	f200 80a1 	bhi.w	800fd9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d056      	beq.n	800fd12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fc64:	e099      	b.n	800fd9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc66:	4b88      	ldr	r3, [pc, #544]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f003 0320 	and.w	r3, r3, #32
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d02d      	beq.n	800fcce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc72:	4b85      	ldr	r3, [pc, #532]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	08db      	lsrs	r3, r3, #3
 800fc78:	f003 0303 	and.w	r3, r3, #3
 800fc7c:	4a83      	ldr	r2, [pc, #524]	@ (800fe8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	ee07 3a90 	vmov	s15, r3
 800fc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	ee07 3a90 	vmov	s15, r3
 800fc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc9c:	4b7a      	ldr	r3, [pc, #488]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fca4:	ee07 3a90 	vmov	s15, r3
 800fca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcac:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcb0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fcc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fccc:	e087      	b.n	800fdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	ee07 3a90 	vmov	s15, r3
 800fcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fe94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fcdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fce0:	4b69      	ldr	r3, [pc, #420]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fce8:	ee07 3a90 	vmov	s15, r3
 800fcec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fcf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcf4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd10:	e065      	b.n	800fdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	ee07 3a90 	vmov	s15, r3
 800fd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd1c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fe98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fd20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd24:	4b58      	ldr	r3, [pc, #352]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd2c:	ee07 3a90 	vmov	s15, r3
 800fd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd34:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd38:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd54:	e043      	b.n	800fdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd60:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fe9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fd64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd68:	4b47      	ldr	r3, [pc, #284]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd70:	ee07 3a90 	vmov	s15, r3
 800fd74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd78:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd7c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd98:	e021      	b.n	800fdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	ee07 3a90 	vmov	s15, r3
 800fda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fe94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fda8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdac:	4b36      	ldr	r3, [pc, #216]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdb4:	ee07 3a90 	vmov	s15, r3
 800fdb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdc0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fe90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fddc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fdde:	4b2a      	ldr	r3, [pc, #168]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fde0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fde2:	0a5b      	lsrs	r3, r3, #9
 800fde4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fde8:	ee07 3a90 	vmov	s15, r3
 800fdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fdf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe04:	ee17 2a90 	vmov	r2, s15
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fe0c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe10:	0c1b      	lsrs	r3, r3, #16
 800fe12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe16:	ee07 3a90 	vmov	s15, r3
 800fe1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe26:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe32:	ee17 2a90 	vmov	r2, s15
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fe3a:	4b13      	ldr	r3, [pc, #76]	@ (800fe88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe3e:	0e1b      	lsrs	r3, r3, #24
 800fe40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe44:	ee07 3a90 	vmov	s15, r3
 800fe48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fe54:	edd7 6a07 	vldr	s13, [r7, #28]
 800fe58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe60:	ee17 2a90 	vmov	r2, s15
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fe68:	e008      	b.n	800fe7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2200      	movs	r2, #0
 800fe74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	609a      	str	r2, [r3, #8]
}
 800fe7c:	bf00      	nop
 800fe7e:	3724      	adds	r7, #36	@ 0x24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr
 800fe88:	58024400 	.word	0x58024400
 800fe8c:	03d09000 	.word	0x03d09000
 800fe90:	46000000 	.word	0x46000000
 800fe94:	4c742400 	.word	0x4c742400
 800fe98:	4a742400 	.word	0x4a742400
 800fe9c:	4bb71b00 	.word	0x4bb71b00

0800fea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800feaa:	2300      	movs	r3, #0
 800feac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800feae:	4b53      	ldr	r3, [pc, #332]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800feb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800feb2:	f003 0303 	and.w	r3, r3, #3
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	d101      	bne.n	800febe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	e099      	b.n	800fff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800febe:	4b4f      	ldr	r3, [pc, #316]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a4e      	ldr	r2, [pc, #312]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800fec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800feca:	f7f6 ff39 	bl	8006d40 <HAL_GetTick>
 800fece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fed0:	e008      	b.n	800fee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fed2:	f7f6 ff35 	bl	8006d40 <HAL_GetTick>
 800fed6:	4602      	mov	r2, r0
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	2b02      	cmp	r3, #2
 800fede:	d901      	bls.n	800fee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fee0:	2303      	movs	r3, #3
 800fee2:	e086      	b.n	800fff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fee4:	4b45      	ldr	r3, [pc, #276]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800feec:	2b00      	cmp	r3, #0
 800feee:	d1f0      	bne.n	800fed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fef0:	4b42      	ldr	r3, [pc, #264]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800fef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	031b      	lsls	r3, r3, #12
 800fefe:	493f      	ldr	r1, [pc, #252]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff00:	4313      	orrs	r3, r2
 800ff02:	628b      	str	r3, [r1, #40]	@ 0x28
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	025b      	lsls	r3, r3, #9
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	431a      	orrs	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	041b      	lsls	r3, r3, #16
 800ff22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ff26:	431a      	orrs	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	691b      	ldr	r3, [r3, #16]
 800ff2c:	3b01      	subs	r3, #1
 800ff2e:	061b      	lsls	r3, r3, #24
 800ff30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ff34:	4931      	ldr	r1, [pc, #196]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff36:	4313      	orrs	r3, r2
 800ff38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ff3a:	4b30      	ldr	r3, [pc, #192]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	695b      	ldr	r3, [r3, #20]
 800ff46:	492d      	ldr	r1, [pc, #180]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ff4c:	4b2b      	ldr	r3, [pc, #172]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff50:	f023 0220 	bic.w	r2, r3, #32
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	699b      	ldr	r3, [r3, #24]
 800ff58:	4928      	ldr	r1, [pc, #160]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ff5e:	4b27      	ldr	r3, [pc, #156]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff62:	4a26      	ldr	r2, [pc, #152]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff64:	f023 0310 	bic.w	r3, r3, #16
 800ff68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff6a:	4b24      	ldr	r3, [pc, #144]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff6e:	4b24      	ldr	r3, [pc, #144]	@ (8010000 <RCCEx_PLL2_Config+0x160>)
 800ff70:	4013      	ands	r3, r2
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	69d2      	ldr	r2, [r2, #28]
 800ff76:	00d2      	lsls	r2, r2, #3
 800ff78:	4920      	ldr	r1, [pc, #128]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff7a:	4313      	orrs	r3, r2
 800ff7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ff7e:	4b1f      	ldr	r3, [pc, #124]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff82:	4a1e      	ldr	r2, [pc, #120]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff84:	f043 0310 	orr.w	r3, r3, #16
 800ff88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d106      	bne.n	800ff9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ff90:	4b1a      	ldr	r3, [pc, #104]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff94:	4a19      	ldr	r2, [pc, #100]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ff96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ff9c:	e00f      	b.n	800ffbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d106      	bne.n	800ffb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ffa4:	4b15      	ldr	r3, [pc, #84]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa8:	4a14      	ldr	r2, [pc, #80]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ffae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ffb0:	e005      	b.n	800ffbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ffb2:	4b12      	ldr	r3, [pc, #72]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb6:	4a11      	ldr	r2, [pc, #68]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ffbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ffbe:	4b0f      	ldr	r3, [pc, #60]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a0e      	ldr	r2, [pc, #56]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ffc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffca:	f7f6 feb9 	bl	8006d40 <HAL_GetTick>
 800ffce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ffd0:	e008      	b.n	800ffe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ffd2:	f7f6 feb5 	bl	8006d40 <HAL_GetTick>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d901      	bls.n	800ffe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ffe0:	2303      	movs	r3, #3
 800ffe2:	e006      	b.n	800fff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ffe4:	4b05      	ldr	r3, [pc, #20]	@ (800fffc <RCCEx_PLL2_Config+0x15c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d0f0      	beq.n	800ffd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	58024400 	.word	0x58024400
 8010000:	ffff0007 	.word	0xffff0007

08010004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801000e:	2300      	movs	r3, #0
 8010010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010012:	4b53      	ldr	r3, [pc, #332]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010016:	f003 0303 	and.w	r3, r3, #3
 801001a:	2b03      	cmp	r3, #3
 801001c:	d101      	bne.n	8010022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801001e:	2301      	movs	r3, #1
 8010020:	e099      	b.n	8010156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010022:	4b4f      	ldr	r3, [pc, #316]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a4e      	ldr	r2, [pc, #312]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801002c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801002e:	f7f6 fe87 	bl	8006d40 <HAL_GetTick>
 8010032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010034:	e008      	b.n	8010048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010036:	f7f6 fe83 	bl	8006d40 <HAL_GetTick>
 801003a:	4602      	mov	r2, r0
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	1ad3      	subs	r3, r2, r3
 8010040:	2b02      	cmp	r3, #2
 8010042:	d901      	bls.n	8010048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010044:	2303      	movs	r3, #3
 8010046:	e086      	b.n	8010156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010048:	4b45      	ldr	r3, [pc, #276]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1f0      	bne.n	8010036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010054:	4b42      	ldr	r3, [pc, #264]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	051b      	lsls	r3, r3, #20
 8010062:	493f      	ldr	r1, [pc, #252]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010064:	4313      	orrs	r3, r2
 8010066:	628b      	str	r3, [r1, #40]	@ 0x28
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	3b01      	subs	r3, #1
 801006e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	3b01      	subs	r3, #1
 8010078:	025b      	lsls	r3, r3, #9
 801007a:	b29b      	uxth	r3, r3
 801007c:	431a      	orrs	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	3b01      	subs	r3, #1
 8010084:	041b      	lsls	r3, r3, #16
 8010086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801008a:	431a      	orrs	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	3b01      	subs	r3, #1
 8010092:	061b      	lsls	r3, r3, #24
 8010094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010098:	4931      	ldr	r1, [pc, #196]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801009a:	4313      	orrs	r3, r2
 801009c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801009e:	4b30      	ldr	r3, [pc, #192]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	695b      	ldr	r3, [r3, #20]
 80100aa:	492d      	ldr	r1, [pc, #180]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100ac:	4313      	orrs	r3, r2
 80100ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80100b0:	4b2b      	ldr	r3, [pc, #172]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	699b      	ldr	r3, [r3, #24]
 80100bc:	4928      	ldr	r1, [pc, #160]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100be:	4313      	orrs	r3, r2
 80100c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80100c2:	4b27      	ldr	r3, [pc, #156]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c6:	4a26      	ldr	r2, [pc, #152]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80100ce:	4b24      	ldr	r3, [pc, #144]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80100d2:	4b24      	ldr	r3, [pc, #144]	@ (8010164 <RCCEx_PLL3_Config+0x160>)
 80100d4:	4013      	ands	r3, r2
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	69d2      	ldr	r2, [r2, #28]
 80100da:	00d2      	lsls	r2, r2, #3
 80100dc:	4920      	ldr	r1, [pc, #128]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100de:	4313      	orrs	r3, r2
 80100e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80100e2:	4b1f      	ldr	r3, [pc, #124]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100e6:	4a1e      	ldr	r2, [pc, #120]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80100ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d106      	bne.n	8010102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80100f4:	4b1a      	ldr	r3, [pc, #104]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f8:	4a19      	ldr	r2, [pc, #100]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 80100fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80100fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010100:	e00f      	b.n	8010122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d106      	bne.n	8010116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010108:	4b15      	ldr	r3, [pc, #84]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801010a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010c:	4a14      	ldr	r2, [pc, #80]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801010e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010114:	e005      	b.n	8010122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010116:	4b12      	ldr	r3, [pc, #72]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801011a:	4a11      	ldr	r2, [pc, #68]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801011c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010122:	4b0f      	ldr	r3, [pc, #60]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a0e      	ldr	r2, [pc, #56]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 8010128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801012c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801012e:	f7f6 fe07 	bl	8006d40 <HAL_GetTick>
 8010132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010134:	e008      	b.n	8010148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010136:	f7f6 fe03 	bl	8006d40 <HAL_GetTick>
 801013a:	4602      	mov	r2, r0
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	2b02      	cmp	r3, #2
 8010142:	d901      	bls.n	8010148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010144:	2303      	movs	r3, #3
 8010146:	e006      	b.n	8010156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010148:	4b05      	ldr	r3, [pc, #20]	@ (8010160 <RCCEx_PLL3_Config+0x15c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0f0      	beq.n	8010136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010154:	7bfb      	ldrb	r3, [r7, #15]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	58024400 	.word	0x58024400
 8010164:	ffff0007 	.word	0xffff0007

08010168 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	e10f      	b.n	801039a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a87      	ldr	r2, [pc, #540]	@ (80103a4 <HAL_SPI_Init+0x23c>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d00f      	beq.n	80101aa <HAL_SPI_Init+0x42>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4a86      	ldr	r2, [pc, #536]	@ (80103a8 <HAL_SPI_Init+0x240>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d00a      	beq.n	80101aa <HAL_SPI_Init+0x42>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a84      	ldr	r2, [pc, #528]	@ (80103ac <HAL_SPI_Init+0x244>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d005      	beq.n	80101aa <HAL_SPI_Init+0x42>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	2b0f      	cmp	r3, #15
 80101a4:	d901      	bls.n	80101aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80101a6:	2301      	movs	r3, #1
 80101a8:	e0f7      	b.n	801039a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fef6 	bl	8010f9c <SPI_GetPacketSize>
 80101b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4a7b      	ldr	r2, [pc, #492]	@ (80103a4 <HAL_SPI_Init+0x23c>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d00c      	beq.n	80101d6 <HAL_SPI_Init+0x6e>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a79      	ldr	r2, [pc, #484]	@ (80103a8 <HAL_SPI_Init+0x240>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d007      	beq.n	80101d6 <HAL_SPI_Init+0x6e>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a78      	ldr	r2, [pc, #480]	@ (80103ac <HAL_SPI_Init+0x244>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d002      	beq.n	80101d6 <HAL_SPI_Init+0x6e>
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2b08      	cmp	r3, #8
 80101d4:	d811      	bhi.n	80101fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80101da:	4a72      	ldr	r2, [pc, #456]	@ (80103a4 <HAL_SPI_Init+0x23c>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d009      	beq.n	80101f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a70      	ldr	r2, [pc, #448]	@ (80103a8 <HAL_SPI_Init+0x240>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d004      	beq.n	80101f4 <HAL_SPI_Init+0x8c>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a6f      	ldr	r2, [pc, #444]	@ (80103ac <HAL_SPI_Init+0x244>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d104      	bne.n	80101fe <HAL_SPI_Init+0x96>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2b10      	cmp	r3, #16
 80101f8:	d901      	bls.n	80101fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e0cd      	b.n	801039a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010204:	b2db      	uxtb	r3, r3
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7f2 f9f0 	bl	80025f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2202      	movs	r2, #2
 801021c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f022 0201 	bic.w	r2, r2, #1
 801022e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801023a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	699b      	ldr	r3, [r3, #24]
 8010240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010244:	d119      	bne.n	801027a <HAL_SPI_Init+0x112>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801024e:	d103      	bne.n	8010258 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010254:	2b00      	cmp	r3, #0
 8010256:	d008      	beq.n	801026a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10c      	bne.n	801027a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010268:	d107      	bne.n	801027a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010278:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00f      	beq.n	80102a6 <HAL_SPI_Init+0x13e>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	2b06      	cmp	r3, #6
 801028c:	d90b      	bls.n	80102a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	430a      	orrs	r2, r1
 80102a2:	601a      	str	r2, [r3, #0]
 80102a4:	e007      	b.n	80102b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80102b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	69da      	ldr	r2, [r3, #28]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102be:	431a      	orrs	r2, r3
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	431a      	orrs	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102c8:	ea42 0103 	orr.w	r1, r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	68da      	ldr	r2, [r3, #12]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	430a      	orrs	r2, r1
 80102d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e0:	431a      	orrs	r2, r3
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102e6:	431a      	orrs	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	699b      	ldr	r3, [r3, #24]
 80102ec:	431a      	orrs	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	691b      	ldr	r3, [r3, #16]
 80102f2:	431a      	orrs	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	695b      	ldr	r3, [r3, #20]
 80102f8:	431a      	orrs	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	431a      	orrs	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	431a      	orrs	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801030a:	431a      	orrs	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	431a      	orrs	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010316:	ea42 0103 	orr.w	r1, r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	430a      	orrs	r2, r1
 8010324:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d113      	bne.n	8010356 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010340:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8010354:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f022 0201 	bic.w	r2, r2, #1
 8010364:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801036e:	2b00      	cmp	r3, #0
 8010370:	d00a      	beq.n	8010388 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	430a      	orrs	r2, r1
 8010386:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3710      	adds	r7, #16
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	40013000 	.word	0x40013000
 80103a8:	40003800 	.word	0x40003800
 80103ac:	40003c00 	.word	0x40003c00

080103b0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af02      	add	r7, sp, #8
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	4613      	mov	r3, r2
 80103be:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3320      	adds	r3, #32
 80103c6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80103c8:	f7f6 fcba 	bl	8006d40 <HAL_GetTick>
 80103cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d001      	beq.n	80103de <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80103da:	2302      	movs	r3, #2
 80103dc:	e1d1      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <HAL_SPI_Transmit+0x3a>
 80103e4:	88fb      	ldrh	r3, [r7, #6]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d101      	bne.n	80103ee <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80103ea:	2301      	movs	r3, #1
 80103ec:	e1c9      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d101      	bne.n	80103fc <HAL_SPI_Transmit+0x4c>
 80103f8:	2302      	movs	r3, #2
 80103fa:	e1c2      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2201      	movs	r2, #1
 8010400:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2203      	movs	r2, #3
 8010408:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	88fa      	ldrh	r2, [r7, #6]
 801041e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	88fa      	ldrh	r2, [r7, #6]
 8010426:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2200      	movs	r2, #0
 801042e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	2200      	movs	r2, #0
 8010444:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2200      	movs	r2, #0
 801044a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010454:	d108      	bne.n	8010468 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010464:	601a      	str	r2, [r3, #0]
 8010466:	e009      	b.n	801047c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801047a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	685a      	ldr	r2, [r3, #4]
 8010482:	4b96      	ldr	r3, [pc, #600]	@ (80106dc <HAL_SPI_Transmit+0x32c>)
 8010484:	4013      	ands	r3, r2
 8010486:	88f9      	ldrh	r1, [r7, #6]
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	6812      	ldr	r2, [r2, #0]
 801048c:	430b      	orrs	r3, r1
 801048e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f042 0201 	orr.w	r2, r2, #1
 801049e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80104a8:	d107      	bne.n	80104ba <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80104b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	2b0f      	cmp	r3, #15
 80104c0:	d947      	bls.n	8010552 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80104c2:	e03f      	b.n	8010544 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	f003 0302 	and.w	r3, r3, #2
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d114      	bne.n	80104fc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	6812      	ldr	r2, [r2, #0]
 80104dc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80104e2:	1d1a      	adds	r2, r3, #4
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	3b01      	subs	r3, #1
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80104fa:	e023      	b.n	8010544 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104fc:	f7f6 fc20 	bl	8006d40 <HAL_GetTick>
 8010500:	4602      	mov	r2, r0
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	429a      	cmp	r2, r3
 801050a:	d803      	bhi.n	8010514 <HAL_SPI_Transmit+0x164>
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010512:	d102      	bne.n	801051a <HAL_SPI_Transmit+0x16a>
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d114      	bne.n	8010544 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f000 fc70 	bl	8010e00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010526:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2201      	movs	r2, #1
 8010534:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010540:	2303      	movs	r3, #3
 8010542:	e11e      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801054a:	b29b      	uxth	r3, r3
 801054c:	2b00      	cmp	r3, #0
 801054e:	d1b9      	bne.n	80104c4 <HAL_SPI_Transmit+0x114>
 8010550:	e0f1      	b.n	8010736 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	2b07      	cmp	r3, #7
 8010558:	f240 80e6 	bls.w	8010728 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801055c:	e05d      	b.n	801061a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	695b      	ldr	r3, [r3, #20]
 8010564:	f003 0302 	and.w	r3, r3, #2
 8010568:	2b02      	cmp	r3, #2
 801056a:	d132      	bne.n	80105d2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010572:	b29b      	uxth	r3, r3
 8010574:	2b01      	cmp	r3, #1
 8010576:	d918      	bls.n	80105aa <HAL_SPI_Transmit+0x1fa>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801057c:	2b00      	cmp	r3, #0
 801057e:	d014      	beq.n	80105aa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	6812      	ldr	r2, [r2, #0]
 801058a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010590:	1d1a      	adds	r2, r3, #4
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801059c:	b29b      	uxth	r3, r3
 801059e:	3b02      	subs	r3, #2
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105a8:	e037      	b.n	801061a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105ae:	881a      	ldrh	r2, [r3, #0]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105b8:	1c9a      	adds	r2, r3, #2
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	3b01      	subs	r3, #1
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80105d0:	e023      	b.n	801061a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105d2:	f7f6 fbb5 	bl	8006d40 <HAL_GetTick>
 80105d6:	4602      	mov	r2, r0
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d803      	bhi.n	80105ea <HAL_SPI_Transmit+0x23a>
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e8:	d102      	bne.n	80105f0 <HAL_SPI_Transmit+0x240>
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d114      	bne.n	801061a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 fc05 	bl	8010e00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80105fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2201      	movs	r2, #1
 801060a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010616:	2303      	movs	r3, #3
 8010618:	e0b3      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010620:	b29b      	uxth	r3, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d19b      	bne.n	801055e <HAL_SPI_Transmit+0x1ae>
 8010626:	e086      	b.n	8010736 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	695b      	ldr	r3, [r3, #20]
 801062e:	f003 0302 	and.w	r3, r3, #2
 8010632:	2b02      	cmp	r3, #2
 8010634:	d154      	bne.n	80106e0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801063c:	b29b      	uxth	r3, r3
 801063e:	2b03      	cmp	r3, #3
 8010640:	d918      	bls.n	8010674 <HAL_SPI_Transmit+0x2c4>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010646:	2b40      	cmp	r3, #64	@ 0x40
 8010648:	d914      	bls.n	8010674 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	6812      	ldr	r2, [r2, #0]
 8010654:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801065a:	1d1a      	adds	r2, r3, #4
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010666:	b29b      	uxth	r3, r3
 8010668:	3b04      	subs	r3, #4
 801066a:	b29a      	uxth	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8010672:	e059      	b.n	8010728 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801067a:	b29b      	uxth	r3, r3
 801067c:	2b01      	cmp	r3, #1
 801067e:	d917      	bls.n	80106b0 <HAL_SPI_Transmit+0x300>
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010684:	2b00      	cmp	r3, #0
 8010686:	d013      	beq.n	80106b0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801068c:	881a      	ldrh	r2, [r3, #0]
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010696:	1c9a      	adds	r2, r3, #2
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	3b02      	subs	r3, #2
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106ae:	e03b      	b.n	8010728 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	3320      	adds	r3, #32
 80106ba:	7812      	ldrb	r2, [r2, #0]
 80106bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106c2:	1c5a      	adds	r2, r3, #1
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	3b01      	subs	r3, #1
 80106d2:	b29a      	uxth	r2, r3
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80106da:	e025      	b.n	8010728 <HAL_SPI_Transmit+0x378>
 80106dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106e0:	f7f6 fb2e 	bl	8006d40 <HAL_GetTick>
 80106e4:	4602      	mov	r2, r0
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d803      	bhi.n	80106f8 <HAL_SPI_Transmit+0x348>
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f6:	d102      	bne.n	80106fe <HAL_SPI_Transmit+0x34e>
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d114      	bne.n	8010728 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f000 fb7e 	bl	8010e00 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801070a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8010724:	2303      	movs	r3, #3
 8010726:	e02c      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801072e:	b29b      	uxth	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	f47f af79 	bne.w	8010628 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	2200      	movs	r2, #0
 801073e:	2108      	movs	r1, #8
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f000 fbfd 	bl	8010f40 <SPI_WaitOnFlagUntilTimeout>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d007      	beq.n	801075c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010752:	f043 0220 	orr.w	r2, r3, #32
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f000 fb4f 	bl	8010e00 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010778:	2b00      	cmp	r3, #0
 801077a:	d001      	beq.n	8010780 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 801077c:	2301      	movs	r3, #1
 801077e:	e000      	b.n	8010782 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8010780:	2300      	movs	r3, #0
  }
}
 8010782:	4618      	mov	r0, r3
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop

0801078c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b08e      	sub	sp, #56	@ 0x38
 8010790:	af02      	add	r7, sp, #8
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3320      	adds	r3, #32
 80107a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3330      	adds	r3, #48	@ 0x30
 80107a8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107ae:	095b      	lsrs	r3, r3, #5
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	3301      	adds	r3, #1
 80107b4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80107b6:	f7f6 fac3 	bl	8006d40 <HAL_GetTick>
 80107ba:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80107bc:	887b      	ldrh	r3, [r7, #2]
 80107be:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80107c0:	887b      	ldrh	r3, [r7, #2]
 80107c2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d001      	beq.n	80107d4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80107d0:	2302      	movs	r3, #2
 80107d2:	e310      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d005      	beq.n	80107e6 <HAL_SPI_TransmitReceive+0x5a>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <HAL_SPI_TransmitReceive+0x5a>
 80107e0:	887b      	ldrh	r3, [r7, #2]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d101      	bne.n	80107ea <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80107e6:	2301      	movs	r3, #1
 80107e8:	e305      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d101      	bne.n	80107f8 <HAL_SPI_TransmitReceive+0x6c>
 80107f4:	2302      	movs	r3, #2
 80107f6:	e2fe      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2205      	movs	r2, #5
 8010804:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2200      	movs	r2, #0
 801080c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	887a      	ldrh	r2, [r7, #2]
 801081a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	887a      	ldrh	r2, [r7, #2]
 8010822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	68ba      	ldr	r2, [r7, #8]
 801082a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	887a      	ldrh	r2, [r7, #2]
 8010830:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	887a      	ldrh	r2, [r7, #2]
 8010838:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2200      	movs	r2, #0
 8010840:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2200      	movs	r2, #0
 8010846:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	68da      	ldr	r2, [r3, #12]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8010856:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a70      	ldr	r2, [pc, #448]	@ (8010a20 <HAL_SPI_TransmitReceive+0x294>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d009      	beq.n	8010876 <HAL_SPI_TransmitReceive+0xea>
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a6f      	ldr	r2, [pc, #444]	@ (8010a24 <HAL_SPI_TransmitReceive+0x298>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d004      	beq.n	8010876 <HAL_SPI_TransmitReceive+0xea>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a6d      	ldr	r2, [pc, #436]	@ (8010a28 <HAL_SPI_TransmitReceive+0x29c>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d102      	bne.n	801087c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8010876:	2310      	movs	r3, #16
 8010878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801087a:	e001      	b.n	8010880 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801087c:	2308      	movs	r3, #8
 801087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	685a      	ldr	r2, [r3, #4]
 8010886:	4b69      	ldr	r3, [pc, #420]	@ (8010a2c <HAL_SPI_TransmitReceive+0x2a0>)
 8010888:	4013      	ands	r3, r2
 801088a:	8879      	ldrh	r1, [r7, #2]
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	6812      	ldr	r2, [r2, #0]
 8010890:	430b      	orrs	r3, r1
 8010892:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f042 0201 	orr.w	r2, r2, #1
 80108a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80108ac:	d107      	bne.n	80108be <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80108bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	2b0f      	cmp	r3, #15
 80108c4:	f240 80a2 	bls.w	8010a0c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80108c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ca:	089b      	lsrs	r3, r3, #2
 80108cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80108ce:	e094      	b.n	80109fa <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	695b      	ldr	r3, [r3, #20]
 80108d6:	f003 0302 	and.w	r3, r3, #2
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d120      	bne.n	8010920 <HAL_SPI_TransmitReceive+0x194>
 80108de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d01d      	beq.n	8010920 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80108e4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80108e6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80108e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d217      	bcs.n	8010920 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6812      	ldr	r2, [r2, #0]
 80108fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010900:	1d1a      	adds	r2, r3, #4
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801090c:	b29b      	uxth	r3, r3
 801090e:	3b01      	subs	r3, #1
 8010910:	b29a      	uxth	r2, r3
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801091e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	695b      	ldr	r3, [r3, #20]
 8010926:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010928:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801092a:	2b00      	cmp	r3, #0
 801092c:	d065      	beq.n	80109fa <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	f003 0301 	and.w	r3, r3, #1
 8010938:	2b01      	cmp	r3, #1
 801093a:	d118      	bne.n	801096e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681a      	ldr	r2, [r3, #0]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010946:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801094c:	1d1a      	adds	r2, r3, #4
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010958:	b29b      	uxth	r3, r3
 801095a:	3b01      	subs	r3, #1
 801095c:	b29a      	uxth	r2, r3
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801096a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801096c:	e045      	b.n	80109fa <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801096e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010970:	8bfb      	ldrh	r3, [r7, #30]
 8010972:	429a      	cmp	r2, r3
 8010974:	d21d      	bcs.n	80109b2 <HAL_SPI_TransmitReceive+0x226>
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d018      	beq.n	80109b2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010988:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801098a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010990:	1d1a      	adds	r2, r3, #4
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801099c:	b29b      	uxth	r3, r3
 801099e:	3b01      	subs	r3, #1
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80109ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80109b0:	e023      	b.n	80109fa <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109b2:	f7f6 f9c5 	bl	8006d40 <HAL_GetTick>
 80109b6:	4602      	mov	r2, r0
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109be:	429a      	cmp	r2, r3
 80109c0:	d803      	bhi.n	80109ca <HAL_SPI_TransmitReceive+0x23e>
 80109c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c8:	d102      	bne.n	80109d0 <HAL_SPI_TransmitReceive+0x244>
 80109ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d114      	bne.n	80109fa <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 fa15 	bl	8010e00 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2201      	movs	r2, #1
 80109ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2200      	movs	r2, #0
 80109f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80109f6:	2303      	movs	r3, #3
 80109f8:	e1fd      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80109fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f47f af67 	bne.w	80108d0 <HAL_SPI_TransmitReceive+0x144>
 8010a02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f47f af63 	bne.w	80108d0 <HAL_SPI_TransmitReceive+0x144>
 8010a0a:	e1ce      	b.n	8010daa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	68db      	ldr	r3, [r3, #12]
 8010a10:	2b07      	cmp	r3, #7
 8010a12:	f240 81c2 	bls.w	8010d9a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8010a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a18:	085b      	lsrs	r3, r3, #1
 8010a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010a1c:	e0c9      	b.n	8010bb2 <HAL_SPI_TransmitReceive+0x426>
 8010a1e:	bf00      	nop
 8010a20:	40013000 	.word	0x40013000
 8010a24:	40003800 	.word	0x40003800
 8010a28:	40003c00 	.word	0x40003c00
 8010a2c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	f003 0302 	and.w	r3, r3, #2
 8010a3a:	2b02      	cmp	r3, #2
 8010a3c:	d11f      	bne.n	8010a7e <HAL_SPI_TransmitReceive+0x2f2>
 8010a3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d01c      	beq.n	8010a7e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010a44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010a46:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d216      	bcs.n	8010a7e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a54:	881a      	ldrh	r2, [r3, #0]
 8010a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a58:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a5e:	1c9a      	adds	r2, r3, #2
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010a7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f000 8092 	beq.w	8010bb2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d118      	bne.n	8010ace <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aa0:	6a3a      	ldr	r2, [r7, #32]
 8010aa2:	8812      	ldrh	r2, [r2, #0]
 8010aa4:	b292      	uxth	r2, r2
 8010aa6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010aac:	1c9a      	adds	r2, r3, #2
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	3b01      	subs	r3, #1
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010aca:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010acc:	e071      	b.n	8010bb2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010ace:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010ad0:	8bfb      	ldrh	r3, [r7, #30]
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d228      	bcs.n	8010b28 <HAL_SPI_TransmitReceive+0x39c>
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d023      	beq.n	8010b28 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ae4:	6a3a      	ldr	r2, [r7, #32]
 8010ae6:	8812      	ldrh	r2, [r2, #0]
 8010ae8:	b292      	uxth	r2, r2
 8010aea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010af0:	1c9a      	adds	r2, r3, #2
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010afa:	6a3a      	ldr	r2, [r7, #32]
 8010afc:	8812      	ldrh	r2, [r2, #0]
 8010afe:	b292      	uxth	r2, r2
 8010b00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b06:	1c9a      	adds	r2, r3, #2
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	3b02      	subs	r3, #2
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b24:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b26:	e044      	b.n	8010bb2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010b28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d11d      	bne.n	8010b6a <HAL_SPI_TransmitReceive+0x3de>
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d018      	beq.n	8010b6a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b3c:	6a3a      	ldr	r2, [r7, #32]
 8010b3e:	8812      	ldrh	r2, [r2, #0]
 8010b40:	b292      	uxth	r2, r2
 8010b42:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b48:	1c9a      	adds	r2, r3, #2
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	3b01      	subs	r3, #1
 8010b58:	b29a      	uxth	r2, r3
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010b66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010b68:	e023      	b.n	8010bb2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b6a:	f7f6 f8e9 	bl	8006d40 <HAL_GetTick>
 8010b6e:	4602      	mov	r2, r0
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d803      	bhi.n	8010b82 <HAL_SPI_TransmitReceive+0x3f6>
 8010b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b80:	d102      	bne.n	8010b88 <HAL_SPI_TransmitReceive+0x3fc>
 8010b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d114      	bne.n	8010bb2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f000 f939 	bl	8010e00 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	e121      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010bb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f47f af3b 	bne.w	8010a30 <HAL_SPI_TransmitReceive+0x2a4>
 8010bba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f47f af37 	bne.w	8010a30 <HAL_SPI_TransmitReceive+0x2a4>
 8010bc2:	e0f2      	b.n	8010daa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	695b      	ldr	r3, [r3, #20]
 8010bca:	f003 0302 	and.w	r3, r3, #2
 8010bce:	2b02      	cmp	r3, #2
 8010bd0:	d121      	bne.n	8010c16 <HAL_SPI_TransmitReceive+0x48a>
 8010bd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d01e      	beq.n	8010c16 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8010bd8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010bda:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8010bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bde:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d218      	bcs.n	8010c16 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3320      	adds	r3, #32
 8010bee:	7812      	ldrb	r2, [r2, #0]
 8010bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bf6:	1c5a      	adds	r2, r3, #1
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	3b01      	subs	r3, #1
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c14:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8010c1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 80ba 	beq.w	8010d9a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	695b      	ldr	r3, [r3, #20]
 8010c2c:	f003 0301 	and.w	r3, r3, #1
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d11b      	bne.n	8010c6c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c40:	7812      	ldrb	r2, [r2, #0]
 8010c42:	b2d2      	uxtb	r2, r2
 8010c44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c68:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010c6a:	e096      	b.n	8010d9a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010c6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8010c6e:	8bfb      	ldrh	r3, [r7, #30]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d24a      	bcs.n	8010d0a <HAL_SPI_TransmitReceive+0x57e>
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d045      	beq.n	8010d0a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c8a:	7812      	ldrb	r2, [r2, #0]
 8010c8c:	b2d2      	uxtb	r2, r2
 8010c8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ca6:	7812      	ldrb	r2, [r2, #0]
 8010ca8:	b2d2      	uxtb	r2, r2
 8010caa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cc2:	7812      	ldrb	r2, [r2, #0]
 8010cc4:	b2d2      	uxtb	r2, r2
 8010cc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ccc:	1c5a      	adds	r2, r3, #1
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010cde:	7812      	ldrb	r2, [r2, #0]
 8010ce0:	b2d2      	uxtb	r2, r2
 8010ce2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ce8:	1c5a      	adds	r2, r3, #1
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	3b04      	subs	r3, #4
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010d08:	e047      	b.n	8010d9a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010d0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010d0c:	2b03      	cmp	r3, #3
 8010d0e:	d820      	bhi.n	8010d52 <HAL_SPI_TransmitReceive+0x5c6>
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d01b      	beq.n	8010d52 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d26:	7812      	ldrb	r2, [r2, #0]
 8010d28:	b2d2      	uxtb	r2, r2
 8010d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d30:	1c5a      	adds	r2, r3, #1
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010d4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8010d50:	e023      	b.n	8010d9a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d52:	f7f5 fff5 	bl	8006d40 <HAL_GetTick>
 8010d56:	4602      	mov	r2, r0
 8010d58:	69bb      	ldr	r3, [r7, #24]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d803      	bhi.n	8010d6a <HAL_SPI_TransmitReceive+0x5de>
 8010d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d68:	d102      	bne.n	8010d70 <HAL_SPI_TransmitReceive+0x5e4>
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d114      	bne.n	8010d9a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8010d70:	68f8      	ldr	r0, [r7, #12]
 8010d72:	f000 f845 	bl	8010e00 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010d7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8010d96:	2303      	movs	r3, #3
 8010d98:	e02d      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010d9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f47f af11 	bne.w	8010bc4 <HAL_SPI_TransmitReceive+0x438>
 8010da2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f47f af0d 	bne.w	8010bc4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db0:	2200      	movs	r2, #0
 8010db2:	2108      	movs	r1, #8
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f000 f8c3 	bl	8010f40 <SPI_WaitOnFlagUntilTimeout>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d007      	beq.n	8010dd0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dc6:	f043 0220 	orr.w	r2, r3, #32
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f000 f815 	bl	8010e00 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d001      	beq.n	8010df4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8010df0:	2301      	movs	r3, #1
 8010df2:	e000      	b.n	8010df6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8010df4:	2300      	movs	r3, #0
  }
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3730      	adds	r7, #48	@ 0x30
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop

08010e00 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	695b      	ldr	r3, [r3, #20]
 8010e0e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	699a      	ldr	r2, [r3, #24]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f042 0208 	orr.w	r2, r2, #8
 8010e1e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	699a      	ldr	r2, [r3, #24]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f042 0210 	orr.w	r2, r2, #16
 8010e2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f022 0201 	bic.w	r2, r2, #1
 8010e3e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	6919      	ldr	r1, [r3, #16]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681a      	ldr	r2, [r3, #0]
 8010e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8010f3c <SPI_CloseTransfer+0x13c>)
 8010e4c:	400b      	ands	r3, r1
 8010e4e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	689a      	ldr	r2, [r3, #8]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010e5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b04      	cmp	r3, #4
 8010e6a:	d014      	beq.n	8010e96 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f003 0320 	and.w	r3, r3, #32
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00f      	beq.n	8010e96 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	699a      	ldr	r2, [r3, #24]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f042 0220 	orr.w	r2, r2, #32
 8010e94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	2b03      	cmp	r3, #3
 8010ea0:	d014      	beq.n	8010ecc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d00f      	beq.n	8010ecc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010eb2:	f043 0204 	orr.w	r2, r3, #4
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	699a      	ldr	r2, [r3, #24]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010eca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d00f      	beq.n	8010ef6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010edc:	f043 0201 	orr.w	r2, r3, #1
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	699a      	ldr	r2, [r3, #24]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010ef4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00f      	beq.n	8010f20 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f06:	f043 0208 	orr.w	r2, r3, #8
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	699a      	ldr	r2, [r3, #24]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010f1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010f30:	bf00      	nop
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	fffffc90 	.word	0xfffffc90

08010f40 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	603b      	str	r3, [r7, #0]
 8010f4c:	4613      	mov	r3, r2
 8010f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010f50:	e010      	b.n	8010f74 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f52:	f7f5 fef5 	bl	8006d40 <HAL_GetTick>
 8010f56:	4602      	mov	r2, r0
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	683a      	ldr	r2, [r7, #0]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d803      	bhi.n	8010f6a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f68:	d102      	bne.n	8010f70 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d101      	bne.n	8010f74 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010f70:	2303      	movs	r3, #3
 8010f72:	e00f      	b.n	8010f94 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	695a      	ldr	r2, [r3, #20]
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	4013      	ands	r3, r2
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	bf0c      	ite	eq
 8010f84:	2301      	moveq	r3, #1
 8010f86:	2300      	movne	r3, #0
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	79fb      	ldrb	r3, [r7, #7]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d0df      	beq.n	8010f52 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3710      	adds	r7, #16
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fa8:	095b      	lsrs	r3, r3, #5
 8010faa:	3301      	adds	r3, #1
 8010fac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	3307      	adds	r3, #7
 8010fba:	08db      	lsrs	r3, r3, #3
 8010fbc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	fb02 f303 	mul.w	r3, r2, r3
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3714      	adds	r7, #20
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr

08010fd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	e049      	b.n	8011078 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d106      	bne.n	8010ffe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7f1 fc05 	bl	8002808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2202      	movs	r2, #2
 8011002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	3304      	adds	r3, #4
 801100e:	4619      	mov	r1, r3
 8011010:	4610      	mov	r0, r2
 8011012:	f001 f9a3 	bl	801235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2201      	movs	r2, #1
 8011022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2201      	movs	r2, #1
 801102a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2201      	movs	r2, #1
 8011032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2201      	movs	r2, #1
 801103a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2201      	movs	r2, #1
 8011042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2201      	movs	r2, #1
 8011052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2201      	movs	r2, #1
 801105a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2201      	movs	r2, #1
 801106a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b01      	cmp	r3, #1
 8011092:	d001      	beq.n	8011098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8011094:	2301      	movs	r3, #1
 8011096:	e056      	b.n	8011146 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2202      	movs	r2, #2
 801109c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a2b      	ldr	r2, [pc, #172]	@ (8011154 <HAL_TIM_Base_Start+0xd4>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d02c      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80110b2:	d027      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4a27      	ldr	r2, [pc, #156]	@ (8011158 <HAL_TIM_Base_Start+0xd8>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d022      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a26      	ldr	r2, [pc, #152]	@ (801115c <HAL_TIM_Base_Start+0xdc>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d01d      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a24      	ldr	r2, [pc, #144]	@ (8011160 <HAL_TIM_Base_Start+0xe0>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d018      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a23      	ldr	r2, [pc, #140]	@ (8011164 <HAL_TIM_Base_Start+0xe4>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d013      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4a21      	ldr	r2, [pc, #132]	@ (8011168 <HAL_TIM_Base_Start+0xe8>)
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d00e      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a20      	ldr	r2, [pc, #128]	@ (801116c <HAL_TIM_Base_Start+0xec>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d009      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a1e      	ldr	r2, [pc, #120]	@ (8011170 <HAL_TIM_Base_Start+0xf0>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d004      	beq.n	8011104 <HAL_TIM_Base_Start+0x84>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4a1d      	ldr	r2, [pc, #116]	@ (8011174 <HAL_TIM_Base_Start+0xf4>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d115      	bne.n	8011130 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	689a      	ldr	r2, [r3, #8]
 801110a:	4b1b      	ldr	r3, [pc, #108]	@ (8011178 <HAL_TIM_Base_Start+0xf8>)
 801110c:	4013      	ands	r3, r2
 801110e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2b06      	cmp	r3, #6
 8011114:	d015      	beq.n	8011142 <HAL_TIM_Base_Start+0xc2>
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801111c:	d011      	beq.n	8011142 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f042 0201 	orr.w	r2, r2, #1
 801112c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801112e:	e008      	b.n	8011142 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f042 0201 	orr.w	r2, r2, #1
 801113e:	601a      	str	r2, [r3, #0]
 8011140:	e000      	b.n	8011144 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011144:	2300      	movs	r3, #0
}
 8011146:	4618      	mov	r0, r3
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	40010000 	.word	0x40010000
 8011158:	40000400 	.word	0x40000400
 801115c:	40000800 	.word	0x40000800
 8011160:	40000c00 	.word	0x40000c00
 8011164:	40010400 	.word	0x40010400
 8011168:	40001800 	.word	0x40001800
 801116c:	40014000 	.word	0x40014000
 8011170:	4000e000 	.word	0x4000e000
 8011174:	4000e400 	.word	0x4000e400
 8011178:	00010007 	.word	0x00010007

0801117c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801118a:	b2db      	uxtb	r3, r3
 801118c:	2b01      	cmp	r3, #1
 801118e:	d001      	beq.n	8011194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011190:	2301      	movs	r3, #1
 8011192:	e05e      	b.n	8011252 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2202      	movs	r2, #2
 8011198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	68da      	ldr	r2, [r3, #12]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f042 0201 	orr.w	r2, r2, #1
 80111aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4a2b      	ldr	r2, [pc, #172]	@ (8011260 <HAL_TIM_Base_Start_IT+0xe4>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d02c      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111be:	d027      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4a27      	ldr	r2, [pc, #156]	@ (8011264 <HAL_TIM_Base_Start_IT+0xe8>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d022      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4a26      	ldr	r2, [pc, #152]	@ (8011268 <HAL_TIM_Base_Start_IT+0xec>)
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d01d      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a24      	ldr	r2, [pc, #144]	@ (801126c <HAL_TIM_Base_Start_IT+0xf0>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d018      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4a23      	ldr	r2, [pc, #140]	@ (8011270 <HAL_TIM_Base_Start_IT+0xf4>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d013      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4a21      	ldr	r2, [pc, #132]	@ (8011274 <HAL_TIM_Base_Start_IT+0xf8>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d00e      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4a20      	ldr	r2, [pc, #128]	@ (8011278 <HAL_TIM_Base_Start_IT+0xfc>)
 80111f8:	4293      	cmp	r3, r2
 80111fa:	d009      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	4a1e      	ldr	r2, [pc, #120]	@ (801127c <HAL_TIM_Base_Start_IT+0x100>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d004      	beq.n	8011210 <HAL_TIM_Base_Start_IT+0x94>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4a1d      	ldr	r2, [pc, #116]	@ (8011280 <HAL_TIM_Base_Start_IT+0x104>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d115      	bne.n	801123c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	689a      	ldr	r2, [r3, #8]
 8011216:	4b1b      	ldr	r3, [pc, #108]	@ (8011284 <HAL_TIM_Base_Start_IT+0x108>)
 8011218:	4013      	ands	r3, r2
 801121a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2b06      	cmp	r3, #6
 8011220:	d015      	beq.n	801124e <HAL_TIM_Base_Start_IT+0xd2>
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011228:	d011      	beq.n	801124e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f042 0201 	orr.w	r2, r2, #1
 8011238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801123a:	e008      	b.n	801124e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f042 0201 	orr.w	r2, r2, #1
 801124a:	601a      	str	r2, [r3, #0]
 801124c:	e000      	b.n	8011250 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801124e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3714      	adds	r7, #20
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	40010000 	.word	0x40010000
 8011264:	40000400 	.word	0x40000400
 8011268:	40000800 	.word	0x40000800
 801126c:	40000c00 	.word	0x40000c00
 8011270:	40010400 	.word	0x40010400
 8011274:	40001800 	.word	0x40001800
 8011278:	40014000 	.word	0x40014000
 801127c:	4000e000 	.word	0x4000e000
 8011280:	4000e400 	.word	0x4000e400
 8011284:	00010007 	.word	0x00010007

08011288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d101      	bne.n	801129a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011296:	2301      	movs	r3, #1
 8011298:	e049      	b.n	801132e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2200      	movs	r2, #0
 80112aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 f841 	bl	8011336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2202      	movs	r2, #2
 80112b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	3304      	adds	r3, #4
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f001 f848 	bl	801235c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2201      	movs	r2, #1
 80112d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2201      	movs	r2, #1
 80112e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2201      	movs	r2, #1
 80112f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2201      	movs	r2, #1
 8011308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2201      	movs	r2, #1
 8011318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2201      	movs	r2, #1
 8011320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2201      	movs	r2, #1
 8011328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801132c:	2300      	movs	r3, #0
}
 801132e:	4618      	mov	r0, r3
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011336:	b480      	push	{r7}
 8011338:	b083      	sub	sp, #12
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801133e:	bf00      	nop
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr
	...

0801134c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d109      	bne.n	8011370 <HAL_TIM_PWM_Start+0x24>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011362:	b2db      	uxtb	r3, r3
 8011364:	2b01      	cmp	r3, #1
 8011366:	bf14      	ite	ne
 8011368:	2301      	movne	r3, #1
 801136a:	2300      	moveq	r3, #0
 801136c:	b2db      	uxtb	r3, r3
 801136e:	e03c      	b.n	80113ea <HAL_TIM_PWM_Start+0x9e>
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	2b04      	cmp	r3, #4
 8011374:	d109      	bne.n	801138a <HAL_TIM_PWM_Start+0x3e>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801137c:	b2db      	uxtb	r3, r3
 801137e:	2b01      	cmp	r3, #1
 8011380:	bf14      	ite	ne
 8011382:	2301      	movne	r3, #1
 8011384:	2300      	moveq	r3, #0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	e02f      	b.n	80113ea <HAL_TIM_PWM_Start+0x9e>
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2b08      	cmp	r3, #8
 801138e:	d109      	bne.n	80113a4 <HAL_TIM_PWM_Start+0x58>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011396:	b2db      	uxtb	r3, r3
 8011398:	2b01      	cmp	r3, #1
 801139a:	bf14      	ite	ne
 801139c:	2301      	movne	r3, #1
 801139e:	2300      	moveq	r3, #0
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	e022      	b.n	80113ea <HAL_TIM_PWM_Start+0x9e>
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	2b0c      	cmp	r3, #12
 80113a8:	d109      	bne.n	80113be <HAL_TIM_PWM_Start+0x72>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	bf14      	ite	ne
 80113b6:	2301      	movne	r3, #1
 80113b8:	2300      	moveq	r3, #0
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	e015      	b.n	80113ea <HAL_TIM_PWM_Start+0x9e>
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	2b10      	cmp	r3, #16
 80113c2:	d109      	bne.n	80113d8 <HAL_TIM_PWM_Start+0x8c>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	bf14      	ite	ne
 80113d0:	2301      	movne	r3, #1
 80113d2:	2300      	moveq	r3, #0
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	e008      	b.n	80113ea <HAL_TIM_PWM_Start+0x9e>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	bf14      	ite	ne
 80113e4:	2301      	movne	r3, #1
 80113e6:	2300      	moveq	r3, #0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80113ee:	2301      	movs	r3, #1
 80113f0:	e0ab      	b.n	801154a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d104      	bne.n	8011402 <HAL_TIM_PWM_Start+0xb6>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2202      	movs	r2, #2
 80113fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011400:	e023      	b.n	801144a <HAL_TIM_PWM_Start+0xfe>
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b04      	cmp	r3, #4
 8011406:	d104      	bne.n	8011412 <HAL_TIM_PWM_Start+0xc6>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2202      	movs	r2, #2
 801140c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011410:	e01b      	b.n	801144a <HAL_TIM_PWM_Start+0xfe>
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	2b08      	cmp	r3, #8
 8011416:	d104      	bne.n	8011422 <HAL_TIM_PWM_Start+0xd6>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2202      	movs	r2, #2
 801141c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011420:	e013      	b.n	801144a <HAL_TIM_PWM_Start+0xfe>
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	2b0c      	cmp	r3, #12
 8011426:	d104      	bne.n	8011432 <HAL_TIM_PWM_Start+0xe6>
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2202      	movs	r2, #2
 801142c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011430:	e00b      	b.n	801144a <HAL_TIM_PWM_Start+0xfe>
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	2b10      	cmp	r3, #16
 8011436:	d104      	bne.n	8011442 <HAL_TIM_PWM_Start+0xf6>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2202      	movs	r2, #2
 801143c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011440:	e003      	b.n	801144a <HAL_TIM_PWM_Start+0xfe>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2202      	movs	r2, #2
 8011446:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2201      	movs	r2, #1
 8011450:	6839      	ldr	r1, [r7, #0]
 8011452:	4618      	mov	r0, r3
 8011454:	f001 fba8 	bl	8012ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4a3d      	ldr	r2, [pc, #244]	@ (8011554 <HAL_TIM_PWM_Start+0x208>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d013      	beq.n	801148a <HAL_TIM_PWM_Start+0x13e>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4a3c      	ldr	r2, [pc, #240]	@ (8011558 <HAL_TIM_PWM_Start+0x20c>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d00e      	beq.n	801148a <HAL_TIM_PWM_Start+0x13e>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a3a      	ldr	r2, [pc, #232]	@ (801155c <HAL_TIM_PWM_Start+0x210>)
 8011472:	4293      	cmp	r3, r2
 8011474:	d009      	beq.n	801148a <HAL_TIM_PWM_Start+0x13e>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4a39      	ldr	r2, [pc, #228]	@ (8011560 <HAL_TIM_PWM_Start+0x214>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d004      	beq.n	801148a <HAL_TIM_PWM_Start+0x13e>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4a37      	ldr	r2, [pc, #220]	@ (8011564 <HAL_TIM_PWM_Start+0x218>)
 8011486:	4293      	cmp	r3, r2
 8011488:	d101      	bne.n	801148e <HAL_TIM_PWM_Start+0x142>
 801148a:	2301      	movs	r3, #1
 801148c:	e000      	b.n	8011490 <HAL_TIM_PWM_Start+0x144>
 801148e:	2300      	movs	r3, #0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d007      	beq.n	80114a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80114a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4a2a      	ldr	r2, [pc, #168]	@ (8011554 <HAL_TIM_PWM_Start+0x208>)
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d02c      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80114b6:	d027      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a2a      	ldr	r2, [pc, #168]	@ (8011568 <HAL_TIM_PWM_Start+0x21c>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d022      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4a29      	ldr	r2, [pc, #164]	@ (801156c <HAL_TIM_PWM_Start+0x220>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d01d      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a27      	ldr	r2, [pc, #156]	@ (8011570 <HAL_TIM_PWM_Start+0x224>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d018      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4a1f      	ldr	r2, [pc, #124]	@ (8011558 <HAL_TIM_PWM_Start+0x20c>)
 80114dc:	4293      	cmp	r3, r2
 80114de:	d013      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4a23      	ldr	r2, [pc, #140]	@ (8011574 <HAL_TIM_PWM_Start+0x228>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d00e      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4a1b      	ldr	r2, [pc, #108]	@ (801155c <HAL_TIM_PWM_Start+0x210>)
 80114f0:	4293      	cmp	r3, r2
 80114f2:	d009      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a1f      	ldr	r2, [pc, #124]	@ (8011578 <HAL_TIM_PWM_Start+0x22c>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d004      	beq.n	8011508 <HAL_TIM_PWM_Start+0x1bc>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a1e      	ldr	r2, [pc, #120]	@ (801157c <HAL_TIM_PWM_Start+0x230>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d115      	bne.n	8011534 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	689a      	ldr	r2, [r3, #8]
 801150e:	4b1c      	ldr	r3, [pc, #112]	@ (8011580 <HAL_TIM_PWM_Start+0x234>)
 8011510:	4013      	ands	r3, r2
 8011512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2b06      	cmp	r3, #6
 8011518:	d015      	beq.n	8011546 <HAL_TIM_PWM_Start+0x1fa>
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011520:	d011      	beq.n	8011546 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f042 0201 	orr.w	r2, r2, #1
 8011530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011532:	e008      	b.n	8011546 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f042 0201 	orr.w	r2, r2, #1
 8011542:	601a      	str	r2, [r3, #0]
 8011544:	e000      	b.n	8011548 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011548:	2300      	movs	r3, #0
}
 801154a:	4618      	mov	r0, r3
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	40010000 	.word	0x40010000
 8011558:	40010400 	.word	0x40010400
 801155c:	40014000 	.word	0x40014000
 8011560:	40014400 	.word	0x40014400
 8011564:	40014800 	.word	0x40014800
 8011568:	40000400 	.word	0x40000400
 801156c:	40000800 	.word	0x40000800
 8011570:	40000c00 	.word	0x40000c00
 8011574:	40001800 	.word	0x40001800
 8011578:	4000e000 	.word	0x4000e000
 801157c:	4000e400 	.word	0x4000e400
 8011580:	00010007 	.word	0x00010007

08011584 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2200      	movs	r2, #0
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	4618      	mov	r0, r3
 8011598:	f001 fb06 	bl	8012ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a3e      	ldr	r2, [pc, #248]	@ (801169c <HAL_TIM_PWM_Stop+0x118>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d013      	beq.n	80115ce <HAL_TIM_PWM_Stop+0x4a>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a3d      	ldr	r2, [pc, #244]	@ (80116a0 <HAL_TIM_PWM_Stop+0x11c>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d00e      	beq.n	80115ce <HAL_TIM_PWM_Stop+0x4a>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	4a3b      	ldr	r2, [pc, #236]	@ (80116a4 <HAL_TIM_PWM_Stop+0x120>)
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d009      	beq.n	80115ce <HAL_TIM_PWM_Stop+0x4a>
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	4a3a      	ldr	r2, [pc, #232]	@ (80116a8 <HAL_TIM_PWM_Stop+0x124>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d004      	beq.n	80115ce <HAL_TIM_PWM_Stop+0x4a>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a38      	ldr	r2, [pc, #224]	@ (80116ac <HAL_TIM_PWM_Stop+0x128>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d101      	bne.n	80115d2 <HAL_TIM_PWM_Stop+0x4e>
 80115ce:	2301      	movs	r3, #1
 80115d0:	e000      	b.n	80115d4 <HAL_TIM_PWM_Stop+0x50>
 80115d2:	2300      	movs	r3, #0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d017      	beq.n	8011608 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	6a1a      	ldr	r2, [r3, #32]
 80115de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80115e2:	4013      	ands	r3, r2
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10f      	bne.n	8011608 <HAL_TIM_PWM_Stop+0x84>
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	6a1a      	ldr	r2, [r3, #32]
 80115ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80115f2:	4013      	ands	r3, r2
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d107      	bne.n	8011608 <HAL_TIM_PWM_Stop+0x84>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011606:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	6a1a      	ldr	r2, [r3, #32]
 801160e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011612:	4013      	ands	r3, r2
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10f      	bne.n	8011638 <HAL_TIM_PWM_Stop+0xb4>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	6a1a      	ldr	r2, [r3, #32]
 801161e:	f240 4344 	movw	r3, #1092	@ 0x444
 8011622:	4013      	ands	r3, r2
 8011624:	2b00      	cmp	r3, #0
 8011626:	d107      	bne.n	8011638 <HAL_TIM_PWM_Stop+0xb4>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681a      	ldr	r2, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f022 0201 	bic.w	r2, r2, #1
 8011636:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d104      	bne.n	8011648 <HAL_TIM_PWM_Stop+0xc4>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2201      	movs	r2, #1
 8011642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011646:	e023      	b.n	8011690 <HAL_TIM_PWM_Stop+0x10c>
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	2b04      	cmp	r3, #4
 801164c:	d104      	bne.n	8011658 <HAL_TIM_PWM_Stop+0xd4>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2201      	movs	r2, #1
 8011652:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011656:	e01b      	b.n	8011690 <HAL_TIM_PWM_Stop+0x10c>
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2b08      	cmp	r3, #8
 801165c:	d104      	bne.n	8011668 <HAL_TIM_PWM_Stop+0xe4>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2201      	movs	r2, #1
 8011662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011666:	e013      	b.n	8011690 <HAL_TIM_PWM_Stop+0x10c>
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	2b0c      	cmp	r3, #12
 801166c:	d104      	bne.n	8011678 <HAL_TIM_PWM_Stop+0xf4>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2201      	movs	r2, #1
 8011672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011676:	e00b      	b.n	8011690 <HAL_TIM_PWM_Stop+0x10c>
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2b10      	cmp	r3, #16
 801167c:	d104      	bne.n	8011688 <HAL_TIM_PWM_Stop+0x104>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2201      	movs	r2, #1
 8011682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011686:	e003      	b.n	8011690 <HAL_TIM_PWM_Stop+0x10c>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2201      	movs	r2, #1
 801168c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3708      	adds	r7, #8
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	40010000 	.word	0x40010000
 80116a0:	40010400 	.word	0x40010400
 80116a4:	40014000 	.word	0x40014000
 80116a8:	40014400 	.word	0x40014400
 80116ac:	40014800 	.word	0x40014800

080116b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
 80116bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80116be:	2300      	movs	r3, #0
 80116c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d109      	bne.n	80116dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	bf0c      	ite	eq
 80116d4:	2301      	moveq	r3, #1
 80116d6:	2300      	movne	r3, #0
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	e03c      	b.n	8011756 <HAL_TIM_PWM_Start_DMA+0xa6>
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	2b04      	cmp	r3, #4
 80116e0:	d109      	bne.n	80116f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	bf0c      	ite	eq
 80116ee:	2301      	moveq	r3, #1
 80116f0:	2300      	movne	r3, #0
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	e02f      	b.n	8011756 <HAL_TIM_PWM_Start_DMA+0xa6>
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	2b08      	cmp	r3, #8
 80116fa:	d109      	bne.n	8011710 <HAL_TIM_PWM_Start_DMA+0x60>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011702:	b2db      	uxtb	r3, r3
 8011704:	2b02      	cmp	r3, #2
 8011706:	bf0c      	ite	eq
 8011708:	2301      	moveq	r3, #1
 801170a:	2300      	movne	r3, #0
 801170c:	b2db      	uxtb	r3, r3
 801170e:	e022      	b.n	8011756 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	2b0c      	cmp	r3, #12
 8011714:	d109      	bne.n	801172a <HAL_TIM_PWM_Start_DMA+0x7a>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801171c:	b2db      	uxtb	r3, r3
 801171e:	2b02      	cmp	r3, #2
 8011720:	bf0c      	ite	eq
 8011722:	2301      	moveq	r3, #1
 8011724:	2300      	movne	r3, #0
 8011726:	b2db      	uxtb	r3, r3
 8011728:	e015      	b.n	8011756 <HAL_TIM_PWM_Start_DMA+0xa6>
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2b10      	cmp	r3, #16
 801172e:	d109      	bne.n	8011744 <HAL_TIM_PWM_Start_DMA+0x94>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011736:	b2db      	uxtb	r3, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	bf0c      	ite	eq
 801173c:	2301      	moveq	r3, #1
 801173e:	2300      	movne	r3, #0
 8011740:	b2db      	uxtb	r3, r3
 8011742:	e008      	b.n	8011756 <HAL_TIM_PWM_Start_DMA+0xa6>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801174a:	b2db      	uxtb	r3, r3
 801174c:	2b02      	cmp	r3, #2
 801174e:	bf0c      	ite	eq
 8011750:	2301      	moveq	r3, #1
 8011752:	2300      	movne	r3, #0
 8011754:	b2db      	uxtb	r3, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	d001      	beq.n	801175e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801175a:	2302      	movs	r3, #2
 801175c:	e1ba      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d109      	bne.n	8011778 <HAL_TIM_PWM_Start_DMA+0xc8>
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801176a:	b2db      	uxtb	r3, r3
 801176c:	2b01      	cmp	r3, #1
 801176e:	bf0c      	ite	eq
 8011770:	2301      	moveq	r3, #1
 8011772:	2300      	movne	r3, #0
 8011774:	b2db      	uxtb	r3, r3
 8011776:	e03c      	b.n	80117f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	2b04      	cmp	r3, #4
 801177c:	d109      	bne.n	8011792 <HAL_TIM_PWM_Start_DMA+0xe2>
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011784:	b2db      	uxtb	r3, r3
 8011786:	2b01      	cmp	r3, #1
 8011788:	bf0c      	ite	eq
 801178a:	2301      	moveq	r3, #1
 801178c:	2300      	movne	r3, #0
 801178e:	b2db      	uxtb	r3, r3
 8011790:	e02f      	b.n	80117f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	2b08      	cmp	r3, #8
 8011796:	d109      	bne.n	80117ac <HAL_TIM_PWM_Start_DMA+0xfc>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	bf0c      	ite	eq
 80117a4:	2301      	moveq	r3, #1
 80117a6:	2300      	movne	r3, #0
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	e022      	b.n	80117f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	2b0c      	cmp	r3, #12
 80117b0:	d109      	bne.n	80117c6 <HAL_TIM_PWM_Start_DMA+0x116>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80117b8:	b2db      	uxtb	r3, r3
 80117ba:	2b01      	cmp	r3, #1
 80117bc:	bf0c      	ite	eq
 80117be:	2301      	moveq	r3, #1
 80117c0:	2300      	movne	r3, #0
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	e015      	b.n	80117f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2b10      	cmp	r3, #16
 80117ca:	d109      	bne.n	80117e0 <HAL_TIM_PWM_Start_DMA+0x130>
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	2b01      	cmp	r3, #1
 80117d6:	bf0c      	ite	eq
 80117d8:	2301      	moveq	r3, #1
 80117da:	2300      	movne	r3, #0
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	e008      	b.n	80117f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	bf0c      	ite	eq
 80117ec:	2301      	moveq	r3, #1
 80117ee:	2300      	movne	r3, #0
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d034      	beq.n	8011860 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <HAL_TIM_PWM_Start_DMA+0x152>
 80117fc:	887b      	ldrh	r3, [r7, #2]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d101      	bne.n	8011806 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8011802:	2301      	movs	r3, #1
 8011804:	e166      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d104      	bne.n	8011816 <HAL_TIM_PWM_Start_DMA+0x166>
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2202      	movs	r2, #2
 8011810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011814:	e026      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	2b04      	cmp	r3, #4
 801181a:	d104      	bne.n	8011826 <HAL_TIM_PWM_Start_DMA+0x176>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2202      	movs	r2, #2
 8011820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011824:	e01e      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2b08      	cmp	r3, #8
 801182a:	d104      	bne.n	8011836 <HAL_TIM_PWM_Start_DMA+0x186>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2202      	movs	r2, #2
 8011830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011834:	e016      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	2b0c      	cmp	r3, #12
 801183a:	d104      	bne.n	8011846 <HAL_TIM_PWM_Start_DMA+0x196>
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	2202      	movs	r2, #2
 8011840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011844:	e00e      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	2b10      	cmp	r3, #16
 801184a:	d104      	bne.n	8011856 <HAL_TIM_PWM_Start_DMA+0x1a6>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2202      	movs	r2, #2
 8011850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011854:	e006      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2202      	movs	r2, #2
 801185a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801185e:	e001      	b.n	8011864 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8011860:	2301      	movs	r3, #1
 8011862:	e137      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	2b0c      	cmp	r3, #12
 8011868:	f200 80ae 	bhi.w	80119c8 <HAL_TIM_PWM_Start_DMA+0x318>
 801186c:	a201      	add	r2, pc, #4	@ (adr r2, 8011874 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 801186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011872:	bf00      	nop
 8011874:	080118a9 	.word	0x080118a9
 8011878:	080119c9 	.word	0x080119c9
 801187c:	080119c9 	.word	0x080119c9
 8011880:	080119c9 	.word	0x080119c9
 8011884:	080118f1 	.word	0x080118f1
 8011888:	080119c9 	.word	0x080119c9
 801188c:	080119c9 	.word	0x080119c9
 8011890:	080119c9 	.word	0x080119c9
 8011894:	08011939 	.word	0x08011939
 8011898:	080119c9 	.word	0x080119c9
 801189c:	080119c9 	.word	0x080119c9
 80118a0:	080119c9 	.word	0x080119c9
 80118a4:	08011981 	.word	0x08011981
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ac:	4a8b      	ldr	r2, [pc, #556]	@ (8011adc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118b4:	4a8a      	ldr	r2, [pc, #552]	@ (8011ae0 <HAL_TIM_PWM_Start_DMA+0x430>)
 80118b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118bc:	4a89      	ldr	r2, [pc, #548]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x434>)
 80118be:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80118c4:	6879      	ldr	r1, [r7, #4]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	3334      	adds	r3, #52	@ 0x34
 80118cc:	461a      	mov	r2, r3
 80118ce:	887b      	ldrh	r3, [r7, #2]
 80118d0:	f7f7 fd72 	bl	80093b8 <HAL_DMA_Start_IT>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	e0fa      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	68da      	ldr	r2, [r3, #12]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118ec:	60da      	str	r2, [r3, #12]
      break;
 80118ee:	e06e      	b.n	80119ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118f4:	4a79      	ldr	r2, [pc, #484]	@ (8011adc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80118f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118fc:	4a78      	ldr	r2, [pc, #480]	@ (8011ae0 <HAL_TIM_PWM_Start_DMA+0x430>)
 80118fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011904:	4a77      	ldr	r2, [pc, #476]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011906:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	3338      	adds	r3, #56	@ 0x38
 8011914:	461a      	mov	r2, r3
 8011916:	887b      	ldrh	r3, [r7, #2]
 8011918:	f7f7 fd4e 	bl	80093b8 <HAL_DMA_Start_IT>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d001      	beq.n	8011926 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8011922:	2301      	movs	r3, #1
 8011924:	e0d6      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	68da      	ldr	r2, [r3, #12]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011934:	60da      	str	r2, [r3, #12]
      break;
 8011936:	e04a      	b.n	80119ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193c:	4a67      	ldr	r2, [pc, #412]	@ (8011adc <HAL_TIM_PWM_Start_DMA+0x42c>)
 801193e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011944:	4a66      	ldr	r2, [pc, #408]	@ (8011ae0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8011946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194c:	4a65      	ldr	r2, [pc, #404]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x434>)
 801194e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8011954:	6879      	ldr	r1, [r7, #4]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	333c      	adds	r3, #60	@ 0x3c
 801195c:	461a      	mov	r2, r3
 801195e:	887b      	ldrh	r3, [r7, #2]
 8011960:	f7f7 fd2a 	bl	80093b8 <HAL_DMA_Start_IT>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d001      	beq.n	801196e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801196a:	2301      	movs	r3, #1
 801196c:	e0b2      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	68da      	ldr	r2, [r3, #12]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801197c:	60da      	str	r2, [r3, #12]
      break;
 801197e:	e026      	b.n	80119ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011984:	4a55      	ldr	r2, [pc, #340]	@ (8011adc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8011986:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801198c:	4a54      	ldr	r2, [pc, #336]	@ (8011ae0 <HAL_TIM_PWM_Start_DMA+0x430>)
 801198e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011994:	4a53      	ldr	r2, [pc, #332]	@ (8011ae4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8011996:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3340      	adds	r3, #64	@ 0x40
 80119a4:	461a      	mov	r2, r3
 80119a6:	887b      	ldrh	r3, [r7, #2]
 80119a8:	f7f7 fd06 	bl	80093b8 <HAL_DMA_Start_IT>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d001      	beq.n	80119b6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80119b2:	2301      	movs	r3, #1
 80119b4:	e08e      	b.n	8011ad4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	68da      	ldr	r2, [r3, #12]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80119c4:	60da      	str	r2, [r3, #12]
      break;
 80119c6:	e002      	b.n	80119ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80119c8:	2301      	movs	r3, #1
 80119ca:	75fb      	strb	r3, [r7, #23]
      break;
 80119cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80119ce:	7dfb      	ldrb	r3, [r7, #23]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d17e      	bne.n	8011ad2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2201      	movs	r2, #1
 80119da:	68b9      	ldr	r1, [r7, #8]
 80119dc:	4618      	mov	r0, r3
 80119de:	f001 f8e3 	bl	8012ba8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a40      	ldr	r2, [pc, #256]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x438>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d013      	beq.n	8011a14 <HAL_TIM_PWM_Start_DMA+0x364>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	4a3e      	ldr	r2, [pc, #248]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x43c>)
 80119f2:	4293      	cmp	r3, r2
 80119f4:	d00e      	beq.n	8011a14 <HAL_TIM_PWM_Start_DMA+0x364>
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a3d      	ldr	r2, [pc, #244]	@ (8011af0 <HAL_TIM_PWM_Start_DMA+0x440>)
 80119fc:	4293      	cmp	r3, r2
 80119fe:	d009      	beq.n	8011a14 <HAL_TIM_PWM_Start_DMA+0x364>
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4a3b      	ldr	r2, [pc, #236]	@ (8011af4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d004      	beq.n	8011a14 <HAL_TIM_PWM_Start_DMA+0x364>
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4a3a      	ldr	r2, [pc, #232]	@ (8011af8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d101      	bne.n	8011a18 <HAL_TIM_PWM_Start_DMA+0x368>
 8011a14:	2301      	movs	r3, #1
 8011a16:	e000      	b.n	8011a1a <HAL_TIM_PWM_Start_DMA+0x36a>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d007      	beq.n	8011a2e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4a2d      	ldr	r2, [pc, #180]	@ (8011ae8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d02c      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a40:	d027      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a2d      	ldr	r2, [pc, #180]	@ (8011afc <HAL_TIM_PWM_Start_DMA+0x44c>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d022      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a2b      	ldr	r2, [pc, #172]	@ (8011b00 <HAL_TIM_PWM_Start_DMA+0x450>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d01d      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8011b04 <HAL_TIM_PWM_Start_DMA+0x454>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d018      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a21      	ldr	r2, [pc, #132]	@ (8011aec <HAL_TIM_PWM_Start_DMA+0x43c>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d013      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a26      	ldr	r2, [pc, #152]	@ (8011b08 <HAL_TIM_PWM_Start_DMA+0x458>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d00e      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a1d      	ldr	r2, [pc, #116]	@ (8011af0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d009      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a22      	ldr	r2, [pc, #136]	@ (8011b0c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d004      	beq.n	8011a92 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a20      	ldr	r2, [pc, #128]	@ (8011b10 <HAL_TIM_PWM_Start_DMA+0x460>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d115      	bne.n	8011abe <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	689a      	ldr	r2, [r3, #8]
 8011a98:	4b1e      	ldr	r3, [pc, #120]	@ (8011b14 <HAL_TIM_PWM_Start_DMA+0x464>)
 8011a9a:	4013      	ands	r3, r2
 8011a9c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2b06      	cmp	r3, #6
 8011aa2:	d015      	beq.n	8011ad0 <HAL_TIM_PWM_Start_DMA+0x420>
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011aaa:	d011      	beq.n	8011ad0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f042 0201 	orr.w	r2, r2, #1
 8011aba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011abc:	e008      	b.n	8011ad0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f042 0201 	orr.w	r2, r2, #1
 8011acc:	601a      	str	r2, [r3, #0]
 8011ace:	e000      	b.n	8011ad2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011ad0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3718      	adds	r7, #24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	0801224b 	.word	0x0801224b
 8011ae0:	080122f3 	.word	0x080122f3
 8011ae4:	080121b9 	.word	0x080121b9
 8011ae8:	40010000 	.word	0x40010000
 8011aec:	40010400 	.word	0x40010400
 8011af0:	40014000 	.word	0x40014000
 8011af4:	40014400 	.word	0x40014400
 8011af8:	40014800 	.word	0x40014800
 8011afc:	40000400 	.word	0x40000400
 8011b00:	40000800 	.word	0x40000800
 8011b04:	40000c00 	.word	0x40000c00
 8011b08:	40001800 	.word	0x40001800
 8011b0c:	4000e000 	.word	0x4000e000
 8011b10:	4000e400 	.word	0x4000e400
 8011b14:	00010007 	.word	0x00010007

08011b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	691b      	ldr	r3, [r3, #16]
 8011b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	f003 0302 	and.w	r3, r3, #2
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d020      	beq.n	8011b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f003 0302 	and.w	r3, r3, #2
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d01b      	beq.n	8011b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f06f 0202 	mvn.w	r2, #2
 8011b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2201      	movs	r2, #1
 8011b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	f003 0303 	and.w	r3, r3, #3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d003      	beq.n	8011b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 faf6 	bl	8012154 <HAL_TIM_IC_CaptureCallback>
 8011b68:	e005      	b.n	8011b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 fae8 	bl	8012140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 faf9 	bl	8012168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	f003 0304 	and.w	r3, r3, #4
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d020      	beq.n	8011bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f003 0304 	and.w	r3, r3, #4
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d01b      	beq.n	8011bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f06f 0204 	mvn.w	r2, #4
 8011b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2202      	movs	r2, #2
 8011b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d003      	beq.n	8011bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fad0 	bl	8012154 <HAL_TIM_IC_CaptureCallback>
 8011bb4:	e005      	b.n	8011bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f000 fac2 	bl	8012140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 fad3 	bl	8012168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	f003 0308 	and.w	r3, r3, #8
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d020      	beq.n	8011c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f003 0308 	and.w	r3, r3, #8
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d01b      	beq.n	8011c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f06f 0208 	mvn.w	r2, #8
 8011be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2204      	movs	r2, #4
 8011bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	69db      	ldr	r3, [r3, #28]
 8011bf2:	f003 0303 	and.w	r3, r3, #3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d003      	beq.n	8011c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 faaa 	bl	8012154 <HAL_TIM_IC_CaptureCallback>
 8011c00:	e005      	b.n	8011c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f000 fa9c 	bl	8012140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f000 faad 	bl	8012168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f003 0310 	and.w	r3, r3, #16
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d020      	beq.n	8011c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f003 0310 	and.w	r3, r3, #16
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d01b      	beq.n	8011c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	f06f 0210 	mvn.w	r2, #16
 8011c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2208      	movs	r2, #8
 8011c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	69db      	ldr	r3, [r3, #28]
 8011c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d003      	beq.n	8011c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f000 fa84 	bl	8012154 <HAL_TIM_IC_CaptureCallback>
 8011c4c:	e005      	b.n	8011c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f000 fa76 	bl	8012140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f000 fa87 	bl	8012168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	f003 0301 	and.w	r3, r3, #1
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00c      	beq.n	8011c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f003 0301 	and.w	r3, r3, #1
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d007      	beq.n	8011c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	f06f 0201 	mvn.w	r2, #1
 8011c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ef fac4 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d104      	bne.n	8011c98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00c      	beq.n	8011cb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d007      	beq.n	8011cb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8011caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f001 f847 	bl	8012d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00c      	beq.n	8011cd6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d007      	beq.n	8011cd6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8011cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f001 f83f 	bl	8012d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00c      	beq.n	8011cfa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d007      	beq.n	8011cfa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8011cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fa4b 	bl	8012190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	f003 0320 	and.w	r3, r3, #32
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00c      	beq.n	8011d1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f003 0320 	and.w	r3, r3, #32
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d007      	beq.n	8011d1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f06f 0220 	mvn.w	r2, #32
 8011d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f001 f807 	bl	8012d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011d1e:	bf00      	nop
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
	...

08011d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b086      	sub	sp, #24
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d101      	bne.n	8011d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011d42:	2302      	movs	r3, #2
 8011d44:	e0ff      	b.n	8011f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2b14      	cmp	r3, #20
 8011d52:	f200 80f0 	bhi.w	8011f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011d56:	a201      	add	r2, pc, #4	@ (adr r2, 8011d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5c:	08011db1 	.word	0x08011db1
 8011d60:	08011f37 	.word	0x08011f37
 8011d64:	08011f37 	.word	0x08011f37
 8011d68:	08011f37 	.word	0x08011f37
 8011d6c:	08011df1 	.word	0x08011df1
 8011d70:	08011f37 	.word	0x08011f37
 8011d74:	08011f37 	.word	0x08011f37
 8011d78:	08011f37 	.word	0x08011f37
 8011d7c:	08011e33 	.word	0x08011e33
 8011d80:	08011f37 	.word	0x08011f37
 8011d84:	08011f37 	.word	0x08011f37
 8011d88:	08011f37 	.word	0x08011f37
 8011d8c:	08011e73 	.word	0x08011e73
 8011d90:	08011f37 	.word	0x08011f37
 8011d94:	08011f37 	.word	0x08011f37
 8011d98:	08011f37 	.word	0x08011f37
 8011d9c:	08011eb5 	.word	0x08011eb5
 8011da0:	08011f37 	.word	0x08011f37
 8011da4:	08011f37 	.word	0x08011f37
 8011da8:	08011f37 	.word	0x08011f37
 8011dac:	08011ef5 	.word	0x08011ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	68b9      	ldr	r1, [r7, #8]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f000 fb82 	bl	80124c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	699a      	ldr	r2, [r3, #24]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f042 0208 	orr.w	r2, r2, #8
 8011dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	699a      	ldr	r2, [r3, #24]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f022 0204 	bic.w	r2, r2, #4
 8011dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	6999      	ldr	r1, [r3, #24]
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	691a      	ldr	r2, [r3, #16]
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	430a      	orrs	r2, r1
 8011dec:	619a      	str	r2, [r3, #24]
      break;
 8011dee:	e0a5      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68b9      	ldr	r1, [r7, #8]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f000 fbf2 	bl	80125e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	699a      	ldr	r2, [r3, #24]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	699a      	ldr	r2, [r3, #24]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	6999      	ldr	r1, [r3, #24]
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	691b      	ldr	r3, [r3, #16]
 8011e26:	021a      	lsls	r2, r3, #8
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	430a      	orrs	r2, r1
 8011e2e:	619a      	str	r2, [r3, #24]
      break;
 8011e30:	e084      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68b9      	ldr	r1, [r7, #8]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f000 fc5b 	bl	80126f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	69da      	ldr	r2, [r3, #28]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f042 0208 	orr.w	r2, r2, #8
 8011e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	69da      	ldr	r2, [r3, #28]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f022 0204 	bic.w	r2, r2, #4
 8011e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	69d9      	ldr	r1, [r3, #28]
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	430a      	orrs	r2, r1
 8011e6e:	61da      	str	r2, [r3, #28]
      break;
 8011e70:	e064      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68b9      	ldr	r1, [r7, #8]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 fcc3 	bl	8012804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	69da      	ldr	r2, [r3, #28]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	69da      	ldr	r2, [r3, #28]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	69d9      	ldr	r1, [r3, #28]
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	691b      	ldr	r3, [r3, #16]
 8011ea8:	021a      	lsls	r2, r3, #8
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	430a      	orrs	r2, r1
 8011eb0:	61da      	str	r2, [r3, #28]
      break;
 8011eb2:	e043      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	68b9      	ldr	r1, [r7, #8]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f000 fd0c 	bl	80128d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f042 0208 	orr.w	r2, r2, #8
 8011ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f022 0204 	bic.w	r2, r2, #4
 8011ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	691a      	ldr	r2, [r3, #16]
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	430a      	orrs	r2, r1
 8011ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011ef2:	e023      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	68b9      	ldr	r1, [r7, #8]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fd50 	bl	80129a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8011f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	691b      	ldr	r3, [r3, #16]
 8011f2a:	021a      	lsls	r2, r3, #8
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	430a      	orrs	r2, r1
 8011f32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8011f34:	e002      	b.n	8011f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011f36:	2301      	movs	r3, #1
 8011f38:	75fb      	strb	r3, [r7, #23]
      break;
 8011f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3718      	adds	r7, #24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop

08011f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d101      	bne.n	8011f6c <HAL_TIM_ConfigClockSource+0x1c>
 8011f68:	2302      	movs	r3, #2
 8011f6a:	e0dc      	b.n	8012126 <HAL_TIM_ConfigClockSource+0x1d6>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2202      	movs	r2, #2
 8011f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	4b6a      	ldr	r3, [pc, #424]	@ (8012130 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011f88:	4013      	ands	r3, r2
 8011f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8011f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	68ba      	ldr	r2, [r7, #8]
 8011f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4a64      	ldr	r2, [pc, #400]	@ (8012134 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	f000 80a9 	beq.w	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011fa8:	4a62      	ldr	r2, [pc, #392]	@ (8012134 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	f200 80ae 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011fb0:	4a61      	ldr	r2, [pc, #388]	@ (8012138 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	f000 80a1 	beq.w	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011fb8:	4a5f      	ldr	r2, [pc, #380]	@ (8012138 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	f200 80a6 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011fc0:	4a5e      	ldr	r2, [pc, #376]	@ (801213c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	f000 8099 	beq.w	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011fc8:	4a5c      	ldr	r2, [pc, #368]	@ (801213c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	f200 809e 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011fd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011fd4:	f000 8091 	beq.w	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011fd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8011fdc:	f200 8096 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011fe4:	f000 8089 	beq.w	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8011fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011fec:	f200 808e 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011ff4:	d03e      	beq.n	8012074 <HAL_TIM_ConfigClockSource+0x124>
 8011ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011ffa:	f200 8087 	bhi.w	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8011ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012002:	f000 8086 	beq.w	8012112 <HAL_TIM_ConfigClockSource+0x1c2>
 8012006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801200a:	d87f      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 801200c:	2b70      	cmp	r3, #112	@ 0x70
 801200e:	d01a      	beq.n	8012046 <HAL_TIM_ConfigClockSource+0xf6>
 8012010:	2b70      	cmp	r3, #112	@ 0x70
 8012012:	d87b      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8012014:	2b60      	cmp	r3, #96	@ 0x60
 8012016:	d050      	beq.n	80120ba <HAL_TIM_ConfigClockSource+0x16a>
 8012018:	2b60      	cmp	r3, #96	@ 0x60
 801201a:	d877      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 801201c:	2b50      	cmp	r3, #80	@ 0x50
 801201e:	d03c      	beq.n	801209a <HAL_TIM_ConfigClockSource+0x14a>
 8012020:	2b50      	cmp	r3, #80	@ 0x50
 8012022:	d873      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8012024:	2b40      	cmp	r3, #64	@ 0x40
 8012026:	d058      	beq.n	80120da <HAL_TIM_ConfigClockSource+0x18a>
 8012028:	2b40      	cmp	r3, #64	@ 0x40
 801202a:	d86f      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 801202c:	2b30      	cmp	r3, #48	@ 0x30
 801202e:	d064      	beq.n	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8012030:	2b30      	cmp	r3, #48	@ 0x30
 8012032:	d86b      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 8012034:	2b20      	cmp	r3, #32
 8012036:	d060      	beq.n	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8012038:	2b20      	cmp	r3, #32
 801203a:	d867      	bhi.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
 801203c:	2b00      	cmp	r3, #0
 801203e:	d05c      	beq.n	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8012040:	2b10      	cmp	r3, #16
 8012042:	d05a      	beq.n	80120fa <HAL_TIM_ConfigClockSource+0x1aa>
 8012044:	e062      	b.n	801210c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012056:	f000 fd87 	bl	8012b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	689b      	ldr	r3, [r3, #8]
 8012060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	68ba      	ldr	r2, [r7, #8]
 8012070:	609a      	str	r2, [r3, #8]
      break;
 8012072:	e04f      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012084:	f000 fd70 	bl	8012b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	689a      	ldr	r2, [r3, #8]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012096:	609a      	str	r2, [r3, #8]
      break;
 8012098:	e03c      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80120a6:	461a      	mov	r2, r3
 80120a8:	f000 fce0 	bl	8012a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2150      	movs	r1, #80	@ 0x50
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 fd3a 	bl	8012b2c <TIM_ITRx_SetConfig>
      break;
 80120b8:	e02c      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80120c6:	461a      	mov	r2, r3
 80120c8:	f000 fcff 	bl	8012aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	2160      	movs	r1, #96	@ 0x60
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fd2a 	bl	8012b2c <TIM_ITRx_SetConfig>
      break;
 80120d8:	e01c      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80120e6:	461a      	mov	r2, r3
 80120e8:	f000 fcc0 	bl	8012a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2140      	movs	r1, #64	@ 0x40
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 fd1a 	bl	8012b2c <TIM_ITRx_SetConfig>
      break;
 80120f8:	e00c      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4619      	mov	r1, r3
 8012104:	4610      	mov	r0, r2
 8012106:	f000 fd11 	bl	8012b2c <TIM_ITRx_SetConfig>
      break;
 801210a:	e003      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801210c:	2301      	movs	r3, #1
 801210e:	73fb      	strb	r3, [r7, #15]
      break;
 8012110:	e000      	b.n	8012114 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8012112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2200      	movs	r2, #0
 8012120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012124:	7bfb      	ldrb	r3, [r7, #15]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	ffceff88 	.word	0xffceff88
 8012134:	00100040 	.word	0x00100040
 8012138:	00100030 	.word	0x00100030
 801213c:	00100020 	.word	0x00100020

08012140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012140:	b480      	push	{r7}
 8012142:	b083      	sub	sp, #12
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012148:	bf00      	nop
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801215c:	bf00      	nop
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8012184:	bf00      	nop
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012198:	bf00      	nop
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80121ac:	bf00      	nop
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d107      	bne.n	80121e0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2201      	movs	r2, #1
 80121d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2201      	movs	r2, #1
 80121da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121de:	e02a      	b.n	8012236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d107      	bne.n	80121fa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2202      	movs	r2, #2
 80121ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2201      	movs	r2, #1
 80121f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80121f8:	e01d      	b.n	8012236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	429a      	cmp	r2, r3
 8012202:	d107      	bne.n	8012214 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2204      	movs	r2, #4
 8012208:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012212:	e010      	b.n	8012236 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	429a      	cmp	r2, r3
 801221c:	d107      	bne.n	801222e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2208      	movs	r2, #8
 8012222:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2201      	movs	r2, #1
 8012228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801222c:	e003      	b.n	8012236 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2201      	movs	r2, #1
 8012232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff ffb4 	bl	80121a4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2200      	movs	r2, #0
 8012240:	771a      	strb	r2, [r3, #28]
}
 8012242:	bf00      	nop
 8012244:	3710      	adds	r7, #16
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801224a:	b580      	push	{r7, lr}
 801224c:	b084      	sub	sp, #16
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012256:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	429a      	cmp	r2, r3
 8012260:	d10b      	bne.n	801227a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2201      	movs	r2, #1
 8012266:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	69db      	ldr	r3, [r3, #28]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d136      	bne.n	80122de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2201      	movs	r2, #1
 8012274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012278:	e031      	b.n	80122de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	429a      	cmp	r2, r3
 8012282:	d10b      	bne.n	801229c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2202      	movs	r2, #2
 8012288:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	69db      	ldr	r3, [r3, #28]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d125      	bne.n	80122de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2201      	movs	r2, #1
 8012296:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801229a:	e020      	b.n	80122de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d10b      	bne.n	80122be <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2204      	movs	r2, #4
 80122aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d114      	bne.n	80122de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2201      	movs	r2, #1
 80122b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122bc:	e00f      	b.n	80122de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	d10a      	bne.n	80122de <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2208      	movs	r2, #8
 80122cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	69db      	ldr	r3, [r3, #28]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d103      	bne.n	80122de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2201      	movs	r2, #1
 80122da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f7ff ff42 	bl	8012168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2200      	movs	r2, #0
 80122e8:	771a      	strb	r2, [r3, #28]
}
 80122ea:	bf00      	nop
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	429a      	cmp	r2, r3
 8012308:	d103      	bne.n	8012312 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2201      	movs	r2, #1
 801230e:	771a      	strb	r2, [r3, #28]
 8012310:	e019      	b.n	8012346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	429a      	cmp	r2, r3
 801231a:	d103      	bne.n	8012324 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2202      	movs	r2, #2
 8012320:	771a      	strb	r2, [r3, #28]
 8012322:	e010      	b.n	8012346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	429a      	cmp	r2, r3
 801232c:	d103      	bne.n	8012336 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2204      	movs	r2, #4
 8012332:	771a      	strb	r2, [r3, #28]
 8012334:	e007      	b.n	8012346 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801233a:	687a      	ldr	r2, [r7, #4]
 801233c:	429a      	cmp	r2, r3
 801233e:	d102      	bne.n	8012346 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2208      	movs	r2, #8
 8012344:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7ff ff18 	bl	801217c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2200      	movs	r2, #0
 8012350:	771a      	strb	r2, [r3, #28]
}
 8012352:	bf00      	nop
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
	...

0801235c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a4a      	ldr	r2, [pc, #296]	@ (8012498 <TIM_Base_SetConfig+0x13c>)
 8012370:	4293      	cmp	r3, r2
 8012372:	d013      	beq.n	801239c <TIM_Base_SetConfig+0x40>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801237a:	d00f      	beq.n	801239c <TIM_Base_SetConfig+0x40>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	4a47      	ldr	r2, [pc, #284]	@ (801249c <TIM_Base_SetConfig+0x140>)
 8012380:	4293      	cmp	r3, r2
 8012382:	d00b      	beq.n	801239c <TIM_Base_SetConfig+0x40>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	4a46      	ldr	r2, [pc, #280]	@ (80124a0 <TIM_Base_SetConfig+0x144>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d007      	beq.n	801239c <TIM_Base_SetConfig+0x40>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4a45      	ldr	r2, [pc, #276]	@ (80124a4 <TIM_Base_SetConfig+0x148>)
 8012390:	4293      	cmp	r3, r2
 8012392:	d003      	beq.n	801239c <TIM_Base_SetConfig+0x40>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	4a44      	ldr	r2, [pc, #272]	@ (80124a8 <TIM_Base_SetConfig+0x14c>)
 8012398:	4293      	cmp	r3, r2
 801239a:	d108      	bne.n	80123ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80123a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	68fa      	ldr	r2, [r7, #12]
 80123aa:	4313      	orrs	r3, r2
 80123ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a39      	ldr	r2, [pc, #228]	@ (8012498 <TIM_Base_SetConfig+0x13c>)
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d027      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123bc:	d023      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4a36      	ldr	r2, [pc, #216]	@ (801249c <TIM_Base_SetConfig+0x140>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d01f      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4a35      	ldr	r2, [pc, #212]	@ (80124a0 <TIM_Base_SetConfig+0x144>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d01b      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4a34      	ldr	r2, [pc, #208]	@ (80124a4 <TIM_Base_SetConfig+0x148>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d017      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4a33      	ldr	r2, [pc, #204]	@ (80124a8 <TIM_Base_SetConfig+0x14c>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d013      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4a32      	ldr	r2, [pc, #200]	@ (80124ac <TIM_Base_SetConfig+0x150>)
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d00f      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4a31      	ldr	r2, [pc, #196]	@ (80124b0 <TIM_Base_SetConfig+0x154>)
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d00b      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4a30      	ldr	r2, [pc, #192]	@ (80124b4 <TIM_Base_SetConfig+0x158>)
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d007      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4a2f      	ldr	r2, [pc, #188]	@ (80124b8 <TIM_Base_SetConfig+0x15c>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d003      	beq.n	8012406 <TIM_Base_SetConfig+0xaa>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	4a2e      	ldr	r2, [pc, #184]	@ (80124bc <TIM_Base_SetConfig+0x160>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d108      	bne.n	8012418 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801240c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	4313      	orrs	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	695b      	ldr	r3, [r3, #20]
 8012422:	4313      	orrs	r3, r2
 8012424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68fa      	ldr	r2, [r7, #12]
 801242a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	689a      	ldr	r2, [r3, #8]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a16      	ldr	r2, [pc, #88]	@ (8012498 <TIM_Base_SetConfig+0x13c>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d00f      	beq.n	8012464 <TIM_Base_SetConfig+0x108>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	4a18      	ldr	r2, [pc, #96]	@ (80124a8 <TIM_Base_SetConfig+0x14c>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d00b      	beq.n	8012464 <TIM_Base_SetConfig+0x108>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4a17      	ldr	r2, [pc, #92]	@ (80124ac <TIM_Base_SetConfig+0x150>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d007      	beq.n	8012464 <TIM_Base_SetConfig+0x108>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4a16      	ldr	r2, [pc, #88]	@ (80124b0 <TIM_Base_SetConfig+0x154>)
 8012458:	4293      	cmp	r3, r2
 801245a:	d003      	beq.n	8012464 <TIM_Base_SetConfig+0x108>
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	4a15      	ldr	r2, [pc, #84]	@ (80124b4 <TIM_Base_SetConfig+0x158>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d103      	bne.n	801246c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	691a      	ldr	r2, [r3, #16]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2201      	movs	r2, #1
 8012470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	691b      	ldr	r3, [r3, #16]
 8012476:	f003 0301 	and.w	r3, r3, #1
 801247a:	2b01      	cmp	r3, #1
 801247c:	d105      	bne.n	801248a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	f023 0201 	bic.w	r2, r3, #1
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	611a      	str	r2, [r3, #16]
  }
}
 801248a:	bf00      	nop
 801248c:	3714      	adds	r7, #20
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr
 8012496:	bf00      	nop
 8012498:	40010000 	.word	0x40010000
 801249c:	40000400 	.word	0x40000400
 80124a0:	40000800 	.word	0x40000800
 80124a4:	40000c00 	.word	0x40000c00
 80124a8:	40010400 	.word	0x40010400
 80124ac:	40014000 	.word	0x40014000
 80124b0:	40014400 	.word	0x40014400
 80124b4:	40014800 	.word	0x40014800
 80124b8:	4000e000 	.word	0x4000e000
 80124bc:	4000e400 	.word	0x4000e400

080124c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b087      	sub	sp, #28
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6a1b      	ldr	r3, [r3, #32]
 80124ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6a1b      	ldr	r3, [r3, #32]
 80124d4:	f023 0201 	bic.w	r2, r3, #1
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	699b      	ldr	r3, [r3, #24]
 80124e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	4b37      	ldr	r3, [pc, #220]	@ (80125c8 <TIM_OC1_SetConfig+0x108>)
 80124ec:	4013      	ands	r3, r2
 80124ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f023 0303 	bic.w	r3, r3, #3
 80124f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	4313      	orrs	r3, r2
 8012500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f023 0302 	bic.w	r3, r3, #2
 8012508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	689b      	ldr	r3, [r3, #8]
 801250e:	697a      	ldr	r2, [r7, #20]
 8012510:	4313      	orrs	r3, r2
 8012512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	4a2d      	ldr	r2, [pc, #180]	@ (80125cc <TIM_OC1_SetConfig+0x10c>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d00f      	beq.n	801253c <TIM_OC1_SetConfig+0x7c>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a2c      	ldr	r2, [pc, #176]	@ (80125d0 <TIM_OC1_SetConfig+0x110>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d00b      	beq.n	801253c <TIM_OC1_SetConfig+0x7c>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4a2b      	ldr	r2, [pc, #172]	@ (80125d4 <TIM_OC1_SetConfig+0x114>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d007      	beq.n	801253c <TIM_OC1_SetConfig+0x7c>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4a2a      	ldr	r2, [pc, #168]	@ (80125d8 <TIM_OC1_SetConfig+0x118>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d003      	beq.n	801253c <TIM_OC1_SetConfig+0x7c>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	4a29      	ldr	r2, [pc, #164]	@ (80125dc <TIM_OC1_SetConfig+0x11c>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d10c      	bne.n	8012556 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	f023 0308 	bic.w	r3, r3, #8
 8012542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	4313      	orrs	r3, r2
 801254c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	f023 0304 	bic.w	r3, r3, #4
 8012554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4a1c      	ldr	r2, [pc, #112]	@ (80125cc <TIM_OC1_SetConfig+0x10c>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d00f      	beq.n	801257e <TIM_OC1_SetConfig+0xbe>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a1b      	ldr	r2, [pc, #108]	@ (80125d0 <TIM_OC1_SetConfig+0x110>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d00b      	beq.n	801257e <TIM_OC1_SetConfig+0xbe>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4a1a      	ldr	r2, [pc, #104]	@ (80125d4 <TIM_OC1_SetConfig+0x114>)
 801256a:	4293      	cmp	r3, r2
 801256c:	d007      	beq.n	801257e <TIM_OC1_SetConfig+0xbe>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a19      	ldr	r2, [pc, #100]	@ (80125d8 <TIM_OC1_SetConfig+0x118>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d003      	beq.n	801257e <TIM_OC1_SetConfig+0xbe>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a18      	ldr	r2, [pc, #96]	@ (80125dc <TIM_OC1_SetConfig+0x11c>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d111      	bne.n	80125a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801258c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	4313      	orrs	r3, r2
 8012596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	699b      	ldr	r3, [r3, #24]
 801259c:	693a      	ldr	r2, [r7, #16]
 801259e:	4313      	orrs	r3, r2
 80125a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	693a      	ldr	r2, [r7, #16]
 80125a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	697a      	ldr	r2, [r7, #20]
 80125ba:	621a      	str	r2, [r3, #32]
}
 80125bc:	bf00      	nop
 80125be:	371c      	adds	r7, #28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr
 80125c8:	fffeff8f 	.word	0xfffeff8f
 80125cc:	40010000 	.word	0x40010000
 80125d0:	40010400 	.word	0x40010400
 80125d4:	40014000 	.word	0x40014000
 80125d8:	40014400 	.word	0x40014400
 80125dc:	40014800 	.word	0x40014800

080125e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b087      	sub	sp, #28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6a1b      	ldr	r3, [r3, #32]
 80125ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6a1b      	ldr	r3, [r3, #32]
 80125f4:	f023 0210 	bic.w	r2, r3, #16
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	699b      	ldr	r3, [r3, #24]
 8012606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	4b34      	ldr	r3, [pc, #208]	@ (80126dc <TIM_OC2_SetConfig+0xfc>)
 801260c:	4013      	ands	r3, r2
 801260e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	021b      	lsls	r3, r3, #8
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	4313      	orrs	r3, r2
 8012622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	f023 0320 	bic.w	r3, r3, #32
 801262a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	689b      	ldr	r3, [r3, #8]
 8012630:	011b      	lsls	r3, r3, #4
 8012632:	697a      	ldr	r2, [r7, #20]
 8012634:	4313      	orrs	r3, r2
 8012636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	4a29      	ldr	r2, [pc, #164]	@ (80126e0 <TIM_OC2_SetConfig+0x100>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d003      	beq.n	8012648 <TIM_OC2_SetConfig+0x68>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	4a28      	ldr	r2, [pc, #160]	@ (80126e4 <TIM_OC2_SetConfig+0x104>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d10d      	bne.n	8012664 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801264e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	011b      	lsls	r3, r3, #4
 8012656:	697a      	ldr	r2, [r7, #20]
 8012658:	4313      	orrs	r3, r2
 801265a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	4a1e      	ldr	r2, [pc, #120]	@ (80126e0 <TIM_OC2_SetConfig+0x100>)
 8012668:	4293      	cmp	r3, r2
 801266a:	d00f      	beq.n	801268c <TIM_OC2_SetConfig+0xac>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a1d      	ldr	r2, [pc, #116]	@ (80126e4 <TIM_OC2_SetConfig+0x104>)
 8012670:	4293      	cmp	r3, r2
 8012672:	d00b      	beq.n	801268c <TIM_OC2_SetConfig+0xac>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	4a1c      	ldr	r2, [pc, #112]	@ (80126e8 <TIM_OC2_SetConfig+0x108>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d007      	beq.n	801268c <TIM_OC2_SetConfig+0xac>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	4a1b      	ldr	r2, [pc, #108]	@ (80126ec <TIM_OC2_SetConfig+0x10c>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d003      	beq.n	801268c <TIM_OC2_SetConfig+0xac>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	4a1a      	ldr	r2, [pc, #104]	@ (80126f0 <TIM_OC2_SetConfig+0x110>)
 8012688:	4293      	cmp	r3, r2
 801268a:	d113      	bne.n	80126b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012692:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801269a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	695b      	ldr	r3, [r3, #20]
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	693a      	ldr	r2, [r7, #16]
 80126a4:	4313      	orrs	r3, r2
 80126a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	699b      	ldr	r3, [r3, #24]
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	693a      	ldr	r2, [r7, #16]
 80126b0:	4313      	orrs	r3, r2
 80126b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	693a      	ldr	r2, [r7, #16]
 80126b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	685a      	ldr	r2, [r3, #4]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	697a      	ldr	r2, [r7, #20]
 80126cc:	621a      	str	r2, [r3, #32]
}
 80126ce:	bf00      	nop
 80126d0:	371c      	adds	r7, #28
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	feff8fff 	.word	0xfeff8fff
 80126e0:	40010000 	.word	0x40010000
 80126e4:	40010400 	.word	0x40010400
 80126e8:	40014000 	.word	0x40014000
 80126ec:	40014400 	.word	0x40014400
 80126f0:	40014800 	.word	0x40014800

080126f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b087      	sub	sp, #28
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6a1b      	ldr	r3, [r3, #32]
 8012702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a1b      	ldr	r3, [r3, #32]
 8012708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	69db      	ldr	r3, [r3, #28]
 801271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	4b33      	ldr	r3, [pc, #204]	@ (80127ec <TIM_OC3_SetConfig+0xf8>)
 8012720:	4013      	ands	r3, r2
 8012722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f023 0303 	bic.w	r3, r3, #3
 801272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	4313      	orrs	r3, r2
 8012734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	021b      	lsls	r3, r3, #8
 8012744:	697a      	ldr	r2, [r7, #20]
 8012746:	4313      	orrs	r3, r2
 8012748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4a28      	ldr	r2, [pc, #160]	@ (80127f0 <TIM_OC3_SetConfig+0xfc>)
 801274e:	4293      	cmp	r3, r2
 8012750:	d003      	beq.n	801275a <TIM_OC3_SetConfig+0x66>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a27      	ldr	r2, [pc, #156]	@ (80127f4 <TIM_OC3_SetConfig+0x100>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d10d      	bne.n	8012776 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	021b      	lsls	r3, r3, #8
 8012768:	697a      	ldr	r2, [r7, #20]
 801276a:	4313      	orrs	r3, r2
 801276c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8012774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4a1d      	ldr	r2, [pc, #116]	@ (80127f0 <TIM_OC3_SetConfig+0xfc>)
 801277a:	4293      	cmp	r3, r2
 801277c:	d00f      	beq.n	801279e <TIM_OC3_SetConfig+0xaa>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4a1c      	ldr	r2, [pc, #112]	@ (80127f4 <TIM_OC3_SetConfig+0x100>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d00b      	beq.n	801279e <TIM_OC3_SetConfig+0xaa>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4a1b      	ldr	r2, [pc, #108]	@ (80127f8 <TIM_OC3_SetConfig+0x104>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d007      	beq.n	801279e <TIM_OC3_SetConfig+0xaa>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4a1a      	ldr	r2, [pc, #104]	@ (80127fc <TIM_OC3_SetConfig+0x108>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d003      	beq.n	801279e <TIM_OC3_SetConfig+0xaa>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4a19      	ldr	r2, [pc, #100]	@ (8012800 <TIM_OC3_SetConfig+0x10c>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d113      	bne.n	80127c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80127a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80127ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	011b      	lsls	r3, r3, #4
 80127b4:	693a      	ldr	r2, [r7, #16]
 80127b6:	4313      	orrs	r3, r2
 80127b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	699b      	ldr	r3, [r3, #24]
 80127be:	011b      	lsls	r3, r3, #4
 80127c0:	693a      	ldr	r2, [r7, #16]
 80127c2:	4313      	orrs	r3, r2
 80127c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	693a      	ldr	r2, [r7, #16]
 80127ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	68fa      	ldr	r2, [r7, #12]
 80127d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	685a      	ldr	r2, [r3, #4]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	697a      	ldr	r2, [r7, #20]
 80127de:	621a      	str	r2, [r3, #32]
}
 80127e0:	bf00      	nop
 80127e2:	371c      	adds	r7, #28
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr
 80127ec:	fffeff8f 	.word	0xfffeff8f
 80127f0:	40010000 	.word	0x40010000
 80127f4:	40010400 	.word	0x40010400
 80127f8:	40014000 	.word	0x40014000
 80127fc:	40014400 	.word	0x40014400
 8012800:	40014800 	.word	0x40014800

08012804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012804:	b480      	push	{r7}
 8012806:	b087      	sub	sp, #28
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6a1b      	ldr	r3, [r3, #32]
 8012812:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6a1b      	ldr	r3, [r3, #32]
 8012818:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	69db      	ldr	r3, [r3, #28]
 801282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801282c:	68fa      	ldr	r2, [r7, #12]
 801282e:	4b24      	ldr	r3, [pc, #144]	@ (80128c0 <TIM_OC4_SetConfig+0xbc>)
 8012830:	4013      	ands	r3, r2
 8012832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801283a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	021b      	lsls	r3, r3, #8
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	4313      	orrs	r3, r2
 8012846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801284e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	689b      	ldr	r3, [r3, #8]
 8012854:	031b      	lsls	r3, r3, #12
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	4313      	orrs	r3, r2
 801285a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	4a19      	ldr	r2, [pc, #100]	@ (80128c4 <TIM_OC4_SetConfig+0xc0>)
 8012860:	4293      	cmp	r3, r2
 8012862:	d00f      	beq.n	8012884 <TIM_OC4_SetConfig+0x80>
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	4a18      	ldr	r2, [pc, #96]	@ (80128c8 <TIM_OC4_SetConfig+0xc4>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d00b      	beq.n	8012884 <TIM_OC4_SetConfig+0x80>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	4a17      	ldr	r2, [pc, #92]	@ (80128cc <TIM_OC4_SetConfig+0xc8>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d007      	beq.n	8012884 <TIM_OC4_SetConfig+0x80>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	4a16      	ldr	r2, [pc, #88]	@ (80128d0 <TIM_OC4_SetConfig+0xcc>)
 8012878:	4293      	cmp	r3, r2
 801287a:	d003      	beq.n	8012884 <TIM_OC4_SetConfig+0x80>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	4a15      	ldr	r2, [pc, #84]	@ (80128d4 <TIM_OC4_SetConfig+0xd0>)
 8012880:	4293      	cmp	r3, r2
 8012882:	d109      	bne.n	8012898 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801288a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	695b      	ldr	r3, [r3, #20]
 8012890:	019b      	lsls	r3, r3, #6
 8012892:	697a      	ldr	r2, [r7, #20]
 8012894:	4313      	orrs	r3, r2
 8012896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	697a      	ldr	r2, [r7, #20]
 801289c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	68fa      	ldr	r2, [r7, #12]
 80128a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	685a      	ldr	r2, [r3, #4]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	693a      	ldr	r2, [r7, #16]
 80128b0:	621a      	str	r2, [r3, #32]
}
 80128b2:	bf00      	nop
 80128b4:	371c      	adds	r7, #28
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	feff8fff 	.word	0xfeff8fff
 80128c4:	40010000 	.word	0x40010000
 80128c8:	40010400 	.word	0x40010400
 80128cc:	40014000 	.word	0x40014000
 80128d0:	40014400 	.word	0x40014400
 80128d4:	40014800 	.word	0x40014800

080128d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80128d8:	b480      	push	{r7}
 80128da:	b087      	sub	sp, #28
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6a1b      	ldr	r3, [r3, #32]
 80128e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a1b      	ldr	r3, [r3, #32]
 80128ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	4b21      	ldr	r3, [pc, #132]	@ (8012988 <TIM_OC5_SetConfig+0xb0>)
 8012904:	4013      	ands	r3, r2
 8012906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	4313      	orrs	r3, r2
 8012910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8012918:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	041b      	lsls	r3, r3, #16
 8012920:	693a      	ldr	r2, [r7, #16]
 8012922:	4313      	orrs	r3, r2
 8012924:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4a18      	ldr	r2, [pc, #96]	@ (801298c <TIM_OC5_SetConfig+0xb4>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d00f      	beq.n	801294e <TIM_OC5_SetConfig+0x76>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4a17      	ldr	r2, [pc, #92]	@ (8012990 <TIM_OC5_SetConfig+0xb8>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d00b      	beq.n	801294e <TIM_OC5_SetConfig+0x76>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4a16      	ldr	r2, [pc, #88]	@ (8012994 <TIM_OC5_SetConfig+0xbc>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d007      	beq.n	801294e <TIM_OC5_SetConfig+0x76>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4a15      	ldr	r2, [pc, #84]	@ (8012998 <TIM_OC5_SetConfig+0xc0>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d003      	beq.n	801294e <TIM_OC5_SetConfig+0x76>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a14      	ldr	r2, [pc, #80]	@ (801299c <TIM_OC5_SetConfig+0xc4>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d109      	bne.n	8012962 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	695b      	ldr	r3, [r3, #20]
 801295a:	021b      	lsls	r3, r3, #8
 801295c:	697a      	ldr	r2, [r7, #20]
 801295e:	4313      	orrs	r3, r2
 8012960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	697a      	ldr	r2, [r7, #20]
 8012966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	685a      	ldr	r2, [r3, #4]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	693a      	ldr	r2, [r7, #16]
 801297a:	621a      	str	r2, [r3, #32]
}
 801297c:	bf00      	nop
 801297e:	371c      	adds	r7, #28
 8012980:	46bd      	mov	sp, r7
 8012982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012986:	4770      	bx	lr
 8012988:	fffeff8f 	.word	0xfffeff8f
 801298c:	40010000 	.word	0x40010000
 8012990:	40010400 	.word	0x40010400
 8012994:	40014000 	.word	0x40014000
 8012998:	40014400 	.word	0x40014400
 801299c:	40014800 	.word	0x40014800

080129a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b087      	sub	sp, #28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
 80129a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6a1b      	ldr	r3, [r3, #32]
 80129ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6a1b      	ldr	r3, [r3, #32]
 80129b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80129c8:	68fa      	ldr	r2, [r7, #12]
 80129ca:	4b22      	ldr	r3, [pc, #136]	@ (8012a54 <TIM_OC6_SetConfig+0xb4>)
 80129cc:	4013      	ands	r3, r2
 80129ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	021b      	lsls	r3, r3, #8
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	4313      	orrs	r3, r2
 80129da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80129e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	689b      	ldr	r3, [r3, #8]
 80129e8:	051b      	lsls	r3, r3, #20
 80129ea:	693a      	ldr	r2, [r7, #16]
 80129ec:	4313      	orrs	r3, r2
 80129ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	4a19      	ldr	r2, [pc, #100]	@ (8012a58 <TIM_OC6_SetConfig+0xb8>)
 80129f4:	4293      	cmp	r3, r2
 80129f6:	d00f      	beq.n	8012a18 <TIM_OC6_SetConfig+0x78>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	4a18      	ldr	r2, [pc, #96]	@ (8012a5c <TIM_OC6_SetConfig+0xbc>)
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d00b      	beq.n	8012a18 <TIM_OC6_SetConfig+0x78>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4a17      	ldr	r2, [pc, #92]	@ (8012a60 <TIM_OC6_SetConfig+0xc0>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d007      	beq.n	8012a18 <TIM_OC6_SetConfig+0x78>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	4a16      	ldr	r2, [pc, #88]	@ (8012a64 <TIM_OC6_SetConfig+0xc4>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d003      	beq.n	8012a18 <TIM_OC6_SetConfig+0x78>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	4a15      	ldr	r2, [pc, #84]	@ (8012a68 <TIM_OC6_SetConfig+0xc8>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d109      	bne.n	8012a2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	695b      	ldr	r3, [r3, #20]
 8012a24:	029b      	lsls	r3, r3, #10
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	4313      	orrs	r3, r2
 8012a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	685a      	ldr	r2, [r3, #4]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	693a      	ldr	r2, [r7, #16]
 8012a44:	621a      	str	r2, [r3, #32]
}
 8012a46:	bf00      	nop
 8012a48:	371c      	adds	r7, #28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop
 8012a54:	feff8fff 	.word	0xfeff8fff
 8012a58:	40010000 	.word	0x40010000
 8012a5c:	40010400 	.word	0x40010400
 8012a60:	40014000 	.word	0x40014000
 8012a64:	40014400 	.word	0x40014400
 8012a68:	40014800 	.word	0x40014800

08012a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b087      	sub	sp, #28
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	60f8      	str	r0, [r7, #12]
 8012a74:	60b9      	str	r1, [r7, #8]
 8012a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6a1b      	ldr	r3, [r3, #32]
 8012a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6a1b      	ldr	r3, [r3, #32]
 8012a82:	f023 0201 	bic.w	r2, r3, #1
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	699b      	ldr	r3, [r3, #24]
 8012a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	f023 030a 	bic.w	r3, r3, #10
 8012aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012aaa:	697a      	ldr	r2, [r7, #20]
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	4313      	orrs	r3, r2
 8012ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	693a      	ldr	r2, [r7, #16]
 8012ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	621a      	str	r2, [r3, #32]
}
 8012abe:	bf00      	nop
 8012ac0:	371c      	adds	r7, #28
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac8:	4770      	bx	lr

08012aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012aca:	b480      	push	{r7}
 8012acc:	b087      	sub	sp, #28
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	60f8      	str	r0, [r7, #12]
 8012ad2:	60b9      	str	r1, [r7, #8]
 8012ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	6a1b      	ldr	r3, [r3, #32]
 8012ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	6a1b      	ldr	r3, [r3, #32]
 8012ae0:	f023 0210 	bic.w	r2, r3, #16
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	031b      	lsls	r3, r3, #12
 8012afa:	693a      	ldr	r2, [r7, #16]
 8012afc:	4313      	orrs	r3, r2
 8012afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8012b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	697a      	ldr	r2, [r7, #20]
 8012b0e:	4313      	orrs	r3, r2
 8012b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	621a      	str	r2, [r3, #32]
}
 8012b1e:	bf00      	nop
 8012b20:	371c      	adds	r7, #28
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr
	...

08012b2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b085      	sub	sp, #20
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	4b09      	ldr	r3, [pc, #36]	@ (8012b64 <TIM_ITRx_SetConfig+0x38>)
 8012b40:	4013      	ands	r3, r2
 8012b42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	f043 0307 	orr.w	r3, r3, #7
 8012b4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68fa      	ldr	r2, [r7, #12]
 8012b54:	609a      	str	r2, [r3, #8]
}
 8012b56:	bf00      	nop
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	ffcfff8f 	.word	0xffcfff8f

08012b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b087      	sub	sp, #28
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	689b      	ldr	r3, [r3, #8]
 8012b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	021a      	lsls	r2, r3, #8
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	431a      	orrs	r2, r3
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	4313      	orrs	r3, r2
 8012b90:	697a      	ldr	r2, [r7, #20]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	697a      	ldr	r2, [r7, #20]
 8012b9a:	609a      	str	r2, [r3, #8]
}
 8012b9c:	bf00      	nop
 8012b9e:	371c      	adds	r7, #28
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr

08012ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b087      	sub	sp, #28
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	60b9      	str	r1, [r7, #8]
 8012bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	f003 031f 	and.w	r3, r3, #31
 8012bba:	2201      	movs	r2, #1
 8012bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8012bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6a1a      	ldr	r2, [r3, #32]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	43db      	mvns	r3, r3
 8012bca:	401a      	ands	r2, r3
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6a1a      	ldr	r2, [r3, #32]
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	f003 031f 	and.w	r3, r3, #31
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8012be0:	431a      	orrs	r2, r3
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	621a      	str	r2, [r3, #32]
}
 8012be6:	bf00      	nop
 8012be8:	371c      	adds	r7, #28
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr
	...

08012bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b085      	sub	sp, #20
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d101      	bne.n	8012c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012c08:	2302      	movs	r3, #2
 8012c0a:	e077      	b.n	8012cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2201      	movs	r2, #1
 8012c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2202      	movs	r2, #2
 8012c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	689b      	ldr	r3, [r3, #8]
 8012c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a35      	ldr	r2, [pc, #212]	@ (8012d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d004      	beq.n	8012c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a34      	ldr	r2, [pc, #208]	@ (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d108      	bne.n	8012c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8012c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	4313      	orrs	r3, r2
 8012c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68fa      	ldr	r2, [r7, #12]
 8012c60:	4313      	orrs	r3, r2
 8012c62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	68fa      	ldr	r2, [r7, #12]
 8012c6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4a25      	ldr	r2, [pc, #148]	@ (8012d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d02c      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c7e:	d027      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	4a22      	ldr	r2, [pc, #136]	@ (8012d10 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d022      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	4a21      	ldr	r2, [pc, #132]	@ (8012d14 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012c90:	4293      	cmp	r3, r2
 8012c92:	d01d      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a1f      	ldr	r2, [pc, #124]	@ (8012d18 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d018      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8012d0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012ca4:	4293      	cmp	r3, r2
 8012ca6:	d013      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4a1b      	ldr	r2, [pc, #108]	@ (8012d1c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	d00e      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8012d20 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d009      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4a18      	ldr	r2, [pc, #96]	@ (8012d24 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012cc2:	4293      	cmp	r3, r2
 8012cc4:	d004      	beq.n	8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	4a17      	ldr	r2, [pc, #92]	@ (8012d28 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	d10c      	bne.n	8012cea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012cd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	68ba      	ldr	r2, [r7, #8]
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	68ba      	ldr	r2, [r7, #8]
 8012ce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2201      	movs	r2, #1
 8012cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3714      	adds	r7, #20
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr
 8012d08:	40010000 	.word	0x40010000
 8012d0c:	40010400 	.word	0x40010400
 8012d10:	40000400 	.word	0x40000400
 8012d14:	40000800 	.word	0x40000800
 8012d18:	40000c00 	.word	0x40000c00
 8012d1c:	40001800 	.word	0x40001800
 8012d20:	40014000 	.word	0x40014000
 8012d24:	4000e000 	.word	0x4000e000
 8012d28:	4000e400 	.word	0x4000e400

08012d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012d34:	bf00      	nop
 8012d36:	370c      	adds	r7, #12
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	4770      	bx	lr

08012d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012d48:	bf00      	nop
 8012d4a:	370c      	adds	r7, #12
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b083      	sub	sp, #12
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b082      	sub	sp, #8
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d101      	bne.n	8012d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012d76:	2301      	movs	r3, #1
 8012d78:	e042      	b.n	8012e00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d106      	bne.n	8012d92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7ef fe3f 	bl	8002a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2224      	movs	r2, #36	@ 0x24
 8012d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	681a      	ldr	r2, [r3, #0]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f022 0201 	bic.w	r2, r2, #1
 8012da8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d002      	beq.n	8012db8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 fe94 	bl	8013ae0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f000 f825 	bl	8012e08 <UART_SetConfig>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d101      	bne.n	8012dc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e01b      	b.n	8012e00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8012dd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	689a      	ldr	r2, [r3, #8]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8012de6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	681a      	ldr	r2, [r3, #0]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	f042 0201 	orr.w	r2, r2, #1
 8012df6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f000 ff13 	bl	8013c24 <UART_CheckIdleState>
 8012dfe:	4603      	mov	r3, r0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012e0c:	b092      	sub	sp, #72	@ 0x48
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e12:	2300      	movs	r3, #0
 8012e14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	689a      	ldr	r2, [r3, #8]
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	431a      	orrs	r2, r3
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	695b      	ldr	r3, [r3, #20]
 8012e26:	431a      	orrs	r2, r3
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	69db      	ldr	r3, [r3, #28]
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	4bbe      	ldr	r3, [pc, #760]	@ (8013130 <UART_SetConfig+0x328>)
 8012e38:	4013      	ands	r3, r2
 8012e3a:	697a      	ldr	r2, [r7, #20]
 8012e3c:	6812      	ldr	r2, [r2, #0]
 8012e3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e40:	430b      	orrs	r3, r1
 8012e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	68da      	ldr	r2, [r3, #12]
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	430a      	orrs	r2, r1
 8012e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	699b      	ldr	r3, [r3, #24]
 8012e5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4ab3      	ldr	r2, [pc, #716]	@ (8013134 <UART_SetConfig+0x32c>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d004      	beq.n	8012e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	6a1b      	ldr	r3, [r3, #32]
 8012e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e70:	4313      	orrs	r3, r2
 8012e72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	689a      	ldr	r2, [r3, #8]
 8012e7a:	4baf      	ldr	r3, [pc, #700]	@ (8013138 <UART_SetConfig+0x330>)
 8012e7c:	4013      	ands	r3, r2
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	6812      	ldr	r2, [r2, #0]
 8012e82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012e84:	430b      	orrs	r3, r1
 8012e86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8e:	f023 010f 	bic.w	r1, r3, #15
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	430a      	orrs	r2, r1
 8012e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4aa6      	ldr	r2, [pc, #664]	@ (801313c <UART_SetConfig+0x334>)
 8012ea4:	4293      	cmp	r3, r2
 8012ea6:	d177      	bne.n	8012f98 <UART_SetConfig+0x190>
 8012ea8:	4ba5      	ldr	r3, [pc, #660]	@ (8013140 <UART_SetConfig+0x338>)
 8012eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012eac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012eb0:	2b28      	cmp	r3, #40	@ 0x28
 8012eb2:	d86d      	bhi.n	8012f90 <UART_SetConfig+0x188>
 8012eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8012ebc <UART_SetConfig+0xb4>)
 8012eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eba:	bf00      	nop
 8012ebc:	08012f61 	.word	0x08012f61
 8012ec0:	08012f91 	.word	0x08012f91
 8012ec4:	08012f91 	.word	0x08012f91
 8012ec8:	08012f91 	.word	0x08012f91
 8012ecc:	08012f91 	.word	0x08012f91
 8012ed0:	08012f91 	.word	0x08012f91
 8012ed4:	08012f91 	.word	0x08012f91
 8012ed8:	08012f91 	.word	0x08012f91
 8012edc:	08012f69 	.word	0x08012f69
 8012ee0:	08012f91 	.word	0x08012f91
 8012ee4:	08012f91 	.word	0x08012f91
 8012ee8:	08012f91 	.word	0x08012f91
 8012eec:	08012f91 	.word	0x08012f91
 8012ef0:	08012f91 	.word	0x08012f91
 8012ef4:	08012f91 	.word	0x08012f91
 8012ef8:	08012f91 	.word	0x08012f91
 8012efc:	08012f71 	.word	0x08012f71
 8012f00:	08012f91 	.word	0x08012f91
 8012f04:	08012f91 	.word	0x08012f91
 8012f08:	08012f91 	.word	0x08012f91
 8012f0c:	08012f91 	.word	0x08012f91
 8012f10:	08012f91 	.word	0x08012f91
 8012f14:	08012f91 	.word	0x08012f91
 8012f18:	08012f91 	.word	0x08012f91
 8012f1c:	08012f79 	.word	0x08012f79
 8012f20:	08012f91 	.word	0x08012f91
 8012f24:	08012f91 	.word	0x08012f91
 8012f28:	08012f91 	.word	0x08012f91
 8012f2c:	08012f91 	.word	0x08012f91
 8012f30:	08012f91 	.word	0x08012f91
 8012f34:	08012f91 	.word	0x08012f91
 8012f38:	08012f91 	.word	0x08012f91
 8012f3c:	08012f81 	.word	0x08012f81
 8012f40:	08012f91 	.word	0x08012f91
 8012f44:	08012f91 	.word	0x08012f91
 8012f48:	08012f91 	.word	0x08012f91
 8012f4c:	08012f91 	.word	0x08012f91
 8012f50:	08012f91 	.word	0x08012f91
 8012f54:	08012f91 	.word	0x08012f91
 8012f58:	08012f91 	.word	0x08012f91
 8012f5c:	08012f89 	.word	0x08012f89
 8012f60:	2301      	movs	r3, #1
 8012f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f66:	e326      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f68:	2304      	movs	r3, #4
 8012f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6e:	e322      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f70:	2308      	movs	r3, #8
 8012f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f76:	e31e      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f78:	2310      	movs	r3, #16
 8012f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f7e:	e31a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f80:	2320      	movs	r3, #32
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f86:	e316      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f88:	2340      	movs	r3, #64	@ 0x40
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8e:	e312      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f90:	2380      	movs	r3, #128	@ 0x80
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f96:	e30e      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	4a69      	ldr	r2, [pc, #420]	@ (8013144 <UART_SetConfig+0x33c>)
 8012f9e:	4293      	cmp	r3, r2
 8012fa0:	d130      	bne.n	8013004 <UART_SetConfig+0x1fc>
 8012fa2:	4b67      	ldr	r3, [pc, #412]	@ (8013140 <UART_SetConfig+0x338>)
 8012fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fa6:	f003 0307 	and.w	r3, r3, #7
 8012faa:	2b05      	cmp	r3, #5
 8012fac:	d826      	bhi.n	8012ffc <UART_SetConfig+0x1f4>
 8012fae:	a201      	add	r2, pc, #4	@ (adr r2, 8012fb4 <UART_SetConfig+0x1ac>)
 8012fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb4:	08012fcd 	.word	0x08012fcd
 8012fb8:	08012fd5 	.word	0x08012fd5
 8012fbc:	08012fdd 	.word	0x08012fdd
 8012fc0:	08012fe5 	.word	0x08012fe5
 8012fc4:	08012fed 	.word	0x08012fed
 8012fc8:	08012ff5 	.word	0x08012ff5
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fd2:	e2f0      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012fd4:	2304      	movs	r3, #4
 8012fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fda:	e2ec      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012fdc:	2308      	movs	r3, #8
 8012fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fe2:	e2e8      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012fe4:	2310      	movs	r3, #16
 8012fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fea:	e2e4      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012fec:	2320      	movs	r3, #32
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff2:	e2e0      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012ff4:	2340      	movs	r3, #64	@ 0x40
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffa:	e2dc      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8012ffc:	2380      	movs	r3, #128	@ 0x80
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013002:	e2d8      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	4a4f      	ldr	r2, [pc, #316]	@ (8013148 <UART_SetConfig+0x340>)
 801300a:	4293      	cmp	r3, r2
 801300c:	d130      	bne.n	8013070 <UART_SetConfig+0x268>
 801300e:	4b4c      	ldr	r3, [pc, #304]	@ (8013140 <UART_SetConfig+0x338>)
 8013010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013012:	f003 0307 	and.w	r3, r3, #7
 8013016:	2b05      	cmp	r3, #5
 8013018:	d826      	bhi.n	8013068 <UART_SetConfig+0x260>
 801301a:	a201      	add	r2, pc, #4	@ (adr r2, 8013020 <UART_SetConfig+0x218>)
 801301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013020:	08013039 	.word	0x08013039
 8013024:	08013041 	.word	0x08013041
 8013028:	08013049 	.word	0x08013049
 801302c:	08013051 	.word	0x08013051
 8013030:	08013059 	.word	0x08013059
 8013034:	08013061 	.word	0x08013061
 8013038:	2300      	movs	r3, #0
 801303a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801303e:	e2ba      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013040:	2304      	movs	r3, #4
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013046:	e2b6      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013048:	2308      	movs	r3, #8
 801304a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801304e:	e2b2      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013050:	2310      	movs	r3, #16
 8013052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013056:	e2ae      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013058:	2320      	movs	r3, #32
 801305a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801305e:	e2aa      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013060:	2340      	movs	r3, #64	@ 0x40
 8013062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013066:	e2a6      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013068:	2380      	movs	r3, #128	@ 0x80
 801306a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801306e:	e2a2      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4a35      	ldr	r2, [pc, #212]	@ (801314c <UART_SetConfig+0x344>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d130      	bne.n	80130dc <UART_SetConfig+0x2d4>
 801307a:	4b31      	ldr	r3, [pc, #196]	@ (8013140 <UART_SetConfig+0x338>)
 801307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801307e:	f003 0307 	and.w	r3, r3, #7
 8013082:	2b05      	cmp	r3, #5
 8013084:	d826      	bhi.n	80130d4 <UART_SetConfig+0x2cc>
 8013086:	a201      	add	r2, pc, #4	@ (adr r2, 801308c <UART_SetConfig+0x284>)
 8013088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801308c:	080130a5 	.word	0x080130a5
 8013090:	080130ad 	.word	0x080130ad
 8013094:	080130b5 	.word	0x080130b5
 8013098:	080130bd 	.word	0x080130bd
 801309c:	080130c5 	.word	0x080130c5
 80130a0:	080130cd 	.word	0x080130cd
 80130a4:	2300      	movs	r3, #0
 80130a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130aa:	e284      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130ac:	2304      	movs	r3, #4
 80130ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130b2:	e280      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130b4:	2308      	movs	r3, #8
 80130b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ba:	e27c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130bc:	2310      	movs	r3, #16
 80130be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130c2:	e278      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130c4:	2320      	movs	r3, #32
 80130c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ca:	e274      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130cc:	2340      	movs	r3, #64	@ 0x40
 80130ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d2:	e270      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130d4:	2380      	movs	r3, #128	@ 0x80
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130da:	e26c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4a1b      	ldr	r2, [pc, #108]	@ (8013150 <UART_SetConfig+0x348>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d142      	bne.n	801316c <UART_SetConfig+0x364>
 80130e6:	4b16      	ldr	r3, [pc, #88]	@ (8013140 <UART_SetConfig+0x338>)
 80130e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130ea:	f003 0307 	and.w	r3, r3, #7
 80130ee:	2b05      	cmp	r3, #5
 80130f0:	d838      	bhi.n	8013164 <UART_SetConfig+0x35c>
 80130f2:	a201      	add	r2, pc, #4	@ (adr r2, 80130f8 <UART_SetConfig+0x2f0>)
 80130f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130f8:	08013111 	.word	0x08013111
 80130fc:	08013119 	.word	0x08013119
 8013100:	08013121 	.word	0x08013121
 8013104:	08013129 	.word	0x08013129
 8013108:	08013155 	.word	0x08013155
 801310c:	0801315d 	.word	0x0801315d
 8013110:	2300      	movs	r3, #0
 8013112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013116:	e24e      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013118:	2304      	movs	r3, #4
 801311a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801311e:	e24a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013120:	2308      	movs	r3, #8
 8013122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013126:	e246      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013128:	2310      	movs	r3, #16
 801312a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801312e:	e242      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013130:	cfff69f3 	.word	0xcfff69f3
 8013134:	58000c00 	.word	0x58000c00
 8013138:	11fff4ff 	.word	0x11fff4ff
 801313c:	40011000 	.word	0x40011000
 8013140:	58024400 	.word	0x58024400
 8013144:	40004400 	.word	0x40004400
 8013148:	40004800 	.word	0x40004800
 801314c:	40004c00 	.word	0x40004c00
 8013150:	40005000 	.word	0x40005000
 8013154:	2320      	movs	r3, #32
 8013156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801315a:	e22c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801315c:	2340      	movs	r3, #64	@ 0x40
 801315e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013162:	e228      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013164:	2380      	movs	r3, #128	@ 0x80
 8013166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801316a:	e224      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4ab1      	ldr	r2, [pc, #708]	@ (8013438 <UART_SetConfig+0x630>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d176      	bne.n	8013264 <UART_SetConfig+0x45c>
 8013176:	4bb1      	ldr	r3, [pc, #708]	@ (801343c <UART_SetConfig+0x634>)
 8013178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801317a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801317e:	2b28      	cmp	r3, #40	@ 0x28
 8013180:	d86c      	bhi.n	801325c <UART_SetConfig+0x454>
 8013182:	a201      	add	r2, pc, #4	@ (adr r2, 8013188 <UART_SetConfig+0x380>)
 8013184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013188:	0801322d 	.word	0x0801322d
 801318c:	0801325d 	.word	0x0801325d
 8013190:	0801325d 	.word	0x0801325d
 8013194:	0801325d 	.word	0x0801325d
 8013198:	0801325d 	.word	0x0801325d
 801319c:	0801325d 	.word	0x0801325d
 80131a0:	0801325d 	.word	0x0801325d
 80131a4:	0801325d 	.word	0x0801325d
 80131a8:	08013235 	.word	0x08013235
 80131ac:	0801325d 	.word	0x0801325d
 80131b0:	0801325d 	.word	0x0801325d
 80131b4:	0801325d 	.word	0x0801325d
 80131b8:	0801325d 	.word	0x0801325d
 80131bc:	0801325d 	.word	0x0801325d
 80131c0:	0801325d 	.word	0x0801325d
 80131c4:	0801325d 	.word	0x0801325d
 80131c8:	0801323d 	.word	0x0801323d
 80131cc:	0801325d 	.word	0x0801325d
 80131d0:	0801325d 	.word	0x0801325d
 80131d4:	0801325d 	.word	0x0801325d
 80131d8:	0801325d 	.word	0x0801325d
 80131dc:	0801325d 	.word	0x0801325d
 80131e0:	0801325d 	.word	0x0801325d
 80131e4:	0801325d 	.word	0x0801325d
 80131e8:	08013245 	.word	0x08013245
 80131ec:	0801325d 	.word	0x0801325d
 80131f0:	0801325d 	.word	0x0801325d
 80131f4:	0801325d 	.word	0x0801325d
 80131f8:	0801325d 	.word	0x0801325d
 80131fc:	0801325d 	.word	0x0801325d
 8013200:	0801325d 	.word	0x0801325d
 8013204:	0801325d 	.word	0x0801325d
 8013208:	0801324d 	.word	0x0801324d
 801320c:	0801325d 	.word	0x0801325d
 8013210:	0801325d 	.word	0x0801325d
 8013214:	0801325d 	.word	0x0801325d
 8013218:	0801325d 	.word	0x0801325d
 801321c:	0801325d 	.word	0x0801325d
 8013220:	0801325d 	.word	0x0801325d
 8013224:	0801325d 	.word	0x0801325d
 8013228:	08013255 	.word	0x08013255
 801322c:	2301      	movs	r3, #1
 801322e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013232:	e1c0      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013234:	2304      	movs	r3, #4
 8013236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801323a:	e1bc      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801323c:	2308      	movs	r3, #8
 801323e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013242:	e1b8      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013244:	2310      	movs	r3, #16
 8013246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801324a:	e1b4      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801324c:	2320      	movs	r3, #32
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013252:	e1b0      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013254:	2340      	movs	r3, #64	@ 0x40
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801325a:	e1ac      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801325c:	2380      	movs	r3, #128	@ 0x80
 801325e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013262:	e1a8      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4a75      	ldr	r2, [pc, #468]	@ (8013440 <UART_SetConfig+0x638>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d130      	bne.n	80132d0 <UART_SetConfig+0x4c8>
 801326e:	4b73      	ldr	r3, [pc, #460]	@ (801343c <UART_SetConfig+0x634>)
 8013270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013272:	f003 0307 	and.w	r3, r3, #7
 8013276:	2b05      	cmp	r3, #5
 8013278:	d826      	bhi.n	80132c8 <UART_SetConfig+0x4c0>
 801327a:	a201      	add	r2, pc, #4	@ (adr r2, 8013280 <UART_SetConfig+0x478>)
 801327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013280:	08013299 	.word	0x08013299
 8013284:	080132a1 	.word	0x080132a1
 8013288:	080132a9 	.word	0x080132a9
 801328c:	080132b1 	.word	0x080132b1
 8013290:	080132b9 	.word	0x080132b9
 8013294:	080132c1 	.word	0x080132c1
 8013298:	2300      	movs	r3, #0
 801329a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801329e:	e18a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132a0:	2304      	movs	r3, #4
 80132a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132a6:	e186      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132a8:	2308      	movs	r3, #8
 80132aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ae:	e182      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132b0:	2310      	movs	r3, #16
 80132b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132b6:	e17e      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132b8:	2320      	movs	r3, #32
 80132ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132be:	e17a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132c0:	2340      	movs	r3, #64	@ 0x40
 80132c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132c6:	e176      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132c8:	2380      	movs	r3, #128	@ 0x80
 80132ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80132ce:	e172      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	4a5b      	ldr	r2, [pc, #364]	@ (8013444 <UART_SetConfig+0x63c>)
 80132d6:	4293      	cmp	r3, r2
 80132d8:	d130      	bne.n	801333c <UART_SetConfig+0x534>
 80132da:	4b58      	ldr	r3, [pc, #352]	@ (801343c <UART_SetConfig+0x634>)
 80132dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132de:	f003 0307 	and.w	r3, r3, #7
 80132e2:	2b05      	cmp	r3, #5
 80132e4:	d826      	bhi.n	8013334 <UART_SetConfig+0x52c>
 80132e6:	a201      	add	r2, pc, #4	@ (adr r2, 80132ec <UART_SetConfig+0x4e4>)
 80132e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ec:	08013305 	.word	0x08013305
 80132f0:	0801330d 	.word	0x0801330d
 80132f4:	08013315 	.word	0x08013315
 80132f8:	0801331d 	.word	0x0801331d
 80132fc:	08013325 	.word	0x08013325
 8013300:	0801332d 	.word	0x0801332d
 8013304:	2300      	movs	r3, #0
 8013306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801330a:	e154      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801330c:	2304      	movs	r3, #4
 801330e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013312:	e150      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013314:	2308      	movs	r3, #8
 8013316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801331a:	e14c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801331c:	2310      	movs	r3, #16
 801331e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013322:	e148      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013324:	2320      	movs	r3, #32
 8013326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801332a:	e144      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801332c:	2340      	movs	r3, #64	@ 0x40
 801332e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013332:	e140      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013334:	2380      	movs	r3, #128	@ 0x80
 8013336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801333a:	e13c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a41      	ldr	r2, [pc, #260]	@ (8013448 <UART_SetConfig+0x640>)
 8013342:	4293      	cmp	r3, r2
 8013344:	f040 8082 	bne.w	801344c <UART_SetConfig+0x644>
 8013348:	4b3c      	ldr	r3, [pc, #240]	@ (801343c <UART_SetConfig+0x634>)
 801334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801334c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013350:	2b28      	cmp	r3, #40	@ 0x28
 8013352:	d86d      	bhi.n	8013430 <UART_SetConfig+0x628>
 8013354:	a201      	add	r2, pc, #4	@ (adr r2, 801335c <UART_SetConfig+0x554>)
 8013356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335a:	bf00      	nop
 801335c:	08013401 	.word	0x08013401
 8013360:	08013431 	.word	0x08013431
 8013364:	08013431 	.word	0x08013431
 8013368:	08013431 	.word	0x08013431
 801336c:	08013431 	.word	0x08013431
 8013370:	08013431 	.word	0x08013431
 8013374:	08013431 	.word	0x08013431
 8013378:	08013431 	.word	0x08013431
 801337c:	08013409 	.word	0x08013409
 8013380:	08013431 	.word	0x08013431
 8013384:	08013431 	.word	0x08013431
 8013388:	08013431 	.word	0x08013431
 801338c:	08013431 	.word	0x08013431
 8013390:	08013431 	.word	0x08013431
 8013394:	08013431 	.word	0x08013431
 8013398:	08013431 	.word	0x08013431
 801339c:	08013411 	.word	0x08013411
 80133a0:	08013431 	.word	0x08013431
 80133a4:	08013431 	.word	0x08013431
 80133a8:	08013431 	.word	0x08013431
 80133ac:	08013431 	.word	0x08013431
 80133b0:	08013431 	.word	0x08013431
 80133b4:	08013431 	.word	0x08013431
 80133b8:	08013431 	.word	0x08013431
 80133bc:	08013419 	.word	0x08013419
 80133c0:	08013431 	.word	0x08013431
 80133c4:	08013431 	.word	0x08013431
 80133c8:	08013431 	.word	0x08013431
 80133cc:	08013431 	.word	0x08013431
 80133d0:	08013431 	.word	0x08013431
 80133d4:	08013431 	.word	0x08013431
 80133d8:	08013431 	.word	0x08013431
 80133dc:	08013421 	.word	0x08013421
 80133e0:	08013431 	.word	0x08013431
 80133e4:	08013431 	.word	0x08013431
 80133e8:	08013431 	.word	0x08013431
 80133ec:	08013431 	.word	0x08013431
 80133f0:	08013431 	.word	0x08013431
 80133f4:	08013431 	.word	0x08013431
 80133f8:	08013431 	.word	0x08013431
 80133fc:	08013429 	.word	0x08013429
 8013400:	2301      	movs	r3, #1
 8013402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013406:	e0d6      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013408:	2304      	movs	r3, #4
 801340a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801340e:	e0d2      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013410:	2308      	movs	r3, #8
 8013412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013416:	e0ce      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013418:	2310      	movs	r3, #16
 801341a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801341e:	e0ca      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013420:	2320      	movs	r3, #32
 8013422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013426:	e0c6      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013428:	2340      	movs	r3, #64	@ 0x40
 801342a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801342e:	e0c2      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013430:	2380      	movs	r3, #128	@ 0x80
 8013432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013436:	e0be      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013438:	40011400 	.word	0x40011400
 801343c:	58024400 	.word	0x58024400
 8013440:	40007800 	.word	0x40007800
 8013444:	40007c00 	.word	0x40007c00
 8013448:	40011800 	.word	0x40011800
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4aad      	ldr	r2, [pc, #692]	@ (8013708 <UART_SetConfig+0x900>)
 8013452:	4293      	cmp	r3, r2
 8013454:	d176      	bne.n	8013544 <UART_SetConfig+0x73c>
 8013456:	4bad      	ldr	r3, [pc, #692]	@ (801370c <UART_SetConfig+0x904>)
 8013458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801345a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801345e:	2b28      	cmp	r3, #40	@ 0x28
 8013460:	d86c      	bhi.n	801353c <UART_SetConfig+0x734>
 8013462:	a201      	add	r2, pc, #4	@ (adr r2, 8013468 <UART_SetConfig+0x660>)
 8013464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013468:	0801350d 	.word	0x0801350d
 801346c:	0801353d 	.word	0x0801353d
 8013470:	0801353d 	.word	0x0801353d
 8013474:	0801353d 	.word	0x0801353d
 8013478:	0801353d 	.word	0x0801353d
 801347c:	0801353d 	.word	0x0801353d
 8013480:	0801353d 	.word	0x0801353d
 8013484:	0801353d 	.word	0x0801353d
 8013488:	08013515 	.word	0x08013515
 801348c:	0801353d 	.word	0x0801353d
 8013490:	0801353d 	.word	0x0801353d
 8013494:	0801353d 	.word	0x0801353d
 8013498:	0801353d 	.word	0x0801353d
 801349c:	0801353d 	.word	0x0801353d
 80134a0:	0801353d 	.word	0x0801353d
 80134a4:	0801353d 	.word	0x0801353d
 80134a8:	0801351d 	.word	0x0801351d
 80134ac:	0801353d 	.word	0x0801353d
 80134b0:	0801353d 	.word	0x0801353d
 80134b4:	0801353d 	.word	0x0801353d
 80134b8:	0801353d 	.word	0x0801353d
 80134bc:	0801353d 	.word	0x0801353d
 80134c0:	0801353d 	.word	0x0801353d
 80134c4:	0801353d 	.word	0x0801353d
 80134c8:	08013525 	.word	0x08013525
 80134cc:	0801353d 	.word	0x0801353d
 80134d0:	0801353d 	.word	0x0801353d
 80134d4:	0801353d 	.word	0x0801353d
 80134d8:	0801353d 	.word	0x0801353d
 80134dc:	0801353d 	.word	0x0801353d
 80134e0:	0801353d 	.word	0x0801353d
 80134e4:	0801353d 	.word	0x0801353d
 80134e8:	0801352d 	.word	0x0801352d
 80134ec:	0801353d 	.word	0x0801353d
 80134f0:	0801353d 	.word	0x0801353d
 80134f4:	0801353d 	.word	0x0801353d
 80134f8:	0801353d 	.word	0x0801353d
 80134fc:	0801353d 	.word	0x0801353d
 8013500:	0801353d 	.word	0x0801353d
 8013504:	0801353d 	.word	0x0801353d
 8013508:	08013535 	.word	0x08013535
 801350c:	2301      	movs	r3, #1
 801350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013512:	e050      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013514:	2304      	movs	r3, #4
 8013516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801351a:	e04c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801351c:	2308      	movs	r3, #8
 801351e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013522:	e048      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013524:	2310      	movs	r3, #16
 8013526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801352a:	e044      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801352c:	2320      	movs	r3, #32
 801352e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013532:	e040      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013534:	2340      	movs	r3, #64	@ 0x40
 8013536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801353a:	e03c      	b.n	80135b6 <UART_SetConfig+0x7ae>
 801353c:	2380      	movs	r3, #128	@ 0x80
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013542:	e038      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4a71      	ldr	r2, [pc, #452]	@ (8013710 <UART_SetConfig+0x908>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d130      	bne.n	80135b0 <UART_SetConfig+0x7a8>
 801354e:	4b6f      	ldr	r3, [pc, #444]	@ (801370c <UART_SetConfig+0x904>)
 8013550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013552:	f003 0307 	and.w	r3, r3, #7
 8013556:	2b05      	cmp	r3, #5
 8013558:	d826      	bhi.n	80135a8 <UART_SetConfig+0x7a0>
 801355a:	a201      	add	r2, pc, #4	@ (adr r2, 8013560 <UART_SetConfig+0x758>)
 801355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013560:	08013579 	.word	0x08013579
 8013564:	08013581 	.word	0x08013581
 8013568:	08013589 	.word	0x08013589
 801356c:	08013591 	.word	0x08013591
 8013570:	08013599 	.word	0x08013599
 8013574:	080135a1 	.word	0x080135a1
 8013578:	2302      	movs	r3, #2
 801357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801357e:	e01a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013580:	2304      	movs	r3, #4
 8013582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013586:	e016      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013588:	2308      	movs	r3, #8
 801358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801358e:	e012      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013590:	2310      	movs	r3, #16
 8013592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013596:	e00e      	b.n	80135b6 <UART_SetConfig+0x7ae>
 8013598:	2320      	movs	r3, #32
 801359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801359e:	e00a      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80135a0:	2340      	movs	r3, #64	@ 0x40
 80135a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135a6:	e006      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80135a8:	2380      	movs	r3, #128	@ 0x80
 80135aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80135ae:	e002      	b.n	80135b6 <UART_SetConfig+0x7ae>
 80135b0:	2380      	movs	r3, #128	@ 0x80
 80135b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4a55      	ldr	r2, [pc, #340]	@ (8013710 <UART_SetConfig+0x908>)
 80135bc:	4293      	cmp	r3, r2
 80135be:	f040 80f8 	bne.w	80137b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80135c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135c6:	2b20      	cmp	r3, #32
 80135c8:	dc46      	bgt.n	8013658 <UART_SetConfig+0x850>
 80135ca:	2b02      	cmp	r3, #2
 80135cc:	db75      	blt.n	80136ba <UART_SetConfig+0x8b2>
 80135ce:	3b02      	subs	r3, #2
 80135d0:	2b1e      	cmp	r3, #30
 80135d2:	d872      	bhi.n	80136ba <UART_SetConfig+0x8b2>
 80135d4:	a201      	add	r2, pc, #4	@ (adr r2, 80135dc <UART_SetConfig+0x7d4>)
 80135d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135da:	bf00      	nop
 80135dc:	0801365f 	.word	0x0801365f
 80135e0:	080136bb 	.word	0x080136bb
 80135e4:	08013667 	.word	0x08013667
 80135e8:	080136bb 	.word	0x080136bb
 80135ec:	080136bb 	.word	0x080136bb
 80135f0:	080136bb 	.word	0x080136bb
 80135f4:	08013677 	.word	0x08013677
 80135f8:	080136bb 	.word	0x080136bb
 80135fc:	080136bb 	.word	0x080136bb
 8013600:	080136bb 	.word	0x080136bb
 8013604:	080136bb 	.word	0x080136bb
 8013608:	080136bb 	.word	0x080136bb
 801360c:	080136bb 	.word	0x080136bb
 8013610:	080136bb 	.word	0x080136bb
 8013614:	08013687 	.word	0x08013687
 8013618:	080136bb 	.word	0x080136bb
 801361c:	080136bb 	.word	0x080136bb
 8013620:	080136bb 	.word	0x080136bb
 8013624:	080136bb 	.word	0x080136bb
 8013628:	080136bb 	.word	0x080136bb
 801362c:	080136bb 	.word	0x080136bb
 8013630:	080136bb 	.word	0x080136bb
 8013634:	080136bb 	.word	0x080136bb
 8013638:	080136bb 	.word	0x080136bb
 801363c:	080136bb 	.word	0x080136bb
 8013640:	080136bb 	.word	0x080136bb
 8013644:	080136bb 	.word	0x080136bb
 8013648:	080136bb 	.word	0x080136bb
 801364c:	080136bb 	.word	0x080136bb
 8013650:	080136bb 	.word	0x080136bb
 8013654:	080136ad 	.word	0x080136ad
 8013658:	2b40      	cmp	r3, #64	@ 0x40
 801365a:	d02a      	beq.n	80136b2 <UART_SetConfig+0x8aa>
 801365c:	e02d      	b.n	80136ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801365e:	f7fc f80f 	bl	800f680 <HAL_RCCEx_GetD3PCLK1Freq>
 8013662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013664:	e02f      	b.n	80136c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801366a:	4618      	mov	r0, r3
 801366c:	f7fc f81e 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013674:	e027      	b.n	80136c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013676:	f107 0318 	add.w	r3, r7, #24
 801367a:	4618      	mov	r0, r3
 801367c:	f7fc f96a 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013684:	e01f      	b.n	80136c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013686:	4b21      	ldr	r3, [pc, #132]	@ (801370c <UART_SetConfig+0x904>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f003 0320 	and.w	r3, r3, #32
 801368e:	2b00      	cmp	r3, #0
 8013690:	d009      	beq.n	80136a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013692:	4b1e      	ldr	r3, [pc, #120]	@ (801370c <UART_SetConfig+0x904>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	08db      	lsrs	r3, r3, #3
 8013698:	f003 0303 	and.w	r3, r3, #3
 801369c:	4a1d      	ldr	r2, [pc, #116]	@ (8013714 <UART_SetConfig+0x90c>)
 801369e:	fa22 f303 	lsr.w	r3, r2, r3
 80136a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136a4:	e00f      	b.n	80136c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80136a6:	4b1b      	ldr	r3, [pc, #108]	@ (8013714 <UART_SetConfig+0x90c>)
 80136a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136aa:	e00c      	b.n	80136c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136ac:	4b1a      	ldr	r3, [pc, #104]	@ (8013718 <UART_SetConfig+0x910>)
 80136ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136b0:	e009      	b.n	80136c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80136b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136b8:	e005      	b.n	80136c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80136ba:	2300      	movs	r3, #0
 80136bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80136be:	2301      	movs	r3, #1
 80136c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80136c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80136c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 81ee 	beq.w	8013aaa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136d2:	4a12      	ldr	r2, [pc, #72]	@ (801371c <UART_SetConfig+0x914>)
 80136d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136d8:	461a      	mov	r2, r3
 80136da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80136e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	685a      	ldr	r2, [r3, #4]
 80136e6:	4613      	mov	r3, r2
 80136e8:	005b      	lsls	r3, r3, #1
 80136ea:	4413      	add	r3, r2
 80136ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d305      	bcc.n	80136fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80136f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d910      	bls.n	8013720 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80136fe:	2301      	movs	r3, #1
 8013700:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013704:	e1d1      	b.n	8013aaa <UART_SetConfig+0xca2>
 8013706:	bf00      	nop
 8013708:	40011c00 	.word	0x40011c00
 801370c:	58024400 	.word	0x58024400
 8013710:	58000c00 	.word	0x58000c00
 8013714:	03d09000 	.word	0x03d09000
 8013718:	003d0900 	.word	0x003d0900
 801371c:	0801d7c0 	.word	0x0801d7c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013722:	2200      	movs	r2, #0
 8013724:	60bb      	str	r3, [r7, #8]
 8013726:	60fa      	str	r2, [r7, #12]
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801372c:	4ac0      	ldr	r2, [pc, #768]	@ (8013a30 <UART_SetConfig+0xc28>)
 801372e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013732:	b29b      	uxth	r3, r3
 8013734:	2200      	movs	r2, #0
 8013736:	603b      	str	r3, [r7, #0]
 8013738:	607a      	str	r2, [r7, #4]
 801373a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801373e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013742:	f7ed f809 	bl	8000758 <__aeabi_uldivmod>
 8013746:	4602      	mov	r2, r0
 8013748:	460b      	mov	r3, r1
 801374a:	4610      	mov	r0, r2
 801374c:	4619      	mov	r1, r3
 801374e:	f04f 0200 	mov.w	r2, #0
 8013752:	f04f 0300 	mov.w	r3, #0
 8013756:	020b      	lsls	r3, r1, #8
 8013758:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801375c:	0202      	lsls	r2, r0, #8
 801375e:	6979      	ldr	r1, [r7, #20]
 8013760:	6849      	ldr	r1, [r1, #4]
 8013762:	0849      	lsrs	r1, r1, #1
 8013764:	2000      	movs	r0, #0
 8013766:	460c      	mov	r4, r1
 8013768:	4605      	mov	r5, r0
 801376a:	eb12 0804 	adds.w	r8, r2, r4
 801376e:	eb43 0905 	adc.w	r9, r3, r5
 8013772:	697b      	ldr	r3, [r7, #20]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	2200      	movs	r2, #0
 8013778:	469a      	mov	sl, r3
 801377a:	4693      	mov	fp, r2
 801377c:	4652      	mov	r2, sl
 801377e:	465b      	mov	r3, fp
 8013780:	4640      	mov	r0, r8
 8013782:	4649      	mov	r1, r9
 8013784:	f7ec ffe8 	bl	8000758 <__aeabi_uldivmod>
 8013788:	4602      	mov	r2, r0
 801378a:	460b      	mov	r3, r1
 801378c:	4613      	mov	r3, r2
 801378e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013796:	d308      	bcc.n	80137aa <UART_SetConfig+0x9a2>
 8013798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801379e:	d204      	bcs.n	80137aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137a6:	60da      	str	r2, [r3, #12]
 80137a8:	e17f      	b.n	8013aaa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80137aa:	2301      	movs	r3, #1
 80137ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80137b0:	e17b      	b.n	8013aaa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	69db      	ldr	r3, [r3, #28]
 80137b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80137ba:	f040 80bd 	bne.w	8013938 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80137be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80137c2:	2b20      	cmp	r3, #32
 80137c4:	dc48      	bgt.n	8013858 <UART_SetConfig+0xa50>
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	db7b      	blt.n	80138c2 <UART_SetConfig+0xaba>
 80137ca:	2b20      	cmp	r3, #32
 80137cc:	d879      	bhi.n	80138c2 <UART_SetConfig+0xaba>
 80137ce:	a201      	add	r2, pc, #4	@ (adr r2, 80137d4 <UART_SetConfig+0x9cc>)
 80137d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d4:	0801385f 	.word	0x0801385f
 80137d8:	08013867 	.word	0x08013867
 80137dc:	080138c3 	.word	0x080138c3
 80137e0:	080138c3 	.word	0x080138c3
 80137e4:	0801386f 	.word	0x0801386f
 80137e8:	080138c3 	.word	0x080138c3
 80137ec:	080138c3 	.word	0x080138c3
 80137f0:	080138c3 	.word	0x080138c3
 80137f4:	0801387f 	.word	0x0801387f
 80137f8:	080138c3 	.word	0x080138c3
 80137fc:	080138c3 	.word	0x080138c3
 8013800:	080138c3 	.word	0x080138c3
 8013804:	080138c3 	.word	0x080138c3
 8013808:	080138c3 	.word	0x080138c3
 801380c:	080138c3 	.word	0x080138c3
 8013810:	080138c3 	.word	0x080138c3
 8013814:	0801388f 	.word	0x0801388f
 8013818:	080138c3 	.word	0x080138c3
 801381c:	080138c3 	.word	0x080138c3
 8013820:	080138c3 	.word	0x080138c3
 8013824:	080138c3 	.word	0x080138c3
 8013828:	080138c3 	.word	0x080138c3
 801382c:	080138c3 	.word	0x080138c3
 8013830:	080138c3 	.word	0x080138c3
 8013834:	080138c3 	.word	0x080138c3
 8013838:	080138c3 	.word	0x080138c3
 801383c:	080138c3 	.word	0x080138c3
 8013840:	080138c3 	.word	0x080138c3
 8013844:	080138c3 	.word	0x080138c3
 8013848:	080138c3 	.word	0x080138c3
 801384c:	080138c3 	.word	0x080138c3
 8013850:	080138c3 	.word	0x080138c3
 8013854:	080138b5 	.word	0x080138b5
 8013858:	2b40      	cmp	r3, #64	@ 0x40
 801385a:	d02e      	beq.n	80138ba <UART_SetConfig+0xab2>
 801385c:	e031      	b.n	80138c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801385e:	f7fa f871 	bl	800d944 <HAL_RCC_GetPCLK1Freq>
 8013862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013864:	e033      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013866:	f7fa f883 	bl	800d970 <HAL_RCC_GetPCLK2Freq>
 801386a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801386c:	e02f      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801386e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013872:	4618      	mov	r0, r3
 8013874:	f7fb ff1a 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801387c:	e027      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801387e:	f107 0318 	add.w	r3, r7, #24
 8013882:	4618      	mov	r0, r3
 8013884:	f7fc f866 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801388c:	e01f      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801388e:	4b69      	ldr	r3, [pc, #420]	@ (8013a34 <UART_SetConfig+0xc2c>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 0320 	and.w	r3, r3, #32
 8013896:	2b00      	cmp	r3, #0
 8013898:	d009      	beq.n	80138ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801389a:	4b66      	ldr	r3, [pc, #408]	@ (8013a34 <UART_SetConfig+0xc2c>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	08db      	lsrs	r3, r3, #3
 80138a0:	f003 0303 	and.w	r3, r3, #3
 80138a4:	4a64      	ldr	r2, [pc, #400]	@ (8013a38 <UART_SetConfig+0xc30>)
 80138a6:	fa22 f303 	lsr.w	r3, r2, r3
 80138aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80138ac:	e00f      	b.n	80138ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80138ae:	4b62      	ldr	r3, [pc, #392]	@ (8013a38 <UART_SetConfig+0xc30>)
 80138b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138b2:	e00c      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80138b4:	4b61      	ldr	r3, [pc, #388]	@ (8013a3c <UART_SetConfig+0xc34>)
 80138b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138b8:	e009      	b.n	80138ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80138ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80138be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138c0:	e005      	b.n	80138ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80138c2:	2300      	movs	r3, #0
 80138c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80138c6:	2301      	movs	r3, #1
 80138c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80138cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80138ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 80ea 	beq.w	8013aaa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138da:	4a55      	ldr	r2, [pc, #340]	@ (8013a30 <UART_SetConfig+0xc28>)
 80138dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138e0:	461a      	mov	r2, r3
 80138e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80138e8:	005a      	lsls	r2, r3, #1
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	685b      	ldr	r3, [r3, #4]
 80138ee:	085b      	lsrs	r3, r3, #1
 80138f0:	441a      	add	r2, r3
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80138fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	2b0f      	cmp	r3, #15
 8013900:	d916      	bls.n	8013930 <UART_SetConfig+0xb28>
 8013902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013908:	d212      	bcs.n	8013930 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390c:	b29b      	uxth	r3, r3
 801390e:	f023 030f 	bic.w	r3, r3, #15
 8013912:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013916:	085b      	lsrs	r3, r3, #1
 8013918:	b29b      	uxth	r3, r3
 801391a:	f003 0307 	and.w	r3, r3, #7
 801391e:	b29a      	uxth	r2, r3
 8013920:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013922:	4313      	orrs	r3, r2
 8013924:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801392c:	60da      	str	r2, [r3, #12]
 801392e:	e0bc      	b.n	8013aaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013930:	2301      	movs	r3, #1
 8013932:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013936:	e0b8      	b.n	8013aaa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013938:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801393c:	2b20      	cmp	r3, #32
 801393e:	dc4b      	bgt.n	80139d8 <UART_SetConfig+0xbd0>
 8013940:	2b00      	cmp	r3, #0
 8013942:	f2c0 8087 	blt.w	8013a54 <UART_SetConfig+0xc4c>
 8013946:	2b20      	cmp	r3, #32
 8013948:	f200 8084 	bhi.w	8013a54 <UART_SetConfig+0xc4c>
 801394c:	a201      	add	r2, pc, #4	@ (adr r2, 8013954 <UART_SetConfig+0xb4c>)
 801394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013952:	bf00      	nop
 8013954:	080139df 	.word	0x080139df
 8013958:	080139e7 	.word	0x080139e7
 801395c:	08013a55 	.word	0x08013a55
 8013960:	08013a55 	.word	0x08013a55
 8013964:	080139ef 	.word	0x080139ef
 8013968:	08013a55 	.word	0x08013a55
 801396c:	08013a55 	.word	0x08013a55
 8013970:	08013a55 	.word	0x08013a55
 8013974:	080139ff 	.word	0x080139ff
 8013978:	08013a55 	.word	0x08013a55
 801397c:	08013a55 	.word	0x08013a55
 8013980:	08013a55 	.word	0x08013a55
 8013984:	08013a55 	.word	0x08013a55
 8013988:	08013a55 	.word	0x08013a55
 801398c:	08013a55 	.word	0x08013a55
 8013990:	08013a55 	.word	0x08013a55
 8013994:	08013a0f 	.word	0x08013a0f
 8013998:	08013a55 	.word	0x08013a55
 801399c:	08013a55 	.word	0x08013a55
 80139a0:	08013a55 	.word	0x08013a55
 80139a4:	08013a55 	.word	0x08013a55
 80139a8:	08013a55 	.word	0x08013a55
 80139ac:	08013a55 	.word	0x08013a55
 80139b0:	08013a55 	.word	0x08013a55
 80139b4:	08013a55 	.word	0x08013a55
 80139b8:	08013a55 	.word	0x08013a55
 80139bc:	08013a55 	.word	0x08013a55
 80139c0:	08013a55 	.word	0x08013a55
 80139c4:	08013a55 	.word	0x08013a55
 80139c8:	08013a55 	.word	0x08013a55
 80139cc:	08013a55 	.word	0x08013a55
 80139d0:	08013a55 	.word	0x08013a55
 80139d4:	08013a47 	.word	0x08013a47
 80139d8:	2b40      	cmp	r3, #64	@ 0x40
 80139da:	d037      	beq.n	8013a4c <UART_SetConfig+0xc44>
 80139dc:	e03a      	b.n	8013a54 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80139de:	f7f9 ffb1 	bl	800d944 <HAL_RCC_GetPCLK1Freq>
 80139e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80139e4:	e03c      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80139e6:	f7f9 ffc3 	bl	800d970 <HAL_RCC_GetPCLK2Freq>
 80139ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80139ec:	e038      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fb fe5a 	bl	800f6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80139f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139fc:	e030      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139fe:	f107 0318 	add.w	r3, r7, #24
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7fb ffa6 	bl	800f954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a0c:	e028      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013a0e:	4b09      	ldr	r3, [pc, #36]	@ (8013a34 <UART_SetConfig+0xc2c>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f003 0320 	and.w	r3, r3, #32
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d012      	beq.n	8013a40 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013a1a:	4b06      	ldr	r3, [pc, #24]	@ (8013a34 <UART_SetConfig+0xc2c>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	08db      	lsrs	r3, r3, #3
 8013a20:	f003 0303 	and.w	r3, r3, #3
 8013a24:	4a04      	ldr	r2, [pc, #16]	@ (8013a38 <UART_SetConfig+0xc30>)
 8013a26:	fa22 f303 	lsr.w	r3, r2, r3
 8013a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013a2c:	e018      	b.n	8013a60 <UART_SetConfig+0xc58>
 8013a2e:	bf00      	nop
 8013a30:	0801d7c0 	.word	0x0801d7c0
 8013a34:	58024400 	.word	0x58024400
 8013a38:	03d09000 	.word	0x03d09000
 8013a3c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8013a40:	4b24      	ldr	r3, [pc, #144]	@ (8013ad4 <UART_SetConfig+0xccc>)
 8013a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a44:	e00c      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013a46:	4b24      	ldr	r3, [pc, #144]	@ (8013ad8 <UART_SetConfig+0xcd0>)
 8013a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a4a:	e009      	b.n	8013a60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013a4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a52:	e005      	b.n	8013a60 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013a54:	2300      	movs	r3, #0
 8013a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013a5e:	bf00      	nop
    }

    if (pclk != 0U)
 8013a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d021      	beq.n	8013aaa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8013adc <UART_SetConfig+0xcd4>)
 8013a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a70:	461a      	mov	r2, r3
 8013a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a74:	fbb3 f2f2 	udiv	r2, r3, r2
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	085b      	lsrs	r3, r3, #1
 8013a7e:	441a      	add	r2, r3
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8c:	2b0f      	cmp	r3, #15
 8013a8e:	d909      	bls.n	8013aa4 <UART_SetConfig+0xc9c>
 8013a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a96:	d205      	bcs.n	8013aa4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	60da      	str	r2, [r3, #12]
 8013aa2:	e002      	b.n	8013aaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	2201      	movs	r2, #1
 8013aae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	2200      	movs	r2, #0
 8013abe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013ac6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3748      	adds	r7, #72	@ 0x48
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013ad4:	03d09000 	.word	0x03d09000
 8013ad8:	003d0900 	.word	0x003d0900
 8013adc:	0801d7c0 	.word	0x0801d7c0

08013ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013ae0:	b480      	push	{r7}
 8013ae2:	b083      	sub	sp, #12
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aec:	f003 0308 	and.w	r3, r3, #8
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d00a      	beq.n	8013b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	430a      	orrs	r2, r1
 8013b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d00a      	beq.n	8013b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	430a      	orrs	r2, r1
 8013b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b30:	f003 0302 	and.w	r3, r3, #2
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d00a      	beq.n	8013b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	430a      	orrs	r2, r1
 8013b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b52:	f003 0304 	and.w	r3, r3, #4
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00a      	beq.n	8013b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	430a      	orrs	r2, r1
 8013b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b74:	f003 0310 	and.w	r3, r3, #16
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00a      	beq.n	8013b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	689b      	ldr	r3, [r3, #8]
 8013b82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	430a      	orrs	r2, r1
 8013b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b96:	f003 0320 	and.w	r3, r3, #32
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d00a      	beq.n	8013bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	430a      	orrs	r2, r1
 8013bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01a      	beq.n	8013bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	430a      	orrs	r2, r1
 8013bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013bde:	d10a      	bne.n	8013bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	685b      	ldr	r3, [r3, #4]
 8013be6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	430a      	orrs	r2, r1
 8013bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00a      	beq.n	8013c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	430a      	orrs	r2, r1
 8013c16:	605a      	str	r2, [r3, #4]
  }
}
 8013c18:	bf00      	nop
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b098      	sub	sp, #96	@ 0x60
 8013c28:	af02      	add	r7, sp, #8
 8013c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013c34:	f7f3 f884 	bl	8006d40 <HAL_GetTick>
 8013c38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f003 0308 	and.w	r3, r3, #8
 8013c44:	2b08      	cmp	r3, #8
 8013c46:	d12f      	bne.n	8013ca8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013c48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c50:	2200      	movs	r2, #0
 8013c52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 f88e 	bl	8013d78 <UART_WaitOnFlagUntilTimeout>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d022      	beq.n	8013ca8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6a:	e853 3f00 	ldrex	r3, [r3]
 8013c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013c88:	e841 2300 	strex	r3, r2, [r1]
 8013c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d1e6      	bne.n	8013c62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2220      	movs	r2, #32
 8013c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ca4:	2303      	movs	r3, #3
 8013ca6:	e063      	b.n	8013d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f003 0304 	and.w	r3, r3, #4
 8013cb2:	2b04      	cmp	r3, #4
 8013cb4:	d149      	bne.n	8013d4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013cb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f000 f857 	bl	8013d78 <UART_WaitOnFlagUntilTimeout>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d03c      	beq.n	8013d4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cd8:	e853 3f00 	ldrex	r3, [r3]
 8013cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8013cde:	6a3b      	ldr	r3, [r7, #32]
 8013ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	461a      	mov	r2, r3
 8013cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8013cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cf6:	e841 2300 	strex	r3, r2, [r1]
 8013cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1e6      	bne.n	8013cd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	3308      	adds	r3, #8
 8013d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	e853 3f00 	ldrex	r3, [r3]
 8013d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f023 0301 	bic.w	r3, r3, #1
 8013d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	3308      	adds	r3, #8
 8013d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d22:	61fa      	str	r2, [r7, #28]
 8013d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d26:	69b9      	ldr	r1, [r7, #24]
 8013d28:	69fa      	ldr	r2, [r7, #28]
 8013d2a:	e841 2300 	strex	r3, r2, [r1]
 8013d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d1e5      	bne.n	8013d02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2220      	movs	r2, #32
 8013d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d46:	2303      	movs	r3, #3
 8013d48:	e012      	b.n	8013d70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2220      	movs	r2, #32
 8013d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2220      	movs	r2, #32
 8013d56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3758      	adds	r7, #88	@ 0x58
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	60f8      	str	r0, [r7, #12]
 8013d80:	60b9      	str	r1, [r7, #8]
 8013d82:	603b      	str	r3, [r7, #0]
 8013d84:	4613      	mov	r3, r2
 8013d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013d88:	e04f      	b.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d90:	d04b      	beq.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013d92:	f7f2 ffd5 	bl	8006d40 <HAL_GetTick>
 8013d96:	4602      	mov	r2, r0
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	1ad3      	subs	r3, r2, r3
 8013d9c:	69ba      	ldr	r2, [r7, #24]
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d302      	bcc.n	8013da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8013da2:	69bb      	ldr	r3, [r7, #24]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d101      	bne.n	8013dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013da8:	2303      	movs	r3, #3
 8013daa:	e04e      	b.n	8013e4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f003 0304 	and.w	r3, r3, #4
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d037      	beq.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	2b80      	cmp	r3, #128	@ 0x80
 8013dbe:	d034      	beq.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	2b40      	cmp	r3, #64	@ 0x40
 8013dc4:	d031      	beq.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	69db      	ldr	r3, [r3, #28]
 8013dcc:	f003 0308 	and.w	r3, r3, #8
 8013dd0:	2b08      	cmp	r3, #8
 8013dd2:	d110      	bne.n	8013df6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2208      	movs	r2, #8
 8013dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f000 f839 	bl	8013e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2208      	movs	r2, #8
 8013de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2200      	movs	r2, #0
 8013dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e029      	b.n	8013e4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	69db      	ldr	r3, [r3, #28]
 8013dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013e00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013e04:	d111      	bne.n	8013e2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f000 f81f 	bl	8013e54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2220      	movs	r2, #32
 8013e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013e26:	2303      	movs	r3, #3
 8013e28:	e00f      	b.n	8013e4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	69da      	ldr	r2, [r3, #28]
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	4013      	ands	r3, r2
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	bf0c      	ite	eq
 8013e3a:	2301      	moveq	r3, #1
 8013e3c:	2300      	movne	r3, #0
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	461a      	mov	r2, r3
 8013e42:	79fb      	ldrb	r3, [r7, #7]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d0a0      	beq.n	8013d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
	...

08013e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e54:	b480      	push	{r7}
 8013e56:	b095      	sub	sp, #84	@ 0x54
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e64:	e853 3f00 	ldrex	r3, [r3]
 8013e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	461a      	mov	r2, r3
 8013e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8013e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013e82:	e841 2300 	strex	r3, r2, [r1]
 8013e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1e6      	bne.n	8013e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	3308      	adds	r3, #8
 8013e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e96:	6a3b      	ldr	r3, [r7, #32]
 8013e98:	e853 3f00 	ldrex	r3, [r3]
 8013e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e9e:	69fa      	ldr	r2, [r7, #28]
 8013ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8013f1c <UART_EndRxTransfer+0xc8>)
 8013ea2:	4013      	ands	r3, r2
 8013ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	3308      	adds	r3, #8
 8013eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013eb6:	e841 2300 	strex	r3, r2, [r1]
 8013eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1e5      	bne.n	8013e8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d118      	bne.n	8013efc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	e853 3f00 	ldrex	r3, [r3]
 8013ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	f023 0310 	bic.w	r3, r3, #16
 8013ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ee8:	61bb      	str	r3, [r7, #24]
 8013eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eec:	6979      	ldr	r1, [r7, #20]
 8013eee:	69ba      	ldr	r2, [r7, #24]
 8013ef0:	e841 2300 	strex	r3, r2, [r1]
 8013ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1e6      	bne.n	8013eca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2220      	movs	r2, #32
 8013f00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013f10:	bf00      	nop
 8013f12:	3754      	adds	r7, #84	@ 0x54
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	effffffe 	.word	0xeffffffe

08013f20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b085      	sub	sp, #20
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013f2e:	2b01      	cmp	r3, #1
 8013f30:	d101      	bne.n	8013f36 <HAL_UARTEx_DisableFifoMode+0x16>
 8013f32:	2302      	movs	r3, #2
 8013f34:	e027      	b.n	8013f86 <HAL_UARTEx_DisableFifoMode+0x66>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2224      	movs	r2, #36	@ 0x24
 8013f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f022 0201 	bic.w	r2, r2, #1
 8013f5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013f64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	68fa      	ldr	r2, [r7, #12]
 8013f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2220      	movs	r2, #32
 8013f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3714      	adds	r7, #20
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr

08013f92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013f92:	b580      	push	{r7, lr}
 8013f94:	b084      	sub	sp, #16
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	6078      	str	r0, [r7, #4]
 8013f9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d101      	bne.n	8013faa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013fa6:	2302      	movs	r3, #2
 8013fa8:	e02d      	b.n	8014006 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2201      	movs	r2, #1
 8013fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2224      	movs	r2, #36	@ 0x24
 8013fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	681a      	ldr	r2, [r3, #0]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f022 0201 	bic.w	r2, r2, #1
 8013fd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	689b      	ldr	r3, [r3, #8]
 8013fd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	683a      	ldr	r2, [r7, #0]
 8013fe2:	430a      	orrs	r2, r1
 8013fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f000 f850 	bl	801408c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2220      	movs	r2, #32
 8013ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014004:	2300      	movs	r3, #0
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b084      	sub	sp, #16
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
 8014016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801401e:	2b01      	cmp	r3, #1
 8014020:	d101      	bne.n	8014026 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014022:	2302      	movs	r3, #2
 8014024:	e02d      	b.n	8014082 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2201      	movs	r2, #1
 801402a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2224      	movs	r2, #36	@ 0x24
 8014032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	f022 0201 	bic.w	r2, r2, #1
 801404c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	683a      	ldr	r2, [r7, #0]
 801405e:	430a      	orrs	r2, r1
 8014060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 f812 	bl	801408c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2220      	movs	r2, #32
 8014074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2200      	movs	r2, #0
 801407c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
	...

0801408c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801408c:	b480      	push	{r7}
 801408e:	b085      	sub	sp, #20
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014098:	2b00      	cmp	r3, #0
 801409a:	d108      	bne.n	80140ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2201      	movs	r2, #1
 80140a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2201      	movs	r2, #1
 80140a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80140ac:	e031      	b.n	8014112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80140ae:	2310      	movs	r3, #16
 80140b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80140b2:	2310      	movs	r3, #16
 80140b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	689b      	ldr	r3, [r3, #8]
 80140bc:	0e5b      	lsrs	r3, r3, #25
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	f003 0307 	and.w	r3, r3, #7
 80140c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	689b      	ldr	r3, [r3, #8]
 80140cc:	0f5b      	lsrs	r3, r3, #29
 80140ce:	b2db      	uxtb	r3, r3
 80140d0:	f003 0307 	and.w	r3, r3, #7
 80140d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80140d6:	7bbb      	ldrb	r3, [r7, #14]
 80140d8:	7b3a      	ldrb	r2, [r7, #12]
 80140da:	4911      	ldr	r1, [pc, #68]	@ (8014120 <UARTEx_SetNbDataToProcess+0x94>)
 80140dc:	5c8a      	ldrb	r2, [r1, r2]
 80140de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80140e2:	7b3a      	ldrb	r2, [r7, #12]
 80140e4:	490f      	ldr	r1, [pc, #60]	@ (8014124 <UARTEx_SetNbDataToProcess+0x98>)
 80140e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80140e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80140ec:	b29a      	uxth	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80140f4:	7bfb      	ldrb	r3, [r7, #15]
 80140f6:	7b7a      	ldrb	r2, [r7, #13]
 80140f8:	4909      	ldr	r1, [pc, #36]	@ (8014120 <UARTEx_SetNbDataToProcess+0x94>)
 80140fa:	5c8a      	ldrb	r2, [r1, r2]
 80140fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014100:	7b7a      	ldrb	r2, [r7, #13]
 8014102:	4908      	ldr	r1, [pc, #32]	@ (8014124 <UARTEx_SetNbDataToProcess+0x98>)
 8014104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014106:	fb93 f3f2 	sdiv	r3, r3, r2
 801410a:	b29a      	uxth	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014112:	bf00      	nop
 8014114:	3714      	adds	r7, #20
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop
 8014120:	0801d7d8 	.word	0x0801d7d8
 8014124:	0801d7e0 	.word	0x0801d7e0

08014128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014128:	b084      	sub	sp, #16
 801412a:	b580      	push	{r7, lr}
 801412c:	b084      	sub	sp, #16
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
 8014132:	f107 001c 	add.w	r0, r7, #28
 8014136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801413a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801413e:	2b01      	cmp	r3, #1
 8014140:	d121      	bne.n	8014186 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014146:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	68da      	ldr	r2, [r3, #12]
 8014152:	4b2c      	ldr	r3, [pc, #176]	@ (8014204 <USB_CoreInit+0xdc>)
 8014154:	4013      	ands	r3, r2
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	68db      	ldr	r3, [r3, #12]
 801415e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801416a:	2b01      	cmp	r3, #1
 801416c:	d105      	bne.n	801417a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f001 faf6 	bl	801576c <USB_CoreReset>
 8014180:	4603      	mov	r3, r0
 8014182:	73fb      	strb	r3, [r7, #15]
 8014184:	e01b      	b.n	80141be <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f001 faea 	bl	801576c <USB_CoreReset>
 8014198:	4603      	mov	r3, r0
 801419a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801419c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d106      	bne.n	80141b2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80141b0:	e005      	b.n	80141be <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80141be:	7fbb      	ldrb	r3, [r7, #30]
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d116      	bne.n	80141f2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80141c8:	b29a      	uxth	r2, r3
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80141d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014208 <USB_CoreInit+0xe0>)
 80141d4:	4313      	orrs	r3, r2
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	f043 0206 	orr.w	r2, r3, #6
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	689b      	ldr	r3, [r3, #8]
 80141ea:	f043 0220 	orr.w	r2, r3, #32
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80141f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80141fe:	b004      	add	sp, #16
 8014200:	4770      	bx	lr
 8014202:	bf00      	nop
 8014204:	ffbdffbf 	.word	0xffbdffbf
 8014208:	03ee0000 	.word	0x03ee0000

0801420c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801420c:	b480      	push	{r7}
 801420e:	b087      	sub	sp, #28
 8014210:	af00      	add	r7, sp, #0
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	60b9      	str	r1, [r7, #8]
 8014216:	4613      	mov	r3, r2
 8014218:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801421a:	79fb      	ldrb	r3, [r7, #7]
 801421c:	2b02      	cmp	r3, #2
 801421e:	d165      	bne.n	80142ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	4a41      	ldr	r2, [pc, #260]	@ (8014328 <USB_SetTurnaroundTime+0x11c>)
 8014224:	4293      	cmp	r3, r2
 8014226:	d906      	bls.n	8014236 <USB_SetTurnaroundTime+0x2a>
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4a40      	ldr	r2, [pc, #256]	@ (801432c <USB_SetTurnaroundTime+0x120>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d202      	bcs.n	8014236 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014230:	230f      	movs	r3, #15
 8014232:	617b      	str	r3, [r7, #20]
 8014234:	e062      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	4a3c      	ldr	r2, [pc, #240]	@ (801432c <USB_SetTurnaroundTime+0x120>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d306      	bcc.n	801424c <USB_SetTurnaroundTime+0x40>
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	4a3b      	ldr	r2, [pc, #236]	@ (8014330 <USB_SetTurnaroundTime+0x124>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d202      	bcs.n	801424c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014246:	230e      	movs	r3, #14
 8014248:	617b      	str	r3, [r7, #20]
 801424a:	e057      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	4a38      	ldr	r2, [pc, #224]	@ (8014330 <USB_SetTurnaroundTime+0x124>)
 8014250:	4293      	cmp	r3, r2
 8014252:	d306      	bcc.n	8014262 <USB_SetTurnaroundTime+0x56>
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	4a37      	ldr	r2, [pc, #220]	@ (8014334 <USB_SetTurnaroundTime+0x128>)
 8014258:	4293      	cmp	r3, r2
 801425a:	d202      	bcs.n	8014262 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801425c:	230d      	movs	r3, #13
 801425e:	617b      	str	r3, [r7, #20]
 8014260:	e04c      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	4a33      	ldr	r2, [pc, #204]	@ (8014334 <USB_SetTurnaroundTime+0x128>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d306      	bcc.n	8014278 <USB_SetTurnaroundTime+0x6c>
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	4a32      	ldr	r2, [pc, #200]	@ (8014338 <USB_SetTurnaroundTime+0x12c>)
 801426e:	4293      	cmp	r3, r2
 8014270:	d802      	bhi.n	8014278 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014272:	230c      	movs	r3, #12
 8014274:	617b      	str	r3, [r7, #20]
 8014276:	e041      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	4a2f      	ldr	r2, [pc, #188]	@ (8014338 <USB_SetTurnaroundTime+0x12c>)
 801427c:	4293      	cmp	r3, r2
 801427e:	d906      	bls.n	801428e <USB_SetTurnaroundTime+0x82>
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	4a2e      	ldr	r2, [pc, #184]	@ (801433c <USB_SetTurnaroundTime+0x130>)
 8014284:	4293      	cmp	r3, r2
 8014286:	d802      	bhi.n	801428e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014288:	230b      	movs	r3, #11
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	e036      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	4a2a      	ldr	r2, [pc, #168]	@ (801433c <USB_SetTurnaroundTime+0x130>)
 8014292:	4293      	cmp	r3, r2
 8014294:	d906      	bls.n	80142a4 <USB_SetTurnaroundTime+0x98>
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	4a29      	ldr	r2, [pc, #164]	@ (8014340 <USB_SetTurnaroundTime+0x134>)
 801429a:	4293      	cmp	r3, r2
 801429c:	d802      	bhi.n	80142a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801429e:	230a      	movs	r3, #10
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	e02b      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	4a26      	ldr	r2, [pc, #152]	@ (8014340 <USB_SetTurnaroundTime+0x134>)
 80142a8:	4293      	cmp	r3, r2
 80142aa:	d906      	bls.n	80142ba <USB_SetTurnaroundTime+0xae>
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	4a25      	ldr	r2, [pc, #148]	@ (8014344 <USB_SetTurnaroundTime+0x138>)
 80142b0:	4293      	cmp	r3, r2
 80142b2:	d202      	bcs.n	80142ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80142b4:	2309      	movs	r3, #9
 80142b6:	617b      	str	r3, [r7, #20]
 80142b8:	e020      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	4a21      	ldr	r2, [pc, #132]	@ (8014344 <USB_SetTurnaroundTime+0x138>)
 80142be:	4293      	cmp	r3, r2
 80142c0:	d306      	bcc.n	80142d0 <USB_SetTurnaroundTime+0xc4>
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	4a20      	ldr	r2, [pc, #128]	@ (8014348 <USB_SetTurnaroundTime+0x13c>)
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d802      	bhi.n	80142d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80142ca:	2308      	movs	r3, #8
 80142cc:	617b      	str	r3, [r7, #20]
 80142ce:	e015      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	4a1d      	ldr	r2, [pc, #116]	@ (8014348 <USB_SetTurnaroundTime+0x13c>)
 80142d4:	4293      	cmp	r3, r2
 80142d6:	d906      	bls.n	80142e6 <USB_SetTurnaroundTime+0xda>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	4a1c      	ldr	r2, [pc, #112]	@ (801434c <USB_SetTurnaroundTime+0x140>)
 80142dc:	4293      	cmp	r3, r2
 80142de:	d202      	bcs.n	80142e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80142e0:	2307      	movs	r3, #7
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	e00a      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80142e6:	2306      	movs	r3, #6
 80142e8:	617b      	str	r3, [r7, #20]
 80142ea:	e007      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80142ec:	79fb      	ldrb	r3, [r7, #7]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d102      	bne.n	80142f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80142f2:	2309      	movs	r3, #9
 80142f4:	617b      	str	r3, [r7, #20]
 80142f6:	e001      	b.n	80142fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80142f8:	2309      	movs	r3, #9
 80142fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	68da      	ldr	r2, [r3, #12]
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	029b      	lsls	r3, r3, #10
 8014310:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014314:	431a      	orrs	r2, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801431a:	2300      	movs	r3, #0
}
 801431c:	4618      	mov	r0, r3
 801431e:	371c      	adds	r7, #28
 8014320:	46bd      	mov	sp, r7
 8014322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014326:	4770      	bx	lr
 8014328:	00d8acbf 	.word	0x00d8acbf
 801432c:	00e4e1c0 	.word	0x00e4e1c0
 8014330:	00f42400 	.word	0x00f42400
 8014334:	01067380 	.word	0x01067380
 8014338:	011a499f 	.word	0x011a499f
 801433c:	01312cff 	.word	0x01312cff
 8014340:	014ca43f 	.word	0x014ca43f
 8014344:	016e3600 	.word	0x016e3600
 8014348:	01a6ab1f 	.word	0x01a6ab1f
 801434c:	01e84800 	.word	0x01e84800

08014350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	689b      	ldr	r3, [r3, #8]
 801435c:	f043 0201 	orr.w	r2, r3, #1
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014364:	2300      	movs	r3, #0
}
 8014366:	4618      	mov	r0, r3
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014372:	b480      	push	{r7}
 8014374:	b083      	sub	sp, #12
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	689b      	ldr	r3, [r3, #8]
 801437e:	f023 0201 	bic.w	r2, r3, #1
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014386:	2300      	movs	r3, #0
}
 8014388:	4618      	mov	r0, r3
 801438a:	370c      	adds	r7, #12
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b084      	sub	sp, #16
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	460b      	mov	r3, r1
 801439e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80143a0:	2300      	movs	r3, #0
 80143a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80143b0:	78fb      	ldrb	r3, [r7, #3]
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d115      	bne.n	80143e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80143c2:	200a      	movs	r0, #10
 80143c4:	f7f2 fcc8 	bl	8006d58 <HAL_Delay>
      ms += 10U;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	330a      	adds	r3, #10
 80143cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f001 f93b 	bl	801564a <USB_GetMode>
 80143d4:	4603      	mov	r3, r0
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d01e      	beq.n	8014418 <USB_SetCurrentMode+0x84>
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80143de:	d9f0      	bls.n	80143c2 <USB_SetCurrentMode+0x2e>
 80143e0:	e01a      	b.n	8014418 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80143e2:	78fb      	ldrb	r3, [r7, #3]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d115      	bne.n	8014414 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80143f4:	200a      	movs	r0, #10
 80143f6:	f7f2 fcaf 	bl	8006d58 <HAL_Delay>
      ms += 10U;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	330a      	adds	r3, #10
 80143fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	f001 f922 	bl	801564a <USB_GetMode>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d005      	beq.n	8014418 <USB_SetCurrentMode+0x84>
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014410:	d9f0      	bls.n	80143f4 <USB_SetCurrentMode+0x60>
 8014412:	e001      	b.n	8014418 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014414:	2301      	movs	r3, #1
 8014416:	e005      	b.n	8014424 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2bc8      	cmp	r3, #200	@ 0xc8
 801441c:	d101      	bne.n	8014422 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801441e:	2301      	movs	r3, #1
 8014420:	e000      	b.n	8014424 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014422:	2300      	movs	r3, #0
}
 8014424:	4618      	mov	r0, r3
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801442c:	b084      	sub	sp, #16
 801442e:	b580      	push	{r7, lr}
 8014430:	b086      	sub	sp, #24
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
 8014436:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801443a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801443e:	2300      	movs	r3, #0
 8014440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014446:	2300      	movs	r3, #0
 8014448:	613b      	str	r3, [r7, #16]
 801444a:	e009      	b.n	8014460 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	3340      	adds	r3, #64	@ 0x40
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	2200      	movs	r2, #0
 8014458:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	3301      	adds	r3, #1
 801445e:	613b      	str	r3, [r7, #16]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	2b0e      	cmp	r3, #14
 8014464:	d9f2      	bls.n	801444c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014466:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801446a:	2b00      	cmp	r3, #0
 801446c:	d11c      	bne.n	80144a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	68fa      	ldr	r2, [r7, #12]
 8014478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801447c:	f043 0302 	orr.w	r3, r3, #2
 8014480:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014486:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	601a      	str	r2, [r3, #0]
 80144a6:	e005      	b.n	80144b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80144ba:	461a      	mov	r2, r3
 80144bc:	2300      	movs	r3, #0
 80144be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80144c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d10d      	bne.n	80144e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80144c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d104      	bne.n	80144da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80144d0:	2100      	movs	r1, #0
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 f968 	bl	80147a8 <USB_SetDevSpeed>
 80144d8:	e008      	b.n	80144ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80144da:	2101      	movs	r1, #1
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f000 f963 	bl	80147a8 <USB_SetDevSpeed>
 80144e2:	e003      	b.n	80144ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80144e4:	2103      	movs	r1, #3
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f000 f95e 	bl	80147a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80144ec:	2110      	movs	r1, #16
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f000 f8fa 	bl	80146e8 <USB_FlushTxFifo>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d001      	beq.n	80144fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80144fa:	2301      	movs	r3, #1
 80144fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 f924 	bl	801474c <USB_FlushRxFifo>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801450a:	2301      	movs	r3, #1
 801450c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014514:	461a      	mov	r2, r3
 8014516:	2300      	movs	r3, #0
 8014518:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014520:	461a      	mov	r2, r3
 8014522:	2300      	movs	r3, #0
 8014524:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801452c:	461a      	mov	r2, r3
 801452e:	2300      	movs	r3, #0
 8014530:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014532:	2300      	movs	r3, #0
 8014534:	613b      	str	r3, [r7, #16]
 8014536:	e043      	b.n	80145c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	015a      	lsls	r2, r3, #5
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	4413      	add	r3, r2
 8014540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801454a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801454e:	d118      	bne.n	8014582 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014550:	693b      	ldr	r3, [r7, #16]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d10a      	bne.n	801456c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	015a      	lsls	r2, r3, #5
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	4413      	add	r3, r2
 801455e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014562:	461a      	mov	r2, r3
 8014564:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014568:	6013      	str	r3, [r2, #0]
 801456a:	e013      	b.n	8014594 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801456c:	693b      	ldr	r3, [r7, #16]
 801456e:	015a      	lsls	r2, r3, #5
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	4413      	add	r3, r2
 8014574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014578:	461a      	mov	r2, r3
 801457a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801457e:	6013      	str	r3, [r2, #0]
 8014580:	e008      	b.n	8014594 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	015a      	lsls	r2, r3, #5
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	4413      	add	r3, r2
 801458a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801458e:	461a      	mov	r2, r3
 8014590:	2300      	movs	r3, #0
 8014592:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	015a      	lsls	r2, r3, #5
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	4413      	add	r3, r2
 801459c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145a0:	461a      	mov	r2, r3
 80145a2:	2300      	movs	r3, #0
 80145a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80145b2:	461a      	mov	r2, r3
 80145b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80145b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80145ba:	693b      	ldr	r3, [r7, #16]
 80145bc:	3301      	adds	r3, #1
 80145be:	613b      	str	r3, [r7, #16]
 80145c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80145c4:	461a      	mov	r2, r3
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d3b5      	bcc.n	8014538 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80145cc:	2300      	movs	r3, #0
 80145ce:	613b      	str	r3, [r7, #16]
 80145d0:	e043      	b.n	801465a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	015a      	lsls	r2, r3, #5
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	4413      	add	r3, r2
 80145da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80145e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80145e8:	d118      	bne.n	801461c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d10a      	bne.n	8014606 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	015a      	lsls	r2, r3, #5
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	4413      	add	r3, r2
 80145f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80145fc:	461a      	mov	r2, r3
 80145fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014602:	6013      	str	r3, [r2, #0]
 8014604:	e013      	b.n	801462e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	015a      	lsls	r2, r3, #5
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	4413      	add	r3, r2
 801460e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014612:	461a      	mov	r2, r3
 8014614:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014618:	6013      	str	r3, [r2, #0]
 801461a:	e008      	b.n	801462e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	015a      	lsls	r2, r3, #5
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4413      	add	r3, r2
 8014624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014628:	461a      	mov	r2, r3
 801462a:	2300      	movs	r3, #0
 801462c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	015a      	lsls	r2, r3, #5
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	4413      	add	r3, r2
 8014636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801463a:	461a      	mov	r2, r3
 801463c:	2300      	movs	r3, #0
 801463e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	015a      	lsls	r2, r3, #5
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	4413      	add	r3, r2
 8014648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801464c:	461a      	mov	r2, r3
 801464e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	3301      	adds	r3, #1
 8014658:	613b      	str	r3, [r7, #16]
 801465a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801465e:	461a      	mov	r2, r3
 8014660:	693b      	ldr	r3, [r7, #16]
 8014662:	4293      	cmp	r3, r2
 8014664:	d3b5      	bcc.n	80145d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801466c:	691b      	ldr	r3, [r3, #16]
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014678:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2200      	movs	r2, #0
 801467e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014686:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014688:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801468c:	2b00      	cmp	r3, #0
 801468e:	d105      	bne.n	801469c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	699b      	ldr	r3, [r3, #24]
 8014694:	f043 0210 	orr.w	r2, r3, #16
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	699a      	ldr	r2, [r3, #24]
 80146a0:	4b0f      	ldr	r3, [pc, #60]	@ (80146e0 <USB_DevInit+0x2b4>)
 80146a2:	4313      	orrs	r3, r2
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80146a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d005      	beq.n	80146bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	f043 0208 	orr.w	r2, r3, #8
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80146bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d105      	bne.n	80146d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	699a      	ldr	r2, [r3, #24]
 80146c8:	4b06      	ldr	r3, [pc, #24]	@ (80146e4 <USB_DevInit+0x2b8>)
 80146ca:	4313      	orrs	r3, r2
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80146d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3718      	adds	r7, #24
 80146d6:	46bd      	mov	sp, r7
 80146d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80146dc:	b004      	add	sp, #16
 80146de:	4770      	bx	lr
 80146e0:	803c3800 	.word	0x803c3800
 80146e4:	40000004 	.word	0x40000004

080146e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80146f2:	2300      	movs	r3, #0
 80146f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	3301      	adds	r3, #1
 80146fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014702:	d901      	bls.n	8014708 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014704:	2303      	movs	r3, #3
 8014706:	e01b      	b.n	8014740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	691b      	ldr	r3, [r3, #16]
 801470c:	2b00      	cmp	r3, #0
 801470e:	daf2      	bge.n	80146f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014710:	2300      	movs	r3, #0
 8014712:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	019b      	lsls	r3, r3, #6
 8014718:	f043 0220 	orr.w	r2, r3, #32
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	3301      	adds	r3, #1
 8014724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801472c:	d901      	bls.n	8014732 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801472e:	2303      	movs	r3, #3
 8014730:	e006      	b.n	8014740 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	f003 0320 	and.w	r3, r3, #32
 801473a:	2b20      	cmp	r3, #32
 801473c:	d0f0      	beq.n	8014720 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801473e:	2300      	movs	r3, #0
}
 8014740:	4618      	mov	r0, r3
 8014742:	3714      	adds	r7, #20
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr

0801474c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801474c:	b480      	push	{r7}
 801474e:	b085      	sub	sp, #20
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014754:	2300      	movs	r3, #0
 8014756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	3301      	adds	r3, #1
 801475c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014764:	d901      	bls.n	801476a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014766:	2303      	movs	r3, #3
 8014768:	e018      	b.n	801479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	2b00      	cmp	r3, #0
 8014770:	daf2      	bge.n	8014758 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014772:	2300      	movs	r3, #0
 8014774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2210      	movs	r2, #16
 801477a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	3301      	adds	r3, #1
 8014780:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014788:	d901      	bls.n	801478e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801478a:	2303      	movs	r3, #3
 801478c:	e006      	b.n	801479c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	691b      	ldr	r3, [r3, #16]
 8014792:	f003 0310 	and.w	r3, r3, #16
 8014796:	2b10      	cmp	r3, #16
 8014798:	d0f0      	beq.n	801477c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3714      	adds	r7, #20
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr

080147a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80147a8:	b480      	push	{r7}
 80147aa:	b085      	sub	sp, #20
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
 80147b0:	460b      	mov	r3, r1
 80147b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	78fb      	ldrb	r3, [r7, #3]
 80147c2:	68f9      	ldr	r1, [r7, #12]
 80147c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147c8:	4313      	orrs	r3, r2
 80147ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80147cc:	2300      	movs	r3, #0
}
 80147ce:	4618      	mov	r0, r3
 80147d0:	3714      	adds	r7, #20
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr

080147da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80147da:	b480      	push	{r7}
 80147dc:	b087      	sub	sp, #28
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80147ec:	689b      	ldr	r3, [r3, #8]
 80147ee:	f003 0306 	and.w	r3, r3, #6
 80147f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d102      	bne.n	8014800 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80147fa:	2300      	movs	r3, #0
 80147fc:	75fb      	strb	r3, [r7, #23]
 80147fe:	e00a      	b.n	8014816 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b02      	cmp	r3, #2
 8014804:	d002      	beq.n	801480c <USB_GetDevSpeed+0x32>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2b06      	cmp	r3, #6
 801480a:	d102      	bne.n	8014812 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801480c:	2302      	movs	r3, #2
 801480e:	75fb      	strb	r3, [r7, #23]
 8014810:	e001      	b.n	8014816 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014812:	230f      	movs	r3, #15
 8014814:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014816:	7dfb      	ldrb	r3, [r7, #23]
}
 8014818:	4618      	mov	r0, r3
 801481a:	371c      	adds	r7, #28
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014824:	b480      	push	{r7}
 8014826:	b085      	sub	sp, #20
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	785b      	ldrb	r3, [r3, #1]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d139      	bne.n	80148b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014846:	69da      	ldr	r2, [r3, #28]
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	f003 030f 	and.w	r3, r3, #15
 8014850:	2101      	movs	r1, #1
 8014852:	fa01 f303 	lsl.w	r3, r1, r3
 8014856:	b29b      	uxth	r3, r3
 8014858:	68f9      	ldr	r1, [r7, #12]
 801485a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801485e:	4313      	orrs	r3, r2
 8014860:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	015a      	lsls	r2, r3, #5
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	4413      	add	r3, r2
 801486a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014874:	2b00      	cmp	r3, #0
 8014876:	d153      	bne.n	8014920 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	015a      	lsls	r2, r3, #5
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	4413      	add	r3, r2
 8014880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014884:	681a      	ldr	r2, [r3, #0]
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	689b      	ldr	r3, [r3, #8]
 801488a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	791b      	ldrb	r3, [r3, #4]
 8014892:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014894:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	059b      	lsls	r3, r3, #22
 801489a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801489c:	431a      	orrs	r2, r3
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	0159      	lsls	r1, r3, #5
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	440b      	add	r3, r1
 80148a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148aa:	4619      	mov	r1, r3
 80148ac:	4b20      	ldr	r3, [pc, #128]	@ (8014930 <USB_ActivateEndpoint+0x10c>)
 80148ae:	4313      	orrs	r3, r2
 80148b0:	600b      	str	r3, [r1, #0]
 80148b2:	e035      	b.n	8014920 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148ba:	69da      	ldr	r2, [r3, #28]
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	f003 030f 	and.w	r3, r3, #15
 80148c4:	2101      	movs	r1, #1
 80148c6:	fa01 f303 	lsl.w	r3, r1, r3
 80148ca:	041b      	lsls	r3, r3, #16
 80148cc:	68f9      	ldr	r1, [r7, #12]
 80148ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148d2:	4313      	orrs	r3, r2
 80148d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	015a      	lsls	r2, r3, #5
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	4413      	add	r3, r2
 80148de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d119      	bne.n	8014920 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	015a      	lsls	r2, r3, #5
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	4413      	add	r3, r2
 80148f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80148f8:	681a      	ldr	r2, [r3, #0]
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	689b      	ldr	r3, [r3, #8]
 80148fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	791b      	ldrb	r3, [r3, #4]
 8014906:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014908:	430b      	orrs	r3, r1
 801490a:	431a      	orrs	r2, r3
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	0159      	lsls	r1, r3, #5
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	440b      	add	r3, r1
 8014914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014918:	4619      	mov	r1, r3
 801491a:	4b05      	ldr	r3, [pc, #20]	@ (8014930 <USB_ActivateEndpoint+0x10c>)
 801491c:	4313      	orrs	r3, r2
 801491e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014920:	2300      	movs	r3, #0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3714      	adds	r7, #20
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	10008000 	.word	0x10008000

08014934 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014934:	b480      	push	{r7}
 8014936:	b085      	sub	sp, #20
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	781b      	ldrb	r3, [r3, #0]
 8014946:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	785b      	ldrb	r3, [r3, #1]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d161      	bne.n	8014a14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	015a      	lsls	r2, r3, #5
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	4413      	add	r3, r2
 8014958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014962:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014966:	d11f      	bne.n	80149a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	015a      	lsls	r2, r3, #5
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	4413      	add	r3, r2
 8014970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	68ba      	ldr	r2, [r7, #8]
 8014978:	0151      	lsls	r1, r2, #5
 801497a:	68fa      	ldr	r2, [r7, #12]
 801497c:	440a      	add	r2, r1
 801497e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014982:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014986:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	015a      	lsls	r2, r3, #5
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	4413      	add	r3, r2
 8014990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	0151      	lsls	r1, r2, #5
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	440a      	add	r2, r1
 801499e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80149a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	f003 030f 	and.w	r3, r3, #15
 80149b8:	2101      	movs	r1, #1
 80149ba:	fa01 f303 	lsl.w	r3, r1, r3
 80149be:	b29b      	uxth	r3, r3
 80149c0:	43db      	mvns	r3, r3
 80149c2:	68f9      	ldr	r1, [r7, #12]
 80149c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149c8:	4013      	ands	r3, r2
 80149ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149d2:	69da      	ldr	r2, [r3, #28]
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	f003 030f 	and.w	r3, r3, #15
 80149dc:	2101      	movs	r1, #1
 80149de:	fa01 f303 	lsl.w	r3, r1, r3
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	43db      	mvns	r3, r3
 80149e6:	68f9      	ldr	r1, [r7, #12]
 80149e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149ec:	4013      	ands	r3, r2
 80149ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	015a      	lsls	r2, r3, #5
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	4413      	add	r3, r2
 80149f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149fc:	681a      	ldr	r2, [r3, #0]
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	0159      	lsls	r1, r3, #5
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	440b      	add	r3, r1
 8014a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	4b35      	ldr	r3, [pc, #212]	@ (8014ae4 <USB_DeactivateEndpoint+0x1b0>)
 8014a0e:	4013      	ands	r3, r2
 8014a10:	600b      	str	r3, [r1, #0]
 8014a12:	e060      	b.n	8014ad6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	015a      	lsls	r2, r3, #5
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	4413      	add	r3, r2
 8014a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014a2a:	d11f      	bne.n	8014a6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	015a      	lsls	r2, r3, #5
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	4413      	add	r3, r2
 8014a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	68ba      	ldr	r2, [r7, #8]
 8014a3c:	0151      	lsls	r1, r2, #5
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	440a      	add	r2, r1
 8014a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014a46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014a4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	015a      	lsls	r2, r3, #5
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	4413      	add	r3, r2
 8014a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	68ba      	ldr	r2, [r7, #8]
 8014a5c:	0151      	lsls	r1, r2, #5
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	440a      	add	r2, r1
 8014a62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014a66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	f003 030f 	and.w	r3, r3, #15
 8014a7c:	2101      	movs	r1, #1
 8014a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014a82:	041b      	lsls	r3, r3, #16
 8014a84:	43db      	mvns	r3, r3
 8014a86:	68f9      	ldr	r1, [r7, #12]
 8014a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014a8c:	4013      	ands	r3, r2
 8014a8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a96:	69da      	ldr	r2, [r3, #28]
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	f003 030f 	and.w	r3, r3, #15
 8014aa0:	2101      	movs	r1, #1
 8014aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8014aa6:	041b      	lsls	r3, r3, #16
 8014aa8:	43db      	mvns	r3, r3
 8014aaa:	68f9      	ldr	r1, [r7, #12]
 8014aac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ab0:	4013      	ands	r3, r2
 8014ab2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	015a      	lsls	r2, r3, #5
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	4413      	add	r3, r2
 8014abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	0159      	lsls	r1, r3, #5
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	440b      	add	r3, r1
 8014aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ace:	4619      	mov	r1, r3
 8014ad0:	4b05      	ldr	r3, [pc, #20]	@ (8014ae8 <USB_DeactivateEndpoint+0x1b4>)
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014ad6:	2300      	movs	r3, #0
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3714      	adds	r7, #20
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr
 8014ae4:	ec337800 	.word	0xec337800
 8014ae8:	eff37800 	.word	0xeff37800

08014aec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08a      	sub	sp, #40	@ 0x28
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	4613      	mov	r3, r2
 8014af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	785b      	ldrb	r3, [r3, #1]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	f040 8181 	bne.w	8014e10 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	691b      	ldr	r3, [r3, #16]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d132      	bne.n	8014b7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b16:	69bb      	ldr	r3, [r7, #24]
 8014b18:	015a      	lsls	r2, r3, #5
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b22:	691a      	ldr	r2, [r3, #16]
 8014b24:	69bb      	ldr	r3, [r7, #24]
 8014b26:	0159      	lsls	r1, r3, #5
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	440b      	add	r3, r1
 8014b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b30:	4619      	mov	r1, r3
 8014b32:	4ba5      	ldr	r3, [pc, #660]	@ (8014dc8 <USB_EPStartXfer+0x2dc>)
 8014b34:	4013      	ands	r3, r2
 8014b36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	015a      	lsls	r2, r3, #5
 8014b3c:	69fb      	ldr	r3, [r7, #28]
 8014b3e:	4413      	add	r3, r2
 8014b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b44:	691b      	ldr	r3, [r3, #16]
 8014b46:	69ba      	ldr	r2, [r7, #24]
 8014b48:	0151      	lsls	r1, r2, #5
 8014b4a:	69fa      	ldr	r2, [r7, #28]
 8014b4c:	440a      	add	r2, r1
 8014b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b58:	69bb      	ldr	r3, [r7, #24]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b64:	691a      	ldr	r2, [r3, #16]
 8014b66:	69bb      	ldr	r3, [r7, #24]
 8014b68:	0159      	lsls	r1, r3, #5
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	440b      	add	r3, r1
 8014b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b72:	4619      	mov	r1, r3
 8014b74:	4b95      	ldr	r3, [pc, #596]	@ (8014dcc <USB_EPStartXfer+0x2e0>)
 8014b76:	4013      	ands	r3, r2
 8014b78:	610b      	str	r3, [r1, #16]
 8014b7a:	e092      	b.n	8014ca2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014b7c:	69bb      	ldr	r3, [r7, #24]
 8014b7e:	015a      	lsls	r2, r3, #5
 8014b80:	69fb      	ldr	r3, [r7, #28]
 8014b82:	4413      	add	r3, r2
 8014b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b88:	691a      	ldr	r2, [r3, #16]
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	0159      	lsls	r1, r3, #5
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	440b      	add	r3, r1
 8014b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b96:	4619      	mov	r1, r3
 8014b98:	4b8c      	ldr	r3, [pc, #560]	@ (8014dcc <USB_EPStartXfer+0x2e0>)
 8014b9a:	4013      	ands	r3, r2
 8014b9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	015a      	lsls	r2, r3, #5
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014baa:	691a      	ldr	r2, [r3, #16]
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	0159      	lsls	r1, r3, #5
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	440b      	add	r3, r1
 8014bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014bb8:	4619      	mov	r1, r3
 8014bba:	4b83      	ldr	r3, [pc, #524]	@ (8014dc8 <USB_EPStartXfer+0x2dc>)
 8014bbc:	4013      	ands	r3, r2
 8014bbe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014bc0:	69bb      	ldr	r3, [r7, #24]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d11a      	bne.n	8014bfc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	691a      	ldr	r2, [r3, #16]
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	689b      	ldr	r3, [r3, #8]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d903      	bls.n	8014bda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	689a      	ldr	r2, [r3, #8]
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014bda:	69bb      	ldr	r3, [r7, #24]
 8014bdc:	015a      	lsls	r2, r3, #5
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	4413      	add	r3, r2
 8014be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014be6:	691b      	ldr	r3, [r3, #16]
 8014be8:	69ba      	ldr	r2, [r7, #24]
 8014bea:	0151      	lsls	r1, r2, #5
 8014bec:	69fa      	ldr	r2, [r7, #28]
 8014bee:	440a      	add	r2, r1
 8014bf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014bf8:	6113      	str	r3, [r2, #16]
 8014bfa:	e01b      	b.n	8014c34 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014bfc:	69bb      	ldr	r3, [r7, #24]
 8014bfe:	015a      	lsls	r2, r3, #5
 8014c00:	69fb      	ldr	r3, [r7, #28]
 8014c02:	4413      	add	r3, r2
 8014c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c08:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	6919      	ldr	r1, [r3, #16]
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	440b      	add	r3, r1
 8014c14:	1e59      	subs	r1, r3, #1
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	689b      	ldr	r3, [r3, #8]
 8014c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8014c1e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8014c20:	4b6b      	ldr	r3, [pc, #428]	@ (8014dd0 <USB_EPStartXfer+0x2e4>)
 8014c22:	400b      	ands	r3, r1
 8014c24:	69b9      	ldr	r1, [r7, #24]
 8014c26:	0148      	lsls	r0, r1, #5
 8014c28:	69f9      	ldr	r1, [r7, #28]
 8014c2a:	4401      	add	r1, r0
 8014c2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c30:	4313      	orrs	r3, r2
 8014c32:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	015a      	lsls	r2, r3, #5
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c40:	691a      	ldr	r2, [r3, #16]
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	691b      	ldr	r3, [r3, #16]
 8014c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c4a:	69b9      	ldr	r1, [r7, #24]
 8014c4c:	0148      	lsls	r0, r1, #5
 8014c4e:	69f9      	ldr	r1, [r7, #28]
 8014c50:	4401      	add	r1, r0
 8014c52:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014c56:	4313      	orrs	r3, r2
 8014c58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	791b      	ldrb	r3, [r3, #4]
 8014c5e:	2b01      	cmp	r3, #1
 8014c60:	d11f      	bne.n	8014ca2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	015a      	lsls	r2, r3, #5
 8014c66:	69fb      	ldr	r3, [r7, #28]
 8014c68:	4413      	add	r3, r2
 8014c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c6e:	691b      	ldr	r3, [r3, #16]
 8014c70:	69ba      	ldr	r2, [r7, #24]
 8014c72:	0151      	lsls	r1, r2, #5
 8014c74:	69fa      	ldr	r2, [r7, #28]
 8014c76:	440a      	add	r2, r1
 8014c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c7c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014c80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	015a      	lsls	r2, r3, #5
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	4413      	add	r3, r2
 8014c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c8e:	691b      	ldr	r3, [r3, #16]
 8014c90:	69ba      	ldr	r2, [r7, #24]
 8014c92:	0151      	lsls	r1, r2, #5
 8014c94:	69fa      	ldr	r2, [r7, #28]
 8014c96:	440a      	add	r2, r1
 8014c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014ca0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014ca2:	79fb      	ldrb	r3, [r7, #7]
 8014ca4:	2b01      	cmp	r3, #1
 8014ca6:	d14b      	bne.n	8014d40 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	69db      	ldr	r3, [r3, #28]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d009      	beq.n	8014cc4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	69db      	ldr	r3, [r3, #28]
 8014cc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014cc4:	68bb      	ldr	r3, [r7, #8]
 8014cc6:	791b      	ldrb	r3, [r3, #4]
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d128      	bne.n	8014d1e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d110      	bne.n	8014cfe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014cdc:	69bb      	ldr	r3, [r7, #24]
 8014cde:	015a      	lsls	r2, r3, #5
 8014ce0:	69fb      	ldr	r3, [r7, #28]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	69ba      	ldr	r2, [r7, #24]
 8014cec:	0151      	lsls	r1, r2, #5
 8014cee:	69fa      	ldr	r2, [r7, #28]
 8014cf0:	440a      	add	r2, r1
 8014cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cf6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014cfa:	6013      	str	r3, [r2, #0]
 8014cfc:	e00f      	b.n	8014d1e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	015a      	lsls	r2, r3, #5
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	4413      	add	r3, r2
 8014d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	69ba      	ldr	r2, [r7, #24]
 8014d0e:	0151      	lsls	r1, r2, #5
 8014d10:	69fa      	ldr	r2, [r7, #28]
 8014d12:	440a      	add	r2, r1
 8014d14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	015a      	lsls	r2, r3, #5
 8014d22:	69fb      	ldr	r3, [r7, #28]
 8014d24:	4413      	add	r3, r2
 8014d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	69ba      	ldr	r2, [r7, #24]
 8014d2e:	0151      	lsls	r1, r2, #5
 8014d30:	69fa      	ldr	r2, [r7, #28]
 8014d32:	440a      	add	r2, r1
 8014d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d3c:	6013      	str	r3, [r2, #0]
 8014d3e:	e16a      	b.n	8015016 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	015a      	lsls	r2, r3, #5
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	4413      	add	r3, r2
 8014d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	69ba      	ldr	r2, [r7, #24]
 8014d50:	0151      	lsls	r1, r2, #5
 8014d52:	69fa      	ldr	r2, [r7, #28]
 8014d54:	440a      	add	r2, r1
 8014d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014d5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	791b      	ldrb	r3, [r3, #4]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d015      	beq.n	8014d94 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	691b      	ldr	r3, [r3, #16]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f000 8152 	beq.w	8015016 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014d72:	69fb      	ldr	r3, [r7, #28]
 8014d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	f003 030f 	and.w	r3, r3, #15
 8014d82:	2101      	movs	r1, #1
 8014d84:	fa01 f303 	lsl.w	r3, r1, r3
 8014d88:	69f9      	ldr	r1, [r7, #28]
 8014d8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	634b      	str	r3, [r1, #52]	@ 0x34
 8014d92:	e140      	b.n	8015016 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d9a:	689b      	ldr	r3, [r3, #8]
 8014d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d117      	bne.n	8014dd4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	015a      	lsls	r2, r3, #5
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	4413      	add	r3, r2
 8014dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	69ba      	ldr	r2, [r7, #24]
 8014db4:	0151      	lsls	r1, r2, #5
 8014db6:	69fa      	ldr	r2, [r7, #28]
 8014db8:	440a      	add	r2, r1
 8014dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014dbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014dc2:	6013      	str	r3, [r2, #0]
 8014dc4:	e016      	b.n	8014df4 <USB_EPStartXfer+0x308>
 8014dc6:	bf00      	nop
 8014dc8:	e007ffff 	.word	0xe007ffff
 8014dcc:	fff80000 	.word	0xfff80000
 8014dd0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014dd4:	69bb      	ldr	r3, [r7, #24]
 8014dd6:	015a      	lsls	r2, r3, #5
 8014dd8:	69fb      	ldr	r3, [r7, #28]
 8014dda:	4413      	add	r3, r2
 8014ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	69ba      	ldr	r2, [r7, #24]
 8014de4:	0151      	lsls	r1, r2, #5
 8014de6:	69fa      	ldr	r2, [r7, #28]
 8014de8:	440a      	add	r2, r1
 8014dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014df2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	68d9      	ldr	r1, [r3, #12]
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	781a      	ldrb	r2, [r3, #0]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	691b      	ldr	r3, [r3, #16]
 8014e00:	b298      	uxth	r0, r3
 8014e02:	79fb      	ldrb	r3, [r7, #7]
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	4603      	mov	r3, r0
 8014e08:	68f8      	ldr	r0, [r7, #12]
 8014e0a:	f000 f9b9 	bl	8015180 <USB_WritePacket>
 8014e0e:	e102      	b.n	8015016 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	015a      	lsls	r2, r3, #5
 8014e14:	69fb      	ldr	r3, [r7, #28]
 8014e16:	4413      	add	r3, r2
 8014e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e1c:	691a      	ldr	r2, [r3, #16]
 8014e1e:	69bb      	ldr	r3, [r7, #24]
 8014e20:	0159      	lsls	r1, r3, #5
 8014e22:	69fb      	ldr	r3, [r7, #28]
 8014e24:	440b      	add	r3, r1
 8014e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8015020 <USB_EPStartXfer+0x534>)
 8014e2e:	4013      	ands	r3, r2
 8014e30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014e32:	69bb      	ldr	r3, [r7, #24]
 8014e34:	015a      	lsls	r2, r3, #5
 8014e36:	69fb      	ldr	r3, [r7, #28]
 8014e38:	4413      	add	r3, r2
 8014e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e3e:	691a      	ldr	r2, [r3, #16]
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	0159      	lsls	r1, r3, #5
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	440b      	add	r3, r1
 8014e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	4b75      	ldr	r3, [pc, #468]	@ (8015024 <USB_EPStartXfer+0x538>)
 8014e50:	4013      	ands	r3, r2
 8014e52:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014e54:	69bb      	ldr	r3, [r7, #24]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d12f      	bne.n	8014eba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014e5a:	68bb      	ldr	r3, [r7, #8]
 8014e5c:	691b      	ldr	r3, [r3, #16]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d003      	beq.n	8014e6a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	689a      	ldr	r2, [r3, #8]
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	689a      	ldr	r2, [r3, #8]
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014e72:	69bb      	ldr	r3, [r7, #24]
 8014e74:	015a      	lsls	r2, r3, #5
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	4413      	add	r3, r2
 8014e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014e7e:	691a      	ldr	r2, [r3, #16]
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	6a1b      	ldr	r3, [r3, #32]
 8014e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e88:	69b9      	ldr	r1, [r7, #24]
 8014e8a:	0148      	lsls	r0, r1, #5
 8014e8c:	69f9      	ldr	r1, [r7, #28]
 8014e8e:	4401      	add	r1, r0
 8014e90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014e94:	4313      	orrs	r3, r2
 8014e96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	015a      	lsls	r2, r3, #5
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ea4:	691b      	ldr	r3, [r3, #16]
 8014ea6:	69ba      	ldr	r2, [r7, #24]
 8014ea8:	0151      	lsls	r1, r2, #5
 8014eaa:	69fa      	ldr	r2, [r7, #28]
 8014eac:	440a      	add	r2, r1
 8014eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014eb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014eb6:	6113      	str	r3, [r2, #16]
 8014eb8:	e05f      	b.n	8014f7a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	691b      	ldr	r3, [r3, #16]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d123      	bne.n	8014f0a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	015a      	lsls	r2, r3, #5
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	4413      	add	r3, r2
 8014eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ece:	691a      	ldr	r2, [r3, #16]
 8014ed0:	68bb      	ldr	r3, [r7, #8]
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ed8:	69b9      	ldr	r1, [r7, #24]
 8014eda:	0148      	lsls	r0, r1, #5
 8014edc:	69f9      	ldr	r1, [r7, #28]
 8014ede:	4401      	add	r1, r0
 8014ee0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	015a      	lsls	r2, r3, #5
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	4413      	add	r3, r2
 8014ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ef4:	691b      	ldr	r3, [r3, #16]
 8014ef6:	69ba      	ldr	r2, [r7, #24]
 8014ef8:	0151      	lsls	r1, r2, #5
 8014efa:	69fa      	ldr	r2, [r7, #28]
 8014efc:	440a      	add	r2, r1
 8014efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014f06:	6113      	str	r3, [r2, #16]
 8014f08:	e037      	b.n	8014f7a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	691a      	ldr	r2, [r3, #16]
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	689b      	ldr	r3, [r3, #8]
 8014f12:	4413      	add	r3, r2
 8014f14:	1e5a      	subs	r2, r3, #1
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	689b      	ldr	r3, [r3, #8]
 8014f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f1e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	8afa      	ldrh	r2, [r7, #22]
 8014f26:	fb03 f202 	mul.w	r2, r3, r2
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	015a      	lsls	r2, r3, #5
 8014f32:	69fb      	ldr	r3, [r7, #28]
 8014f34:	4413      	add	r3, r2
 8014f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f3a:	691a      	ldr	r2, [r3, #16]
 8014f3c:	8afb      	ldrh	r3, [r7, #22]
 8014f3e:	04d9      	lsls	r1, r3, #19
 8014f40:	4b39      	ldr	r3, [pc, #228]	@ (8015028 <USB_EPStartXfer+0x53c>)
 8014f42:	400b      	ands	r3, r1
 8014f44:	69b9      	ldr	r1, [r7, #24]
 8014f46:	0148      	lsls	r0, r1, #5
 8014f48:	69f9      	ldr	r1, [r7, #28]
 8014f4a:	4401      	add	r1, r0
 8014f4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f50:	4313      	orrs	r3, r2
 8014f52:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	015a      	lsls	r2, r3, #5
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f60:	691a      	ldr	r2, [r3, #16]
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	6a1b      	ldr	r3, [r3, #32]
 8014f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f6a:	69b9      	ldr	r1, [r7, #24]
 8014f6c:	0148      	lsls	r0, r1, #5
 8014f6e:	69f9      	ldr	r1, [r7, #28]
 8014f70:	4401      	add	r1, r0
 8014f72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f76:	4313      	orrs	r3, r2
 8014f78:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014f7a:	79fb      	ldrb	r3, [r7, #7]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d10d      	bne.n	8014f9c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d009      	beq.n	8014f9c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	68d9      	ldr	r1, [r3, #12]
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	015a      	lsls	r2, r3, #5
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	4413      	add	r3, r2
 8014f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f98:	460a      	mov	r2, r1
 8014f9a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	791b      	ldrb	r3, [r3, #4]
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d128      	bne.n	8014ff6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014faa:	689b      	ldr	r3, [r3, #8]
 8014fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d110      	bne.n	8014fd6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	015a      	lsls	r2, r3, #5
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	4413      	add	r3, r2
 8014fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	69ba      	ldr	r2, [r7, #24]
 8014fc4:	0151      	lsls	r1, r2, #5
 8014fc6:	69fa      	ldr	r2, [r7, #28]
 8014fc8:	440a      	add	r2, r1
 8014fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014fd2:	6013      	str	r3, [r2, #0]
 8014fd4:	e00f      	b.n	8014ff6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	015a      	lsls	r2, r3, #5
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	4413      	add	r3, r2
 8014fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	69ba      	ldr	r2, [r7, #24]
 8014fe6:	0151      	lsls	r1, r2, #5
 8014fe8:	69fa      	ldr	r2, [r7, #28]
 8014fea:	440a      	add	r2, r1
 8014fec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ff4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	015a      	lsls	r2, r3, #5
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	69ba      	ldr	r2, [r7, #24]
 8015006:	0151      	lsls	r1, r2, #5
 8015008:	69fa      	ldr	r2, [r7, #28]
 801500a:	440a      	add	r2, r1
 801500c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015010:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015016:	2300      	movs	r3, #0
}
 8015018:	4618      	mov	r0, r3
 801501a:	3720      	adds	r7, #32
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	fff80000 	.word	0xfff80000
 8015024:	e007ffff 	.word	0xe007ffff
 8015028:	1ff80000 	.word	0x1ff80000

0801502c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801502c:	b480      	push	{r7}
 801502e:	b087      	sub	sp, #28
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015036:	2300      	movs	r3, #0
 8015038:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801503a:	2300      	movs	r3, #0
 801503c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015042:	683b      	ldr	r3, [r7, #0]
 8015044:	785b      	ldrb	r3, [r3, #1]
 8015046:	2b01      	cmp	r3, #1
 8015048:	d14a      	bne.n	80150e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	781b      	ldrb	r3, [r3, #0]
 801504e:	015a      	lsls	r2, r3, #5
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	4413      	add	r3, r2
 8015054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801505e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015062:	f040 8086 	bne.w	8015172 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	015a      	lsls	r2, r3, #5
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	4413      	add	r3, r2
 8015070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	683a      	ldr	r2, [r7, #0]
 8015078:	7812      	ldrb	r2, [r2, #0]
 801507a:	0151      	lsls	r1, r2, #5
 801507c:	693a      	ldr	r2, [r7, #16]
 801507e:	440a      	add	r2, r1
 8015080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015084:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015088:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	781b      	ldrb	r3, [r3, #0]
 801508e:	015a      	lsls	r2, r3, #5
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	4413      	add	r3, r2
 8015094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	683a      	ldr	r2, [r7, #0]
 801509c:	7812      	ldrb	r2, [r2, #0]
 801509e:	0151      	lsls	r1, r2, #5
 80150a0:	693a      	ldr	r2, [r7, #16]
 80150a2:	440a      	add	r2, r1
 80150a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80150ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	3301      	adds	r3, #1
 80150b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d902      	bls.n	80150c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80150be:	2301      	movs	r3, #1
 80150c0:	75fb      	strb	r3, [r7, #23]
          break;
 80150c2:	e056      	b.n	8015172 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	781b      	ldrb	r3, [r3, #0]
 80150c8:	015a      	lsls	r2, r3, #5
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	4413      	add	r3, r2
 80150ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150dc:	d0e7      	beq.n	80150ae <USB_EPStopXfer+0x82>
 80150de:	e048      	b.n	8015172 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	015a      	lsls	r2, r3, #5
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	4413      	add	r3, r2
 80150ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80150f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80150f8:	d13b      	bne.n	8015172 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	015a      	lsls	r2, r3, #5
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	4413      	add	r3, r2
 8015104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	683a      	ldr	r2, [r7, #0]
 801510c:	7812      	ldrb	r2, [r2, #0]
 801510e:	0151      	lsls	r1, r2, #5
 8015110:	693a      	ldr	r2, [r7, #16]
 8015112:	440a      	add	r2, r1
 8015114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015118:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801511c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	015a      	lsls	r2, r3, #5
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	4413      	add	r3, r2
 8015128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	7812      	ldrb	r2, [r2, #0]
 8015132:	0151      	lsls	r1, r2, #5
 8015134:	693a      	ldr	r2, [r7, #16]
 8015136:	440a      	add	r2, r1
 8015138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801513c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015140:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	3301      	adds	r3, #1
 8015146:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801514e:	4293      	cmp	r3, r2
 8015150:	d902      	bls.n	8015158 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015152:	2301      	movs	r3, #1
 8015154:	75fb      	strb	r3, [r7, #23]
          break;
 8015156:	e00c      	b.n	8015172 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	015a      	lsls	r2, r3, #5
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	4413      	add	r3, r2
 8015162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801516c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015170:	d0e7      	beq.n	8015142 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015172:	7dfb      	ldrb	r3, [r7, #23]
}
 8015174:	4618      	mov	r0, r3
 8015176:	371c      	adds	r7, #28
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr

08015180 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015180:	b480      	push	{r7}
 8015182:	b089      	sub	sp, #36	@ 0x24
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	4611      	mov	r1, r2
 801518c:	461a      	mov	r2, r3
 801518e:	460b      	mov	r3, r1
 8015190:	71fb      	strb	r3, [r7, #7]
 8015192:	4613      	mov	r3, r2
 8015194:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801519e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d123      	bne.n	80151ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80151a6:	88bb      	ldrh	r3, [r7, #4]
 80151a8:	3303      	adds	r3, #3
 80151aa:	089b      	lsrs	r3, r3, #2
 80151ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80151ae:	2300      	movs	r3, #0
 80151b0:	61bb      	str	r3, [r7, #24]
 80151b2:	e018      	b.n	80151e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	031a      	lsls	r2, r3, #12
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	4413      	add	r3, r2
 80151bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80151c0:	461a      	mov	r2, r3
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	3301      	adds	r3, #1
 80151cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	3301      	adds	r3, #1
 80151d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	3301      	adds	r3, #1
 80151d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	3301      	adds	r3, #1
 80151de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	3301      	adds	r3, #1
 80151e4:	61bb      	str	r3, [r7, #24]
 80151e6:	69ba      	ldr	r2, [r7, #24]
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d3e2      	bcc.n	80151b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3724      	adds	r7, #36	@ 0x24
 80151f4:	46bd      	mov	sp, r7
 80151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fa:	4770      	bx	lr

080151fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b08b      	sub	sp, #44	@ 0x2c
 8015200:	af00      	add	r7, sp, #0
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	4613      	mov	r3, r2
 8015208:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015212:	88fb      	ldrh	r3, [r7, #6]
 8015214:	089b      	lsrs	r3, r3, #2
 8015216:	b29b      	uxth	r3, r3
 8015218:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801521a:	88fb      	ldrh	r3, [r7, #6]
 801521c:	f003 0303 	and.w	r3, r3, #3
 8015220:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015222:	2300      	movs	r3, #0
 8015224:	623b      	str	r3, [r7, #32]
 8015226:	e014      	b.n	8015252 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015232:	601a      	str	r2, [r3, #0]
    pDest++;
 8015234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015236:	3301      	adds	r3, #1
 8015238:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523c:	3301      	adds	r3, #1
 801523e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015242:	3301      	adds	r3, #1
 8015244:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015248:	3301      	adds	r3, #1
 801524a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801524c:	6a3b      	ldr	r3, [r7, #32]
 801524e:	3301      	adds	r3, #1
 8015250:	623b      	str	r3, [r7, #32]
 8015252:	6a3a      	ldr	r2, [r7, #32]
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	429a      	cmp	r2, r3
 8015258:	d3e6      	bcc.n	8015228 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801525a:	8bfb      	ldrh	r3, [r7, #30]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d01e      	beq.n	801529e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015260:	2300      	movs	r3, #0
 8015262:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015264:	69bb      	ldr	r3, [r7, #24]
 8015266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801526a:	461a      	mov	r2, r3
 801526c:	f107 0310 	add.w	r3, r7, #16
 8015270:	6812      	ldr	r2, [r2, #0]
 8015272:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015274:	693a      	ldr	r2, [r7, #16]
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	b2db      	uxtb	r3, r3
 801527a:	00db      	lsls	r3, r3, #3
 801527c:	fa22 f303 	lsr.w	r3, r2, r3
 8015280:	b2da      	uxtb	r2, r3
 8015282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015284:	701a      	strb	r2, [r3, #0]
      i++;
 8015286:	6a3b      	ldr	r3, [r7, #32]
 8015288:	3301      	adds	r3, #1
 801528a:	623b      	str	r3, [r7, #32]
      pDest++;
 801528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801528e:	3301      	adds	r3, #1
 8015290:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8015292:	8bfb      	ldrh	r3, [r7, #30]
 8015294:	3b01      	subs	r3, #1
 8015296:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015298:	8bfb      	ldrh	r3, [r7, #30]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1ea      	bne.n	8015274 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	372c      	adds	r7, #44	@ 0x2c
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr

080152ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b085      	sub	sp, #20
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152ba:	683b      	ldr	r3, [r7, #0]
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	785b      	ldrb	r3, [r3, #1]
 80152c4:	2b01      	cmp	r3, #1
 80152c6:	d12c      	bne.n	8015322 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	015a      	lsls	r2, r3, #5
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	4413      	add	r3, r2
 80152d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	db12      	blt.n	8015300 <USB_EPSetStall+0x54>
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d00f      	beq.n	8015300 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	015a      	lsls	r2, r3, #5
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	4413      	add	r3, r2
 80152e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	0151      	lsls	r1, r2, #5
 80152f2:	68fa      	ldr	r2, [r7, #12]
 80152f4:	440a      	add	r2, r1
 80152f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80152fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80152fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	015a      	lsls	r2, r3, #5
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	4413      	add	r3, r2
 8015308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	0151      	lsls	r1, r2, #5
 8015312:	68fa      	ldr	r2, [r7, #12]
 8015314:	440a      	add	r2, r1
 8015316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801531a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801531e:	6013      	str	r3, [r2, #0]
 8015320:	e02b      	b.n	801537a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	015a      	lsls	r2, r3, #5
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	4413      	add	r3, r2
 801532a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	db12      	blt.n	801535a <USB_EPSetStall+0xae>
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d00f      	beq.n	801535a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	015a      	lsls	r2, r3, #5
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	4413      	add	r3, r2
 8015342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	68ba      	ldr	r2, [r7, #8]
 801534a:	0151      	lsls	r1, r2, #5
 801534c:	68fa      	ldr	r2, [r7, #12]
 801534e:	440a      	add	r2, r1
 8015350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015354:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015358:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	015a      	lsls	r2, r3, #5
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	4413      	add	r3, r2
 8015362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	0151      	lsls	r1, r2, #5
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	440a      	add	r2, r1
 8015370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015378:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801537a:	2300      	movs	r3, #0
}
 801537c:	4618      	mov	r0, r3
 801537e:	3714      	adds	r7, #20
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr

08015388 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015388:	b480      	push	{r7}
 801538a:	b085      	sub	sp, #20
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	785b      	ldrb	r3, [r3, #1]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d128      	bne.n	80153f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	015a      	lsls	r2, r3, #5
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	4413      	add	r3, r2
 80153ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68ba      	ldr	r2, [r7, #8]
 80153b4:	0151      	lsls	r1, r2, #5
 80153b6:	68fa      	ldr	r2, [r7, #12]
 80153b8:	440a      	add	r2, r1
 80153ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80153c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	791b      	ldrb	r3, [r3, #4]
 80153c8:	2b03      	cmp	r3, #3
 80153ca:	d003      	beq.n	80153d4 <USB_EPClearStall+0x4c>
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	791b      	ldrb	r3, [r3, #4]
 80153d0:	2b02      	cmp	r3, #2
 80153d2:	d138      	bne.n	8015446 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	015a      	lsls	r2, r3, #5
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	4413      	add	r3, r2
 80153dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	68ba      	ldr	r2, [r7, #8]
 80153e4:	0151      	lsls	r1, r2, #5
 80153e6:	68fa      	ldr	r2, [r7, #12]
 80153e8:	440a      	add	r2, r1
 80153ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80153f2:	6013      	str	r3, [r2, #0]
 80153f4:	e027      	b.n	8015446 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	015a      	lsls	r2, r3, #5
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	4413      	add	r3, r2
 80153fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	68ba      	ldr	r2, [r7, #8]
 8015406:	0151      	lsls	r1, r2, #5
 8015408:	68fa      	ldr	r2, [r7, #12]
 801540a:	440a      	add	r2, r1
 801540c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015410:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015414:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015416:	683b      	ldr	r3, [r7, #0]
 8015418:	791b      	ldrb	r3, [r3, #4]
 801541a:	2b03      	cmp	r3, #3
 801541c:	d003      	beq.n	8015426 <USB_EPClearStall+0x9e>
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	791b      	ldrb	r3, [r3, #4]
 8015422:	2b02      	cmp	r3, #2
 8015424:	d10f      	bne.n	8015446 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	015a      	lsls	r2, r3, #5
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	4413      	add	r3, r2
 801542e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	68ba      	ldr	r2, [r7, #8]
 8015436:	0151      	lsls	r1, r2, #5
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	440a      	add	r2, r1
 801543c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015444:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015446:	2300      	movs	r3, #0
}
 8015448:	4618      	mov	r0, r3
 801544a:	3714      	adds	r7, #20
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr

08015454 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015454:	b480      	push	{r7}
 8015456:	b085      	sub	sp, #20
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	460b      	mov	r3, r1
 801545e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015472:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015476:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	78fb      	ldrb	r3, [r7, #3]
 8015482:	011b      	lsls	r3, r3, #4
 8015484:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015488:	68f9      	ldr	r1, [r7, #12]
 801548a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801548e:	4313      	orrs	r3, r2
 8015490:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3714      	adds	r7, #20
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr

080154a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80154a0:	b480      	push	{r7}
 80154a2:	b085      	sub	sp, #20
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80154ba:	f023 0303 	bic.w	r3, r3, #3
 80154be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154c6:	685b      	ldr	r3, [r3, #4]
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80154ce:	f023 0302 	bic.w	r3, r3, #2
 80154d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80154d4:	2300      	movs	r3, #0
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3714      	adds	r7, #20
 80154da:	46bd      	mov	sp, r7
 80154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e0:	4770      	bx	lr

080154e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80154e2:	b480      	push	{r7}
 80154e4:	b085      	sub	sp, #20
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80154fc:	f023 0303 	bic.w	r3, r3, #3
 8015500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	68fa      	ldr	r2, [r7, #12]
 801550c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015510:	f043 0302 	orr.w	r3, r3, #2
 8015514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015516:	2300      	movs	r3, #0
}
 8015518:	4618      	mov	r0, r3
 801551a:	3714      	adds	r7, #20
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015524:	b480      	push	{r7}
 8015526:	b085      	sub	sp, #20
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	695b      	ldr	r3, [r3, #20]
 8015530:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	699b      	ldr	r3, [r3, #24]
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	4013      	ands	r3, r2
 801553a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801553c:	68fb      	ldr	r3, [r7, #12]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3714      	adds	r7, #20
 8015542:	46bd      	mov	sp, r7
 8015544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015548:	4770      	bx	lr

0801554a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801554a:	b480      	push	{r7}
 801554c:	b085      	sub	sp, #20
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801555c:	699b      	ldr	r3, [r3, #24]
 801555e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015566:	69db      	ldr	r3, [r3, #28]
 8015568:	68ba      	ldr	r2, [r7, #8]
 801556a:	4013      	ands	r3, r2
 801556c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	0c1b      	lsrs	r3, r3, #16
}
 8015572:	4618      	mov	r0, r3
 8015574:	3714      	adds	r7, #20
 8015576:	46bd      	mov	sp, r7
 8015578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557c:	4770      	bx	lr

0801557e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801557e:	b480      	push	{r7}
 8015580:	b085      	sub	sp, #20
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015590:	699b      	ldr	r3, [r3, #24]
 8015592:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801559a:	69db      	ldr	r3, [r3, #28]
 801559c:	68ba      	ldr	r2, [r7, #8]
 801559e:	4013      	ands	r3, r2
 80155a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	b29b      	uxth	r3, r3
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3714      	adds	r7, #20
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr

080155b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80155b2:	b480      	push	{r7}
 80155b4:	b085      	sub	sp, #20
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
 80155ba:	460b      	mov	r3, r1
 80155bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80155c2:	78fb      	ldrb	r3, [r7, #3]
 80155c4:	015a      	lsls	r2, r3, #5
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	4413      	add	r3, r2
 80155ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80155ce:	689b      	ldr	r3, [r3, #8]
 80155d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155d8:	695b      	ldr	r3, [r3, #20]
 80155da:	68ba      	ldr	r2, [r7, #8]
 80155dc:	4013      	ands	r3, r2
 80155de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80155e0:	68bb      	ldr	r3, [r7, #8]
}
 80155e2:	4618      	mov	r0, r3
 80155e4:	3714      	adds	r7, #20
 80155e6:	46bd      	mov	sp, r7
 80155e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ec:	4770      	bx	lr

080155ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80155ee:	b480      	push	{r7}
 80155f0:	b087      	sub	sp, #28
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
 80155f6:	460b      	mov	r3, r1
 80155f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015604:	691b      	ldr	r3, [r3, #16]
 8015606:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801560e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015610:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015612:	78fb      	ldrb	r3, [r7, #3]
 8015614:	f003 030f 	and.w	r3, r3, #15
 8015618:	68fa      	ldr	r2, [r7, #12]
 801561a:	fa22 f303 	lsr.w	r3, r2, r3
 801561e:	01db      	lsls	r3, r3, #7
 8015620:	b2db      	uxtb	r3, r3
 8015622:	693a      	ldr	r2, [r7, #16]
 8015624:	4313      	orrs	r3, r2
 8015626:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015628:	78fb      	ldrb	r3, [r7, #3]
 801562a:	015a      	lsls	r2, r3, #5
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	4413      	add	r3, r2
 8015630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015634:	689b      	ldr	r3, [r3, #8]
 8015636:	693a      	ldr	r2, [r7, #16]
 8015638:	4013      	ands	r3, r2
 801563a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801563c:	68bb      	ldr	r3, [r7, #8]
}
 801563e:	4618      	mov	r0, r3
 8015640:	371c      	adds	r7, #28
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr

0801564a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801564a:	b480      	push	{r7}
 801564c:	b083      	sub	sp, #12
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	695b      	ldr	r3, [r3, #20]
 8015656:	f003 0301 	and.w	r3, r3, #1
}
 801565a:	4618      	mov	r0, r3
 801565c:	370c      	adds	r7, #12
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr
	...

08015668 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015668:	b480      	push	{r7}
 801566a:	b085      	sub	sp, #20
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801567a:	681a      	ldr	r2, [r3, #0]
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015682:	4619      	mov	r1, r3
 8015684:	4b09      	ldr	r3, [pc, #36]	@ (80156ac <USB_ActivateSetup+0x44>)
 8015686:	4013      	ands	r3, r2
 8015688:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	68fa      	ldr	r2, [r7, #12]
 8015694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801569c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801569e:	2300      	movs	r3, #0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	3714      	adds	r7, #20
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr
 80156ac:	fffff800 	.word	0xfffff800

080156b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80156b0:	b480      	push	{r7}
 80156b2:	b087      	sub	sp, #28
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	60f8      	str	r0, [r7, #12]
 80156b8:	460b      	mov	r3, r1
 80156ba:	607a      	str	r2, [r7, #4]
 80156bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	333c      	adds	r3, #60	@ 0x3c
 80156c6:	3304      	adds	r3, #4
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	4a26      	ldr	r2, [pc, #152]	@ (8015768 <USB_EP0_OutStart+0xb8>)
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d90a      	bls.n	80156ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80156e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80156e4:	d101      	bne.n	80156ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80156e6:	2300      	movs	r3, #0
 80156e8:	e037      	b.n	801575a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156f0:	461a      	mov	r2, r3
 80156f2:	2300      	movs	r3, #0
 80156f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156fc:	691b      	ldr	r3, [r3, #16]
 80156fe:	697a      	ldr	r2, [r7, #20]
 8015700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015704:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015710:	691b      	ldr	r3, [r3, #16]
 8015712:	697a      	ldr	r2, [r7, #20]
 8015714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015718:	f043 0318 	orr.w	r3, r3, #24
 801571c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015724:	691b      	ldr	r3, [r3, #16]
 8015726:	697a      	ldr	r2, [r7, #20]
 8015728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801572c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015730:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015732:	7afb      	ldrb	r3, [r7, #11]
 8015734:	2b01      	cmp	r3, #1
 8015736:	d10f      	bne.n	8015758 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801573e:	461a      	mov	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	697a      	ldr	r2, [r7, #20]
 801574e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015752:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015758:	2300      	movs	r3, #0
}
 801575a:	4618      	mov	r0, r3
 801575c:	371c      	adds	r7, #28
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	4f54300a 	.word	0x4f54300a

0801576c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801576c:	b480      	push	{r7}
 801576e:	b085      	sub	sp, #20
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015774:	2300      	movs	r3, #0
 8015776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	3301      	adds	r3, #1
 801577c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015784:	d901      	bls.n	801578a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015786:	2303      	movs	r3, #3
 8015788:	e01b      	b.n	80157c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	2b00      	cmp	r3, #0
 8015790:	daf2      	bge.n	8015778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015792:	2300      	movs	r3, #0
 8015794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	691b      	ldr	r3, [r3, #16]
 801579a:	f043 0201 	orr.w	r2, r3, #1
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	3301      	adds	r3, #1
 80157a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80157ae:	d901      	bls.n	80157b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80157b0:	2303      	movs	r3, #3
 80157b2:	e006      	b.n	80157c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	691b      	ldr	r3, [r3, #16]
 80157b8:	f003 0301 	and.w	r3, r3, #1
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d0f0      	beq.n	80157a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3714      	adds	r7, #20
 80157c6:	46bd      	mov	sp, r7
 80157c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157cc:	4770      	bx	lr
	...

080157d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	460b      	mov	r3, r1
 80157da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80157dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80157e0:	f002 fcca 	bl	8018178 <USBD_static_malloc>
 80157e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d109      	bne.n	8015800 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	32b0      	adds	r2, #176	@ 0xb0
 80157f6:	2100      	movs	r1, #0
 80157f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80157fc:	2302      	movs	r3, #2
 80157fe:	e0d4      	b.n	80159aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015800:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015804:	2100      	movs	r1, #0
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f004 f89f 	bl	801994a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	32b0      	adds	r2, #176	@ 0xb0
 8015816:	68f9      	ldr	r1, [r7, #12]
 8015818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	32b0      	adds	r2, #176	@ 0xb0
 8015826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	7c1b      	ldrb	r3, [r3, #16]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d138      	bne.n	80158aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015838:	4b5e      	ldr	r3, [pc, #376]	@ (80159b4 <USBD_CDC_Init+0x1e4>)
 801583a:	7819      	ldrb	r1, [r3, #0]
 801583c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015840:	2202      	movs	r2, #2
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f002 fb75 	bl	8017f32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015848:	4b5a      	ldr	r3, [pc, #360]	@ (80159b4 <USBD_CDC_Init+0x1e4>)
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	f003 020f 	and.w	r2, r3, #15
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	4613      	mov	r3, r2
 8015854:	009b      	lsls	r3, r3, #2
 8015856:	4413      	add	r3, r2
 8015858:	009b      	lsls	r3, r3, #2
 801585a:	440b      	add	r3, r1
 801585c:	3324      	adds	r3, #36	@ 0x24
 801585e:	2201      	movs	r2, #1
 8015860:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015862:	4b55      	ldr	r3, [pc, #340]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 8015864:	7819      	ldrb	r1, [r3, #0]
 8015866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801586a:	2202      	movs	r2, #2
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f002 fb60 	bl	8017f32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015872:	4b51      	ldr	r3, [pc, #324]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	f003 020f 	and.w	r2, r3, #15
 801587a:	6879      	ldr	r1, [r7, #4]
 801587c:	4613      	mov	r3, r2
 801587e:	009b      	lsls	r3, r3, #2
 8015880:	4413      	add	r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	440b      	add	r3, r1
 8015886:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801588a:	2201      	movs	r2, #1
 801588c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801588e:	4b4b      	ldr	r3, [pc, #300]	@ (80159bc <USBD_CDC_Init+0x1ec>)
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	f003 020f 	and.w	r2, r3, #15
 8015896:	6879      	ldr	r1, [r7, #4]
 8015898:	4613      	mov	r3, r2
 801589a:	009b      	lsls	r3, r3, #2
 801589c:	4413      	add	r3, r2
 801589e:	009b      	lsls	r3, r3, #2
 80158a0:	440b      	add	r3, r1
 80158a2:	3326      	adds	r3, #38	@ 0x26
 80158a4:	2210      	movs	r2, #16
 80158a6:	801a      	strh	r2, [r3, #0]
 80158a8:	e035      	b.n	8015916 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80158aa:	4b42      	ldr	r3, [pc, #264]	@ (80159b4 <USBD_CDC_Init+0x1e4>)
 80158ac:	7819      	ldrb	r1, [r3, #0]
 80158ae:	2340      	movs	r3, #64	@ 0x40
 80158b0:	2202      	movs	r2, #2
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f002 fb3d 	bl	8017f32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80158b8:	4b3e      	ldr	r3, [pc, #248]	@ (80159b4 <USBD_CDC_Init+0x1e4>)
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	f003 020f 	and.w	r2, r3, #15
 80158c0:	6879      	ldr	r1, [r7, #4]
 80158c2:	4613      	mov	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	4413      	add	r3, r2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	440b      	add	r3, r1
 80158cc:	3324      	adds	r3, #36	@ 0x24
 80158ce:	2201      	movs	r2, #1
 80158d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80158d2:	4b39      	ldr	r3, [pc, #228]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 80158d4:	7819      	ldrb	r1, [r3, #0]
 80158d6:	2340      	movs	r3, #64	@ 0x40
 80158d8:	2202      	movs	r2, #2
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f002 fb29 	bl	8017f32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80158e0:	4b35      	ldr	r3, [pc, #212]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	f003 020f 	and.w	r2, r3, #15
 80158e8:	6879      	ldr	r1, [r7, #4]
 80158ea:	4613      	mov	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	4413      	add	r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	440b      	add	r3, r1
 80158f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80158f8:	2201      	movs	r2, #1
 80158fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80158fc:	4b2f      	ldr	r3, [pc, #188]	@ (80159bc <USBD_CDC_Init+0x1ec>)
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	f003 020f 	and.w	r2, r3, #15
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	4613      	mov	r3, r2
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	4413      	add	r3, r2
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	440b      	add	r3, r1
 8015910:	3326      	adds	r3, #38	@ 0x26
 8015912:	2210      	movs	r2, #16
 8015914:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015916:	4b29      	ldr	r3, [pc, #164]	@ (80159bc <USBD_CDC_Init+0x1ec>)
 8015918:	7819      	ldrb	r1, [r3, #0]
 801591a:	2308      	movs	r3, #8
 801591c:	2203      	movs	r2, #3
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f002 fb07 	bl	8017f32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015924:	4b25      	ldr	r3, [pc, #148]	@ (80159bc <USBD_CDC_Init+0x1ec>)
 8015926:	781b      	ldrb	r3, [r3, #0]
 8015928:	f003 020f 	and.w	r2, r3, #15
 801592c:	6879      	ldr	r1, [r7, #4]
 801592e:	4613      	mov	r3, r2
 8015930:	009b      	lsls	r3, r3, #2
 8015932:	4413      	add	r3, r2
 8015934:	009b      	lsls	r3, r3, #2
 8015936:	440b      	add	r3, r1
 8015938:	3324      	adds	r3, #36	@ 0x24
 801593a:	2201      	movs	r2, #1
 801593c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2200      	movs	r2, #0
 8015942:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	33b0      	adds	r3, #176	@ 0xb0
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	4413      	add	r3, r2
 8015954:	685b      	ldr	r3, [r3, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2200      	movs	r2, #0
 801595e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2200      	movs	r2, #0
 8015966:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015970:	2b00      	cmp	r3, #0
 8015972:	d101      	bne.n	8015978 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015974:	2302      	movs	r3, #2
 8015976:	e018      	b.n	80159aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	7c1b      	ldrb	r3, [r3, #16]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10a      	bne.n	8015996 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015980:	4b0d      	ldr	r3, [pc, #52]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 8015982:	7819      	ldrb	r1, [r3, #0]
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801598a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f002 fbbe 	bl	8018110 <USBD_LL_PrepareReceive>
 8015994:	e008      	b.n	80159a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015996:	4b08      	ldr	r3, [pc, #32]	@ (80159b8 <USBD_CDC_Init+0x1e8>)
 8015998:	7819      	ldrb	r1, [r3, #0]
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80159a0:	2340      	movs	r3, #64	@ 0x40
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f002 fbb4 	bl	8018110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	24000097 	.word	0x24000097
 80159b8:	24000098 	.word	0x24000098
 80159bc:	24000099 	.word	0x24000099

080159c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	460b      	mov	r3, r1
 80159ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80159cc:	4b3a      	ldr	r3, [pc, #232]	@ (8015ab8 <USBD_CDC_DeInit+0xf8>)
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	4619      	mov	r1, r3
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f002 fad3 	bl	8017f7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80159d8:	4b37      	ldr	r3, [pc, #220]	@ (8015ab8 <USBD_CDC_DeInit+0xf8>)
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	f003 020f 	and.w	r2, r3, #15
 80159e0:	6879      	ldr	r1, [r7, #4]
 80159e2:	4613      	mov	r3, r2
 80159e4:	009b      	lsls	r3, r3, #2
 80159e6:	4413      	add	r3, r2
 80159e8:	009b      	lsls	r3, r3, #2
 80159ea:	440b      	add	r3, r1
 80159ec:	3324      	adds	r3, #36	@ 0x24
 80159ee:	2200      	movs	r2, #0
 80159f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80159f2:	4b32      	ldr	r3, [pc, #200]	@ (8015abc <USBD_CDC_DeInit+0xfc>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	4619      	mov	r1, r3
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f002 fac0 	bl	8017f7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80159fe:	4b2f      	ldr	r3, [pc, #188]	@ (8015abc <USBD_CDC_DeInit+0xfc>)
 8015a00:	781b      	ldrb	r3, [r3, #0]
 8015a02:	f003 020f 	and.w	r2, r3, #15
 8015a06:	6879      	ldr	r1, [r7, #4]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	4413      	add	r3, r2
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	440b      	add	r3, r1
 8015a12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015a16:	2200      	movs	r2, #0
 8015a18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015a1a:	4b29      	ldr	r3, [pc, #164]	@ (8015ac0 <USBD_CDC_DeInit+0x100>)
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	4619      	mov	r1, r3
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f002 faac 	bl	8017f7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015a26:	4b26      	ldr	r3, [pc, #152]	@ (8015ac0 <USBD_CDC_DeInit+0x100>)
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	f003 020f 	and.w	r2, r3, #15
 8015a2e:	6879      	ldr	r1, [r7, #4]
 8015a30:	4613      	mov	r3, r2
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	4413      	add	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	440b      	add	r3, r1
 8015a3a:	3324      	adds	r3, #36	@ 0x24
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015a40:	4b1f      	ldr	r3, [pc, #124]	@ (8015ac0 <USBD_CDC_DeInit+0x100>)
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	f003 020f 	and.w	r2, r3, #15
 8015a48:	6879      	ldr	r1, [r7, #4]
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	4413      	add	r3, r2
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	440b      	add	r3, r1
 8015a54:	3326      	adds	r3, #38	@ 0x26
 8015a56:	2200      	movs	r2, #0
 8015a58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	32b0      	adds	r2, #176	@ 0xb0
 8015a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d01f      	beq.n	8015aac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	33b0      	adds	r3, #176	@ 0xb0
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	4413      	add	r3, r2
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	32b0      	adds	r2, #176	@ 0xb0
 8015a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f002 fb80 	bl	8018194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	32b0      	adds	r2, #176	@ 0xb0
 8015a9e:	2100      	movs	r1, #0
 8015aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015aac:	2300      	movs	r3, #0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	24000097 	.word	0x24000097
 8015abc:	24000098 	.word	0x24000098
 8015ac0:	24000099 	.word	0x24000099

08015ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b086      	sub	sp, #24
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	32b0      	adds	r2, #176	@ 0xb0
 8015ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015adc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d101      	bne.n	8015af4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015af0:	2303      	movs	r3, #3
 8015af2:	e0bf      	b.n	8015c74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d050      	beq.n	8015ba2 <USBD_CDC_Setup+0xde>
 8015b00:	2b20      	cmp	r3, #32
 8015b02:	f040 80af 	bne.w	8015c64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	88db      	ldrh	r3, [r3, #6]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d03a      	beq.n	8015b84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	b25b      	sxtb	r3, r3
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	da1b      	bge.n	8015b50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b1e:	687a      	ldr	r2, [r7, #4]
 8015b20:	33b0      	adds	r3, #176	@ 0xb0
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	4413      	add	r3, r2
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	689b      	ldr	r3, [r3, #8]
 8015b2a:	683a      	ldr	r2, [r7, #0]
 8015b2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015b2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015b30:	683a      	ldr	r2, [r7, #0]
 8015b32:	88d2      	ldrh	r2, [r2, #6]
 8015b34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	88db      	ldrh	r3, [r3, #6]
 8015b3a:	2b07      	cmp	r3, #7
 8015b3c:	bf28      	it	cs
 8015b3e:	2307      	movcs	r3, #7
 8015b40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	89fa      	ldrh	r2, [r7, #14]
 8015b46:	4619      	mov	r1, r3
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f001 fdbd 	bl	80176c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015b4e:	e090      	b.n	8015c72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	785a      	ldrb	r2, [r3, #1]
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	88db      	ldrh	r3, [r3, #6]
 8015b5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015b60:	d803      	bhi.n	8015b6a <USBD_CDC_Setup+0xa6>
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	88db      	ldrh	r3, [r3, #6]
 8015b66:	b2da      	uxtb	r2, r3
 8015b68:	e000      	b.n	8015b6c <USBD_CDC_Setup+0xa8>
 8015b6a:	2240      	movs	r2, #64	@ 0x40
 8015b6c:	693b      	ldr	r3, [r7, #16]
 8015b6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015b72:	6939      	ldr	r1, [r7, #16]
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f001 fdcf 	bl	8017720 <USBD_CtlPrepareRx>
      break;
 8015b82:	e076      	b.n	8015c72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	33b0      	adds	r3, #176	@ 0xb0
 8015b8e:	009b      	lsls	r3, r3, #2
 8015b90:	4413      	add	r3, r2
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	683a      	ldr	r2, [r7, #0]
 8015b98:	7850      	ldrb	r0, [r2, #1]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	4798      	blx	r3
      break;
 8015ba0:	e067      	b.n	8015c72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	785b      	ldrb	r3, [r3, #1]
 8015ba6:	2b0b      	cmp	r3, #11
 8015ba8:	d851      	bhi.n	8015c4e <USBD_CDC_Setup+0x18a>
 8015baa:	a201      	add	r2, pc, #4	@ (adr r2, 8015bb0 <USBD_CDC_Setup+0xec>)
 8015bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bb0:	08015be1 	.word	0x08015be1
 8015bb4:	08015c5d 	.word	0x08015c5d
 8015bb8:	08015c4f 	.word	0x08015c4f
 8015bbc:	08015c4f 	.word	0x08015c4f
 8015bc0:	08015c4f 	.word	0x08015c4f
 8015bc4:	08015c4f 	.word	0x08015c4f
 8015bc8:	08015c4f 	.word	0x08015c4f
 8015bcc:	08015c4f 	.word	0x08015c4f
 8015bd0:	08015c4f 	.word	0x08015c4f
 8015bd4:	08015c4f 	.word	0x08015c4f
 8015bd8:	08015c0b 	.word	0x08015c0b
 8015bdc:	08015c35 	.word	0x08015c35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	2b03      	cmp	r3, #3
 8015bea:	d107      	bne.n	8015bfc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015bec:	f107 030a 	add.w	r3, r7, #10
 8015bf0:	2202      	movs	r2, #2
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f001 fd67 	bl	80176c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015bfa:	e032      	b.n	8015c62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015bfc:	6839      	ldr	r1, [r7, #0]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f001 fce5 	bl	80175ce <USBD_CtlError>
            ret = USBD_FAIL;
 8015c04:	2303      	movs	r3, #3
 8015c06:	75fb      	strb	r3, [r7, #23]
          break;
 8015c08:	e02b      	b.n	8015c62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b03      	cmp	r3, #3
 8015c14:	d107      	bne.n	8015c26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015c16:	f107 030d 	add.w	r3, r7, #13
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	4619      	mov	r1, r3
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f001 fd52 	bl	80176c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015c24:	e01d      	b.n	8015c62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015c26:	6839      	ldr	r1, [r7, #0]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f001 fcd0 	bl	80175ce <USBD_CtlError>
            ret = USBD_FAIL;
 8015c2e:	2303      	movs	r3, #3
 8015c30:	75fb      	strb	r3, [r7, #23]
          break;
 8015c32:	e016      	b.n	8015c62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	2b03      	cmp	r3, #3
 8015c3e:	d00f      	beq.n	8015c60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015c40:	6839      	ldr	r1, [r7, #0]
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f001 fcc3 	bl	80175ce <USBD_CtlError>
            ret = USBD_FAIL;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015c4c:	e008      	b.n	8015c60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015c4e:	6839      	ldr	r1, [r7, #0]
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f001 fcbc 	bl	80175ce <USBD_CtlError>
          ret = USBD_FAIL;
 8015c56:	2303      	movs	r3, #3
 8015c58:	75fb      	strb	r3, [r7, #23]
          break;
 8015c5a:	e002      	b.n	8015c62 <USBD_CDC_Setup+0x19e>
          break;
 8015c5c:	bf00      	nop
 8015c5e:	e008      	b.n	8015c72 <USBD_CDC_Setup+0x1ae>
          break;
 8015c60:	bf00      	nop
      }
      break;
 8015c62:	e006      	b.n	8015c72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015c64:	6839      	ldr	r1, [r7, #0]
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f001 fcb1 	bl	80175ce <USBD_CtlError>
      ret = USBD_FAIL;
 8015c6c:	2303      	movs	r3, #3
 8015c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8015c70:	bf00      	nop
  }

  return (uint8_t)ret;
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3718      	adds	r7, #24
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	460b      	mov	r3, r1
 8015c86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015c8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	32b0      	adds	r2, #176	@ 0xb0
 8015c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d101      	bne.n	8015ca6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015ca2:	2303      	movs	r3, #3
 8015ca4:	e065      	b.n	8015d72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	32b0      	adds	r2, #176	@ 0xb0
 8015cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015cb6:	78fb      	ldrb	r3, [r7, #3]
 8015cb8:	f003 020f 	and.w	r2, r3, #15
 8015cbc:	6879      	ldr	r1, [r7, #4]
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	4413      	add	r3, r2
 8015cc4:	009b      	lsls	r3, r3, #2
 8015cc6:	440b      	add	r3, r1
 8015cc8:	3318      	adds	r3, #24
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d02f      	beq.n	8015d30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015cd0:	78fb      	ldrb	r3, [r7, #3]
 8015cd2:	f003 020f 	and.w	r2, r3, #15
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	4613      	mov	r3, r2
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	4413      	add	r3, r2
 8015cde:	009b      	lsls	r3, r3, #2
 8015ce0:	440b      	add	r3, r1
 8015ce2:	3318      	adds	r3, #24
 8015ce4:	681a      	ldr	r2, [r3, #0]
 8015ce6:	78fb      	ldrb	r3, [r7, #3]
 8015ce8:	f003 010f 	and.w	r1, r3, #15
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	460b      	mov	r3, r1
 8015cf0:	00db      	lsls	r3, r3, #3
 8015cf2:	440b      	add	r3, r1
 8015cf4:	009b      	lsls	r3, r3, #2
 8015cf6:	4403      	add	r3, r0
 8015cf8:	331c      	adds	r3, #28
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8015d00:	fb01 f303 	mul.w	r3, r1, r3
 8015d04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d112      	bne.n	8015d30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015d0a:	78fb      	ldrb	r3, [r7, #3]
 8015d0c:	f003 020f 	and.w	r2, r3, #15
 8015d10:	6879      	ldr	r1, [r7, #4]
 8015d12:	4613      	mov	r3, r2
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	4413      	add	r3, r2
 8015d18:	009b      	lsls	r3, r3, #2
 8015d1a:	440b      	add	r3, r1
 8015d1c:	3318      	adds	r3, #24
 8015d1e:	2200      	movs	r2, #0
 8015d20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015d22:	78f9      	ldrb	r1, [r7, #3]
 8015d24:	2300      	movs	r3, #0
 8015d26:	2200      	movs	r2, #0
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f002 f9d0 	bl	80180ce <USBD_LL_Transmit>
 8015d2e:	e01f      	b.n	8015d70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	2200      	movs	r2, #0
 8015d34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	33b0      	adds	r3, #176	@ 0xb0
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	4413      	add	r3, r2
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	691b      	ldr	r3, [r3, #16]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d010      	beq.n	8015d70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d54:	687a      	ldr	r2, [r7, #4]
 8015d56:	33b0      	adds	r3, #176	@ 0xb0
 8015d58:	009b      	lsls	r3, r3, #2
 8015d5a:	4413      	add	r3, r2
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	691b      	ldr	r3, [r3, #16]
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015d66:	68ba      	ldr	r2, [r7, #8]
 8015d68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015d6c:	78fa      	ldrb	r2, [r7, #3]
 8015d6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015d70:	2300      	movs	r3, #0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3710      	adds	r7, #16
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}

08015d7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b084      	sub	sp, #16
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
 8015d82:	460b      	mov	r3, r1
 8015d84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	32b0      	adds	r2, #176	@ 0xb0
 8015d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	32b0      	adds	r2, #176	@ 0xb0
 8015da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015da8:	2303      	movs	r3, #3
 8015daa:	e01a      	b.n	8015de2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015dac:	78fb      	ldrb	r3, [r7, #3]
 8015dae:	4619      	mov	r1, r3
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f002 f9ce 	bl	8018152 <USBD_LL_GetRxDataSize>
 8015db6:	4602      	mov	r2, r0
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	33b0      	adds	r3, #176	@ 0xb0
 8015dc8:	009b      	lsls	r3, r3, #2
 8015dca:	4413      	add	r3, r2
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	68fa      	ldr	r2, [r7, #12]
 8015dd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015ddc:	4611      	mov	r1, r2
 8015dde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015de0:	2300      	movs	r3, #0
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	32b0      	adds	r2, #176	@ 0xb0
 8015dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d101      	bne.n	8015e0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015e08:	2303      	movs	r3, #3
 8015e0a:	e024      	b.n	8015e56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e12:	687a      	ldr	r2, [r7, #4]
 8015e14:	33b0      	adds	r3, #176	@ 0xb0
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	4413      	add	r3, r2
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d019      	beq.n	8015e54 <USBD_CDC_EP0_RxReady+0x6a>
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015e26:	2bff      	cmp	r3, #255	@ 0xff
 8015e28:	d014      	beq.n	8015e54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	33b0      	adds	r3, #176	@ 0xb0
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	4413      	add	r3, r2
 8015e38:	685b      	ldr	r3, [r3, #4]
 8015e3a:	689b      	ldr	r3, [r3, #8]
 8015e3c:	68fa      	ldr	r2, [r7, #12]
 8015e3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015e42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015e4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	22ff      	movs	r2, #255	@ 0xff
 8015e50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015e54:	2300      	movs	r3, #0
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	3710      	adds	r7, #16
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}
	...

08015e60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b086      	sub	sp, #24
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015e68:	2182      	movs	r1, #130	@ 0x82
 8015e6a:	4818      	ldr	r0, [pc, #96]	@ (8015ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e6c:	f000 fd4f 	bl	801690e <USBD_GetEpDesc>
 8015e70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015e72:	2101      	movs	r1, #1
 8015e74:	4815      	ldr	r0, [pc, #84]	@ (8015ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e76:	f000 fd4a 	bl	801690e <USBD_GetEpDesc>
 8015e7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015e7c:	2181      	movs	r1, #129	@ 0x81
 8015e7e:	4813      	ldr	r0, [pc, #76]	@ (8015ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015e80:	f000 fd45 	bl	801690e <USBD_GetEpDesc>
 8015e84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d002      	beq.n	8015e92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	2210      	movs	r2, #16
 8015e90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d006      	beq.n	8015ea6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ea0:	711a      	strb	r2, [r3, #4]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d006      	beq.n	8015eba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015eb4:	711a      	strb	r2, [r3, #4]
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2243      	movs	r2, #67	@ 0x43
 8015ebe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015ec0:	4b02      	ldr	r3, [pc, #8]	@ (8015ecc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3718      	adds	r7, #24
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}
 8015eca:	bf00      	nop
 8015ecc:	24000054 	.word	0x24000054

08015ed0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b086      	sub	sp, #24
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ed8:	2182      	movs	r1, #130	@ 0x82
 8015eda:	4818      	ldr	r0, [pc, #96]	@ (8015f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015edc:	f000 fd17 	bl	801690e <USBD_GetEpDesc>
 8015ee0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015ee2:	2101      	movs	r1, #1
 8015ee4:	4815      	ldr	r0, [pc, #84]	@ (8015f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ee6:	f000 fd12 	bl	801690e <USBD_GetEpDesc>
 8015eea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015eec:	2181      	movs	r1, #129	@ 0x81
 8015eee:	4813      	ldr	r0, [pc, #76]	@ (8015f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ef0:	f000 fd0d 	bl	801690e <USBD_GetEpDesc>
 8015ef4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d002      	beq.n	8015f02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	2210      	movs	r2, #16
 8015f00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d006      	beq.n	8015f16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	711a      	strb	r2, [r3, #4]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	f042 0202 	orr.w	r2, r2, #2
 8015f14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d006      	beq.n	8015f2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	711a      	strb	r2, [r3, #4]
 8015f22:	2200      	movs	r2, #0
 8015f24:	f042 0202 	orr.w	r2, r2, #2
 8015f28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2243      	movs	r2, #67	@ 0x43
 8015f2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015f30:	4b02      	ldr	r3, [pc, #8]	@ (8015f3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	3718      	adds	r7, #24
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	bf00      	nop
 8015f3c:	24000054 	.word	0x24000054

08015f40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b086      	sub	sp, #24
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015f48:	2182      	movs	r1, #130	@ 0x82
 8015f4a:	4818      	ldr	r0, [pc, #96]	@ (8015fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f4c:	f000 fcdf 	bl	801690e <USBD_GetEpDesc>
 8015f50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015f52:	2101      	movs	r1, #1
 8015f54:	4815      	ldr	r0, [pc, #84]	@ (8015fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f56:	f000 fcda 	bl	801690e <USBD_GetEpDesc>
 8015f5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015f5c:	2181      	movs	r1, #129	@ 0x81
 8015f5e:	4813      	ldr	r0, [pc, #76]	@ (8015fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015f60:	f000 fcd5 	bl	801690e <USBD_GetEpDesc>
 8015f64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d002      	beq.n	8015f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	2210      	movs	r2, #16
 8015f70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d006      	beq.n	8015f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f80:	711a      	strb	r2, [r3, #4]
 8015f82:	2200      	movs	r2, #0
 8015f84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d006      	beq.n	8015f9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2200      	movs	r2, #0
 8015f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f94:	711a      	strb	r2, [r3, #4]
 8015f96:	2200      	movs	r2, #0
 8015f98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2243      	movs	r2, #67	@ 0x43
 8015f9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015fa0:	4b02      	ldr	r3, [pc, #8]	@ (8015fac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3718      	adds	r7, #24
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}
 8015faa:	bf00      	nop
 8015fac:	24000054 	.word	0x24000054

08015fb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	220a      	movs	r2, #10
 8015fbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015fbe:	4b03      	ldr	r3, [pc, #12]	@ (8015fcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	370c      	adds	r7, #12
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr
 8015fcc:	24000010 	.word	0x24000010

08015fd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	e009      	b.n	8015ff8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	33b0      	adds	r3, #176	@ 0xb0
 8015fee:	009b      	lsls	r3, r3, #2
 8015ff0:	4413      	add	r3, r2
 8015ff2:	683a      	ldr	r2, [r7, #0]
 8015ff4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016004:	b480      	push	{r7}
 8016006:	b087      	sub	sp, #28
 8016008:	af00      	add	r7, sp, #0
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	32b0      	adds	r2, #176	@ 0xb0
 801601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801601e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d101      	bne.n	801602a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016026:	2303      	movs	r3, #3
 8016028:	e008      	b.n	801603c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	68ba      	ldr	r2, [r7, #8]
 801602e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	687a      	ldr	r2, [r7, #4]
 8016036:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801603a:	2300      	movs	r3, #0
}
 801603c:	4618      	mov	r0, r3
 801603e:	371c      	adds	r7, #28
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr

08016048 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016048:	b480      	push	{r7}
 801604a:	b085      	sub	sp, #20
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	32b0      	adds	r2, #176	@ 0xb0
 801605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016060:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d101      	bne.n	801606c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016068:	2303      	movs	r3, #3
 801606a:	e004      	b.n	8016076 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	683a      	ldr	r2, [r7, #0]
 8016070:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016074:	2300      	movs	r3, #0
}
 8016076:	4618      	mov	r0, r3
 8016078:	3714      	adds	r7, #20
 801607a:	46bd      	mov	sp, r7
 801607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016080:	4770      	bx	lr
	...

08016084 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b084      	sub	sp, #16
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	32b0      	adds	r2, #176	@ 0xb0
 8016096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801609a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801609c:	2301      	movs	r3, #1
 801609e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80160a6:	2303      	movs	r3, #3
 80160a8:	e025      	b.n	80160f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80160aa:	68bb      	ldr	r3, [r7, #8]
 80160ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11f      	bne.n	80160f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80160b4:	68bb      	ldr	r3, [r7, #8]
 80160b6:	2201      	movs	r2, #1
 80160b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80160bc:	4b10      	ldr	r3, [pc, #64]	@ (8016100 <USBD_CDC_TransmitPacket+0x7c>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	f003 020f 	and.w	r2, r3, #15
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	4613      	mov	r3, r2
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	4413      	add	r3, r2
 80160d2:	009b      	lsls	r3, r3, #2
 80160d4:	4403      	add	r3, r0
 80160d6:	3318      	adds	r3, #24
 80160d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80160da:	4b09      	ldr	r3, [pc, #36]	@ (8016100 <USBD_CDC_TransmitPacket+0x7c>)
 80160dc:	7819      	ldrb	r1, [r3, #0]
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f001 ffef 	bl	80180ce <USBD_LL_Transmit>

    ret = USBD_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80160f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	24000097 	.word	0x24000097

08016104 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b084      	sub	sp, #16
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	32b0      	adds	r2, #176	@ 0xb0
 8016116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801611a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	32b0      	adds	r2, #176	@ 0xb0
 8016126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d101      	bne.n	8016132 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801612e:	2303      	movs	r3, #3
 8016130:	e018      	b.n	8016164 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	7c1b      	ldrb	r3, [r3, #16]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d10a      	bne.n	8016150 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801613a:	4b0c      	ldr	r3, [pc, #48]	@ (801616c <USBD_CDC_ReceivePacket+0x68>)
 801613c:	7819      	ldrb	r1, [r3, #0]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016144:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f001 ffe1 	bl	8018110 <USBD_LL_PrepareReceive>
 801614e:	e008      	b.n	8016162 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016150:	4b06      	ldr	r3, [pc, #24]	@ (801616c <USBD_CDC_ReceivePacket+0x68>)
 8016152:	7819      	ldrb	r1, [r3, #0]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801615a:	2340      	movs	r3, #64	@ 0x40
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f001 ffd7 	bl	8018110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016162:	2300      	movs	r3, #0
}
 8016164:	4618      	mov	r0, r3
 8016166:	3710      	adds	r7, #16
 8016168:	46bd      	mov	sp, r7
 801616a:	bd80      	pop	{r7, pc}
 801616c:	24000098 	.word	0x24000098

08016170 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b086      	sub	sp, #24
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	60b9      	str	r1, [r7, #8]
 801617a:	4613      	mov	r3, r2
 801617c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d101      	bne.n	8016188 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016184:	2303      	movs	r3, #3
 8016186:	e01f      	b.n	80161c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2200      	movs	r2, #0
 801618c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2200      	movs	r2, #0
 8016194:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2200      	movs	r2, #0
 801619c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d003      	beq.n	80161ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	68ba      	ldr	r2, [r7, #8]
 80161aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2201      	movs	r2, #1
 80161b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	79fa      	ldrb	r2, [r7, #7]
 80161ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f001 fe4b 	bl	8017e58 <USBD_LL_Init>
 80161c2:	4603      	mov	r3, r0
 80161c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80161c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3718      	adds	r7, #24
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd80      	pop	{r7, pc}

080161d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b084      	sub	sp, #16
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
 80161d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80161da:	2300      	movs	r3, #0
 80161dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d101      	bne.n	80161e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80161e4:	2303      	movs	r3, #3
 80161e6:	e025      	b.n	8016234 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	683a      	ldr	r2, [r7, #0]
 80161ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	32ae      	adds	r2, #174	@ 0xae
 80161fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00f      	beq.n	8016224 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	32ae      	adds	r2, #174	@ 0xae
 801620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016214:	f107 020e 	add.w	r2, r7, #14
 8016218:	4610      	mov	r0, r2
 801621a:	4798      	blx	r3
 801621c:	4602      	mov	r2, r0
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801622a:	1c5a      	adds	r2, r3, #1
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016232:	2300      	movs	r3, #0
}
 8016234:	4618      	mov	r0, r3
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}

0801623c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b082      	sub	sp, #8
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f001 fe59 	bl	8017efc <USBD_LL_Start>
 801624a:	4603      	mov	r3, r0
}
 801624c:	4618      	mov	r0, r3
 801624e:	3708      	adds	r7, #8
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016254:	b480      	push	{r7}
 8016256:	b083      	sub	sp, #12
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801625c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801625e:	4618      	mov	r0, r3
 8016260:	370c      	adds	r7, #12
 8016262:	46bd      	mov	sp, r7
 8016264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016268:	4770      	bx	lr

0801626a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801626a:	b580      	push	{r7, lr}
 801626c:	b084      	sub	sp, #16
 801626e:	af00      	add	r7, sp, #0
 8016270:	6078      	str	r0, [r7, #4]
 8016272:	460b      	mov	r3, r1
 8016274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016276:	2300      	movs	r3, #0
 8016278:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016280:	2b00      	cmp	r3, #0
 8016282:	d009      	beq.n	8016298 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	78fa      	ldrb	r2, [r7, #3]
 801628e:	4611      	mov	r1, r2
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	4798      	blx	r3
 8016294:	4603      	mov	r3, r0
 8016296:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016298:	7bfb      	ldrb	r3, [r7, #15]
}
 801629a:	4618      	mov	r0, r3
 801629c:	3710      	adds	r7, #16
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}

080162a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b084      	sub	sp, #16
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
 80162aa:	460b      	mov	r3, r1
 80162ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80162ae:	2300      	movs	r3, #0
 80162b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	78fa      	ldrb	r2, [r7, #3]
 80162bc:	4611      	mov	r1, r2
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	4798      	blx	r3
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d001      	beq.n	80162cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80162c8:	2303      	movs	r3, #3
 80162ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80162cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ce:	4618      	mov	r0, r3
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b084      	sub	sp, #16
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6078      	str	r0, [r7, #4]
 80162de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80162e6:	6839      	ldr	r1, [r7, #0]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f001 f936 	bl	801755a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2201      	movs	r2, #1
 80162f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80162fc:	461a      	mov	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801630a:	f003 031f 	and.w	r3, r3, #31
 801630e:	2b02      	cmp	r3, #2
 8016310:	d01a      	beq.n	8016348 <USBD_LL_SetupStage+0x72>
 8016312:	2b02      	cmp	r3, #2
 8016314:	d822      	bhi.n	801635c <USBD_LL_SetupStage+0x86>
 8016316:	2b00      	cmp	r3, #0
 8016318:	d002      	beq.n	8016320 <USBD_LL_SetupStage+0x4a>
 801631a:	2b01      	cmp	r3, #1
 801631c:	d00a      	beq.n	8016334 <USBD_LL_SetupStage+0x5e>
 801631e:	e01d      	b.n	801635c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016326:	4619      	mov	r1, r3
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f000 fb63 	bl	80169f4 <USBD_StdDevReq>
 801632e:	4603      	mov	r3, r0
 8016330:	73fb      	strb	r3, [r7, #15]
      break;
 8016332:	e020      	b.n	8016376 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801633a:	4619      	mov	r1, r3
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 fbcb 	bl	8016ad8 <USBD_StdItfReq>
 8016342:	4603      	mov	r3, r0
 8016344:	73fb      	strb	r3, [r7, #15]
      break;
 8016346:	e016      	b.n	8016376 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801634e:	4619      	mov	r1, r3
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f000 fc2d 	bl	8016bb0 <USBD_StdEPReq>
 8016356:	4603      	mov	r3, r0
 8016358:	73fb      	strb	r3, [r7, #15]
      break;
 801635a:	e00c      	b.n	8016376 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016362:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016366:	b2db      	uxtb	r3, r3
 8016368:	4619      	mov	r1, r3
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f001 fe26 	bl	8017fbc <USBD_LL_StallEP>
 8016370:	4603      	mov	r3, r0
 8016372:	73fb      	strb	r3, [r7, #15]
      break;
 8016374:	bf00      	nop
  }

  return ret;
 8016376:	7bfb      	ldrb	r3, [r7, #15]
}
 8016378:	4618      	mov	r0, r3
 801637a:	3710      	adds	r7, #16
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	460b      	mov	r3, r1
 801638a:	607a      	str	r2, [r7, #4]
 801638c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801638e:	2300      	movs	r3, #0
 8016390:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016392:	7afb      	ldrb	r3, [r7, #11]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d16e      	bne.n	8016476 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801639e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80163a6:	2b03      	cmp	r3, #3
 80163a8:	f040 8098 	bne.w	80164dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	689a      	ldr	r2, [r3, #8]
 80163b0:	693b      	ldr	r3, [r7, #16]
 80163b2:	68db      	ldr	r3, [r3, #12]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d913      	bls.n	80163e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	689a      	ldr	r2, [r3, #8]
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	1ad2      	subs	r2, r2, r3
 80163c2:	693b      	ldr	r3, [r7, #16]
 80163c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80163c6:	693b      	ldr	r3, [r7, #16]
 80163c8:	68da      	ldr	r2, [r3, #12]
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	689b      	ldr	r3, [r3, #8]
 80163ce:	4293      	cmp	r3, r2
 80163d0:	bf28      	it	cs
 80163d2:	4613      	movcs	r3, r2
 80163d4:	461a      	mov	r2, r3
 80163d6:	6879      	ldr	r1, [r7, #4]
 80163d8:	68f8      	ldr	r0, [r7, #12]
 80163da:	f001 f9be 	bl	801775a <USBD_CtlContinueRx>
 80163de:	e07d      	b.n	80164dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80163e6:	f003 031f 	and.w	r3, r3, #31
 80163ea:	2b02      	cmp	r3, #2
 80163ec:	d014      	beq.n	8016418 <USBD_LL_DataOutStage+0x98>
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d81d      	bhi.n	801642e <USBD_LL_DataOutStage+0xae>
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d002      	beq.n	80163fc <USBD_LL_DataOutStage+0x7c>
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d003      	beq.n	8016402 <USBD_LL_DataOutStage+0x82>
 80163fa:	e018      	b.n	801642e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80163fc:	2300      	movs	r3, #0
 80163fe:	75bb      	strb	r3, [r7, #22]
            break;
 8016400:	e018      	b.n	8016434 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016408:	b2db      	uxtb	r3, r3
 801640a:	4619      	mov	r1, r3
 801640c:	68f8      	ldr	r0, [r7, #12]
 801640e:	f000 fa64 	bl	80168da <USBD_CoreFindIF>
 8016412:	4603      	mov	r3, r0
 8016414:	75bb      	strb	r3, [r7, #22]
            break;
 8016416:	e00d      	b.n	8016434 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801641e:	b2db      	uxtb	r3, r3
 8016420:	4619      	mov	r1, r3
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f000 fa66 	bl	80168f4 <USBD_CoreFindEP>
 8016428:	4603      	mov	r3, r0
 801642a:	75bb      	strb	r3, [r7, #22]
            break;
 801642c:	e002      	b.n	8016434 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801642e:	2300      	movs	r3, #0
 8016430:	75bb      	strb	r3, [r7, #22]
            break;
 8016432:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016434:	7dbb      	ldrb	r3, [r7, #22]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d119      	bne.n	801646e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b03      	cmp	r3, #3
 8016444:	d113      	bne.n	801646e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016446:	7dba      	ldrb	r2, [r7, #22]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	32ae      	adds	r2, #174	@ 0xae
 801644c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016450:	691b      	ldr	r3, [r3, #16]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d00b      	beq.n	801646e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016456:	7dba      	ldrb	r2, [r7, #22]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801645e:	7dba      	ldrb	r2, [r7, #22]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	32ae      	adds	r2, #174	@ 0xae
 8016464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016468:	691b      	ldr	r3, [r3, #16]
 801646a:	68f8      	ldr	r0, [r7, #12]
 801646c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f001 f984 	bl	801777c <USBD_CtlSendStatus>
 8016474:	e032      	b.n	80164dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016476:	7afb      	ldrb	r3, [r7, #11]
 8016478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801647c:	b2db      	uxtb	r3, r3
 801647e:	4619      	mov	r1, r3
 8016480:	68f8      	ldr	r0, [r7, #12]
 8016482:	f000 fa37 	bl	80168f4 <USBD_CoreFindEP>
 8016486:	4603      	mov	r3, r0
 8016488:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801648a:	7dbb      	ldrb	r3, [r7, #22]
 801648c:	2bff      	cmp	r3, #255	@ 0xff
 801648e:	d025      	beq.n	80164dc <USBD_LL_DataOutStage+0x15c>
 8016490:	7dbb      	ldrb	r3, [r7, #22]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d122      	bne.n	80164dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801649c:	b2db      	uxtb	r3, r3
 801649e:	2b03      	cmp	r3, #3
 80164a0:	d117      	bne.n	80164d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80164a2:	7dba      	ldrb	r2, [r7, #22]
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	32ae      	adds	r2, #174	@ 0xae
 80164a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ac:	699b      	ldr	r3, [r3, #24]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d00f      	beq.n	80164d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80164b2:	7dba      	ldrb	r2, [r7, #22]
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80164ba:	7dba      	ldrb	r2, [r7, #22]
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	32ae      	adds	r2, #174	@ 0xae
 80164c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164c4:	699b      	ldr	r3, [r3, #24]
 80164c6:	7afa      	ldrb	r2, [r7, #11]
 80164c8:	4611      	mov	r1, r2
 80164ca:	68f8      	ldr	r0, [r7, #12]
 80164cc:	4798      	blx	r3
 80164ce:	4603      	mov	r3, r0
 80164d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80164d2:	7dfb      	ldrb	r3, [r7, #23]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80164d8:	7dfb      	ldrb	r3, [r7, #23]
 80164da:	e000      	b.n	80164de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80164dc:	2300      	movs	r3, #0
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3718      	adds	r7, #24
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80164e6:	b580      	push	{r7, lr}
 80164e8:	b086      	sub	sp, #24
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	60f8      	str	r0, [r7, #12]
 80164ee:	460b      	mov	r3, r1
 80164f0:	607a      	str	r2, [r7, #4]
 80164f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80164f4:	7afb      	ldrb	r3, [r7, #11]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d16f      	bne.n	80165da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	3314      	adds	r3, #20
 80164fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8016506:	2b02      	cmp	r3, #2
 8016508:	d15a      	bne.n	80165c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	689a      	ldr	r2, [r3, #8]
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	68db      	ldr	r3, [r3, #12]
 8016512:	429a      	cmp	r2, r3
 8016514:	d914      	bls.n	8016540 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	689a      	ldr	r2, [r3, #8]
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	1ad2      	subs	r2, r2, r3
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	689b      	ldr	r3, [r3, #8]
 8016528:	461a      	mov	r2, r3
 801652a:	6879      	ldr	r1, [r7, #4]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f001 f8e6 	bl	80176fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016532:	2300      	movs	r3, #0
 8016534:	2200      	movs	r2, #0
 8016536:	2100      	movs	r1, #0
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f001 fde9 	bl	8018110 <USBD_LL_PrepareReceive>
 801653e:	e03f      	b.n	80165c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	68da      	ldr	r2, [r3, #12]
 8016544:	693b      	ldr	r3, [r7, #16]
 8016546:	689b      	ldr	r3, [r3, #8]
 8016548:	429a      	cmp	r2, r3
 801654a:	d11c      	bne.n	8016586 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	685a      	ldr	r2, [r3, #4]
 8016550:	693b      	ldr	r3, [r7, #16]
 8016552:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016554:	429a      	cmp	r2, r3
 8016556:	d316      	bcc.n	8016586 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	685a      	ldr	r2, [r3, #4]
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016562:	429a      	cmp	r2, r3
 8016564:	d20f      	bcs.n	8016586 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016566:	2200      	movs	r2, #0
 8016568:	2100      	movs	r1, #0
 801656a:	68f8      	ldr	r0, [r7, #12]
 801656c:	f001 f8c7 	bl	80176fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	2200      	movs	r2, #0
 8016574:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016578:	2300      	movs	r3, #0
 801657a:	2200      	movs	r2, #0
 801657c:	2100      	movs	r1, #0
 801657e:	68f8      	ldr	r0, [r7, #12]
 8016580:	f001 fdc6 	bl	8018110 <USBD_LL_PrepareReceive>
 8016584:	e01c      	b.n	80165c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801658c:	b2db      	uxtb	r3, r3
 801658e:	2b03      	cmp	r3, #3
 8016590:	d10f      	bne.n	80165b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d009      	beq.n	80165b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2200      	movs	r2, #0
 80165a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80165b2:	2180      	movs	r1, #128	@ 0x80
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	f001 fd01 	bl	8017fbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80165ba:	68f8      	ldr	r0, [r7, #12]
 80165bc:	f001 f8f1 	bl	80177a2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d03a      	beq.n	8016640 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	f7ff fe42 	bl	8016254 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	2200      	movs	r2, #0
 80165d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80165d8:	e032      	b.n	8016640 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80165da:	7afb      	ldrb	r3, [r7, #11]
 80165dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80165e0:	b2db      	uxtb	r3, r3
 80165e2:	4619      	mov	r1, r3
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f000 f985 	bl	80168f4 <USBD_CoreFindEP>
 80165ea:	4603      	mov	r3, r0
 80165ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80165ee:	7dfb      	ldrb	r3, [r7, #23]
 80165f0:	2bff      	cmp	r3, #255	@ 0xff
 80165f2:	d025      	beq.n	8016640 <USBD_LL_DataInStage+0x15a>
 80165f4:	7dfb      	ldrb	r3, [r7, #23]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d122      	bne.n	8016640 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016600:	b2db      	uxtb	r3, r3
 8016602:	2b03      	cmp	r3, #3
 8016604:	d11c      	bne.n	8016640 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016606:	7dfa      	ldrb	r2, [r7, #23]
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	32ae      	adds	r2, #174	@ 0xae
 801660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016610:	695b      	ldr	r3, [r3, #20]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d014      	beq.n	8016640 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016616:	7dfa      	ldrb	r2, [r7, #23]
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801661e:	7dfa      	ldrb	r2, [r7, #23]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	32ae      	adds	r2, #174	@ 0xae
 8016624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016628:	695b      	ldr	r3, [r3, #20]
 801662a:	7afa      	ldrb	r2, [r7, #11]
 801662c:	4611      	mov	r1, r2
 801662e:	68f8      	ldr	r0, [r7, #12]
 8016630:	4798      	blx	r3
 8016632:	4603      	mov	r3, r0
 8016634:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016636:	7dbb      	ldrb	r3, [r7, #22]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d001      	beq.n	8016640 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801663c:	7dbb      	ldrb	r3, [r7, #22]
 801663e:	e000      	b.n	8016642 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016640:	2300      	movs	r3, #0
}
 8016642:	4618      	mov	r0, r3
 8016644:	3718      	adds	r7, #24
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801664a:	b580      	push	{r7, lr}
 801664c:	b084      	sub	sp, #16
 801664e:	af00      	add	r7, sp, #0
 8016650:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016652:	2300      	movs	r3, #0
 8016654:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2201      	movs	r2, #1
 801665a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2200      	movs	r2, #0
 8016662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2200      	movs	r2, #0
 801666a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2200      	movs	r2, #0
 8016670:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2200      	movs	r2, #0
 8016678:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016682:	2b00      	cmp	r3, #0
 8016684:	d014      	beq.n	80166b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d00e      	beq.n	80166b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016698:	685b      	ldr	r3, [r3, #4]
 801669a:	687a      	ldr	r2, [r7, #4]
 801669c:	6852      	ldr	r2, [r2, #4]
 801669e:	b2d2      	uxtb	r2, r2
 80166a0:	4611      	mov	r1, r2
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	4798      	blx	r3
 80166a6:	4603      	mov	r3, r0
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d001      	beq.n	80166b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80166ac:	2303      	movs	r3, #3
 80166ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80166b0:	2340      	movs	r3, #64	@ 0x40
 80166b2:	2200      	movs	r2, #0
 80166b4:	2100      	movs	r1, #0
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f001 fc3b 	bl	8017f32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2201      	movs	r2, #1
 80166c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2240      	movs	r2, #64	@ 0x40
 80166c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80166cc:	2340      	movs	r3, #64	@ 0x40
 80166ce:	2200      	movs	r2, #0
 80166d0:	2180      	movs	r1, #128	@ 0x80
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f001 fc2d 	bl	8017f32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2201      	movs	r2, #1
 80166dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2240      	movs	r2, #64	@ 0x40
 80166e2:	621a      	str	r2, [r3, #32]

  return ret;
 80166e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3710      	adds	r7, #16
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80166ee:	b480      	push	{r7}
 80166f0:	b083      	sub	sp, #12
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	6078      	str	r0, [r7, #4]
 80166f6:	460b      	mov	r3, r1
 80166f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	78fa      	ldrb	r2, [r7, #3]
 80166fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016700:	2300      	movs	r3, #0
}
 8016702:	4618      	mov	r0, r3
 8016704:	370c      	adds	r7, #12
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr

0801670e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801670e:	b480      	push	{r7}
 8016710:	b083      	sub	sp, #12
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801671c:	b2db      	uxtb	r3, r3
 801671e:	2b04      	cmp	r3, #4
 8016720:	d006      	beq.n	8016730 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016728:	b2da      	uxtb	r2, r3
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	2204      	movs	r2, #4
 8016734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	370c      	adds	r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016746:	b480      	push	{r7}
 8016748:	b083      	sub	sp, #12
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016754:	b2db      	uxtb	r3, r3
 8016756:	2b04      	cmp	r3, #4
 8016758:	d106      	bne.n	8016768 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016760:	b2da      	uxtb	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr

08016776 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b082      	sub	sp, #8
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016784:	b2db      	uxtb	r3, r3
 8016786:	2b03      	cmp	r3, #3
 8016788:	d110      	bne.n	80167ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016790:	2b00      	cmp	r3, #0
 8016792:	d00b      	beq.n	80167ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801679a:	69db      	ldr	r3, [r3, #28]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d005      	beq.n	80167ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80167a6:	69db      	ldr	r3, [r3, #28]
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80167ac:	2300      	movs	r3, #0
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3708      	adds	r7, #8
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b082      	sub	sp, #8
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
 80167be:	460b      	mov	r3, r1
 80167c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	32ae      	adds	r2, #174	@ 0xae
 80167cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d101      	bne.n	80167d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80167d4:	2303      	movs	r3, #3
 80167d6:	e01c      	b.n	8016812 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	2b03      	cmp	r3, #3
 80167e2:	d115      	bne.n	8016810 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	32ae      	adds	r2, #174	@ 0xae
 80167ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167f2:	6a1b      	ldr	r3, [r3, #32]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d00b      	beq.n	8016810 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	32ae      	adds	r2, #174	@ 0xae
 8016802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016806:	6a1b      	ldr	r3, [r3, #32]
 8016808:	78fa      	ldrb	r2, [r7, #3]
 801680a:	4611      	mov	r1, r2
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016810:	2300      	movs	r3, #0
}
 8016812:	4618      	mov	r0, r3
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}

0801681a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801681a:	b580      	push	{r7, lr}
 801681c:	b082      	sub	sp, #8
 801681e:	af00      	add	r7, sp, #0
 8016820:	6078      	str	r0, [r7, #4]
 8016822:	460b      	mov	r3, r1
 8016824:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	32ae      	adds	r2, #174	@ 0xae
 8016830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d101      	bne.n	801683c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016838:	2303      	movs	r3, #3
 801683a:	e01c      	b.n	8016876 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016842:	b2db      	uxtb	r3, r3
 8016844:	2b03      	cmp	r3, #3
 8016846:	d115      	bne.n	8016874 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	32ae      	adds	r2, #174	@ 0xae
 8016852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016858:	2b00      	cmp	r3, #0
 801685a:	d00b      	beq.n	8016874 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	32ae      	adds	r2, #174	@ 0xae
 8016866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801686c:	78fa      	ldrb	r2, [r7, #3]
 801686e:	4611      	mov	r1, r2
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016874:	2300      	movs	r3, #0
}
 8016876:	4618      	mov	r0, r3
 8016878:	3708      	adds	r7, #8
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801687e:	b480      	push	{r7}
 8016880:	b083      	sub	sp, #12
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016886:	2300      	movs	r3, #0
}
 8016888:	4618      	mov	r0, r3
 801688a:	370c      	adds	r7, #12
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr

08016894 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801689c:	2300      	movs	r3, #0
 801689e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2201      	movs	r2, #1
 80168a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d00e      	beq.n	80168d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	687a      	ldr	r2, [r7, #4]
 80168bc:	6852      	ldr	r2, [r2, #4]
 80168be:	b2d2      	uxtb	r2, r2
 80168c0:	4611      	mov	r1, r2
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	4798      	blx	r3
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80168cc:	2303      	movs	r3, #3
 80168ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80168d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3710      	adds	r7, #16
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80168da:	b480      	push	{r7}
 80168dc:	b083      	sub	sp, #12
 80168de:	af00      	add	r7, sp, #0
 80168e0:	6078      	str	r0, [r7, #4]
 80168e2:	460b      	mov	r3, r1
 80168e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80168e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr

080168f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016902:	4618      	mov	r0, r3
 8016904:	370c      	adds	r7, #12
 8016906:	46bd      	mov	sp, r7
 8016908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690c:	4770      	bx	lr

0801690e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b086      	sub	sp, #24
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
 8016916:	460b      	mov	r3, r1
 8016918:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016922:	2300      	movs	r3, #0
 8016924:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	885b      	ldrh	r3, [r3, #2]
 801692a:	b29b      	uxth	r3, r3
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	7812      	ldrb	r2, [r2, #0]
 8016930:	4293      	cmp	r3, r2
 8016932:	d91f      	bls.n	8016974 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801693a:	e013      	b.n	8016964 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801693c:	f107 030a 	add.w	r3, r7, #10
 8016940:	4619      	mov	r1, r3
 8016942:	6978      	ldr	r0, [r7, #20]
 8016944:	f000 f81b 	bl	801697e <USBD_GetNextDesc>
 8016948:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801694a:	697b      	ldr	r3, [r7, #20]
 801694c:	785b      	ldrb	r3, [r3, #1]
 801694e:	2b05      	cmp	r3, #5
 8016950:	d108      	bne.n	8016964 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	789b      	ldrb	r3, [r3, #2]
 801695a:	78fa      	ldrb	r2, [r7, #3]
 801695c:	429a      	cmp	r2, r3
 801695e:	d008      	beq.n	8016972 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016960:	2300      	movs	r3, #0
 8016962:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	885b      	ldrh	r3, [r3, #2]
 8016968:	b29a      	uxth	r2, r3
 801696a:	897b      	ldrh	r3, [r7, #10]
 801696c:	429a      	cmp	r2, r3
 801696e:	d8e5      	bhi.n	801693c <USBD_GetEpDesc+0x2e>
 8016970:	e000      	b.n	8016974 <USBD_GetEpDesc+0x66>
          break;
 8016972:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016974:	693b      	ldr	r3, [r7, #16]
}
 8016976:	4618      	mov	r0, r3
 8016978:	3718      	adds	r7, #24
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}

0801697e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801697e:	b480      	push	{r7}
 8016980:	b085      	sub	sp, #20
 8016982:	af00      	add	r7, sp, #0
 8016984:	6078      	str	r0, [r7, #4]
 8016986:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	881b      	ldrh	r3, [r3, #0]
 8016990:	68fa      	ldr	r2, [r7, #12]
 8016992:	7812      	ldrb	r2, [r2, #0]
 8016994:	4413      	add	r3, r2
 8016996:	b29a      	uxth	r2, r3
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	461a      	mov	r2, r3
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	4413      	add	r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80169a8:	68fb      	ldr	r3, [r7, #12]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3714      	adds	r7, #20
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr

080169b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80169b6:	b480      	push	{r7}
 80169b8:	b087      	sub	sp, #28
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	3301      	adds	r3, #1
 80169cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	781b      	ldrb	r3, [r3, #0]
 80169d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80169d4:	8a3b      	ldrh	r3, [r7, #16]
 80169d6:	021b      	lsls	r3, r3, #8
 80169d8:	b21a      	sxth	r2, r3
 80169da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80169de:	4313      	orrs	r3, r2
 80169e0:	b21b      	sxth	r3, r3
 80169e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80169e4:	89fb      	ldrh	r3, [r7, #14]
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	371c      	adds	r7, #28
 80169ea:	46bd      	mov	sp, r7
 80169ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f0:	4770      	bx	lr
	...

080169f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b084      	sub	sp, #16
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80169fe:	2300      	movs	r3, #0
 8016a00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a02:	683b      	ldr	r3, [r7, #0]
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a0a:	2b40      	cmp	r3, #64	@ 0x40
 8016a0c:	d005      	beq.n	8016a1a <USBD_StdDevReq+0x26>
 8016a0e:	2b40      	cmp	r3, #64	@ 0x40
 8016a10:	d857      	bhi.n	8016ac2 <USBD_StdDevReq+0xce>
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00f      	beq.n	8016a36 <USBD_StdDevReq+0x42>
 8016a16:	2b20      	cmp	r3, #32
 8016a18:	d153      	bne.n	8016ac2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	32ae      	adds	r2, #174	@ 0xae
 8016a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a28:	689b      	ldr	r3, [r3, #8]
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	4798      	blx	r3
 8016a30:	4603      	mov	r3, r0
 8016a32:	73fb      	strb	r3, [r7, #15]
      break;
 8016a34:	e04a      	b.n	8016acc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	785b      	ldrb	r3, [r3, #1]
 8016a3a:	2b09      	cmp	r3, #9
 8016a3c:	d83b      	bhi.n	8016ab6 <USBD_StdDevReq+0xc2>
 8016a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8016a44 <USBD_StdDevReq+0x50>)
 8016a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a44:	08016a99 	.word	0x08016a99
 8016a48:	08016aad 	.word	0x08016aad
 8016a4c:	08016ab7 	.word	0x08016ab7
 8016a50:	08016aa3 	.word	0x08016aa3
 8016a54:	08016ab7 	.word	0x08016ab7
 8016a58:	08016a77 	.word	0x08016a77
 8016a5c:	08016a6d 	.word	0x08016a6d
 8016a60:	08016ab7 	.word	0x08016ab7
 8016a64:	08016a8f 	.word	0x08016a8f
 8016a68:	08016a81 	.word	0x08016a81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016a6c:	6839      	ldr	r1, [r7, #0]
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f000 fa3c 	bl	8016eec <USBD_GetDescriptor>
          break;
 8016a74:	e024      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016a76:	6839      	ldr	r1, [r7, #0]
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f000 fbcb 	bl	8017214 <USBD_SetAddress>
          break;
 8016a7e:	e01f      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016a80:	6839      	ldr	r1, [r7, #0]
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f000 fc0a 	bl	801729c <USBD_SetConfig>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	73fb      	strb	r3, [r7, #15]
          break;
 8016a8c:	e018      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016a8e:	6839      	ldr	r1, [r7, #0]
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f000 fcad 	bl	80173f0 <USBD_GetConfig>
          break;
 8016a96:	e013      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016a98:	6839      	ldr	r1, [r7, #0]
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f000 fcde 	bl	801745c <USBD_GetStatus>
          break;
 8016aa0:	e00e      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016aa2:	6839      	ldr	r1, [r7, #0]
 8016aa4:	6878      	ldr	r0, [r7, #4]
 8016aa6:	f000 fd0d 	bl	80174c4 <USBD_SetFeature>
          break;
 8016aaa:	e009      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016aac:	6839      	ldr	r1, [r7, #0]
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 fd31 	bl	8017516 <USBD_ClrFeature>
          break;
 8016ab4:	e004      	b.n	8016ac0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016ab6:	6839      	ldr	r1, [r7, #0]
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f000 fd88 	bl	80175ce <USBD_CtlError>
          break;
 8016abe:	bf00      	nop
      }
      break;
 8016ac0:	e004      	b.n	8016acc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016ac2:	6839      	ldr	r1, [r7, #0]
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f000 fd82 	bl	80175ce <USBD_CtlError>
      break;
 8016aca:	bf00      	nop
  }

  return ret;
 8016acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	3710      	adds	r7, #16
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop

08016ad8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	781b      	ldrb	r3, [r3, #0]
 8016aea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016aee:	2b40      	cmp	r3, #64	@ 0x40
 8016af0:	d005      	beq.n	8016afe <USBD_StdItfReq+0x26>
 8016af2:	2b40      	cmp	r3, #64	@ 0x40
 8016af4:	d852      	bhi.n	8016b9c <USBD_StdItfReq+0xc4>
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d001      	beq.n	8016afe <USBD_StdItfReq+0x26>
 8016afa:	2b20      	cmp	r3, #32
 8016afc:	d14e      	bne.n	8016b9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b04:	b2db      	uxtb	r3, r3
 8016b06:	3b01      	subs	r3, #1
 8016b08:	2b02      	cmp	r3, #2
 8016b0a:	d840      	bhi.n	8016b8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	889b      	ldrh	r3, [r3, #4]
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	2b01      	cmp	r3, #1
 8016b14:	d836      	bhi.n	8016b84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016b16:	683b      	ldr	r3, [r7, #0]
 8016b18:	889b      	ldrh	r3, [r3, #4]
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f7ff fedb 	bl	80168da <USBD_CoreFindIF>
 8016b24:	4603      	mov	r3, r0
 8016b26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016b28:	7bbb      	ldrb	r3, [r7, #14]
 8016b2a:	2bff      	cmp	r3, #255	@ 0xff
 8016b2c:	d01d      	beq.n	8016b6a <USBD_StdItfReq+0x92>
 8016b2e:	7bbb      	ldrb	r3, [r7, #14]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d11a      	bne.n	8016b6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016b34:	7bba      	ldrb	r2, [r7, #14]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	32ae      	adds	r2, #174	@ 0xae
 8016b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b3e:	689b      	ldr	r3, [r3, #8]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d00f      	beq.n	8016b64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016b44:	7bba      	ldrb	r2, [r7, #14]
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b4c:	7bba      	ldrb	r2, [r7, #14]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	32ae      	adds	r2, #174	@ 0xae
 8016b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b56:	689b      	ldr	r3, [r3, #8]
 8016b58:	6839      	ldr	r1, [r7, #0]
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	4798      	blx	r3
 8016b5e:	4603      	mov	r3, r0
 8016b60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b62:	e004      	b.n	8016b6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016b64:	2303      	movs	r3, #3
 8016b66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016b68:	e001      	b.n	8016b6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016b6a:	2303      	movs	r3, #3
 8016b6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	88db      	ldrh	r3, [r3, #6]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d110      	bne.n	8016b98 <USBD_StdItfReq+0xc0>
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10d      	bne.n	8016b98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f000 fdfd 	bl	801777c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016b82:	e009      	b.n	8016b98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016b84:	6839      	ldr	r1, [r7, #0]
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f000 fd21 	bl	80175ce <USBD_CtlError>
          break;
 8016b8c:	e004      	b.n	8016b98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016b8e:	6839      	ldr	r1, [r7, #0]
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f000 fd1c 	bl	80175ce <USBD_CtlError>
          break;
 8016b96:	e000      	b.n	8016b9a <USBD_StdItfReq+0xc2>
          break;
 8016b98:	bf00      	nop
      }
      break;
 8016b9a:	e004      	b.n	8016ba6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016b9c:	6839      	ldr	r1, [r7, #0]
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	f000 fd15 	bl	80175ce <USBD_CtlError>
      break;
 8016ba4:	bf00      	nop
  }

  return ret;
 8016ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3710      	adds	r7, #16
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	889b      	ldrh	r3, [r3, #4]
 8016bc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016bcc:	2b40      	cmp	r3, #64	@ 0x40
 8016bce:	d007      	beq.n	8016be0 <USBD_StdEPReq+0x30>
 8016bd0:	2b40      	cmp	r3, #64	@ 0x40
 8016bd2:	f200 817f 	bhi.w	8016ed4 <USBD_StdEPReq+0x324>
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d02a      	beq.n	8016c30 <USBD_StdEPReq+0x80>
 8016bda:	2b20      	cmp	r3, #32
 8016bdc:	f040 817a 	bne.w	8016ed4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016be0:	7bbb      	ldrb	r3, [r7, #14]
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7ff fe85 	bl	80168f4 <USBD_CoreFindEP>
 8016bea:	4603      	mov	r3, r0
 8016bec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016bee:	7b7b      	ldrb	r3, [r7, #13]
 8016bf0:	2bff      	cmp	r3, #255	@ 0xff
 8016bf2:	f000 8174 	beq.w	8016ede <USBD_StdEPReq+0x32e>
 8016bf6:	7b7b      	ldrb	r3, [r7, #13]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f040 8170 	bne.w	8016ede <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016bfe:	7b7a      	ldrb	r2, [r7, #13]
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016c06:	7b7a      	ldrb	r2, [r7, #13]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	32ae      	adds	r2, #174	@ 0xae
 8016c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c10:	689b      	ldr	r3, [r3, #8]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	f000 8163 	beq.w	8016ede <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016c18:	7b7a      	ldrb	r2, [r7, #13]
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	32ae      	adds	r2, #174	@ 0xae
 8016c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c22:	689b      	ldr	r3, [r3, #8]
 8016c24:	6839      	ldr	r1, [r7, #0]
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	4798      	blx	r3
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016c2e:	e156      	b.n	8016ede <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	785b      	ldrb	r3, [r3, #1]
 8016c34:	2b03      	cmp	r3, #3
 8016c36:	d008      	beq.n	8016c4a <USBD_StdEPReq+0x9a>
 8016c38:	2b03      	cmp	r3, #3
 8016c3a:	f300 8145 	bgt.w	8016ec8 <USBD_StdEPReq+0x318>
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	f000 809b 	beq.w	8016d7a <USBD_StdEPReq+0x1ca>
 8016c44:	2b01      	cmp	r3, #1
 8016c46:	d03c      	beq.n	8016cc2 <USBD_StdEPReq+0x112>
 8016c48:	e13e      	b.n	8016ec8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	2b02      	cmp	r3, #2
 8016c54:	d002      	beq.n	8016c5c <USBD_StdEPReq+0xac>
 8016c56:	2b03      	cmp	r3, #3
 8016c58:	d016      	beq.n	8016c88 <USBD_StdEPReq+0xd8>
 8016c5a:	e02c      	b.n	8016cb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016c5c:	7bbb      	ldrb	r3, [r7, #14]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d00d      	beq.n	8016c7e <USBD_StdEPReq+0xce>
 8016c62:	7bbb      	ldrb	r3, [r7, #14]
 8016c64:	2b80      	cmp	r3, #128	@ 0x80
 8016c66:	d00a      	beq.n	8016c7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016c68:	7bbb      	ldrb	r3, [r7, #14]
 8016c6a:	4619      	mov	r1, r3
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f001 f9a5 	bl	8017fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c72:	2180      	movs	r1, #128	@ 0x80
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f001 f9a1 	bl	8017fbc <USBD_LL_StallEP>
 8016c7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016c7c:	e020      	b.n	8016cc0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f000 fca4 	bl	80175ce <USBD_CtlError>
              break;
 8016c86:	e01b      	b.n	8016cc0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	885b      	ldrh	r3, [r3, #2]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d10e      	bne.n	8016cae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016c90:	7bbb      	ldrb	r3, [r7, #14]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d00b      	beq.n	8016cae <USBD_StdEPReq+0xfe>
 8016c96:	7bbb      	ldrb	r3, [r7, #14]
 8016c98:	2b80      	cmp	r3, #128	@ 0x80
 8016c9a:	d008      	beq.n	8016cae <USBD_StdEPReq+0xfe>
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	88db      	ldrh	r3, [r3, #6]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d104      	bne.n	8016cae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ca4:	7bbb      	ldrb	r3, [r7, #14]
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f001 f987 	bl	8017fbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	f000 fd64 	bl	801777c <USBD_CtlSendStatus>

              break;
 8016cb4:	e004      	b.n	8016cc0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016cb6:	6839      	ldr	r1, [r7, #0]
 8016cb8:	6878      	ldr	r0, [r7, #4]
 8016cba:	f000 fc88 	bl	80175ce <USBD_CtlError>
              break;
 8016cbe:	bf00      	nop
          }
          break;
 8016cc0:	e107      	b.n	8016ed2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d002      	beq.n	8016cd4 <USBD_StdEPReq+0x124>
 8016cce:	2b03      	cmp	r3, #3
 8016cd0:	d016      	beq.n	8016d00 <USBD_StdEPReq+0x150>
 8016cd2:	e04b      	b.n	8016d6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016cd4:	7bbb      	ldrb	r3, [r7, #14]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d00d      	beq.n	8016cf6 <USBD_StdEPReq+0x146>
 8016cda:	7bbb      	ldrb	r3, [r7, #14]
 8016cdc:	2b80      	cmp	r3, #128	@ 0x80
 8016cde:	d00a      	beq.n	8016cf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ce0:	7bbb      	ldrb	r3, [r7, #14]
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f001 f969 	bl	8017fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016cea:	2180      	movs	r1, #128	@ 0x80
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	f001 f965 	bl	8017fbc <USBD_LL_StallEP>
 8016cf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016cf4:	e040      	b.n	8016d78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016cf6:	6839      	ldr	r1, [r7, #0]
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f000 fc68 	bl	80175ce <USBD_CtlError>
              break;
 8016cfe:	e03b      	b.n	8016d78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	885b      	ldrh	r3, [r3, #2]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d136      	bne.n	8016d76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016d08:	7bbb      	ldrb	r3, [r7, #14]
 8016d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016d12:	7bbb      	ldrb	r3, [r7, #14]
 8016d14:	4619      	mov	r1, r3
 8016d16:	6878      	ldr	r0, [r7, #4]
 8016d18:	f001 f96f 	bl	8017ffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f000 fd2d 	bl	801777c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016d22:	7bbb      	ldrb	r3, [r7, #14]
 8016d24:	4619      	mov	r1, r3
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f7ff fde4 	bl	80168f4 <USBD_CoreFindEP>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016d30:	7b7b      	ldrb	r3, [r7, #13]
 8016d32:	2bff      	cmp	r3, #255	@ 0xff
 8016d34:	d01f      	beq.n	8016d76 <USBD_StdEPReq+0x1c6>
 8016d36:	7b7b      	ldrb	r3, [r7, #13]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d11c      	bne.n	8016d76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016d3c:	7b7a      	ldrb	r2, [r7, #13]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016d44:	7b7a      	ldrb	r2, [r7, #13]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	32ae      	adds	r2, #174	@ 0xae
 8016d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d4e:	689b      	ldr	r3, [r3, #8]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d010      	beq.n	8016d76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016d54:	7b7a      	ldrb	r2, [r7, #13]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	32ae      	adds	r2, #174	@ 0xae
 8016d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d5e:	689b      	ldr	r3, [r3, #8]
 8016d60:	6839      	ldr	r1, [r7, #0]
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	4798      	blx	r3
 8016d66:	4603      	mov	r3, r0
 8016d68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016d6a:	e004      	b.n	8016d76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 fc2d 	bl	80175ce <USBD_CtlError>
              break;
 8016d74:	e000      	b.n	8016d78 <USBD_StdEPReq+0x1c8>
              break;
 8016d76:	bf00      	nop
          }
          break;
 8016d78:	e0ab      	b.n	8016ed2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	2b02      	cmp	r3, #2
 8016d84:	d002      	beq.n	8016d8c <USBD_StdEPReq+0x1dc>
 8016d86:	2b03      	cmp	r3, #3
 8016d88:	d032      	beq.n	8016df0 <USBD_StdEPReq+0x240>
 8016d8a:	e097      	b.n	8016ebc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016d8c:	7bbb      	ldrb	r3, [r7, #14]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d007      	beq.n	8016da2 <USBD_StdEPReq+0x1f2>
 8016d92:	7bbb      	ldrb	r3, [r7, #14]
 8016d94:	2b80      	cmp	r3, #128	@ 0x80
 8016d96:	d004      	beq.n	8016da2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016d98:	6839      	ldr	r1, [r7, #0]
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f000 fc17 	bl	80175ce <USBD_CtlError>
                break;
 8016da0:	e091      	b.n	8016ec6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	da0b      	bge.n	8016dc2 <USBD_StdEPReq+0x212>
 8016daa:	7bbb      	ldrb	r3, [r7, #14]
 8016dac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016db0:	4613      	mov	r3, r2
 8016db2:	009b      	lsls	r3, r3, #2
 8016db4:	4413      	add	r3, r2
 8016db6:	009b      	lsls	r3, r3, #2
 8016db8:	3310      	adds	r3, #16
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	4413      	add	r3, r2
 8016dbe:	3304      	adds	r3, #4
 8016dc0:	e00b      	b.n	8016dda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016dc2:	7bbb      	ldrb	r3, [r7, #14]
 8016dc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016dc8:	4613      	mov	r3, r2
 8016dca:	009b      	lsls	r3, r3, #2
 8016dcc:	4413      	add	r3, r2
 8016dce:	009b      	lsls	r3, r3, #2
 8016dd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016dd4:	687a      	ldr	r2, [r7, #4]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	3304      	adds	r3, #4
 8016dda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	2200      	movs	r2, #0
 8016de0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	2202      	movs	r2, #2
 8016de6:	4619      	mov	r1, r3
 8016de8:	6878      	ldr	r0, [r7, #4]
 8016dea:	f000 fc6d 	bl	80176c8 <USBD_CtlSendData>
              break;
 8016dee:	e06a      	b.n	8016ec6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016df0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	da11      	bge.n	8016e1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016df8:	7bbb      	ldrb	r3, [r7, #14]
 8016dfa:	f003 020f 	and.w	r2, r3, #15
 8016dfe:	6879      	ldr	r1, [r7, #4]
 8016e00:	4613      	mov	r3, r2
 8016e02:	009b      	lsls	r3, r3, #2
 8016e04:	4413      	add	r3, r2
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	440b      	add	r3, r1
 8016e0a:	3324      	adds	r3, #36	@ 0x24
 8016e0c:	881b      	ldrh	r3, [r3, #0]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d117      	bne.n	8016e42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016e12:	6839      	ldr	r1, [r7, #0]
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f000 fbda 	bl	80175ce <USBD_CtlError>
                  break;
 8016e1a:	e054      	b.n	8016ec6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016e1c:	7bbb      	ldrb	r3, [r7, #14]
 8016e1e:	f003 020f 	and.w	r2, r3, #15
 8016e22:	6879      	ldr	r1, [r7, #4]
 8016e24:	4613      	mov	r3, r2
 8016e26:	009b      	lsls	r3, r3, #2
 8016e28:	4413      	add	r3, r2
 8016e2a:	009b      	lsls	r3, r3, #2
 8016e2c:	440b      	add	r3, r1
 8016e2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d104      	bne.n	8016e42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016e38:	6839      	ldr	r1, [r7, #0]
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 fbc7 	bl	80175ce <USBD_CtlError>
                  break;
 8016e40:	e041      	b.n	8016ec6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	da0b      	bge.n	8016e62 <USBD_StdEPReq+0x2b2>
 8016e4a:	7bbb      	ldrb	r3, [r7, #14]
 8016e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016e50:	4613      	mov	r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	4413      	add	r3, r2
 8016e56:	009b      	lsls	r3, r3, #2
 8016e58:	3310      	adds	r3, #16
 8016e5a:	687a      	ldr	r2, [r7, #4]
 8016e5c:	4413      	add	r3, r2
 8016e5e:	3304      	adds	r3, #4
 8016e60:	e00b      	b.n	8016e7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016e62:	7bbb      	ldrb	r3, [r7, #14]
 8016e64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016e68:	4613      	mov	r3, r2
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	4413      	add	r3, r2
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	4413      	add	r3, r2
 8016e78:	3304      	adds	r3, #4
 8016e7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016e7c:	7bbb      	ldrb	r3, [r7, #14]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d002      	beq.n	8016e88 <USBD_StdEPReq+0x2d8>
 8016e82:	7bbb      	ldrb	r3, [r7, #14]
 8016e84:	2b80      	cmp	r3, #128	@ 0x80
 8016e86:	d103      	bne.n	8016e90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	601a      	str	r2, [r3, #0]
 8016e8e:	e00e      	b.n	8016eae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016e90:	7bbb      	ldrb	r3, [r7, #14]
 8016e92:	4619      	mov	r1, r3
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f001 f8cf 	bl	8018038 <USBD_LL_IsStallEP>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d003      	beq.n	8016ea8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	601a      	str	r2, [r3, #0]
 8016ea6:	e002      	b.n	8016eae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	2200      	movs	r2, #0
 8016eac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	2202      	movs	r2, #2
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f000 fc07 	bl	80176c8 <USBD_CtlSendData>
              break;
 8016eba:	e004      	b.n	8016ec6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016ebc:	6839      	ldr	r1, [r7, #0]
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f000 fb85 	bl	80175ce <USBD_CtlError>
              break;
 8016ec4:	bf00      	nop
          }
          break;
 8016ec6:	e004      	b.n	8016ed2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f000 fb7f 	bl	80175ce <USBD_CtlError>
          break;
 8016ed0:	bf00      	nop
      }
      break;
 8016ed2:	e005      	b.n	8016ee0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016ed4:	6839      	ldr	r1, [r7, #0]
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f000 fb79 	bl	80175ce <USBD_CtlError>
      break;
 8016edc:	e000      	b.n	8016ee0 <USBD_StdEPReq+0x330>
      break;
 8016ede:	bf00      	nop
  }

  return ret;
 8016ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
	...

08016eec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016efa:	2300      	movs	r3, #0
 8016efc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016efe:	2300      	movs	r3, #0
 8016f00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	885b      	ldrh	r3, [r3, #2]
 8016f06:	0a1b      	lsrs	r3, r3, #8
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	2b0e      	cmp	r3, #14
 8016f0e:	f200 8152 	bhi.w	80171b6 <USBD_GetDescriptor+0x2ca>
 8016f12:	a201      	add	r2, pc, #4	@ (adr r2, 8016f18 <USBD_GetDescriptor+0x2c>)
 8016f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f18:	08016f89 	.word	0x08016f89
 8016f1c:	08016fa1 	.word	0x08016fa1
 8016f20:	08016fe1 	.word	0x08016fe1
 8016f24:	080171b7 	.word	0x080171b7
 8016f28:	080171b7 	.word	0x080171b7
 8016f2c:	08017157 	.word	0x08017157
 8016f30:	08017183 	.word	0x08017183
 8016f34:	080171b7 	.word	0x080171b7
 8016f38:	080171b7 	.word	0x080171b7
 8016f3c:	080171b7 	.word	0x080171b7
 8016f40:	080171b7 	.word	0x080171b7
 8016f44:	080171b7 	.word	0x080171b7
 8016f48:	080171b7 	.word	0x080171b7
 8016f4c:	080171b7 	.word	0x080171b7
 8016f50:	08016f55 	.word	0x08016f55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f5a:	69db      	ldr	r3, [r3, #28]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d00b      	beq.n	8016f78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f66:	69db      	ldr	r3, [r3, #28]
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	7c12      	ldrb	r2, [r2, #16]
 8016f6c:	f107 0108 	add.w	r1, r7, #8
 8016f70:	4610      	mov	r0, r2
 8016f72:	4798      	blx	r3
 8016f74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f76:	e126      	b.n	80171c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016f78:	6839      	ldr	r1, [r7, #0]
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f000 fb27 	bl	80175ce <USBD_CtlError>
        err++;
 8016f80:	7afb      	ldrb	r3, [r7, #11]
 8016f82:	3301      	adds	r3, #1
 8016f84:	72fb      	strb	r3, [r7, #11]
      break;
 8016f86:	e11e      	b.n	80171c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	7c12      	ldrb	r2, [r2, #16]
 8016f94:	f107 0108 	add.w	r1, r7, #8
 8016f98:	4610      	mov	r0, r2
 8016f9a:	4798      	blx	r3
 8016f9c:	60f8      	str	r0, [r7, #12]
      break;
 8016f9e:	e112      	b.n	80171c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	7c1b      	ldrb	r3, [r3, #16]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d10d      	bne.n	8016fc4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fb0:	f107 0208 	add.w	r2, r7, #8
 8016fb4:	4610      	mov	r0, r2
 8016fb6:	4798      	blx	r3
 8016fb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	3301      	adds	r3, #1
 8016fbe:	2202      	movs	r2, #2
 8016fc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016fc2:	e100      	b.n	80171c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016fcc:	f107 0208 	add.w	r2, r7, #8
 8016fd0:	4610      	mov	r0, r2
 8016fd2:	4798      	blx	r3
 8016fd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	3301      	adds	r3, #1
 8016fda:	2202      	movs	r2, #2
 8016fdc:	701a      	strb	r2, [r3, #0]
      break;
 8016fde:	e0f2      	b.n	80171c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	885b      	ldrh	r3, [r3, #2]
 8016fe4:	b2db      	uxtb	r3, r3
 8016fe6:	2b05      	cmp	r3, #5
 8016fe8:	f200 80ac 	bhi.w	8017144 <USBD_GetDescriptor+0x258>
 8016fec:	a201      	add	r2, pc, #4	@ (adr r2, 8016ff4 <USBD_GetDescriptor+0x108>)
 8016fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ff2:	bf00      	nop
 8016ff4:	0801700d 	.word	0x0801700d
 8016ff8:	08017041 	.word	0x08017041
 8016ffc:	08017075 	.word	0x08017075
 8017000:	080170a9 	.word	0x080170a9
 8017004:	080170dd 	.word	0x080170dd
 8017008:	08017111 	.word	0x08017111
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017012:	685b      	ldr	r3, [r3, #4]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d00b      	beq.n	8017030 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	7c12      	ldrb	r2, [r2, #16]
 8017024:	f107 0108 	add.w	r1, r7, #8
 8017028:	4610      	mov	r0, r2
 801702a:	4798      	blx	r3
 801702c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801702e:	e091      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017030:	6839      	ldr	r1, [r7, #0]
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 facb 	bl	80175ce <USBD_CtlError>
            err++;
 8017038:	7afb      	ldrb	r3, [r7, #11]
 801703a:	3301      	adds	r3, #1
 801703c:	72fb      	strb	r3, [r7, #11]
          break;
 801703e:	e089      	b.n	8017154 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d00b      	beq.n	8017064 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017052:	689b      	ldr	r3, [r3, #8]
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	7c12      	ldrb	r2, [r2, #16]
 8017058:	f107 0108 	add.w	r1, r7, #8
 801705c:	4610      	mov	r0, r2
 801705e:	4798      	blx	r3
 8017060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017062:	e077      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017064:	6839      	ldr	r1, [r7, #0]
 8017066:	6878      	ldr	r0, [r7, #4]
 8017068:	f000 fab1 	bl	80175ce <USBD_CtlError>
            err++;
 801706c:	7afb      	ldrb	r3, [r7, #11]
 801706e:	3301      	adds	r3, #1
 8017070:	72fb      	strb	r3, [r7, #11]
          break;
 8017072:	e06f      	b.n	8017154 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801707a:	68db      	ldr	r3, [r3, #12]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d00b      	beq.n	8017098 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017086:	68db      	ldr	r3, [r3, #12]
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	7c12      	ldrb	r2, [r2, #16]
 801708c:	f107 0108 	add.w	r1, r7, #8
 8017090:	4610      	mov	r0, r2
 8017092:	4798      	blx	r3
 8017094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017096:	e05d      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017098:	6839      	ldr	r1, [r7, #0]
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f000 fa97 	bl	80175ce <USBD_CtlError>
            err++;
 80170a0:	7afb      	ldrb	r3, [r7, #11]
 80170a2:	3301      	adds	r3, #1
 80170a4:	72fb      	strb	r3, [r7, #11]
          break;
 80170a6:	e055      	b.n	8017154 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ae:	691b      	ldr	r3, [r3, #16]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d00b      	beq.n	80170cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ba:	691b      	ldr	r3, [r3, #16]
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	7c12      	ldrb	r2, [r2, #16]
 80170c0:	f107 0108 	add.w	r1, r7, #8
 80170c4:	4610      	mov	r0, r2
 80170c6:	4798      	blx	r3
 80170c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170ca:	e043      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80170cc:	6839      	ldr	r1, [r7, #0]
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f000 fa7d 	bl	80175ce <USBD_CtlError>
            err++;
 80170d4:	7afb      	ldrb	r3, [r7, #11]
 80170d6:	3301      	adds	r3, #1
 80170d8:	72fb      	strb	r3, [r7, #11]
          break;
 80170da:	e03b      	b.n	8017154 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170e2:	695b      	ldr	r3, [r3, #20]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d00b      	beq.n	8017100 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80170ee:	695b      	ldr	r3, [r3, #20]
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	7c12      	ldrb	r2, [r2, #16]
 80170f4:	f107 0108 	add.w	r1, r7, #8
 80170f8:	4610      	mov	r0, r2
 80170fa:	4798      	blx	r3
 80170fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80170fe:	e029      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017100:	6839      	ldr	r1, [r7, #0]
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f000 fa63 	bl	80175ce <USBD_CtlError>
            err++;
 8017108:	7afb      	ldrb	r3, [r7, #11]
 801710a:	3301      	adds	r3, #1
 801710c:	72fb      	strb	r3, [r7, #11]
          break;
 801710e:	e021      	b.n	8017154 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017116:	699b      	ldr	r3, [r3, #24]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d00b      	beq.n	8017134 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017122:	699b      	ldr	r3, [r3, #24]
 8017124:	687a      	ldr	r2, [r7, #4]
 8017126:	7c12      	ldrb	r2, [r2, #16]
 8017128:	f107 0108 	add.w	r1, r7, #8
 801712c:	4610      	mov	r0, r2
 801712e:	4798      	blx	r3
 8017130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017132:	e00f      	b.n	8017154 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017134:	6839      	ldr	r1, [r7, #0]
 8017136:	6878      	ldr	r0, [r7, #4]
 8017138:	f000 fa49 	bl	80175ce <USBD_CtlError>
            err++;
 801713c:	7afb      	ldrb	r3, [r7, #11]
 801713e:	3301      	adds	r3, #1
 8017140:	72fb      	strb	r3, [r7, #11]
          break;
 8017142:	e007      	b.n	8017154 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 fa41 	bl	80175ce <USBD_CtlError>
          err++;
 801714c:	7afb      	ldrb	r3, [r7, #11]
 801714e:	3301      	adds	r3, #1
 8017150:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017152:	bf00      	nop
      }
      break;
 8017154:	e037      	b.n	80171c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	7c1b      	ldrb	r3, [r3, #16]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d109      	bne.n	8017172 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017166:	f107 0208 	add.w	r2, r7, #8
 801716a:	4610      	mov	r0, r2
 801716c:	4798      	blx	r3
 801716e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017170:	e029      	b.n	80171c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017172:	6839      	ldr	r1, [r7, #0]
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f000 fa2a 	bl	80175ce <USBD_CtlError>
        err++;
 801717a:	7afb      	ldrb	r3, [r7, #11]
 801717c:	3301      	adds	r3, #1
 801717e:	72fb      	strb	r3, [r7, #11]
      break;
 8017180:	e021      	b.n	80171c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	7c1b      	ldrb	r3, [r3, #16]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d10d      	bne.n	80171a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017192:	f107 0208 	add.w	r2, r7, #8
 8017196:	4610      	mov	r0, r2
 8017198:	4798      	blx	r3
 801719a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	3301      	adds	r3, #1
 80171a0:	2207      	movs	r2, #7
 80171a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80171a4:	e00f      	b.n	80171c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80171a6:	6839      	ldr	r1, [r7, #0]
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f000 fa10 	bl	80175ce <USBD_CtlError>
        err++;
 80171ae:	7afb      	ldrb	r3, [r7, #11]
 80171b0:	3301      	adds	r3, #1
 80171b2:	72fb      	strb	r3, [r7, #11]
      break;
 80171b4:	e007      	b.n	80171c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80171b6:	6839      	ldr	r1, [r7, #0]
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f000 fa08 	bl	80175ce <USBD_CtlError>
      err++;
 80171be:	7afb      	ldrb	r3, [r7, #11]
 80171c0:	3301      	adds	r3, #1
 80171c2:	72fb      	strb	r3, [r7, #11]
      break;
 80171c4:	bf00      	nop
  }

  if (err != 0U)
 80171c6:	7afb      	ldrb	r3, [r7, #11]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d11e      	bne.n	801720a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80171cc:	683b      	ldr	r3, [r7, #0]
 80171ce:	88db      	ldrh	r3, [r3, #6]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d016      	beq.n	8017202 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80171d4:	893b      	ldrh	r3, [r7, #8]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d00e      	beq.n	80171f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	88da      	ldrh	r2, [r3, #6]
 80171de:	893b      	ldrh	r3, [r7, #8]
 80171e0:	4293      	cmp	r3, r2
 80171e2:	bf28      	it	cs
 80171e4:	4613      	movcs	r3, r2
 80171e6:	b29b      	uxth	r3, r3
 80171e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80171ea:	893b      	ldrh	r3, [r7, #8]
 80171ec:	461a      	mov	r2, r3
 80171ee:	68f9      	ldr	r1, [r7, #12]
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f000 fa69 	bl	80176c8 <USBD_CtlSendData>
 80171f6:	e009      	b.n	801720c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80171f8:	6839      	ldr	r1, [r7, #0]
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 f9e7 	bl	80175ce <USBD_CtlError>
 8017200:	e004      	b.n	801720c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f000 faba 	bl	801777c <USBD_CtlSendStatus>
 8017208:	e000      	b.n	801720c <USBD_GetDescriptor+0x320>
    return;
 801720a:	bf00      	nop
  }
}
 801720c:	3710      	adds	r7, #16
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop

08017214 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b084      	sub	sp, #16
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	889b      	ldrh	r3, [r3, #4]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d131      	bne.n	801728a <USBD_SetAddress+0x76>
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	88db      	ldrh	r3, [r3, #6]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d12d      	bne.n	801728a <USBD_SetAddress+0x76>
 801722e:	683b      	ldr	r3, [r7, #0]
 8017230:	885b      	ldrh	r3, [r3, #2]
 8017232:	2b7f      	cmp	r3, #127	@ 0x7f
 8017234:	d829      	bhi.n	801728a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	885b      	ldrh	r3, [r3, #2]
 801723a:	b2db      	uxtb	r3, r3
 801723c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b03      	cmp	r3, #3
 801724c:	d104      	bne.n	8017258 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801724e:	6839      	ldr	r1, [r7, #0]
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f000 f9bc 	bl	80175ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017256:	e01d      	b.n	8017294 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	7bfa      	ldrb	r2, [r7, #15]
 801725c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017260:	7bfb      	ldrb	r3, [r7, #15]
 8017262:	4619      	mov	r1, r3
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f000 ff13 	bl	8018090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801726a:	6878      	ldr	r0, [r7, #4]
 801726c:	f000 fa86 	bl	801777c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017270:	7bfb      	ldrb	r3, [r7, #15]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d004      	beq.n	8017280 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	2202      	movs	r2, #2
 801727a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801727e:	e009      	b.n	8017294 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	2201      	movs	r2, #1
 8017284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017288:	e004      	b.n	8017294 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801728a:	6839      	ldr	r1, [r7, #0]
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f000 f99e 	bl	80175ce <USBD_CtlError>
  }
}
 8017292:	bf00      	nop
 8017294:	bf00      	nop
 8017296:	3710      	adds	r7, #16
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}

0801729c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b084      	sub	sp, #16
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80172a6:	2300      	movs	r3, #0
 80172a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	885b      	ldrh	r3, [r3, #2]
 80172ae:	b2da      	uxtb	r2, r3
 80172b0:	4b4e      	ldr	r3, [pc, #312]	@ (80173ec <USBD_SetConfig+0x150>)
 80172b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80172b4:	4b4d      	ldr	r3, [pc, #308]	@ (80173ec <USBD_SetConfig+0x150>)
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	2b01      	cmp	r3, #1
 80172ba:	d905      	bls.n	80172c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80172bc:	6839      	ldr	r1, [r7, #0]
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f000 f985 	bl	80175ce <USBD_CtlError>
    return USBD_FAIL;
 80172c4:	2303      	movs	r3, #3
 80172c6:	e08c      	b.n	80173e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	2b02      	cmp	r3, #2
 80172d2:	d002      	beq.n	80172da <USBD_SetConfig+0x3e>
 80172d4:	2b03      	cmp	r3, #3
 80172d6:	d029      	beq.n	801732c <USBD_SetConfig+0x90>
 80172d8:	e075      	b.n	80173c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80172da:	4b44      	ldr	r3, [pc, #272]	@ (80173ec <USBD_SetConfig+0x150>)
 80172dc:	781b      	ldrb	r3, [r3, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d020      	beq.n	8017324 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80172e2:	4b42      	ldr	r3, [pc, #264]	@ (80173ec <USBD_SetConfig+0x150>)
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80172ec:	4b3f      	ldr	r3, [pc, #252]	@ (80173ec <USBD_SetConfig+0x150>)
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	4619      	mov	r1, r3
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7fe ffb9 	bl	801626a <USBD_SetClassConfig>
 80172f8:	4603      	mov	r3, r0
 80172fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80172fc:	7bfb      	ldrb	r3, [r7, #15]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d008      	beq.n	8017314 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017302:	6839      	ldr	r1, [r7, #0]
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f000 f962 	bl	80175ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2202      	movs	r2, #2
 801730e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017312:	e065      	b.n	80173e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	f000 fa31 	bl	801777c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2203      	movs	r2, #3
 801731e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017322:	e05d      	b.n	80173e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017324:	6878      	ldr	r0, [r7, #4]
 8017326:	f000 fa29 	bl	801777c <USBD_CtlSendStatus>
      break;
 801732a:	e059      	b.n	80173e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801732c:	4b2f      	ldr	r3, [pc, #188]	@ (80173ec <USBD_SetConfig+0x150>)
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d112      	bne.n	801735a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2202      	movs	r2, #2
 8017338:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801733c:	4b2b      	ldr	r3, [pc, #172]	@ (80173ec <USBD_SetConfig+0x150>)
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	461a      	mov	r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017346:	4b29      	ldr	r3, [pc, #164]	@ (80173ec <USBD_SetConfig+0x150>)
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	4619      	mov	r1, r3
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7fe ffa8 	bl	80162a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f000 fa12 	bl	801777c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017358:	e042      	b.n	80173e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801735a:	4b24      	ldr	r3, [pc, #144]	@ (80173ec <USBD_SetConfig+0x150>)
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	461a      	mov	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	429a      	cmp	r2, r3
 8017366:	d02a      	beq.n	80173be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	b2db      	uxtb	r3, r3
 801736e:	4619      	mov	r1, r3
 8017370:	6878      	ldr	r0, [r7, #4]
 8017372:	f7fe ff96 	bl	80162a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017376:	4b1d      	ldr	r3, [pc, #116]	@ (80173ec <USBD_SetConfig+0x150>)
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	461a      	mov	r2, r3
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017380:	4b1a      	ldr	r3, [pc, #104]	@ (80173ec <USBD_SetConfig+0x150>)
 8017382:	781b      	ldrb	r3, [r3, #0]
 8017384:	4619      	mov	r1, r3
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f7fe ff6f 	bl	801626a <USBD_SetClassConfig>
 801738c:	4603      	mov	r3, r0
 801738e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017390:	7bfb      	ldrb	r3, [r7, #15]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d00f      	beq.n	80173b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017396:	6839      	ldr	r1, [r7, #0]
 8017398:	6878      	ldr	r0, [r7, #4]
 801739a:	f000 f918 	bl	80175ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	4619      	mov	r1, r3
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f7fe ff7b 	bl	80162a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2202      	movs	r2, #2
 80173b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80173b4:	e014      	b.n	80173e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f000 f9e0 	bl	801777c <USBD_CtlSendStatus>
      break;
 80173bc:	e010      	b.n	80173e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 f9dc 	bl	801777c <USBD_CtlSendStatus>
      break;
 80173c4:	e00c      	b.n	80173e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80173c6:	6839      	ldr	r1, [r7, #0]
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 f900 	bl	80175ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80173ce:	4b07      	ldr	r3, [pc, #28]	@ (80173ec <USBD_SetConfig+0x150>)
 80173d0:	781b      	ldrb	r3, [r3, #0]
 80173d2:	4619      	mov	r1, r3
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f7fe ff64 	bl	80162a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80173da:	2303      	movs	r3, #3
 80173dc:	73fb      	strb	r3, [r7, #15]
      break;
 80173de:	bf00      	nop
  }

  return ret;
 80173e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	3710      	adds	r7, #16
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	2400463c 	.word	0x2400463c

080173f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	88db      	ldrh	r3, [r3, #6]
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d004      	beq.n	801740c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017402:	6839      	ldr	r1, [r7, #0]
 8017404:	6878      	ldr	r0, [r7, #4]
 8017406:	f000 f8e2 	bl	80175ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801740a:	e023      	b.n	8017454 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017412:	b2db      	uxtb	r3, r3
 8017414:	2b02      	cmp	r3, #2
 8017416:	dc02      	bgt.n	801741e <USBD_GetConfig+0x2e>
 8017418:	2b00      	cmp	r3, #0
 801741a:	dc03      	bgt.n	8017424 <USBD_GetConfig+0x34>
 801741c:	e015      	b.n	801744a <USBD_GetConfig+0x5a>
 801741e:	2b03      	cmp	r3, #3
 8017420:	d00b      	beq.n	801743a <USBD_GetConfig+0x4a>
 8017422:	e012      	b.n	801744a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2200      	movs	r2, #0
 8017428:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	3308      	adds	r3, #8
 801742e:	2201      	movs	r2, #1
 8017430:	4619      	mov	r1, r3
 8017432:	6878      	ldr	r0, [r7, #4]
 8017434:	f000 f948 	bl	80176c8 <USBD_CtlSendData>
        break;
 8017438:	e00c      	b.n	8017454 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	3304      	adds	r3, #4
 801743e:	2201      	movs	r2, #1
 8017440:	4619      	mov	r1, r3
 8017442:	6878      	ldr	r0, [r7, #4]
 8017444:	f000 f940 	bl	80176c8 <USBD_CtlSendData>
        break;
 8017448:	e004      	b.n	8017454 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801744a:	6839      	ldr	r1, [r7, #0]
 801744c:	6878      	ldr	r0, [r7, #4]
 801744e:	f000 f8be 	bl	80175ce <USBD_CtlError>
        break;
 8017452:	bf00      	nop
}
 8017454:	bf00      	nop
 8017456:	3708      	adds	r7, #8
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}

0801745c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801746c:	b2db      	uxtb	r3, r3
 801746e:	3b01      	subs	r3, #1
 8017470:	2b02      	cmp	r3, #2
 8017472:	d81e      	bhi.n	80174b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	88db      	ldrh	r3, [r3, #6]
 8017478:	2b02      	cmp	r3, #2
 801747a:	d004      	beq.n	8017486 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801747c:	6839      	ldr	r1, [r7, #0]
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 f8a5 	bl	80175ce <USBD_CtlError>
        break;
 8017484:	e01a      	b.n	80174bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	2201      	movs	r2, #1
 801748a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017492:	2b00      	cmp	r3, #0
 8017494:	d005      	beq.n	80174a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	f043 0202 	orr.w	r2, r3, #2
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	330c      	adds	r3, #12
 80174a6:	2202      	movs	r2, #2
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f000 f90c 	bl	80176c8 <USBD_CtlSendData>
      break;
 80174b0:	e004      	b.n	80174bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80174b2:	6839      	ldr	r1, [r7, #0]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f000 f88a 	bl	80175ce <USBD_CtlError>
      break;
 80174ba:	bf00      	nop
  }
}
 80174bc:	bf00      	nop
 80174be:	3708      	adds	r7, #8
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	885b      	ldrh	r3, [r3, #2]
 80174d2:	2b01      	cmp	r3, #1
 80174d4:	d107      	bne.n	80174e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2201      	movs	r2, #1
 80174da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f000 f94c 	bl	801777c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80174e4:	e013      	b.n	801750e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80174e6:	683b      	ldr	r3, [r7, #0]
 80174e8:	885b      	ldrh	r3, [r3, #2]
 80174ea:	2b02      	cmp	r3, #2
 80174ec:	d10b      	bne.n	8017506 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	889b      	ldrh	r3, [r3, #4]
 80174f2:	0a1b      	lsrs	r3, r3, #8
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	b2da      	uxtb	r2, r3
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f000 f93c 	bl	801777c <USBD_CtlSendStatus>
}
 8017504:	e003      	b.n	801750e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017506:	6839      	ldr	r1, [r7, #0]
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f000 f860 	bl	80175ce <USBD_CtlError>
}
 801750e:	bf00      	nop
 8017510:	3708      	adds	r7, #8
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017516:	b580      	push	{r7, lr}
 8017518:	b082      	sub	sp, #8
 801751a:	af00      	add	r7, sp, #0
 801751c:	6078      	str	r0, [r7, #4]
 801751e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017526:	b2db      	uxtb	r3, r3
 8017528:	3b01      	subs	r3, #1
 801752a:	2b02      	cmp	r3, #2
 801752c:	d80b      	bhi.n	8017546 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	885b      	ldrh	r3, [r3, #2]
 8017532:	2b01      	cmp	r3, #1
 8017534:	d10c      	bne.n	8017550 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2200      	movs	r2, #0
 801753a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f000 f91c 	bl	801777c <USBD_CtlSendStatus>
      }
      break;
 8017544:	e004      	b.n	8017550 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017546:	6839      	ldr	r1, [r7, #0]
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f000 f840 	bl	80175ce <USBD_CtlError>
      break;
 801754e:	e000      	b.n	8017552 <USBD_ClrFeature+0x3c>
      break;
 8017550:	bf00      	nop
  }
}
 8017552:	bf00      	nop
 8017554:	3708      	adds	r7, #8
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b084      	sub	sp, #16
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
 8017562:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	781a      	ldrb	r2, [r3, #0]
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	3301      	adds	r3, #1
 8017574:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	781a      	ldrb	r2, [r3, #0]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	3301      	adds	r3, #1
 8017582:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f7ff fa16 	bl	80169b6 <SWAPBYTE>
 801758a:	4603      	mov	r3, r0
 801758c:	461a      	mov	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	3301      	adds	r3, #1
 8017596:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	3301      	adds	r3, #1
 801759c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff fa09 	bl	80169b6 <SWAPBYTE>
 80175a4:	4603      	mov	r3, r0
 80175a6:	461a      	mov	r2, r3
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	3301      	adds	r3, #1
 80175b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	3301      	adds	r3, #1
 80175b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	f7ff f9fc 	bl	80169b6 <SWAPBYTE>
 80175be:	4603      	mov	r3, r0
 80175c0:	461a      	mov	r2, r3
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	80da      	strh	r2, [r3, #6]
}
 80175c6:	bf00      	nop
 80175c8:	3710      	adds	r7, #16
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}

080175ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175ce:	b580      	push	{r7, lr}
 80175d0:	b082      	sub	sp, #8
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
 80175d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80175d8:	2180      	movs	r1, #128	@ 0x80
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 fcee 	bl	8017fbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80175e0:	2100      	movs	r1, #0
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f000 fcea 	bl	8017fbc <USBD_LL_StallEP>
}
 80175e8:	bf00      	nop
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b086      	sub	sp, #24
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80175fc:	2300      	movs	r3, #0
 80175fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d042      	beq.n	801768c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801760a:	6938      	ldr	r0, [r7, #16]
 801760c:	f000 f842 	bl	8017694 <USBD_GetLen>
 8017610:	4603      	mov	r3, r0
 8017612:	3301      	adds	r3, #1
 8017614:	005b      	lsls	r3, r3, #1
 8017616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801761a:	d808      	bhi.n	801762e <USBD_GetString+0x3e>
 801761c:	6938      	ldr	r0, [r7, #16]
 801761e:	f000 f839 	bl	8017694 <USBD_GetLen>
 8017622:	4603      	mov	r3, r0
 8017624:	3301      	adds	r3, #1
 8017626:	b29b      	uxth	r3, r3
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	b29a      	uxth	r2, r3
 801762c:	e001      	b.n	8017632 <USBD_GetString+0x42>
 801762e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017636:	7dfb      	ldrb	r3, [r7, #23]
 8017638:	68ba      	ldr	r2, [r7, #8]
 801763a:	4413      	add	r3, r2
 801763c:	687a      	ldr	r2, [r7, #4]
 801763e:	7812      	ldrb	r2, [r2, #0]
 8017640:	701a      	strb	r2, [r3, #0]
  idx++;
 8017642:	7dfb      	ldrb	r3, [r7, #23]
 8017644:	3301      	adds	r3, #1
 8017646:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017648:	7dfb      	ldrb	r3, [r7, #23]
 801764a:	68ba      	ldr	r2, [r7, #8]
 801764c:	4413      	add	r3, r2
 801764e:	2203      	movs	r2, #3
 8017650:	701a      	strb	r2, [r3, #0]
  idx++;
 8017652:	7dfb      	ldrb	r3, [r7, #23]
 8017654:	3301      	adds	r3, #1
 8017656:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017658:	e013      	b.n	8017682 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801765a:	7dfb      	ldrb	r3, [r7, #23]
 801765c:	68ba      	ldr	r2, [r7, #8]
 801765e:	4413      	add	r3, r2
 8017660:	693a      	ldr	r2, [r7, #16]
 8017662:	7812      	ldrb	r2, [r2, #0]
 8017664:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	3301      	adds	r3, #1
 801766a:	613b      	str	r3, [r7, #16]
    idx++;
 801766c:	7dfb      	ldrb	r3, [r7, #23]
 801766e:	3301      	adds	r3, #1
 8017670:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017672:	7dfb      	ldrb	r3, [r7, #23]
 8017674:	68ba      	ldr	r2, [r7, #8]
 8017676:	4413      	add	r3, r2
 8017678:	2200      	movs	r2, #0
 801767a:	701a      	strb	r2, [r3, #0]
    idx++;
 801767c:	7dfb      	ldrb	r3, [r7, #23]
 801767e:	3301      	adds	r3, #1
 8017680:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017682:	693b      	ldr	r3, [r7, #16]
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d1e7      	bne.n	801765a <USBD_GetString+0x6a>
 801768a:	e000      	b.n	801768e <USBD_GetString+0x9e>
    return;
 801768c:	bf00      	nop
  }
}
 801768e:	3718      	adds	r7, #24
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}

08017694 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017694:	b480      	push	{r7}
 8017696:	b085      	sub	sp, #20
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801769c:	2300      	movs	r3, #0
 801769e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80176a4:	e005      	b.n	80176b2 <USBD_GetLen+0x1e>
  {
    len++;
 80176a6:	7bfb      	ldrb	r3, [r7, #15]
 80176a8:	3301      	adds	r3, #1
 80176aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	3301      	adds	r3, #1
 80176b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1f5      	bne.n	80176a6 <USBD_GetLen+0x12>
  }

  return len;
 80176ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3714      	adds	r7, #20
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr

080176c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	60f8      	str	r0, [r7, #12]
 80176d0:	60b9      	str	r1, [r7, #8]
 80176d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	2202      	movs	r2, #2
 80176d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	687a      	ldr	r2, [r7, #4]
 80176e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	68ba      	ldr	r2, [r7, #8]
 80176ec:	2100      	movs	r1, #0
 80176ee:	68f8      	ldr	r0, [r7, #12]
 80176f0:	f000 fced 	bl	80180ce <USBD_LL_Transmit>

  return USBD_OK;
 80176f4:	2300      	movs	r3, #0
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}

080176fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80176fe:	b580      	push	{r7, lr}
 8017700:	b084      	sub	sp, #16
 8017702:	af00      	add	r7, sp, #0
 8017704:	60f8      	str	r0, [r7, #12]
 8017706:	60b9      	str	r1, [r7, #8]
 8017708:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	2100      	movs	r1, #0
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	f000 fcdc 	bl	80180ce <USBD_LL_Transmit>

  return USBD_OK;
 8017716:	2300      	movs	r3, #0
}
 8017718:	4618      	mov	r0, r3
 801771a:	3710      	adds	r7, #16
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}

08017720 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b084      	sub	sp, #16
 8017724:	af00      	add	r7, sp, #0
 8017726:	60f8      	str	r0, [r7, #12]
 8017728:	60b9      	str	r1, [r7, #8]
 801772a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2203      	movs	r2, #3
 8017730:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	687a      	ldr	r2, [r7, #4]
 8017738:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	68ba      	ldr	r2, [r7, #8]
 8017748:	2100      	movs	r1, #0
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f000 fce0 	bl	8018110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017750:	2300      	movs	r3, #0
}
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b084      	sub	sp, #16
 801775e:	af00      	add	r7, sp, #0
 8017760:	60f8      	str	r0, [r7, #12]
 8017762:	60b9      	str	r1, [r7, #8]
 8017764:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	68ba      	ldr	r2, [r7, #8]
 801776a:	2100      	movs	r1, #0
 801776c:	68f8      	ldr	r0, [r7, #12]
 801776e:	f000 fccf 	bl	8018110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017772:	2300      	movs	r3, #0
}
 8017774:	4618      	mov	r0, r3
 8017776:	3710      	adds	r7, #16
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}

0801777c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b082      	sub	sp, #8
 8017780:	af00      	add	r7, sp, #0
 8017782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2204      	movs	r2, #4
 8017788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801778c:	2300      	movs	r3, #0
 801778e:	2200      	movs	r2, #0
 8017790:	2100      	movs	r1, #0
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f000 fc9b 	bl	80180ce <USBD_LL_Transmit>

  return USBD_OK;
 8017798:	2300      	movs	r3, #0
}
 801779a:	4618      	mov	r0, r3
 801779c:	3708      	adds	r7, #8
 801779e:	46bd      	mov	sp, r7
 80177a0:	bd80      	pop	{r7, pc}

080177a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80177a2:	b580      	push	{r7, lr}
 80177a4:	b082      	sub	sp, #8
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2205      	movs	r2, #5
 80177ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80177b2:	2300      	movs	r3, #0
 80177b4:	2200      	movs	r2, #0
 80177b6:	2100      	movs	r1, #0
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f000 fca9 	bl	8018110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80177be:	2300      	movs	r3, #0
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3708      	adds	r7, #8
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80177cc:	2201      	movs	r2, #1
 80177ce:	4913      	ldr	r1, [pc, #76]	@ (801781c <MX_USB_DEVICE_Init+0x54>)
 80177d0:	4813      	ldr	r0, [pc, #76]	@ (8017820 <MX_USB_DEVICE_Init+0x58>)
 80177d2:	f7fe fccd 	bl	8016170 <USBD_Init>
 80177d6:	4603      	mov	r3, r0
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d001      	beq.n	80177e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80177dc:	f7ea fca4 	bl	8002128 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80177e0:	4910      	ldr	r1, [pc, #64]	@ (8017824 <MX_USB_DEVICE_Init+0x5c>)
 80177e2:	480f      	ldr	r0, [pc, #60]	@ (8017820 <MX_USB_DEVICE_Init+0x58>)
 80177e4:	f7fe fcf4 	bl	80161d0 <USBD_RegisterClass>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d001      	beq.n	80177f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80177ee:	f7ea fc9b 	bl	8002128 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80177f2:	490d      	ldr	r1, [pc, #52]	@ (8017828 <MX_USB_DEVICE_Init+0x60>)
 80177f4:	480a      	ldr	r0, [pc, #40]	@ (8017820 <MX_USB_DEVICE_Init+0x58>)
 80177f6:	f7fe fbeb 	bl	8015fd0 <USBD_CDC_RegisterInterface>
 80177fa:	4603      	mov	r3, r0
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d001      	beq.n	8017804 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017800:	f7ea fc92 	bl	8002128 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017804:	4806      	ldr	r0, [pc, #24]	@ (8017820 <MX_USB_DEVICE_Init+0x58>)
 8017806:	f7fe fd19 	bl	801623c <USBD_Start>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d001      	beq.n	8017814 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017810:	f7ea fc8a 	bl	8002128 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017814:	f7f5 f94c 	bl	800cab0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017818:	bf00      	nop
 801781a:	bd80      	pop	{r7, pc}
 801781c:	240000b0 	.word	0x240000b0
 8017820:	24004640 	.word	0x24004640
 8017824:	2400001c 	.word	0x2400001c
 8017828:	2400009c 	.word	0x2400009c

0801782c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8017830:	2200      	movs	r2, #0
 8017832:	4905      	ldr	r1, [pc, #20]	@ (8017848 <CDC_Init_HS+0x1c>)
 8017834:	4805      	ldr	r0, [pc, #20]	@ (801784c <CDC_Init_HS+0x20>)
 8017836:	f7fe fbe5 	bl	8016004 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801783a:	4905      	ldr	r1, [pc, #20]	@ (8017850 <CDC_Init_HS+0x24>)
 801783c:	4803      	ldr	r0, [pc, #12]	@ (801784c <CDC_Init_HS+0x20>)
 801783e:	f7fe fc03 	bl	8016048 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017842:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017844:	4618      	mov	r0, r3
 8017846:	bd80      	pop	{r7, pc}
 8017848:	2400511c 	.word	0x2400511c
 801784c:	24004640 	.word	0x24004640
 8017850:	2400491c 	.word	0x2400491c

08017854 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8017854:	b480      	push	{r7}
 8017856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017858:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801785a:	4618      	mov	r0, r3
 801785c:	46bd      	mov	sp, r7
 801785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017862:	4770      	bx	lr

08017864 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017864:	b480      	push	{r7}
 8017866:	b083      	sub	sp, #12
 8017868:	af00      	add	r7, sp, #0
 801786a:	4603      	mov	r3, r0
 801786c:	6039      	str	r1, [r7, #0]
 801786e:	71fb      	strb	r3, [r7, #7]
 8017870:	4613      	mov	r3, r2
 8017872:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8017874:	79fb      	ldrb	r3, [r7, #7]
 8017876:	2b23      	cmp	r3, #35	@ 0x23
 8017878:	d84a      	bhi.n	8017910 <CDC_Control_HS+0xac>
 801787a:	a201      	add	r2, pc, #4	@ (adr r2, 8017880 <CDC_Control_HS+0x1c>)
 801787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017880:	08017911 	.word	0x08017911
 8017884:	08017911 	.word	0x08017911
 8017888:	08017911 	.word	0x08017911
 801788c:	08017911 	.word	0x08017911
 8017890:	08017911 	.word	0x08017911
 8017894:	08017911 	.word	0x08017911
 8017898:	08017911 	.word	0x08017911
 801789c:	08017911 	.word	0x08017911
 80178a0:	08017911 	.word	0x08017911
 80178a4:	08017911 	.word	0x08017911
 80178a8:	08017911 	.word	0x08017911
 80178ac:	08017911 	.word	0x08017911
 80178b0:	08017911 	.word	0x08017911
 80178b4:	08017911 	.word	0x08017911
 80178b8:	08017911 	.word	0x08017911
 80178bc:	08017911 	.word	0x08017911
 80178c0:	08017911 	.word	0x08017911
 80178c4:	08017911 	.word	0x08017911
 80178c8:	08017911 	.word	0x08017911
 80178cc:	08017911 	.word	0x08017911
 80178d0:	08017911 	.word	0x08017911
 80178d4:	08017911 	.word	0x08017911
 80178d8:	08017911 	.word	0x08017911
 80178dc:	08017911 	.word	0x08017911
 80178e0:	08017911 	.word	0x08017911
 80178e4:	08017911 	.word	0x08017911
 80178e8:	08017911 	.word	0x08017911
 80178ec:	08017911 	.word	0x08017911
 80178f0:	08017911 	.word	0x08017911
 80178f4:	08017911 	.word	0x08017911
 80178f8:	08017911 	.word	0x08017911
 80178fc:	08017911 	.word	0x08017911
 8017900:	08017911 	.word	0x08017911
 8017904:	08017911 	.word	0x08017911
 8017908:	08017911 	.word	0x08017911
 801790c:	08017911 	.word	0x08017911
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017910:	bf00      	nop
  }

  return (USBD_OK);
 8017912:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8017914:	4618      	mov	r0, r3
 8017916:	370c      	adds	r7, #12
 8017918:	46bd      	mov	sp, r7
 801791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791e:	4770      	bx	lr

08017920 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801792a:	6879      	ldr	r1, [r7, #4]
 801792c:	4808      	ldr	r0, [pc, #32]	@ (8017950 <CDC_Receive_HS+0x30>)
 801792e:	f7fe fb8b 	bl	8016048 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8017932:	4807      	ldr	r0, [pc, #28]	@ (8017950 <CDC_Receive_HS+0x30>)
 8017934:	f7fe fbe6 	bl	8016104 <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	461a      	mov	r2, r3
 801793e:	6879      	ldr	r1, [r7, #4]
 8017940:	4804      	ldr	r0, [pc, #16]	@ (8017954 <CDC_Receive_HS+0x34>)
 8017942:	f7ed fc27 	bl	8005194 <VibeCheckShell_PutInput>

	return (USBD_OK);
 8017946:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017948:	4618      	mov	r0, r3
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	24004640 	.word	0x24004640
 8017954:	24000988 	.word	0x24000988

08017958 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	460b      	mov	r3, r1
 8017962:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017964:	2300      	movs	r3, #0
 8017966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8017968:	4b0d      	ldr	r3, [pc, #52]	@ (80179a0 <CDC_Transmit_HS+0x48>)
 801796a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801796e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017976:	2b00      	cmp	r3, #0
 8017978:	d001      	beq.n	801797e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801797a:	2301      	movs	r3, #1
 801797c:	e00b      	b.n	8017996 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801797e:	887b      	ldrh	r3, [r7, #2]
 8017980:	461a      	mov	r2, r3
 8017982:	6879      	ldr	r1, [r7, #4]
 8017984:	4806      	ldr	r0, [pc, #24]	@ (80179a0 <CDC_Transmit_HS+0x48>)
 8017986:	f7fe fb3d 	bl	8016004 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801798a:	4805      	ldr	r0, [pc, #20]	@ (80179a0 <CDC_Transmit_HS+0x48>)
 801798c:	f7fe fb7a 	bl	8016084 <USBD_CDC_TransmitPacket>
 8017990:	4603      	mov	r3, r0
 8017992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8017994:	7bfb      	ldrb	r3, [r7, #15]
}
 8017996:	4618      	mov	r0, r3
 8017998:	3710      	adds	r7, #16
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}
 801799e:	bf00      	nop
 80179a0:	24004640 	.word	0x24004640

080179a4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80179a4:	b480      	push	{r7}
 80179a6:	b087      	sub	sp, #28
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	4613      	mov	r3, r2
 80179b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80179b2:	2300      	movs	r3, #0
 80179b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80179b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	371c      	adds	r7, #28
 80179be:	46bd      	mov	sp, r7
 80179c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c4:	4770      	bx	lr
	...

080179c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179c8:	b480      	push	{r7}
 80179ca:	b083      	sub	sp, #12
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	4603      	mov	r3, r0
 80179d0:	6039      	str	r1, [r7, #0]
 80179d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	2212      	movs	r2, #18
 80179d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80179da:	4b03      	ldr	r3, [pc, #12]	@ (80179e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80179dc:	4618      	mov	r0, r3
 80179de:	370c      	adds	r7, #12
 80179e0:	46bd      	mov	sp, r7
 80179e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e6:	4770      	bx	lr
 80179e8:	240000d0 	.word	0x240000d0

080179ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179ec:	b480      	push	{r7}
 80179ee:	b083      	sub	sp, #12
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	4603      	mov	r3, r0
 80179f4:	6039      	str	r1, [r7, #0]
 80179f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	2204      	movs	r2, #4
 80179fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80179fe:	4b03      	ldr	r3, [pc, #12]	@ (8017a0c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	370c      	adds	r7, #12
 8017a04:	46bd      	mov	sp, r7
 8017a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0a:	4770      	bx	lr
 8017a0c:	240000e4 	.word	0x240000e4

08017a10 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	4603      	mov	r3, r0
 8017a18:	6039      	str	r1, [r7, #0]
 8017a1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017a1c:	79fb      	ldrb	r3, [r7, #7]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d105      	bne.n	8017a2e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017a22:	683a      	ldr	r2, [r7, #0]
 8017a24:	4907      	ldr	r1, [pc, #28]	@ (8017a44 <USBD_HS_ProductStrDescriptor+0x34>)
 8017a26:	4808      	ldr	r0, [pc, #32]	@ (8017a48 <USBD_HS_ProductStrDescriptor+0x38>)
 8017a28:	f7ff fde2 	bl	80175f0 <USBD_GetString>
 8017a2c:	e004      	b.n	8017a38 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017a2e:	683a      	ldr	r2, [r7, #0]
 8017a30:	4904      	ldr	r1, [pc, #16]	@ (8017a44 <USBD_HS_ProductStrDescriptor+0x34>)
 8017a32:	4805      	ldr	r0, [pc, #20]	@ (8017a48 <USBD_HS_ProductStrDescriptor+0x38>)
 8017a34:	f7ff fddc 	bl	80175f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a38:	4b02      	ldr	r3, [pc, #8]	@ (8017a44 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3708      	adds	r7, #8
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	2400591c 	.word	0x2400591c
 8017a48:	0801d284 	.word	0x0801d284

08017a4c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	4603      	mov	r3, r0
 8017a54:	6039      	str	r1, [r7, #0]
 8017a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017a58:	683a      	ldr	r2, [r7, #0]
 8017a5a:	4904      	ldr	r1, [pc, #16]	@ (8017a6c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017a5c:	4804      	ldr	r0, [pc, #16]	@ (8017a70 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017a5e:	f7ff fdc7 	bl	80175f0 <USBD_GetString>
  return USBD_StrDesc;
 8017a62:	4b02      	ldr	r3, [pc, #8]	@ (8017a6c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3708      	adds	r7, #8
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	2400591c 	.word	0x2400591c
 8017a70:	0801d290 	.word	0x0801d290

08017a74 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	6039      	str	r1, [r7, #0]
 8017a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	221a      	movs	r2, #26
 8017a84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017a86:	f000 f843 	bl	8017b10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017a8a:	4b02      	ldr	r3, [pc, #8]	@ (8017a94 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}
 8017a94:	240000e8 	.word	0x240000e8

08017a98 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	6039      	str	r1, [r7, #0]
 8017aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017aa4:	79fb      	ldrb	r3, [r7, #7]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d105      	bne.n	8017ab6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017aaa:	683a      	ldr	r2, [r7, #0]
 8017aac:	4907      	ldr	r1, [pc, #28]	@ (8017acc <USBD_HS_ConfigStrDescriptor+0x34>)
 8017aae:	4808      	ldr	r0, [pc, #32]	@ (8017ad0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017ab0:	f7ff fd9e 	bl	80175f0 <USBD_GetString>
 8017ab4:	e004      	b.n	8017ac0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017ab6:	683a      	ldr	r2, [r7, #0]
 8017ab8:	4904      	ldr	r1, [pc, #16]	@ (8017acc <USBD_HS_ConfigStrDescriptor+0x34>)
 8017aba:	4805      	ldr	r0, [pc, #20]	@ (8017ad0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017abc:	f7ff fd98 	bl	80175f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ac0:	4b02      	ldr	r3, [pc, #8]	@ (8017acc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3708      	adds	r7, #8
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd80      	pop	{r7, pc}
 8017aca:	bf00      	nop
 8017acc:	2400591c 	.word	0x2400591c
 8017ad0:	0801d29c 	.word	0x0801d29c

08017ad4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	4603      	mov	r3, r0
 8017adc:	6039      	str	r1, [r7, #0]
 8017ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ae0:	79fb      	ldrb	r3, [r7, #7]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d105      	bne.n	8017af2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017ae6:	683a      	ldr	r2, [r7, #0]
 8017ae8:	4907      	ldr	r1, [pc, #28]	@ (8017b08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017aea:	4808      	ldr	r0, [pc, #32]	@ (8017b0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017aec:	f7ff fd80 	bl	80175f0 <USBD_GetString>
 8017af0:	e004      	b.n	8017afc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	4904      	ldr	r1, [pc, #16]	@ (8017b08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017af6:	4805      	ldr	r0, [pc, #20]	@ (8017b0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017af8:	f7ff fd7a 	bl	80175f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017afc:	4b02      	ldr	r3, [pc, #8]	@ (8017b08 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3708      	adds	r7, #8
 8017b02:	46bd      	mov	sp, r7
 8017b04:	bd80      	pop	{r7, pc}
 8017b06:	bf00      	nop
 8017b08:	2400591c 	.word	0x2400591c
 8017b0c:	0801d2a8 	.word	0x0801d2a8

08017b10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017b16:	4b0f      	ldr	r3, [pc, #60]	@ (8017b54 <Get_SerialNum+0x44>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8017b58 <Get_SerialNum+0x48>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017b22:	4b0e      	ldr	r3, [pc, #56]	@ (8017b5c <Get_SerialNum+0x4c>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017b28:	68fa      	ldr	r2, [r7, #12]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d009      	beq.n	8017b4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017b36:	2208      	movs	r2, #8
 8017b38:	4909      	ldr	r1, [pc, #36]	@ (8017b60 <Get_SerialNum+0x50>)
 8017b3a:	68f8      	ldr	r0, [r7, #12]
 8017b3c:	f000 f814 	bl	8017b68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017b40:	2204      	movs	r2, #4
 8017b42:	4908      	ldr	r1, [pc, #32]	@ (8017b64 <Get_SerialNum+0x54>)
 8017b44:	68b8      	ldr	r0, [r7, #8]
 8017b46:	f000 f80f 	bl	8017b68 <IntToUnicode>
  }
}
 8017b4a:	bf00      	nop
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}
 8017b52:	bf00      	nop
 8017b54:	1ff1e800 	.word	0x1ff1e800
 8017b58:	1ff1e804 	.word	0x1ff1e804
 8017b5c:	1ff1e808 	.word	0x1ff1e808
 8017b60:	240000ea 	.word	0x240000ea
 8017b64:	240000fa 	.word	0x240000fa

08017b68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b087      	sub	sp, #28
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	4613      	mov	r3, r2
 8017b74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017b76:	2300      	movs	r3, #0
 8017b78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	75fb      	strb	r3, [r7, #23]
 8017b7e:	e027      	b.n	8017bd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	0f1b      	lsrs	r3, r3, #28
 8017b84:	2b09      	cmp	r3, #9
 8017b86:	d80b      	bhi.n	8017ba0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	0f1b      	lsrs	r3, r3, #28
 8017b8c:	b2da      	uxtb	r2, r3
 8017b8e:	7dfb      	ldrb	r3, [r7, #23]
 8017b90:	005b      	lsls	r3, r3, #1
 8017b92:	4619      	mov	r1, r3
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	440b      	add	r3, r1
 8017b98:	3230      	adds	r2, #48	@ 0x30
 8017b9a:	b2d2      	uxtb	r2, r2
 8017b9c:	701a      	strb	r2, [r3, #0]
 8017b9e:	e00a      	b.n	8017bb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	0f1b      	lsrs	r3, r3, #28
 8017ba4:	b2da      	uxtb	r2, r3
 8017ba6:	7dfb      	ldrb	r3, [r7, #23]
 8017ba8:	005b      	lsls	r3, r3, #1
 8017baa:	4619      	mov	r1, r3
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	440b      	add	r3, r1
 8017bb0:	3237      	adds	r2, #55	@ 0x37
 8017bb2:	b2d2      	uxtb	r2, r2
 8017bb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	011b      	lsls	r3, r3, #4
 8017bba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017bbc:	7dfb      	ldrb	r3, [r7, #23]
 8017bbe:	005b      	lsls	r3, r3, #1
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	68ba      	ldr	r2, [r7, #8]
 8017bc4:	4413      	add	r3, r2
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017bca:	7dfb      	ldrb	r3, [r7, #23]
 8017bcc:	3301      	adds	r3, #1
 8017bce:	75fb      	strb	r3, [r7, #23]
 8017bd0:	7dfa      	ldrb	r2, [r7, #23]
 8017bd2:	79fb      	ldrb	r3, [r7, #7]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d3d3      	bcc.n	8017b80 <IntToUnicode+0x18>
  }
}
 8017bd8:	bf00      	nop
 8017bda:	bf00      	nop
 8017bdc:	371c      	adds	r7, #28
 8017bde:	46bd      	mov	sp, r7
 8017be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be4:	4770      	bx	lr
	...

08017be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b0b2      	sub	sp, #200	@ 0xc8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017bf0:	f107 0310 	add.w	r3, r7, #16
 8017bf4:	22b8      	movs	r2, #184	@ 0xb8
 8017bf6:	2100      	movs	r1, #0
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f001 fea6 	bl	801994a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	4a1a      	ldr	r2, [pc, #104]	@ (8017c6c <HAL_PCD_MspInit+0x84>)
 8017c04:	4293      	cmp	r3, r2
 8017c06:	d12c      	bne.n	8017c62 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017c08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017c0c:	f04f 0300 	mov.w	r3, #0
 8017c10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017c14:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017c18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017c1c:	f107 0310 	add.w	r3, r7, #16
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7f5 febb 	bl	800d99c <HAL_RCCEx_PeriphCLKConfig>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d001      	beq.n	8017c30 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017c2c:	f7ea fa7c 	bl	8002128 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017c30:	f7f4 ff3e 	bl	800cab0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017c34:	4b0e      	ldr	r3, [pc, #56]	@ (8017c70 <HAL_PCD_MspInit+0x88>)
 8017c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8017c70 <HAL_PCD_MspInit+0x88>)
 8017c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017c40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017c44:	4b0a      	ldr	r3, [pc, #40]	@ (8017c70 <HAL_PCD_MspInit+0x88>)
 8017c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017c4e:	60fb      	str	r3, [r7, #12]
 8017c50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017c52:	2200      	movs	r2, #0
 8017c54:	2100      	movs	r1, #0
 8017c56:	204d      	movs	r0, #77	@ 0x4d
 8017c58:	f7f0 fcf1 	bl	800863e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017c5c:	204d      	movs	r0, #77	@ 0x4d
 8017c5e:	f7f0 fd08 	bl	8008672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017c62:	bf00      	nop
 8017c64:	37c8      	adds	r7, #200	@ 0xc8
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	40040000 	.word	0x40040000
 8017c70:	58024400 	.word	0x58024400

08017c74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017c88:	4619      	mov	r1, r3
 8017c8a:	4610      	mov	r0, r2
 8017c8c:	f7fe fb23 	bl	80162d6 <USBD_LL_SetupStage>
}
 8017c90:	bf00      	nop
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}

08017c98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b082      	sub	sp, #8
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	6078      	str	r0, [r7, #4]
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017caa:	78fa      	ldrb	r2, [r7, #3]
 8017cac:	6879      	ldr	r1, [r7, #4]
 8017cae:	4613      	mov	r3, r2
 8017cb0:	00db      	lsls	r3, r3, #3
 8017cb2:	4413      	add	r3, r2
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	440b      	add	r3, r1
 8017cb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	78fb      	ldrb	r3, [r7, #3]
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	f7fe fb5d 	bl	8016380 <USBD_LL_DataOutStage>
}
 8017cc6:	bf00      	nop
 8017cc8:	3708      	adds	r7, #8
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}

08017cce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cce:	b580      	push	{r7, lr}
 8017cd0:	b082      	sub	sp, #8
 8017cd2:	af00      	add	r7, sp, #0
 8017cd4:	6078      	str	r0, [r7, #4]
 8017cd6:	460b      	mov	r3, r1
 8017cd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017ce0:	78fa      	ldrb	r2, [r7, #3]
 8017ce2:	6879      	ldr	r1, [r7, #4]
 8017ce4:	4613      	mov	r3, r2
 8017ce6:	00db      	lsls	r3, r3, #3
 8017ce8:	4413      	add	r3, r2
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	440b      	add	r3, r1
 8017cee:	3320      	adds	r3, #32
 8017cf0:	681a      	ldr	r2, [r3, #0]
 8017cf2:	78fb      	ldrb	r3, [r7, #3]
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	f7fe fbf6 	bl	80164e6 <USBD_LL_DataInStage>
}
 8017cfa:	bf00      	nop
 8017cfc:	3708      	adds	r7, #8
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}

08017d02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d02:	b580      	push	{r7, lr}
 8017d04:	b082      	sub	sp, #8
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7fe fd30 	bl	8016776 <USBD_LL_SOF>
}
 8017d16:	bf00      	nop
 8017d18:	3708      	adds	r7, #8
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}

08017d1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b084      	sub	sp, #16
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017d26:	2301      	movs	r3, #1
 8017d28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	79db      	ldrb	r3, [r3, #7]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d102      	bne.n	8017d38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017d32:	2300      	movs	r3, #0
 8017d34:	73fb      	strb	r3, [r7, #15]
 8017d36:	e008      	b.n	8017d4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	79db      	ldrb	r3, [r3, #7]
 8017d3c:	2b02      	cmp	r3, #2
 8017d3e:	d102      	bne.n	8017d46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017d40:	2301      	movs	r3, #1
 8017d42:	73fb      	strb	r3, [r7, #15]
 8017d44:	e001      	b.n	8017d4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017d46:	f7ea f9ef 	bl	8002128 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d50:	7bfa      	ldrb	r2, [r7, #15]
 8017d52:	4611      	mov	r1, r2
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7fe fcca 	bl	80166ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7fe fc72 	bl	801664a <USBD_LL_Reset>
}
 8017d66:	bf00      	nop
 8017d68:	3710      	adds	r7, #16
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
	...

08017d70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b082      	sub	sp, #8
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017d7e:	4618      	mov	r0, r3
 8017d80:	f7fe fcc5 	bl	801670e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	687a      	ldr	r2, [r7, #4]
 8017d90:	6812      	ldr	r2, [r2, #0]
 8017d92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017d96:	f043 0301 	orr.w	r3, r3, #1
 8017d9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	7adb      	ldrb	r3, [r3, #11]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d005      	beq.n	8017db0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017da4:	4b04      	ldr	r3, [pc, #16]	@ (8017db8 <HAL_PCD_SuspendCallback+0x48>)
 8017da6:	691b      	ldr	r3, [r3, #16]
 8017da8:	4a03      	ldr	r2, [pc, #12]	@ (8017db8 <HAL_PCD_SuspendCallback+0x48>)
 8017daa:	f043 0306 	orr.w	r3, r3, #6
 8017dae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017db0:	bf00      	nop
 8017db2:	3708      	adds	r7, #8
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	e000ed00 	.word	0xe000ed00

08017dbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fe fcbb 	bl	8016746 <USBD_LL_Resume>
}
 8017dd0:	bf00      	nop
 8017dd2:	3708      	adds	r7, #8
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b082      	sub	sp, #8
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	460b      	mov	r3, r1
 8017de2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017dea:	78fa      	ldrb	r2, [r7, #3]
 8017dec:	4611      	mov	r1, r2
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7fe fd13 	bl	801681a <USBD_LL_IsoOUTIncomplete>
}
 8017df4:	bf00      	nop
 8017df6:	3708      	adds	r7, #8
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}

08017dfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b082      	sub	sp, #8
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	460b      	mov	r3, r1
 8017e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e0e:	78fa      	ldrb	r2, [r7, #3]
 8017e10:	4611      	mov	r1, r2
 8017e12:	4618      	mov	r0, r3
 8017e14:	f7fe fccf 	bl	80167b6 <USBD_LL_IsoINIncomplete>
}
 8017e18:	bf00      	nop
 8017e1a:	3708      	adds	r7, #8
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b082      	sub	sp, #8
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f7fe fd25 	bl	801687e <USBD_LL_DevConnected>
}
 8017e34:	bf00      	nop
 8017e36:	3708      	adds	r7, #8
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}

08017e3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b082      	sub	sp, #8
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7fe fd22 	bl	8016894 <USBD_LL_DevDisconnected>
}
 8017e50:	bf00      	nop
 8017e52:	3708      	adds	r7, #8
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}

08017e58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	d140      	bne.n	8017eea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017e68:	4a22      	ldr	r2, [pc, #136]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	4a20      	ldr	r2, [pc, #128]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017e78:	4b1e      	ldr	r3, [pc, #120]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8017ef8 <USBD_LL_Init+0xa0>)
 8017e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e80:	2209      	movs	r2, #9
 8017e82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017e84:	4b1b      	ldr	r3, [pc, #108]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e86:	2202      	movs	r2, #2
 8017e88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017e90:	4b18      	ldr	r3, [pc, #96]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e92:	2202      	movs	r2, #2
 8017e94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017e96:	4b17      	ldr	r3, [pc, #92]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e98:	2200      	movs	r2, #0
 8017e9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017e9c:	4b15      	ldr	r3, [pc, #84]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017ea2:	4b14      	ldr	r3, [pc, #80]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017ea8:	4b12      	ldr	r3, [pc, #72]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017eae:	4b11      	ldr	r3, [pc, #68]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017eba:	480e      	ldr	r0, [pc, #56]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017ebc:	f7f3 fb1f 	bl	800b4fe <HAL_PCD_Init>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d001      	beq.n	8017eca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017ec6:	f7ea f92f 	bl	8002128 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017eca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017ece:	4809      	ldr	r0, [pc, #36]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017ed0:	f7f4 fd73 	bl	800c9ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017ed4:	2280      	movs	r2, #128	@ 0x80
 8017ed6:	2100      	movs	r1, #0
 8017ed8:	4806      	ldr	r0, [pc, #24]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017eda:	f7f4 fd27 	bl	800c92c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017ede:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8017ee2:	2101      	movs	r1, #1
 8017ee4:	4803      	ldr	r0, [pc, #12]	@ (8017ef4 <USBD_LL_Init+0x9c>)
 8017ee6:	f7f4 fd21 	bl	800c92c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017eea:	2300      	movs	r3, #0
}
 8017eec:	4618      	mov	r0, r3
 8017eee:	3708      	adds	r7, #8
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	bd80      	pop	{r7, pc}
 8017ef4:	24005b1c 	.word	0x24005b1c
 8017ef8:	40040000 	.word	0x40040000

08017efc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f04:	2300      	movs	r3, #0
 8017f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f3 fbff 	bl	800b716 <HAL_PCD_Start>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f1c:	7bfb      	ldrb	r3, [r7, #15]
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f000 f942 	bl	80181a8 <USBD_Get_USB_Status>
 8017f24:	4603      	mov	r3, r0
 8017f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3710      	adds	r7, #16
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}

08017f32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017f32:	b580      	push	{r7, lr}
 8017f34:	b084      	sub	sp, #16
 8017f36:	af00      	add	r7, sp, #0
 8017f38:	6078      	str	r0, [r7, #4]
 8017f3a:	4608      	mov	r0, r1
 8017f3c:	4611      	mov	r1, r2
 8017f3e:	461a      	mov	r2, r3
 8017f40:	4603      	mov	r3, r0
 8017f42:	70fb      	strb	r3, [r7, #3]
 8017f44:	460b      	mov	r3, r1
 8017f46:	70bb      	strb	r3, [r7, #2]
 8017f48:	4613      	mov	r3, r2
 8017f4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f50:	2300      	movs	r3, #0
 8017f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f5a:	78bb      	ldrb	r3, [r7, #2]
 8017f5c:	883a      	ldrh	r2, [r7, #0]
 8017f5e:	78f9      	ldrb	r1, [r7, #3]
 8017f60:	f7f4 f900 	bl	800c164 <HAL_PCD_EP_Open>
 8017f64:	4603      	mov	r3, r0
 8017f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f68:	7bfb      	ldrb	r3, [r7, #15]
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f000 f91c 	bl	80181a8 <USBD_Get_USB_Status>
 8017f70:	4603      	mov	r3, r0
 8017f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3710      	adds	r7, #16
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}

08017f7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f7e:	b580      	push	{r7, lr}
 8017f80:	b084      	sub	sp, #16
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	6078      	str	r0, [r7, #4]
 8017f86:	460b      	mov	r3, r1
 8017f88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f98:	78fa      	ldrb	r2, [r7, #3]
 8017f9a:	4611      	mov	r1, r2
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7f4 f949 	bl	800c234 <HAL_PCD_EP_Close>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fa6:	7bfb      	ldrb	r3, [r7, #15]
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f000 f8fd 	bl	80181a8 <USBD_Get_USB_Status>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	3710      	adds	r7, #16
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fcc:	2300      	movs	r3, #0
 8017fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fd6:	78fa      	ldrb	r2, [r7, #3]
 8017fd8:	4611      	mov	r1, r2
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7f4 fa01 	bl	800c3e2 <HAL_PCD_EP_SetStall>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fe4:	7bfb      	ldrb	r3, [r7, #15]
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f000 f8de 	bl	80181a8 <USBD_Get_USB_Status>
 8017fec:	4603      	mov	r3, r0
 8017fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	3710      	adds	r7, #16
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd80      	pop	{r7, pc}

08017ffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ffa:	b580      	push	{r7, lr}
 8017ffc:	b084      	sub	sp, #16
 8017ffe:	af00      	add	r7, sp, #0
 8018000:	6078      	str	r0, [r7, #4]
 8018002:	460b      	mov	r3, r1
 8018004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018006:	2300      	movs	r3, #0
 8018008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801800a:	2300      	movs	r3, #0
 801800c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018014:	78fa      	ldrb	r2, [r7, #3]
 8018016:	4611      	mov	r1, r2
 8018018:	4618      	mov	r0, r3
 801801a:	f7f4 fa45 	bl	800c4a8 <HAL_PCD_EP_ClrStall>
 801801e:	4603      	mov	r3, r0
 8018020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018022:	7bfb      	ldrb	r3, [r7, #15]
 8018024:	4618      	mov	r0, r3
 8018026:	f000 f8bf 	bl	80181a8 <USBD_Get_USB_Status>
 801802a:	4603      	mov	r3, r0
 801802c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801802e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018030:	4618      	mov	r0, r3
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}

08018038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018038:	b480      	push	{r7}
 801803a:	b085      	sub	sp, #20
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
 8018040:	460b      	mov	r3, r1
 8018042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801804a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801804c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018050:	2b00      	cmp	r3, #0
 8018052:	da0b      	bge.n	801806c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018054:	78fb      	ldrb	r3, [r7, #3]
 8018056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801805a:	68f9      	ldr	r1, [r7, #12]
 801805c:	4613      	mov	r3, r2
 801805e:	00db      	lsls	r3, r3, #3
 8018060:	4413      	add	r3, r2
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	440b      	add	r3, r1
 8018066:	3316      	adds	r3, #22
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	e00b      	b.n	8018084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801806c:	78fb      	ldrb	r3, [r7, #3]
 801806e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018072:	68f9      	ldr	r1, [r7, #12]
 8018074:	4613      	mov	r3, r2
 8018076:	00db      	lsls	r3, r3, #3
 8018078:	4413      	add	r3, r2
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	440b      	add	r3, r1
 801807e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018082:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018084:	4618      	mov	r0, r3
 8018086:	3714      	adds	r7, #20
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr

08018090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
 8018098:	460b      	mov	r3, r1
 801809a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801809c:	2300      	movs	r3, #0
 801809e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180a0:	2300      	movs	r3, #0
 80180a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80180aa:	78fa      	ldrb	r2, [r7, #3]
 80180ac:	4611      	mov	r1, r2
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7f4 f834 	bl	800c11c <HAL_PCD_SetAddress>
 80180b4:	4603      	mov	r3, r0
 80180b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180b8:	7bfb      	ldrb	r3, [r7, #15]
 80180ba:	4618      	mov	r0, r3
 80180bc:	f000 f874 	bl	80181a8 <USBD_Get_USB_Status>
 80180c0:	4603      	mov	r3, r0
 80180c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3710      	adds	r7, #16
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}

080180ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80180ce:	b580      	push	{r7, lr}
 80180d0:	b086      	sub	sp, #24
 80180d2:	af00      	add	r7, sp, #0
 80180d4:	60f8      	str	r0, [r7, #12]
 80180d6:	607a      	str	r2, [r7, #4]
 80180d8:	603b      	str	r3, [r7, #0]
 80180da:	460b      	mov	r3, r1
 80180dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180de:	2300      	movs	r3, #0
 80180e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180e2:	2300      	movs	r3, #0
 80180e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80180ec:	7af9      	ldrb	r1, [r7, #11]
 80180ee:	683b      	ldr	r3, [r7, #0]
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	f7f4 f93c 	bl	800c36e <HAL_PCD_EP_Transmit>
 80180f6:	4603      	mov	r3, r0
 80180f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180fa:	7dfb      	ldrb	r3, [r7, #23]
 80180fc:	4618      	mov	r0, r3
 80180fe:	f000 f853 	bl	80181a8 <USBD_Get_USB_Status>
 8018102:	4603      	mov	r3, r0
 8018104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018106:	7dbb      	ldrb	r3, [r7, #22]
}
 8018108:	4618      	mov	r0, r3
 801810a:	3718      	adds	r7, #24
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b086      	sub	sp, #24
 8018114:	af00      	add	r7, sp, #0
 8018116:	60f8      	str	r0, [r7, #12]
 8018118:	607a      	str	r2, [r7, #4]
 801811a:	603b      	str	r3, [r7, #0]
 801811c:	460b      	mov	r3, r1
 801811e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018120:	2300      	movs	r3, #0
 8018122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018124:	2300      	movs	r3, #0
 8018126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801812e:	7af9      	ldrb	r1, [r7, #11]
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	687a      	ldr	r2, [r7, #4]
 8018134:	f7f4 f8c8 	bl	800c2c8 <HAL_PCD_EP_Receive>
 8018138:	4603      	mov	r3, r0
 801813a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801813c:	7dfb      	ldrb	r3, [r7, #23]
 801813e:	4618      	mov	r0, r3
 8018140:	f000 f832 	bl	80181a8 <USBD_Get_USB_Status>
 8018144:	4603      	mov	r3, r0
 8018146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018148:	7dbb      	ldrb	r3, [r7, #22]
}
 801814a:	4618      	mov	r0, r3
 801814c:	3718      	adds	r7, #24
 801814e:	46bd      	mov	sp, r7
 8018150:	bd80      	pop	{r7, pc}

08018152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018152:	b580      	push	{r7, lr}
 8018154:	b082      	sub	sp, #8
 8018156:	af00      	add	r7, sp, #0
 8018158:	6078      	str	r0, [r7, #4]
 801815a:	460b      	mov	r3, r1
 801815c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018164:	78fa      	ldrb	r2, [r7, #3]
 8018166:	4611      	mov	r1, r2
 8018168:	4618      	mov	r0, r3
 801816a:	f7f4 f8e8 	bl	800c33e <HAL_PCD_EP_GetRxCount>
 801816e:	4603      	mov	r3, r0
}
 8018170:	4618      	mov	r0, r3
 8018172:	3708      	adds	r7, #8
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018178:	b480      	push	{r7}
 801817a:	b083      	sub	sp, #12
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018180:	4b03      	ldr	r3, [pc, #12]	@ (8018190 <USBD_static_malloc+0x18>)
}
 8018182:	4618      	mov	r0, r3
 8018184:	370c      	adds	r7, #12
 8018186:	46bd      	mov	sp, r7
 8018188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop
 8018190:	24006000 	.word	0x24006000

08018194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801819c:	bf00      	nop
 801819e:	370c      	adds	r7, #12
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr

080181a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80181a8:	b480      	push	{r7}
 80181aa:	b085      	sub	sp, #20
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	4603      	mov	r3, r0
 80181b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181b2:	2300      	movs	r3, #0
 80181b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80181b6:	79fb      	ldrb	r3, [r7, #7]
 80181b8:	2b03      	cmp	r3, #3
 80181ba:	d817      	bhi.n	80181ec <USBD_Get_USB_Status+0x44>
 80181bc:	a201      	add	r2, pc, #4	@ (adr r2, 80181c4 <USBD_Get_USB_Status+0x1c>)
 80181be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181c2:	bf00      	nop
 80181c4:	080181d5 	.word	0x080181d5
 80181c8:	080181db 	.word	0x080181db
 80181cc:	080181e1 	.word	0x080181e1
 80181d0:	080181e7 	.word	0x080181e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80181d4:	2300      	movs	r3, #0
 80181d6:	73fb      	strb	r3, [r7, #15]
    break;
 80181d8:	e00b      	b.n	80181f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80181da:	2303      	movs	r3, #3
 80181dc:	73fb      	strb	r3, [r7, #15]
    break;
 80181de:	e008      	b.n	80181f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80181e0:	2301      	movs	r3, #1
 80181e2:	73fb      	strb	r3, [r7, #15]
    break;
 80181e4:	e005      	b.n	80181f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80181e6:	2303      	movs	r3, #3
 80181e8:	73fb      	strb	r3, [r7, #15]
    break;
 80181ea:	e002      	b.n	80181f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80181ec:	2303      	movs	r3, #3
 80181ee:	73fb      	strb	r3, [r7, #15]
    break;
 80181f0:	bf00      	nop
  }
  return usb_status;
 80181f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	3714      	adds	r7, #20
 80181f8:	46bd      	mov	sp, r7
 80181fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fe:	4770      	bx	lr

08018200 <atof>:
 8018200:	2100      	movs	r1, #0
 8018202:	f000 bdb7 	b.w	8018d74 <strtod>

08018206 <atoi>:
 8018206:	220a      	movs	r2, #10
 8018208:	2100      	movs	r1, #0
 801820a:	f000 be39 	b.w	8018e80 <strtol>

0801820e <sulp>:
 801820e:	b570      	push	{r4, r5, r6, lr}
 8018210:	4604      	mov	r4, r0
 8018212:	460d      	mov	r5, r1
 8018214:	4616      	mov	r6, r2
 8018216:	ec45 4b10 	vmov	d0, r4, r5
 801821a:	f003 f9eb 	bl	801b5f4 <__ulp>
 801821e:	b17e      	cbz	r6, 8018240 <sulp+0x32>
 8018220:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018224:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018228:	2b00      	cmp	r3, #0
 801822a:	dd09      	ble.n	8018240 <sulp+0x32>
 801822c:	051b      	lsls	r3, r3, #20
 801822e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8018232:	2000      	movs	r0, #0
 8018234:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8018238:	ec41 0b17 	vmov	d7, r0, r1
 801823c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018240:	bd70      	pop	{r4, r5, r6, pc}
 8018242:	0000      	movs	r0, r0
 8018244:	0000      	movs	r0, r0
	...

08018248 <_strtod_l>:
 8018248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801824c:	ed2d 8b0a 	vpush	{d8-d12}
 8018250:	b097      	sub	sp, #92	@ 0x5c
 8018252:	4688      	mov	r8, r1
 8018254:	920e      	str	r2, [sp, #56]	@ 0x38
 8018256:	2200      	movs	r2, #0
 8018258:	9212      	str	r2, [sp, #72]	@ 0x48
 801825a:	9005      	str	r0, [sp, #20]
 801825c:	f04f 0a00 	mov.w	sl, #0
 8018260:	f04f 0b00 	mov.w	fp, #0
 8018264:	460a      	mov	r2, r1
 8018266:	9211      	str	r2, [sp, #68]	@ 0x44
 8018268:	7811      	ldrb	r1, [r2, #0]
 801826a:	292b      	cmp	r1, #43	@ 0x2b
 801826c:	d04c      	beq.n	8018308 <_strtod_l+0xc0>
 801826e:	d839      	bhi.n	80182e4 <_strtod_l+0x9c>
 8018270:	290d      	cmp	r1, #13
 8018272:	d833      	bhi.n	80182dc <_strtod_l+0x94>
 8018274:	2908      	cmp	r1, #8
 8018276:	d833      	bhi.n	80182e0 <_strtod_l+0x98>
 8018278:	2900      	cmp	r1, #0
 801827a:	d03c      	beq.n	80182f6 <_strtod_l+0xae>
 801827c:	2200      	movs	r2, #0
 801827e:	9208      	str	r2, [sp, #32]
 8018280:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018282:	782a      	ldrb	r2, [r5, #0]
 8018284:	2a30      	cmp	r2, #48	@ 0x30
 8018286:	f040 80b5 	bne.w	80183f4 <_strtod_l+0x1ac>
 801828a:	786a      	ldrb	r2, [r5, #1]
 801828c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018290:	2a58      	cmp	r2, #88	@ 0x58
 8018292:	d170      	bne.n	8018376 <_strtod_l+0x12e>
 8018294:	9302      	str	r3, [sp, #8]
 8018296:	9b08      	ldr	r3, [sp, #32]
 8018298:	9301      	str	r3, [sp, #4]
 801829a:	ab12      	add	r3, sp, #72	@ 0x48
 801829c:	9300      	str	r3, [sp, #0]
 801829e:	4a8b      	ldr	r2, [pc, #556]	@ (80184cc <_strtod_l+0x284>)
 80182a0:	9805      	ldr	r0, [sp, #20]
 80182a2:	ab13      	add	r3, sp, #76	@ 0x4c
 80182a4:	a911      	add	r1, sp, #68	@ 0x44
 80182a6:	f002 fa97 	bl	801a7d8 <__gethex>
 80182aa:	f010 060f 	ands.w	r6, r0, #15
 80182ae:	4604      	mov	r4, r0
 80182b0:	d005      	beq.n	80182be <_strtod_l+0x76>
 80182b2:	2e06      	cmp	r6, #6
 80182b4:	d12a      	bne.n	801830c <_strtod_l+0xc4>
 80182b6:	3501      	adds	r5, #1
 80182b8:	2300      	movs	r3, #0
 80182ba:	9511      	str	r5, [sp, #68]	@ 0x44
 80182bc:	9308      	str	r3, [sp, #32]
 80182be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	f040 852f 	bne.w	8018d24 <_strtod_l+0xadc>
 80182c6:	9b08      	ldr	r3, [sp, #32]
 80182c8:	ec4b ab10 	vmov	d0, sl, fp
 80182cc:	b1cb      	cbz	r3, 8018302 <_strtod_l+0xba>
 80182ce:	eeb1 0b40 	vneg.f64	d0, d0
 80182d2:	b017      	add	sp, #92	@ 0x5c
 80182d4:	ecbd 8b0a 	vpop	{d8-d12}
 80182d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182dc:	2920      	cmp	r1, #32
 80182de:	d1cd      	bne.n	801827c <_strtod_l+0x34>
 80182e0:	3201      	adds	r2, #1
 80182e2:	e7c0      	b.n	8018266 <_strtod_l+0x1e>
 80182e4:	292d      	cmp	r1, #45	@ 0x2d
 80182e6:	d1c9      	bne.n	801827c <_strtod_l+0x34>
 80182e8:	2101      	movs	r1, #1
 80182ea:	9108      	str	r1, [sp, #32]
 80182ec:	1c51      	adds	r1, r2, #1
 80182ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80182f0:	7852      	ldrb	r2, [r2, #1]
 80182f2:	2a00      	cmp	r2, #0
 80182f4:	d1c4      	bne.n	8018280 <_strtod_l+0x38>
 80182f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182f8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	f040 850f 	bne.w	8018d20 <_strtod_l+0xad8>
 8018302:	ec4b ab10 	vmov	d0, sl, fp
 8018306:	e7e4      	b.n	80182d2 <_strtod_l+0x8a>
 8018308:	2100      	movs	r1, #0
 801830a:	e7ee      	b.n	80182ea <_strtod_l+0xa2>
 801830c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801830e:	b13a      	cbz	r2, 8018320 <_strtod_l+0xd8>
 8018310:	2135      	movs	r1, #53	@ 0x35
 8018312:	a814      	add	r0, sp, #80	@ 0x50
 8018314:	f003 fa65 	bl	801b7e2 <__copybits>
 8018318:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801831a:	9805      	ldr	r0, [sp, #20]
 801831c:	f002 fe36 	bl	801af8c <_Bfree>
 8018320:	1e73      	subs	r3, r6, #1
 8018322:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018324:	2b04      	cmp	r3, #4
 8018326:	d806      	bhi.n	8018336 <_strtod_l+0xee>
 8018328:	e8df f003 	tbb	[pc, r3]
 801832c:	201d0314 	.word	0x201d0314
 8018330:	14          	.byte	0x14
 8018331:	00          	.byte	0x00
 8018332:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8018336:	05e3      	lsls	r3, r4, #23
 8018338:	bf48      	it	mi
 801833a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801833e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018342:	0d1b      	lsrs	r3, r3, #20
 8018344:	051b      	lsls	r3, r3, #20
 8018346:	2b00      	cmp	r3, #0
 8018348:	d1b9      	bne.n	80182be <_strtod_l+0x76>
 801834a:	f001 fb6f 	bl	8019a2c <__errno>
 801834e:	2322      	movs	r3, #34	@ 0x22
 8018350:	6003      	str	r3, [r0, #0]
 8018352:	e7b4      	b.n	80182be <_strtod_l+0x76>
 8018354:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8018358:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801835c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018360:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018364:	e7e7      	b.n	8018336 <_strtod_l+0xee>
 8018366:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80184d4 <_strtod_l+0x28c>
 801836a:	e7e4      	b.n	8018336 <_strtod_l+0xee>
 801836c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8018370:	f04f 3aff 	mov.w	sl, #4294967295
 8018374:	e7df      	b.n	8018336 <_strtod_l+0xee>
 8018376:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018378:	1c5a      	adds	r2, r3, #1
 801837a:	9211      	str	r2, [sp, #68]	@ 0x44
 801837c:	785b      	ldrb	r3, [r3, #1]
 801837e:	2b30      	cmp	r3, #48	@ 0x30
 8018380:	d0f9      	beq.n	8018376 <_strtod_l+0x12e>
 8018382:	2b00      	cmp	r3, #0
 8018384:	d09b      	beq.n	80182be <_strtod_l+0x76>
 8018386:	2301      	movs	r3, #1
 8018388:	2600      	movs	r6, #0
 801838a:	9307      	str	r3, [sp, #28]
 801838c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801838e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018390:	46b1      	mov	r9, r6
 8018392:	4635      	mov	r5, r6
 8018394:	220a      	movs	r2, #10
 8018396:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018398:	7804      	ldrb	r4, [r0, #0]
 801839a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801839e:	b2d9      	uxtb	r1, r3
 80183a0:	2909      	cmp	r1, #9
 80183a2:	d929      	bls.n	80183f8 <_strtod_l+0x1b0>
 80183a4:	494a      	ldr	r1, [pc, #296]	@ (80184d0 <_strtod_l+0x288>)
 80183a6:	2201      	movs	r2, #1
 80183a8:	f001 fae4 	bl	8019974 <strncmp>
 80183ac:	b378      	cbz	r0, 801840e <_strtod_l+0x1c6>
 80183ae:	2000      	movs	r0, #0
 80183b0:	4622      	mov	r2, r4
 80183b2:	462b      	mov	r3, r5
 80183b4:	4607      	mov	r7, r0
 80183b6:	9006      	str	r0, [sp, #24]
 80183b8:	2a65      	cmp	r2, #101	@ 0x65
 80183ba:	d001      	beq.n	80183c0 <_strtod_l+0x178>
 80183bc:	2a45      	cmp	r2, #69	@ 0x45
 80183be:	d117      	bne.n	80183f0 <_strtod_l+0x1a8>
 80183c0:	b91b      	cbnz	r3, 80183ca <_strtod_l+0x182>
 80183c2:	9b07      	ldr	r3, [sp, #28]
 80183c4:	4303      	orrs	r3, r0
 80183c6:	d096      	beq.n	80182f6 <_strtod_l+0xae>
 80183c8:	2300      	movs	r3, #0
 80183ca:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80183ce:	f108 0201 	add.w	r2, r8, #1
 80183d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80183d4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80183d8:	2a2b      	cmp	r2, #43	@ 0x2b
 80183da:	d06b      	beq.n	80184b4 <_strtod_l+0x26c>
 80183dc:	2a2d      	cmp	r2, #45	@ 0x2d
 80183de:	d071      	beq.n	80184c4 <_strtod_l+0x27c>
 80183e0:	f04f 0e00 	mov.w	lr, #0
 80183e4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80183e8:	2c09      	cmp	r4, #9
 80183ea:	d979      	bls.n	80184e0 <_strtod_l+0x298>
 80183ec:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80183f0:	2400      	movs	r4, #0
 80183f2:	e094      	b.n	801851e <_strtod_l+0x2d6>
 80183f4:	2300      	movs	r3, #0
 80183f6:	e7c7      	b.n	8018388 <_strtod_l+0x140>
 80183f8:	2d08      	cmp	r5, #8
 80183fa:	f100 0001 	add.w	r0, r0, #1
 80183fe:	bfd4      	ite	le
 8018400:	fb02 3909 	mlale	r9, r2, r9, r3
 8018404:	fb02 3606 	mlagt	r6, r2, r6, r3
 8018408:	3501      	adds	r5, #1
 801840a:	9011      	str	r0, [sp, #68]	@ 0x44
 801840c:	e7c3      	b.n	8018396 <_strtod_l+0x14e>
 801840e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018410:	1c5a      	adds	r2, r3, #1
 8018412:	9211      	str	r2, [sp, #68]	@ 0x44
 8018414:	785a      	ldrb	r2, [r3, #1]
 8018416:	b375      	cbz	r5, 8018476 <_strtod_l+0x22e>
 8018418:	4607      	mov	r7, r0
 801841a:	462b      	mov	r3, r5
 801841c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8018420:	2909      	cmp	r1, #9
 8018422:	d913      	bls.n	801844c <_strtod_l+0x204>
 8018424:	2101      	movs	r1, #1
 8018426:	9106      	str	r1, [sp, #24]
 8018428:	e7c6      	b.n	80183b8 <_strtod_l+0x170>
 801842a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801842c:	1c5a      	adds	r2, r3, #1
 801842e:	9211      	str	r2, [sp, #68]	@ 0x44
 8018430:	785a      	ldrb	r2, [r3, #1]
 8018432:	3001      	adds	r0, #1
 8018434:	2a30      	cmp	r2, #48	@ 0x30
 8018436:	d0f8      	beq.n	801842a <_strtod_l+0x1e2>
 8018438:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801843c:	2b08      	cmp	r3, #8
 801843e:	f200 8476 	bhi.w	8018d2e <_strtod_l+0xae6>
 8018442:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018444:	930a      	str	r3, [sp, #40]	@ 0x28
 8018446:	4607      	mov	r7, r0
 8018448:	2000      	movs	r0, #0
 801844a:	4603      	mov	r3, r0
 801844c:	3a30      	subs	r2, #48	@ 0x30
 801844e:	f100 0101 	add.w	r1, r0, #1
 8018452:	d023      	beq.n	801849c <_strtod_l+0x254>
 8018454:	440f      	add	r7, r1
 8018456:	eb00 0c03 	add.w	ip, r0, r3
 801845a:	4619      	mov	r1, r3
 801845c:	240a      	movs	r4, #10
 801845e:	4561      	cmp	r1, ip
 8018460:	d10b      	bne.n	801847a <_strtod_l+0x232>
 8018462:	1c5c      	adds	r4, r3, #1
 8018464:	4403      	add	r3, r0
 8018466:	2b08      	cmp	r3, #8
 8018468:	4404      	add	r4, r0
 801846a:	dc11      	bgt.n	8018490 <_strtod_l+0x248>
 801846c:	230a      	movs	r3, #10
 801846e:	fb03 2909 	mla	r9, r3, r9, r2
 8018472:	2100      	movs	r1, #0
 8018474:	e013      	b.n	801849e <_strtod_l+0x256>
 8018476:	4628      	mov	r0, r5
 8018478:	e7dc      	b.n	8018434 <_strtod_l+0x1ec>
 801847a:	2908      	cmp	r1, #8
 801847c:	f101 0101 	add.w	r1, r1, #1
 8018480:	dc02      	bgt.n	8018488 <_strtod_l+0x240>
 8018482:	fb04 f909 	mul.w	r9, r4, r9
 8018486:	e7ea      	b.n	801845e <_strtod_l+0x216>
 8018488:	2910      	cmp	r1, #16
 801848a:	bfd8      	it	le
 801848c:	4366      	mulle	r6, r4
 801848e:	e7e6      	b.n	801845e <_strtod_l+0x216>
 8018490:	2b0f      	cmp	r3, #15
 8018492:	dcee      	bgt.n	8018472 <_strtod_l+0x22a>
 8018494:	230a      	movs	r3, #10
 8018496:	fb03 2606 	mla	r6, r3, r6, r2
 801849a:	e7ea      	b.n	8018472 <_strtod_l+0x22a>
 801849c:	461c      	mov	r4, r3
 801849e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80184a0:	1c5a      	adds	r2, r3, #1
 80184a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80184a4:	785a      	ldrb	r2, [r3, #1]
 80184a6:	4608      	mov	r0, r1
 80184a8:	4623      	mov	r3, r4
 80184aa:	e7b7      	b.n	801841c <_strtod_l+0x1d4>
 80184ac:	2301      	movs	r3, #1
 80184ae:	2700      	movs	r7, #0
 80184b0:	9306      	str	r3, [sp, #24]
 80184b2:	e786      	b.n	80183c2 <_strtod_l+0x17a>
 80184b4:	f04f 0e00 	mov.w	lr, #0
 80184b8:	f108 0202 	add.w	r2, r8, #2
 80184bc:	9211      	str	r2, [sp, #68]	@ 0x44
 80184be:	f898 2002 	ldrb.w	r2, [r8, #2]
 80184c2:	e78f      	b.n	80183e4 <_strtod_l+0x19c>
 80184c4:	f04f 0e01 	mov.w	lr, #1
 80184c8:	e7f6      	b.n	80184b8 <_strtod_l+0x270>
 80184ca:	bf00      	nop
 80184cc:	0801d800 	.word	0x0801d800
 80184d0:	0801d7e8 	.word	0x0801d7e8
 80184d4:	7ff00000 	.word	0x7ff00000
 80184d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184da:	1c54      	adds	r4, r2, #1
 80184dc:	9411      	str	r4, [sp, #68]	@ 0x44
 80184de:	7852      	ldrb	r2, [r2, #1]
 80184e0:	2a30      	cmp	r2, #48	@ 0x30
 80184e2:	d0f9      	beq.n	80184d8 <_strtod_l+0x290>
 80184e4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80184e8:	2c08      	cmp	r4, #8
 80184ea:	d881      	bhi.n	80183f0 <_strtod_l+0x1a8>
 80184ec:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80184f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80184f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184f6:	1c51      	adds	r1, r2, #1
 80184f8:	9111      	str	r1, [sp, #68]	@ 0x44
 80184fa:	7852      	ldrb	r2, [r2, #1]
 80184fc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8018500:	2c09      	cmp	r4, #9
 8018502:	d938      	bls.n	8018576 <_strtod_l+0x32e>
 8018504:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018506:	1b0c      	subs	r4, r1, r4
 8018508:	2c08      	cmp	r4, #8
 801850a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 801850e:	dc02      	bgt.n	8018516 <_strtod_l+0x2ce>
 8018510:	4564      	cmp	r4, ip
 8018512:	bfa8      	it	ge
 8018514:	4664      	movge	r4, ip
 8018516:	f1be 0f00 	cmp.w	lr, #0
 801851a:	d000      	beq.n	801851e <_strtod_l+0x2d6>
 801851c:	4264      	negs	r4, r4
 801851e:	2b00      	cmp	r3, #0
 8018520:	d14e      	bne.n	80185c0 <_strtod_l+0x378>
 8018522:	9b07      	ldr	r3, [sp, #28]
 8018524:	4318      	orrs	r0, r3
 8018526:	f47f aeca 	bne.w	80182be <_strtod_l+0x76>
 801852a:	9b06      	ldr	r3, [sp, #24]
 801852c:	2b00      	cmp	r3, #0
 801852e:	f47f aee2 	bne.w	80182f6 <_strtod_l+0xae>
 8018532:	2a69      	cmp	r2, #105	@ 0x69
 8018534:	d027      	beq.n	8018586 <_strtod_l+0x33e>
 8018536:	dc24      	bgt.n	8018582 <_strtod_l+0x33a>
 8018538:	2a49      	cmp	r2, #73	@ 0x49
 801853a:	d024      	beq.n	8018586 <_strtod_l+0x33e>
 801853c:	2a4e      	cmp	r2, #78	@ 0x4e
 801853e:	f47f aeda 	bne.w	80182f6 <_strtod_l+0xae>
 8018542:	4997      	ldr	r1, [pc, #604]	@ (80187a0 <_strtod_l+0x558>)
 8018544:	a811      	add	r0, sp, #68	@ 0x44
 8018546:	f002 fb69 	bl	801ac1c <__match>
 801854a:	2800      	cmp	r0, #0
 801854c:	f43f aed3 	beq.w	80182f6 <_strtod_l+0xae>
 8018550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	2b28      	cmp	r3, #40	@ 0x28
 8018556:	d12d      	bne.n	80185b4 <_strtod_l+0x36c>
 8018558:	4992      	ldr	r1, [pc, #584]	@ (80187a4 <_strtod_l+0x55c>)
 801855a:	aa14      	add	r2, sp, #80	@ 0x50
 801855c:	a811      	add	r0, sp, #68	@ 0x44
 801855e:	f002 fb71 	bl	801ac44 <__hexnan>
 8018562:	2805      	cmp	r0, #5
 8018564:	d126      	bne.n	80185b4 <_strtod_l+0x36c>
 8018566:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018568:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 801856c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8018570:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8018574:	e6a3      	b.n	80182be <_strtod_l+0x76>
 8018576:	240a      	movs	r4, #10
 8018578:	fb04 2c0c 	mla	ip, r4, ip, r2
 801857c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8018580:	e7b8      	b.n	80184f4 <_strtod_l+0x2ac>
 8018582:	2a6e      	cmp	r2, #110	@ 0x6e
 8018584:	e7db      	b.n	801853e <_strtod_l+0x2f6>
 8018586:	4988      	ldr	r1, [pc, #544]	@ (80187a8 <_strtod_l+0x560>)
 8018588:	a811      	add	r0, sp, #68	@ 0x44
 801858a:	f002 fb47 	bl	801ac1c <__match>
 801858e:	2800      	cmp	r0, #0
 8018590:	f43f aeb1 	beq.w	80182f6 <_strtod_l+0xae>
 8018594:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018596:	4985      	ldr	r1, [pc, #532]	@ (80187ac <_strtod_l+0x564>)
 8018598:	3b01      	subs	r3, #1
 801859a:	a811      	add	r0, sp, #68	@ 0x44
 801859c:	9311      	str	r3, [sp, #68]	@ 0x44
 801859e:	f002 fb3d 	bl	801ac1c <__match>
 80185a2:	b910      	cbnz	r0, 80185aa <_strtod_l+0x362>
 80185a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80185a6:	3301      	adds	r3, #1
 80185a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80185aa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80187c0 <_strtod_l+0x578>
 80185ae:	f04f 0a00 	mov.w	sl, #0
 80185b2:	e684      	b.n	80182be <_strtod_l+0x76>
 80185b4:	487e      	ldr	r0, [pc, #504]	@ (80187b0 <_strtod_l+0x568>)
 80185b6:	f001 fa77 	bl	8019aa8 <nan>
 80185ba:	ec5b ab10 	vmov	sl, fp, d0
 80185be:	e67e      	b.n	80182be <_strtod_l+0x76>
 80185c0:	ee07 9a90 	vmov	s15, r9
 80185c4:	1be2      	subs	r2, r4, r7
 80185c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80185ca:	2d00      	cmp	r5, #0
 80185cc:	bf08      	it	eq
 80185ce:	461d      	moveq	r5, r3
 80185d0:	2b10      	cmp	r3, #16
 80185d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80185d4:	461a      	mov	r2, r3
 80185d6:	bfa8      	it	ge
 80185d8:	2210      	movge	r2, #16
 80185da:	2b09      	cmp	r3, #9
 80185dc:	ec5b ab17 	vmov	sl, fp, d7
 80185e0:	dc15      	bgt.n	801860e <_strtod_l+0x3c6>
 80185e2:	1be1      	subs	r1, r4, r7
 80185e4:	2900      	cmp	r1, #0
 80185e6:	f43f ae6a 	beq.w	80182be <_strtod_l+0x76>
 80185ea:	eba4 0107 	sub.w	r1, r4, r7
 80185ee:	dd72      	ble.n	80186d6 <_strtod_l+0x48e>
 80185f0:	2916      	cmp	r1, #22
 80185f2:	dc59      	bgt.n	80186a8 <_strtod_l+0x460>
 80185f4:	4b6f      	ldr	r3, [pc, #444]	@ (80187b4 <_strtod_l+0x56c>)
 80185f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185fc:	ed93 7b00 	vldr	d7, [r3]
 8018600:	ec4b ab16 	vmov	d6, sl, fp
 8018604:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018608:	ec5b ab17 	vmov	sl, fp, d7
 801860c:	e657      	b.n	80182be <_strtod_l+0x76>
 801860e:	4969      	ldr	r1, [pc, #420]	@ (80187b4 <_strtod_l+0x56c>)
 8018610:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018614:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8018618:	ee06 6a90 	vmov	s13, r6
 801861c:	2b0f      	cmp	r3, #15
 801861e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8018622:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018626:	ec5b ab16 	vmov	sl, fp, d6
 801862a:	ddda      	ble.n	80185e2 <_strtod_l+0x39a>
 801862c:	1a9a      	subs	r2, r3, r2
 801862e:	1be1      	subs	r1, r4, r7
 8018630:	440a      	add	r2, r1
 8018632:	2a00      	cmp	r2, #0
 8018634:	f340 8094 	ble.w	8018760 <_strtod_l+0x518>
 8018638:	f012 000f 	ands.w	r0, r2, #15
 801863c:	d00a      	beq.n	8018654 <_strtod_l+0x40c>
 801863e:	495d      	ldr	r1, [pc, #372]	@ (80187b4 <_strtod_l+0x56c>)
 8018640:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018644:	ed91 7b00 	vldr	d7, [r1]
 8018648:	ec4b ab16 	vmov	d6, sl, fp
 801864c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018650:	ec5b ab17 	vmov	sl, fp, d7
 8018654:	f032 020f 	bics.w	r2, r2, #15
 8018658:	d073      	beq.n	8018742 <_strtod_l+0x4fa>
 801865a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 801865e:	dd47      	ble.n	80186f0 <_strtod_l+0x4a8>
 8018660:	2400      	movs	r4, #0
 8018662:	4625      	mov	r5, r4
 8018664:	9407      	str	r4, [sp, #28]
 8018666:	4626      	mov	r6, r4
 8018668:	9a05      	ldr	r2, [sp, #20]
 801866a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80187c0 <_strtod_l+0x578>
 801866e:	2322      	movs	r3, #34	@ 0x22
 8018670:	6013      	str	r3, [r2, #0]
 8018672:	f04f 0a00 	mov.w	sl, #0
 8018676:	9b07      	ldr	r3, [sp, #28]
 8018678:	2b00      	cmp	r3, #0
 801867a:	f43f ae20 	beq.w	80182be <_strtod_l+0x76>
 801867e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018680:	9805      	ldr	r0, [sp, #20]
 8018682:	f002 fc83 	bl	801af8c <_Bfree>
 8018686:	9805      	ldr	r0, [sp, #20]
 8018688:	4631      	mov	r1, r6
 801868a:	f002 fc7f 	bl	801af8c <_Bfree>
 801868e:	9805      	ldr	r0, [sp, #20]
 8018690:	4629      	mov	r1, r5
 8018692:	f002 fc7b 	bl	801af8c <_Bfree>
 8018696:	9907      	ldr	r1, [sp, #28]
 8018698:	9805      	ldr	r0, [sp, #20]
 801869a:	f002 fc77 	bl	801af8c <_Bfree>
 801869e:	9805      	ldr	r0, [sp, #20]
 80186a0:	4621      	mov	r1, r4
 80186a2:	f002 fc73 	bl	801af8c <_Bfree>
 80186a6:	e60a      	b.n	80182be <_strtod_l+0x76>
 80186a8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80186ac:	1be0      	subs	r0, r4, r7
 80186ae:	4281      	cmp	r1, r0
 80186b0:	dbbc      	blt.n	801862c <_strtod_l+0x3e4>
 80186b2:	4a40      	ldr	r2, [pc, #256]	@ (80187b4 <_strtod_l+0x56c>)
 80186b4:	f1c3 030f 	rsb	r3, r3, #15
 80186b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80186bc:	ed91 7b00 	vldr	d7, [r1]
 80186c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80186c2:	ec4b ab16 	vmov	d6, sl, fp
 80186c6:	1acb      	subs	r3, r1, r3
 80186c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80186cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80186d0:	ed92 6b00 	vldr	d6, [r2]
 80186d4:	e796      	b.n	8018604 <_strtod_l+0x3bc>
 80186d6:	3116      	adds	r1, #22
 80186d8:	dba8      	blt.n	801862c <_strtod_l+0x3e4>
 80186da:	4b36      	ldr	r3, [pc, #216]	@ (80187b4 <_strtod_l+0x56c>)
 80186dc:	1b3c      	subs	r4, r7, r4
 80186de:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80186e2:	ed94 7b00 	vldr	d7, [r4]
 80186e6:	ec4b ab16 	vmov	d6, sl, fp
 80186ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80186ee:	e78b      	b.n	8018608 <_strtod_l+0x3c0>
 80186f0:	2000      	movs	r0, #0
 80186f2:	ec4b ab17 	vmov	d7, sl, fp
 80186f6:	4e30      	ldr	r6, [pc, #192]	@ (80187b8 <_strtod_l+0x570>)
 80186f8:	1112      	asrs	r2, r2, #4
 80186fa:	4601      	mov	r1, r0
 80186fc:	2a01      	cmp	r2, #1
 80186fe:	dc23      	bgt.n	8018748 <_strtod_l+0x500>
 8018700:	b108      	cbz	r0, 8018706 <_strtod_l+0x4be>
 8018702:	ec5b ab17 	vmov	sl, fp, d7
 8018706:	4a2c      	ldr	r2, [pc, #176]	@ (80187b8 <_strtod_l+0x570>)
 8018708:	482c      	ldr	r0, [pc, #176]	@ (80187bc <_strtod_l+0x574>)
 801870a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801870e:	ed92 7b00 	vldr	d7, [r2]
 8018712:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8018716:	ec4b ab16 	vmov	d6, sl, fp
 801871a:	4a29      	ldr	r2, [pc, #164]	@ (80187c0 <_strtod_l+0x578>)
 801871c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018720:	ee17 1a90 	vmov	r1, s15
 8018724:	400a      	ands	r2, r1
 8018726:	4282      	cmp	r2, r0
 8018728:	ec5b ab17 	vmov	sl, fp, d7
 801872c:	d898      	bhi.n	8018660 <_strtod_l+0x418>
 801872e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8018732:	4282      	cmp	r2, r0
 8018734:	bf86      	itte	hi
 8018736:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80187c4 <_strtod_l+0x57c>
 801873a:	f04f 3aff 	movhi.w	sl, #4294967295
 801873e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8018742:	2200      	movs	r2, #0
 8018744:	9206      	str	r2, [sp, #24]
 8018746:	e076      	b.n	8018836 <_strtod_l+0x5ee>
 8018748:	f012 0f01 	tst.w	r2, #1
 801874c:	d004      	beq.n	8018758 <_strtod_l+0x510>
 801874e:	ed96 6b00 	vldr	d6, [r6]
 8018752:	2001      	movs	r0, #1
 8018754:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018758:	3101      	adds	r1, #1
 801875a:	1052      	asrs	r2, r2, #1
 801875c:	3608      	adds	r6, #8
 801875e:	e7cd      	b.n	80186fc <_strtod_l+0x4b4>
 8018760:	d0ef      	beq.n	8018742 <_strtod_l+0x4fa>
 8018762:	4252      	negs	r2, r2
 8018764:	f012 000f 	ands.w	r0, r2, #15
 8018768:	d00a      	beq.n	8018780 <_strtod_l+0x538>
 801876a:	4912      	ldr	r1, [pc, #72]	@ (80187b4 <_strtod_l+0x56c>)
 801876c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018770:	ed91 7b00 	vldr	d7, [r1]
 8018774:	ec4b ab16 	vmov	d6, sl, fp
 8018778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801877c:	ec5b ab17 	vmov	sl, fp, d7
 8018780:	1112      	asrs	r2, r2, #4
 8018782:	d0de      	beq.n	8018742 <_strtod_l+0x4fa>
 8018784:	2a1f      	cmp	r2, #31
 8018786:	dd1f      	ble.n	80187c8 <_strtod_l+0x580>
 8018788:	2400      	movs	r4, #0
 801878a:	4625      	mov	r5, r4
 801878c:	9407      	str	r4, [sp, #28]
 801878e:	4626      	mov	r6, r4
 8018790:	9a05      	ldr	r2, [sp, #20]
 8018792:	2322      	movs	r3, #34	@ 0x22
 8018794:	f04f 0a00 	mov.w	sl, #0
 8018798:	f04f 0b00 	mov.w	fp, #0
 801879c:	6013      	str	r3, [r2, #0]
 801879e:	e76a      	b.n	8018676 <_strtod_l+0x42e>
 80187a0:	0801d94e 	.word	0x0801d94e
 80187a4:	0801d7ec 	.word	0x0801d7ec
 80187a8:	0801d946 	.word	0x0801d946
 80187ac:	0801d980 	.word	0x0801d980
 80187b0:	0801dc0c 	.word	0x0801dc0c
 80187b4:	0801daf8 	.word	0x0801daf8
 80187b8:	0801dad0 	.word	0x0801dad0
 80187bc:	7ca00000 	.word	0x7ca00000
 80187c0:	7ff00000 	.word	0x7ff00000
 80187c4:	7fefffff 	.word	0x7fefffff
 80187c8:	f012 0110 	ands.w	r1, r2, #16
 80187cc:	bf18      	it	ne
 80187ce:	216a      	movne	r1, #106	@ 0x6a
 80187d0:	9106      	str	r1, [sp, #24]
 80187d2:	ec4b ab17 	vmov	d7, sl, fp
 80187d6:	49b0      	ldr	r1, [pc, #704]	@ (8018a98 <_strtod_l+0x850>)
 80187d8:	2000      	movs	r0, #0
 80187da:	07d6      	lsls	r6, r2, #31
 80187dc:	d504      	bpl.n	80187e8 <_strtod_l+0x5a0>
 80187de:	ed91 6b00 	vldr	d6, [r1]
 80187e2:	2001      	movs	r0, #1
 80187e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80187e8:	1052      	asrs	r2, r2, #1
 80187ea:	f101 0108 	add.w	r1, r1, #8
 80187ee:	d1f4      	bne.n	80187da <_strtod_l+0x592>
 80187f0:	b108      	cbz	r0, 80187f6 <_strtod_l+0x5ae>
 80187f2:	ec5b ab17 	vmov	sl, fp, d7
 80187f6:	9a06      	ldr	r2, [sp, #24]
 80187f8:	b1b2      	cbz	r2, 8018828 <_strtod_l+0x5e0>
 80187fa:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80187fe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8018802:	2a00      	cmp	r2, #0
 8018804:	4658      	mov	r0, fp
 8018806:	dd0f      	ble.n	8018828 <_strtod_l+0x5e0>
 8018808:	2a1f      	cmp	r2, #31
 801880a:	dd55      	ble.n	80188b8 <_strtod_l+0x670>
 801880c:	2a34      	cmp	r2, #52	@ 0x34
 801880e:	bfde      	ittt	le
 8018810:	f04f 32ff 	movle.w	r2, #4294967295
 8018814:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8018818:	408a      	lslle	r2, r1
 801881a:	f04f 0a00 	mov.w	sl, #0
 801881e:	bfcc      	ite	gt
 8018820:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018824:	ea02 0b00 	andle.w	fp, r2, r0
 8018828:	ec4b ab17 	vmov	d7, sl, fp
 801882c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018834:	d0a8      	beq.n	8018788 <_strtod_l+0x540>
 8018836:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8018838:	9805      	ldr	r0, [sp, #20]
 801883a:	f8cd 9000 	str.w	r9, [sp]
 801883e:	462a      	mov	r2, r5
 8018840:	f002 fc0c 	bl	801b05c <__s2b>
 8018844:	9007      	str	r0, [sp, #28]
 8018846:	2800      	cmp	r0, #0
 8018848:	f43f af0a 	beq.w	8018660 <_strtod_l+0x418>
 801884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801884e:	1b3f      	subs	r7, r7, r4
 8018850:	2b00      	cmp	r3, #0
 8018852:	bfb4      	ite	lt
 8018854:	463b      	movlt	r3, r7
 8018856:	2300      	movge	r3, #0
 8018858:	930a      	str	r3, [sp, #40]	@ 0x28
 801885a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801885c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8018a88 <_strtod_l+0x840>
 8018860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018864:	2400      	movs	r4, #0
 8018866:	930d      	str	r3, [sp, #52]	@ 0x34
 8018868:	4625      	mov	r5, r4
 801886a:	9b07      	ldr	r3, [sp, #28]
 801886c:	9805      	ldr	r0, [sp, #20]
 801886e:	6859      	ldr	r1, [r3, #4]
 8018870:	f002 fb4c 	bl	801af0c <_Balloc>
 8018874:	4606      	mov	r6, r0
 8018876:	2800      	cmp	r0, #0
 8018878:	f43f aef6 	beq.w	8018668 <_strtod_l+0x420>
 801887c:	9b07      	ldr	r3, [sp, #28]
 801887e:	691a      	ldr	r2, [r3, #16]
 8018880:	ec4b ab19 	vmov	d9, sl, fp
 8018884:	3202      	adds	r2, #2
 8018886:	f103 010c 	add.w	r1, r3, #12
 801888a:	0092      	lsls	r2, r2, #2
 801888c:	300c      	adds	r0, #12
 801888e:	f001 f8fa 	bl	8019a86 <memcpy>
 8018892:	eeb0 0b49 	vmov.f64	d0, d9
 8018896:	9805      	ldr	r0, [sp, #20]
 8018898:	aa14      	add	r2, sp, #80	@ 0x50
 801889a:	a913      	add	r1, sp, #76	@ 0x4c
 801889c:	f002 ff1a 	bl	801b6d4 <__d2b>
 80188a0:	9012      	str	r0, [sp, #72]	@ 0x48
 80188a2:	2800      	cmp	r0, #0
 80188a4:	f43f aee0 	beq.w	8018668 <_strtod_l+0x420>
 80188a8:	9805      	ldr	r0, [sp, #20]
 80188aa:	2101      	movs	r1, #1
 80188ac:	f002 fc6c 	bl	801b188 <__i2b>
 80188b0:	4605      	mov	r5, r0
 80188b2:	b940      	cbnz	r0, 80188c6 <_strtod_l+0x67e>
 80188b4:	2500      	movs	r5, #0
 80188b6:	e6d7      	b.n	8018668 <_strtod_l+0x420>
 80188b8:	f04f 31ff 	mov.w	r1, #4294967295
 80188bc:	fa01 f202 	lsl.w	r2, r1, r2
 80188c0:	ea02 0a0a 	and.w	sl, r2, sl
 80188c4:	e7b0      	b.n	8018828 <_strtod_l+0x5e0>
 80188c6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80188c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80188ca:	2f00      	cmp	r7, #0
 80188cc:	bfab      	itete	ge
 80188ce:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80188d0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80188d2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80188d6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80188da:	bfac      	ite	ge
 80188dc:	eb07 0903 	addge.w	r9, r7, r3
 80188e0:	eba3 0807 	sublt.w	r8, r3, r7
 80188e4:	9b06      	ldr	r3, [sp, #24]
 80188e6:	1aff      	subs	r7, r7, r3
 80188e8:	4417      	add	r7, r2
 80188ea:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80188ee:	4a6b      	ldr	r2, [pc, #428]	@ (8018a9c <_strtod_l+0x854>)
 80188f0:	3f01      	subs	r7, #1
 80188f2:	4297      	cmp	r7, r2
 80188f4:	da51      	bge.n	801899a <_strtod_l+0x752>
 80188f6:	1bd1      	subs	r1, r2, r7
 80188f8:	291f      	cmp	r1, #31
 80188fa:	eba3 0301 	sub.w	r3, r3, r1
 80188fe:	f04f 0201 	mov.w	r2, #1
 8018902:	dc3e      	bgt.n	8018982 <_strtod_l+0x73a>
 8018904:	408a      	lsls	r2, r1
 8018906:	920c      	str	r2, [sp, #48]	@ 0x30
 8018908:	2200      	movs	r2, #0
 801890a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801890c:	eb09 0703 	add.w	r7, r9, r3
 8018910:	4498      	add	r8, r3
 8018912:	9b06      	ldr	r3, [sp, #24]
 8018914:	45b9      	cmp	r9, r7
 8018916:	4498      	add	r8, r3
 8018918:	464b      	mov	r3, r9
 801891a:	bfa8      	it	ge
 801891c:	463b      	movge	r3, r7
 801891e:	4543      	cmp	r3, r8
 8018920:	bfa8      	it	ge
 8018922:	4643      	movge	r3, r8
 8018924:	2b00      	cmp	r3, #0
 8018926:	bfc2      	ittt	gt
 8018928:	1aff      	subgt	r7, r7, r3
 801892a:	eba8 0803 	subgt.w	r8, r8, r3
 801892e:	eba9 0903 	subgt.w	r9, r9, r3
 8018932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018934:	2b00      	cmp	r3, #0
 8018936:	dd16      	ble.n	8018966 <_strtod_l+0x71e>
 8018938:	4629      	mov	r1, r5
 801893a:	9805      	ldr	r0, [sp, #20]
 801893c:	461a      	mov	r2, r3
 801893e:	f002 fce3 	bl	801b308 <__pow5mult>
 8018942:	4605      	mov	r5, r0
 8018944:	2800      	cmp	r0, #0
 8018946:	d0b5      	beq.n	80188b4 <_strtod_l+0x66c>
 8018948:	4601      	mov	r1, r0
 801894a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801894c:	9805      	ldr	r0, [sp, #20]
 801894e:	f002 fc31 	bl	801b1b4 <__multiply>
 8018952:	900f      	str	r0, [sp, #60]	@ 0x3c
 8018954:	2800      	cmp	r0, #0
 8018956:	f43f ae87 	beq.w	8018668 <_strtod_l+0x420>
 801895a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801895c:	9805      	ldr	r0, [sp, #20]
 801895e:	f002 fb15 	bl	801af8c <_Bfree>
 8018962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018964:	9312      	str	r3, [sp, #72]	@ 0x48
 8018966:	2f00      	cmp	r7, #0
 8018968:	dc1b      	bgt.n	80189a2 <_strtod_l+0x75a>
 801896a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801896c:	2b00      	cmp	r3, #0
 801896e:	dd21      	ble.n	80189b4 <_strtod_l+0x76c>
 8018970:	4631      	mov	r1, r6
 8018972:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018974:	9805      	ldr	r0, [sp, #20]
 8018976:	f002 fcc7 	bl	801b308 <__pow5mult>
 801897a:	4606      	mov	r6, r0
 801897c:	b9d0      	cbnz	r0, 80189b4 <_strtod_l+0x76c>
 801897e:	2600      	movs	r6, #0
 8018980:	e672      	b.n	8018668 <_strtod_l+0x420>
 8018982:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8018986:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801898a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 801898e:	37e2      	adds	r7, #226	@ 0xe2
 8018990:	fa02 f107 	lsl.w	r1, r2, r7
 8018994:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018996:	920c      	str	r2, [sp, #48]	@ 0x30
 8018998:	e7b8      	b.n	801890c <_strtod_l+0x6c4>
 801899a:	2200      	movs	r2, #0
 801899c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801899e:	2201      	movs	r2, #1
 80189a0:	e7f9      	b.n	8018996 <_strtod_l+0x74e>
 80189a2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80189a4:	9805      	ldr	r0, [sp, #20]
 80189a6:	463a      	mov	r2, r7
 80189a8:	f002 fd08 	bl	801b3bc <__lshift>
 80189ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d1db      	bne.n	801896a <_strtod_l+0x722>
 80189b2:	e659      	b.n	8018668 <_strtod_l+0x420>
 80189b4:	f1b8 0f00 	cmp.w	r8, #0
 80189b8:	dd07      	ble.n	80189ca <_strtod_l+0x782>
 80189ba:	4631      	mov	r1, r6
 80189bc:	9805      	ldr	r0, [sp, #20]
 80189be:	4642      	mov	r2, r8
 80189c0:	f002 fcfc 	bl	801b3bc <__lshift>
 80189c4:	4606      	mov	r6, r0
 80189c6:	2800      	cmp	r0, #0
 80189c8:	d0d9      	beq.n	801897e <_strtod_l+0x736>
 80189ca:	f1b9 0f00 	cmp.w	r9, #0
 80189ce:	dd08      	ble.n	80189e2 <_strtod_l+0x79a>
 80189d0:	4629      	mov	r1, r5
 80189d2:	9805      	ldr	r0, [sp, #20]
 80189d4:	464a      	mov	r2, r9
 80189d6:	f002 fcf1 	bl	801b3bc <__lshift>
 80189da:	4605      	mov	r5, r0
 80189dc:	2800      	cmp	r0, #0
 80189de:	f43f ae43 	beq.w	8018668 <_strtod_l+0x420>
 80189e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80189e4:	9805      	ldr	r0, [sp, #20]
 80189e6:	4632      	mov	r2, r6
 80189e8:	f002 fd70 	bl	801b4cc <__mdiff>
 80189ec:	4604      	mov	r4, r0
 80189ee:	2800      	cmp	r0, #0
 80189f0:	f43f ae3a 	beq.w	8018668 <_strtod_l+0x420>
 80189f4:	2300      	movs	r3, #0
 80189f6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80189fa:	60c3      	str	r3, [r0, #12]
 80189fc:	4629      	mov	r1, r5
 80189fe:	f002 fd49 	bl	801b494 <__mcmp>
 8018a02:	2800      	cmp	r0, #0
 8018a04:	da4e      	bge.n	8018aa4 <_strtod_l+0x85c>
 8018a06:	ea58 080a 	orrs.w	r8, r8, sl
 8018a0a:	d174      	bne.n	8018af6 <_strtod_l+0x8ae>
 8018a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d170      	bne.n	8018af6 <_strtod_l+0x8ae>
 8018a14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a18:	0d1b      	lsrs	r3, r3, #20
 8018a1a:	051b      	lsls	r3, r3, #20
 8018a1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a20:	d969      	bls.n	8018af6 <_strtod_l+0x8ae>
 8018a22:	6963      	ldr	r3, [r4, #20]
 8018a24:	b913      	cbnz	r3, 8018a2c <_strtod_l+0x7e4>
 8018a26:	6923      	ldr	r3, [r4, #16]
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	dd64      	ble.n	8018af6 <_strtod_l+0x8ae>
 8018a2c:	4621      	mov	r1, r4
 8018a2e:	2201      	movs	r2, #1
 8018a30:	9805      	ldr	r0, [sp, #20]
 8018a32:	f002 fcc3 	bl	801b3bc <__lshift>
 8018a36:	4629      	mov	r1, r5
 8018a38:	4604      	mov	r4, r0
 8018a3a:	f002 fd2b 	bl	801b494 <__mcmp>
 8018a3e:	2800      	cmp	r0, #0
 8018a40:	dd59      	ble.n	8018af6 <_strtod_l+0x8ae>
 8018a42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a46:	9a06      	ldr	r2, [sp, #24]
 8018a48:	0d1b      	lsrs	r3, r3, #20
 8018a4a:	051b      	lsls	r3, r3, #20
 8018a4c:	2a00      	cmp	r2, #0
 8018a4e:	d070      	beq.n	8018b32 <_strtod_l+0x8ea>
 8018a50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a54:	d86d      	bhi.n	8018b32 <_strtod_l+0x8ea>
 8018a56:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018a5a:	f67f ae99 	bls.w	8018790 <_strtod_l+0x548>
 8018a5e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8018a90 <_strtod_l+0x848>
 8018a62:	ec4b ab16 	vmov	d6, sl, fp
 8018a66:	4b0e      	ldr	r3, [pc, #56]	@ (8018aa0 <_strtod_l+0x858>)
 8018a68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018a6c:	ee17 2a90 	vmov	r2, s15
 8018a70:	4013      	ands	r3, r2
 8018a72:	ec5b ab17 	vmov	sl, fp, d7
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	f47f ae01 	bne.w	801867e <_strtod_l+0x436>
 8018a7c:	9a05      	ldr	r2, [sp, #20]
 8018a7e:	2322      	movs	r3, #34	@ 0x22
 8018a80:	6013      	str	r3, [r2, #0]
 8018a82:	e5fc      	b.n	801867e <_strtod_l+0x436>
 8018a84:	f3af 8000 	nop.w
 8018a88:	ffc00000 	.word	0xffc00000
 8018a8c:	41dfffff 	.word	0x41dfffff
 8018a90:	00000000 	.word	0x00000000
 8018a94:	39500000 	.word	0x39500000
 8018a98:	0801d818 	.word	0x0801d818
 8018a9c:	fffffc02 	.word	0xfffffc02
 8018aa0:	7ff00000 	.word	0x7ff00000
 8018aa4:	46d9      	mov	r9, fp
 8018aa6:	d15d      	bne.n	8018b64 <_strtod_l+0x91c>
 8018aa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018aac:	f1b8 0f00 	cmp.w	r8, #0
 8018ab0:	d02a      	beq.n	8018b08 <_strtod_l+0x8c0>
 8018ab2:	4aab      	ldr	r2, [pc, #684]	@ (8018d60 <_strtod_l+0xb18>)
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	d12a      	bne.n	8018b0e <_strtod_l+0x8c6>
 8018ab8:	9b06      	ldr	r3, [sp, #24]
 8018aba:	4652      	mov	r2, sl
 8018abc:	b1fb      	cbz	r3, 8018afe <_strtod_l+0x8b6>
 8018abe:	4ba9      	ldr	r3, [pc, #676]	@ (8018d64 <_strtod_l+0xb1c>)
 8018ac0:	ea0b 0303 	and.w	r3, fp, r3
 8018ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8018acc:	d81a      	bhi.n	8018b04 <_strtod_l+0x8bc>
 8018ace:	0d1b      	lsrs	r3, r3, #20
 8018ad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d118      	bne.n	8018b0e <_strtod_l+0x8c6>
 8018adc:	4ba2      	ldr	r3, [pc, #648]	@ (8018d68 <_strtod_l+0xb20>)
 8018ade:	4599      	cmp	r9, r3
 8018ae0:	d102      	bne.n	8018ae8 <_strtod_l+0x8a0>
 8018ae2:	3201      	adds	r2, #1
 8018ae4:	f43f adc0 	beq.w	8018668 <_strtod_l+0x420>
 8018ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8018d64 <_strtod_l+0xb1c>)
 8018aea:	ea09 0303 	and.w	r3, r9, r3
 8018aee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8018af2:	f04f 0a00 	mov.w	sl, #0
 8018af6:	9b06      	ldr	r3, [sp, #24]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d1b0      	bne.n	8018a5e <_strtod_l+0x816>
 8018afc:	e5bf      	b.n	801867e <_strtod_l+0x436>
 8018afe:	f04f 33ff 	mov.w	r3, #4294967295
 8018b02:	e7e9      	b.n	8018ad8 <_strtod_l+0x890>
 8018b04:	460b      	mov	r3, r1
 8018b06:	e7e7      	b.n	8018ad8 <_strtod_l+0x890>
 8018b08:	ea53 030a 	orrs.w	r3, r3, sl
 8018b0c:	d099      	beq.n	8018a42 <_strtod_l+0x7fa>
 8018b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b10:	b1c3      	cbz	r3, 8018b44 <_strtod_l+0x8fc>
 8018b12:	ea13 0f09 	tst.w	r3, r9
 8018b16:	d0ee      	beq.n	8018af6 <_strtod_l+0x8ae>
 8018b18:	9a06      	ldr	r2, [sp, #24]
 8018b1a:	4650      	mov	r0, sl
 8018b1c:	4659      	mov	r1, fp
 8018b1e:	f1b8 0f00 	cmp.w	r8, #0
 8018b22:	d013      	beq.n	8018b4c <_strtod_l+0x904>
 8018b24:	f7ff fb73 	bl	801820e <sulp>
 8018b28:	ee39 7b00 	vadd.f64	d7, d9, d0
 8018b2c:	ec5b ab17 	vmov	sl, fp, d7
 8018b30:	e7e1      	b.n	8018af6 <_strtod_l+0x8ae>
 8018b32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018b36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018b3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8018b42:	e7d8      	b.n	8018af6 <_strtod_l+0x8ae>
 8018b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b46:	ea13 0f0a 	tst.w	r3, sl
 8018b4a:	e7e4      	b.n	8018b16 <_strtod_l+0x8ce>
 8018b4c:	f7ff fb5f 	bl	801820e <sulp>
 8018b50:	ee39 0b40 	vsub.f64	d0, d9, d0
 8018b54:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b5c:	ec5b ab10 	vmov	sl, fp, d0
 8018b60:	d1c9      	bne.n	8018af6 <_strtod_l+0x8ae>
 8018b62:	e615      	b.n	8018790 <_strtod_l+0x548>
 8018b64:	4629      	mov	r1, r5
 8018b66:	4620      	mov	r0, r4
 8018b68:	f002 fe0c 	bl	801b784 <__ratio>
 8018b6c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8018b70:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b78:	d85d      	bhi.n	8018c36 <_strtod_l+0x9ee>
 8018b7a:	f1b8 0f00 	cmp.w	r8, #0
 8018b7e:	d164      	bne.n	8018c4a <_strtod_l+0xa02>
 8018b80:	f1ba 0f00 	cmp.w	sl, #0
 8018b84:	d14b      	bne.n	8018c1e <_strtod_l+0x9d6>
 8018b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b8a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d160      	bne.n	8018c54 <_strtod_l+0xa0c>
 8018b92:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8018b96:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b9e:	d401      	bmi.n	8018ba4 <_strtod_l+0x95c>
 8018ba0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018ba4:	eeb1 ab48 	vneg.f64	d10, d8
 8018ba8:	486e      	ldr	r0, [pc, #440]	@ (8018d64 <_strtod_l+0xb1c>)
 8018baa:	4970      	ldr	r1, [pc, #448]	@ (8018d6c <_strtod_l+0xb24>)
 8018bac:	ea09 0700 	and.w	r7, r9, r0
 8018bb0:	428f      	cmp	r7, r1
 8018bb2:	ec53 2b1a 	vmov	r2, r3, d10
 8018bb6:	d17d      	bne.n	8018cb4 <_strtod_l+0xa6c>
 8018bb8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8018bbc:	ec4b ab1c 	vmov	d12, sl, fp
 8018bc0:	eeb0 0b4c 	vmov.f64	d0, d12
 8018bc4:	f002 fd16 	bl	801b5f4 <__ulp>
 8018bc8:	4866      	ldr	r0, [pc, #408]	@ (8018d64 <_strtod_l+0xb1c>)
 8018bca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8018bce:	ee1c 3a90 	vmov	r3, s25
 8018bd2:	4a67      	ldr	r2, [pc, #412]	@ (8018d70 <_strtod_l+0xb28>)
 8018bd4:	ea03 0100 	and.w	r1, r3, r0
 8018bd8:	4291      	cmp	r1, r2
 8018bda:	ec5b ab1c 	vmov	sl, fp, d12
 8018bde:	d93c      	bls.n	8018c5a <_strtod_l+0xa12>
 8018be0:	ee19 2a90 	vmov	r2, s19
 8018be4:	4b60      	ldr	r3, [pc, #384]	@ (8018d68 <_strtod_l+0xb20>)
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d104      	bne.n	8018bf4 <_strtod_l+0x9ac>
 8018bea:	ee19 3a10 	vmov	r3, s18
 8018bee:	3301      	adds	r3, #1
 8018bf0:	f43f ad3a 	beq.w	8018668 <_strtod_l+0x420>
 8018bf4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8018d68 <_strtod_l+0xb20>
 8018bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8018bfc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018bfe:	9805      	ldr	r0, [sp, #20]
 8018c00:	f002 f9c4 	bl	801af8c <_Bfree>
 8018c04:	9805      	ldr	r0, [sp, #20]
 8018c06:	4631      	mov	r1, r6
 8018c08:	f002 f9c0 	bl	801af8c <_Bfree>
 8018c0c:	9805      	ldr	r0, [sp, #20]
 8018c0e:	4629      	mov	r1, r5
 8018c10:	f002 f9bc 	bl	801af8c <_Bfree>
 8018c14:	9805      	ldr	r0, [sp, #20]
 8018c16:	4621      	mov	r1, r4
 8018c18:	f002 f9b8 	bl	801af8c <_Bfree>
 8018c1c:	e625      	b.n	801886a <_strtod_l+0x622>
 8018c1e:	f1ba 0f01 	cmp.w	sl, #1
 8018c22:	d103      	bne.n	8018c2c <_strtod_l+0x9e4>
 8018c24:	f1bb 0f00 	cmp.w	fp, #0
 8018c28:	f43f adb2 	beq.w	8018790 <_strtod_l+0x548>
 8018c2c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018c30:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8018c34:	e7b8      	b.n	8018ba8 <_strtod_l+0x960>
 8018c36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8018c3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018c3e:	f1b8 0f00 	cmp.w	r8, #0
 8018c42:	d0af      	beq.n	8018ba4 <_strtod_l+0x95c>
 8018c44:	eeb0 ab48 	vmov.f64	d10, d8
 8018c48:	e7ae      	b.n	8018ba8 <_strtod_l+0x960>
 8018c4a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8018c4e:	eeb0 8b4a 	vmov.f64	d8, d10
 8018c52:	e7a9      	b.n	8018ba8 <_strtod_l+0x960>
 8018c54:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8018c58:	e7a6      	b.n	8018ba8 <_strtod_l+0x960>
 8018c5a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018c5e:	9b06      	ldr	r3, [sp, #24]
 8018c60:	46d9      	mov	r9, fp
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d1ca      	bne.n	8018bfc <_strtod_l+0x9b4>
 8018c66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018c6a:	0d1b      	lsrs	r3, r3, #20
 8018c6c:	051b      	lsls	r3, r3, #20
 8018c6e:	429f      	cmp	r7, r3
 8018c70:	d1c4      	bne.n	8018bfc <_strtod_l+0x9b4>
 8018c72:	ec51 0b18 	vmov	r0, r1, d8
 8018c76:	f7e7 fd87 	bl	8000788 <__aeabi_d2lz>
 8018c7a:	f7e7 fd3f 	bl	80006fc <__aeabi_l2d>
 8018c7e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8018c82:	ec41 0b17 	vmov	d7, r0, r1
 8018c86:	ea49 090a 	orr.w	r9, r9, sl
 8018c8a:	ea59 0908 	orrs.w	r9, r9, r8
 8018c8e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018c92:	d03c      	beq.n	8018d0e <_strtod_l+0xac6>
 8018c94:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8018d48 <_strtod_l+0xb00>
 8018c98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ca0:	f53f aced 	bmi.w	801867e <_strtod_l+0x436>
 8018ca4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018d50 <_strtod_l+0xb08>
 8018ca8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb0:	dda4      	ble.n	8018bfc <_strtod_l+0x9b4>
 8018cb2:	e4e4      	b.n	801867e <_strtod_l+0x436>
 8018cb4:	9906      	ldr	r1, [sp, #24]
 8018cb6:	b1e1      	cbz	r1, 8018cf2 <_strtod_l+0xaaa>
 8018cb8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8018cbc:	d819      	bhi.n	8018cf2 <_strtod_l+0xaaa>
 8018cbe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cc6:	d811      	bhi.n	8018cec <_strtod_l+0xaa4>
 8018cc8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018ccc:	ee18 3a10 	vmov	r3, s16
 8018cd0:	2b01      	cmp	r3, #1
 8018cd2:	bf38      	it	cc
 8018cd4:	2301      	movcc	r3, #1
 8018cd6:	ee08 3a10 	vmov	s16, r3
 8018cda:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018cde:	f1b8 0f00 	cmp.w	r8, #0
 8018ce2:	d111      	bne.n	8018d08 <_strtod_l+0xac0>
 8018ce4:	eeb1 7b48 	vneg.f64	d7, d8
 8018ce8:	ec53 2b17 	vmov	r2, r3, d7
 8018cec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8018cf0:	1bcb      	subs	r3, r1, r7
 8018cf2:	eeb0 0b49 	vmov.f64	d0, d9
 8018cf6:	ec43 2b1a 	vmov	d10, r2, r3
 8018cfa:	f002 fc7b 	bl	801b5f4 <__ulp>
 8018cfe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8018d02:	ec5b ab19 	vmov	sl, fp, d9
 8018d06:	e7aa      	b.n	8018c5e <_strtod_l+0xa16>
 8018d08:	eeb0 7b48 	vmov.f64	d7, d8
 8018d0c:	e7ec      	b.n	8018ce8 <_strtod_l+0xaa0>
 8018d0e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8018d58 <_strtod_l+0xb10>
 8018d12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1a:	f57f af6f 	bpl.w	8018bfc <_strtod_l+0x9b4>
 8018d1e:	e4ae      	b.n	801867e <_strtod_l+0x436>
 8018d20:	2300      	movs	r3, #0
 8018d22:	9308      	str	r3, [sp, #32]
 8018d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018d26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d28:	6013      	str	r3, [r2, #0]
 8018d2a:	f7ff bacc 	b.w	80182c6 <_strtod_l+0x7e>
 8018d2e:	2a65      	cmp	r2, #101	@ 0x65
 8018d30:	f43f abbc 	beq.w	80184ac <_strtod_l+0x264>
 8018d34:	2a45      	cmp	r2, #69	@ 0x45
 8018d36:	f43f abb9 	beq.w	80184ac <_strtod_l+0x264>
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	9306      	str	r3, [sp, #24]
 8018d3e:	f7ff bbf0 	b.w	8018522 <_strtod_l+0x2da>
 8018d42:	bf00      	nop
 8018d44:	f3af 8000 	nop.w
 8018d48:	94a03595 	.word	0x94a03595
 8018d4c:	3fdfffff 	.word	0x3fdfffff
 8018d50:	35afe535 	.word	0x35afe535
 8018d54:	3fe00000 	.word	0x3fe00000
 8018d58:	94a03595 	.word	0x94a03595
 8018d5c:	3fcfffff 	.word	0x3fcfffff
 8018d60:	000fffff 	.word	0x000fffff
 8018d64:	7ff00000 	.word	0x7ff00000
 8018d68:	7fefffff 	.word	0x7fefffff
 8018d6c:	7fe00000 	.word	0x7fe00000
 8018d70:	7c9fffff 	.word	0x7c9fffff

08018d74 <strtod>:
 8018d74:	460a      	mov	r2, r1
 8018d76:	4601      	mov	r1, r0
 8018d78:	4802      	ldr	r0, [pc, #8]	@ (8018d84 <strtod+0x10>)
 8018d7a:	4b03      	ldr	r3, [pc, #12]	@ (8018d88 <strtod+0x14>)
 8018d7c:	6800      	ldr	r0, [r0, #0]
 8018d7e:	f7ff ba63 	b.w	8018248 <_strtod_l>
 8018d82:	bf00      	nop
 8018d84:	2400027c 	.word	0x2400027c
 8018d88:	24000110 	.word	0x24000110

08018d8c <_strtol_l.constprop.0>:
 8018d8c:	2b24      	cmp	r3, #36	@ 0x24
 8018d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d92:	4686      	mov	lr, r0
 8018d94:	4690      	mov	r8, r2
 8018d96:	d801      	bhi.n	8018d9c <_strtol_l.constprop.0+0x10>
 8018d98:	2b01      	cmp	r3, #1
 8018d9a:	d106      	bne.n	8018daa <_strtol_l.constprop.0+0x1e>
 8018d9c:	f000 fe46 	bl	8019a2c <__errno>
 8018da0:	2316      	movs	r3, #22
 8018da2:	6003      	str	r3, [r0, #0]
 8018da4:	2000      	movs	r0, #0
 8018da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018daa:	4834      	ldr	r0, [pc, #208]	@ (8018e7c <_strtol_l.constprop.0+0xf0>)
 8018dac:	460d      	mov	r5, r1
 8018dae:	462a      	mov	r2, r5
 8018db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018db4:	5d06      	ldrb	r6, [r0, r4]
 8018db6:	f016 0608 	ands.w	r6, r6, #8
 8018dba:	d1f8      	bne.n	8018dae <_strtol_l.constprop.0+0x22>
 8018dbc:	2c2d      	cmp	r4, #45	@ 0x2d
 8018dbe:	d12d      	bne.n	8018e1c <_strtol_l.constprop.0+0x90>
 8018dc0:	782c      	ldrb	r4, [r5, #0]
 8018dc2:	2601      	movs	r6, #1
 8018dc4:	1c95      	adds	r5, r2, #2
 8018dc6:	f033 0210 	bics.w	r2, r3, #16
 8018dca:	d109      	bne.n	8018de0 <_strtol_l.constprop.0+0x54>
 8018dcc:	2c30      	cmp	r4, #48	@ 0x30
 8018dce:	d12a      	bne.n	8018e26 <_strtol_l.constprop.0+0x9a>
 8018dd0:	782a      	ldrb	r2, [r5, #0]
 8018dd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8018dd6:	2a58      	cmp	r2, #88	@ 0x58
 8018dd8:	d125      	bne.n	8018e26 <_strtol_l.constprop.0+0x9a>
 8018dda:	786c      	ldrb	r4, [r5, #1]
 8018ddc:	2310      	movs	r3, #16
 8018dde:	3502      	adds	r5, #2
 8018de0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8018de4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018de8:	2200      	movs	r2, #0
 8018dea:	fbbc f9f3 	udiv	r9, ip, r3
 8018dee:	4610      	mov	r0, r2
 8018df0:	fb03 ca19 	mls	sl, r3, r9, ip
 8018df4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8018df8:	2f09      	cmp	r7, #9
 8018dfa:	d81b      	bhi.n	8018e34 <_strtol_l.constprop.0+0xa8>
 8018dfc:	463c      	mov	r4, r7
 8018dfe:	42a3      	cmp	r3, r4
 8018e00:	dd27      	ble.n	8018e52 <_strtol_l.constprop.0+0xc6>
 8018e02:	1c57      	adds	r7, r2, #1
 8018e04:	d007      	beq.n	8018e16 <_strtol_l.constprop.0+0x8a>
 8018e06:	4581      	cmp	r9, r0
 8018e08:	d320      	bcc.n	8018e4c <_strtol_l.constprop.0+0xc0>
 8018e0a:	d101      	bne.n	8018e10 <_strtol_l.constprop.0+0x84>
 8018e0c:	45a2      	cmp	sl, r4
 8018e0e:	db1d      	blt.n	8018e4c <_strtol_l.constprop.0+0xc0>
 8018e10:	fb00 4003 	mla	r0, r0, r3, r4
 8018e14:	2201      	movs	r2, #1
 8018e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e1a:	e7eb      	b.n	8018df4 <_strtol_l.constprop.0+0x68>
 8018e1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8018e1e:	bf04      	itt	eq
 8018e20:	782c      	ldrbeq	r4, [r5, #0]
 8018e22:	1c95      	addeq	r5, r2, #2
 8018e24:	e7cf      	b.n	8018dc6 <_strtol_l.constprop.0+0x3a>
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d1da      	bne.n	8018de0 <_strtol_l.constprop.0+0x54>
 8018e2a:	2c30      	cmp	r4, #48	@ 0x30
 8018e2c:	bf0c      	ite	eq
 8018e2e:	2308      	moveq	r3, #8
 8018e30:	230a      	movne	r3, #10
 8018e32:	e7d5      	b.n	8018de0 <_strtol_l.constprop.0+0x54>
 8018e34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8018e38:	2f19      	cmp	r7, #25
 8018e3a:	d801      	bhi.n	8018e40 <_strtol_l.constprop.0+0xb4>
 8018e3c:	3c37      	subs	r4, #55	@ 0x37
 8018e3e:	e7de      	b.n	8018dfe <_strtol_l.constprop.0+0x72>
 8018e40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8018e44:	2f19      	cmp	r7, #25
 8018e46:	d804      	bhi.n	8018e52 <_strtol_l.constprop.0+0xc6>
 8018e48:	3c57      	subs	r4, #87	@ 0x57
 8018e4a:	e7d8      	b.n	8018dfe <_strtol_l.constprop.0+0x72>
 8018e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8018e50:	e7e1      	b.n	8018e16 <_strtol_l.constprop.0+0x8a>
 8018e52:	1c53      	adds	r3, r2, #1
 8018e54:	d108      	bne.n	8018e68 <_strtol_l.constprop.0+0xdc>
 8018e56:	2322      	movs	r3, #34	@ 0x22
 8018e58:	f8ce 3000 	str.w	r3, [lr]
 8018e5c:	4660      	mov	r0, ip
 8018e5e:	f1b8 0f00 	cmp.w	r8, #0
 8018e62:	d0a0      	beq.n	8018da6 <_strtol_l.constprop.0+0x1a>
 8018e64:	1e69      	subs	r1, r5, #1
 8018e66:	e006      	b.n	8018e76 <_strtol_l.constprop.0+0xea>
 8018e68:	b106      	cbz	r6, 8018e6c <_strtol_l.constprop.0+0xe0>
 8018e6a:	4240      	negs	r0, r0
 8018e6c:	f1b8 0f00 	cmp.w	r8, #0
 8018e70:	d099      	beq.n	8018da6 <_strtol_l.constprop.0+0x1a>
 8018e72:	2a00      	cmp	r2, #0
 8018e74:	d1f6      	bne.n	8018e64 <_strtol_l.constprop.0+0xd8>
 8018e76:	f8c8 1000 	str.w	r1, [r8]
 8018e7a:	e794      	b.n	8018da6 <_strtol_l.constprop.0+0x1a>
 8018e7c:	0801d841 	.word	0x0801d841

08018e80 <strtol>:
 8018e80:	4613      	mov	r3, r2
 8018e82:	460a      	mov	r2, r1
 8018e84:	4601      	mov	r1, r0
 8018e86:	4802      	ldr	r0, [pc, #8]	@ (8018e90 <strtol+0x10>)
 8018e88:	6800      	ldr	r0, [r0, #0]
 8018e8a:	f7ff bf7f 	b.w	8018d8c <_strtol_l.constprop.0>
 8018e8e:	bf00      	nop
 8018e90:	2400027c 	.word	0x2400027c

08018e94 <__cvt>:
 8018e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e96:	ed2d 8b02 	vpush	{d8}
 8018e9a:	eeb0 8b40 	vmov.f64	d8, d0
 8018e9e:	b085      	sub	sp, #20
 8018ea0:	4617      	mov	r7, r2
 8018ea2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018ea4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018ea6:	ee18 2a90 	vmov	r2, s17
 8018eaa:	f025 0520 	bic.w	r5, r5, #32
 8018eae:	2a00      	cmp	r2, #0
 8018eb0:	bfb6      	itet	lt
 8018eb2:	222d      	movlt	r2, #45	@ 0x2d
 8018eb4:	2200      	movge	r2, #0
 8018eb6:	eeb1 8b40 	vneglt.f64	d8, d0
 8018eba:	2d46      	cmp	r5, #70	@ 0x46
 8018ebc:	460c      	mov	r4, r1
 8018ebe:	701a      	strb	r2, [r3, #0]
 8018ec0:	d004      	beq.n	8018ecc <__cvt+0x38>
 8018ec2:	2d45      	cmp	r5, #69	@ 0x45
 8018ec4:	d100      	bne.n	8018ec8 <__cvt+0x34>
 8018ec6:	3401      	adds	r4, #1
 8018ec8:	2102      	movs	r1, #2
 8018eca:	e000      	b.n	8018ece <__cvt+0x3a>
 8018ecc:	2103      	movs	r1, #3
 8018ece:	ab03      	add	r3, sp, #12
 8018ed0:	9301      	str	r3, [sp, #4]
 8018ed2:	ab02      	add	r3, sp, #8
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	4622      	mov	r2, r4
 8018ed8:	4633      	mov	r3, r6
 8018eda:	eeb0 0b48 	vmov.f64	d0, d8
 8018ede:	f000 fe73 	bl	8019bc8 <_dtoa_r>
 8018ee2:	2d47      	cmp	r5, #71	@ 0x47
 8018ee4:	d114      	bne.n	8018f10 <__cvt+0x7c>
 8018ee6:	07fb      	lsls	r3, r7, #31
 8018ee8:	d50a      	bpl.n	8018f00 <__cvt+0x6c>
 8018eea:	1902      	adds	r2, r0, r4
 8018eec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef4:	bf08      	it	eq
 8018ef6:	9203      	streq	r2, [sp, #12]
 8018ef8:	2130      	movs	r1, #48	@ 0x30
 8018efa:	9b03      	ldr	r3, [sp, #12]
 8018efc:	4293      	cmp	r3, r2
 8018efe:	d319      	bcc.n	8018f34 <__cvt+0xa0>
 8018f00:	9b03      	ldr	r3, [sp, #12]
 8018f02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018f04:	1a1b      	subs	r3, r3, r0
 8018f06:	6013      	str	r3, [r2, #0]
 8018f08:	b005      	add	sp, #20
 8018f0a:	ecbd 8b02 	vpop	{d8}
 8018f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f10:	2d46      	cmp	r5, #70	@ 0x46
 8018f12:	eb00 0204 	add.w	r2, r0, r4
 8018f16:	d1e9      	bne.n	8018eec <__cvt+0x58>
 8018f18:	7803      	ldrb	r3, [r0, #0]
 8018f1a:	2b30      	cmp	r3, #48	@ 0x30
 8018f1c:	d107      	bne.n	8018f2e <__cvt+0x9a>
 8018f1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f26:	bf1c      	itt	ne
 8018f28:	f1c4 0401 	rsbne	r4, r4, #1
 8018f2c:	6034      	strne	r4, [r6, #0]
 8018f2e:	6833      	ldr	r3, [r6, #0]
 8018f30:	441a      	add	r2, r3
 8018f32:	e7db      	b.n	8018eec <__cvt+0x58>
 8018f34:	1c5c      	adds	r4, r3, #1
 8018f36:	9403      	str	r4, [sp, #12]
 8018f38:	7019      	strb	r1, [r3, #0]
 8018f3a:	e7de      	b.n	8018efa <__cvt+0x66>

08018f3c <__exponent>:
 8018f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f3e:	2900      	cmp	r1, #0
 8018f40:	bfba      	itte	lt
 8018f42:	4249      	neglt	r1, r1
 8018f44:	232d      	movlt	r3, #45	@ 0x2d
 8018f46:	232b      	movge	r3, #43	@ 0x2b
 8018f48:	2909      	cmp	r1, #9
 8018f4a:	7002      	strb	r2, [r0, #0]
 8018f4c:	7043      	strb	r3, [r0, #1]
 8018f4e:	dd29      	ble.n	8018fa4 <__exponent+0x68>
 8018f50:	f10d 0307 	add.w	r3, sp, #7
 8018f54:	461d      	mov	r5, r3
 8018f56:	270a      	movs	r7, #10
 8018f58:	461a      	mov	r2, r3
 8018f5a:	fbb1 f6f7 	udiv	r6, r1, r7
 8018f5e:	fb07 1416 	mls	r4, r7, r6, r1
 8018f62:	3430      	adds	r4, #48	@ 0x30
 8018f64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018f68:	460c      	mov	r4, r1
 8018f6a:	2c63      	cmp	r4, #99	@ 0x63
 8018f6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f70:	4631      	mov	r1, r6
 8018f72:	dcf1      	bgt.n	8018f58 <__exponent+0x1c>
 8018f74:	3130      	adds	r1, #48	@ 0x30
 8018f76:	1e94      	subs	r4, r2, #2
 8018f78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018f7c:	1c41      	adds	r1, r0, #1
 8018f7e:	4623      	mov	r3, r4
 8018f80:	42ab      	cmp	r3, r5
 8018f82:	d30a      	bcc.n	8018f9a <__exponent+0x5e>
 8018f84:	f10d 0309 	add.w	r3, sp, #9
 8018f88:	1a9b      	subs	r3, r3, r2
 8018f8a:	42ac      	cmp	r4, r5
 8018f8c:	bf88      	it	hi
 8018f8e:	2300      	movhi	r3, #0
 8018f90:	3302      	adds	r3, #2
 8018f92:	4403      	add	r3, r0
 8018f94:	1a18      	subs	r0, r3, r0
 8018f96:	b003      	add	sp, #12
 8018f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018f9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018fa2:	e7ed      	b.n	8018f80 <__exponent+0x44>
 8018fa4:	2330      	movs	r3, #48	@ 0x30
 8018fa6:	3130      	adds	r1, #48	@ 0x30
 8018fa8:	7083      	strb	r3, [r0, #2]
 8018faa:	70c1      	strb	r1, [r0, #3]
 8018fac:	1d03      	adds	r3, r0, #4
 8018fae:	e7f1      	b.n	8018f94 <__exponent+0x58>

08018fb0 <_printf_float>:
 8018fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb4:	b08d      	sub	sp, #52	@ 0x34
 8018fb6:	460c      	mov	r4, r1
 8018fb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018fbc:	4616      	mov	r6, r2
 8018fbe:	461f      	mov	r7, r3
 8018fc0:	4605      	mov	r5, r0
 8018fc2:	f000 fce9 	bl	8019998 <_localeconv_r>
 8018fc6:	f8d0 b000 	ldr.w	fp, [r0]
 8018fca:	4658      	mov	r0, fp
 8018fcc:	f7e7 fa00 	bl	80003d0 <strlen>
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8018fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018fdc:	6822      	ldr	r2, [r4, #0]
 8018fde:	9005      	str	r0, [sp, #20]
 8018fe0:	3307      	adds	r3, #7
 8018fe2:	f023 0307 	bic.w	r3, r3, #7
 8018fe6:	f103 0108 	add.w	r1, r3, #8
 8018fea:	f8c8 1000 	str.w	r1, [r8]
 8018fee:	ed93 0b00 	vldr	d0, [r3]
 8018ff2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8019250 <_printf_float+0x2a0>
 8018ff6:	eeb0 7bc0 	vabs.f64	d7, d0
 8018ffa:	eeb4 7b46 	vcmp.f64	d7, d6
 8018ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019002:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019006:	dd24      	ble.n	8019052 <_printf_float+0xa2>
 8019008:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801900c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019010:	d502      	bpl.n	8019018 <_printf_float+0x68>
 8019012:	232d      	movs	r3, #45	@ 0x2d
 8019014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019018:	498f      	ldr	r1, [pc, #572]	@ (8019258 <_printf_float+0x2a8>)
 801901a:	4b90      	ldr	r3, [pc, #576]	@ (801925c <_printf_float+0x2ac>)
 801901c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019020:	bf94      	ite	ls
 8019022:	4688      	movls	r8, r1
 8019024:	4698      	movhi	r8, r3
 8019026:	f022 0204 	bic.w	r2, r2, #4
 801902a:	2303      	movs	r3, #3
 801902c:	6123      	str	r3, [r4, #16]
 801902e:	6022      	str	r2, [r4, #0]
 8019030:	f04f 0a00 	mov.w	sl, #0
 8019034:	9700      	str	r7, [sp, #0]
 8019036:	4633      	mov	r3, r6
 8019038:	aa0b      	add	r2, sp, #44	@ 0x2c
 801903a:	4621      	mov	r1, r4
 801903c:	4628      	mov	r0, r5
 801903e:	f000 f9d1 	bl	80193e4 <_printf_common>
 8019042:	3001      	adds	r0, #1
 8019044:	f040 8089 	bne.w	801915a <_printf_float+0x1aa>
 8019048:	f04f 30ff 	mov.w	r0, #4294967295
 801904c:	b00d      	add	sp, #52	@ 0x34
 801904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019052:	eeb4 0b40 	vcmp.f64	d0, d0
 8019056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801905a:	d709      	bvc.n	8019070 <_printf_float+0xc0>
 801905c:	ee10 3a90 	vmov	r3, s1
 8019060:	2b00      	cmp	r3, #0
 8019062:	bfbc      	itt	lt
 8019064:	232d      	movlt	r3, #45	@ 0x2d
 8019066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801906a:	497d      	ldr	r1, [pc, #500]	@ (8019260 <_printf_float+0x2b0>)
 801906c:	4b7d      	ldr	r3, [pc, #500]	@ (8019264 <_printf_float+0x2b4>)
 801906e:	e7d5      	b.n	801901c <_printf_float+0x6c>
 8019070:	6863      	ldr	r3, [r4, #4]
 8019072:	1c59      	adds	r1, r3, #1
 8019074:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8019078:	d139      	bne.n	80190ee <_printf_float+0x13e>
 801907a:	2306      	movs	r3, #6
 801907c:	6063      	str	r3, [r4, #4]
 801907e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019082:	2300      	movs	r3, #0
 8019084:	6022      	str	r2, [r4, #0]
 8019086:	9303      	str	r3, [sp, #12]
 8019088:	ab0a      	add	r3, sp, #40	@ 0x28
 801908a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801908e:	ab09      	add	r3, sp, #36	@ 0x24
 8019090:	9300      	str	r3, [sp, #0]
 8019092:	6861      	ldr	r1, [r4, #4]
 8019094:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019098:	4628      	mov	r0, r5
 801909a:	f7ff fefb 	bl	8018e94 <__cvt>
 801909e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80190a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80190a4:	4680      	mov	r8, r0
 80190a6:	d129      	bne.n	80190fc <_printf_float+0x14c>
 80190a8:	1cc8      	adds	r0, r1, #3
 80190aa:	db02      	blt.n	80190b2 <_printf_float+0x102>
 80190ac:	6863      	ldr	r3, [r4, #4]
 80190ae:	4299      	cmp	r1, r3
 80190b0:	dd41      	ble.n	8019136 <_printf_float+0x186>
 80190b2:	f1a9 0902 	sub.w	r9, r9, #2
 80190b6:	fa5f f989 	uxtb.w	r9, r9
 80190ba:	3901      	subs	r1, #1
 80190bc:	464a      	mov	r2, r9
 80190be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80190c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80190c4:	f7ff ff3a 	bl	8018f3c <__exponent>
 80190c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80190ca:	1813      	adds	r3, r2, r0
 80190cc:	2a01      	cmp	r2, #1
 80190ce:	4682      	mov	sl, r0
 80190d0:	6123      	str	r3, [r4, #16]
 80190d2:	dc02      	bgt.n	80190da <_printf_float+0x12a>
 80190d4:	6822      	ldr	r2, [r4, #0]
 80190d6:	07d2      	lsls	r2, r2, #31
 80190d8:	d501      	bpl.n	80190de <_printf_float+0x12e>
 80190da:	3301      	adds	r3, #1
 80190dc:	6123      	str	r3, [r4, #16]
 80190de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d0a6      	beq.n	8019034 <_printf_float+0x84>
 80190e6:	232d      	movs	r3, #45	@ 0x2d
 80190e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80190ec:	e7a2      	b.n	8019034 <_printf_float+0x84>
 80190ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80190f2:	d1c4      	bne.n	801907e <_printf_float+0xce>
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d1c2      	bne.n	801907e <_printf_float+0xce>
 80190f8:	2301      	movs	r3, #1
 80190fa:	e7bf      	b.n	801907c <_printf_float+0xcc>
 80190fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019100:	d9db      	bls.n	80190ba <_printf_float+0x10a>
 8019102:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019106:	d118      	bne.n	801913a <_printf_float+0x18a>
 8019108:	2900      	cmp	r1, #0
 801910a:	6863      	ldr	r3, [r4, #4]
 801910c:	dd0b      	ble.n	8019126 <_printf_float+0x176>
 801910e:	6121      	str	r1, [r4, #16]
 8019110:	b913      	cbnz	r3, 8019118 <_printf_float+0x168>
 8019112:	6822      	ldr	r2, [r4, #0]
 8019114:	07d0      	lsls	r0, r2, #31
 8019116:	d502      	bpl.n	801911e <_printf_float+0x16e>
 8019118:	3301      	adds	r3, #1
 801911a:	440b      	add	r3, r1
 801911c:	6123      	str	r3, [r4, #16]
 801911e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019120:	f04f 0a00 	mov.w	sl, #0
 8019124:	e7db      	b.n	80190de <_printf_float+0x12e>
 8019126:	b913      	cbnz	r3, 801912e <_printf_float+0x17e>
 8019128:	6822      	ldr	r2, [r4, #0]
 801912a:	07d2      	lsls	r2, r2, #31
 801912c:	d501      	bpl.n	8019132 <_printf_float+0x182>
 801912e:	3302      	adds	r3, #2
 8019130:	e7f4      	b.n	801911c <_printf_float+0x16c>
 8019132:	2301      	movs	r3, #1
 8019134:	e7f2      	b.n	801911c <_printf_float+0x16c>
 8019136:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801913a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801913c:	4299      	cmp	r1, r3
 801913e:	db05      	blt.n	801914c <_printf_float+0x19c>
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	6121      	str	r1, [r4, #16]
 8019144:	07d8      	lsls	r0, r3, #31
 8019146:	d5ea      	bpl.n	801911e <_printf_float+0x16e>
 8019148:	1c4b      	adds	r3, r1, #1
 801914a:	e7e7      	b.n	801911c <_printf_float+0x16c>
 801914c:	2900      	cmp	r1, #0
 801914e:	bfd4      	ite	le
 8019150:	f1c1 0202 	rsble	r2, r1, #2
 8019154:	2201      	movgt	r2, #1
 8019156:	4413      	add	r3, r2
 8019158:	e7e0      	b.n	801911c <_printf_float+0x16c>
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	055a      	lsls	r2, r3, #21
 801915e:	d407      	bmi.n	8019170 <_printf_float+0x1c0>
 8019160:	6923      	ldr	r3, [r4, #16]
 8019162:	4642      	mov	r2, r8
 8019164:	4631      	mov	r1, r6
 8019166:	4628      	mov	r0, r5
 8019168:	47b8      	blx	r7
 801916a:	3001      	adds	r0, #1
 801916c:	d12a      	bne.n	80191c4 <_printf_float+0x214>
 801916e:	e76b      	b.n	8019048 <_printf_float+0x98>
 8019170:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019174:	f240 80e0 	bls.w	8019338 <_printf_float+0x388>
 8019178:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801917c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019184:	d133      	bne.n	80191ee <_printf_float+0x23e>
 8019186:	4a38      	ldr	r2, [pc, #224]	@ (8019268 <_printf_float+0x2b8>)
 8019188:	2301      	movs	r3, #1
 801918a:	4631      	mov	r1, r6
 801918c:	4628      	mov	r0, r5
 801918e:	47b8      	blx	r7
 8019190:	3001      	adds	r0, #1
 8019192:	f43f af59 	beq.w	8019048 <_printf_float+0x98>
 8019196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801919a:	4543      	cmp	r3, r8
 801919c:	db02      	blt.n	80191a4 <_printf_float+0x1f4>
 801919e:	6823      	ldr	r3, [r4, #0]
 80191a0:	07d8      	lsls	r0, r3, #31
 80191a2:	d50f      	bpl.n	80191c4 <_printf_float+0x214>
 80191a4:	9b05      	ldr	r3, [sp, #20]
 80191a6:	465a      	mov	r2, fp
 80191a8:	4631      	mov	r1, r6
 80191aa:	4628      	mov	r0, r5
 80191ac:	47b8      	blx	r7
 80191ae:	3001      	adds	r0, #1
 80191b0:	f43f af4a 	beq.w	8019048 <_printf_float+0x98>
 80191b4:	f04f 0900 	mov.w	r9, #0
 80191b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80191bc:	f104 0a1a 	add.w	sl, r4, #26
 80191c0:	45c8      	cmp	r8, r9
 80191c2:	dc09      	bgt.n	80191d8 <_printf_float+0x228>
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	079b      	lsls	r3, r3, #30
 80191c8:	f100 8107 	bmi.w	80193da <_printf_float+0x42a>
 80191cc:	68e0      	ldr	r0, [r4, #12]
 80191ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191d0:	4298      	cmp	r0, r3
 80191d2:	bfb8      	it	lt
 80191d4:	4618      	movlt	r0, r3
 80191d6:	e739      	b.n	801904c <_printf_float+0x9c>
 80191d8:	2301      	movs	r3, #1
 80191da:	4652      	mov	r2, sl
 80191dc:	4631      	mov	r1, r6
 80191de:	4628      	mov	r0, r5
 80191e0:	47b8      	blx	r7
 80191e2:	3001      	adds	r0, #1
 80191e4:	f43f af30 	beq.w	8019048 <_printf_float+0x98>
 80191e8:	f109 0901 	add.w	r9, r9, #1
 80191ec:	e7e8      	b.n	80191c0 <_printf_float+0x210>
 80191ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	dc3b      	bgt.n	801926c <_printf_float+0x2bc>
 80191f4:	4a1c      	ldr	r2, [pc, #112]	@ (8019268 <_printf_float+0x2b8>)
 80191f6:	2301      	movs	r3, #1
 80191f8:	4631      	mov	r1, r6
 80191fa:	4628      	mov	r0, r5
 80191fc:	47b8      	blx	r7
 80191fe:	3001      	adds	r0, #1
 8019200:	f43f af22 	beq.w	8019048 <_printf_float+0x98>
 8019204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019208:	ea59 0303 	orrs.w	r3, r9, r3
 801920c:	d102      	bne.n	8019214 <_printf_float+0x264>
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	07d9      	lsls	r1, r3, #31
 8019212:	d5d7      	bpl.n	80191c4 <_printf_float+0x214>
 8019214:	9b05      	ldr	r3, [sp, #20]
 8019216:	465a      	mov	r2, fp
 8019218:	4631      	mov	r1, r6
 801921a:	4628      	mov	r0, r5
 801921c:	47b8      	blx	r7
 801921e:	3001      	adds	r0, #1
 8019220:	f43f af12 	beq.w	8019048 <_printf_float+0x98>
 8019224:	f04f 0a00 	mov.w	sl, #0
 8019228:	f104 0b1a 	add.w	fp, r4, #26
 801922c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801922e:	425b      	negs	r3, r3
 8019230:	4553      	cmp	r3, sl
 8019232:	dc01      	bgt.n	8019238 <_printf_float+0x288>
 8019234:	464b      	mov	r3, r9
 8019236:	e794      	b.n	8019162 <_printf_float+0x1b2>
 8019238:	2301      	movs	r3, #1
 801923a:	465a      	mov	r2, fp
 801923c:	4631      	mov	r1, r6
 801923e:	4628      	mov	r0, r5
 8019240:	47b8      	blx	r7
 8019242:	3001      	adds	r0, #1
 8019244:	f43f af00 	beq.w	8019048 <_printf_float+0x98>
 8019248:	f10a 0a01 	add.w	sl, sl, #1
 801924c:	e7ee      	b.n	801922c <_printf_float+0x27c>
 801924e:	bf00      	nop
 8019250:	ffffffff 	.word	0xffffffff
 8019254:	7fefffff 	.word	0x7fefffff
 8019258:	0801d941 	.word	0x0801d941
 801925c:	0801d945 	.word	0x0801d945
 8019260:	0801d949 	.word	0x0801d949
 8019264:	0801d94d 	.word	0x0801d94d
 8019268:	0801d951 	.word	0x0801d951
 801926c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801926e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019272:	4553      	cmp	r3, sl
 8019274:	bfa8      	it	ge
 8019276:	4653      	movge	r3, sl
 8019278:	2b00      	cmp	r3, #0
 801927a:	4699      	mov	r9, r3
 801927c:	dc37      	bgt.n	80192ee <_printf_float+0x33e>
 801927e:	2300      	movs	r3, #0
 8019280:	9307      	str	r3, [sp, #28]
 8019282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019286:	f104 021a 	add.w	r2, r4, #26
 801928a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801928c:	9907      	ldr	r1, [sp, #28]
 801928e:	9306      	str	r3, [sp, #24]
 8019290:	eba3 0309 	sub.w	r3, r3, r9
 8019294:	428b      	cmp	r3, r1
 8019296:	dc31      	bgt.n	80192fc <_printf_float+0x34c>
 8019298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801929a:	459a      	cmp	sl, r3
 801929c:	dc3b      	bgt.n	8019316 <_printf_float+0x366>
 801929e:	6823      	ldr	r3, [r4, #0]
 80192a0:	07da      	lsls	r2, r3, #31
 80192a2:	d438      	bmi.n	8019316 <_printf_float+0x366>
 80192a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192a6:	ebaa 0903 	sub.w	r9, sl, r3
 80192aa:	9b06      	ldr	r3, [sp, #24]
 80192ac:	ebaa 0303 	sub.w	r3, sl, r3
 80192b0:	4599      	cmp	r9, r3
 80192b2:	bfa8      	it	ge
 80192b4:	4699      	movge	r9, r3
 80192b6:	f1b9 0f00 	cmp.w	r9, #0
 80192ba:	dc34      	bgt.n	8019326 <_printf_float+0x376>
 80192bc:	f04f 0800 	mov.w	r8, #0
 80192c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192c4:	f104 0b1a 	add.w	fp, r4, #26
 80192c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192ca:	ebaa 0303 	sub.w	r3, sl, r3
 80192ce:	eba3 0309 	sub.w	r3, r3, r9
 80192d2:	4543      	cmp	r3, r8
 80192d4:	f77f af76 	ble.w	80191c4 <_printf_float+0x214>
 80192d8:	2301      	movs	r3, #1
 80192da:	465a      	mov	r2, fp
 80192dc:	4631      	mov	r1, r6
 80192de:	4628      	mov	r0, r5
 80192e0:	47b8      	blx	r7
 80192e2:	3001      	adds	r0, #1
 80192e4:	f43f aeb0 	beq.w	8019048 <_printf_float+0x98>
 80192e8:	f108 0801 	add.w	r8, r8, #1
 80192ec:	e7ec      	b.n	80192c8 <_printf_float+0x318>
 80192ee:	4642      	mov	r2, r8
 80192f0:	4631      	mov	r1, r6
 80192f2:	4628      	mov	r0, r5
 80192f4:	47b8      	blx	r7
 80192f6:	3001      	adds	r0, #1
 80192f8:	d1c1      	bne.n	801927e <_printf_float+0x2ce>
 80192fa:	e6a5      	b.n	8019048 <_printf_float+0x98>
 80192fc:	2301      	movs	r3, #1
 80192fe:	4631      	mov	r1, r6
 8019300:	4628      	mov	r0, r5
 8019302:	9206      	str	r2, [sp, #24]
 8019304:	47b8      	blx	r7
 8019306:	3001      	adds	r0, #1
 8019308:	f43f ae9e 	beq.w	8019048 <_printf_float+0x98>
 801930c:	9b07      	ldr	r3, [sp, #28]
 801930e:	9a06      	ldr	r2, [sp, #24]
 8019310:	3301      	adds	r3, #1
 8019312:	9307      	str	r3, [sp, #28]
 8019314:	e7b9      	b.n	801928a <_printf_float+0x2da>
 8019316:	9b05      	ldr	r3, [sp, #20]
 8019318:	465a      	mov	r2, fp
 801931a:	4631      	mov	r1, r6
 801931c:	4628      	mov	r0, r5
 801931e:	47b8      	blx	r7
 8019320:	3001      	adds	r0, #1
 8019322:	d1bf      	bne.n	80192a4 <_printf_float+0x2f4>
 8019324:	e690      	b.n	8019048 <_printf_float+0x98>
 8019326:	9a06      	ldr	r2, [sp, #24]
 8019328:	464b      	mov	r3, r9
 801932a:	4442      	add	r2, r8
 801932c:	4631      	mov	r1, r6
 801932e:	4628      	mov	r0, r5
 8019330:	47b8      	blx	r7
 8019332:	3001      	adds	r0, #1
 8019334:	d1c2      	bne.n	80192bc <_printf_float+0x30c>
 8019336:	e687      	b.n	8019048 <_printf_float+0x98>
 8019338:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801933c:	f1b9 0f01 	cmp.w	r9, #1
 8019340:	dc01      	bgt.n	8019346 <_printf_float+0x396>
 8019342:	07db      	lsls	r3, r3, #31
 8019344:	d536      	bpl.n	80193b4 <_printf_float+0x404>
 8019346:	2301      	movs	r3, #1
 8019348:	4642      	mov	r2, r8
 801934a:	4631      	mov	r1, r6
 801934c:	4628      	mov	r0, r5
 801934e:	47b8      	blx	r7
 8019350:	3001      	adds	r0, #1
 8019352:	f43f ae79 	beq.w	8019048 <_printf_float+0x98>
 8019356:	9b05      	ldr	r3, [sp, #20]
 8019358:	465a      	mov	r2, fp
 801935a:	4631      	mov	r1, r6
 801935c:	4628      	mov	r0, r5
 801935e:	47b8      	blx	r7
 8019360:	3001      	adds	r0, #1
 8019362:	f43f ae71 	beq.w	8019048 <_printf_float+0x98>
 8019366:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801936a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019372:	f109 39ff 	add.w	r9, r9, #4294967295
 8019376:	d018      	beq.n	80193aa <_printf_float+0x3fa>
 8019378:	464b      	mov	r3, r9
 801937a:	f108 0201 	add.w	r2, r8, #1
 801937e:	4631      	mov	r1, r6
 8019380:	4628      	mov	r0, r5
 8019382:	47b8      	blx	r7
 8019384:	3001      	adds	r0, #1
 8019386:	d10c      	bne.n	80193a2 <_printf_float+0x3f2>
 8019388:	e65e      	b.n	8019048 <_printf_float+0x98>
 801938a:	2301      	movs	r3, #1
 801938c:	465a      	mov	r2, fp
 801938e:	4631      	mov	r1, r6
 8019390:	4628      	mov	r0, r5
 8019392:	47b8      	blx	r7
 8019394:	3001      	adds	r0, #1
 8019396:	f43f ae57 	beq.w	8019048 <_printf_float+0x98>
 801939a:	f108 0801 	add.w	r8, r8, #1
 801939e:	45c8      	cmp	r8, r9
 80193a0:	dbf3      	blt.n	801938a <_printf_float+0x3da>
 80193a2:	4653      	mov	r3, sl
 80193a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80193a8:	e6dc      	b.n	8019164 <_printf_float+0x1b4>
 80193aa:	f04f 0800 	mov.w	r8, #0
 80193ae:	f104 0b1a 	add.w	fp, r4, #26
 80193b2:	e7f4      	b.n	801939e <_printf_float+0x3ee>
 80193b4:	2301      	movs	r3, #1
 80193b6:	4642      	mov	r2, r8
 80193b8:	e7e1      	b.n	801937e <_printf_float+0x3ce>
 80193ba:	2301      	movs	r3, #1
 80193bc:	464a      	mov	r2, r9
 80193be:	4631      	mov	r1, r6
 80193c0:	4628      	mov	r0, r5
 80193c2:	47b8      	blx	r7
 80193c4:	3001      	adds	r0, #1
 80193c6:	f43f ae3f 	beq.w	8019048 <_printf_float+0x98>
 80193ca:	f108 0801 	add.w	r8, r8, #1
 80193ce:	68e3      	ldr	r3, [r4, #12]
 80193d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80193d2:	1a5b      	subs	r3, r3, r1
 80193d4:	4543      	cmp	r3, r8
 80193d6:	dcf0      	bgt.n	80193ba <_printf_float+0x40a>
 80193d8:	e6f8      	b.n	80191cc <_printf_float+0x21c>
 80193da:	f04f 0800 	mov.w	r8, #0
 80193de:	f104 0919 	add.w	r9, r4, #25
 80193e2:	e7f4      	b.n	80193ce <_printf_float+0x41e>

080193e4 <_printf_common>:
 80193e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193e8:	4616      	mov	r6, r2
 80193ea:	4698      	mov	r8, r3
 80193ec:	688a      	ldr	r2, [r1, #8]
 80193ee:	690b      	ldr	r3, [r1, #16]
 80193f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80193f4:	4293      	cmp	r3, r2
 80193f6:	bfb8      	it	lt
 80193f8:	4613      	movlt	r3, r2
 80193fa:	6033      	str	r3, [r6, #0]
 80193fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019400:	4607      	mov	r7, r0
 8019402:	460c      	mov	r4, r1
 8019404:	b10a      	cbz	r2, 801940a <_printf_common+0x26>
 8019406:	3301      	adds	r3, #1
 8019408:	6033      	str	r3, [r6, #0]
 801940a:	6823      	ldr	r3, [r4, #0]
 801940c:	0699      	lsls	r1, r3, #26
 801940e:	bf42      	ittt	mi
 8019410:	6833      	ldrmi	r3, [r6, #0]
 8019412:	3302      	addmi	r3, #2
 8019414:	6033      	strmi	r3, [r6, #0]
 8019416:	6825      	ldr	r5, [r4, #0]
 8019418:	f015 0506 	ands.w	r5, r5, #6
 801941c:	d106      	bne.n	801942c <_printf_common+0x48>
 801941e:	f104 0a19 	add.w	sl, r4, #25
 8019422:	68e3      	ldr	r3, [r4, #12]
 8019424:	6832      	ldr	r2, [r6, #0]
 8019426:	1a9b      	subs	r3, r3, r2
 8019428:	42ab      	cmp	r3, r5
 801942a:	dc26      	bgt.n	801947a <_printf_common+0x96>
 801942c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019430:	6822      	ldr	r2, [r4, #0]
 8019432:	3b00      	subs	r3, #0
 8019434:	bf18      	it	ne
 8019436:	2301      	movne	r3, #1
 8019438:	0692      	lsls	r2, r2, #26
 801943a:	d42b      	bmi.n	8019494 <_printf_common+0xb0>
 801943c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019440:	4641      	mov	r1, r8
 8019442:	4638      	mov	r0, r7
 8019444:	47c8      	blx	r9
 8019446:	3001      	adds	r0, #1
 8019448:	d01e      	beq.n	8019488 <_printf_common+0xa4>
 801944a:	6823      	ldr	r3, [r4, #0]
 801944c:	6922      	ldr	r2, [r4, #16]
 801944e:	f003 0306 	and.w	r3, r3, #6
 8019452:	2b04      	cmp	r3, #4
 8019454:	bf02      	ittt	eq
 8019456:	68e5      	ldreq	r5, [r4, #12]
 8019458:	6833      	ldreq	r3, [r6, #0]
 801945a:	1aed      	subeq	r5, r5, r3
 801945c:	68a3      	ldr	r3, [r4, #8]
 801945e:	bf0c      	ite	eq
 8019460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019464:	2500      	movne	r5, #0
 8019466:	4293      	cmp	r3, r2
 8019468:	bfc4      	itt	gt
 801946a:	1a9b      	subgt	r3, r3, r2
 801946c:	18ed      	addgt	r5, r5, r3
 801946e:	2600      	movs	r6, #0
 8019470:	341a      	adds	r4, #26
 8019472:	42b5      	cmp	r5, r6
 8019474:	d11a      	bne.n	80194ac <_printf_common+0xc8>
 8019476:	2000      	movs	r0, #0
 8019478:	e008      	b.n	801948c <_printf_common+0xa8>
 801947a:	2301      	movs	r3, #1
 801947c:	4652      	mov	r2, sl
 801947e:	4641      	mov	r1, r8
 8019480:	4638      	mov	r0, r7
 8019482:	47c8      	blx	r9
 8019484:	3001      	adds	r0, #1
 8019486:	d103      	bne.n	8019490 <_printf_common+0xac>
 8019488:	f04f 30ff 	mov.w	r0, #4294967295
 801948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019490:	3501      	adds	r5, #1
 8019492:	e7c6      	b.n	8019422 <_printf_common+0x3e>
 8019494:	18e1      	adds	r1, r4, r3
 8019496:	1c5a      	adds	r2, r3, #1
 8019498:	2030      	movs	r0, #48	@ 0x30
 801949a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801949e:	4422      	add	r2, r4
 80194a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80194a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80194a8:	3302      	adds	r3, #2
 80194aa:	e7c7      	b.n	801943c <_printf_common+0x58>
 80194ac:	2301      	movs	r3, #1
 80194ae:	4622      	mov	r2, r4
 80194b0:	4641      	mov	r1, r8
 80194b2:	4638      	mov	r0, r7
 80194b4:	47c8      	blx	r9
 80194b6:	3001      	adds	r0, #1
 80194b8:	d0e6      	beq.n	8019488 <_printf_common+0xa4>
 80194ba:	3601      	adds	r6, #1
 80194bc:	e7d9      	b.n	8019472 <_printf_common+0x8e>
	...

080194c0 <_printf_i>:
 80194c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194c4:	7e0f      	ldrb	r7, [r1, #24]
 80194c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80194c8:	2f78      	cmp	r7, #120	@ 0x78
 80194ca:	4691      	mov	r9, r2
 80194cc:	4680      	mov	r8, r0
 80194ce:	460c      	mov	r4, r1
 80194d0:	469a      	mov	sl, r3
 80194d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80194d6:	d807      	bhi.n	80194e8 <_printf_i+0x28>
 80194d8:	2f62      	cmp	r7, #98	@ 0x62
 80194da:	d80a      	bhi.n	80194f2 <_printf_i+0x32>
 80194dc:	2f00      	cmp	r7, #0
 80194de:	f000 80d2 	beq.w	8019686 <_printf_i+0x1c6>
 80194e2:	2f58      	cmp	r7, #88	@ 0x58
 80194e4:	f000 80b9 	beq.w	801965a <_printf_i+0x19a>
 80194e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80194ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80194f0:	e03a      	b.n	8019568 <_printf_i+0xa8>
 80194f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80194f6:	2b15      	cmp	r3, #21
 80194f8:	d8f6      	bhi.n	80194e8 <_printf_i+0x28>
 80194fa:	a101      	add	r1, pc, #4	@ (adr r1, 8019500 <_printf_i+0x40>)
 80194fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019500:	08019559 	.word	0x08019559
 8019504:	0801956d 	.word	0x0801956d
 8019508:	080194e9 	.word	0x080194e9
 801950c:	080194e9 	.word	0x080194e9
 8019510:	080194e9 	.word	0x080194e9
 8019514:	080194e9 	.word	0x080194e9
 8019518:	0801956d 	.word	0x0801956d
 801951c:	080194e9 	.word	0x080194e9
 8019520:	080194e9 	.word	0x080194e9
 8019524:	080194e9 	.word	0x080194e9
 8019528:	080194e9 	.word	0x080194e9
 801952c:	0801966d 	.word	0x0801966d
 8019530:	08019597 	.word	0x08019597
 8019534:	08019627 	.word	0x08019627
 8019538:	080194e9 	.word	0x080194e9
 801953c:	080194e9 	.word	0x080194e9
 8019540:	0801968f 	.word	0x0801968f
 8019544:	080194e9 	.word	0x080194e9
 8019548:	08019597 	.word	0x08019597
 801954c:	080194e9 	.word	0x080194e9
 8019550:	080194e9 	.word	0x080194e9
 8019554:	0801962f 	.word	0x0801962f
 8019558:	6833      	ldr	r3, [r6, #0]
 801955a:	1d1a      	adds	r2, r3, #4
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	6032      	str	r2, [r6, #0]
 8019560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019568:	2301      	movs	r3, #1
 801956a:	e09d      	b.n	80196a8 <_printf_i+0x1e8>
 801956c:	6833      	ldr	r3, [r6, #0]
 801956e:	6820      	ldr	r0, [r4, #0]
 8019570:	1d19      	adds	r1, r3, #4
 8019572:	6031      	str	r1, [r6, #0]
 8019574:	0606      	lsls	r6, r0, #24
 8019576:	d501      	bpl.n	801957c <_printf_i+0xbc>
 8019578:	681d      	ldr	r5, [r3, #0]
 801957a:	e003      	b.n	8019584 <_printf_i+0xc4>
 801957c:	0645      	lsls	r5, r0, #25
 801957e:	d5fb      	bpl.n	8019578 <_printf_i+0xb8>
 8019580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019584:	2d00      	cmp	r5, #0
 8019586:	da03      	bge.n	8019590 <_printf_i+0xd0>
 8019588:	232d      	movs	r3, #45	@ 0x2d
 801958a:	426d      	negs	r5, r5
 801958c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019590:	4859      	ldr	r0, [pc, #356]	@ (80196f8 <_printf_i+0x238>)
 8019592:	230a      	movs	r3, #10
 8019594:	e011      	b.n	80195ba <_printf_i+0xfa>
 8019596:	6821      	ldr	r1, [r4, #0]
 8019598:	6833      	ldr	r3, [r6, #0]
 801959a:	0608      	lsls	r0, r1, #24
 801959c:	f853 5b04 	ldr.w	r5, [r3], #4
 80195a0:	d402      	bmi.n	80195a8 <_printf_i+0xe8>
 80195a2:	0649      	lsls	r1, r1, #25
 80195a4:	bf48      	it	mi
 80195a6:	b2ad      	uxthmi	r5, r5
 80195a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80195aa:	4853      	ldr	r0, [pc, #332]	@ (80196f8 <_printf_i+0x238>)
 80195ac:	6033      	str	r3, [r6, #0]
 80195ae:	bf14      	ite	ne
 80195b0:	230a      	movne	r3, #10
 80195b2:	2308      	moveq	r3, #8
 80195b4:	2100      	movs	r1, #0
 80195b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80195ba:	6866      	ldr	r6, [r4, #4]
 80195bc:	60a6      	str	r6, [r4, #8]
 80195be:	2e00      	cmp	r6, #0
 80195c0:	bfa2      	ittt	ge
 80195c2:	6821      	ldrge	r1, [r4, #0]
 80195c4:	f021 0104 	bicge.w	r1, r1, #4
 80195c8:	6021      	strge	r1, [r4, #0]
 80195ca:	b90d      	cbnz	r5, 80195d0 <_printf_i+0x110>
 80195cc:	2e00      	cmp	r6, #0
 80195ce:	d04b      	beq.n	8019668 <_printf_i+0x1a8>
 80195d0:	4616      	mov	r6, r2
 80195d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80195d6:	fb03 5711 	mls	r7, r3, r1, r5
 80195da:	5dc7      	ldrb	r7, [r0, r7]
 80195dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80195e0:	462f      	mov	r7, r5
 80195e2:	42bb      	cmp	r3, r7
 80195e4:	460d      	mov	r5, r1
 80195e6:	d9f4      	bls.n	80195d2 <_printf_i+0x112>
 80195e8:	2b08      	cmp	r3, #8
 80195ea:	d10b      	bne.n	8019604 <_printf_i+0x144>
 80195ec:	6823      	ldr	r3, [r4, #0]
 80195ee:	07df      	lsls	r7, r3, #31
 80195f0:	d508      	bpl.n	8019604 <_printf_i+0x144>
 80195f2:	6923      	ldr	r3, [r4, #16]
 80195f4:	6861      	ldr	r1, [r4, #4]
 80195f6:	4299      	cmp	r1, r3
 80195f8:	bfde      	ittt	le
 80195fa:	2330      	movle	r3, #48	@ 0x30
 80195fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019604:	1b92      	subs	r2, r2, r6
 8019606:	6122      	str	r2, [r4, #16]
 8019608:	f8cd a000 	str.w	sl, [sp]
 801960c:	464b      	mov	r3, r9
 801960e:	aa03      	add	r2, sp, #12
 8019610:	4621      	mov	r1, r4
 8019612:	4640      	mov	r0, r8
 8019614:	f7ff fee6 	bl	80193e4 <_printf_common>
 8019618:	3001      	adds	r0, #1
 801961a:	d14a      	bne.n	80196b2 <_printf_i+0x1f2>
 801961c:	f04f 30ff 	mov.w	r0, #4294967295
 8019620:	b004      	add	sp, #16
 8019622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019626:	6823      	ldr	r3, [r4, #0]
 8019628:	f043 0320 	orr.w	r3, r3, #32
 801962c:	6023      	str	r3, [r4, #0]
 801962e:	4833      	ldr	r0, [pc, #204]	@ (80196fc <_printf_i+0x23c>)
 8019630:	2778      	movs	r7, #120	@ 0x78
 8019632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019636:	6823      	ldr	r3, [r4, #0]
 8019638:	6831      	ldr	r1, [r6, #0]
 801963a:	061f      	lsls	r7, r3, #24
 801963c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019640:	d402      	bmi.n	8019648 <_printf_i+0x188>
 8019642:	065f      	lsls	r7, r3, #25
 8019644:	bf48      	it	mi
 8019646:	b2ad      	uxthmi	r5, r5
 8019648:	6031      	str	r1, [r6, #0]
 801964a:	07d9      	lsls	r1, r3, #31
 801964c:	bf44      	itt	mi
 801964e:	f043 0320 	orrmi.w	r3, r3, #32
 8019652:	6023      	strmi	r3, [r4, #0]
 8019654:	b11d      	cbz	r5, 801965e <_printf_i+0x19e>
 8019656:	2310      	movs	r3, #16
 8019658:	e7ac      	b.n	80195b4 <_printf_i+0xf4>
 801965a:	4827      	ldr	r0, [pc, #156]	@ (80196f8 <_printf_i+0x238>)
 801965c:	e7e9      	b.n	8019632 <_printf_i+0x172>
 801965e:	6823      	ldr	r3, [r4, #0]
 8019660:	f023 0320 	bic.w	r3, r3, #32
 8019664:	6023      	str	r3, [r4, #0]
 8019666:	e7f6      	b.n	8019656 <_printf_i+0x196>
 8019668:	4616      	mov	r6, r2
 801966a:	e7bd      	b.n	80195e8 <_printf_i+0x128>
 801966c:	6833      	ldr	r3, [r6, #0]
 801966e:	6825      	ldr	r5, [r4, #0]
 8019670:	6961      	ldr	r1, [r4, #20]
 8019672:	1d18      	adds	r0, r3, #4
 8019674:	6030      	str	r0, [r6, #0]
 8019676:	062e      	lsls	r6, r5, #24
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	d501      	bpl.n	8019680 <_printf_i+0x1c0>
 801967c:	6019      	str	r1, [r3, #0]
 801967e:	e002      	b.n	8019686 <_printf_i+0x1c6>
 8019680:	0668      	lsls	r0, r5, #25
 8019682:	d5fb      	bpl.n	801967c <_printf_i+0x1bc>
 8019684:	8019      	strh	r1, [r3, #0]
 8019686:	2300      	movs	r3, #0
 8019688:	6123      	str	r3, [r4, #16]
 801968a:	4616      	mov	r6, r2
 801968c:	e7bc      	b.n	8019608 <_printf_i+0x148>
 801968e:	6833      	ldr	r3, [r6, #0]
 8019690:	1d1a      	adds	r2, r3, #4
 8019692:	6032      	str	r2, [r6, #0]
 8019694:	681e      	ldr	r6, [r3, #0]
 8019696:	6862      	ldr	r2, [r4, #4]
 8019698:	2100      	movs	r1, #0
 801969a:	4630      	mov	r0, r6
 801969c:	f7e6 fe48 	bl	8000330 <memchr>
 80196a0:	b108      	cbz	r0, 80196a6 <_printf_i+0x1e6>
 80196a2:	1b80      	subs	r0, r0, r6
 80196a4:	6060      	str	r0, [r4, #4]
 80196a6:	6863      	ldr	r3, [r4, #4]
 80196a8:	6123      	str	r3, [r4, #16]
 80196aa:	2300      	movs	r3, #0
 80196ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196b0:	e7aa      	b.n	8019608 <_printf_i+0x148>
 80196b2:	6923      	ldr	r3, [r4, #16]
 80196b4:	4632      	mov	r2, r6
 80196b6:	4649      	mov	r1, r9
 80196b8:	4640      	mov	r0, r8
 80196ba:	47d0      	blx	sl
 80196bc:	3001      	adds	r0, #1
 80196be:	d0ad      	beq.n	801961c <_printf_i+0x15c>
 80196c0:	6823      	ldr	r3, [r4, #0]
 80196c2:	079b      	lsls	r3, r3, #30
 80196c4:	d413      	bmi.n	80196ee <_printf_i+0x22e>
 80196c6:	68e0      	ldr	r0, [r4, #12]
 80196c8:	9b03      	ldr	r3, [sp, #12]
 80196ca:	4298      	cmp	r0, r3
 80196cc:	bfb8      	it	lt
 80196ce:	4618      	movlt	r0, r3
 80196d0:	e7a6      	b.n	8019620 <_printf_i+0x160>
 80196d2:	2301      	movs	r3, #1
 80196d4:	4632      	mov	r2, r6
 80196d6:	4649      	mov	r1, r9
 80196d8:	4640      	mov	r0, r8
 80196da:	47d0      	blx	sl
 80196dc:	3001      	adds	r0, #1
 80196de:	d09d      	beq.n	801961c <_printf_i+0x15c>
 80196e0:	3501      	adds	r5, #1
 80196e2:	68e3      	ldr	r3, [r4, #12]
 80196e4:	9903      	ldr	r1, [sp, #12]
 80196e6:	1a5b      	subs	r3, r3, r1
 80196e8:	42ab      	cmp	r3, r5
 80196ea:	dcf2      	bgt.n	80196d2 <_printf_i+0x212>
 80196ec:	e7eb      	b.n	80196c6 <_printf_i+0x206>
 80196ee:	2500      	movs	r5, #0
 80196f0:	f104 0619 	add.w	r6, r4, #25
 80196f4:	e7f5      	b.n	80196e2 <_printf_i+0x222>
 80196f6:	bf00      	nop
 80196f8:	0801d953 	.word	0x0801d953
 80196fc:	0801d964 	.word	0x0801d964

08019700 <std>:
 8019700:	2300      	movs	r3, #0
 8019702:	b510      	push	{r4, lr}
 8019704:	4604      	mov	r4, r0
 8019706:	e9c0 3300 	strd	r3, r3, [r0]
 801970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801970e:	6083      	str	r3, [r0, #8]
 8019710:	8181      	strh	r1, [r0, #12]
 8019712:	6643      	str	r3, [r0, #100]	@ 0x64
 8019714:	81c2      	strh	r2, [r0, #14]
 8019716:	6183      	str	r3, [r0, #24]
 8019718:	4619      	mov	r1, r3
 801971a:	2208      	movs	r2, #8
 801971c:	305c      	adds	r0, #92	@ 0x5c
 801971e:	f000 f914 	bl	801994a <memset>
 8019722:	4b0d      	ldr	r3, [pc, #52]	@ (8019758 <std+0x58>)
 8019724:	6263      	str	r3, [r4, #36]	@ 0x24
 8019726:	4b0d      	ldr	r3, [pc, #52]	@ (801975c <std+0x5c>)
 8019728:	62a3      	str	r3, [r4, #40]	@ 0x28
 801972a:	4b0d      	ldr	r3, [pc, #52]	@ (8019760 <std+0x60>)
 801972c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801972e:	4b0d      	ldr	r3, [pc, #52]	@ (8019764 <std+0x64>)
 8019730:	6323      	str	r3, [r4, #48]	@ 0x30
 8019732:	4b0d      	ldr	r3, [pc, #52]	@ (8019768 <std+0x68>)
 8019734:	6224      	str	r4, [r4, #32]
 8019736:	429c      	cmp	r4, r3
 8019738:	d006      	beq.n	8019748 <std+0x48>
 801973a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801973e:	4294      	cmp	r4, r2
 8019740:	d002      	beq.n	8019748 <std+0x48>
 8019742:	33d0      	adds	r3, #208	@ 0xd0
 8019744:	429c      	cmp	r4, r3
 8019746:	d105      	bne.n	8019754 <std+0x54>
 8019748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019750:	f000 b996 	b.w	8019a80 <__retarget_lock_init_recursive>
 8019754:	bd10      	pop	{r4, pc}
 8019756:	bf00      	nop
 8019758:	080198c5 	.word	0x080198c5
 801975c:	080198e7 	.word	0x080198e7
 8019760:	0801991f 	.word	0x0801991f
 8019764:	08019943 	.word	0x08019943
 8019768:	24006220 	.word	0x24006220

0801976c <stdio_exit_handler>:
 801976c:	4a02      	ldr	r2, [pc, #8]	@ (8019778 <stdio_exit_handler+0xc>)
 801976e:	4903      	ldr	r1, [pc, #12]	@ (801977c <stdio_exit_handler+0x10>)
 8019770:	4803      	ldr	r0, [pc, #12]	@ (8019780 <stdio_exit_handler+0x14>)
 8019772:	f000 b869 	b.w	8019848 <_fwalk_sglue>
 8019776:	bf00      	nop
 8019778:	24000104 	.word	0x24000104
 801977c:	0801bc3d 	.word	0x0801bc3d
 8019780:	24000280 	.word	0x24000280

08019784 <cleanup_stdio>:
 8019784:	6841      	ldr	r1, [r0, #4]
 8019786:	4b0c      	ldr	r3, [pc, #48]	@ (80197b8 <cleanup_stdio+0x34>)
 8019788:	4299      	cmp	r1, r3
 801978a:	b510      	push	{r4, lr}
 801978c:	4604      	mov	r4, r0
 801978e:	d001      	beq.n	8019794 <cleanup_stdio+0x10>
 8019790:	f002 fa54 	bl	801bc3c <_fflush_r>
 8019794:	68a1      	ldr	r1, [r4, #8]
 8019796:	4b09      	ldr	r3, [pc, #36]	@ (80197bc <cleanup_stdio+0x38>)
 8019798:	4299      	cmp	r1, r3
 801979a:	d002      	beq.n	80197a2 <cleanup_stdio+0x1e>
 801979c:	4620      	mov	r0, r4
 801979e:	f002 fa4d 	bl	801bc3c <_fflush_r>
 80197a2:	68e1      	ldr	r1, [r4, #12]
 80197a4:	4b06      	ldr	r3, [pc, #24]	@ (80197c0 <cleanup_stdio+0x3c>)
 80197a6:	4299      	cmp	r1, r3
 80197a8:	d004      	beq.n	80197b4 <cleanup_stdio+0x30>
 80197aa:	4620      	mov	r0, r4
 80197ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197b0:	f002 ba44 	b.w	801bc3c <_fflush_r>
 80197b4:	bd10      	pop	{r4, pc}
 80197b6:	bf00      	nop
 80197b8:	24006220 	.word	0x24006220
 80197bc:	24006288 	.word	0x24006288
 80197c0:	240062f0 	.word	0x240062f0

080197c4 <global_stdio_init.part.0>:
 80197c4:	b510      	push	{r4, lr}
 80197c6:	4b0b      	ldr	r3, [pc, #44]	@ (80197f4 <global_stdio_init.part.0+0x30>)
 80197c8:	4c0b      	ldr	r4, [pc, #44]	@ (80197f8 <global_stdio_init.part.0+0x34>)
 80197ca:	4a0c      	ldr	r2, [pc, #48]	@ (80197fc <global_stdio_init.part.0+0x38>)
 80197cc:	601a      	str	r2, [r3, #0]
 80197ce:	4620      	mov	r0, r4
 80197d0:	2200      	movs	r2, #0
 80197d2:	2104      	movs	r1, #4
 80197d4:	f7ff ff94 	bl	8019700 <std>
 80197d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80197dc:	2201      	movs	r2, #1
 80197de:	2109      	movs	r1, #9
 80197e0:	f7ff ff8e 	bl	8019700 <std>
 80197e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197e8:	2202      	movs	r2, #2
 80197ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197ee:	2112      	movs	r1, #18
 80197f0:	f7ff bf86 	b.w	8019700 <std>
 80197f4:	24006358 	.word	0x24006358
 80197f8:	24006220 	.word	0x24006220
 80197fc:	0801976d 	.word	0x0801976d

08019800 <__sfp_lock_acquire>:
 8019800:	4801      	ldr	r0, [pc, #4]	@ (8019808 <__sfp_lock_acquire+0x8>)
 8019802:	f000 b93e 	b.w	8019a82 <__retarget_lock_acquire_recursive>
 8019806:	bf00      	nop
 8019808:	24006361 	.word	0x24006361

0801980c <__sfp_lock_release>:
 801980c:	4801      	ldr	r0, [pc, #4]	@ (8019814 <__sfp_lock_release+0x8>)
 801980e:	f000 b939 	b.w	8019a84 <__retarget_lock_release_recursive>
 8019812:	bf00      	nop
 8019814:	24006361 	.word	0x24006361

08019818 <__sinit>:
 8019818:	b510      	push	{r4, lr}
 801981a:	4604      	mov	r4, r0
 801981c:	f7ff fff0 	bl	8019800 <__sfp_lock_acquire>
 8019820:	6a23      	ldr	r3, [r4, #32]
 8019822:	b11b      	cbz	r3, 801982c <__sinit+0x14>
 8019824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019828:	f7ff bff0 	b.w	801980c <__sfp_lock_release>
 801982c:	4b04      	ldr	r3, [pc, #16]	@ (8019840 <__sinit+0x28>)
 801982e:	6223      	str	r3, [r4, #32]
 8019830:	4b04      	ldr	r3, [pc, #16]	@ (8019844 <__sinit+0x2c>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d1f5      	bne.n	8019824 <__sinit+0xc>
 8019838:	f7ff ffc4 	bl	80197c4 <global_stdio_init.part.0>
 801983c:	e7f2      	b.n	8019824 <__sinit+0xc>
 801983e:	bf00      	nop
 8019840:	08019785 	.word	0x08019785
 8019844:	24006358 	.word	0x24006358

08019848 <_fwalk_sglue>:
 8019848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801984c:	4607      	mov	r7, r0
 801984e:	4688      	mov	r8, r1
 8019850:	4614      	mov	r4, r2
 8019852:	2600      	movs	r6, #0
 8019854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019858:	f1b9 0901 	subs.w	r9, r9, #1
 801985c:	d505      	bpl.n	801986a <_fwalk_sglue+0x22>
 801985e:	6824      	ldr	r4, [r4, #0]
 8019860:	2c00      	cmp	r4, #0
 8019862:	d1f7      	bne.n	8019854 <_fwalk_sglue+0xc>
 8019864:	4630      	mov	r0, r6
 8019866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801986a:	89ab      	ldrh	r3, [r5, #12]
 801986c:	2b01      	cmp	r3, #1
 801986e:	d907      	bls.n	8019880 <_fwalk_sglue+0x38>
 8019870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019874:	3301      	adds	r3, #1
 8019876:	d003      	beq.n	8019880 <_fwalk_sglue+0x38>
 8019878:	4629      	mov	r1, r5
 801987a:	4638      	mov	r0, r7
 801987c:	47c0      	blx	r8
 801987e:	4306      	orrs	r6, r0
 8019880:	3568      	adds	r5, #104	@ 0x68
 8019882:	e7e9      	b.n	8019858 <_fwalk_sglue+0x10>

08019884 <siprintf>:
 8019884:	b40e      	push	{r1, r2, r3}
 8019886:	b500      	push	{lr}
 8019888:	b09c      	sub	sp, #112	@ 0x70
 801988a:	ab1d      	add	r3, sp, #116	@ 0x74
 801988c:	9002      	str	r0, [sp, #8]
 801988e:	9006      	str	r0, [sp, #24]
 8019890:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019894:	4809      	ldr	r0, [pc, #36]	@ (80198bc <siprintf+0x38>)
 8019896:	9107      	str	r1, [sp, #28]
 8019898:	9104      	str	r1, [sp, #16]
 801989a:	4909      	ldr	r1, [pc, #36]	@ (80198c0 <siprintf+0x3c>)
 801989c:	f853 2b04 	ldr.w	r2, [r3], #4
 80198a0:	9105      	str	r1, [sp, #20]
 80198a2:	6800      	ldr	r0, [r0, #0]
 80198a4:	9301      	str	r3, [sp, #4]
 80198a6:	a902      	add	r1, sp, #8
 80198a8:	f002 f848 	bl	801b93c <_svfiprintf_r>
 80198ac:	9b02      	ldr	r3, [sp, #8]
 80198ae:	2200      	movs	r2, #0
 80198b0:	701a      	strb	r2, [r3, #0]
 80198b2:	b01c      	add	sp, #112	@ 0x70
 80198b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80198b8:	b003      	add	sp, #12
 80198ba:	4770      	bx	lr
 80198bc:	2400027c 	.word	0x2400027c
 80198c0:	ffff0208 	.word	0xffff0208

080198c4 <__sread>:
 80198c4:	b510      	push	{r4, lr}
 80198c6:	460c      	mov	r4, r1
 80198c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198cc:	f000 f88a 	bl	80199e4 <_read_r>
 80198d0:	2800      	cmp	r0, #0
 80198d2:	bfab      	itete	ge
 80198d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80198d6:	89a3      	ldrhlt	r3, [r4, #12]
 80198d8:	181b      	addge	r3, r3, r0
 80198da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80198de:	bfac      	ite	ge
 80198e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80198e2:	81a3      	strhlt	r3, [r4, #12]
 80198e4:	bd10      	pop	{r4, pc}

080198e6 <__swrite>:
 80198e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ea:	461f      	mov	r7, r3
 80198ec:	898b      	ldrh	r3, [r1, #12]
 80198ee:	05db      	lsls	r3, r3, #23
 80198f0:	4605      	mov	r5, r0
 80198f2:	460c      	mov	r4, r1
 80198f4:	4616      	mov	r6, r2
 80198f6:	d505      	bpl.n	8019904 <__swrite+0x1e>
 80198f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198fc:	2302      	movs	r3, #2
 80198fe:	2200      	movs	r2, #0
 8019900:	f000 f85e 	bl	80199c0 <_lseek_r>
 8019904:	89a3      	ldrh	r3, [r4, #12]
 8019906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801990a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801990e:	81a3      	strh	r3, [r4, #12]
 8019910:	4632      	mov	r2, r6
 8019912:	463b      	mov	r3, r7
 8019914:	4628      	mov	r0, r5
 8019916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801991a:	f000 b875 	b.w	8019a08 <_write_r>

0801991e <__sseek>:
 801991e:	b510      	push	{r4, lr}
 8019920:	460c      	mov	r4, r1
 8019922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019926:	f000 f84b 	bl	80199c0 <_lseek_r>
 801992a:	1c43      	adds	r3, r0, #1
 801992c:	89a3      	ldrh	r3, [r4, #12]
 801992e:	bf15      	itete	ne
 8019930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801993a:	81a3      	strheq	r3, [r4, #12]
 801993c:	bf18      	it	ne
 801993e:	81a3      	strhne	r3, [r4, #12]
 8019940:	bd10      	pop	{r4, pc}

08019942 <__sclose>:
 8019942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019946:	f000 b82b 	b.w	80199a0 <_close_r>

0801994a <memset>:
 801994a:	4402      	add	r2, r0
 801994c:	4603      	mov	r3, r0
 801994e:	4293      	cmp	r3, r2
 8019950:	d100      	bne.n	8019954 <memset+0xa>
 8019952:	4770      	bx	lr
 8019954:	f803 1b01 	strb.w	r1, [r3], #1
 8019958:	e7f9      	b.n	801994e <memset+0x4>

0801995a <strchr>:
 801995a:	b2c9      	uxtb	r1, r1
 801995c:	4603      	mov	r3, r0
 801995e:	4618      	mov	r0, r3
 8019960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019964:	b112      	cbz	r2, 801996c <strchr+0x12>
 8019966:	428a      	cmp	r2, r1
 8019968:	d1f9      	bne.n	801995e <strchr+0x4>
 801996a:	4770      	bx	lr
 801996c:	2900      	cmp	r1, #0
 801996e:	bf18      	it	ne
 8019970:	2000      	movne	r0, #0
 8019972:	4770      	bx	lr

08019974 <strncmp>:
 8019974:	b510      	push	{r4, lr}
 8019976:	b16a      	cbz	r2, 8019994 <strncmp+0x20>
 8019978:	3901      	subs	r1, #1
 801997a:	1884      	adds	r4, r0, r2
 801997c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019984:	429a      	cmp	r2, r3
 8019986:	d103      	bne.n	8019990 <strncmp+0x1c>
 8019988:	42a0      	cmp	r0, r4
 801998a:	d001      	beq.n	8019990 <strncmp+0x1c>
 801998c:	2a00      	cmp	r2, #0
 801998e:	d1f5      	bne.n	801997c <strncmp+0x8>
 8019990:	1ad0      	subs	r0, r2, r3
 8019992:	bd10      	pop	{r4, pc}
 8019994:	4610      	mov	r0, r2
 8019996:	e7fc      	b.n	8019992 <strncmp+0x1e>

08019998 <_localeconv_r>:
 8019998:	4800      	ldr	r0, [pc, #0]	@ (801999c <_localeconv_r+0x4>)
 801999a:	4770      	bx	lr
 801999c:	24000200 	.word	0x24000200

080199a0 <_close_r>:
 80199a0:	b538      	push	{r3, r4, r5, lr}
 80199a2:	4d06      	ldr	r5, [pc, #24]	@ (80199bc <_close_r+0x1c>)
 80199a4:	2300      	movs	r3, #0
 80199a6:	4604      	mov	r4, r0
 80199a8:	4608      	mov	r0, r1
 80199aa:	602b      	str	r3, [r5, #0]
 80199ac:	f7e9 f9d0 	bl	8002d50 <_close>
 80199b0:	1c43      	adds	r3, r0, #1
 80199b2:	d102      	bne.n	80199ba <_close_r+0x1a>
 80199b4:	682b      	ldr	r3, [r5, #0]
 80199b6:	b103      	cbz	r3, 80199ba <_close_r+0x1a>
 80199b8:	6023      	str	r3, [r4, #0]
 80199ba:	bd38      	pop	{r3, r4, r5, pc}
 80199bc:	2400635c 	.word	0x2400635c

080199c0 <_lseek_r>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	4d07      	ldr	r5, [pc, #28]	@ (80199e0 <_lseek_r+0x20>)
 80199c4:	4604      	mov	r4, r0
 80199c6:	4608      	mov	r0, r1
 80199c8:	4611      	mov	r1, r2
 80199ca:	2200      	movs	r2, #0
 80199cc:	602a      	str	r2, [r5, #0]
 80199ce:	461a      	mov	r2, r3
 80199d0:	f7e9 f9e5 	bl	8002d9e <_lseek>
 80199d4:	1c43      	adds	r3, r0, #1
 80199d6:	d102      	bne.n	80199de <_lseek_r+0x1e>
 80199d8:	682b      	ldr	r3, [r5, #0]
 80199da:	b103      	cbz	r3, 80199de <_lseek_r+0x1e>
 80199dc:	6023      	str	r3, [r4, #0]
 80199de:	bd38      	pop	{r3, r4, r5, pc}
 80199e0:	2400635c 	.word	0x2400635c

080199e4 <_read_r>:
 80199e4:	b538      	push	{r3, r4, r5, lr}
 80199e6:	4d07      	ldr	r5, [pc, #28]	@ (8019a04 <_read_r+0x20>)
 80199e8:	4604      	mov	r4, r0
 80199ea:	4608      	mov	r0, r1
 80199ec:	4611      	mov	r1, r2
 80199ee:	2200      	movs	r2, #0
 80199f0:	602a      	str	r2, [r5, #0]
 80199f2:	461a      	mov	r2, r3
 80199f4:	f7e9 f973 	bl	8002cde <_read>
 80199f8:	1c43      	adds	r3, r0, #1
 80199fa:	d102      	bne.n	8019a02 <_read_r+0x1e>
 80199fc:	682b      	ldr	r3, [r5, #0]
 80199fe:	b103      	cbz	r3, 8019a02 <_read_r+0x1e>
 8019a00:	6023      	str	r3, [r4, #0]
 8019a02:	bd38      	pop	{r3, r4, r5, pc}
 8019a04:	2400635c 	.word	0x2400635c

08019a08 <_write_r>:
 8019a08:	b538      	push	{r3, r4, r5, lr}
 8019a0a:	4d07      	ldr	r5, [pc, #28]	@ (8019a28 <_write_r+0x20>)
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	4608      	mov	r0, r1
 8019a10:	4611      	mov	r1, r2
 8019a12:	2200      	movs	r2, #0
 8019a14:	602a      	str	r2, [r5, #0]
 8019a16:	461a      	mov	r2, r3
 8019a18:	f7e9 f97e 	bl	8002d18 <_write>
 8019a1c:	1c43      	adds	r3, r0, #1
 8019a1e:	d102      	bne.n	8019a26 <_write_r+0x1e>
 8019a20:	682b      	ldr	r3, [r5, #0]
 8019a22:	b103      	cbz	r3, 8019a26 <_write_r+0x1e>
 8019a24:	6023      	str	r3, [r4, #0]
 8019a26:	bd38      	pop	{r3, r4, r5, pc}
 8019a28:	2400635c 	.word	0x2400635c

08019a2c <__errno>:
 8019a2c:	4b01      	ldr	r3, [pc, #4]	@ (8019a34 <__errno+0x8>)
 8019a2e:	6818      	ldr	r0, [r3, #0]
 8019a30:	4770      	bx	lr
 8019a32:	bf00      	nop
 8019a34:	2400027c 	.word	0x2400027c

08019a38 <__libc_init_array>:
 8019a38:	b570      	push	{r4, r5, r6, lr}
 8019a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8019a70 <__libc_init_array+0x38>)
 8019a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8019a74 <__libc_init_array+0x3c>)
 8019a3e:	1b64      	subs	r4, r4, r5
 8019a40:	10a4      	asrs	r4, r4, #2
 8019a42:	2600      	movs	r6, #0
 8019a44:	42a6      	cmp	r6, r4
 8019a46:	d109      	bne.n	8019a5c <__libc_init_array+0x24>
 8019a48:	4d0b      	ldr	r5, [pc, #44]	@ (8019a78 <__libc_init_array+0x40>)
 8019a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8019a7c <__libc_init_array+0x44>)
 8019a4c:	f003 fb18 	bl	801d080 <_init>
 8019a50:	1b64      	subs	r4, r4, r5
 8019a52:	10a4      	asrs	r4, r4, #2
 8019a54:	2600      	movs	r6, #0
 8019a56:	42a6      	cmp	r6, r4
 8019a58:	d105      	bne.n	8019a66 <__libc_init_array+0x2e>
 8019a5a:	bd70      	pop	{r4, r5, r6, pc}
 8019a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a60:	4798      	blx	r3
 8019a62:	3601      	adds	r6, #1
 8019a64:	e7ee      	b.n	8019a44 <__libc_init_array+0xc>
 8019a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8019a6a:	4798      	blx	r3
 8019a6c:	3601      	adds	r6, #1
 8019a6e:	e7f2      	b.n	8019a56 <__libc_init_array+0x1e>
 8019a70:	0801df30 	.word	0x0801df30
 8019a74:	0801df30 	.word	0x0801df30
 8019a78:	0801df30 	.word	0x0801df30
 8019a7c:	0801df34 	.word	0x0801df34

08019a80 <__retarget_lock_init_recursive>:
 8019a80:	4770      	bx	lr

08019a82 <__retarget_lock_acquire_recursive>:
 8019a82:	4770      	bx	lr

08019a84 <__retarget_lock_release_recursive>:
 8019a84:	4770      	bx	lr

08019a86 <memcpy>:
 8019a86:	440a      	add	r2, r1
 8019a88:	4291      	cmp	r1, r2
 8019a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8019a8e:	d100      	bne.n	8019a92 <memcpy+0xc>
 8019a90:	4770      	bx	lr
 8019a92:	b510      	push	{r4, lr}
 8019a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019a9c:	4291      	cmp	r1, r2
 8019a9e:	d1f9      	bne.n	8019a94 <memcpy+0xe>
 8019aa0:	bd10      	pop	{r4, pc}
 8019aa2:	0000      	movs	r0, r0
 8019aa4:	0000      	movs	r0, r0
	...

08019aa8 <nan>:
 8019aa8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8019ab0 <nan+0x8>
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop
 8019ab0:	00000000 	.word	0x00000000
 8019ab4:	7ff80000 	.word	0x7ff80000

08019ab8 <quorem>:
 8019ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019abc:	6903      	ldr	r3, [r0, #16]
 8019abe:	690c      	ldr	r4, [r1, #16]
 8019ac0:	42a3      	cmp	r3, r4
 8019ac2:	4607      	mov	r7, r0
 8019ac4:	db7e      	blt.n	8019bc4 <quorem+0x10c>
 8019ac6:	3c01      	subs	r4, #1
 8019ac8:	f101 0814 	add.w	r8, r1, #20
 8019acc:	00a3      	lsls	r3, r4, #2
 8019ace:	f100 0514 	add.w	r5, r0, #20
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019ad8:	9301      	str	r3, [sp, #4]
 8019ada:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	429a      	cmp	r2, r3
 8019ae6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019aea:	fbb2 f6f3 	udiv	r6, r2, r3
 8019aee:	d32e      	bcc.n	8019b4e <quorem+0x96>
 8019af0:	f04f 0a00 	mov.w	sl, #0
 8019af4:	46c4      	mov	ip, r8
 8019af6:	46ae      	mov	lr, r5
 8019af8:	46d3      	mov	fp, sl
 8019afa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019afe:	b298      	uxth	r0, r3
 8019b00:	fb06 a000 	mla	r0, r6, r0, sl
 8019b04:	0c02      	lsrs	r2, r0, #16
 8019b06:	0c1b      	lsrs	r3, r3, #16
 8019b08:	fb06 2303 	mla	r3, r6, r3, r2
 8019b0c:	f8de 2000 	ldr.w	r2, [lr]
 8019b10:	b280      	uxth	r0, r0
 8019b12:	b292      	uxth	r2, r2
 8019b14:	1a12      	subs	r2, r2, r0
 8019b16:	445a      	add	r2, fp
 8019b18:	f8de 0000 	ldr.w	r0, [lr]
 8019b1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019b26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019b2a:	b292      	uxth	r2, r2
 8019b2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019b30:	45e1      	cmp	r9, ip
 8019b32:	f84e 2b04 	str.w	r2, [lr], #4
 8019b36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019b3a:	d2de      	bcs.n	8019afa <quorem+0x42>
 8019b3c:	9b00      	ldr	r3, [sp, #0]
 8019b3e:	58eb      	ldr	r3, [r5, r3]
 8019b40:	b92b      	cbnz	r3, 8019b4e <quorem+0x96>
 8019b42:	9b01      	ldr	r3, [sp, #4]
 8019b44:	3b04      	subs	r3, #4
 8019b46:	429d      	cmp	r5, r3
 8019b48:	461a      	mov	r2, r3
 8019b4a:	d32f      	bcc.n	8019bac <quorem+0xf4>
 8019b4c:	613c      	str	r4, [r7, #16]
 8019b4e:	4638      	mov	r0, r7
 8019b50:	f001 fca0 	bl	801b494 <__mcmp>
 8019b54:	2800      	cmp	r0, #0
 8019b56:	db25      	blt.n	8019ba4 <quorem+0xec>
 8019b58:	4629      	mov	r1, r5
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8019b60:	f8d1 c000 	ldr.w	ip, [r1]
 8019b64:	fa1f fe82 	uxth.w	lr, r2
 8019b68:	fa1f f38c 	uxth.w	r3, ip
 8019b6c:	eba3 030e 	sub.w	r3, r3, lr
 8019b70:	4403      	add	r3, r0
 8019b72:	0c12      	lsrs	r2, r2, #16
 8019b74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019b78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b82:	45c1      	cmp	r9, r8
 8019b84:	f841 3b04 	str.w	r3, [r1], #4
 8019b88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019b8c:	d2e6      	bcs.n	8019b5c <quorem+0xa4>
 8019b8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019b96:	b922      	cbnz	r2, 8019ba2 <quorem+0xea>
 8019b98:	3b04      	subs	r3, #4
 8019b9a:	429d      	cmp	r5, r3
 8019b9c:	461a      	mov	r2, r3
 8019b9e:	d30b      	bcc.n	8019bb8 <quorem+0x100>
 8019ba0:	613c      	str	r4, [r7, #16]
 8019ba2:	3601      	adds	r6, #1
 8019ba4:	4630      	mov	r0, r6
 8019ba6:	b003      	add	sp, #12
 8019ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bac:	6812      	ldr	r2, [r2, #0]
 8019bae:	3b04      	subs	r3, #4
 8019bb0:	2a00      	cmp	r2, #0
 8019bb2:	d1cb      	bne.n	8019b4c <quorem+0x94>
 8019bb4:	3c01      	subs	r4, #1
 8019bb6:	e7c6      	b.n	8019b46 <quorem+0x8e>
 8019bb8:	6812      	ldr	r2, [r2, #0]
 8019bba:	3b04      	subs	r3, #4
 8019bbc:	2a00      	cmp	r2, #0
 8019bbe:	d1ef      	bne.n	8019ba0 <quorem+0xe8>
 8019bc0:	3c01      	subs	r4, #1
 8019bc2:	e7ea      	b.n	8019b9a <quorem+0xe2>
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	e7ee      	b.n	8019ba6 <quorem+0xee>

08019bc8 <_dtoa_r>:
 8019bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bcc:	ed2d 8b02 	vpush	{d8}
 8019bd0:	69c7      	ldr	r7, [r0, #28]
 8019bd2:	b091      	sub	sp, #68	@ 0x44
 8019bd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019bd8:	ec55 4b10 	vmov	r4, r5, d0
 8019bdc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019bde:	9107      	str	r1, [sp, #28]
 8019be0:	4681      	mov	r9, r0
 8019be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019be4:	930d      	str	r3, [sp, #52]	@ 0x34
 8019be6:	b97f      	cbnz	r7, 8019c08 <_dtoa_r+0x40>
 8019be8:	2010      	movs	r0, #16
 8019bea:	f001 f8c7 	bl	801ad7c <malloc>
 8019bee:	4602      	mov	r2, r0
 8019bf0:	f8c9 001c 	str.w	r0, [r9, #28]
 8019bf4:	b920      	cbnz	r0, 8019c00 <_dtoa_r+0x38>
 8019bf6:	4ba0      	ldr	r3, [pc, #640]	@ (8019e78 <_dtoa_r+0x2b0>)
 8019bf8:	21ef      	movs	r1, #239	@ 0xef
 8019bfa:	48a0      	ldr	r0, [pc, #640]	@ (8019e7c <_dtoa_r+0x2b4>)
 8019bfc:	f002 f870 	bl	801bce0 <__assert_func>
 8019c00:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019c04:	6007      	str	r7, [r0, #0]
 8019c06:	60c7      	str	r7, [r0, #12]
 8019c08:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019c0c:	6819      	ldr	r1, [r3, #0]
 8019c0e:	b159      	cbz	r1, 8019c28 <_dtoa_r+0x60>
 8019c10:	685a      	ldr	r2, [r3, #4]
 8019c12:	604a      	str	r2, [r1, #4]
 8019c14:	2301      	movs	r3, #1
 8019c16:	4093      	lsls	r3, r2
 8019c18:	608b      	str	r3, [r1, #8]
 8019c1a:	4648      	mov	r0, r9
 8019c1c:	f001 f9b6 	bl	801af8c <_Bfree>
 8019c20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019c24:	2200      	movs	r2, #0
 8019c26:	601a      	str	r2, [r3, #0]
 8019c28:	1e2b      	subs	r3, r5, #0
 8019c2a:	bfbb      	ittet	lt
 8019c2c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019c30:	9303      	strlt	r3, [sp, #12]
 8019c32:	2300      	movge	r3, #0
 8019c34:	2201      	movlt	r2, #1
 8019c36:	bfac      	ite	ge
 8019c38:	6033      	strge	r3, [r6, #0]
 8019c3a:	6032      	strlt	r2, [r6, #0]
 8019c3c:	4b90      	ldr	r3, [pc, #576]	@ (8019e80 <_dtoa_r+0x2b8>)
 8019c3e:	9e03      	ldr	r6, [sp, #12]
 8019c40:	43b3      	bics	r3, r6
 8019c42:	d110      	bne.n	8019c66 <_dtoa_r+0x9e>
 8019c44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c46:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019c4a:	6013      	str	r3, [r2, #0]
 8019c4c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019c50:	4323      	orrs	r3, r4
 8019c52:	f000 84de 	beq.w	801a612 <_dtoa_r+0xa4a>
 8019c56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c58:	4f8a      	ldr	r7, [pc, #552]	@ (8019e84 <_dtoa_r+0x2bc>)
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	f000 84e0 	beq.w	801a620 <_dtoa_r+0xa58>
 8019c60:	1cfb      	adds	r3, r7, #3
 8019c62:	f000 bcdb 	b.w	801a61c <_dtoa_r+0xa54>
 8019c66:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019c6a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c72:	d10a      	bne.n	8019c8a <_dtoa_r+0xc2>
 8019c74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019c76:	2301      	movs	r3, #1
 8019c78:	6013      	str	r3, [r2, #0]
 8019c7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019c7c:	b113      	cbz	r3, 8019c84 <_dtoa_r+0xbc>
 8019c7e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8019c80:	4b81      	ldr	r3, [pc, #516]	@ (8019e88 <_dtoa_r+0x2c0>)
 8019c82:	6013      	str	r3, [r2, #0]
 8019c84:	4f81      	ldr	r7, [pc, #516]	@ (8019e8c <_dtoa_r+0x2c4>)
 8019c86:	f000 bccb 	b.w	801a620 <_dtoa_r+0xa58>
 8019c8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c8c:	a90f      	add	r1, sp, #60	@ 0x3c
 8019c8e:	4648      	mov	r0, r9
 8019c90:	eeb0 0b48 	vmov.f64	d0, d8
 8019c94:	f001 fd1e 	bl	801b6d4 <__d2b>
 8019c98:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8019c9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019c9e:	9001      	str	r0, [sp, #4]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d045      	beq.n	8019d30 <_dtoa_r+0x168>
 8019ca4:	eeb0 7b48 	vmov.f64	d7, d8
 8019ca8:	ee18 1a90 	vmov	r1, s17
 8019cac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019cb0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8019cb4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8019cb8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8019cbc:	2500      	movs	r5, #0
 8019cbe:	ee07 1a90 	vmov	s15, r1
 8019cc2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8019cc6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e60 <_dtoa_r+0x298>
 8019cca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019cce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8019e68 <_dtoa_r+0x2a0>
 8019cd2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019cd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8019e70 <_dtoa_r+0x2a8>
 8019cda:	ee07 3a90 	vmov	s15, r3
 8019cde:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8019ce2:	eeb0 7b46 	vmov.f64	d7, d6
 8019ce6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019cea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019cee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cf6:	ee16 8a90 	vmov	r8, s13
 8019cfa:	d508      	bpl.n	8019d0e <_dtoa_r+0x146>
 8019cfc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019d00:	eeb4 6b47 	vcmp.f64	d6, d7
 8019d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d08:	bf18      	it	ne
 8019d0a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8019d0e:	f1b8 0f16 	cmp.w	r8, #22
 8019d12:	d82b      	bhi.n	8019d6c <_dtoa_r+0x1a4>
 8019d14:	495e      	ldr	r1, [pc, #376]	@ (8019e90 <_dtoa_r+0x2c8>)
 8019d16:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8019d1a:	ed91 7b00 	vldr	d7, [r1]
 8019d1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d26:	d501      	bpl.n	8019d2c <_dtoa_r+0x164>
 8019d28:	f108 38ff 	add.w	r8, r8, #4294967295
 8019d2c:	2100      	movs	r1, #0
 8019d2e:	e01e      	b.n	8019d6e <_dtoa_r+0x1a6>
 8019d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d32:	4413      	add	r3, r2
 8019d34:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8019d38:	2920      	cmp	r1, #32
 8019d3a:	bfc1      	itttt	gt
 8019d3c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8019d40:	408e      	lslgt	r6, r1
 8019d42:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8019d46:	fa24 f101 	lsrgt.w	r1, r4, r1
 8019d4a:	bfd6      	itet	le
 8019d4c:	f1c1 0120 	rsble	r1, r1, #32
 8019d50:	4331      	orrgt	r1, r6
 8019d52:	fa04 f101 	lslle.w	r1, r4, r1
 8019d56:	ee07 1a90 	vmov	s15, r1
 8019d5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019d5e:	3b01      	subs	r3, #1
 8019d60:	ee17 1a90 	vmov	r1, s15
 8019d64:	2501      	movs	r5, #1
 8019d66:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8019d6a:	e7a8      	b.n	8019cbe <_dtoa_r+0xf6>
 8019d6c:	2101      	movs	r1, #1
 8019d6e:	1ad2      	subs	r2, r2, r3
 8019d70:	1e53      	subs	r3, r2, #1
 8019d72:	9306      	str	r3, [sp, #24]
 8019d74:	bf45      	ittet	mi
 8019d76:	f1c2 0301 	rsbmi	r3, r2, #1
 8019d7a:	9305      	strmi	r3, [sp, #20]
 8019d7c:	2300      	movpl	r3, #0
 8019d7e:	2300      	movmi	r3, #0
 8019d80:	bf4c      	ite	mi
 8019d82:	9306      	strmi	r3, [sp, #24]
 8019d84:	9305      	strpl	r3, [sp, #20]
 8019d86:	f1b8 0f00 	cmp.w	r8, #0
 8019d8a:	910c      	str	r1, [sp, #48]	@ 0x30
 8019d8c:	db18      	blt.n	8019dc0 <_dtoa_r+0x1f8>
 8019d8e:	9b06      	ldr	r3, [sp, #24]
 8019d90:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8019d94:	4443      	add	r3, r8
 8019d96:	9306      	str	r3, [sp, #24]
 8019d98:	2300      	movs	r3, #0
 8019d9a:	9a07      	ldr	r2, [sp, #28]
 8019d9c:	2a09      	cmp	r2, #9
 8019d9e:	d849      	bhi.n	8019e34 <_dtoa_r+0x26c>
 8019da0:	2a05      	cmp	r2, #5
 8019da2:	bfc4      	itt	gt
 8019da4:	3a04      	subgt	r2, #4
 8019da6:	9207      	strgt	r2, [sp, #28]
 8019da8:	9a07      	ldr	r2, [sp, #28]
 8019daa:	f1a2 0202 	sub.w	r2, r2, #2
 8019dae:	bfcc      	ite	gt
 8019db0:	2400      	movgt	r4, #0
 8019db2:	2401      	movle	r4, #1
 8019db4:	2a03      	cmp	r2, #3
 8019db6:	d848      	bhi.n	8019e4a <_dtoa_r+0x282>
 8019db8:	e8df f002 	tbb	[pc, r2]
 8019dbc:	3a2c2e0b 	.word	0x3a2c2e0b
 8019dc0:	9b05      	ldr	r3, [sp, #20]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	eba3 0308 	sub.w	r3, r3, r8
 8019dc8:	9305      	str	r3, [sp, #20]
 8019dca:	920a      	str	r2, [sp, #40]	@ 0x28
 8019dcc:	f1c8 0300 	rsb	r3, r8, #0
 8019dd0:	e7e3      	b.n	8019d9a <_dtoa_r+0x1d2>
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	9208      	str	r2, [sp, #32]
 8019dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019dd8:	2a00      	cmp	r2, #0
 8019dda:	dc39      	bgt.n	8019e50 <_dtoa_r+0x288>
 8019ddc:	f04f 0b01 	mov.w	fp, #1
 8019de0:	46da      	mov	sl, fp
 8019de2:	465a      	mov	r2, fp
 8019de4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8019de8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8019dec:	2100      	movs	r1, #0
 8019dee:	2004      	movs	r0, #4
 8019df0:	f100 0614 	add.w	r6, r0, #20
 8019df4:	4296      	cmp	r6, r2
 8019df6:	d930      	bls.n	8019e5a <_dtoa_r+0x292>
 8019df8:	6079      	str	r1, [r7, #4]
 8019dfa:	4648      	mov	r0, r9
 8019dfc:	9304      	str	r3, [sp, #16]
 8019dfe:	f001 f885 	bl	801af0c <_Balloc>
 8019e02:	9b04      	ldr	r3, [sp, #16]
 8019e04:	4607      	mov	r7, r0
 8019e06:	2800      	cmp	r0, #0
 8019e08:	d146      	bne.n	8019e98 <_dtoa_r+0x2d0>
 8019e0a:	4b22      	ldr	r3, [pc, #136]	@ (8019e94 <_dtoa_r+0x2cc>)
 8019e0c:	4602      	mov	r2, r0
 8019e0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8019e12:	e6f2      	b.n	8019bfa <_dtoa_r+0x32>
 8019e14:	2201      	movs	r2, #1
 8019e16:	e7dd      	b.n	8019dd4 <_dtoa_r+0x20c>
 8019e18:	2200      	movs	r2, #0
 8019e1a:	9208      	str	r2, [sp, #32]
 8019e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e1e:	eb08 0b02 	add.w	fp, r8, r2
 8019e22:	f10b 0a01 	add.w	sl, fp, #1
 8019e26:	4652      	mov	r2, sl
 8019e28:	2a01      	cmp	r2, #1
 8019e2a:	bfb8      	it	lt
 8019e2c:	2201      	movlt	r2, #1
 8019e2e:	e7db      	b.n	8019de8 <_dtoa_r+0x220>
 8019e30:	2201      	movs	r2, #1
 8019e32:	e7f2      	b.n	8019e1a <_dtoa_r+0x252>
 8019e34:	2401      	movs	r4, #1
 8019e36:	2200      	movs	r2, #0
 8019e38:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8019e3c:	f04f 3bff 	mov.w	fp, #4294967295
 8019e40:	2100      	movs	r1, #0
 8019e42:	46da      	mov	sl, fp
 8019e44:	2212      	movs	r2, #18
 8019e46:	9109      	str	r1, [sp, #36]	@ 0x24
 8019e48:	e7ce      	b.n	8019de8 <_dtoa_r+0x220>
 8019e4a:	2201      	movs	r2, #1
 8019e4c:	9208      	str	r2, [sp, #32]
 8019e4e:	e7f5      	b.n	8019e3c <_dtoa_r+0x274>
 8019e50:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8019e54:	46da      	mov	sl, fp
 8019e56:	465a      	mov	r2, fp
 8019e58:	e7c6      	b.n	8019de8 <_dtoa_r+0x220>
 8019e5a:	3101      	adds	r1, #1
 8019e5c:	0040      	lsls	r0, r0, #1
 8019e5e:	e7c7      	b.n	8019df0 <_dtoa_r+0x228>
 8019e60:	636f4361 	.word	0x636f4361
 8019e64:	3fd287a7 	.word	0x3fd287a7
 8019e68:	8b60c8b3 	.word	0x8b60c8b3
 8019e6c:	3fc68a28 	.word	0x3fc68a28
 8019e70:	509f79fb 	.word	0x509f79fb
 8019e74:	3fd34413 	.word	0x3fd34413
 8019e78:	0801d98a 	.word	0x0801d98a
 8019e7c:	0801d9a1 	.word	0x0801d9a1
 8019e80:	7ff00000 	.word	0x7ff00000
 8019e84:	0801d986 	.word	0x0801d986
 8019e88:	0801d952 	.word	0x0801d952
 8019e8c:	0801d951 	.word	0x0801d951
 8019e90:	0801daf8 	.word	0x0801daf8
 8019e94:	0801d9f9 	.word	0x0801d9f9
 8019e98:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8019e9c:	f1ba 0f0e 	cmp.w	sl, #14
 8019ea0:	6010      	str	r0, [r2, #0]
 8019ea2:	d86f      	bhi.n	8019f84 <_dtoa_r+0x3bc>
 8019ea4:	2c00      	cmp	r4, #0
 8019ea6:	d06d      	beq.n	8019f84 <_dtoa_r+0x3bc>
 8019ea8:	f1b8 0f00 	cmp.w	r8, #0
 8019eac:	f340 80c2 	ble.w	801a034 <_dtoa_r+0x46c>
 8019eb0:	4aca      	ldr	r2, [pc, #808]	@ (801a1dc <_dtoa_r+0x614>)
 8019eb2:	f008 010f 	and.w	r1, r8, #15
 8019eb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019eba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8019ebe:	ed92 7b00 	vldr	d7, [r2]
 8019ec2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8019ec6:	f000 80a9 	beq.w	801a01c <_dtoa_r+0x454>
 8019eca:	4ac5      	ldr	r2, [pc, #788]	@ (801a1e0 <_dtoa_r+0x618>)
 8019ecc:	ed92 6b08 	vldr	d6, [r2, #32]
 8019ed0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8019ed4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019ed8:	f001 010f 	and.w	r1, r1, #15
 8019edc:	2203      	movs	r2, #3
 8019ede:	48c0      	ldr	r0, [pc, #768]	@ (801a1e0 <_dtoa_r+0x618>)
 8019ee0:	2900      	cmp	r1, #0
 8019ee2:	f040 809d 	bne.w	801a020 <_dtoa_r+0x458>
 8019ee6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019eea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019eee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019ef2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ef8:	2900      	cmp	r1, #0
 8019efa:	f000 80c1 	beq.w	801a080 <_dtoa_r+0x4b8>
 8019efe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8019f02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f0a:	f140 80b9 	bpl.w	801a080 <_dtoa_r+0x4b8>
 8019f0e:	f1ba 0f00 	cmp.w	sl, #0
 8019f12:	f000 80b5 	beq.w	801a080 <_dtoa_r+0x4b8>
 8019f16:	f1bb 0f00 	cmp.w	fp, #0
 8019f1a:	dd31      	ble.n	8019f80 <_dtoa_r+0x3b8>
 8019f1c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8019f20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019f24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019f28:	f108 31ff 	add.w	r1, r8, #4294967295
 8019f2c:	9104      	str	r1, [sp, #16]
 8019f2e:	3201      	adds	r2, #1
 8019f30:	465c      	mov	r4, fp
 8019f32:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019f36:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8019f3a:	ee07 2a90 	vmov	s15, r2
 8019f3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019f42:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019f46:	ee15 2a90 	vmov	r2, s11
 8019f4a:	ec51 0b15 	vmov	r0, r1, d5
 8019f4e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8019f52:	2c00      	cmp	r4, #0
 8019f54:	f040 8098 	bne.w	801a088 <_dtoa_r+0x4c0>
 8019f58:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8019f5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019f60:	ec41 0b17 	vmov	d7, r0, r1
 8019f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f6c:	f300 8261 	bgt.w	801a432 <_dtoa_r+0x86a>
 8019f70:	eeb1 7b47 	vneg.f64	d7, d7
 8019f74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f7c:	f100 80f5 	bmi.w	801a16a <_dtoa_r+0x5a2>
 8019f80:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019f84:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f86:	2a00      	cmp	r2, #0
 8019f88:	f2c0 812c 	blt.w	801a1e4 <_dtoa_r+0x61c>
 8019f8c:	f1b8 0f0e 	cmp.w	r8, #14
 8019f90:	f300 8128 	bgt.w	801a1e4 <_dtoa_r+0x61c>
 8019f94:	4b91      	ldr	r3, [pc, #580]	@ (801a1dc <_dtoa_r+0x614>)
 8019f96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019f9a:	ed93 6b00 	vldr	d6, [r3]
 8019f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	da03      	bge.n	8019fac <_dtoa_r+0x3e4>
 8019fa4:	f1ba 0f00 	cmp.w	sl, #0
 8019fa8:	f340 80d2 	ble.w	801a150 <_dtoa_r+0x588>
 8019fac:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8019fb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019fb4:	463e      	mov	r6, r7
 8019fb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019fba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019fbe:	ee15 3a10 	vmov	r3, s10
 8019fc2:	3330      	adds	r3, #48	@ 0x30
 8019fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8019fc8:	1bf3      	subs	r3, r6, r7
 8019fca:	459a      	cmp	sl, r3
 8019fcc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019fd0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019fd4:	f040 80f8 	bne.w	801a1c8 <_dtoa_r+0x600>
 8019fd8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019fdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fe4:	f300 80dd 	bgt.w	801a1a2 <_dtoa_r+0x5da>
 8019fe8:	eeb4 7b46 	vcmp.f64	d7, d6
 8019fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff0:	d104      	bne.n	8019ffc <_dtoa_r+0x434>
 8019ff2:	ee15 3a10 	vmov	r3, s10
 8019ff6:	07db      	lsls	r3, r3, #31
 8019ff8:	f100 80d3 	bmi.w	801a1a2 <_dtoa_r+0x5da>
 8019ffc:	9901      	ldr	r1, [sp, #4]
 8019ffe:	4648      	mov	r0, r9
 801a000:	f000 ffc4 	bl	801af8c <_Bfree>
 801a004:	2300      	movs	r3, #0
 801a006:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a008:	7033      	strb	r3, [r6, #0]
 801a00a:	f108 0301 	add.w	r3, r8, #1
 801a00e:	6013      	str	r3, [r2, #0]
 801a010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a012:	2b00      	cmp	r3, #0
 801a014:	f000 8304 	beq.w	801a620 <_dtoa_r+0xa58>
 801a018:	601e      	str	r6, [r3, #0]
 801a01a:	e301      	b.n	801a620 <_dtoa_r+0xa58>
 801a01c:	2202      	movs	r2, #2
 801a01e:	e75e      	b.n	8019ede <_dtoa_r+0x316>
 801a020:	07cc      	lsls	r4, r1, #31
 801a022:	d504      	bpl.n	801a02e <_dtoa_r+0x466>
 801a024:	ed90 6b00 	vldr	d6, [r0]
 801a028:	3201      	adds	r2, #1
 801a02a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a02e:	1049      	asrs	r1, r1, #1
 801a030:	3008      	adds	r0, #8
 801a032:	e755      	b.n	8019ee0 <_dtoa_r+0x318>
 801a034:	d022      	beq.n	801a07c <_dtoa_r+0x4b4>
 801a036:	f1c8 0100 	rsb	r1, r8, #0
 801a03a:	4a68      	ldr	r2, [pc, #416]	@ (801a1dc <_dtoa_r+0x614>)
 801a03c:	f001 000f 	and.w	r0, r1, #15
 801a040:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a044:	ed92 7b00 	vldr	d7, [r2]
 801a048:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a04c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a050:	4863      	ldr	r0, [pc, #396]	@ (801a1e0 <_dtoa_r+0x618>)
 801a052:	1109      	asrs	r1, r1, #4
 801a054:	2400      	movs	r4, #0
 801a056:	2202      	movs	r2, #2
 801a058:	b929      	cbnz	r1, 801a066 <_dtoa_r+0x49e>
 801a05a:	2c00      	cmp	r4, #0
 801a05c:	f43f af49 	beq.w	8019ef2 <_dtoa_r+0x32a>
 801a060:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a064:	e745      	b.n	8019ef2 <_dtoa_r+0x32a>
 801a066:	07ce      	lsls	r6, r1, #31
 801a068:	d505      	bpl.n	801a076 <_dtoa_r+0x4ae>
 801a06a:	ed90 6b00 	vldr	d6, [r0]
 801a06e:	3201      	adds	r2, #1
 801a070:	2401      	movs	r4, #1
 801a072:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a076:	1049      	asrs	r1, r1, #1
 801a078:	3008      	adds	r0, #8
 801a07a:	e7ed      	b.n	801a058 <_dtoa_r+0x490>
 801a07c:	2202      	movs	r2, #2
 801a07e:	e738      	b.n	8019ef2 <_dtoa_r+0x32a>
 801a080:	f8cd 8010 	str.w	r8, [sp, #16]
 801a084:	4654      	mov	r4, sl
 801a086:	e754      	b.n	8019f32 <_dtoa_r+0x36a>
 801a088:	4a54      	ldr	r2, [pc, #336]	@ (801a1dc <_dtoa_r+0x614>)
 801a08a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a08e:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a092:	9a08      	ldr	r2, [sp, #32]
 801a094:	ec41 0b17 	vmov	d7, r0, r1
 801a098:	443c      	add	r4, r7
 801a09a:	b34a      	cbz	r2, 801a0f0 <_dtoa_r+0x528>
 801a09c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a0a0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a0a4:	463e      	mov	r6, r7
 801a0a6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a0aa:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a0ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a0b2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a0b6:	ee14 2a90 	vmov	r2, s9
 801a0ba:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a0be:	3230      	adds	r2, #48	@ 0x30
 801a0c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a0c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0cc:	f806 2b01 	strb.w	r2, [r6], #1
 801a0d0:	d438      	bmi.n	801a144 <_dtoa_r+0x57c>
 801a0d2:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a0d6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0de:	d462      	bmi.n	801a1a6 <_dtoa_r+0x5de>
 801a0e0:	42a6      	cmp	r6, r4
 801a0e2:	f43f af4d 	beq.w	8019f80 <_dtoa_r+0x3b8>
 801a0e6:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a0ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a0ee:	e7e0      	b.n	801a0b2 <_dtoa_r+0x4ea>
 801a0f0:	4621      	mov	r1, r4
 801a0f2:	463e      	mov	r6, r7
 801a0f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a0f8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a0fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a100:	ee14 2a90 	vmov	r2, s9
 801a104:	3230      	adds	r2, #48	@ 0x30
 801a106:	f806 2b01 	strb.w	r2, [r6], #1
 801a10a:	42a6      	cmp	r6, r4
 801a10c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a110:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a114:	d119      	bne.n	801a14a <_dtoa_r+0x582>
 801a116:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a11a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a11e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a126:	dc3e      	bgt.n	801a1a6 <_dtoa_r+0x5de>
 801a128:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a12c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a134:	f57f af24 	bpl.w	8019f80 <_dtoa_r+0x3b8>
 801a138:	460e      	mov	r6, r1
 801a13a:	3901      	subs	r1, #1
 801a13c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a140:	2b30      	cmp	r3, #48	@ 0x30
 801a142:	d0f9      	beq.n	801a138 <_dtoa_r+0x570>
 801a144:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a148:	e758      	b.n	8019ffc <_dtoa_r+0x434>
 801a14a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a14e:	e7d5      	b.n	801a0fc <_dtoa_r+0x534>
 801a150:	d10b      	bne.n	801a16a <_dtoa_r+0x5a2>
 801a152:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a156:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a15a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a15e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a166:	f2c0 8161 	blt.w	801a42c <_dtoa_r+0x864>
 801a16a:	2400      	movs	r4, #0
 801a16c:	4625      	mov	r5, r4
 801a16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a170:	43db      	mvns	r3, r3
 801a172:	9304      	str	r3, [sp, #16]
 801a174:	463e      	mov	r6, r7
 801a176:	f04f 0800 	mov.w	r8, #0
 801a17a:	4621      	mov	r1, r4
 801a17c:	4648      	mov	r0, r9
 801a17e:	f000 ff05 	bl	801af8c <_Bfree>
 801a182:	2d00      	cmp	r5, #0
 801a184:	d0de      	beq.n	801a144 <_dtoa_r+0x57c>
 801a186:	f1b8 0f00 	cmp.w	r8, #0
 801a18a:	d005      	beq.n	801a198 <_dtoa_r+0x5d0>
 801a18c:	45a8      	cmp	r8, r5
 801a18e:	d003      	beq.n	801a198 <_dtoa_r+0x5d0>
 801a190:	4641      	mov	r1, r8
 801a192:	4648      	mov	r0, r9
 801a194:	f000 fefa 	bl	801af8c <_Bfree>
 801a198:	4629      	mov	r1, r5
 801a19a:	4648      	mov	r0, r9
 801a19c:	f000 fef6 	bl	801af8c <_Bfree>
 801a1a0:	e7d0      	b.n	801a144 <_dtoa_r+0x57c>
 801a1a2:	f8cd 8010 	str.w	r8, [sp, #16]
 801a1a6:	4633      	mov	r3, r6
 801a1a8:	461e      	mov	r6, r3
 801a1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a1ae:	2a39      	cmp	r2, #57	@ 0x39
 801a1b0:	d106      	bne.n	801a1c0 <_dtoa_r+0x5f8>
 801a1b2:	429f      	cmp	r7, r3
 801a1b4:	d1f8      	bne.n	801a1a8 <_dtoa_r+0x5e0>
 801a1b6:	9a04      	ldr	r2, [sp, #16]
 801a1b8:	3201      	adds	r2, #1
 801a1ba:	9204      	str	r2, [sp, #16]
 801a1bc:	2230      	movs	r2, #48	@ 0x30
 801a1be:	703a      	strb	r2, [r7, #0]
 801a1c0:	781a      	ldrb	r2, [r3, #0]
 801a1c2:	3201      	adds	r2, #1
 801a1c4:	701a      	strb	r2, [r3, #0]
 801a1c6:	e7bd      	b.n	801a144 <_dtoa_r+0x57c>
 801a1c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a1cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d4:	f47f aeef 	bne.w	8019fb6 <_dtoa_r+0x3ee>
 801a1d8:	e710      	b.n	8019ffc <_dtoa_r+0x434>
 801a1da:	bf00      	nop
 801a1dc:	0801daf8 	.word	0x0801daf8
 801a1e0:	0801dad0 	.word	0x0801dad0
 801a1e4:	9908      	ldr	r1, [sp, #32]
 801a1e6:	2900      	cmp	r1, #0
 801a1e8:	f000 80e3 	beq.w	801a3b2 <_dtoa_r+0x7ea>
 801a1ec:	9907      	ldr	r1, [sp, #28]
 801a1ee:	2901      	cmp	r1, #1
 801a1f0:	f300 80c8 	bgt.w	801a384 <_dtoa_r+0x7bc>
 801a1f4:	2d00      	cmp	r5, #0
 801a1f6:	f000 80c1 	beq.w	801a37c <_dtoa_r+0x7b4>
 801a1fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a1fe:	9e05      	ldr	r6, [sp, #20]
 801a200:	461c      	mov	r4, r3
 801a202:	9304      	str	r3, [sp, #16]
 801a204:	9b05      	ldr	r3, [sp, #20]
 801a206:	4413      	add	r3, r2
 801a208:	9305      	str	r3, [sp, #20]
 801a20a:	9b06      	ldr	r3, [sp, #24]
 801a20c:	2101      	movs	r1, #1
 801a20e:	4413      	add	r3, r2
 801a210:	4648      	mov	r0, r9
 801a212:	9306      	str	r3, [sp, #24]
 801a214:	f000 ffb8 	bl	801b188 <__i2b>
 801a218:	9b04      	ldr	r3, [sp, #16]
 801a21a:	4605      	mov	r5, r0
 801a21c:	b166      	cbz	r6, 801a238 <_dtoa_r+0x670>
 801a21e:	9a06      	ldr	r2, [sp, #24]
 801a220:	2a00      	cmp	r2, #0
 801a222:	dd09      	ble.n	801a238 <_dtoa_r+0x670>
 801a224:	42b2      	cmp	r2, r6
 801a226:	9905      	ldr	r1, [sp, #20]
 801a228:	bfa8      	it	ge
 801a22a:	4632      	movge	r2, r6
 801a22c:	1a89      	subs	r1, r1, r2
 801a22e:	9105      	str	r1, [sp, #20]
 801a230:	9906      	ldr	r1, [sp, #24]
 801a232:	1ab6      	subs	r6, r6, r2
 801a234:	1a8a      	subs	r2, r1, r2
 801a236:	9206      	str	r2, [sp, #24]
 801a238:	b1fb      	cbz	r3, 801a27a <_dtoa_r+0x6b2>
 801a23a:	9a08      	ldr	r2, [sp, #32]
 801a23c:	2a00      	cmp	r2, #0
 801a23e:	f000 80bc 	beq.w	801a3ba <_dtoa_r+0x7f2>
 801a242:	b19c      	cbz	r4, 801a26c <_dtoa_r+0x6a4>
 801a244:	4629      	mov	r1, r5
 801a246:	4622      	mov	r2, r4
 801a248:	4648      	mov	r0, r9
 801a24a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a24c:	f001 f85c 	bl	801b308 <__pow5mult>
 801a250:	9a01      	ldr	r2, [sp, #4]
 801a252:	4601      	mov	r1, r0
 801a254:	4605      	mov	r5, r0
 801a256:	4648      	mov	r0, r9
 801a258:	f000 ffac 	bl	801b1b4 <__multiply>
 801a25c:	9901      	ldr	r1, [sp, #4]
 801a25e:	9004      	str	r0, [sp, #16]
 801a260:	4648      	mov	r0, r9
 801a262:	f000 fe93 	bl	801af8c <_Bfree>
 801a266:	9a04      	ldr	r2, [sp, #16]
 801a268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a26a:	9201      	str	r2, [sp, #4]
 801a26c:	1b1a      	subs	r2, r3, r4
 801a26e:	d004      	beq.n	801a27a <_dtoa_r+0x6b2>
 801a270:	9901      	ldr	r1, [sp, #4]
 801a272:	4648      	mov	r0, r9
 801a274:	f001 f848 	bl	801b308 <__pow5mult>
 801a278:	9001      	str	r0, [sp, #4]
 801a27a:	2101      	movs	r1, #1
 801a27c:	4648      	mov	r0, r9
 801a27e:	f000 ff83 	bl	801b188 <__i2b>
 801a282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a284:	4604      	mov	r4, r0
 801a286:	2b00      	cmp	r3, #0
 801a288:	f000 81d0 	beq.w	801a62c <_dtoa_r+0xa64>
 801a28c:	461a      	mov	r2, r3
 801a28e:	4601      	mov	r1, r0
 801a290:	4648      	mov	r0, r9
 801a292:	f001 f839 	bl	801b308 <__pow5mult>
 801a296:	9b07      	ldr	r3, [sp, #28]
 801a298:	2b01      	cmp	r3, #1
 801a29a:	4604      	mov	r4, r0
 801a29c:	f300 8095 	bgt.w	801a3ca <_dtoa_r+0x802>
 801a2a0:	9b02      	ldr	r3, [sp, #8]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	f040 808b 	bne.w	801a3be <_dtoa_r+0x7f6>
 801a2a8:	9b03      	ldr	r3, [sp, #12]
 801a2aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a2ae:	2a00      	cmp	r2, #0
 801a2b0:	f040 8087 	bne.w	801a3c2 <_dtoa_r+0x7fa>
 801a2b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a2b8:	0d12      	lsrs	r2, r2, #20
 801a2ba:	0512      	lsls	r2, r2, #20
 801a2bc:	2a00      	cmp	r2, #0
 801a2be:	f000 8082 	beq.w	801a3c6 <_dtoa_r+0x7fe>
 801a2c2:	9b05      	ldr	r3, [sp, #20]
 801a2c4:	3301      	adds	r3, #1
 801a2c6:	9305      	str	r3, [sp, #20]
 801a2c8:	9b06      	ldr	r3, [sp, #24]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	9306      	str	r3, [sp, #24]
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	f000 81af 	beq.w	801a638 <_dtoa_r+0xa70>
 801a2da:	6922      	ldr	r2, [r4, #16]
 801a2dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a2e0:	6910      	ldr	r0, [r2, #16]
 801a2e2:	f000 ff05 	bl	801b0f0 <__hi0bits>
 801a2e6:	f1c0 0020 	rsb	r0, r0, #32
 801a2ea:	9b06      	ldr	r3, [sp, #24]
 801a2ec:	4418      	add	r0, r3
 801a2ee:	f010 001f 	ands.w	r0, r0, #31
 801a2f2:	d076      	beq.n	801a3e2 <_dtoa_r+0x81a>
 801a2f4:	f1c0 0220 	rsb	r2, r0, #32
 801a2f8:	2a04      	cmp	r2, #4
 801a2fa:	dd69      	ble.n	801a3d0 <_dtoa_r+0x808>
 801a2fc:	9b05      	ldr	r3, [sp, #20]
 801a2fe:	f1c0 001c 	rsb	r0, r0, #28
 801a302:	4403      	add	r3, r0
 801a304:	9305      	str	r3, [sp, #20]
 801a306:	9b06      	ldr	r3, [sp, #24]
 801a308:	4406      	add	r6, r0
 801a30a:	4403      	add	r3, r0
 801a30c:	9306      	str	r3, [sp, #24]
 801a30e:	9b05      	ldr	r3, [sp, #20]
 801a310:	2b00      	cmp	r3, #0
 801a312:	dd05      	ble.n	801a320 <_dtoa_r+0x758>
 801a314:	9901      	ldr	r1, [sp, #4]
 801a316:	461a      	mov	r2, r3
 801a318:	4648      	mov	r0, r9
 801a31a:	f001 f84f 	bl	801b3bc <__lshift>
 801a31e:	9001      	str	r0, [sp, #4]
 801a320:	9b06      	ldr	r3, [sp, #24]
 801a322:	2b00      	cmp	r3, #0
 801a324:	dd05      	ble.n	801a332 <_dtoa_r+0x76a>
 801a326:	4621      	mov	r1, r4
 801a328:	461a      	mov	r2, r3
 801a32a:	4648      	mov	r0, r9
 801a32c:	f001 f846 	bl	801b3bc <__lshift>
 801a330:	4604      	mov	r4, r0
 801a332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a334:	2b00      	cmp	r3, #0
 801a336:	d056      	beq.n	801a3e6 <_dtoa_r+0x81e>
 801a338:	9801      	ldr	r0, [sp, #4]
 801a33a:	4621      	mov	r1, r4
 801a33c:	f001 f8aa 	bl	801b494 <__mcmp>
 801a340:	2800      	cmp	r0, #0
 801a342:	da50      	bge.n	801a3e6 <_dtoa_r+0x81e>
 801a344:	f108 33ff 	add.w	r3, r8, #4294967295
 801a348:	9304      	str	r3, [sp, #16]
 801a34a:	9901      	ldr	r1, [sp, #4]
 801a34c:	2300      	movs	r3, #0
 801a34e:	220a      	movs	r2, #10
 801a350:	4648      	mov	r0, r9
 801a352:	f000 fe3d 	bl	801afd0 <__multadd>
 801a356:	9b08      	ldr	r3, [sp, #32]
 801a358:	9001      	str	r0, [sp, #4]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f000 816e 	beq.w	801a63c <_dtoa_r+0xa74>
 801a360:	4629      	mov	r1, r5
 801a362:	2300      	movs	r3, #0
 801a364:	220a      	movs	r2, #10
 801a366:	4648      	mov	r0, r9
 801a368:	f000 fe32 	bl	801afd0 <__multadd>
 801a36c:	f1bb 0f00 	cmp.w	fp, #0
 801a370:	4605      	mov	r5, r0
 801a372:	dc64      	bgt.n	801a43e <_dtoa_r+0x876>
 801a374:	9b07      	ldr	r3, [sp, #28]
 801a376:	2b02      	cmp	r3, #2
 801a378:	dc3e      	bgt.n	801a3f8 <_dtoa_r+0x830>
 801a37a:	e060      	b.n	801a43e <_dtoa_r+0x876>
 801a37c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a37e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a382:	e73c      	b.n	801a1fe <_dtoa_r+0x636>
 801a384:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a388:	42a3      	cmp	r3, r4
 801a38a:	bfbf      	itttt	lt
 801a38c:	1ae2      	sublt	r2, r4, r3
 801a38e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a390:	189b      	addlt	r3, r3, r2
 801a392:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a394:	bfae      	itee	ge
 801a396:	1b1c      	subge	r4, r3, r4
 801a398:	4623      	movlt	r3, r4
 801a39a:	2400      	movlt	r4, #0
 801a39c:	f1ba 0f00 	cmp.w	sl, #0
 801a3a0:	bfb5      	itete	lt
 801a3a2:	9a05      	ldrlt	r2, [sp, #20]
 801a3a4:	9e05      	ldrge	r6, [sp, #20]
 801a3a6:	eba2 060a 	sublt.w	r6, r2, sl
 801a3aa:	4652      	movge	r2, sl
 801a3ac:	bfb8      	it	lt
 801a3ae:	2200      	movlt	r2, #0
 801a3b0:	e727      	b.n	801a202 <_dtoa_r+0x63a>
 801a3b2:	9e05      	ldr	r6, [sp, #20]
 801a3b4:	9d08      	ldr	r5, [sp, #32]
 801a3b6:	461c      	mov	r4, r3
 801a3b8:	e730      	b.n	801a21c <_dtoa_r+0x654>
 801a3ba:	461a      	mov	r2, r3
 801a3bc:	e758      	b.n	801a270 <_dtoa_r+0x6a8>
 801a3be:	2300      	movs	r3, #0
 801a3c0:	e786      	b.n	801a2d0 <_dtoa_r+0x708>
 801a3c2:	9b02      	ldr	r3, [sp, #8]
 801a3c4:	e784      	b.n	801a2d0 <_dtoa_r+0x708>
 801a3c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a3c8:	e783      	b.n	801a2d2 <_dtoa_r+0x70a>
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a3ce:	e784      	b.n	801a2da <_dtoa_r+0x712>
 801a3d0:	d09d      	beq.n	801a30e <_dtoa_r+0x746>
 801a3d2:	9b05      	ldr	r3, [sp, #20]
 801a3d4:	321c      	adds	r2, #28
 801a3d6:	4413      	add	r3, r2
 801a3d8:	9305      	str	r3, [sp, #20]
 801a3da:	9b06      	ldr	r3, [sp, #24]
 801a3dc:	4416      	add	r6, r2
 801a3de:	4413      	add	r3, r2
 801a3e0:	e794      	b.n	801a30c <_dtoa_r+0x744>
 801a3e2:	4602      	mov	r2, r0
 801a3e4:	e7f5      	b.n	801a3d2 <_dtoa_r+0x80a>
 801a3e6:	f1ba 0f00 	cmp.w	sl, #0
 801a3ea:	f8cd 8010 	str.w	r8, [sp, #16]
 801a3ee:	46d3      	mov	fp, sl
 801a3f0:	dc21      	bgt.n	801a436 <_dtoa_r+0x86e>
 801a3f2:	9b07      	ldr	r3, [sp, #28]
 801a3f4:	2b02      	cmp	r3, #2
 801a3f6:	dd1e      	ble.n	801a436 <_dtoa_r+0x86e>
 801a3f8:	f1bb 0f00 	cmp.w	fp, #0
 801a3fc:	f47f aeb7 	bne.w	801a16e <_dtoa_r+0x5a6>
 801a400:	4621      	mov	r1, r4
 801a402:	465b      	mov	r3, fp
 801a404:	2205      	movs	r2, #5
 801a406:	4648      	mov	r0, r9
 801a408:	f000 fde2 	bl	801afd0 <__multadd>
 801a40c:	4601      	mov	r1, r0
 801a40e:	4604      	mov	r4, r0
 801a410:	9801      	ldr	r0, [sp, #4]
 801a412:	f001 f83f 	bl	801b494 <__mcmp>
 801a416:	2800      	cmp	r0, #0
 801a418:	f77f aea9 	ble.w	801a16e <_dtoa_r+0x5a6>
 801a41c:	463e      	mov	r6, r7
 801a41e:	2331      	movs	r3, #49	@ 0x31
 801a420:	f806 3b01 	strb.w	r3, [r6], #1
 801a424:	9b04      	ldr	r3, [sp, #16]
 801a426:	3301      	adds	r3, #1
 801a428:	9304      	str	r3, [sp, #16]
 801a42a:	e6a4      	b.n	801a176 <_dtoa_r+0x5ae>
 801a42c:	f8cd 8010 	str.w	r8, [sp, #16]
 801a430:	4654      	mov	r4, sl
 801a432:	4625      	mov	r5, r4
 801a434:	e7f2      	b.n	801a41c <_dtoa_r+0x854>
 801a436:	9b08      	ldr	r3, [sp, #32]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	f000 8103 	beq.w	801a644 <_dtoa_r+0xa7c>
 801a43e:	2e00      	cmp	r6, #0
 801a440:	dd05      	ble.n	801a44e <_dtoa_r+0x886>
 801a442:	4629      	mov	r1, r5
 801a444:	4632      	mov	r2, r6
 801a446:	4648      	mov	r0, r9
 801a448:	f000 ffb8 	bl	801b3bc <__lshift>
 801a44c:	4605      	mov	r5, r0
 801a44e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a450:	2b00      	cmp	r3, #0
 801a452:	d058      	beq.n	801a506 <_dtoa_r+0x93e>
 801a454:	6869      	ldr	r1, [r5, #4]
 801a456:	4648      	mov	r0, r9
 801a458:	f000 fd58 	bl	801af0c <_Balloc>
 801a45c:	4606      	mov	r6, r0
 801a45e:	b928      	cbnz	r0, 801a46c <_dtoa_r+0x8a4>
 801a460:	4b82      	ldr	r3, [pc, #520]	@ (801a66c <_dtoa_r+0xaa4>)
 801a462:	4602      	mov	r2, r0
 801a464:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a468:	f7ff bbc7 	b.w	8019bfa <_dtoa_r+0x32>
 801a46c:	692a      	ldr	r2, [r5, #16]
 801a46e:	3202      	adds	r2, #2
 801a470:	0092      	lsls	r2, r2, #2
 801a472:	f105 010c 	add.w	r1, r5, #12
 801a476:	300c      	adds	r0, #12
 801a478:	f7ff fb05 	bl	8019a86 <memcpy>
 801a47c:	2201      	movs	r2, #1
 801a47e:	4631      	mov	r1, r6
 801a480:	4648      	mov	r0, r9
 801a482:	f000 ff9b 	bl	801b3bc <__lshift>
 801a486:	1c7b      	adds	r3, r7, #1
 801a488:	9305      	str	r3, [sp, #20]
 801a48a:	eb07 030b 	add.w	r3, r7, fp
 801a48e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a490:	9b02      	ldr	r3, [sp, #8]
 801a492:	f003 0301 	and.w	r3, r3, #1
 801a496:	46a8      	mov	r8, r5
 801a498:	9308      	str	r3, [sp, #32]
 801a49a:	4605      	mov	r5, r0
 801a49c:	9b05      	ldr	r3, [sp, #20]
 801a49e:	9801      	ldr	r0, [sp, #4]
 801a4a0:	4621      	mov	r1, r4
 801a4a2:	f103 3bff 	add.w	fp, r3, #4294967295
 801a4a6:	f7ff fb07 	bl	8019ab8 <quorem>
 801a4aa:	4641      	mov	r1, r8
 801a4ac:	9002      	str	r0, [sp, #8]
 801a4ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a4b2:	9801      	ldr	r0, [sp, #4]
 801a4b4:	f000 ffee 	bl	801b494 <__mcmp>
 801a4b8:	462a      	mov	r2, r5
 801a4ba:	9006      	str	r0, [sp, #24]
 801a4bc:	4621      	mov	r1, r4
 801a4be:	4648      	mov	r0, r9
 801a4c0:	f001 f804 	bl	801b4cc <__mdiff>
 801a4c4:	68c2      	ldr	r2, [r0, #12]
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	b9fa      	cbnz	r2, 801a50a <_dtoa_r+0x942>
 801a4ca:	4601      	mov	r1, r0
 801a4cc:	9801      	ldr	r0, [sp, #4]
 801a4ce:	f000 ffe1 	bl	801b494 <__mcmp>
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	4631      	mov	r1, r6
 801a4d6:	4648      	mov	r0, r9
 801a4d8:	920a      	str	r2, [sp, #40]	@ 0x28
 801a4da:	f000 fd57 	bl	801af8c <_Bfree>
 801a4de:	9b07      	ldr	r3, [sp, #28]
 801a4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4e2:	9e05      	ldr	r6, [sp, #20]
 801a4e4:	ea43 0102 	orr.w	r1, r3, r2
 801a4e8:	9b08      	ldr	r3, [sp, #32]
 801a4ea:	4319      	orrs	r1, r3
 801a4ec:	d10f      	bne.n	801a50e <_dtoa_r+0x946>
 801a4ee:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a4f2:	d028      	beq.n	801a546 <_dtoa_r+0x97e>
 801a4f4:	9b06      	ldr	r3, [sp, #24]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	dd02      	ble.n	801a500 <_dtoa_r+0x938>
 801a4fa:	9b02      	ldr	r3, [sp, #8]
 801a4fc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a500:	f88b a000 	strb.w	sl, [fp]
 801a504:	e639      	b.n	801a17a <_dtoa_r+0x5b2>
 801a506:	4628      	mov	r0, r5
 801a508:	e7bd      	b.n	801a486 <_dtoa_r+0x8be>
 801a50a:	2201      	movs	r2, #1
 801a50c:	e7e2      	b.n	801a4d4 <_dtoa_r+0x90c>
 801a50e:	9b06      	ldr	r3, [sp, #24]
 801a510:	2b00      	cmp	r3, #0
 801a512:	db04      	blt.n	801a51e <_dtoa_r+0x956>
 801a514:	9907      	ldr	r1, [sp, #28]
 801a516:	430b      	orrs	r3, r1
 801a518:	9908      	ldr	r1, [sp, #32]
 801a51a:	430b      	orrs	r3, r1
 801a51c:	d120      	bne.n	801a560 <_dtoa_r+0x998>
 801a51e:	2a00      	cmp	r2, #0
 801a520:	ddee      	ble.n	801a500 <_dtoa_r+0x938>
 801a522:	9901      	ldr	r1, [sp, #4]
 801a524:	2201      	movs	r2, #1
 801a526:	4648      	mov	r0, r9
 801a528:	f000 ff48 	bl	801b3bc <__lshift>
 801a52c:	4621      	mov	r1, r4
 801a52e:	9001      	str	r0, [sp, #4]
 801a530:	f000 ffb0 	bl	801b494 <__mcmp>
 801a534:	2800      	cmp	r0, #0
 801a536:	dc03      	bgt.n	801a540 <_dtoa_r+0x978>
 801a538:	d1e2      	bne.n	801a500 <_dtoa_r+0x938>
 801a53a:	f01a 0f01 	tst.w	sl, #1
 801a53e:	d0df      	beq.n	801a500 <_dtoa_r+0x938>
 801a540:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a544:	d1d9      	bne.n	801a4fa <_dtoa_r+0x932>
 801a546:	2339      	movs	r3, #57	@ 0x39
 801a548:	f88b 3000 	strb.w	r3, [fp]
 801a54c:	4633      	mov	r3, r6
 801a54e:	461e      	mov	r6, r3
 801a550:	3b01      	subs	r3, #1
 801a552:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a556:	2a39      	cmp	r2, #57	@ 0x39
 801a558:	d053      	beq.n	801a602 <_dtoa_r+0xa3a>
 801a55a:	3201      	adds	r2, #1
 801a55c:	701a      	strb	r2, [r3, #0]
 801a55e:	e60c      	b.n	801a17a <_dtoa_r+0x5b2>
 801a560:	2a00      	cmp	r2, #0
 801a562:	dd07      	ble.n	801a574 <_dtoa_r+0x9ac>
 801a564:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a568:	d0ed      	beq.n	801a546 <_dtoa_r+0x97e>
 801a56a:	f10a 0301 	add.w	r3, sl, #1
 801a56e:	f88b 3000 	strb.w	r3, [fp]
 801a572:	e602      	b.n	801a17a <_dtoa_r+0x5b2>
 801a574:	9b05      	ldr	r3, [sp, #20]
 801a576:	9a05      	ldr	r2, [sp, #20]
 801a578:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a57e:	4293      	cmp	r3, r2
 801a580:	d029      	beq.n	801a5d6 <_dtoa_r+0xa0e>
 801a582:	9901      	ldr	r1, [sp, #4]
 801a584:	2300      	movs	r3, #0
 801a586:	220a      	movs	r2, #10
 801a588:	4648      	mov	r0, r9
 801a58a:	f000 fd21 	bl	801afd0 <__multadd>
 801a58e:	45a8      	cmp	r8, r5
 801a590:	9001      	str	r0, [sp, #4]
 801a592:	f04f 0300 	mov.w	r3, #0
 801a596:	f04f 020a 	mov.w	r2, #10
 801a59a:	4641      	mov	r1, r8
 801a59c:	4648      	mov	r0, r9
 801a59e:	d107      	bne.n	801a5b0 <_dtoa_r+0x9e8>
 801a5a0:	f000 fd16 	bl	801afd0 <__multadd>
 801a5a4:	4680      	mov	r8, r0
 801a5a6:	4605      	mov	r5, r0
 801a5a8:	9b05      	ldr	r3, [sp, #20]
 801a5aa:	3301      	adds	r3, #1
 801a5ac:	9305      	str	r3, [sp, #20]
 801a5ae:	e775      	b.n	801a49c <_dtoa_r+0x8d4>
 801a5b0:	f000 fd0e 	bl	801afd0 <__multadd>
 801a5b4:	4629      	mov	r1, r5
 801a5b6:	4680      	mov	r8, r0
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	220a      	movs	r2, #10
 801a5bc:	4648      	mov	r0, r9
 801a5be:	f000 fd07 	bl	801afd0 <__multadd>
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	e7f0      	b.n	801a5a8 <_dtoa_r+0x9e0>
 801a5c6:	f1bb 0f00 	cmp.w	fp, #0
 801a5ca:	bfcc      	ite	gt
 801a5cc:	465e      	movgt	r6, fp
 801a5ce:	2601      	movle	r6, #1
 801a5d0:	443e      	add	r6, r7
 801a5d2:	f04f 0800 	mov.w	r8, #0
 801a5d6:	9901      	ldr	r1, [sp, #4]
 801a5d8:	2201      	movs	r2, #1
 801a5da:	4648      	mov	r0, r9
 801a5dc:	f000 feee 	bl	801b3bc <__lshift>
 801a5e0:	4621      	mov	r1, r4
 801a5e2:	9001      	str	r0, [sp, #4]
 801a5e4:	f000 ff56 	bl	801b494 <__mcmp>
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	dcaf      	bgt.n	801a54c <_dtoa_r+0x984>
 801a5ec:	d102      	bne.n	801a5f4 <_dtoa_r+0xa2c>
 801a5ee:	f01a 0f01 	tst.w	sl, #1
 801a5f2:	d1ab      	bne.n	801a54c <_dtoa_r+0x984>
 801a5f4:	4633      	mov	r3, r6
 801a5f6:	461e      	mov	r6, r3
 801a5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a5fc:	2a30      	cmp	r2, #48	@ 0x30
 801a5fe:	d0fa      	beq.n	801a5f6 <_dtoa_r+0xa2e>
 801a600:	e5bb      	b.n	801a17a <_dtoa_r+0x5b2>
 801a602:	429f      	cmp	r7, r3
 801a604:	d1a3      	bne.n	801a54e <_dtoa_r+0x986>
 801a606:	9b04      	ldr	r3, [sp, #16]
 801a608:	3301      	adds	r3, #1
 801a60a:	9304      	str	r3, [sp, #16]
 801a60c:	2331      	movs	r3, #49	@ 0x31
 801a60e:	703b      	strb	r3, [r7, #0]
 801a610:	e5b3      	b.n	801a17a <_dtoa_r+0x5b2>
 801a612:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a614:	4f16      	ldr	r7, [pc, #88]	@ (801a670 <_dtoa_r+0xaa8>)
 801a616:	b11b      	cbz	r3, 801a620 <_dtoa_r+0xa58>
 801a618:	f107 0308 	add.w	r3, r7, #8
 801a61c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a61e:	6013      	str	r3, [r2, #0]
 801a620:	4638      	mov	r0, r7
 801a622:	b011      	add	sp, #68	@ 0x44
 801a624:	ecbd 8b02 	vpop	{d8}
 801a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a62c:	9b07      	ldr	r3, [sp, #28]
 801a62e:	2b01      	cmp	r3, #1
 801a630:	f77f ae36 	ble.w	801a2a0 <_dtoa_r+0x6d8>
 801a634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a636:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a638:	2001      	movs	r0, #1
 801a63a:	e656      	b.n	801a2ea <_dtoa_r+0x722>
 801a63c:	f1bb 0f00 	cmp.w	fp, #0
 801a640:	f77f aed7 	ble.w	801a3f2 <_dtoa_r+0x82a>
 801a644:	463e      	mov	r6, r7
 801a646:	9801      	ldr	r0, [sp, #4]
 801a648:	4621      	mov	r1, r4
 801a64a:	f7ff fa35 	bl	8019ab8 <quorem>
 801a64e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a652:	f806 ab01 	strb.w	sl, [r6], #1
 801a656:	1bf2      	subs	r2, r6, r7
 801a658:	4593      	cmp	fp, r2
 801a65a:	ddb4      	ble.n	801a5c6 <_dtoa_r+0x9fe>
 801a65c:	9901      	ldr	r1, [sp, #4]
 801a65e:	2300      	movs	r3, #0
 801a660:	220a      	movs	r2, #10
 801a662:	4648      	mov	r0, r9
 801a664:	f000 fcb4 	bl	801afd0 <__multadd>
 801a668:	9001      	str	r0, [sp, #4]
 801a66a:	e7ec      	b.n	801a646 <_dtoa_r+0xa7e>
 801a66c:	0801d9f9 	.word	0x0801d9f9
 801a670:	0801d97d 	.word	0x0801d97d

0801a674 <_free_r>:
 801a674:	b538      	push	{r3, r4, r5, lr}
 801a676:	4605      	mov	r5, r0
 801a678:	2900      	cmp	r1, #0
 801a67a:	d041      	beq.n	801a700 <_free_r+0x8c>
 801a67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a680:	1f0c      	subs	r4, r1, #4
 801a682:	2b00      	cmp	r3, #0
 801a684:	bfb8      	it	lt
 801a686:	18e4      	addlt	r4, r4, r3
 801a688:	f000 fc34 	bl	801aef4 <__malloc_lock>
 801a68c:	4a1d      	ldr	r2, [pc, #116]	@ (801a704 <_free_r+0x90>)
 801a68e:	6813      	ldr	r3, [r2, #0]
 801a690:	b933      	cbnz	r3, 801a6a0 <_free_r+0x2c>
 801a692:	6063      	str	r3, [r4, #4]
 801a694:	6014      	str	r4, [r2, #0]
 801a696:	4628      	mov	r0, r5
 801a698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a69c:	f000 bc30 	b.w	801af00 <__malloc_unlock>
 801a6a0:	42a3      	cmp	r3, r4
 801a6a2:	d908      	bls.n	801a6b6 <_free_r+0x42>
 801a6a4:	6820      	ldr	r0, [r4, #0]
 801a6a6:	1821      	adds	r1, r4, r0
 801a6a8:	428b      	cmp	r3, r1
 801a6aa:	bf01      	itttt	eq
 801a6ac:	6819      	ldreq	r1, [r3, #0]
 801a6ae:	685b      	ldreq	r3, [r3, #4]
 801a6b0:	1809      	addeq	r1, r1, r0
 801a6b2:	6021      	streq	r1, [r4, #0]
 801a6b4:	e7ed      	b.n	801a692 <_free_r+0x1e>
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	b10b      	cbz	r3, 801a6c0 <_free_r+0x4c>
 801a6bc:	42a3      	cmp	r3, r4
 801a6be:	d9fa      	bls.n	801a6b6 <_free_r+0x42>
 801a6c0:	6811      	ldr	r1, [r2, #0]
 801a6c2:	1850      	adds	r0, r2, r1
 801a6c4:	42a0      	cmp	r0, r4
 801a6c6:	d10b      	bne.n	801a6e0 <_free_r+0x6c>
 801a6c8:	6820      	ldr	r0, [r4, #0]
 801a6ca:	4401      	add	r1, r0
 801a6cc:	1850      	adds	r0, r2, r1
 801a6ce:	4283      	cmp	r3, r0
 801a6d0:	6011      	str	r1, [r2, #0]
 801a6d2:	d1e0      	bne.n	801a696 <_free_r+0x22>
 801a6d4:	6818      	ldr	r0, [r3, #0]
 801a6d6:	685b      	ldr	r3, [r3, #4]
 801a6d8:	6053      	str	r3, [r2, #4]
 801a6da:	4408      	add	r0, r1
 801a6dc:	6010      	str	r0, [r2, #0]
 801a6de:	e7da      	b.n	801a696 <_free_r+0x22>
 801a6e0:	d902      	bls.n	801a6e8 <_free_r+0x74>
 801a6e2:	230c      	movs	r3, #12
 801a6e4:	602b      	str	r3, [r5, #0]
 801a6e6:	e7d6      	b.n	801a696 <_free_r+0x22>
 801a6e8:	6820      	ldr	r0, [r4, #0]
 801a6ea:	1821      	adds	r1, r4, r0
 801a6ec:	428b      	cmp	r3, r1
 801a6ee:	bf04      	itt	eq
 801a6f0:	6819      	ldreq	r1, [r3, #0]
 801a6f2:	685b      	ldreq	r3, [r3, #4]
 801a6f4:	6063      	str	r3, [r4, #4]
 801a6f6:	bf04      	itt	eq
 801a6f8:	1809      	addeq	r1, r1, r0
 801a6fa:	6021      	streq	r1, [r4, #0]
 801a6fc:	6054      	str	r4, [r2, #4]
 801a6fe:	e7ca      	b.n	801a696 <_free_r+0x22>
 801a700:	bd38      	pop	{r3, r4, r5, pc}
 801a702:	bf00      	nop
 801a704:	24006368 	.word	0x24006368

0801a708 <rshift>:
 801a708:	6903      	ldr	r3, [r0, #16]
 801a70a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a70e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a712:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a716:	f100 0414 	add.w	r4, r0, #20
 801a71a:	dd45      	ble.n	801a7a8 <rshift+0xa0>
 801a71c:	f011 011f 	ands.w	r1, r1, #31
 801a720:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a724:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a728:	d10c      	bne.n	801a744 <rshift+0x3c>
 801a72a:	f100 0710 	add.w	r7, r0, #16
 801a72e:	4629      	mov	r1, r5
 801a730:	42b1      	cmp	r1, r6
 801a732:	d334      	bcc.n	801a79e <rshift+0x96>
 801a734:	1a9b      	subs	r3, r3, r2
 801a736:	009b      	lsls	r3, r3, #2
 801a738:	1eea      	subs	r2, r5, #3
 801a73a:	4296      	cmp	r6, r2
 801a73c:	bf38      	it	cc
 801a73e:	2300      	movcc	r3, #0
 801a740:	4423      	add	r3, r4
 801a742:	e015      	b.n	801a770 <rshift+0x68>
 801a744:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a748:	f1c1 0820 	rsb	r8, r1, #32
 801a74c:	40cf      	lsrs	r7, r1
 801a74e:	f105 0e04 	add.w	lr, r5, #4
 801a752:	46a1      	mov	r9, r4
 801a754:	4576      	cmp	r6, lr
 801a756:	46f4      	mov	ip, lr
 801a758:	d815      	bhi.n	801a786 <rshift+0x7e>
 801a75a:	1a9a      	subs	r2, r3, r2
 801a75c:	0092      	lsls	r2, r2, #2
 801a75e:	3a04      	subs	r2, #4
 801a760:	3501      	adds	r5, #1
 801a762:	42ae      	cmp	r6, r5
 801a764:	bf38      	it	cc
 801a766:	2200      	movcc	r2, #0
 801a768:	18a3      	adds	r3, r4, r2
 801a76a:	50a7      	str	r7, [r4, r2]
 801a76c:	b107      	cbz	r7, 801a770 <rshift+0x68>
 801a76e:	3304      	adds	r3, #4
 801a770:	1b1a      	subs	r2, r3, r4
 801a772:	42a3      	cmp	r3, r4
 801a774:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a778:	bf08      	it	eq
 801a77a:	2300      	moveq	r3, #0
 801a77c:	6102      	str	r2, [r0, #16]
 801a77e:	bf08      	it	eq
 801a780:	6143      	streq	r3, [r0, #20]
 801a782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a786:	f8dc c000 	ldr.w	ip, [ip]
 801a78a:	fa0c fc08 	lsl.w	ip, ip, r8
 801a78e:	ea4c 0707 	orr.w	r7, ip, r7
 801a792:	f849 7b04 	str.w	r7, [r9], #4
 801a796:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a79a:	40cf      	lsrs	r7, r1
 801a79c:	e7da      	b.n	801a754 <rshift+0x4c>
 801a79e:	f851 cb04 	ldr.w	ip, [r1], #4
 801a7a2:	f847 cf04 	str.w	ip, [r7, #4]!
 801a7a6:	e7c3      	b.n	801a730 <rshift+0x28>
 801a7a8:	4623      	mov	r3, r4
 801a7aa:	e7e1      	b.n	801a770 <rshift+0x68>

0801a7ac <__hexdig_fun>:
 801a7ac:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801a7b0:	2b09      	cmp	r3, #9
 801a7b2:	d802      	bhi.n	801a7ba <__hexdig_fun+0xe>
 801a7b4:	3820      	subs	r0, #32
 801a7b6:	b2c0      	uxtb	r0, r0
 801a7b8:	4770      	bx	lr
 801a7ba:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801a7be:	2b05      	cmp	r3, #5
 801a7c0:	d801      	bhi.n	801a7c6 <__hexdig_fun+0x1a>
 801a7c2:	3847      	subs	r0, #71	@ 0x47
 801a7c4:	e7f7      	b.n	801a7b6 <__hexdig_fun+0xa>
 801a7c6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801a7ca:	2b05      	cmp	r3, #5
 801a7cc:	d801      	bhi.n	801a7d2 <__hexdig_fun+0x26>
 801a7ce:	3827      	subs	r0, #39	@ 0x27
 801a7d0:	e7f1      	b.n	801a7b6 <__hexdig_fun+0xa>
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	4770      	bx	lr
	...

0801a7d8 <__gethex>:
 801a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7dc:	b085      	sub	sp, #20
 801a7de:	468a      	mov	sl, r1
 801a7e0:	9302      	str	r3, [sp, #8]
 801a7e2:	680b      	ldr	r3, [r1, #0]
 801a7e4:	9001      	str	r0, [sp, #4]
 801a7e6:	4690      	mov	r8, r2
 801a7e8:	1c9c      	adds	r4, r3, #2
 801a7ea:	46a1      	mov	r9, r4
 801a7ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 801a7f0:	2830      	cmp	r0, #48	@ 0x30
 801a7f2:	d0fa      	beq.n	801a7ea <__gethex+0x12>
 801a7f4:	eba9 0303 	sub.w	r3, r9, r3
 801a7f8:	f1a3 0b02 	sub.w	fp, r3, #2
 801a7fc:	f7ff ffd6 	bl	801a7ac <__hexdig_fun>
 801a800:	4605      	mov	r5, r0
 801a802:	2800      	cmp	r0, #0
 801a804:	d168      	bne.n	801a8d8 <__gethex+0x100>
 801a806:	49a0      	ldr	r1, [pc, #640]	@ (801aa88 <__gethex+0x2b0>)
 801a808:	2201      	movs	r2, #1
 801a80a:	4648      	mov	r0, r9
 801a80c:	f7ff f8b2 	bl	8019974 <strncmp>
 801a810:	4607      	mov	r7, r0
 801a812:	2800      	cmp	r0, #0
 801a814:	d167      	bne.n	801a8e6 <__gethex+0x10e>
 801a816:	f899 0001 	ldrb.w	r0, [r9, #1]
 801a81a:	4626      	mov	r6, r4
 801a81c:	f7ff ffc6 	bl	801a7ac <__hexdig_fun>
 801a820:	2800      	cmp	r0, #0
 801a822:	d062      	beq.n	801a8ea <__gethex+0x112>
 801a824:	4623      	mov	r3, r4
 801a826:	7818      	ldrb	r0, [r3, #0]
 801a828:	2830      	cmp	r0, #48	@ 0x30
 801a82a:	4699      	mov	r9, r3
 801a82c:	f103 0301 	add.w	r3, r3, #1
 801a830:	d0f9      	beq.n	801a826 <__gethex+0x4e>
 801a832:	f7ff ffbb 	bl	801a7ac <__hexdig_fun>
 801a836:	fab0 f580 	clz	r5, r0
 801a83a:	096d      	lsrs	r5, r5, #5
 801a83c:	f04f 0b01 	mov.w	fp, #1
 801a840:	464a      	mov	r2, r9
 801a842:	4616      	mov	r6, r2
 801a844:	3201      	adds	r2, #1
 801a846:	7830      	ldrb	r0, [r6, #0]
 801a848:	f7ff ffb0 	bl	801a7ac <__hexdig_fun>
 801a84c:	2800      	cmp	r0, #0
 801a84e:	d1f8      	bne.n	801a842 <__gethex+0x6a>
 801a850:	498d      	ldr	r1, [pc, #564]	@ (801aa88 <__gethex+0x2b0>)
 801a852:	2201      	movs	r2, #1
 801a854:	4630      	mov	r0, r6
 801a856:	f7ff f88d 	bl	8019974 <strncmp>
 801a85a:	2800      	cmp	r0, #0
 801a85c:	d13f      	bne.n	801a8de <__gethex+0x106>
 801a85e:	b944      	cbnz	r4, 801a872 <__gethex+0x9a>
 801a860:	1c74      	adds	r4, r6, #1
 801a862:	4622      	mov	r2, r4
 801a864:	4616      	mov	r6, r2
 801a866:	3201      	adds	r2, #1
 801a868:	7830      	ldrb	r0, [r6, #0]
 801a86a:	f7ff ff9f 	bl	801a7ac <__hexdig_fun>
 801a86e:	2800      	cmp	r0, #0
 801a870:	d1f8      	bne.n	801a864 <__gethex+0x8c>
 801a872:	1ba4      	subs	r4, r4, r6
 801a874:	00a7      	lsls	r7, r4, #2
 801a876:	7833      	ldrb	r3, [r6, #0]
 801a878:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801a87c:	2b50      	cmp	r3, #80	@ 0x50
 801a87e:	d13e      	bne.n	801a8fe <__gethex+0x126>
 801a880:	7873      	ldrb	r3, [r6, #1]
 801a882:	2b2b      	cmp	r3, #43	@ 0x2b
 801a884:	d033      	beq.n	801a8ee <__gethex+0x116>
 801a886:	2b2d      	cmp	r3, #45	@ 0x2d
 801a888:	d034      	beq.n	801a8f4 <__gethex+0x11c>
 801a88a:	1c71      	adds	r1, r6, #1
 801a88c:	2400      	movs	r4, #0
 801a88e:	7808      	ldrb	r0, [r1, #0]
 801a890:	f7ff ff8c 	bl	801a7ac <__hexdig_fun>
 801a894:	1e43      	subs	r3, r0, #1
 801a896:	b2db      	uxtb	r3, r3
 801a898:	2b18      	cmp	r3, #24
 801a89a:	d830      	bhi.n	801a8fe <__gethex+0x126>
 801a89c:	f1a0 0210 	sub.w	r2, r0, #16
 801a8a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a8a4:	f7ff ff82 	bl	801a7ac <__hexdig_fun>
 801a8a8:	f100 3cff 	add.w	ip, r0, #4294967295
 801a8ac:	fa5f fc8c 	uxtb.w	ip, ip
 801a8b0:	f1bc 0f18 	cmp.w	ip, #24
 801a8b4:	f04f 030a 	mov.w	r3, #10
 801a8b8:	d91e      	bls.n	801a8f8 <__gethex+0x120>
 801a8ba:	b104      	cbz	r4, 801a8be <__gethex+0xe6>
 801a8bc:	4252      	negs	r2, r2
 801a8be:	4417      	add	r7, r2
 801a8c0:	f8ca 1000 	str.w	r1, [sl]
 801a8c4:	b1ed      	cbz	r5, 801a902 <__gethex+0x12a>
 801a8c6:	f1bb 0f00 	cmp.w	fp, #0
 801a8ca:	bf0c      	ite	eq
 801a8cc:	2506      	moveq	r5, #6
 801a8ce:	2500      	movne	r5, #0
 801a8d0:	4628      	mov	r0, r5
 801a8d2:	b005      	add	sp, #20
 801a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d8:	2500      	movs	r5, #0
 801a8da:	462c      	mov	r4, r5
 801a8dc:	e7b0      	b.n	801a840 <__gethex+0x68>
 801a8de:	2c00      	cmp	r4, #0
 801a8e0:	d1c7      	bne.n	801a872 <__gethex+0x9a>
 801a8e2:	4627      	mov	r7, r4
 801a8e4:	e7c7      	b.n	801a876 <__gethex+0x9e>
 801a8e6:	464e      	mov	r6, r9
 801a8e8:	462f      	mov	r7, r5
 801a8ea:	2501      	movs	r5, #1
 801a8ec:	e7c3      	b.n	801a876 <__gethex+0x9e>
 801a8ee:	2400      	movs	r4, #0
 801a8f0:	1cb1      	adds	r1, r6, #2
 801a8f2:	e7cc      	b.n	801a88e <__gethex+0xb6>
 801a8f4:	2401      	movs	r4, #1
 801a8f6:	e7fb      	b.n	801a8f0 <__gethex+0x118>
 801a8f8:	fb03 0002 	mla	r0, r3, r2, r0
 801a8fc:	e7ce      	b.n	801a89c <__gethex+0xc4>
 801a8fe:	4631      	mov	r1, r6
 801a900:	e7de      	b.n	801a8c0 <__gethex+0xe8>
 801a902:	eba6 0309 	sub.w	r3, r6, r9
 801a906:	3b01      	subs	r3, #1
 801a908:	4629      	mov	r1, r5
 801a90a:	2b07      	cmp	r3, #7
 801a90c:	dc0a      	bgt.n	801a924 <__gethex+0x14c>
 801a90e:	9801      	ldr	r0, [sp, #4]
 801a910:	f000 fafc 	bl	801af0c <_Balloc>
 801a914:	4604      	mov	r4, r0
 801a916:	b940      	cbnz	r0, 801a92a <__gethex+0x152>
 801a918:	4b5c      	ldr	r3, [pc, #368]	@ (801aa8c <__gethex+0x2b4>)
 801a91a:	4602      	mov	r2, r0
 801a91c:	21e4      	movs	r1, #228	@ 0xe4
 801a91e:	485c      	ldr	r0, [pc, #368]	@ (801aa90 <__gethex+0x2b8>)
 801a920:	f001 f9de 	bl	801bce0 <__assert_func>
 801a924:	3101      	adds	r1, #1
 801a926:	105b      	asrs	r3, r3, #1
 801a928:	e7ef      	b.n	801a90a <__gethex+0x132>
 801a92a:	f100 0a14 	add.w	sl, r0, #20
 801a92e:	2300      	movs	r3, #0
 801a930:	4655      	mov	r5, sl
 801a932:	469b      	mov	fp, r3
 801a934:	45b1      	cmp	r9, r6
 801a936:	d337      	bcc.n	801a9a8 <__gethex+0x1d0>
 801a938:	f845 bb04 	str.w	fp, [r5], #4
 801a93c:	eba5 050a 	sub.w	r5, r5, sl
 801a940:	10ad      	asrs	r5, r5, #2
 801a942:	6125      	str	r5, [r4, #16]
 801a944:	4658      	mov	r0, fp
 801a946:	f000 fbd3 	bl	801b0f0 <__hi0bits>
 801a94a:	016d      	lsls	r5, r5, #5
 801a94c:	f8d8 6000 	ldr.w	r6, [r8]
 801a950:	1a2d      	subs	r5, r5, r0
 801a952:	42b5      	cmp	r5, r6
 801a954:	dd54      	ble.n	801aa00 <__gethex+0x228>
 801a956:	1bad      	subs	r5, r5, r6
 801a958:	4629      	mov	r1, r5
 801a95a:	4620      	mov	r0, r4
 801a95c:	f000 ff64 	bl	801b828 <__any_on>
 801a960:	4681      	mov	r9, r0
 801a962:	b178      	cbz	r0, 801a984 <__gethex+0x1ac>
 801a964:	1e6b      	subs	r3, r5, #1
 801a966:	1159      	asrs	r1, r3, #5
 801a968:	f003 021f 	and.w	r2, r3, #31
 801a96c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a970:	f04f 0901 	mov.w	r9, #1
 801a974:	fa09 f202 	lsl.w	r2, r9, r2
 801a978:	420a      	tst	r2, r1
 801a97a:	d003      	beq.n	801a984 <__gethex+0x1ac>
 801a97c:	454b      	cmp	r3, r9
 801a97e:	dc36      	bgt.n	801a9ee <__gethex+0x216>
 801a980:	f04f 0902 	mov.w	r9, #2
 801a984:	4629      	mov	r1, r5
 801a986:	4620      	mov	r0, r4
 801a988:	f7ff febe 	bl	801a708 <rshift>
 801a98c:	442f      	add	r7, r5
 801a98e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a992:	42bb      	cmp	r3, r7
 801a994:	da42      	bge.n	801aa1c <__gethex+0x244>
 801a996:	9801      	ldr	r0, [sp, #4]
 801a998:	4621      	mov	r1, r4
 801a99a:	f000 faf7 	bl	801af8c <_Bfree>
 801a99e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	6013      	str	r3, [r2, #0]
 801a9a4:	25a3      	movs	r5, #163	@ 0xa3
 801a9a6:	e793      	b.n	801a8d0 <__gethex+0xf8>
 801a9a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801a9ac:	2a2e      	cmp	r2, #46	@ 0x2e
 801a9ae:	d012      	beq.n	801a9d6 <__gethex+0x1fe>
 801a9b0:	2b20      	cmp	r3, #32
 801a9b2:	d104      	bne.n	801a9be <__gethex+0x1e6>
 801a9b4:	f845 bb04 	str.w	fp, [r5], #4
 801a9b8:	f04f 0b00 	mov.w	fp, #0
 801a9bc:	465b      	mov	r3, fp
 801a9be:	7830      	ldrb	r0, [r6, #0]
 801a9c0:	9303      	str	r3, [sp, #12]
 801a9c2:	f7ff fef3 	bl	801a7ac <__hexdig_fun>
 801a9c6:	9b03      	ldr	r3, [sp, #12]
 801a9c8:	f000 000f 	and.w	r0, r0, #15
 801a9cc:	4098      	lsls	r0, r3
 801a9ce:	ea4b 0b00 	orr.w	fp, fp, r0
 801a9d2:	3304      	adds	r3, #4
 801a9d4:	e7ae      	b.n	801a934 <__gethex+0x15c>
 801a9d6:	45b1      	cmp	r9, r6
 801a9d8:	d8ea      	bhi.n	801a9b0 <__gethex+0x1d8>
 801a9da:	492b      	ldr	r1, [pc, #172]	@ (801aa88 <__gethex+0x2b0>)
 801a9dc:	9303      	str	r3, [sp, #12]
 801a9de:	2201      	movs	r2, #1
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	f7fe ffc7 	bl	8019974 <strncmp>
 801a9e6:	9b03      	ldr	r3, [sp, #12]
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	d1e1      	bne.n	801a9b0 <__gethex+0x1d8>
 801a9ec:	e7a2      	b.n	801a934 <__gethex+0x15c>
 801a9ee:	1ea9      	subs	r1, r5, #2
 801a9f0:	4620      	mov	r0, r4
 801a9f2:	f000 ff19 	bl	801b828 <__any_on>
 801a9f6:	2800      	cmp	r0, #0
 801a9f8:	d0c2      	beq.n	801a980 <__gethex+0x1a8>
 801a9fa:	f04f 0903 	mov.w	r9, #3
 801a9fe:	e7c1      	b.n	801a984 <__gethex+0x1ac>
 801aa00:	da09      	bge.n	801aa16 <__gethex+0x23e>
 801aa02:	1b75      	subs	r5, r6, r5
 801aa04:	4621      	mov	r1, r4
 801aa06:	9801      	ldr	r0, [sp, #4]
 801aa08:	462a      	mov	r2, r5
 801aa0a:	f000 fcd7 	bl	801b3bc <__lshift>
 801aa0e:	1b7f      	subs	r7, r7, r5
 801aa10:	4604      	mov	r4, r0
 801aa12:	f100 0a14 	add.w	sl, r0, #20
 801aa16:	f04f 0900 	mov.w	r9, #0
 801aa1a:	e7b8      	b.n	801a98e <__gethex+0x1b6>
 801aa1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801aa20:	42bd      	cmp	r5, r7
 801aa22:	dd6f      	ble.n	801ab04 <__gethex+0x32c>
 801aa24:	1bed      	subs	r5, r5, r7
 801aa26:	42ae      	cmp	r6, r5
 801aa28:	dc34      	bgt.n	801aa94 <__gethex+0x2bc>
 801aa2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aa2e:	2b02      	cmp	r3, #2
 801aa30:	d022      	beq.n	801aa78 <__gethex+0x2a0>
 801aa32:	2b03      	cmp	r3, #3
 801aa34:	d024      	beq.n	801aa80 <__gethex+0x2a8>
 801aa36:	2b01      	cmp	r3, #1
 801aa38:	d115      	bne.n	801aa66 <__gethex+0x28e>
 801aa3a:	42ae      	cmp	r6, r5
 801aa3c:	d113      	bne.n	801aa66 <__gethex+0x28e>
 801aa3e:	2e01      	cmp	r6, #1
 801aa40:	d10b      	bne.n	801aa5a <__gethex+0x282>
 801aa42:	9a02      	ldr	r2, [sp, #8]
 801aa44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801aa48:	6013      	str	r3, [r2, #0]
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	6123      	str	r3, [r4, #16]
 801aa4e:	f8ca 3000 	str.w	r3, [sl]
 801aa52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa54:	2562      	movs	r5, #98	@ 0x62
 801aa56:	601c      	str	r4, [r3, #0]
 801aa58:	e73a      	b.n	801a8d0 <__gethex+0xf8>
 801aa5a:	1e71      	subs	r1, r6, #1
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f000 fee3 	bl	801b828 <__any_on>
 801aa62:	2800      	cmp	r0, #0
 801aa64:	d1ed      	bne.n	801aa42 <__gethex+0x26a>
 801aa66:	9801      	ldr	r0, [sp, #4]
 801aa68:	4621      	mov	r1, r4
 801aa6a:	f000 fa8f 	bl	801af8c <_Bfree>
 801aa6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aa70:	2300      	movs	r3, #0
 801aa72:	6013      	str	r3, [r2, #0]
 801aa74:	2550      	movs	r5, #80	@ 0x50
 801aa76:	e72b      	b.n	801a8d0 <__gethex+0xf8>
 801aa78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d1f3      	bne.n	801aa66 <__gethex+0x28e>
 801aa7e:	e7e0      	b.n	801aa42 <__gethex+0x26a>
 801aa80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d1dd      	bne.n	801aa42 <__gethex+0x26a>
 801aa86:	e7ee      	b.n	801aa66 <__gethex+0x28e>
 801aa88:	0801d7e8 	.word	0x0801d7e8
 801aa8c:	0801d9f9 	.word	0x0801d9f9
 801aa90:	0801da0a 	.word	0x0801da0a
 801aa94:	1e6f      	subs	r7, r5, #1
 801aa96:	f1b9 0f00 	cmp.w	r9, #0
 801aa9a:	d130      	bne.n	801aafe <__gethex+0x326>
 801aa9c:	b127      	cbz	r7, 801aaa8 <__gethex+0x2d0>
 801aa9e:	4639      	mov	r1, r7
 801aaa0:	4620      	mov	r0, r4
 801aaa2:	f000 fec1 	bl	801b828 <__any_on>
 801aaa6:	4681      	mov	r9, r0
 801aaa8:	117a      	asrs	r2, r7, #5
 801aaaa:	2301      	movs	r3, #1
 801aaac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801aab0:	f007 071f 	and.w	r7, r7, #31
 801aab4:	40bb      	lsls	r3, r7
 801aab6:	4213      	tst	r3, r2
 801aab8:	4629      	mov	r1, r5
 801aaba:	4620      	mov	r0, r4
 801aabc:	bf18      	it	ne
 801aabe:	f049 0902 	orrne.w	r9, r9, #2
 801aac2:	f7ff fe21 	bl	801a708 <rshift>
 801aac6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801aaca:	1b76      	subs	r6, r6, r5
 801aacc:	2502      	movs	r5, #2
 801aace:	f1b9 0f00 	cmp.w	r9, #0
 801aad2:	d047      	beq.n	801ab64 <__gethex+0x38c>
 801aad4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801aad8:	2b02      	cmp	r3, #2
 801aada:	d015      	beq.n	801ab08 <__gethex+0x330>
 801aadc:	2b03      	cmp	r3, #3
 801aade:	d017      	beq.n	801ab10 <__gethex+0x338>
 801aae0:	2b01      	cmp	r3, #1
 801aae2:	d109      	bne.n	801aaf8 <__gethex+0x320>
 801aae4:	f019 0f02 	tst.w	r9, #2
 801aae8:	d006      	beq.n	801aaf8 <__gethex+0x320>
 801aaea:	f8da 3000 	ldr.w	r3, [sl]
 801aaee:	ea49 0903 	orr.w	r9, r9, r3
 801aaf2:	f019 0f01 	tst.w	r9, #1
 801aaf6:	d10e      	bne.n	801ab16 <__gethex+0x33e>
 801aaf8:	f045 0510 	orr.w	r5, r5, #16
 801aafc:	e032      	b.n	801ab64 <__gethex+0x38c>
 801aafe:	f04f 0901 	mov.w	r9, #1
 801ab02:	e7d1      	b.n	801aaa8 <__gethex+0x2d0>
 801ab04:	2501      	movs	r5, #1
 801ab06:	e7e2      	b.n	801aace <__gethex+0x2f6>
 801ab08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab0a:	f1c3 0301 	rsb	r3, r3, #1
 801ab0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ab10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d0f0      	beq.n	801aaf8 <__gethex+0x320>
 801ab16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ab1a:	f104 0314 	add.w	r3, r4, #20
 801ab1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ab22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ab26:	f04f 0c00 	mov.w	ip, #0
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab30:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ab34:	d01b      	beq.n	801ab6e <__gethex+0x396>
 801ab36:	3201      	adds	r2, #1
 801ab38:	6002      	str	r2, [r0, #0]
 801ab3a:	2d02      	cmp	r5, #2
 801ab3c:	f104 0314 	add.w	r3, r4, #20
 801ab40:	d13c      	bne.n	801abbc <__gethex+0x3e4>
 801ab42:	f8d8 2000 	ldr.w	r2, [r8]
 801ab46:	3a01      	subs	r2, #1
 801ab48:	42b2      	cmp	r2, r6
 801ab4a:	d109      	bne.n	801ab60 <__gethex+0x388>
 801ab4c:	1171      	asrs	r1, r6, #5
 801ab4e:	2201      	movs	r2, #1
 801ab50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ab54:	f006 061f 	and.w	r6, r6, #31
 801ab58:	fa02 f606 	lsl.w	r6, r2, r6
 801ab5c:	421e      	tst	r6, r3
 801ab5e:	d13a      	bne.n	801abd6 <__gethex+0x3fe>
 801ab60:	f045 0520 	orr.w	r5, r5, #32
 801ab64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab66:	601c      	str	r4, [r3, #0]
 801ab68:	9b02      	ldr	r3, [sp, #8]
 801ab6a:	601f      	str	r7, [r3, #0]
 801ab6c:	e6b0      	b.n	801a8d0 <__gethex+0xf8>
 801ab6e:	4299      	cmp	r1, r3
 801ab70:	f843 cc04 	str.w	ip, [r3, #-4]
 801ab74:	d8d9      	bhi.n	801ab2a <__gethex+0x352>
 801ab76:	68a3      	ldr	r3, [r4, #8]
 801ab78:	459b      	cmp	fp, r3
 801ab7a:	db17      	blt.n	801abac <__gethex+0x3d4>
 801ab7c:	6861      	ldr	r1, [r4, #4]
 801ab7e:	9801      	ldr	r0, [sp, #4]
 801ab80:	3101      	adds	r1, #1
 801ab82:	f000 f9c3 	bl	801af0c <_Balloc>
 801ab86:	4681      	mov	r9, r0
 801ab88:	b918      	cbnz	r0, 801ab92 <__gethex+0x3ba>
 801ab8a:	4b1a      	ldr	r3, [pc, #104]	@ (801abf4 <__gethex+0x41c>)
 801ab8c:	4602      	mov	r2, r0
 801ab8e:	2184      	movs	r1, #132	@ 0x84
 801ab90:	e6c5      	b.n	801a91e <__gethex+0x146>
 801ab92:	6922      	ldr	r2, [r4, #16]
 801ab94:	3202      	adds	r2, #2
 801ab96:	f104 010c 	add.w	r1, r4, #12
 801ab9a:	0092      	lsls	r2, r2, #2
 801ab9c:	300c      	adds	r0, #12
 801ab9e:	f7fe ff72 	bl	8019a86 <memcpy>
 801aba2:	4621      	mov	r1, r4
 801aba4:	9801      	ldr	r0, [sp, #4]
 801aba6:	f000 f9f1 	bl	801af8c <_Bfree>
 801abaa:	464c      	mov	r4, r9
 801abac:	6923      	ldr	r3, [r4, #16]
 801abae:	1c5a      	adds	r2, r3, #1
 801abb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801abb4:	6122      	str	r2, [r4, #16]
 801abb6:	2201      	movs	r2, #1
 801abb8:	615a      	str	r2, [r3, #20]
 801abba:	e7be      	b.n	801ab3a <__gethex+0x362>
 801abbc:	6922      	ldr	r2, [r4, #16]
 801abbe:	455a      	cmp	r2, fp
 801abc0:	dd0b      	ble.n	801abda <__gethex+0x402>
 801abc2:	2101      	movs	r1, #1
 801abc4:	4620      	mov	r0, r4
 801abc6:	f7ff fd9f 	bl	801a708 <rshift>
 801abca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801abce:	3701      	adds	r7, #1
 801abd0:	42bb      	cmp	r3, r7
 801abd2:	f6ff aee0 	blt.w	801a996 <__gethex+0x1be>
 801abd6:	2501      	movs	r5, #1
 801abd8:	e7c2      	b.n	801ab60 <__gethex+0x388>
 801abda:	f016 061f 	ands.w	r6, r6, #31
 801abde:	d0fa      	beq.n	801abd6 <__gethex+0x3fe>
 801abe0:	4453      	add	r3, sl
 801abe2:	f1c6 0620 	rsb	r6, r6, #32
 801abe6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801abea:	f000 fa81 	bl	801b0f0 <__hi0bits>
 801abee:	42b0      	cmp	r0, r6
 801abf0:	dbe7      	blt.n	801abc2 <__gethex+0x3ea>
 801abf2:	e7f0      	b.n	801abd6 <__gethex+0x3fe>
 801abf4:	0801d9f9 	.word	0x0801d9f9

0801abf8 <L_shift>:
 801abf8:	f1c2 0208 	rsb	r2, r2, #8
 801abfc:	0092      	lsls	r2, r2, #2
 801abfe:	b570      	push	{r4, r5, r6, lr}
 801ac00:	f1c2 0620 	rsb	r6, r2, #32
 801ac04:	6843      	ldr	r3, [r0, #4]
 801ac06:	6804      	ldr	r4, [r0, #0]
 801ac08:	fa03 f506 	lsl.w	r5, r3, r6
 801ac0c:	432c      	orrs	r4, r5
 801ac0e:	40d3      	lsrs	r3, r2
 801ac10:	6004      	str	r4, [r0, #0]
 801ac12:	f840 3f04 	str.w	r3, [r0, #4]!
 801ac16:	4288      	cmp	r0, r1
 801ac18:	d3f4      	bcc.n	801ac04 <L_shift+0xc>
 801ac1a:	bd70      	pop	{r4, r5, r6, pc}

0801ac1c <__match>:
 801ac1c:	b530      	push	{r4, r5, lr}
 801ac1e:	6803      	ldr	r3, [r0, #0]
 801ac20:	3301      	adds	r3, #1
 801ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac26:	b914      	cbnz	r4, 801ac2e <__match+0x12>
 801ac28:	6003      	str	r3, [r0, #0]
 801ac2a:	2001      	movs	r0, #1
 801ac2c:	bd30      	pop	{r4, r5, pc}
 801ac2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ac36:	2d19      	cmp	r5, #25
 801ac38:	bf98      	it	ls
 801ac3a:	3220      	addls	r2, #32
 801ac3c:	42a2      	cmp	r2, r4
 801ac3e:	d0f0      	beq.n	801ac22 <__match+0x6>
 801ac40:	2000      	movs	r0, #0
 801ac42:	e7f3      	b.n	801ac2c <__match+0x10>

0801ac44 <__hexnan>:
 801ac44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac48:	680b      	ldr	r3, [r1, #0]
 801ac4a:	6801      	ldr	r1, [r0, #0]
 801ac4c:	115e      	asrs	r6, r3, #5
 801ac4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ac52:	f013 031f 	ands.w	r3, r3, #31
 801ac56:	b087      	sub	sp, #28
 801ac58:	bf18      	it	ne
 801ac5a:	3604      	addne	r6, #4
 801ac5c:	2500      	movs	r5, #0
 801ac5e:	1f37      	subs	r7, r6, #4
 801ac60:	4682      	mov	sl, r0
 801ac62:	4690      	mov	r8, r2
 801ac64:	9301      	str	r3, [sp, #4]
 801ac66:	f846 5c04 	str.w	r5, [r6, #-4]
 801ac6a:	46b9      	mov	r9, r7
 801ac6c:	463c      	mov	r4, r7
 801ac6e:	9502      	str	r5, [sp, #8]
 801ac70:	46ab      	mov	fp, r5
 801ac72:	784a      	ldrb	r2, [r1, #1]
 801ac74:	1c4b      	adds	r3, r1, #1
 801ac76:	9303      	str	r3, [sp, #12]
 801ac78:	b342      	cbz	r2, 801accc <__hexnan+0x88>
 801ac7a:	4610      	mov	r0, r2
 801ac7c:	9105      	str	r1, [sp, #20]
 801ac7e:	9204      	str	r2, [sp, #16]
 801ac80:	f7ff fd94 	bl	801a7ac <__hexdig_fun>
 801ac84:	2800      	cmp	r0, #0
 801ac86:	d151      	bne.n	801ad2c <__hexnan+0xe8>
 801ac88:	9a04      	ldr	r2, [sp, #16]
 801ac8a:	9905      	ldr	r1, [sp, #20]
 801ac8c:	2a20      	cmp	r2, #32
 801ac8e:	d818      	bhi.n	801acc2 <__hexnan+0x7e>
 801ac90:	9b02      	ldr	r3, [sp, #8]
 801ac92:	459b      	cmp	fp, r3
 801ac94:	dd13      	ble.n	801acbe <__hexnan+0x7a>
 801ac96:	454c      	cmp	r4, r9
 801ac98:	d206      	bcs.n	801aca8 <__hexnan+0x64>
 801ac9a:	2d07      	cmp	r5, #7
 801ac9c:	dc04      	bgt.n	801aca8 <__hexnan+0x64>
 801ac9e:	462a      	mov	r2, r5
 801aca0:	4649      	mov	r1, r9
 801aca2:	4620      	mov	r0, r4
 801aca4:	f7ff ffa8 	bl	801abf8 <L_shift>
 801aca8:	4544      	cmp	r4, r8
 801acaa:	d952      	bls.n	801ad52 <__hexnan+0x10e>
 801acac:	2300      	movs	r3, #0
 801acae:	f1a4 0904 	sub.w	r9, r4, #4
 801acb2:	f844 3c04 	str.w	r3, [r4, #-4]
 801acb6:	f8cd b008 	str.w	fp, [sp, #8]
 801acba:	464c      	mov	r4, r9
 801acbc:	461d      	mov	r5, r3
 801acbe:	9903      	ldr	r1, [sp, #12]
 801acc0:	e7d7      	b.n	801ac72 <__hexnan+0x2e>
 801acc2:	2a29      	cmp	r2, #41	@ 0x29
 801acc4:	d157      	bne.n	801ad76 <__hexnan+0x132>
 801acc6:	3102      	adds	r1, #2
 801acc8:	f8ca 1000 	str.w	r1, [sl]
 801accc:	f1bb 0f00 	cmp.w	fp, #0
 801acd0:	d051      	beq.n	801ad76 <__hexnan+0x132>
 801acd2:	454c      	cmp	r4, r9
 801acd4:	d206      	bcs.n	801ace4 <__hexnan+0xa0>
 801acd6:	2d07      	cmp	r5, #7
 801acd8:	dc04      	bgt.n	801ace4 <__hexnan+0xa0>
 801acda:	462a      	mov	r2, r5
 801acdc:	4649      	mov	r1, r9
 801acde:	4620      	mov	r0, r4
 801ace0:	f7ff ff8a 	bl	801abf8 <L_shift>
 801ace4:	4544      	cmp	r4, r8
 801ace6:	d936      	bls.n	801ad56 <__hexnan+0x112>
 801ace8:	f1a8 0204 	sub.w	r2, r8, #4
 801acec:	4623      	mov	r3, r4
 801acee:	f853 1b04 	ldr.w	r1, [r3], #4
 801acf2:	f842 1f04 	str.w	r1, [r2, #4]!
 801acf6:	429f      	cmp	r7, r3
 801acf8:	d2f9      	bcs.n	801acee <__hexnan+0xaa>
 801acfa:	1b3b      	subs	r3, r7, r4
 801acfc:	f023 0303 	bic.w	r3, r3, #3
 801ad00:	3304      	adds	r3, #4
 801ad02:	3401      	adds	r4, #1
 801ad04:	3e03      	subs	r6, #3
 801ad06:	42b4      	cmp	r4, r6
 801ad08:	bf88      	it	hi
 801ad0a:	2304      	movhi	r3, #4
 801ad0c:	4443      	add	r3, r8
 801ad0e:	2200      	movs	r2, #0
 801ad10:	f843 2b04 	str.w	r2, [r3], #4
 801ad14:	429f      	cmp	r7, r3
 801ad16:	d2fb      	bcs.n	801ad10 <__hexnan+0xcc>
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	b91b      	cbnz	r3, 801ad24 <__hexnan+0xe0>
 801ad1c:	4547      	cmp	r7, r8
 801ad1e:	d128      	bne.n	801ad72 <__hexnan+0x12e>
 801ad20:	2301      	movs	r3, #1
 801ad22:	603b      	str	r3, [r7, #0]
 801ad24:	2005      	movs	r0, #5
 801ad26:	b007      	add	sp, #28
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2c:	3501      	adds	r5, #1
 801ad2e:	2d08      	cmp	r5, #8
 801ad30:	f10b 0b01 	add.w	fp, fp, #1
 801ad34:	dd06      	ble.n	801ad44 <__hexnan+0x100>
 801ad36:	4544      	cmp	r4, r8
 801ad38:	d9c1      	bls.n	801acbe <__hexnan+0x7a>
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	f844 3c04 	str.w	r3, [r4, #-4]
 801ad40:	2501      	movs	r5, #1
 801ad42:	3c04      	subs	r4, #4
 801ad44:	6822      	ldr	r2, [r4, #0]
 801ad46:	f000 000f 	and.w	r0, r0, #15
 801ad4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ad4e:	6020      	str	r0, [r4, #0]
 801ad50:	e7b5      	b.n	801acbe <__hexnan+0x7a>
 801ad52:	2508      	movs	r5, #8
 801ad54:	e7b3      	b.n	801acbe <__hexnan+0x7a>
 801ad56:	9b01      	ldr	r3, [sp, #4]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d0dd      	beq.n	801ad18 <__hexnan+0xd4>
 801ad5c:	f1c3 0320 	rsb	r3, r3, #32
 801ad60:	f04f 32ff 	mov.w	r2, #4294967295
 801ad64:	40da      	lsrs	r2, r3
 801ad66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ad6a:	4013      	ands	r3, r2
 801ad6c:	f846 3c04 	str.w	r3, [r6, #-4]
 801ad70:	e7d2      	b.n	801ad18 <__hexnan+0xd4>
 801ad72:	3f04      	subs	r7, #4
 801ad74:	e7d0      	b.n	801ad18 <__hexnan+0xd4>
 801ad76:	2004      	movs	r0, #4
 801ad78:	e7d5      	b.n	801ad26 <__hexnan+0xe2>
	...

0801ad7c <malloc>:
 801ad7c:	4b02      	ldr	r3, [pc, #8]	@ (801ad88 <malloc+0xc>)
 801ad7e:	4601      	mov	r1, r0
 801ad80:	6818      	ldr	r0, [r3, #0]
 801ad82:	f000 b825 	b.w	801add0 <_malloc_r>
 801ad86:	bf00      	nop
 801ad88:	2400027c 	.word	0x2400027c

0801ad8c <sbrk_aligned>:
 801ad8c:	b570      	push	{r4, r5, r6, lr}
 801ad8e:	4e0f      	ldr	r6, [pc, #60]	@ (801adcc <sbrk_aligned+0x40>)
 801ad90:	460c      	mov	r4, r1
 801ad92:	6831      	ldr	r1, [r6, #0]
 801ad94:	4605      	mov	r5, r0
 801ad96:	b911      	cbnz	r1, 801ad9e <sbrk_aligned+0x12>
 801ad98:	f000 ff92 	bl	801bcc0 <_sbrk_r>
 801ad9c:	6030      	str	r0, [r6, #0]
 801ad9e:	4621      	mov	r1, r4
 801ada0:	4628      	mov	r0, r5
 801ada2:	f000 ff8d 	bl	801bcc0 <_sbrk_r>
 801ada6:	1c43      	adds	r3, r0, #1
 801ada8:	d103      	bne.n	801adb2 <sbrk_aligned+0x26>
 801adaa:	f04f 34ff 	mov.w	r4, #4294967295
 801adae:	4620      	mov	r0, r4
 801adb0:	bd70      	pop	{r4, r5, r6, pc}
 801adb2:	1cc4      	adds	r4, r0, #3
 801adb4:	f024 0403 	bic.w	r4, r4, #3
 801adb8:	42a0      	cmp	r0, r4
 801adba:	d0f8      	beq.n	801adae <sbrk_aligned+0x22>
 801adbc:	1a21      	subs	r1, r4, r0
 801adbe:	4628      	mov	r0, r5
 801adc0:	f000 ff7e 	bl	801bcc0 <_sbrk_r>
 801adc4:	3001      	adds	r0, #1
 801adc6:	d1f2      	bne.n	801adae <sbrk_aligned+0x22>
 801adc8:	e7ef      	b.n	801adaa <sbrk_aligned+0x1e>
 801adca:	bf00      	nop
 801adcc:	24006364 	.word	0x24006364

0801add0 <_malloc_r>:
 801add0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801add4:	1ccd      	adds	r5, r1, #3
 801add6:	f025 0503 	bic.w	r5, r5, #3
 801adda:	3508      	adds	r5, #8
 801addc:	2d0c      	cmp	r5, #12
 801adde:	bf38      	it	cc
 801ade0:	250c      	movcc	r5, #12
 801ade2:	2d00      	cmp	r5, #0
 801ade4:	4606      	mov	r6, r0
 801ade6:	db01      	blt.n	801adec <_malloc_r+0x1c>
 801ade8:	42a9      	cmp	r1, r5
 801adea:	d904      	bls.n	801adf6 <_malloc_r+0x26>
 801adec:	230c      	movs	r3, #12
 801adee:	6033      	str	r3, [r6, #0]
 801adf0:	2000      	movs	r0, #0
 801adf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801adf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801aecc <_malloc_r+0xfc>
 801adfa:	f000 f87b 	bl	801aef4 <__malloc_lock>
 801adfe:	f8d8 3000 	ldr.w	r3, [r8]
 801ae02:	461c      	mov	r4, r3
 801ae04:	bb44      	cbnz	r4, 801ae58 <_malloc_r+0x88>
 801ae06:	4629      	mov	r1, r5
 801ae08:	4630      	mov	r0, r6
 801ae0a:	f7ff ffbf 	bl	801ad8c <sbrk_aligned>
 801ae0e:	1c43      	adds	r3, r0, #1
 801ae10:	4604      	mov	r4, r0
 801ae12:	d158      	bne.n	801aec6 <_malloc_r+0xf6>
 801ae14:	f8d8 4000 	ldr.w	r4, [r8]
 801ae18:	4627      	mov	r7, r4
 801ae1a:	2f00      	cmp	r7, #0
 801ae1c:	d143      	bne.n	801aea6 <_malloc_r+0xd6>
 801ae1e:	2c00      	cmp	r4, #0
 801ae20:	d04b      	beq.n	801aeba <_malloc_r+0xea>
 801ae22:	6823      	ldr	r3, [r4, #0]
 801ae24:	4639      	mov	r1, r7
 801ae26:	4630      	mov	r0, r6
 801ae28:	eb04 0903 	add.w	r9, r4, r3
 801ae2c:	f000 ff48 	bl	801bcc0 <_sbrk_r>
 801ae30:	4581      	cmp	r9, r0
 801ae32:	d142      	bne.n	801aeba <_malloc_r+0xea>
 801ae34:	6821      	ldr	r1, [r4, #0]
 801ae36:	1a6d      	subs	r5, r5, r1
 801ae38:	4629      	mov	r1, r5
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	f7ff ffa6 	bl	801ad8c <sbrk_aligned>
 801ae40:	3001      	adds	r0, #1
 801ae42:	d03a      	beq.n	801aeba <_malloc_r+0xea>
 801ae44:	6823      	ldr	r3, [r4, #0]
 801ae46:	442b      	add	r3, r5
 801ae48:	6023      	str	r3, [r4, #0]
 801ae4a:	f8d8 3000 	ldr.w	r3, [r8]
 801ae4e:	685a      	ldr	r2, [r3, #4]
 801ae50:	bb62      	cbnz	r2, 801aeac <_malloc_r+0xdc>
 801ae52:	f8c8 7000 	str.w	r7, [r8]
 801ae56:	e00f      	b.n	801ae78 <_malloc_r+0xa8>
 801ae58:	6822      	ldr	r2, [r4, #0]
 801ae5a:	1b52      	subs	r2, r2, r5
 801ae5c:	d420      	bmi.n	801aea0 <_malloc_r+0xd0>
 801ae5e:	2a0b      	cmp	r2, #11
 801ae60:	d917      	bls.n	801ae92 <_malloc_r+0xc2>
 801ae62:	1961      	adds	r1, r4, r5
 801ae64:	42a3      	cmp	r3, r4
 801ae66:	6025      	str	r5, [r4, #0]
 801ae68:	bf18      	it	ne
 801ae6a:	6059      	strne	r1, [r3, #4]
 801ae6c:	6863      	ldr	r3, [r4, #4]
 801ae6e:	bf08      	it	eq
 801ae70:	f8c8 1000 	streq.w	r1, [r8]
 801ae74:	5162      	str	r2, [r4, r5]
 801ae76:	604b      	str	r3, [r1, #4]
 801ae78:	4630      	mov	r0, r6
 801ae7a:	f000 f841 	bl	801af00 <__malloc_unlock>
 801ae7e:	f104 000b 	add.w	r0, r4, #11
 801ae82:	1d23      	adds	r3, r4, #4
 801ae84:	f020 0007 	bic.w	r0, r0, #7
 801ae88:	1ac2      	subs	r2, r0, r3
 801ae8a:	bf1c      	itt	ne
 801ae8c:	1a1b      	subne	r3, r3, r0
 801ae8e:	50a3      	strne	r3, [r4, r2]
 801ae90:	e7af      	b.n	801adf2 <_malloc_r+0x22>
 801ae92:	6862      	ldr	r2, [r4, #4]
 801ae94:	42a3      	cmp	r3, r4
 801ae96:	bf0c      	ite	eq
 801ae98:	f8c8 2000 	streq.w	r2, [r8]
 801ae9c:	605a      	strne	r2, [r3, #4]
 801ae9e:	e7eb      	b.n	801ae78 <_malloc_r+0xa8>
 801aea0:	4623      	mov	r3, r4
 801aea2:	6864      	ldr	r4, [r4, #4]
 801aea4:	e7ae      	b.n	801ae04 <_malloc_r+0x34>
 801aea6:	463c      	mov	r4, r7
 801aea8:	687f      	ldr	r7, [r7, #4]
 801aeaa:	e7b6      	b.n	801ae1a <_malloc_r+0x4a>
 801aeac:	461a      	mov	r2, r3
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	42a3      	cmp	r3, r4
 801aeb2:	d1fb      	bne.n	801aeac <_malloc_r+0xdc>
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	6053      	str	r3, [r2, #4]
 801aeb8:	e7de      	b.n	801ae78 <_malloc_r+0xa8>
 801aeba:	230c      	movs	r3, #12
 801aebc:	6033      	str	r3, [r6, #0]
 801aebe:	4630      	mov	r0, r6
 801aec0:	f000 f81e 	bl	801af00 <__malloc_unlock>
 801aec4:	e794      	b.n	801adf0 <_malloc_r+0x20>
 801aec6:	6005      	str	r5, [r0, #0]
 801aec8:	e7d6      	b.n	801ae78 <_malloc_r+0xa8>
 801aeca:	bf00      	nop
 801aecc:	24006368 	.word	0x24006368

0801aed0 <__ascii_mbtowc>:
 801aed0:	b082      	sub	sp, #8
 801aed2:	b901      	cbnz	r1, 801aed6 <__ascii_mbtowc+0x6>
 801aed4:	a901      	add	r1, sp, #4
 801aed6:	b142      	cbz	r2, 801aeea <__ascii_mbtowc+0x1a>
 801aed8:	b14b      	cbz	r3, 801aeee <__ascii_mbtowc+0x1e>
 801aeda:	7813      	ldrb	r3, [r2, #0]
 801aedc:	600b      	str	r3, [r1, #0]
 801aede:	7812      	ldrb	r2, [r2, #0]
 801aee0:	1e10      	subs	r0, r2, #0
 801aee2:	bf18      	it	ne
 801aee4:	2001      	movne	r0, #1
 801aee6:	b002      	add	sp, #8
 801aee8:	4770      	bx	lr
 801aeea:	4610      	mov	r0, r2
 801aeec:	e7fb      	b.n	801aee6 <__ascii_mbtowc+0x16>
 801aeee:	f06f 0001 	mvn.w	r0, #1
 801aef2:	e7f8      	b.n	801aee6 <__ascii_mbtowc+0x16>

0801aef4 <__malloc_lock>:
 801aef4:	4801      	ldr	r0, [pc, #4]	@ (801aefc <__malloc_lock+0x8>)
 801aef6:	f7fe bdc4 	b.w	8019a82 <__retarget_lock_acquire_recursive>
 801aefa:	bf00      	nop
 801aefc:	24006360 	.word	0x24006360

0801af00 <__malloc_unlock>:
 801af00:	4801      	ldr	r0, [pc, #4]	@ (801af08 <__malloc_unlock+0x8>)
 801af02:	f7fe bdbf 	b.w	8019a84 <__retarget_lock_release_recursive>
 801af06:	bf00      	nop
 801af08:	24006360 	.word	0x24006360

0801af0c <_Balloc>:
 801af0c:	b570      	push	{r4, r5, r6, lr}
 801af0e:	69c6      	ldr	r6, [r0, #28]
 801af10:	4604      	mov	r4, r0
 801af12:	460d      	mov	r5, r1
 801af14:	b976      	cbnz	r6, 801af34 <_Balloc+0x28>
 801af16:	2010      	movs	r0, #16
 801af18:	f7ff ff30 	bl	801ad7c <malloc>
 801af1c:	4602      	mov	r2, r0
 801af1e:	61e0      	str	r0, [r4, #28]
 801af20:	b920      	cbnz	r0, 801af2c <_Balloc+0x20>
 801af22:	4b18      	ldr	r3, [pc, #96]	@ (801af84 <_Balloc+0x78>)
 801af24:	4818      	ldr	r0, [pc, #96]	@ (801af88 <_Balloc+0x7c>)
 801af26:	216b      	movs	r1, #107	@ 0x6b
 801af28:	f000 feda 	bl	801bce0 <__assert_func>
 801af2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801af30:	6006      	str	r6, [r0, #0]
 801af32:	60c6      	str	r6, [r0, #12]
 801af34:	69e6      	ldr	r6, [r4, #28]
 801af36:	68f3      	ldr	r3, [r6, #12]
 801af38:	b183      	cbz	r3, 801af5c <_Balloc+0x50>
 801af3a:	69e3      	ldr	r3, [r4, #28]
 801af3c:	68db      	ldr	r3, [r3, #12]
 801af3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801af42:	b9b8      	cbnz	r0, 801af74 <_Balloc+0x68>
 801af44:	2101      	movs	r1, #1
 801af46:	fa01 f605 	lsl.w	r6, r1, r5
 801af4a:	1d72      	adds	r2, r6, #5
 801af4c:	0092      	lsls	r2, r2, #2
 801af4e:	4620      	mov	r0, r4
 801af50:	f000 fee4 	bl	801bd1c <_calloc_r>
 801af54:	b160      	cbz	r0, 801af70 <_Balloc+0x64>
 801af56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801af5a:	e00e      	b.n	801af7a <_Balloc+0x6e>
 801af5c:	2221      	movs	r2, #33	@ 0x21
 801af5e:	2104      	movs	r1, #4
 801af60:	4620      	mov	r0, r4
 801af62:	f000 fedb 	bl	801bd1c <_calloc_r>
 801af66:	69e3      	ldr	r3, [r4, #28]
 801af68:	60f0      	str	r0, [r6, #12]
 801af6a:	68db      	ldr	r3, [r3, #12]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d1e4      	bne.n	801af3a <_Balloc+0x2e>
 801af70:	2000      	movs	r0, #0
 801af72:	bd70      	pop	{r4, r5, r6, pc}
 801af74:	6802      	ldr	r2, [r0, #0]
 801af76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801af7a:	2300      	movs	r3, #0
 801af7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801af80:	e7f7      	b.n	801af72 <_Balloc+0x66>
 801af82:	bf00      	nop
 801af84:	0801d98a 	.word	0x0801d98a
 801af88:	0801da6a 	.word	0x0801da6a

0801af8c <_Bfree>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	69c6      	ldr	r6, [r0, #28]
 801af90:	4605      	mov	r5, r0
 801af92:	460c      	mov	r4, r1
 801af94:	b976      	cbnz	r6, 801afb4 <_Bfree+0x28>
 801af96:	2010      	movs	r0, #16
 801af98:	f7ff fef0 	bl	801ad7c <malloc>
 801af9c:	4602      	mov	r2, r0
 801af9e:	61e8      	str	r0, [r5, #28]
 801afa0:	b920      	cbnz	r0, 801afac <_Bfree+0x20>
 801afa2:	4b09      	ldr	r3, [pc, #36]	@ (801afc8 <_Bfree+0x3c>)
 801afa4:	4809      	ldr	r0, [pc, #36]	@ (801afcc <_Bfree+0x40>)
 801afa6:	218f      	movs	r1, #143	@ 0x8f
 801afa8:	f000 fe9a 	bl	801bce0 <__assert_func>
 801afac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801afb0:	6006      	str	r6, [r0, #0]
 801afb2:	60c6      	str	r6, [r0, #12]
 801afb4:	b13c      	cbz	r4, 801afc6 <_Bfree+0x3a>
 801afb6:	69eb      	ldr	r3, [r5, #28]
 801afb8:	6862      	ldr	r2, [r4, #4]
 801afba:	68db      	ldr	r3, [r3, #12]
 801afbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801afc0:	6021      	str	r1, [r4, #0]
 801afc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801afc6:	bd70      	pop	{r4, r5, r6, pc}
 801afc8:	0801d98a 	.word	0x0801d98a
 801afcc:	0801da6a 	.word	0x0801da6a

0801afd0 <__multadd>:
 801afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afd4:	690d      	ldr	r5, [r1, #16]
 801afd6:	4607      	mov	r7, r0
 801afd8:	460c      	mov	r4, r1
 801afda:	461e      	mov	r6, r3
 801afdc:	f101 0c14 	add.w	ip, r1, #20
 801afe0:	2000      	movs	r0, #0
 801afe2:	f8dc 3000 	ldr.w	r3, [ip]
 801afe6:	b299      	uxth	r1, r3
 801afe8:	fb02 6101 	mla	r1, r2, r1, r6
 801afec:	0c1e      	lsrs	r6, r3, #16
 801afee:	0c0b      	lsrs	r3, r1, #16
 801aff0:	fb02 3306 	mla	r3, r2, r6, r3
 801aff4:	b289      	uxth	r1, r1
 801aff6:	3001      	adds	r0, #1
 801aff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801affc:	4285      	cmp	r5, r0
 801affe:	f84c 1b04 	str.w	r1, [ip], #4
 801b002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b006:	dcec      	bgt.n	801afe2 <__multadd+0x12>
 801b008:	b30e      	cbz	r6, 801b04e <__multadd+0x7e>
 801b00a:	68a3      	ldr	r3, [r4, #8]
 801b00c:	42ab      	cmp	r3, r5
 801b00e:	dc19      	bgt.n	801b044 <__multadd+0x74>
 801b010:	6861      	ldr	r1, [r4, #4]
 801b012:	4638      	mov	r0, r7
 801b014:	3101      	adds	r1, #1
 801b016:	f7ff ff79 	bl	801af0c <_Balloc>
 801b01a:	4680      	mov	r8, r0
 801b01c:	b928      	cbnz	r0, 801b02a <__multadd+0x5a>
 801b01e:	4602      	mov	r2, r0
 801b020:	4b0c      	ldr	r3, [pc, #48]	@ (801b054 <__multadd+0x84>)
 801b022:	480d      	ldr	r0, [pc, #52]	@ (801b058 <__multadd+0x88>)
 801b024:	21ba      	movs	r1, #186	@ 0xba
 801b026:	f000 fe5b 	bl	801bce0 <__assert_func>
 801b02a:	6922      	ldr	r2, [r4, #16]
 801b02c:	3202      	adds	r2, #2
 801b02e:	f104 010c 	add.w	r1, r4, #12
 801b032:	0092      	lsls	r2, r2, #2
 801b034:	300c      	adds	r0, #12
 801b036:	f7fe fd26 	bl	8019a86 <memcpy>
 801b03a:	4621      	mov	r1, r4
 801b03c:	4638      	mov	r0, r7
 801b03e:	f7ff ffa5 	bl	801af8c <_Bfree>
 801b042:	4644      	mov	r4, r8
 801b044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b048:	3501      	adds	r5, #1
 801b04a:	615e      	str	r6, [r3, #20]
 801b04c:	6125      	str	r5, [r4, #16]
 801b04e:	4620      	mov	r0, r4
 801b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b054:	0801d9f9 	.word	0x0801d9f9
 801b058:	0801da6a 	.word	0x0801da6a

0801b05c <__s2b>:
 801b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b060:	460c      	mov	r4, r1
 801b062:	4615      	mov	r5, r2
 801b064:	461f      	mov	r7, r3
 801b066:	2209      	movs	r2, #9
 801b068:	3308      	adds	r3, #8
 801b06a:	4606      	mov	r6, r0
 801b06c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b070:	2100      	movs	r1, #0
 801b072:	2201      	movs	r2, #1
 801b074:	429a      	cmp	r2, r3
 801b076:	db09      	blt.n	801b08c <__s2b+0x30>
 801b078:	4630      	mov	r0, r6
 801b07a:	f7ff ff47 	bl	801af0c <_Balloc>
 801b07e:	b940      	cbnz	r0, 801b092 <__s2b+0x36>
 801b080:	4602      	mov	r2, r0
 801b082:	4b19      	ldr	r3, [pc, #100]	@ (801b0e8 <__s2b+0x8c>)
 801b084:	4819      	ldr	r0, [pc, #100]	@ (801b0ec <__s2b+0x90>)
 801b086:	21d3      	movs	r1, #211	@ 0xd3
 801b088:	f000 fe2a 	bl	801bce0 <__assert_func>
 801b08c:	0052      	lsls	r2, r2, #1
 801b08e:	3101      	adds	r1, #1
 801b090:	e7f0      	b.n	801b074 <__s2b+0x18>
 801b092:	9b08      	ldr	r3, [sp, #32]
 801b094:	6143      	str	r3, [r0, #20]
 801b096:	2d09      	cmp	r5, #9
 801b098:	f04f 0301 	mov.w	r3, #1
 801b09c:	6103      	str	r3, [r0, #16]
 801b09e:	dd16      	ble.n	801b0ce <__s2b+0x72>
 801b0a0:	f104 0909 	add.w	r9, r4, #9
 801b0a4:	46c8      	mov	r8, r9
 801b0a6:	442c      	add	r4, r5
 801b0a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b0ac:	4601      	mov	r1, r0
 801b0ae:	3b30      	subs	r3, #48	@ 0x30
 801b0b0:	220a      	movs	r2, #10
 801b0b2:	4630      	mov	r0, r6
 801b0b4:	f7ff ff8c 	bl	801afd0 <__multadd>
 801b0b8:	45a0      	cmp	r8, r4
 801b0ba:	d1f5      	bne.n	801b0a8 <__s2b+0x4c>
 801b0bc:	f1a5 0408 	sub.w	r4, r5, #8
 801b0c0:	444c      	add	r4, r9
 801b0c2:	1b2d      	subs	r5, r5, r4
 801b0c4:	1963      	adds	r3, r4, r5
 801b0c6:	42bb      	cmp	r3, r7
 801b0c8:	db04      	blt.n	801b0d4 <__s2b+0x78>
 801b0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0ce:	340a      	adds	r4, #10
 801b0d0:	2509      	movs	r5, #9
 801b0d2:	e7f6      	b.n	801b0c2 <__s2b+0x66>
 801b0d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b0d8:	4601      	mov	r1, r0
 801b0da:	3b30      	subs	r3, #48	@ 0x30
 801b0dc:	220a      	movs	r2, #10
 801b0de:	4630      	mov	r0, r6
 801b0e0:	f7ff ff76 	bl	801afd0 <__multadd>
 801b0e4:	e7ee      	b.n	801b0c4 <__s2b+0x68>
 801b0e6:	bf00      	nop
 801b0e8:	0801d9f9 	.word	0x0801d9f9
 801b0ec:	0801da6a 	.word	0x0801da6a

0801b0f0 <__hi0bits>:
 801b0f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	bf36      	itet	cc
 801b0f8:	0403      	lslcc	r3, r0, #16
 801b0fa:	2000      	movcs	r0, #0
 801b0fc:	2010      	movcc	r0, #16
 801b0fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b102:	bf3c      	itt	cc
 801b104:	021b      	lslcc	r3, r3, #8
 801b106:	3008      	addcc	r0, #8
 801b108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b10c:	bf3c      	itt	cc
 801b10e:	011b      	lslcc	r3, r3, #4
 801b110:	3004      	addcc	r0, #4
 801b112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b116:	bf3c      	itt	cc
 801b118:	009b      	lslcc	r3, r3, #2
 801b11a:	3002      	addcc	r0, #2
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	db05      	blt.n	801b12c <__hi0bits+0x3c>
 801b120:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b124:	f100 0001 	add.w	r0, r0, #1
 801b128:	bf08      	it	eq
 801b12a:	2020      	moveq	r0, #32
 801b12c:	4770      	bx	lr

0801b12e <__lo0bits>:
 801b12e:	6803      	ldr	r3, [r0, #0]
 801b130:	4602      	mov	r2, r0
 801b132:	f013 0007 	ands.w	r0, r3, #7
 801b136:	d00b      	beq.n	801b150 <__lo0bits+0x22>
 801b138:	07d9      	lsls	r1, r3, #31
 801b13a:	d421      	bmi.n	801b180 <__lo0bits+0x52>
 801b13c:	0798      	lsls	r0, r3, #30
 801b13e:	bf49      	itett	mi
 801b140:	085b      	lsrmi	r3, r3, #1
 801b142:	089b      	lsrpl	r3, r3, #2
 801b144:	2001      	movmi	r0, #1
 801b146:	6013      	strmi	r3, [r2, #0]
 801b148:	bf5c      	itt	pl
 801b14a:	6013      	strpl	r3, [r2, #0]
 801b14c:	2002      	movpl	r0, #2
 801b14e:	4770      	bx	lr
 801b150:	b299      	uxth	r1, r3
 801b152:	b909      	cbnz	r1, 801b158 <__lo0bits+0x2a>
 801b154:	0c1b      	lsrs	r3, r3, #16
 801b156:	2010      	movs	r0, #16
 801b158:	b2d9      	uxtb	r1, r3
 801b15a:	b909      	cbnz	r1, 801b160 <__lo0bits+0x32>
 801b15c:	3008      	adds	r0, #8
 801b15e:	0a1b      	lsrs	r3, r3, #8
 801b160:	0719      	lsls	r1, r3, #28
 801b162:	bf04      	itt	eq
 801b164:	091b      	lsreq	r3, r3, #4
 801b166:	3004      	addeq	r0, #4
 801b168:	0799      	lsls	r1, r3, #30
 801b16a:	bf04      	itt	eq
 801b16c:	089b      	lsreq	r3, r3, #2
 801b16e:	3002      	addeq	r0, #2
 801b170:	07d9      	lsls	r1, r3, #31
 801b172:	d403      	bmi.n	801b17c <__lo0bits+0x4e>
 801b174:	085b      	lsrs	r3, r3, #1
 801b176:	f100 0001 	add.w	r0, r0, #1
 801b17a:	d003      	beq.n	801b184 <__lo0bits+0x56>
 801b17c:	6013      	str	r3, [r2, #0]
 801b17e:	4770      	bx	lr
 801b180:	2000      	movs	r0, #0
 801b182:	4770      	bx	lr
 801b184:	2020      	movs	r0, #32
 801b186:	4770      	bx	lr

0801b188 <__i2b>:
 801b188:	b510      	push	{r4, lr}
 801b18a:	460c      	mov	r4, r1
 801b18c:	2101      	movs	r1, #1
 801b18e:	f7ff febd 	bl	801af0c <_Balloc>
 801b192:	4602      	mov	r2, r0
 801b194:	b928      	cbnz	r0, 801b1a2 <__i2b+0x1a>
 801b196:	4b05      	ldr	r3, [pc, #20]	@ (801b1ac <__i2b+0x24>)
 801b198:	4805      	ldr	r0, [pc, #20]	@ (801b1b0 <__i2b+0x28>)
 801b19a:	f240 1145 	movw	r1, #325	@ 0x145
 801b19e:	f000 fd9f 	bl	801bce0 <__assert_func>
 801b1a2:	2301      	movs	r3, #1
 801b1a4:	6144      	str	r4, [r0, #20]
 801b1a6:	6103      	str	r3, [r0, #16]
 801b1a8:	bd10      	pop	{r4, pc}
 801b1aa:	bf00      	nop
 801b1ac:	0801d9f9 	.word	0x0801d9f9
 801b1b0:	0801da6a 	.word	0x0801da6a

0801b1b4 <__multiply>:
 801b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1b8:	4614      	mov	r4, r2
 801b1ba:	690a      	ldr	r2, [r1, #16]
 801b1bc:	6923      	ldr	r3, [r4, #16]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	bfa8      	it	ge
 801b1c2:	4623      	movge	r3, r4
 801b1c4:	460f      	mov	r7, r1
 801b1c6:	bfa4      	itt	ge
 801b1c8:	460c      	movge	r4, r1
 801b1ca:	461f      	movge	r7, r3
 801b1cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b1d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b1d4:	68a3      	ldr	r3, [r4, #8]
 801b1d6:	6861      	ldr	r1, [r4, #4]
 801b1d8:	eb0a 0609 	add.w	r6, sl, r9
 801b1dc:	42b3      	cmp	r3, r6
 801b1de:	b085      	sub	sp, #20
 801b1e0:	bfb8      	it	lt
 801b1e2:	3101      	addlt	r1, #1
 801b1e4:	f7ff fe92 	bl	801af0c <_Balloc>
 801b1e8:	b930      	cbnz	r0, 801b1f8 <__multiply+0x44>
 801b1ea:	4602      	mov	r2, r0
 801b1ec:	4b44      	ldr	r3, [pc, #272]	@ (801b300 <__multiply+0x14c>)
 801b1ee:	4845      	ldr	r0, [pc, #276]	@ (801b304 <__multiply+0x150>)
 801b1f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b1f4:	f000 fd74 	bl	801bce0 <__assert_func>
 801b1f8:	f100 0514 	add.w	r5, r0, #20
 801b1fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b200:	462b      	mov	r3, r5
 801b202:	2200      	movs	r2, #0
 801b204:	4543      	cmp	r3, r8
 801b206:	d321      	bcc.n	801b24c <__multiply+0x98>
 801b208:	f107 0114 	add.w	r1, r7, #20
 801b20c:	f104 0214 	add.w	r2, r4, #20
 801b210:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b214:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b218:	9302      	str	r3, [sp, #8]
 801b21a:	1b13      	subs	r3, r2, r4
 801b21c:	3b15      	subs	r3, #21
 801b21e:	f023 0303 	bic.w	r3, r3, #3
 801b222:	3304      	adds	r3, #4
 801b224:	f104 0715 	add.w	r7, r4, #21
 801b228:	42ba      	cmp	r2, r7
 801b22a:	bf38      	it	cc
 801b22c:	2304      	movcc	r3, #4
 801b22e:	9301      	str	r3, [sp, #4]
 801b230:	9b02      	ldr	r3, [sp, #8]
 801b232:	9103      	str	r1, [sp, #12]
 801b234:	428b      	cmp	r3, r1
 801b236:	d80c      	bhi.n	801b252 <__multiply+0x9e>
 801b238:	2e00      	cmp	r6, #0
 801b23a:	dd03      	ble.n	801b244 <__multiply+0x90>
 801b23c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b240:	2b00      	cmp	r3, #0
 801b242:	d05b      	beq.n	801b2fc <__multiply+0x148>
 801b244:	6106      	str	r6, [r0, #16]
 801b246:	b005      	add	sp, #20
 801b248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b24c:	f843 2b04 	str.w	r2, [r3], #4
 801b250:	e7d8      	b.n	801b204 <__multiply+0x50>
 801b252:	f8b1 a000 	ldrh.w	sl, [r1]
 801b256:	f1ba 0f00 	cmp.w	sl, #0
 801b25a:	d024      	beq.n	801b2a6 <__multiply+0xf2>
 801b25c:	f104 0e14 	add.w	lr, r4, #20
 801b260:	46a9      	mov	r9, r5
 801b262:	f04f 0c00 	mov.w	ip, #0
 801b266:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b26a:	f8d9 3000 	ldr.w	r3, [r9]
 801b26e:	fa1f fb87 	uxth.w	fp, r7
 801b272:	b29b      	uxth	r3, r3
 801b274:	fb0a 330b 	mla	r3, sl, fp, r3
 801b278:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b27c:	f8d9 7000 	ldr.w	r7, [r9]
 801b280:	4463      	add	r3, ip
 801b282:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b286:	fb0a c70b 	mla	r7, sl, fp, ip
 801b28a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b28e:	b29b      	uxth	r3, r3
 801b290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b294:	4572      	cmp	r2, lr
 801b296:	f849 3b04 	str.w	r3, [r9], #4
 801b29a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b29e:	d8e2      	bhi.n	801b266 <__multiply+0xb2>
 801b2a0:	9b01      	ldr	r3, [sp, #4]
 801b2a2:	f845 c003 	str.w	ip, [r5, r3]
 801b2a6:	9b03      	ldr	r3, [sp, #12]
 801b2a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b2ac:	3104      	adds	r1, #4
 801b2ae:	f1b9 0f00 	cmp.w	r9, #0
 801b2b2:	d021      	beq.n	801b2f8 <__multiply+0x144>
 801b2b4:	682b      	ldr	r3, [r5, #0]
 801b2b6:	f104 0c14 	add.w	ip, r4, #20
 801b2ba:	46ae      	mov	lr, r5
 801b2bc:	f04f 0a00 	mov.w	sl, #0
 801b2c0:	f8bc b000 	ldrh.w	fp, [ip]
 801b2c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b2c8:	fb09 770b 	mla	r7, r9, fp, r7
 801b2cc:	4457      	add	r7, sl
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b2d4:	f84e 3b04 	str.w	r3, [lr], #4
 801b2d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b2dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2e0:	f8be 3000 	ldrh.w	r3, [lr]
 801b2e4:	fb09 330a 	mla	r3, r9, sl, r3
 801b2e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b2ec:	4562      	cmp	r2, ip
 801b2ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b2f2:	d8e5      	bhi.n	801b2c0 <__multiply+0x10c>
 801b2f4:	9f01      	ldr	r7, [sp, #4]
 801b2f6:	51eb      	str	r3, [r5, r7]
 801b2f8:	3504      	adds	r5, #4
 801b2fa:	e799      	b.n	801b230 <__multiply+0x7c>
 801b2fc:	3e01      	subs	r6, #1
 801b2fe:	e79b      	b.n	801b238 <__multiply+0x84>
 801b300:	0801d9f9 	.word	0x0801d9f9
 801b304:	0801da6a 	.word	0x0801da6a

0801b308 <__pow5mult>:
 801b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b30c:	4615      	mov	r5, r2
 801b30e:	f012 0203 	ands.w	r2, r2, #3
 801b312:	4607      	mov	r7, r0
 801b314:	460e      	mov	r6, r1
 801b316:	d007      	beq.n	801b328 <__pow5mult+0x20>
 801b318:	4c25      	ldr	r4, [pc, #148]	@ (801b3b0 <__pow5mult+0xa8>)
 801b31a:	3a01      	subs	r2, #1
 801b31c:	2300      	movs	r3, #0
 801b31e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b322:	f7ff fe55 	bl	801afd0 <__multadd>
 801b326:	4606      	mov	r6, r0
 801b328:	10ad      	asrs	r5, r5, #2
 801b32a:	d03d      	beq.n	801b3a8 <__pow5mult+0xa0>
 801b32c:	69fc      	ldr	r4, [r7, #28]
 801b32e:	b97c      	cbnz	r4, 801b350 <__pow5mult+0x48>
 801b330:	2010      	movs	r0, #16
 801b332:	f7ff fd23 	bl	801ad7c <malloc>
 801b336:	4602      	mov	r2, r0
 801b338:	61f8      	str	r0, [r7, #28]
 801b33a:	b928      	cbnz	r0, 801b348 <__pow5mult+0x40>
 801b33c:	4b1d      	ldr	r3, [pc, #116]	@ (801b3b4 <__pow5mult+0xac>)
 801b33e:	481e      	ldr	r0, [pc, #120]	@ (801b3b8 <__pow5mult+0xb0>)
 801b340:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b344:	f000 fccc 	bl	801bce0 <__assert_func>
 801b348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b34c:	6004      	str	r4, [r0, #0]
 801b34e:	60c4      	str	r4, [r0, #12]
 801b350:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b358:	b94c      	cbnz	r4, 801b36e <__pow5mult+0x66>
 801b35a:	f240 2171 	movw	r1, #625	@ 0x271
 801b35e:	4638      	mov	r0, r7
 801b360:	f7ff ff12 	bl	801b188 <__i2b>
 801b364:	2300      	movs	r3, #0
 801b366:	f8c8 0008 	str.w	r0, [r8, #8]
 801b36a:	4604      	mov	r4, r0
 801b36c:	6003      	str	r3, [r0, #0]
 801b36e:	f04f 0900 	mov.w	r9, #0
 801b372:	07eb      	lsls	r3, r5, #31
 801b374:	d50a      	bpl.n	801b38c <__pow5mult+0x84>
 801b376:	4631      	mov	r1, r6
 801b378:	4622      	mov	r2, r4
 801b37a:	4638      	mov	r0, r7
 801b37c:	f7ff ff1a 	bl	801b1b4 <__multiply>
 801b380:	4631      	mov	r1, r6
 801b382:	4680      	mov	r8, r0
 801b384:	4638      	mov	r0, r7
 801b386:	f7ff fe01 	bl	801af8c <_Bfree>
 801b38a:	4646      	mov	r6, r8
 801b38c:	106d      	asrs	r5, r5, #1
 801b38e:	d00b      	beq.n	801b3a8 <__pow5mult+0xa0>
 801b390:	6820      	ldr	r0, [r4, #0]
 801b392:	b938      	cbnz	r0, 801b3a4 <__pow5mult+0x9c>
 801b394:	4622      	mov	r2, r4
 801b396:	4621      	mov	r1, r4
 801b398:	4638      	mov	r0, r7
 801b39a:	f7ff ff0b 	bl	801b1b4 <__multiply>
 801b39e:	6020      	str	r0, [r4, #0]
 801b3a0:	f8c0 9000 	str.w	r9, [r0]
 801b3a4:	4604      	mov	r4, r0
 801b3a6:	e7e4      	b.n	801b372 <__pow5mult+0x6a>
 801b3a8:	4630      	mov	r0, r6
 801b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3ae:	bf00      	nop
 801b3b0:	0801dac4 	.word	0x0801dac4
 801b3b4:	0801d98a 	.word	0x0801d98a
 801b3b8:	0801da6a 	.word	0x0801da6a

0801b3bc <__lshift>:
 801b3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3c0:	460c      	mov	r4, r1
 801b3c2:	6849      	ldr	r1, [r1, #4]
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b3ca:	68a3      	ldr	r3, [r4, #8]
 801b3cc:	4607      	mov	r7, r0
 801b3ce:	4691      	mov	r9, r2
 801b3d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b3d4:	f108 0601 	add.w	r6, r8, #1
 801b3d8:	42b3      	cmp	r3, r6
 801b3da:	db0b      	blt.n	801b3f4 <__lshift+0x38>
 801b3dc:	4638      	mov	r0, r7
 801b3de:	f7ff fd95 	bl	801af0c <_Balloc>
 801b3e2:	4605      	mov	r5, r0
 801b3e4:	b948      	cbnz	r0, 801b3fa <__lshift+0x3e>
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	4b28      	ldr	r3, [pc, #160]	@ (801b48c <__lshift+0xd0>)
 801b3ea:	4829      	ldr	r0, [pc, #164]	@ (801b490 <__lshift+0xd4>)
 801b3ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b3f0:	f000 fc76 	bl	801bce0 <__assert_func>
 801b3f4:	3101      	adds	r1, #1
 801b3f6:	005b      	lsls	r3, r3, #1
 801b3f8:	e7ee      	b.n	801b3d8 <__lshift+0x1c>
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	f100 0114 	add.w	r1, r0, #20
 801b400:	f100 0210 	add.w	r2, r0, #16
 801b404:	4618      	mov	r0, r3
 801b406:	4553      	cmp	r3, sl
 801b408:	db33      	blt.n	801b472 <__lshift+0xb6>
 801b40a:	6920      	ldr	r0, [r4, #16]
 801b40c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b410:	f104 0314 	add.w	r3, r4, #20
 801b414:	f019 091f 	ands.w	r9, r9, #31
 801b418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b41c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b420:	d02b      	beq.n	801b47a <__lshift+0xbe>
 801b422:	f1c9 0e20 	rsb	lr, r9, #32
 801b426:	468a      	mov	sl, r1
 801b428:	2200      	movs	r2, #0
 801b42a:	6818      	ldr	r0, [r3, #0]
 801b42c:	fa00 f009 	lsl.w	r0, r0, r9
 801b430:	4310      	orrs	r0, r2
 801b432:	f84a 0b04 	str.w	r0, [sl], #4
 801b436:	f853 2b04 	ldr.w	r2, [r3], #4
 801b43a:	459c      	cmp	ip, r3
 801b43c:	fa22 f20e 	lsr.w	r2, r2, lr
 801b440:	d8f3      	bhi.n	801b42a <__lshift+0x6e>
 801b442:	ebac 0304 	sub.w	r3, ip, r4
 801b446:	3b15      	subs	r3, #21
 801b448:	f023 0303 	bic.w	r3, r3, #3
 801b44c:	3304      	adds	r3, #4
 801b44e:	f104 0015 	add.w	r0, r4, #21
 801b452:	4584      	cmp	ip, r0
 801b454:	bf38      	it	cc
 801b456:	2304      	movcc	r3, #4
 801b458:	50ca      	str	r2, [r1, r3]
 801b45a:	b10a      	cbz	r2, 801b460 <__lshift+0xa4>
 801b45c:	f108 0602 	add.w	r6, r8, #2
 801b460:	3e01      	subs	r6, #1
 801b462:	4638      	mov	r0, r7
 801b464:	612e      	str	r6, [r5, #16]
 801b466:	4621      	mov	r1, r4
 801b468:	f7ff fd90 	bl	801af8c <_Bfree>
 801b46c:	4628      	mov	r0, r5
 801b46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b472:	f842 0f04 	str.w	r0, [r2, #4]!
 801b476:	3301      	adds	r3, #1
 801b478:	e7c5      	b.n	801b406 <__lshift+0x4a>
 801b47a:	3904      	subs	r1, #4
 801b47c:	f853 2b04 	ldr.w	r2, [r3], #4
 801b480:	f841 2f04 	str.w	r2, [r1, #4]!
 801b484:	459c      	cmp	ip, r3
 801b486:	d8f9      	bhi.n	801b47c <__lshift+0xc0>
 801b488:	e7ea      	b.n	801b460 <__lshift+0xa4>
 801b48a:	bf00      	nop
 801b48c:	0801d9f9 	.word	0x0801d9f9
 801b490:	0801da6a 	.word	0x0801da6a

0801b494 <__mcmp>:
 801b494:	690a      	ldr	r2, [r1, #16]
 801b496:	4603      	mov	r3, r0
 801b498:	6900      	ldr	r0, [r0, #16]
 801b49a:	1a80      	subs	r0, r0, r2
 801b49c:	b530      	push	{r4, r5, lr}
 801b49e:	d10e      	bne.n	801b4be <__mcmp+0x2a>
 801b4a0:	3314      	adds	r3, #20
 801b4a2:	3114      	adds	r1, #20
 801b4a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b4a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b4ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b4b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b4b4:	4295      	cmp	r5, r2
 801b4b6:	d003      	beq.n	801b4c0 <__mcmp+0x2c>
 801b4b8:	d205      	bcs.n	801b4c6 <__mcmp+0x32>
 801b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b4be:	bd30      	pop	{r4, r5, pc}
 801b4c0:	42a3      	cmp	r3, r4
 801b4c2:	d3f3      	bcc.n	801b4ac <__mcmp+0x18>
 801b4c4:	e7fb      	b.n	801b4be <__mcmp+0x2a>
 801b4c6:	2001      	movs	r0, #1
 801b4c8:	e7f9      	b.n	801b4be <__mcmp+0x2a>
	...

0801b4cc <__mdiff>:
 801b4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4d0:	4689      	mov	r9, r1
 801b4d2:	4606      	mov	r6, r0
 801b4d4:	4611      	mov	r1, r2
 801b4d6:	4648      	mov	r0, r9
 801b4d8:	4614      	mov	r4, r2
 801b4da:	f7ff ffdb 	bl	801b494 <__mcmp>
 801b4de:	1e05      	subs	r5, r0, #0
 801b4e0:	d112      	bne.n	801b508 <__mdiff+0x3c>
 801b4e2:	4629      	mov	r1, r5
 801b4e4:	4630      	mov	r0, r6
 801b4e6:	f7ff fd11 	bl	801af0c <_Balloc>
 801b4ea:	4602      	mov	r2, r0
 801b4ec:	b928      	cbnz	r0, 801b4fa <__mdiff+0x2e>
 801b4ee:	4b3f      	ldr	r3, [pc, #252]	@ (801b5ec <__mdiff+0x120>)
 801b4f0:	f240 2137 	movw	r1, #567	@ 0x237
 801b4f4:	483e      	ldr	r0, [pc, #248]	@ (801b5f0 <__mdiff+0x124>)
 801b4f6:	f000 fbf3 	bl	801bce0 <__assert_func>
 801b4fa:	2301      	movs	r3, #1
 801b4fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b500:	4610      	mov	r0, r2
 801b502:	b003      	add	sp, #12
 801b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b508:	bfbc      	itt	lt
 801b50a:	464b      	movlt	r3, r9
 801b50c:	46a1      	movlt	r9, r4
 801b50e:	4630      	mov	r0, r6
 801b510:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b514:	bfba      	itte	lt
 801b516:	461c      	movlt	r4, r3
 801b518:	2501      	movlt	r5, #1
 801b51a:	2500      	movge	r5, #0
 801b51c:	f7ff fcf6 	bl	801af0c <_Balloc>
 801b520:	4602      	mov	r2, r0
 801b522:	b918      	cbnz	r0, 801b52c <__mdiff+0x60>
 801b524:	4b31      	ldr	r3, [pc, #196]	@ (801b5ec <__mdiff+0x120>)
 801b526:	f240 2145 	movw	r1, #581	@ 0x245
 801b52a:	e7e3      	b.n	801b4f4 <__mdiff+0x28>
 801b52c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b530:	6926      	ldr	r6, [r4, #16]
 801b532:	60c5      	str	r5, [r0, #12]
 801b534:	f109 0310 	add.w	r3, r9, #16
 801b538:	f109 0514 	add.w	r5, r9, #20
 801b53c:	f104 0e14 	add.w	lr, r4, #20
 801b540:	f100 0b14 	add.w	fp, r0, #20
 801b544:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b548:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b54c:	9301      	str	r3, [sp, #4]
 801b54e:	46d9      	mov	r9, fp
 801b550:	f04f 0c00 	mov.w	ip, #0
 801b554:	9b01      	ldr	r3, [sp, #4]
 801b556:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b55a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b55e:	9301      	str	r3, [sp, #4]
 801b560:	fa1f f38a 	uxth.w	r3, sl
 801b564:	4619      	mov	r1, r3
 801b566:	b283      	uxth	r3, r0
 801b568:	1acb      	subs	r3, r1, r3
 801b56a:	0c00      	lsrs	r0, r0, #16
 801b56c:	4463      	add	r3, ip
 801b56e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b572:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b576:	b29b      	uxth	r3, r3
 801b578:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b57c:	4576      	cmp	r6, lr
 801b57e:	f849 3b04 	str.w	r3, [r9], #4
 801b582:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b586:	d8e5      	bhi.n	801b554 <__mdiff+0x88>
 801b588:	1b33      	subs	r3, r6, r4
 801b58a:	3b15      	subs	r3, #21
 801b58c:	f023 0303 	bic.w	r3, r3, #3
 801b590:	3415      	adds	r4, #21
 801b592:	3304      	adds	r3, #4
 801b594:	42a6      	cmp	r6, r4
 801b596:	bf38      	it	cc
 801b598:	2304      	movcc	r3, #4
 801b59a:	441d      	add	r5, r3
 801b59c:	445b      	add	r3, fp
 801b59e:	461e      	mov	r6, r3
 801b5a0:	462c      	mov	r4, r5
 801b5a2:	4544      	cmp	r4, r8
 801b5a4:	d30e      	bcc.n	801b5c4 <__mdiff+0xf8>
 801b5a6:	f108 0103 	add.w	r1, r8, #3
 801b5aa:	1b49      	subs	r1, r1, r5
 801b5ac:	f021 0103 	bic.w	r1, r1, #3
 801b5b0:	3d03      	subs	r5, #3
 801b5b2:	45a8      	cmp	r8, r5
 801b5b4:	bf38      	it	cc
 801b5b6:	2100      	movcc	r1, #0
 801b5b8:	440b      	add	r3, r1
 801b5ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b5be:	b191      	cbz	r1, 801b5e6 <__mdiff+0x11a>
 801b5c0:	6117      	str	r7, [r2, #16]
 801b5c2:	e79d      	b.n	801b500 <__mdiff+0x34>
 801b5c4:	f854 1b04 	ldr.w	r1, [r4], #4
 801b5c8:	46e6      	mov	lr, ip
 801b5ca:	0c08      	lsrs	r0, r1, #16
 801b5cc:	fa1c fc81 	uxtah	ip, ip, r1
 801b5d0:	4471      	add	r1, lr
 801b5d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b5d6:	b289      	uxth	r1, r1
 801b5d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b5dc:	f846 1b04 	str.w	r1, [r6], #4
 801b5e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b5e4:	e7dd      	b.n	801b5a2 <__mdiff+0xd6>
 801b5e6:	3f01      	subs	r7, #1
 801b5e8:	e7e7      	b.n	801b5ba <__mdiff+0xee>
 801b5ea:	bf00      	nop
 801b5ec:	0801d9f9 	.word	0x0801d9f9
 801b5f0:	0801da6a 	.word	0x0801da6a

0801b5f4 <__ulp>:
 801b5f4:	b082      	sub	sp, #8
 801b5f6:	ed8d 0b00 	vstr	d0, [sp]
 801b5fa:	9a01      	ldr	r2, [sp, #4]
 801b5fc:	4b0f      	ldr	r3, [pc, #60]	@ (801b63c <__ulp+0x48>)
 801b5fe:	4013      	ands	r3, r2
 801b600:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801b604:	2b00      	cmp	r3, #0
 801b606:	dc08      	bgt.n	801b61a <__ulp+0x26>
 801b608:	425b      	negs	r3, r3
 801b60a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801b60e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b612:	da04      	bge.n	801b61e <__ulp+0x2a>
 801b614:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b618:	4113      	asrs	r3, r2
 801b61a:	2200      	movs	r2, #0
 801b61c:	e008      	b.n	801b630 <__ulp+0x3c>
 801b61e:	f1a2 0314 	sub.w	r3, r2, #20
 801b622:	2b1e      	cmp	r3, #30
 801b624:	bfda      	itte	le
 801b626:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801b62a:	40da      	lsrle	r2, r3
 801b62c:	2201      	movgt	r2, #1
 801b62e:	2300      	movs	r3, #0
 801b630:	4619      	mov	r1, r3
 801b632:	4610      	mov	r0, r2
 801b634:	ec41 0b10 	vmov	d0, r0, r1
 801b638:	b002      	add	sp, #8
 801b63a:	4770      	bx	lr
 801b63c:	7ff00000 	.word	0x7ff00000

0801b640 <__b2d>:
 801b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b644:	6906      	ldr	r6, [r0, #16]
 801b646:	f100 0814 	add.w	r8, r0, #20
 801b64a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b64e:	1f37      	subs	r7, r6, #4
 801b650:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b654:	4610      	mov	r0, r2
 801b656:	f7ff fd4b 	bl	801b0f0 <__hi0bits>
 801b65a:	f1c0 0320 	rsb	r3, r0, #32
 801b65e:	280a      	cmp	r0, #10
 801b660:	600b      	str	r3, [r1, #0]
 801b662:	491b      	ldr	r1, [pc, #108]	@ (801b6d0 <__b2d+0x90>)
 801b664:	dc15      	bgt.n	801b692 <__b2d+0x52>
 801b666:	f1c0 0c0b 	rsb	ip, r0, #11
 801b66a:	fa22 f30c 	lsr.w	r3, r2, ip
 801b66e:	45b8      	cmp	r8, r7
 801b670:	ea43 0501 	orr.w	r5, r3, r1
 801b674:	bf34      	ite	cc
 801b676:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b67a:	2300      	movcs	r3, #0
 801b67c:	3015      	adds	r0, #21
 801b67e:	fa02 f000 	lsl.w	r0, r2, r0
 801b682:	fa23 f30c 	lsr.w	r3, r3, ip
 801b686:	4303      	orrs	r3, r0
 801b688:	461c      	mov	r4, r3
 801b68a:	ec45 4b10 	vmov	d0, r4, r5
 801b68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b692:	45b8      	cmp	r8, r7
 801b694:	bf3a      	itte	cc
 801b696:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b69a:	f1a6 0708 	subcc.w	r7, r6, #8
 801b69e:	2300      	movcs	r3, #0
 801b6a0:	380b      	subs	r0, #11
 801b6a2:	d012      	beq.n	801b6ca <__b2d+0x8a>
 801b6a4:	f1c0 0120 	rsb	r1, r0, #32
 801b6a8:	fa23 f401 	lsr.w	r4, r3, r1
 801b6ac:	4082      	lsls	r2, r0
 801b6ae:	4322      	orrs	r2, r4
 801b6b0:	4547      	cmp	r7, r8
 801b6b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801b6b6:	bf8c      	ite	hi
 801b6b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b6bc:	2200      	movls	r2, #0
 801b6be:	4083      	lsls	r3, r0
 801b6c0:	40ca      	lsrs	r2, r1
 801b6c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801b6c6:	4313      	orrs	r3, r2
 801b6c8:	e7de      	b.n	801b688 <__b2d+0x48>
 801b6ca:	ea42 0501 	orr.w	r5, r2, r1
 801b6ce:	e7db      	b.n	801b688 <__b2d+0x48>
 801b6d0:	3ff00000 	.word	0x3ff00000

0801b6d4 <__d2b>:
 801b6d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b6d8:	460f      	mov	r7, r1
 801b6da:	2101      	movs	r1, #1
 801b6dc:	ec59 8b10 	vmov	r8, r9, d0
 801b6e0:	4616      	mov	r6, r2
 801b6e2:	f7ff fc13 	bl	801af0c <_Balloc>
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	b930      	cbnz	r0, 801b6f8 <__d2b+0x24>
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	4b23      	ldr	r3, [pc, #140]	@ (801b77c <__d2b+0xa8>)
 801b6ee:	4824      	ldr	r0, [pc, #144]	@ (801b780 <__d2b+0xac>)
 801b6f0:	f240 310f 	movw	r1, #783	@ 0x30f
 801b6f4:	f000 faf4 	bl	801bce0 <__assert_func>
 801b6f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b6fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b700:	b10d      	cbz	r5, 801b706 <__d2b+0x32>
 801b702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b706:	9301      	str	r3, [sp, #4]
 801b708:	f1b8 0300 	subs.w	r3, r8, #0
 801b70c:	d023      	beq.n	801b756 <__d2b+0x82>
 801b70e:	4668      	mov	r0, sp
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	f7ff fd0c 	bl	801b12e <__lo0bits>
 801b716:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b71a:	b1d0      	cbz	r0, 801b752 <__d2b+0x7e>
 801b71c:	f1c0 0320 	rsb	r3, r0, #32
 801b720:	fa02 f303 	lsl.w	r3, r2, r3
 801b724:	430b      	orrs	r3, r1
 801b726:	40c2      	lsrs	r2, r0
 801b728:	6163      	str	r3, [r4, #20]
 801b72a:	9201      	str	r2, [sp, #4]
 801b72c:	9b01      	ldr	r3, [sp, #4]
 801b72e:	61a3      	str	r3, [r4, #24]
 801b730:	2b00      	cmp	r3, #0
 801b732:	bf0c      	ite	eq
 801b734:	2201      	moveq	r2, #1
 801b736:	2202      	movne	r2, #2
 801b738:	6122      	str	r2, [r4, #16]
 801b73a:	b1a5      	cbz	r5, 801b766 <__d2b+0x92>
 801b73c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b740:	4405      	add	r5, r0
 801b742:	603d      	str	r5, [r7, #0]
 801b744:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b748:	6030      	str	r0, [r6, #0]
 801b74a:	4620      	mov	r0, r4
 801b74c:	b003      	add	sp, #12
 801b74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b752:	6161      	str	r1, [r4, #20]
 801b754:	e7ea      	b.n	801b72c <__d2b+0x58>
 801b756:	a801      	add	r0, sp, #4
 801b758:	f7ff fce9 	bl	801b12e <__lo0bits>
 801b75c:	9b01      	ldr	r3, [sp, #4]
 801b75e:	6163      	str	r3, [r4, #20]
 801b760:	3020      	adds	r0, #32
 801b762:	2201      	movs	r2, #1
 801b764:	e7e8      	b.n	801b738 <__d2b+0x64>
 801b766:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b76a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b76e:	6038      	str	r0, [r7, #0]
 801b770:	6918      	ldr	r0, [r3, #16]
 801b772:	f7ff fcbd 	bl	801b0f0 <__hi0bits>
 801b776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b77a:	e7e5      	b.n	801b748 <__d2b+0x74>
 801b77c:	0801d9f9 	.word	0x0801d9f9
 801b780:	0801da6a 	.word	0x0801da6a

0801b784 <__ratio>:
 801b784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b788:	4688      	mov	r8, r1
 801b78a:	4669      	mov	r1, sp
 801b78c:	4681      	mov	r9, r0
 801b78e:	f7ff ff57 	bl	801b640 <__b2d>
 801b792:	a901      	add	r1, sp, #4
 801b794:	4640      	mov	r0, r8
 801b796:	ec55 4b10 	vmov	r4, r5, d0
 801b79a:	f7ff ff51 	bl	801b640 <__b2d>
 801b79e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b7a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b7a6:	1ad2      	subs	r2, r2, r3
 801b7a8:	e9dd 3100 	ldrd	r3, r1, [sp]
 801b7ac:	1a5b      	subs	r3, r3, r1
 801b7ae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801b7b2:	ec57 6b10 	vmov	r6, r7, d0
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	bfd6      	itet	le
 801b7ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b7be:	462a      	movgt	r2, r5
 801b7c0:	463a      	movle	r2, r7
 801b7c2:	46ab      	mov	fp, r5
 801b7c4:	46a2      	mov	sl, r4
 801b7c6:	bfce      	itee	gt
 801b7c8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801b7cc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801b7d0:	ee00 3a90 	vmovle	s1, r3
 801b7d4:	ec4b ab17 	vmov	d7, sl, fp
 801b7d8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801b7dc:	b003      	add	sp, #12
 801b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7e2 <__copybits>:
 801b7e2:	3901      	subs	r1, #1
 801b7e4:	b570      	push	{r4, r5, r6, lr}
 801b7e6:	1149      	asrs	r1, r1, #5
 801b7e8:	6914      	ldr	r4, [r2, #16]
 801b7ea:	3101      	adds	r1, #1
 801b7ec:	f102 0314 	add.w	r3, r2, #20
 801b7f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b7f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b7f8:	1f05      	subs	r5, r0, #4
 801b7fa:	42a3      	cmp	r3, r4
 801b7fc:	d30c      	bcc.n	801b818 <__copybits+0x36>
 801b7fe:	1aa3      	subs	r3, r4, r2
 801b800:	3b11      	subs	r3, #17
 801b802:	f023 0303 	bic.w	r3, r3, #3
 801b806:	3211      	adds	r2, #17
 801b808:	42a2      	cmp	r2, r4
 801b80a:	bf88      	it	hi
 801b80c:	2300      	movhi	r3, #0
 801b80e:	4418      	add	r0, r3
 801b810:	2300      	movs	r3, #0
 801b812:	4288      	cmp	r0, r1
 801b814:	d305      	bcc.n	801b822 <__copybits+0x40>
 801b816:	bd70      	pop	{r4, r5, r6, pc}
 801b818:	f853 6b04 	ldr.w	r6, [r3], #4
 801b81c:	f845 6f04 	str.w	r6, [r5, #4]!
 801b820:	e7eb      	b.n	801b7fa <__copybits+0x18>
 801b822:	f840 3b04 	str.w	r3, [r0], #4
 801b826:	e7f4      	b.n	801b812 <__copybits+0x30>

0801b828 <__any_on>:
 801b828:	f100 0214 	add.w	r2, r0, #20
 801b82c:	6900      	ldr	r0, [r0, #16]
 801b82e:	114b      	asrs	r3, r1, #5
 801b830:	4298      	cmp	r0, r3
 801b832:	b510      	push	{r4, lr}
 801b834:	db11      	blt.n	801b85a <__any_on+0x32>
 801b836:	dd0a      	ble.n	801b84e <__any_on+0x26>
 801b838:	f011 011f 	ands.w	r1, r1, #31
 801b83c:	d007      	beq.n	801b84e <__any_on+0x26>
 801b83e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b842:	fa24 f001 	lsr.w	r0, r4, r1
 801b846:	fa00 f101 	lsl.w	r1, r0, r1
 801b84a:	428c      	cmp	r4, r1
 801b84c:	d10b      	bne.n	801b866 <__any_on+0x3e>
 801b84e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b852:	4293      	cmp	r3, r2
 801b854:	d803      	bhi.n	801b85e <__any_on+0x36>
 801b856:	2000      	movs	r0, #0
 801b858:	bd10      	pop	{r4, pc}
 801b85a:	4603      	mov	r3, r0
 801b85c:	e7f7      	b.n	801b84e <__any_on+0x26>
 801b85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b862:	2900      	cmp	r1, #0
 801b864:	d0f5      	beq.n	801b852 <__any_on+0x2a>
 801b866:	2001      	movs	r0, #1
 801b868:	e7f6      	b.n	801b858 <__any_on+0x30>

0801b86a <__ascii_wctomb>:
 801b86a:	4603      	mov	r3, r0
 801b86c:	4608      	mov	r0, r1
 801b86e:	b141      	cbz	r1, 801b882 <__ascii_wctomb+0x18>
 801b870:	2aff      	cmp	r2, #255	@ 0xff
 801b872:	d904      	bls.n	801b87e <__ascii_wctomb+0x14>
 801b874:	228a      	movs	r2, #138	@ 0x8a
 801b876:	601a      	str	r2, [r3, #0]
 801b878:	f04f 30ff 	mov.w	r0, #4294967295
 801b87c:	4770      	bx	lr
 801b87e:	700a      	strb	r2, [r1, #0]
 801b880:	2001      	movs	r0, #1
 801b882:	4770      	bx	lr

0801b884 <__ssputs_r>:
 801b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b888:	688e      	ldr	r6, [r1, #8]
 801b88a:	461f      	mov	r7, r3
 801b88c:	42be      	cmp	r6, r7
 801b88e:	680b      	ldr	r3, [r1, #0]
 801b890:	4682      	mov	sl, r0
 801b892:	460c      	mov	r4, r1
 801b894:	4690      	mov	r8, r2
 801b896:	d82d      	bhi.n	801b8f4 <__ssputs_r+0x70>
 801b898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b89c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b8a0:	d026      	beq.n	801b8f0 <__ssputs_r+0x6c>
 801b8a2:	6965      	ldr	r5, [r4, #20]
 801b8a4:	6909      	ldr	r1, [r1, #16]
 801b8a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8aa:	eba3 0901 	sub.w	r9, r3, r1
 801b8ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b8b2:	1c7b      	adds	r3, r7, #1
 801b8b4:	444b      	add	r3, r9
 801b8b6:	106d      	asrs	r5, r5, #1
 801b8b8:	429d      	cmp	r5, r3
 801b8ba:	bf38      	it	cc
 801b8bc:	461d      	movcc	r5, r3
 801b8be:	0553      	lsls	r3, r2, #21
 801b8c0:	d527      	bpl.n	801b912 <__ssputs_r+0x8e>
 801b8c2:	4629      	mov	r1, r5
 801b8c4:	f7ff fa84 	bl	801add0 <_malloc_r>
 801b8c8:	4606      	mov	r6, r0
 801b8ca:	b360      	cbz	r0, 801b926 <__ssputs_r+0xa2>
 801b8cc:	6921      	ldr	r1, [r4, #16]
 801b8ce:	464a      	mov	r2, r9
 801b8d0:	f7fe f8d9 	bl	8019a86 <memcpy>
 801b8d4:	89a3      	ldrh	r3, [r4, #12]
 801b8d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b8da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b8de:	81a3      	strh	r3, [r4, #12]
 801b8e0:	6126      	str	r6, [r4, #16]
 801b8e2:	6165      	str	r5, [r4, #20]
 801b8e4:	444e      	add	r6, r9
 801b8e6:	eba5 0509 	sub.w	r5, r5, r9
 801b8ea:	6026      	str	r6, [r4, #0]
 801b8ec:	60a5      	str	r5, [r4, #8]
 801b8ee:	463e      	mov	r6, r7
 801b8f0:	42be      	cmp	r6, r7
 801b8f2:	d900      	bls.n	801b8f6 <__ssputs_r+0x72>
 801b8f4:	463e      	mov	r6, r7
 801b8f6:	6820      	ldr	r0, [r4, #0]
 801b8f8:	4632      	mov	r2, r6
 801b8fa:	4641      	mov	r1, r8
 801b8fc:	f000 f9c6 	bl	801bc8c <memmove>
 801b900:	68a3      	ldr	r3, [r4, #8]
 801b902:	1b9b      	subs	r3, r3, r6
 801b904:	60a3      	str	r3, [r4, #8]
 801b906:	6823      	ldr	r3, [r4, #0]
 801b908:	4433      	add	r3, r6
 801b90a:	6023      	str	r3, [r4, #0]
 801b90c:	2000      	movs	r0, #0
 801b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b912:	462a      	mov	r2, r5
 801b914:	f000 fa16 	bl	801bd44 <_realloc_r>
 801b918:	4606      	mov	r6, r0
 801b91a:	2800      	cmp	r0, #0
 801b91c:	d1e0      	bne.n	801b8e0 <__ssputs_r+0x5c>
 801b91e:	6921      	ldr	r1, [r4, #16]
 801b920:	4650      	mov	r0, sl
 801b922:	f7fe fea7 	bl	801a674 <_free_r>
 801b926:	230c      	movs	r3, #12
 801b928:	f8ca 3000 	str.w	r3, [sl]
 801b92c:	89a3      	ldrh	r3, [r4, #12]
 801b92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b932:	81a3      	strh	r3, [r4, #12]
 801b934:	f04f 30ff 	mov.w	r0, #4294967295
 801b938:	e7e9      	b.n	801b90e <__ssputs_r+0x8a>
	...

0801b93c <_svfiprintf_r>:
 801b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b940:	4698      	mov	r8, r3
 801b942:	898b      	ldrh	r3, [r1, #12]
 801b944:	061b      	lsls	r3, r3, #24
 801b946:	b09d      	sub	sp, #116	@ 0x74
 801b948:	4607      	mov	r7, r0
 801b94a:	460d      	mov	r5, r1
 801b94c:	4614      	mov	r4, r2
 801b94e:	d510      	bpl.n	801b972 <_svfiprintf_r+0x36>
 801b950:	690b      	ldr	r3, [r1, #16]
 801b952:	b973      	cbnz	r3, 801b972 <_svfiprintf_r+0x36>
 801b954:	2140      	movs	r1, #64	@ 0x40
 801b956:	f7ff fa3b 	bl	801add0 <_malloc_r>
 801b95a:	6028      	str	r0, [r5, #0]
 801b95c:	6128      	str	r0, [r5, #16]
 801b95e:	b930      	cbnz	r0, 801b96e <_svfiprintf_r+0x32>
 801b960:	230c      	movs	r3, #12
 801b962:	603b      	str	r3, [r7, #0]
 801b964:	f04f 30ff 	mov.w	r0, #4294967295
 801b968:	b01d      	add	sp, #116	@ 0x74
 801b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b96e:	2340      	movs	r3, #64	@ 0x40
 801b970:	616b      	str	r3, [r5, #20]
 801b972:	2300      	movs	r3, #0
 801b974:	9309      	str	r3, [sp, #36]	@ 0x24
 801b976:	2320      	movs	r3, #32
 801b978:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b97c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b980:	2330      	movs	r3, #48	@ 0x30
 801b982:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801bb20 <_svfiprintf_r+0x1e4>
 801b986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b98a:	f04f 0901 	mov.w	r9, #1
 801b98e:	4623      	mov	r3, r4
 801b990:	469a      	mov	sl, r3
 801b992:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b996:	b10a      	cbz	r2, 801b99c <_svfiprintf_r+0x60>
 801b998:	2a25      	cmp	r2, #37	@ 0x25
 801b99a:	d1f9      	bne.n	801b990 <_svfiprintf_r+0x54>
 801b99c:	ebba 0b04 	subs.w	fp, sl, r4
 801b9a0:	d00b      	beq.n	801b9ba <_svfiprintf_r+0x7e>
 801b9a2:	465b      	mov	r3, fp
 801b9a4:	4622      	mov	r2, r4
 801b9a6:	4629      	mov	r1, r5
 801b9a8:	4638      	mov	r0, r7
 801b9aa:	f7ff ff6b 	bl	801b884 <__ssputs_r>
 801b9ae:	3001      	adds	r0, #1
 801b9b0:	f000 80a7 	beq.w	801bb02 <_svfiprintf_r+0x1c6>
 801b9b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b9b6:	445a      	add	r2, fp
 801b9b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b9ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	f000 809f 	beq.w	801bb02 <_svfiprintf_r+0x1c6>
 801b9c4:	2300      	movs	r3, #0
 801b9c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b9ce:	f10a 0a01 	add.w	sl, sl, #1
 801b9d2:	9304      	str	r3, [sp, #16]
 801b9d4:	9307      	str	r3, [sp, #28]
 801b9d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b9da:	931a      	str	r3, [sp, #104]	@ 0x68
 801b9dc:	4654      	mov	r4, sl
 801b9de:	2205      	movs	r2, #5
 801b9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9e4:	484e      	ldr	r0, [pc, #312]	@ (801bb20 <_svfiprintf_r+0x1e4>)
 801b9e6:	f7e4 fca3 	bl	8000330 <memchr>
 801b9ea:	9a04      	ldr	r2, [sp, #16]
 801b9ec:	b9d8      	cbnz	r0, 801ba26 <_svfiprintf_r+0xea>
 801b9ee:	06d0      	lsls	r0, r2, #27
 801b9f0:	bf44      	itt	mi
 801b9f2:	2320      	movmi	r3, #32
 801b9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b9f8:	0711      	lsls	r1, r2, #28
 801b9fa:	bf44      	itt	mi
 801b9fc:	232b      	movmi	r3, #43	@ 0x2b
 801b9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ba02:	f89a 3000 	ldrb.w	r3, [sl]
 801ba06:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba08:	d015      	beq.n	801ba36 <_svfiprintf_r+0xfa>
 801ba0a:	9a07      	ldr	r2, [sp, #28]
 801ba0c:	4654      	mov	r4, sl
 801ba0e:	2000      	movs	r0, #0
 801ba10:	f04f 0c0a 	mov.w	ip, #10
 801ba14:	4621      	mov	r1, r4
 801ba16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba1a:	3b30      	subs	r3, #48	@ 0x30
 801ba1c:	2b09      	cmp	r3, #9
 801ba1e:	d94b      	bls.n	801bab8 <_svfiprintf_r+0x17c>
 801ba20:	b1b0      	cbz	r0, 801ba50 <_svfiprintf_r+0x114>
 801ba22:	9207      	str	r2, [sp, #28]
 801ba24:	e014      	b.n	801ba50 <_svfiprintf_r+0x114>
 801ba26:	eba0 0308 	sub.w	r3, r0, r8
 801ba2a:	fa09 f303 	lsl.w	r3, r9, r3
 801ba2e:	4313      	orrs	r3, r2
 801ba30:	9304      	str	r3, [sp, #16]
 801ba32:	46a2      	mov	sl, r4
 801ba34:	e7d2      	b.n	801b9dc <_svfiprintf_r+0xa0>
 801ba36:	9b03      	ldr	r3, [sp, #12]
 801ba38:	1d19      	adds	r1, r3, #4
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	9103      	str	r1, [sp, #12]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	bfbb      	ittet	lt
 801ba42:	425b      	neglt	r3, r3
 801ba44:	f042 0202 	orrlt.w	r2, r2, #2
 801ba48:	9307      	strge	r3, [sp, #28]
 801ba4a:	9307      	strlt	r3, [sp, #28]
 801ba4c:	bfb8      	it	lt
 801ba4e:	9204      	strlt	r2, [sp, #16]
 801ba50:	7823      	ldrb	r3, [r4, #0]
 801ba52:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba54:	d10a      	bne.n	801ba6c <_svfiprintf_r+0x130>
 801ba56:	7863      	ldrb	r3, [r4, #1]
 801ba58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ba5a:	d132      	bne.n	801bac2 <_svfiprintf_r+0x186>
 801ba5c:	9b03      	ldr	r3, [sp, #12]
 801ba5e:	1d1a      	adds	r2, r3, #4
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	9203      	str	r2, [sp, #12]
 801ba64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ba68:	3402      	adds	r4, #2
 801ba6a:	9305      	str	r3, [sp, #20]
 801ba6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801bb30 <_svfiprintf_r+0x1f4>
 801ba70:	7821      	ldrb	r1, [r4, #0]
 801ba72:	2203      	movs	r2, #3
 801ba74:	4650      	mov	r0, sl
 801ba76:	f7e4 fc5b 	bl	8000330 <memchr>
 801ba7a:	b138      	cbz	r0, 801ba8c <_svfiprintf_r+0x150>
 801ba7c:	9b04      	ldr	r3, [sp, #16]
 801ba7e:	eba0 000a 	sub.w	r0, r0, sl
 801ba82:	2240      	movs	r2, #64	@ 0x40
 801ba84:	4082      	lsls	r2, r0
 801ba86:	4313      	orrs	r3, r2
 801ba88:	3401      	adds	r4, #1
 801ba8a:	9304      	str	r3, [sp, #16]
 801ba8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba90:	4824      	ldr	r0, [pc, #144]	@ (801bb24 <_svfiprintf_r+0x1e8>)
 801ba92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ba96:	2206      	movs	r2, #6
 801ba98:	f7e4 fc4a 	bl	8000330 <memchr>
 801ba9c:	2800      	cmp	r0, #0
 801ba9e:	d036      	beq.n	801bb0e <_svfiprintf_r+0x1d2>
 801baa0:	4b21      	ldr	r3, [pc, #132]	@ (801bb28 <_svfiprintf_r+0x1ec>)
 801baa2:	bb1b      	cbnz	r3, 801baec <_svfiprintf_r+0x1b0>
 801baa4:	9b03      	ldr	r3, [sp, #12]
 801baa6:	3307      	adds	r3, #7
 801baa8:	f023 0307 	bic.w	r3, r3, #7
 801baac:	3308      	adds	r3, #8
 801baae:	9303      	str	r3, [sp, #12]
 801bab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bab2:	4433      	add	r3, r6
 801bab4:	9309      	str	r3, [sp, #36]	@ 0x24
 801bab6:	e76a      	b.n	801b98e <_svfiprintf_r+0x52>
 801bab8:	fb0c 3202 	mla	r2, ip, r2, r3
 801babc:	460c      	mov	r4, r1
 801babe:	2001      	movs	r0, #1
 801bac0:	e7a8      	b.n	801ba14 <_svfiprintf_r+0xd8>
 801bac2:	2300      	movs	r3, #0
 801bac4:	3401      	adds	r4, #1
 801bac6:	9305      	str	r3, [sp, #20]
 801bac8:	4619      	mov	r1, r3
 801baca:	f04f 0c0a 	mov.w	ip, #10
 801bace:	4620      	mov	r0, r4
 801bad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bad4:	3a30      	subs	r2, #48	@ 0x30
 801bad6:	2a09      	cmp	r2, #9
 801bad8:	d903      	bls.n	801bae2 <_svfiprintf_r+0x1a6>
 801bada:	2b00      	cmp	r3, #0
 801badc:	d0c6      	beq.n	801ba6c <_svfiprintf_r+0x130>
 801bade:	9105      	str	r1, [sp, #20]
 801bae0:	e7c4      	b.n	801ba6c <_svfiprintf_r+0x130>
 801bae2:	fb0c 2101 	mla	r1, ip, r1, r2
 801bae6:	4604      	mov	r4, r0
 801bae8:	2301      	movs	r3, #1
 801baea:	e7f0      	b.n	801bace <_svfiprintf_r+0x192>
 801baec:	ab03      	add	r3, sp, #12
 801baee:	9300      	str	r3, [sp, #0]
 801baf0:	462a      	mov	r2, r5
 801baf2:	4b0e      	ldr	r3, [pc, #56]	@ (801bb2c <_svfiprintf_r+0x1f0>)
 801baf4:	a904      	add	r1, sp, #16
 801baf6:	4638      	mov	r0, r7
 801baf8:	f7fd fa5a 	bl	8018fb0 <_printf_float>
 801bafc:	1c42      	adds	r2, r0, #1
 801bafe:	4606      	mov	r6, r0
 801bb00:	d1d6      	bne.n	801bab0 <_svfiprintf_r+0x174>
 801bb02:	89ab      	ldrh	r3, [r5, #12]
 801bb04:	065b      	lsls	r3, r3, #25
 801bb06:	f53f af2d 	bmi.w	801b964 <_svfiprintf_r+0x28>
 801bb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb0c:	e72c      	b.n	801b968 <_svfiprintf_r+0x2c>
 801bb0e:	ab03      	add	r3, sp, #12
 801bb10:	9300      	str	r3, [sp, #0]
 801bb12:	462a      	mov	r2, r5
 801bb14:	4b05      	ldr	r3, [pc, #20]	@ (801bb2c <_svfiprintf_r+0x1f0>)
 801bb16:	a904      	add	r1, sp, #16
 801bb18:	4638      	mov	r0, r7
 801bb1a:	f7fd fcd1 	bl	80194c0 <_printf_i>
 801bb1e:	e7ed      	b.n	801bafc <_svfiprintf_r+0x1c0>
 801bb20:	0801dbc0 	.word	0x0801dbc0
 801bb24:	0801dbca 	.word	0x0801dbca
 801bb28:	08018fb1 	.word	0x08018fb1
 801bb2c:	0801b885 	.word	0x0801b885
 801bb30:	0801dbc6 	.word	0x0801dbc6

0801bb34 <__sflush_r>:
 801bb34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb3c:	0716      	lsls	r6, r2, #28
 801bb3e:	4605      	mov	r5, r0
 801bb40:	460c      	mov	r4, r1
 801bb42:	d454      	bmi.n	801bbee <__sflush_r+0xba>
 801bb44:	684b      	ldr	r3, [r1, #4]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	dc02      	bgt.n	801bb50 <__sflush_r+0x1c>
 801bb4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	dd48      	ble.n	801bbe2 <__sflush_r+0xae>
 801bb50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb52:	2e00      	cmp	r6, #0
 801bb54:	d045      	beq.n	801bbe2 <__sflush_r+0xae>
 801bb56:	2300      	movs	r3, #0
 801bb58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bb5c:	682f      	ldr	r7, [r5, #0]
 801bb5e:	6a21      	ldr	r1, [r4, #32]
 801bb60:	602b      	str	r3, [r5, #0]
 801bb62:	d030      	beq.n	801bbc6 <__sflush_r+0x92>
 801bb64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bb66:	89a3      	ldrh	r3, [r4, #12]
 801bb68:	0759      	lsls	r1, r3, #29
 801bb6a:	d505      	bpl.n	801bb78 <__sflush_r+0x44>
 801bb6c:	6863      	ldr	r3, [r4, #4]
 801bb6e:	1ad2      	subs	r2, r2, r3
 801bb70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801bb72:	b10b      	cbz	r3, 801bb78 <__sflush_r+0x44>
 801bb74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bb76:	1ad2      	subs	r2, r2, r3
 801bb78:	2300      	movs	r3, #0
 801bb7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bb7c:	6a21      	ldr	r1, [r4, #32]
 801bb7e:	4628      	mov	r0, r5
 801bb80:	47b0      	blx	r6
 801bb82:	1c43      	adds	r3, r0, #1
 801bb84:	89a3      	ldrh	r3, [r4, #12]
 801bb86:	d106      	bne.n	801bb96 <__sflush_r+0x62>
 801bb88:	6829      	ldr	r1, [r5, #0]
 801bb8a:	291d      	cmp	r1, #29
 801bb8c:	d82b      	bhi.n	801bbe6 <__sflush_r+0xb2>
 801bb8e:	4a2a      	ldr	r2, [pc, #168]	@ (801bc38 <__sflush_r+0x104>)
 801bb90:	410a      	asrs	r2, r1
 801bb92:	07d6      	lsls	r6, r2, #31
 801bb94:	d427      	bmi.n	801bbe6 <__sflush_r+0xb2>
 801bb96:	2200      	movs	r2, #0
 801bb98:	6062      	str	r2, [r4, #4]
 801bb9a:	04d9      	lsls	r1, r3, #19
 801bb9c:	6922      	ldr	r2, [r4, #16]
 801bb9e:	6022      	str	r2, [r4, #0]
 801bba0:	d504      	bpl.n	801bbac <__sflush_r+0x78>
 801bba2:	1c42      	adds	r2, r0, #1
 801bba4:	d101      	bne.n	801bbaa <__sflush_r+0x76>
 801bba6:	682b      	ldr	r3, [r5, #0]
 801bba8:	b903      	cbnz	r3, 801bbac <__sflush_r+0x78>
 801bbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 801bbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bbae:	602f      	str	r7, [r5, #0]
 801bbb0:	b1b9      	cbz	r1, 801bbe2 <__sflush_r+0xae>
 801bbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bbb6:	4299      	cmp	r1, r3
 801bbb8:	d002      	beq.n	801bbc0 <__sflush_r+0x8c>
 801bbba:	4628      	mov	r0, r5
 801bbbc:	f7fe fd5a 	bl	801a674 <_free_r>
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 801bbc4:	e00d      	b.n	801bbe2 <__sflush_r+0xae>
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	4628      	mov	r0, r5
 801bbca:	47b0      	blx	r6
 801bbcc:	4602      	mov	r2, r0
 801bbce:	1c50      	adds	r0, r2, #1
 801bbd0:	d1c9      	bne.n	801bb66 <__sflush_r+0x32>
 801bbd2:	682b      	ldr	r3, [r5, #0]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d0c6      	beq.n	801bb66 <__sflush_r+0x32>
 801bbd8:	2b1d      	cmp	r3, #29
 801bbda:	d001      	beq.n	801bbe0 <__sflush_r+0xac>
 801bbdc:	2b16      	cmp	r3, #22
 801bbde:	d11e      	bne.n	801bc1e <__sflush_r+0xea>
 801bbe0:	602f      	str	r7, [r5, #0]
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	e022      	b.n	801bc2c <__sflush_r+0xf8>
 801bbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bbea:	b21b      	sxth	r3, r3
 801bbec:	e01b      	b.n	801bc26 <__sflush_r+0xf2>
 801bbee:	690f      	ldr	r7, [r1, #16]
 801bbf0:	2f00      	cmp	r7, #0
 801bbf2:	d0f6      	beq.n	801bbe2 <__sflush_r+0xae>
 801bbf4:	0793      	lsls	r3, r2, #30
 801bbf6:	680e      	ldr	r6, [r1, #0]
 801bbf8:	bf08      	it	eq
 801bbfa:	694b      	ldreq	r3, [r1, #20]
 801bbfc:	600f      	str	r7, [r1, #0]
 801bbfe:	bf18      	it	ne
 801bc00:	2300      	movne	r3, #0
 801bc02:	eba6 0807 	sub.w	r8, r6, r7
 801bc06:	608b      	str	r3, [r1, #8]
 801bc08:	f1b8 0f00 	cmp.w	r8, #0
 801bc0c:	dde9      	ble.n	801bbe2 <__sflush_r+0xae>
 801bc0e:	6a21      	ldr	r1, [r4, #32]
 801bc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bc12:	4643      	mov	r3, r8
 801bc14:	463a      	mov	r2, r7
 801bc16:	4628      	mov	r0, r5
 801bc18:	47b0      	blx	r6
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	dc08      	bgt.n	801bc30 <__sflush_r+0xfc>
 801bc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc26:	81a3      	strh	r3, [r4, #12]
 801bc28:	f04f 30ff 	mov.w	r0, #4294967295
 801bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc30:	4407      	add	r7, r0
 801bc32:	eba8 0800 	sub.w	r8, r8, r0
 801bc36:	e7e7      	b.n	801bc08 <__sflush_r+0xd4>
 801bc38:	dfbffffe 	.word	0xdfbffffe

0801bc3c <_fflush_r>:
 801bc3c:	b538      	push	{r3, r4, r5, lr}
 801bc3e:	690b      	ldr	r3, [r1, #16]
 801bc40:	4605      	mov	r5, r0
 801bc42:	460c      	mov	r4, r1
 801bc44:	b913      	cbnz	r3, 801bc4c <_fflush_r+0x10>
 801bc46:	2500      	movs	r5, #0
 801bc48:	4628      	mov	r0, r5
 801bc4a:	bd38      	pop	{r3, r4, r5, pc}
 801bc4c:	b118      	cbz	r0, 801bc56 <_fflush_r+0x1a>
 801bc4e:	6a03      	ldr	r3, [r0, #32]
 801bc50:	b90b      	cbnz	r3, 801bc56 <_fflush_r+0x1a>
 801bc52:	f7fd fde1 	bl	8019818 <__sinit>
 801bc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d0f3      	beq.n	801bc46 <_fflush_r+0xa>
 801bc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bc60:	07d0      	lsls	r0, r2, #31
 801bc62:	d404      	bmi.n	801bc6e <_fflush_r+0x32>
 801bc64:	0599      	lsls	r1, r3, #22
 801bc66:	d402      	bmi.n	801bc6e <_fflush_r+0x32>
 801bc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc6a:	f7fd ff0a 	bl	8019a82 <__retarget_lock_acquire_recursive>
 801bc6e:	4628      	mov	r0, r5
 801bc70:	4621      	mov	r1, r4
 801bc72:	f7ff ff5f 	bl	801bb34 <__sflush_r>
 801bc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bc78:	07da      	lsls	r2, r3, #31
 801bc7a:	4605      	mov	r5, r0
 801bc7c:	d4e4      	bmi.n	801bc48 <_fflush_r+0xc>
 801bc7e:	89a3      	ldrh	r3, [r4, #12]
 801bc80:	059b      	lsls	r3, r3, #22
 801bc82:	d4e1      	bmi.n	801bc48 <_fflush_r+0xc>
 801bc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc86:	f7fd fefd 	bl	8019a84 <__retarget_lock_release_recursive>
 801bc8a:	e7dd      	b.n	801bc48 <_fflush_r+0xc>

0801bc8c <memmove>:
 801bc8c:	4288      	cmp	r0, r1
 801bc8e:	b510      	push	{r4, lr}
 801bc90:	eb01 0402 	add.w	r4, r1, r2
 801bc94:	d902      	bls.n	801bc9c <memmove+0x10>
 801bc96:	4284      	cmp	r4, r0
 801bc98:	4623      	mov	r3, r4
 801bc9a:	d807      	bhi.n	801bcac <memmove+0x20>
 801bc9c:	1e43      	subs	r3, r0, #1
 801bc9e:	42a1      	cmp	r1, r4
 801bca0:	d008      	beq.n	801bcb4 <memmove+0x28>
 801bca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcaa:	e7f8      	b.n	801bc9e <memmove+0x12>
 801bcac:	4402      	add	r2, r0
 801bcae:	4601      	mov	r1, r0
 801bcb0:	428a      	cmp	r2, r1
 801bcb2:	d100      	bne.n	801bcb6 <memmove+0x2a>
 801bcb4:	bd10      	pop	{r4, pc}
 801bcb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bcba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bcbe:	e7f7      	b.n	801bcb0 <memmove+0x24>

0801bcc0 <_sbrk_r>:
 801bcc0:	b538      	push	{r3, r4, r5, lr}
 801bcc2:	4d06      	ldr	r5, [pc, #24]	@ (801bcdc <_sbrk_r+0x1c>)
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	4604      	mov	r4, r0
 801bcc8:	4608      	mov	r0, r1
 801bcca:	602b      	str	r3, [r5, #0]
 801bccc:	f7e7 f874 	bl	8002db8 <_sbrk>
 801bcd0:	1c43      	adds	r3, r0, #1
 801bcd2:	d102      	bne.n	801bcda <_sbrk_r+0x1a>
 801bcd4:	682b      	ldr	r3, [r5, #0]
 801bcd6:	b103      	cbz	r3, 801bcda <_sbrk_r+0x1a>
 801bcd8:	6023      	str	r3, [r4, #0]
 801bcda:	bd38      	pop	{r3, r4, r5, pc}
 801bcdc:	2400635c 	.word	0x2400635c

0801bce0 <__assert_func>:
 801bce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bce2:	4614      	mov	r4, r2
 801bce4:	461a      	mov	r2, r3
 801bce6:	4b09      	ldr	r3, [pc, #36]	@ (801bd0c <__assert_func+0x2c>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	4605      	mov	r5, r0
 801bcec:	68d8      	ldr	r0, [r3, #12]
 801bcee:	b954      	cbnz	r4, 801bd06 <__assert_func+0x26>
 801bcf0:	4b07      	ldr	r3, [pc, #28]	@ (801bd10 <__assert_func+0x30>)
 801bcf2:	461c      	mov	r4, r3
 801bcf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bcf8:	9100      	str	r1, [sp, #0]
 801bcfa:	462b      	mov	r3, r5
 801bcfc:	4905      	ldr	r1, [pc, #20]	@ (801bd14 <__assert_func+0x34>)
 801bcfe:	f000 f84f 	bl	801bda0 <fiprintf>
 801bd02:	f000 f85f 	bl	801bdc4 <abort>
 801bd06:	4b04      	ldr	r3, [pc, #16]	@ (801bd18 <__assert_func+0x38>)
 801bd08:	e7f4      	b.n	801bcf4 <__assert_func+0x14>
 801bd0a:	bf00      	nop
 801bd0c:	2400027c 	.word	0x2400027c
 801bd10:	0801dc0c 	.word	0x0801dc0c
 801bd14:	0801dbde 	.word	0x0801dbde
 801bd18:	0801dbd1 	.word	0x0801dbd1

0801bd1c <_calloc_r>:
 801bd1c:	b570      	push	{r4, r5, r6, lr}
 801bd1e:	fba1 5402 	umull	r5, r4, r1, r2
 801bd22:	b93c      	cbnz	r4, 801bd34 <_calloc_r+0x18>
 801bd24:	4629      	mov	r1, r5
 801bd26:	f7ff f853 	bl	801add0 <_malloc_r>
 801bd2a:	4606      	mov	r6, r0
 801bd2c:	b928      	cbnz	r0, 801bd3a <_calloc_r+0x1e>
 801bd2e:	2600      	movs	r6, #0
 801bd30:	4630      	mov	r0, r6
 801bd32:	bd70      	pop	{r4, r5, r6, pc}
 801bd34:	220c      	movs	r2, #12
 801bd36:	6002      	str	r2, [r0, #0]
 801bd38:	e7f9      	b.n	801bd2e <_calloc_r+0x12>
 801bd3a:	462a      	mov	r2, r5
 801bd3c:	4621      	mov	r1, r4
 801bd3e:	f7fd fe04 	bl	801994a <memset>
 801bd42:	e7f5      	b.n	801bd30 <_calloc_r+0x14>

0801bd44 <_realloc_r>:
 801bd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd48:	4680      	mov	r8, r0
 801bd4a:	4615      	mov	r5, r2
 801bd4c:	460c      	mov	r4, r1
 801bd4e:	b921      	cbnz	r1, 801bd5a <_realloc_r+0x16>
 801bd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd54:	4611      	mov	r1, r2
 801bd56:	f7ff b83b 	b.w	801add0 <_malloc_r>
 801bd5a:	b92a      	cbnz	r2, 801bd68 <_realloc_r+0x24>
 801bd5c:	f7fe fc8a 	bl	801a674 <_free_r>
 801bd60:	2400      	movs	r4, #0
 801bd62:	4620      	mov	r0, r4
 801bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd68:	f000 f833 	bl	801bdd2 <_malloc_usable_size_r>
 801bd6c:	4285      	cmp	r5, r0
 801bd6e:	4606      	mov	r6, r0
 801bd70:	d802      	bhi.n	801bd78 <_realloc_r+0x34>
 801bd72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bd76:	d8f4      	bhi.n	801bd62 <_realloc_r+0x1e>
 801bd78:	4629      	mov	r1, r5
 801bd7a:	4640      	mov	r0, r8
 801bd7c:	f7ff f828 	bl	801add0 <_malloc_r>
 801bd80:	4607      	mov	r7, r0
 801bd82:	2800      	cmp	r0, #0
 801bd84:	d0ec      	beq.n	801bd60 <_realloc_r+0x1c>
 801bd86:	42b5      	cmp	r5, r6
 801bd88:	462a      	mov	r2, r5
 801bd8a:	4621      	mov	r1, r4
 801bd8c:	bf28      	it	cs
 801bd8e:	4632      	movcs	r2, r6
 801bd90:	f7fd fe79 	bl	8019a86 <memcpy>
 801bd94:	4621      	mov	r1, r4
 801bd96:	4640      	mov	r0, r8
 801bd98:	f7fe fc6c 	bl	801a674 <_free_r>
 801bd9c:	463c      	mov	r4, r7
 801bd9e:	e7e0      	b.n	801bd62 <_realloc_r+0x1e>

0801bda0 <fiprintf>:
 801bda0:	b40e      	push	{r1, r2, r3}
 801bda2:	b503      	push	{r0, r1, lr}
 801bda4:	4601      	mov	r1, r0
 801bda6:	ab03      	add	r3, sp, #12
 801bda8:	4805      	ldr	r0, [pc, #20]	@ (801bdc0 <fiprintf+0x20>)
 801bdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdae:	6800      	ldr	r0, [r0, #0]
 801bdb0:	9301      	str	r3, [sp, #4]
 801bdb2:	f000 f83f 	bl	801be34 <_vfiprintf_r>
 801bdb6:	b002      	add	sp, #8
 801bdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bdbc:	b003      	add	sp, #12
 801bdbe:	4770      	bx	lr
 801bdc0:	2400027c 	.word	0x2400027c

0801bdc4 <abort>:
 801bdc4:	b508      	push	{r3, lr}
 801bdc6:	2006      	movs	r0, #6
 801bdc8:	f000 fa08 	bl	801c1dc <raise>
 801bdcc:	2001      	movs	r0, #1
 801bdce:	f7e6 ff7b 	bl	8002cc8 <_exit>

0801bdd2 <_malloc_usable_size_r>:
 801bdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bdd6:	1f18      	subs	r0, r3, #4
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	bfbc      	itt	lt
 801bddc:	580b      	ldrlt	r3, [r1, r0]
 801bdde:	18c0      	addlt	r0, r0, r3
 801bde0:	4770      	bx	lr

0801bde2 <__sfputc_r>:
 801bde2:	6893      	ldr	r3, [r2, #8]
 801bde4:	3b01      	subs	r3, #1
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	b410      	push	{r4}
 801bdea:	6093      	str	r3, [r2, #8]
 801bdec:	da08      	bge.n	801be00 <__sfputc_r+0x1e>
 801bdee:	6994      	ldr	r4, [r2, #24]
 801bdf0:	42a3      	cmp	r3, r4
 801bdf2:	db01      	blt.n	801bdf8 <__sfputc_r+0x16>
 801bdf4:	290a      	cmp	r1, #10
 801bdf6:	d103      	bne.n	801be00 <__sfputc_r+0x1e>
 801bdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdfc:	f000 b932 	b.w	801c064 <__swbuf_r>
 801be00:	6813      	ldr	r3, [r2, #0]
 801be02:	1c58      	adds	r0, r3, #1
 801be04:	6010      	str	r0, [r2, #0]
 801be06:	7019      	strb	r1, [r3, #0]
 801be08:	4608      	mov	r0, r1
 801be0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be0e:	4770      	bx	lr

0801be10 <__sfputs_r>:
 801be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be12:	4606      	mov	r6, r0
 801be14:	460f      	mov	r7, r1
 801be16:	4614      	mov	r4, r2
 801be18:	18d5      	adds	r5, r2, r3
 801be1a:	42ac      	cmp	r4, r5
 801be1c:	d101      	bne.n	801be22 <__sfputs_r+0x12>
 801be1e:	2000      	movs	r0, #0
 801be20:	e007      	b.n	801be32 <__sfputs_r+0x22>
 801be22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be26:	463a      	mov	r2, r7
 801be28:	4630      	mov	r0, r6
 801be2a:	f7ff ffda 	bl	801bde2 <__sfputc_r>
 801be2e:	1c43      	adds	r3, r0, #1
 801be30:	d1f3      	bne.n	801be1a <__sfputs_r+0xa>
 801be32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801be34 <_vfiprintf_r>:
 801be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be38:	460d      	mov	r5, r1
 801be3a:	b09d      	sub	sp, #116	@ 0x74
 801be3c:	4614      	mov	r4, r2
 801be3e:	4698      	mov	r8, r3
 801be40:	4606      	mov	r6, r0
 801be42:	b118      	cbz	r0, 801be4c <_vfiprintf_r+0x18>
 801be44:	6a03      	ldr	r3, [r0, #32]
 801be46:	b90b      	cbnz	r3, 801be4c <_vfiprintf_r+0x18>
 801be48:	f7fd fce6 	bl	8019818 <__sinit>
 801be4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be4e:	07d9      	lsls	r1, r3, #31
 801be50:	d405      	bmi.n	801be5e <_vfiprintf_r+0x2a>
 801be52:	89ab      	ldrh	r3, [r5, #12]
 801be54:	059a      	lsls	r2, r3, #22
 801be56:	d402      	bmi.n	801be5e <_vfiprintf_r+0x2a>
 801be58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be5a:	f7fd fe12 	bl	8019a82 <__retarget_lock_acquire_recursive>
 801be5e:	89ab      	ldrh	r3, [r5, #12]
 801be60:	071b      	lsls	r3, r3, #28
 801be62:	d501      	bpl.n	801be68 <_vfiprintf_r+0x34>
 801be64:	692b      	ldr	r3, [r5, #16]
 801be66:	b99b      	cbnz	r3, 801be90 <_vfiprintf_r+0x5c>
 801be68:	4629      	mov	r1, r5
 801be6a:	4630      	mov	r0, r6
 801be6c:	f000 f938 	bl	801c0e0 <__swsetup_r>
 801be70:	b170      	cbz	r0, 801be90 <_vfiprintf_r+0x5c>
 801be72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be74:	07dc      	lsls	r4, r3, #31
 801be76:	d504      	bpl.n	801be82 <_vfiprintf_r+0x4e>
 801be78:	f04f 30ff 	mov.w	r0, #4294967295
 801be7c:	b01d      	add	sp, #116	@ 0x74
 801be7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be82:	89ab      	ldrh	r3, [r5, #12]
 801be84:	0598      	lsls	r0, r3, #22
 801be86:	d4f7      	bmi.n	801be78 <_vfiprintf_r+0x44>
 801be88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be8a:	f7fd fdfb 	bl	8019a84 <__retarget_lock_release_recursive>
 801be8e:	e7f3      	b.n	801be78 <_vfiprintf_r+0x44>
 801be90:	2300      	movs	r3, #0
 801be92:	9309      	str	r3, [sp, #36]	@ 0x24
 801be94:	2320      	movs	r3, #32
 801be96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801be9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801be9e:	2330      	movs	r3, #48	@ 0x30
 801bea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c050 <_vfiprintf_r+0x21c>
 801bea4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bea8:	f04f 0901 	mov.w	r9, #1
 801beac:	4623      	mov	r3, r4
 801beae:	469a      	mov	sl, r3
 801beb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801beb4:	b10a      	cbz	r2, 801beba <_vfiprintf_r+0x86>
 801beb6:	2a25      	cmp	r2, #37	@ 0x25
 801beb8:	d1f9      	bne.n	801beae <_vfiprintf_r+0x7a>
 801beba:	ebba 0b04 	subs.w	fp, sl, r4
 801bebe:	d00b      	beq.n	801bed8 <_vfiprintf_r+0xa4>
 801bec0:	465b      	mov	r3, fp
 801bec2:	4622      	mov	r2, r4
 801bec4:	4629      	mov	r1, r5
 801bec6:	4630      	mov	r0, r6
 801bec8:	f7ff ffa2 	bl	801be10 <__sfputs_r>
 801becc:	3001      	adds	r0, #1
 801bece:	f000 80a7 	beq.w	801c020 <_vfiprintf_r+0x1ec>
 801bed2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bed4:	445a      	add	r2, fp
 801bed6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bed8:	f89a 3000 	ldrb.w	r3, [sl]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	f000 809f 	beq.w	801c020 <_vfiprintf_r+0x1ec>
 801bee2:	2300      	movs	r3, #0
 801bee4:	f04f 32ff 	mov.w	r2, #4294967295
 801bee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801beec:	f10a 0a01 	add.w	sl, sl, #1
 801bef0:	9304      	str	r3, [sp, #16]
 801bef2:	9307      	str	r3, [sp, #28]
 801bef4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bef8:	931a      	str	r3, [sp, #104]	@ 0x68
 801befa:	4654      	mov	r4, sl
 801befc:	2205      	movs	r2, #5
 801befe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf02:	4853      	ldr	r0, [pc, #332]	@ (801c050 <_vfiprintf_r+0x21c>)
 801bf04:	f7e4 fa14 	bl	8000330 <memchr>
 801bf08:	9a04      	ldr	r2, [sp, #16]
 801bf0a:	b9d8      	cbnz	r0, 801bf44 <_vfiprintf_r+0x110>
 801bf0c:	06d1      	lsls	r1, r2, #27
 801bf0e:	bf44      	itt	mi
 801bf10:	2320      	movmi	r3, #32
 801bf12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bf16:	0713      	lsls	r3, r2, #28
 801bf18:	bf44      	itt	mi
 801bf1a:	232b      	movmi	r3, #43	@ 0x2b
 801bf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bf20:	f89a 3000 	ldrb.w	r3, [sl]
 801bf24:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf26:	d015      	beq.n	801bf54 <_vfiprintf_r+0x120>
 801bf28:	9a07      	ldr	r2, [sp, #28]
 801bf2a:	4654      	mov	r4, sl
 801bf2c:	2000      	movs	r0, #0
 801bf2e:	f04f 0c0a 	mov.w	ip, #10
 801bf32:	4621      	mov	r1, r4
 801bf34:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf38:	3b30      	subs	r3, #48	@ 0x30
 801bf3a:	2b09      	cmp	r3, #9
 801bf3c:	d94b      	bls.n	801bfd6 <_vfiprintf_r+0x1a2>
 801bf3e:	b1b0      	cbz	r0, 801bf6e <_vfiprintf_r+0x13a>
 801bf40:	9207      	str	r2, [sp, #28]
 801bf42:	e014      	b.n	801bf6e <_vfiprintf_r+0x13a>
 801bf44:	eba0 0308 	sub.w	r3, r0, r8
 801bf48:	fa09 f303 	lsl.w	r3, r9, r3
 801bf4c:	4313      	orrs	r3, r2
 801bf4e:	9304      	str	r3, [sp, #16]
 801bf50:	46a2      	mov	sl, r4
 801bf52:	e7d2      	b.n	801befa <_vfiprintf_r+0xc6>
 801bf54:	9b03      	ldr	r3, [sp, #12]
 801bf56:	1d19      	adds	r1, r3, #4
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	9103      	str	r1, [sp, #12]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	bfbb      	ittet	lt
 801bf60:	425b      	neglt	r3, r3
 801bf62:	f042 0202 	orrlt.w	r2, r2, #2
 801bf66:	9307      	strge	r3, [sp, #28]
 801bf68:	9307      	strlt	r3, [sp, #28]
 801bf6a:	bfb8      	it	lt
 801bf6c:	9204      	strlt	r2, [sp, #16]
 801bf6e:	7823      	ldrb	r3, [r4, #0]
 801bf70:	2b2e      	cmp	r3, #46	@ 0x2e
 801bf72:	d10a      	bne.n	801bf8a <_vfiprintf_r+0x156>
 801bf74:	7863      	ldrb	r3, [r4, #1]
 801bf76:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf78:	d132      	bne.n	801bfe0 <_vfiprintf_r+0x1ac>
 801bf7a:	9b03      	ldr	r3, [sp, #12]
 801bf7c:	1d1a      	adds	r2, r3, #4
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	9203      	str	r2, [sp, #12]
 801bf82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bf86:	3402      	adds	r4, #2
 801bf88:	9305      	str	r3, [sp, #20]
 801bf8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c060 <_vfiprintf_r+0x22c>
 801bf8e:	7821      	ldrb	r1, [r4, #0]
 801bf90:	2203      	movs	r2, #3
 801bf92:	4650      	mov	r0, sl
 801bf94:	f7e4 f9cc 	bl	8000330 <memchr>
 801bf98:	b138      	cbz	r0, 801bfaa <_vfiprintf_r+0x176>
 801bf9a:	9b04      	ldr	r3, [sp, #16]
 801bf9c:	eba0 000a 	sub.w	r0, r0, sl
 801bfa0:	2240      	movs	r2, #64	@ 0x40
 801bfa2:	4082      	lsls	r2, r0
 801bfa4:	4313      	orrs	r3, r2
 801bfa6:	3401      	adds	r4, #1
 801bfa8:	9304      	str	r3, [sp, #16]
 801bfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfae:	4829      	ldr	r0, [pc, #164]	@ (801c054 <_vfiprintf_r+0x220>)
 801bfb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bfb4:	2206      	movs	r2, #6
 801bfb6:	f7e4 f9bb 	bl	8000330 <memchr>
 801bfba:	2800      	cmp	r0, #0
 801bfbc:	d03f      	beq.n	801c03e <_vfiprintf_r+0x20a>
 801bfbe:	4b26      	ldr	r3, [pc, #152]	@ (801c058 <_vfiprintf_r+0x224>)
 801bfc0:	bb1b      	cbnz	r3, 801c00a <_vfiprintf_r+0x1d6>
 801bfc2:	9b03      	ldr	r3, [sp, #12]
 801bfc4:	3307      	adds	r3, #7
 801bfc6:	f023 0307 	bic.w	r3, r3, #7
 801bfca:	3308      	adds	r3, #8
 801bfcc:	9303      	str	r3, [sp, #12]
 801bfce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd0:	443b      	add	r3, r7
 801bfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bfd4:	e76a      	b.n	801beac <_vfiprintf_r+0x78>
 801bfd6:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfda:	460c      	mov	r4, r1
 801bfdc:	2001      	movs	r0, #1
 801bfde:	e7a8      	b.n	801bf32 <_vfiprintf_r+0xfe>
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	3401      	adds	r4, #1
 801bfe4:	9305      	str	r3, [sp, #20]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	f04f 0c0a 	mov.w	ip, #10
 801bfec:	4620      	mov	r0, r4
 801bfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bff2:	3a30      	subs	r2, #48	@ 0x30
 801bff4:	2a09      	cmp	r2, #9
 801bff6:	d903      	bls.n	801c000 <_vfiprintf_r+0x1cc>
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d0c6      	beq.n	801bf8a <_vfiprintf_r+0x156>
 801bffc:	9105      	str	r1, [sp, #20]
 801bffe:	e7c4      	b.n	801bf8a <_vfiprintf_r+0x156>
 801c000:	fb0c 2101 	mla	r1, ip, r1, r2
 801c004:	4604      	mov	r4, r0
 801c006:	2301      	movs	r3, #1
 801c008:	e7f0      	b.n	801bfec <_vfiprintf_r+0x1b8>
 801c00a:	ab03      	add	r3, sp, #12
 801c00c:	9300      	str	r3, [sp, #0]
 801c00e:	462a      	mov	r2, r5
 801c010:	4b12      	ldr	r3, [pc, #72]	@ (801c05c <_vfiprintf_r+0x228>)
 801c012:	a904      	add	r1, sp, #16
 801c014:	4630      	mov	r0, r6
 801c016:	f7fc ffcb 	bl	8018fb0 <_printf_float>
 801c01a:	4607      	mov	r7, r0
 801c01c:	1c78      	adds	r0, r7, #1
 801c01e:	d1d6      	bne.n	801bfce <_vfiprintf_r+0x19a>
 801c020:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c022:	07d9      	lsls	r1, r3, #31
 801c024:	d405      	bmi.n	801c032 <_vfiprintf_r+0x1fe>
 801c026:	89ab      	ldrh	r3, [r5, #12]
 801c028:	059a      	lsls	r2, r3, #22
 801c02a:	d402      	bmi.n	801c032 <_vfiprintf_r+0x1fe>
 801c02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c02e:	f7fd fd29 	bl	8019a84 <__retarget_lock_release_recursive>
 801c032:	89ab      	ldrh	r3, [r5, #12]
 801c034:	065b      	lsls	r3, r3, #25
 801c036:	f53f af1f 	bmi.w	801be78 <_vfiprintf_r+0x44>
 801c03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c03c:	e71e      	b.n	801be7c <_vfiprintf_r+0x48>
 801c03e:	ab03      	add	r3, sp, #12
 801c040:	9300      	str	r3, [sp, #0]
 801c042:	462a      	mov	r2, r5
 801c044:	4b05      	ldr	r3, [pc, #20]	@ (801c05c <_vfiprintf_r+0x228>)
 801c046:	a904      	add	r1, sp, #16
 801c048:	4630      	mov	r0, r6
 801c04a:	f7fd fa39 	bl	80194c0 <_printf_i>
 801c04e:	e7e4      	b.n	801c01a <_vfiprintf_r+0x1e6>
 801c050:	0801dbc0 	.word	0x0801dbc0
 801c054:	0801dbca 	.word	0x0801dbca
 801c058:	08018fb1 	.word	0x08018fb1
 801c05c:	0801be11 	.word	0x0801be11
 801c060:	0801dbc6 	.word	0x0801dbc6

0801c064 <__swbuf_r>:
 801c064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c066:	460e      	mov	r6, r1
 801c068:	4614      	mov	r4, r2
 801c06a:	4605      	mov	r5, r0
 801c06c:	b118      	cbz	r0, 801c076 <__swbuf_r+0x12>
 801c06e:	6a03      	ldr	r3, [r0, #32]
 801c070:	b90b      	cbnz	r3, 801c076 <__swbuf_r+0x12>
 801c072:	f7fd fbd1 	bl	8019818 <__sinit>
 801c076:	69a3      	ldr	r3, [r4, #24]
 801c078:	60a3      	str	r3, [r4, #8]
 801c07a:	89a3      	ldrh	r3, [r4, #12]
 801c07c:	071a      	lsls	r2, r3, #28
 801c07e:	d501      	bpl.n	801c084 <__swbuf_r+0x20>
 801c080:	6923      	ldr	r3, [r4, #16]
 801c082:	b943      	cbnz	r3, 801c096 <__swbuf_r+0x32>
 801c084:	4621      	mov	r1, r4
 801c086:	4628      	mov	r0, r5
 801c088:	f000 f82a 	bl	801c0e0 <__swsetup_r>
 801c08c:	b118      	cbz	r0, 801c096 <__swbuf_r+0x32>
 801c08e:	f04f 37ff 	mov.w	r7, #4294967295
 801c092:	4638      	mov	r0, r7
 801c094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c096:	6823      	ldr	r3, [r4, #0]
 801c098:	6922      	ldr	r2, [r4, #16]
 801c09a:	1a98      	subs	r0, r3, r2
 801c09c:	6963      	ldr	r3, [r4, #20]
 801c09e:	b2f6      	uxtb	r6, r6
 801c0a0:	4283      	cmp	r3, r0
 801c0a2:	4637      	mov	r7, r6
 801c0a4:	dc05      	bgt.n	801c0b2 <__swbuf_r+0x4e>
 801c0a6:	4621      	mov	r1, r4
 801c0a8:	4628      	mov	r0, r5
 801c0aa:	f7ff fdc7 	bl	801bc3c <_fflush_r>
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	d1ed      	bne.n	801c08e <__swbuf_r+0x2a>
 801c0b2:	68a3      	ldr	r3, [r4, #8]
 801c0b4:	3b01      	subs	r3, #1
 801c0b6:	60a3      	str	r3, [r4, #8]
 801c0b8:	6823      	ldr	r3, [r4, #0]
 801c0ba:	1c5a      	adds	r2, r3, #1
 801c0bc:	6022      	str	r2, [r4, #0]
 801c0be:	701e      	strb	r6, [r3, #0]
 801c0c0:	6962      	ldr	r2, [r4, #20]
 801c0c2:	1c43      	adds	r3, r0, #1
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	d004      	beq.n	801c0d2 <__swbuf_r+0x6e>
 801c0c8:	89a3      	ldrh	r3, [r4, #12]
 801c0ca:	07db      	lsls	r3, r3, #31
 801c0cc:	d5e1      	bpl.n	801c092 <__swbuf_r+0x2e>
 801c0ce:	2e0a      	cmp	r6, #10
 801c0d0:	d1df      	bne.n	801c092 <__swbuf_r+0x2e>
 801c0d2:	4621      	mov	r1, r4
 801c0d4:	4628      	mov	r0, r5
 801c0d6:	f7ff fdb1 	bl	801bc3c <_fflush_r>
 801c0da:	2800      	cmp	r0, #0
 801c0dc:	d0d9      	beq.n	801c092 <__swbuf_r+0x2e>
 801c0de:	e7d6      	b.n	801c08e <__swbuf_r+0x2a>

0801c0e0 <__swsetup_r>:
 801c0e0:	b538      	push	{r3, r4, r5, lr}
 801c0e2:	4b29      	ldr	r3, [pc, #164]	@ (801c188 <__swsetup_r+0xa8>)
 801c0e4:	4605      	mov	r5, r0
 801c0e6:	6818      	ldr	r0, [r3, #0]
 801c0e8:	460c      	mov	r4, r1
 801c0ea:	b118      	cbz	r0, 801c0f4 <__swsetup_r+0x14>
 801c0ec:	6a03      	ldr	r3, [r0, #32]
 801c0ee:	b90b      	cbnz	r3, 801c0f4 <__swsetup_r+0x14>
 801c0f0:	f7fd fb92 	bl	8019818 <__sinit>
 801c0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0f8:	0719      	lsls	r1, r3, #28
 801c0fa:	d422      	bmi.n	801c142 <__swsetup_r+0x62>
 801c0fc:	06da      	lsls	r2, r3, #27
 801c0fe:	d407      	bmi.n	801c110 <__swsetup_r+0x30>
 801c100:	2209      	movs	r2, #9
 801c102:	602a      	str	r2, [r5, #0]
 801c104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c108:	81a3      	strh	r3, [r4, #12]
 801c10a:	f04f 30ff 	mov.w	r0, #4294967295
 801c10e:	e033      	b.n	801c178 <__swsetup_r+0x98>
 801c110:	0758      	lsls	r0, r3, #29
 801c112:	d512      	bpl.n	801c13a <__swsetup_r+0x5a>
 801c114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c116:	b141      	cbz	r1, 801c12a <__swsetup_r+0x4a>
 801c118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c11c:	4299      	cmp	r1, r3
 801c11e:	d002      	beq.n	801c126 <__swsetup_r+0x46>
 801c120:	4628      	mov	r0, r5
 801c122:	f7fe faa7 	bl	801a674 <_free_r>
 801c126:	2300      	movs	r3, #0
 801c128:	6363      	str	r3, [r4, #52]	@ 0x34
 801c12a:	89a3      	ldrh	r3, [r4, #12]
 801c12c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c130:	81a3      	strh	r3, [r4, #12]
 801c132:	2300      	movs	r3, #0
 801c134:	6063      	str	r3, [r4, #4]
 801c136:	6923      	ldr	r3, [r4, #16]
 801c138:	6023      	str	r3, [r4, #0]
 801c13a:	89a3      	ldrh	r3, [r4, #12]
 801c13c:	f043 0308 	orr.w	r3, r3, #8
 801c140:	81a3      	strh	r3, [r4, #12]
 801c142:	6923      	ldr	r3, [r4, #16]
 801c144:	b94b      	cbnz	r3, 801c15a <__swsetup_r+0x7a>
 801c146:	89a3      	ldrh	r3, [r4, #12]
 801c148:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c14c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c150:	d003      	beq.n	801c15a <__swsetup_r+0x7a>
 801c152:	4621      	mov	r1, r4
 801c154:	4628      	mov	r0, r5
 801c156:	f000 f883 	bl	801c260 <__smakebuf_r>
 801c15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c15e:	f013 0201 	ands.w	r2, r3, #1
 801c162:	d00a      	beq.n	801c17a <__swsetup_r+0x9a>
 801c164:	2200      	movs	r2, #0
 801c166:	60a2      	str	r2, [r4, #8]
 801c168:	6962      	ldr	r2, [r4, #20]
 801c16a:	4252      	negs	r2, r2
 801c16c:	61a2      	str	r2, [r4, #24]
 801c16e:	6922      	ldr	r2, [r4, #16]
 801c170:	b942      	cbnz	r2, 801c184 <__swsetup_r+0xa4>
 801c172:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c176:	d1c5      	bne.n	801c104 <__swsetup_r+0x24>
 801c178:	bd38      	pop	{r3, r4, r5, pc}
 801c17a:	0799      	lsls	r1, r3, #30
 801c17c:	bf58      	it	pl
 801c17e:	6962      	ldrpl	r2, [r4, #20]
 801c180:	60a2      	str	r2, [r4, #8]
 801c182:	e7f4      	b.n	801c16e <__swsetup_r+0x8e>
 801c184:	2000      	movs	r0, #0
 801c186:	e7f7      	b.n	801c178 <__swsetup_r+0x98>
 801c188:	2400027c 	.word	0x2400027c

0801c18c <_raise_r>:
 801c18c:	291f      	cmp	r1, #31
 801c18e:	b538      	push	{r3, r4, r5, lr}
 801c190:	4605      	mov	r5, r0
 801c192:	460c      	mov	r4, r1
 801c194:	d904      	bls.n	801c1a0 <_raise_r+0x14>
 801c196:	2316      	movs	r3, #22
 801c198:	6003      	str	r3, [r0, #0]
 801c19a:	f04f 30ff 	mov.w	r0, #4294967295
 801c19e:	bd38      	pop	{r3, r4, r5, pc}
 801c1a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c1a2:	b112      	cbz	r2, 801c1aa <_raise_r+0x1e>
 801c1a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c1a8:	b94b      	cbnz	r3, 801c1be <_raise_r+0x32>
 801c1aa:	4628      	mov	r0, r5
 801c1ac:	f000 f830 	bl	801c210 <_getpid_r>
 801c1b0:	4622      	mov	r2, r4
 801c1b2:	4601      	mov	r1, r0
 801c1b4:	4628      	mov	r0, r5
 801c1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c1ba:	f000 b817 	b.w	801c1ec <_kill_r>
 801c1be:	2b01      	cmp	r3, #1
 801c1c0:	d00a      	beq.n	801c1d8 <_raise_r+0x4c>
 801c1c2:	1c59      	adds	r1, r3, #1
 801c1c4:	d103      	bne.n	801c1ce <_raise_r+0x42>
 801c1c6:	2316      	movs	r3, #22
 801c1c8:	6003      	str	r3, [r0, #0]
 801c1ca:	2001      	movs	r0, #1
 801c1cc:	e7e7      	b.n	801c19e <_raise_r+0x12>
 801c1ce:	2100      	movs	r1, #0
 801c1d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	4798      	blx	r3
 801c1d8:	2000      	movs	r0, #0
 801c1da:	e7e0      	b.n	801c19e <_raise_r+0x12>

0801c1dc <raise>:
 801c1dc:	4b02      	ldr	r3, [pc, #8]	@ (801c1e8 <raise+0xc>)
 801c1de:	4601      	mov	r1, r0
 801c1e0:	6818      	ldr	r0, [r3, #0]
 801c1e2:	f7ff bfd3 	b.w	801c18c <_raise_r>
 801c1e6:	bf00      	nop
 801c1e8:	2400027c 	.word	0x2400027c

0801c1ec <_kill_r>:
 801c1ec:	b538      	push	{r3, r4, r5, lr}
 801c1ee:	4d07      	ldr	r5, [pc, #28]	@ (801c20c <_kill_r+0x20>)
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	4604      	mov	r4, r0
 801c1f4:	4608      	mov	r0, r1
 801c1f6:	4611      	mov	r1, r2
 801c1f8:	602b      	str	r3, [r5, #0]
 801c1fa:	f7e6 fd55 	bl	8002ca8 <_kill>
 801c1fe:	1c43      	adds	r3, r0, #1
 801c200:	d102      	bne.n	801c208 <_kill_r+0x1c>
 801c202:	682b      	ldr	r3, [r5, #0]
 801c204:	b103      	cbz	r3, 801c208 <_kill_r+0x1c>
 801c206:	6023      	str	r3, [r4, #0]
 801c208:	bd38      	pop	{r3, r4, r5, pc}
 801c20a:	bf00      	nop
 801c20c:	2400635c 	.word	0x2400635c

0801c210 <_getpid_r>:
 801c210:	f7e6 bd42 	b.w	8002c98 <_getpid>

0801c214 <__swhatbuf_r>:
 801c214:	b570      	push	{r4, r5, r6, lr}
 801c216:	460c      	mov	r4, r1
 801c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c21c:	2900      	cmp	r1, #0
 801c21e:	b096      	sub	sp, #88	@ 0x58
 801c220:	4615      	mov	r5, r2
 801c222:	461e      	mov	r6, r3
 801c224:	da0d      	bge.n	801c242 <__swhatbuf_r+0x2e>
 801c226:	89a3      	ldrh	r3, [r4, #12]
 801c228:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c22c:	f04f 0100 	mov.w	r1, #0
 801c230:	bf14      	ite	ne
 801c232:	2340      	movne	r3, #64	@ 0x40
 801c234:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c238:	2000      	movs	r0, #0
 801c23a:	6031      	str	r1, [r6, #0]
 801c23c:	602b      	str	r3, [r5, #0]
 801c23e:	b016      	add	sp, #88	@ 0x58
 801c240:	bd70      	pop	{r4, r5, r6, pc}
 801c242:	466a      	mov	r2, sp
 801c244:	f000 f848 	bl	801c2d8 <_fstat_r>
 801c248:	2800      	cmp	r0, #0
 801c24a:	dbec      	blt.n	801c226 <__swhatbuf_r+0x12>
 801c24c:	9901      	ldr	r1, [sp, #4]
 801c24e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c252:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c256:	4259      	negs	r1, r3
 801c258:	4159      	adcs	r1, r3
 801c25a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c25e:	e7eb      	b.n	801c238 <__swhatbuf_r+0x24>

0801c260 <__smakebuf_r>:
 801c260:	898b      	ldrh	r3, [r1, #12]
 801c262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c264:	079d      	lsls	r5, r3, #30
 801c266:	4606      	mov	r6, r0
 801c268:	460c      	mov	r4, r1
 801c26a:	d507      	bpl.n	801c27c <__smakebuf_r+0x1c>
 801c26c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c270:	6023      	str	r3, [r4, #0]
 801c272:	6123      	str	r3, [r4, #16]
 801c274:	2301      	movs	r3, #1
 801c276:	6163      	str	r3, [r4, #20]
 801c278:	b003      	add	sp, #12
 801c27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c27c:	ab01      	add	r3, sp, #4
 801c27e:	466a      	mov	r2, sp
 801c280:	f7ff ffc8 	bl	801c214 <__swhatbuf_r>
 801c284:	9f00      	ldr	r7, [sp, #0]
 801c286:	4605      	mov	r5, r0
 801c288:	4639      	mov	r1, r7
 801c28a:	4630      	mov	r0, r6
 801c28c:	f7fe fda0 	bl	801add0 <_malloc_r>
 801c290:	b948      	cbnz	r0, 801c2a6 <__smakebuf_r+0x46>
 801c292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c296:	059a      	lsls	r2, r3, #22
 801c298:	d4ee      	bmi.n	801c278 <__smakebuf_r+0x18>
 801c29a:	f023 0303 	bic.w	r3, r3, #3
 801c29e:	f043 0302 	orr.w	r3, r3, #2
 801c2a2:	81a3      	strh	r3, [r4, #12]
 801c2a4:	e7e2      	b.n	801c26c <__smakebuf_r+0xc>
 801c2a6:	89a3      	ldrh	r3, [r4, #12]
 801c2a8:	6020      	str	r0, [r4, #0]
 801c2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c2ae:	81a3      	strh	r3, [r4, #12]
 801c2b0:	9b01      	ldr	r3, [sp, #4]
 801c2b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c2b6:	b15b      	cbz	r3, 801c2d0 <__smakebuf_r+0x70>
 801c2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2bc:	4630      	mov	r0, r6
 801c2be:	f000 f81d 	bl	801c2fc <_isatty_r>
 801c2c2:	b128      	cbz	r0, 801c2d0 <__smakebuf_r+0x70>
 801c2c4:	89a3      	ldrh	r3, [r4, #12]
 801c2c6:	f023 0303 	bic.w	r3, r3, #3
 801c2ca:	f043 0301 	orr.w	r3, r3, #1
 801c2ce:	81a3      	strh	r3, [r4, #12]
 801c2d0:	89a3      	ldrh	r3, [r4, #12]
 801c2d2:	431d      	orrs	r5, r3
 801c2d4:	81a5      	strh	r5, [r4, #12]
 801c2d6:	e7cf      	b.n	801c278 <__smakebuf_r+0x18>

0801c2d8 <_fstat_r>:
 801c2d8:	b538      	push	{r3, r4, r5, lr}
 801c2da:	4d07      	ldr	r5, [pc, #28]	@ (801c2f8 <_fstat_r+0x20>)
 801c2dc:	2300      	movs	r3, #0
 801c2de:	4604      	mov	r4, r0
 801c2e0:	4608      	mov	r0, r1
 801c2e2:	4611      	mov	r1, r2
 801c2e4:	602b      	str	r3, [r5, #0]
 801c2e6:	f7e6 fd3f 	bl	8002d68 <_fstat>
 801c2ea:	1c43      	adds	r3, r0, #1
 801c2ec:	d102      	bne.n	801c2f4 <_fstat_r+0x1c>
 801c2ee:	682b      	ldr	r3, [r5, #0]
 801c2f0:	b103      	cbz	r3, 801c2f4 <_fstat_r+0x1c>
 801c2f2:	6023      	str	r3, [r4, #0]
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
 801c2f6:	bf00      	nop
 801c2f8:	2400635c 	.word	0x2400635c

0801c2fc <_isatty_r>:
 801c2fc:	b538      	push	{r3, r4, r5, lr}
 801c2fe:	4d06      	ldr	r5, [pc, #24]	@ (801c318 <_isatty_r+0x1c>)
 801c300:	2300      	movs	r3, #0
 801c302:	4604      	mov	r4, r0
 801c304:	4608      	mov	r0, r1
 801c306:	602b      	str	r3, [r5, #0]
 801c308:	f7e6 fd3e 	bl	8002d88 <_isatty>
 801c30c:	1c43      	adds	r3, r0, #1
 801c30e:	d102      	bne.n	801c316 <_isatty_r+0x1a>
 801c310:	682b      	ldr	r3, [r5, #0]
 801c312:	b103      	cbz	r3, 801c316 <_isatty_r+0x1a>
 801c314:	6023      	str	r3, [r4, #0]
 801c316:	bd38      	pop	{r3, r4, r5, pc}
 801c318:	2400635c 	.word	0x2400635c
 801c31c:	00000000 	.word	0x00000000

0801c320 <sin>:
 801c320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c322:	eeb0 7b40 	vmov.f64	d7, d0
 801c326:	ee17 3a90 	vmov	r3, s15
 801c32a:	4a21      	ldr	r2, [pc, #132]	@ (801c3b0 <sin+0x90>)
 801c32c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c330:	4293      	cmp	r3, r2
 801c332:	d807      	bhi.n	801c344 <sin+0x24>
 801c334:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801c3a8 <sin+0x88>
 801c338:	2000      	movs	r0, #0
 801c33a:	b005      	add	sp, #20
 801c33c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c340:	f000 b986 	b.w	801c650 <__kernel_sin>
 801c344:	4a1b      	ldr	r2, [pc, #108]	@ (801c3b4 <sin+0x94>)
 801c346:	4293      	cmp	r3, r2
 801c348:	d904      	bls.n	801c354 <sin+0x34>
 801c34a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801c34e:	b005      	add	sp, #20
 801c350:	f85d fb04 	ldr.w	pc, [sp], #4
 801c354:	4668      	mov	r0, sp
 801c356:	f000 f9d3 	bl	801c700 <__ieee754_rem_pio2>
 801c35a:	f000 0003 	and.w	r0, r0, #3
 801c35e:	2801      	cmp	r0, #1
 801c360:	d00a      	beq.n	801c378 <sin+0x58>
 801c362:	2802      	cmp	r0, #2
 801c364:	d00f      	beq.n	801c386 <sin+0x66>
 801c366:	b9c0      	cbnz	r0, 801c39a <sin+0x7a>
 801c368:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c36c:	ed9d 0b00 	vldr	d0, [sp]
 801c370:	2001      	movs	r0, #1
 801c372:	f000 f96d 	bl	801c650 <__kernel_sin>
 801c376:	e7ea      	b.n	801c34e <sin+0x2e>
 801c378:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c37c:	ed9d 0b00 	vldr	d0, [sp]
 801c380:	f000 f8fe 	bl	801c580 <__kernel_cos>
 801c384:	e7e3      	b.n	801c34e <sin+0x2e>
 801c386:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c38a:	ed9d 0b00 	vldr	d0, [sp]
 801c38e:	2001      	movs	r0, #1
 801c390:	f000 f95e 	bl	801c650 <__kernel_sin>
 801c394:	eeb1 0b40 	vneg.f64	d0, d0
 801c398:	e7d9      	b.n	801c34e <sin+0x2e>
 801c39a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c39e:	ed9d 0b00 	vldr	d0, [sp]
 801c3a2:	f000 f8ed 	bl	801c580 <__kernel_cos>
 801c3a6:	e7f5      	b.n	801c394 <sin+0x74>
	...
 801c3b0:	3fe921fb 	.word	0x3fe921fb
 801c3b4:	7fefffff 	.word	0x7fefffff

0801c3b8 <sinf_poly>:
 801c3b8:	07cb      	lsls	r3, r1, #31
 801c3ba:	d412      	bmi.n	801c3e2 <sinf_poly+0x2a>
 801c3bc:	ee21 5b00 	vmul.f64	d5, d1, d0
 801c3c0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801c3c4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801c3c8:	eea6 7b01 	vfma.f64	d7, d6, d1
 801c3cc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801c3d0:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c3d4:	eea6 0b05 	vfma.f64	d0, d6, d5
 801c3d8:	eea7 0b01 	vfma.f64	d0, d7, d1
 801c3dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c3e0:	4770      	bx	lr
 801c3e2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801c3e6:	ee21 5b01 	vmul.f64	d5, d1, d1
 801c3ea:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801c3ee:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801c3f2:	eea1 7b06 	vfma.f64	d7, d1, d6
 801c3f6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801c3fa:	eea1 0b06 	vfma.f64	d0, d1, d6
 801c3fe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801c402:	ee21 1b05 	vmul.f64	d1, d1, d5
 801c406:	eea5 0b06 	vfma.f64	d0, d5, d6
 801c40a:	e7e5      	b.n	801c3d8 <sinf_poly+0x20>
 801c40c:	0000      	movs	r0, r0
	...

0801c410 <sinf>:
 801c410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c412:	ee10 4a10 	vmov	r4, s0
 801c416:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801c41a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801c41e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801c422:	eef0 7a40 	vmov.f32	s15, s0
 801c426:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801c42a:	d218      	bcs.n	801c45e <sinf+0x4e>
 801c42c:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c430:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801c434:	d20a      	bcs.n	801c44c <sinf+0x3c>
 801c436:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801c43a:	d103      	bne.n	801c444 <sinf+0x34>
 801c43c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801c440:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c444:	eeb0 0a67 	vmov.f32	s0, s15
 801c448:	b003      	add	sp, #12
 801c44a:	bd30      	pop	{r4, r5, pc}
 801c44c:	483a      	ldr	r0, [pc, #232]	@ (801c538 <sinf+0x128>)
 801c44e:	eeb0 0b46 	vmov.f64	d0, d6
 801c452:	2100      	movs	r1, #0
 801c454:	b003      	add	sp, #12
 801c456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c45a:	f7ff bfad 	b.w	801c3b8 <sinf_poly>
 801c45e:	f240 422e 	movw	r2, #1070	@ 0x42e
 801c462:	4293      	cmp	r3, r2
 801c464:	d824      	bhi.n	801c4b0 <sinf+0xa0>
 801c466:	4b34      	ldr	r3, [pc, #208]	@ (801c538 <sinf+0x128>)
 801c468:	ed93 7b08 	vldr	d7, [r3, #32]
 801c46c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c470:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c474:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c478:	ee17 1a90 	vmov	r1, s15
 801c47c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801c480:	1609      	asrs	r1, r1, #24
 801c482:	ee07 1a90 	vmov	s15, r1
 801c486:	f001 0203 	and.w	r2, r1, #3
 801c48a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c48e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c492:	ed92 0b00 	vldr	d0, [r2]
 801c496:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801c49a:	f011 0f02 	tst.w	r1, #2
 801c49e:	eea5 6b47 	vfms.f64	d6, d5, d7
 801c4a2:	bf08      	it	eq
 801c4a4:	4618      	moveq	r0, r3
 801c4a6:	ee26 1b06 	vmul.f64	d1, d6, d6
 801c4aa:	ee20 0b06 	vmul.f64	d0, d0, d6
 801c4ae:	e7d1      	b.n	801c454 <sinf+0x44>
 801c4b0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801c4b4:	d237      	bcs.n	801c526 <sinf+0x116>
 801c4b6:	4921      	ldr	r1, [pc, #132]	@ (801c53c <sinf+0x12c>)
 801c4b8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801c4bc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801c4c0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801c4c4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801c4c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801c4cc:	6a10      	ldr	r0, [r2, #32]
 801c4ce:	6912      	ldr	r2, [r2, #16]
 801c4d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801c4d4:	40ab      	lsls	r3, r5
 801c4d6:	fba0 5003 	umull	r5, r0, r0, r3
 801c4da:	4359      	muls	r1, r3
 801c4dc:	fbe3 0102 	umlal	r0, r1, r3, r2
 801c4e0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801c4e4:	0f9d      	lsrs	r5, r3, #30
 801c4e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801c4ea:	1ac9      	subs	r1, r1, r3
 801c4ec:	f7e4 f906 	bl	80006fc <__aeabi_l2d>
 801c4f0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801c4f4:	4b10      	ldr	r3, [pc, #64]	@ (801c538 <sinf+0x128>)
 801c4f6:	f004 0203 	and.w	r2, r4, #3
 801c4fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801c4fe:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801c530 <sinf+0x120>
 801c502:	ed92 0b00 	vldr	d0, [r2]
 801c506:	ec41 0b17 	vmov	d7, r0, r1
 801c50a:	f014 0f02 	tst.w	r4, #2
 801c50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c512:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801c516:	4629      	mov	r1, r5
 801c518:	bf08      	it	eq
 801c51a:	4618      	moveq	r0, r3
 801c51c:	ee27 1b07 	vmul.f64	d1, d7, d7
 801c520:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c524:	e796      	b.n	801c454 <sinf+0x44>
 801c526:	b003      	add	sp, #12
 801c528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c52c:	f000 b816 	b.w	801c55c <__math_invalidf>
 801c530:	54442d18 	.word	0x54442d18
 801c534:	3c1921fb 	.word	0x3c1921fb
 801c538:	0801dc70 	.word	0x0801dc70
 801c53c:	0801dc10 	.word	0x0801dc10

0801c540 <with_errnof>:
 801c540:	b510      	push	{r4, lr}
 801c542:	ed2d 8b02 	vpush	{d8}
 801c546:	eeb0 8a40 	vmov.f32	s16, s0
 801c54a:	4604      	mov	r4, r0
 801c54c:	f7fd fa6e 	bl	8019a2c <__errno>
 801c550:	eeb0 0a48 	vmov.f32	s0, s16
 801c554:	ecbd 8b02 	vpop	{d8}
 801c558:	6004      	str	r4, [r0, #0]
 801c55a:	bd10      	pop	{r4, pc}

0801c55c <__math_invalidf>:
 801c55c:	eef0 7a40 	vmov.f32	s15, s0
 801c560:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c564:	eef4 7a67 	vcmp.f32	s15, s15
 801c568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c56c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801c570:	d602      	bvs.n	801c578 <__math_invalidf+0x1c>
 801c572:	2021      	movs	r0, #33	@ 0x21
 801c574:	f7ff bfe4 	b.w	801c540 <with_errnof>
 801c578:	4770      	bx	lr
 801c57a:	0000      	movs	r0, r0
 801c57c:	0000      	movs	r0, r0
	...

0801c580 <__kernel_cos>:
 801c580:	eeb0 5b40 	vmov.f64	d5, d0
 801c584:	ee15 1a90 	vmov	r1, s11
 801c588:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801c58c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801c590:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801c594:	d204      	bcs.n	801c5a0 <__kernel_cos+0x20>
 801c596:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801c59a:	ee17 3a90 	vmov	r3, s15
 801c59e:	b343      	cbz	r3, 801c5f2 <__kernel_cos+0x72>
 801c5a0:	ee25 6b05 	vmul.f64	d6, d5, d5
 801c5a4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801c5a8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801c618 <__kernel_cos+0x98>
 801c5ac:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c620 <__kernel_cos+0xa0>
 801c5b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c5b4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c628 <__kernel_cos+0xa8>
 801c5b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c5bc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c630 <__kernel_cos+0xb0>
 801c5c0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c5c4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801c638 <__kernel_cos+0xb8>
 801c5c8:	4b1f      	ldr	r3, [pc, #124]	@ (801c648 <__kernel_cos+0xc8>)
 801c5ca:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c5ce:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801c640 <__kernel_cos+0xc0>
 801c5d2:	4299      	cmp	r1, r3
 801c5d4:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c5d8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c5dc:	ee24 4b06 	vmul.f64	d4, d4, d6
 801c5e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c5e4:	eea6 1b04 	vfma.f64	d1, d6, d4
 801c5e8:	d804      	bhi.n	801c5f4 <__kernel_cos+0x74>
 801c5ea:	ee37 7b41 	vsub.f64	d7, d7, d1
 801c5ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c5f2:	4770      	bx	lr
 801c5f4:	4b15      	ldr	r3, [pc, #84]	@ (801c64c <__kernel_cos+0xcc>)
 801c5f6:	4299      	cmp	r1, r3
 801c5f8:	d809      	bhi.n	801c60e <__kernel_cos+0x8e>
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801c600:	ec43 2b16 	vmov	d6, r2, r3
 801c604:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c608:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c60c:	e7ed      	b.n	801c5ea <__kernel_cos+0x6a>
 801c60e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801c612:	e7f7      	b.n	801c604 <__kernel_cos+0x84>
 801c614:	f3af 8000 	nop.w
 801c618:	be8838d4 	.word	0xbe8838d4
 801c61c:	bda8fae9 	.word	0xbda8fae9
 801c620:	bdb4b1c4 	.word	0xbdb4b1c4
 801c624:	3e21ee9e 	.word	0x3e21ee9e
 801c628:	809c52ad 	.word	0x809c52ad
 801c62c:	be927e4f 	.word	0xbe927e4f
 801c630:	19cb1590 	.word	0x19cb1590
 801c634:	3efa01a0 	.word	0x3efa01a0
 801c638:	16c15177 	.word	0x16c15177
 801c63c:	bf56c16c 	.word	0xbf56c16c
 801c640:	5555554c 	.word	0x5555554c
 801c644:	3fa55555 	.word	0x3fa55555
 801c648:	3fd33332 	.word	0x3fd33332
 801c64c:	3fe90000 	.word	0x3fe90000

0801c650 <__kernel_sin>:
 801c650:	ee10 3a90 	vmov	r3, s1
 801c654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c658:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801c65c:	d204      	bcs.n	801c668 <__kernel_sin+0x18>
 801c65e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801c662:	ee17 3a90 	vmov	r3, s15
 801c666:	b35b      	cbz	r3, 801c6c0 <__kernel_sin+0x70>
 801c668:	ee20 6b00 	vmul.f64	d6, d0, d0
 801c66c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801c670:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801c6c8 <__kernel_sin+0x78>
 801c674:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6d0 <__kernel_sin+0x80>
 801c678:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c67c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c6d8 <__kernel_sin+0x88>
 801c680:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c684:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6e0 <__kernel_sin+0x90>
 801c688:	eea7 4b06 	vfma.f64	d4, d7, d6
 801c68c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801c6e8 <__kernel_sin+0x98>
 801c690:	eea4 7b06 	vfma.f64	d7, d4, d6
 801c694:	b930      	cbnz	r0, 801c6a4 <__kernel_sin+0x54>
 801c696:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801c6f0 <__kernel_sin+0xa0>
 801c69a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801c69e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801c6a2:	4770      	bx	lr
 801c6a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801c6a8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801c6ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 801c6b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801c6b4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801c6f8 <__kernel_sin+0xa8>
 801c6b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 801c6bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 801c6c0:	4770      	bx	lr
 801c6c2:	bf00      	nop
 801c6c4:	f3af 8000 	nop.w
 801c6c8:	5acfd57c 	.word	0x5acfd57c
 801c6cc:	3de5d93a 	.word	0x3de5d93a
 801c6d0:	8a2b9ceb 	.word	0x8a2b9ceb
 801c6d4:	be5ae5e6 	.word	0xbe5ae5e6
 801c6d8:	57b1fe7d 	.word	0x57b1fe7d
 801c6dc:	3ec71de3 	.word	0x3ec71de3
 801c6e0:	19c161d5 	.word	0x19c161d5
 801c6e4:	bf2a01a0 	.word	0xbf2a01a0
 801c6e8:	1110f8a6 	.word	0x1110f8a6
 801c6ec:	3f811111 	.word	0x3f811111
 801c6f0:	55555549 	.word	0x55555549
 801c6f4:	bfc55555 	.word	0xbfc55555
 801c6f8:	55555549 	.word	0x55555549
 801c6fc:	3fc55555 	.word	0x3fc55555

0801c700 <__ieee754_rem_pio2>:
 801c700:	b570      	push	{r4, r5, r6, lr}
 801c702:	eeb0 7b40 	vmov.f64	d7, d0
 801c706:	ee17 5a90 	vmov	r5, s15
 801c70a:	4b99      	ldr	r3, [pc, #612]	@ (801c970 <__ieee754_rem_pio2+0x270>)
 801c70c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801c710:	429e      	cmp	r6, r3
 801c712:	b088      	sub	sp, #32
 801c714:	4604      	mov	r4, r0
 801c716:	d807      	bhi.n	801c728 <__ieee754_rem_pio2+0x28>
 801c718:	2200      	movs	r2, #0
 801c71a:	2300      	movs	r3, #0
 801c71c:	ed84 0b00 	vstr	d0, [r4]
 801c720:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c724:	2000      	movs	r0, #0
 801c726:	e01b      	b.n	801c760 <__ieee754_rem_pio2+0x60>
 801c728:	4b92      	ldr	r3, [pc, #584]	@ (801c974 <__ieee754_rem_pio2+0x274>)
 801c72a:	429e      	cmp	r6, r3
 801c72c:	d83b      	bhi.n	801c7a6 <__ieee754_rem_pio2+0xa6>
 801c72e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801c732:	2d00      	cmp	r5, #0
 801c734:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801c930 <__ieee754_rem_pio2+0x230>
 801c738:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801c73c:	dd19      	ble.n	801c772 <__ieee754_rem_pio2+0x72>
 801c73e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c742:	429e      	cmp	r6, r3
 801c744:	d00e      	beq.n	801c764 <__ieee754_rem_pio2+0x64>
 801c746:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801c938 <__ieee754_rem_pio2+0x238>
 801c74a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801c74e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c752:	ed84 6b00 	vstr	d6, [r4]
 801c756:	ee37 7b45 	vsub.f64	d7, d7, d5
 801c75a:	ed84 7b02 	vstr	d7, [r4, #8]
 801c75e:	2001      	movs	r0, #1
 801c760:	b008      	add	sp, #32
 801c762:	bd70      	pop	{r4, r5, r6, pc}
 801c764:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801c940 <__ieee754_rem_pio2+0x240>
 801c768:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801c948 <__ieee754_rem_pio2+0x248>
 801c76c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c770:	e7eb      	b.n	801c74a <__ieee754_rem_pio2+0x4a>
 801c772:	429e      	cmp	r6, r3
 801c774:	ee30 7b06 	vadd.f64	d7, d0, d6
 801c778:	d00e      	beq.n	801c798 <__ieee754_rem_pio2+0x98>
 801c77a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801c938 <__ieee754_rem_pio2+0x238>
 801c77e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801c782:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c786:	ed84 6b00 	vstr	d6, [r4]
 801c78a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801c78e:	f04f 30ff 	mov.w	r0, #4294967295
 801c792:	ed84 7b02 	vstr	d7, [r4, #8]
 801c796:	e7e3      	b.n	801c760 <__ieee754_rem_pio2+0x60>
 801c798:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801c940 <__ieee754_rem_pio2+0x240>
 801c79c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801c948 <__ieee754_rem_pio2+0x248>
 801c7a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801c7a4:	e7eb      	b.n	801c77e <__ieee754_rem_pio2+0x7e>
 801c7a6:	4b74      	ldr	r3, [pc, #464]	@ (801c978 <__ieee754_rem_pio2+0x278>)
 801c7a8:	429e      	cmp	r6, r3
 801c7aa:	d870      	bhi.n	801c88e <__ieee754_rem_pio2+0x18e>
 801c7ac:	f000 f8ec 	bl	801c988 <fabs>
 801c7b0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c7b4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801c950 <__ieee754_rem_pio2+0x250>
 801c7b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801c7bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801c7c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801c7c4:	ee17 0a90 	vmov	r0, s15
 801c7c8:	eeb1 4b45 	vneg.f64	d4, d5
 801c7cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c930 <__ieee754_rem_pio2+0x230>
 801c7d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 801c7d4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801c938 <__ieee754_rem_pio2+0x238>
 801c7d8:	281f      	cmp	r0, #31
 801c7da:	ee25 7b07 	vmul.f64	d7, d5, d7
 801c7de:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c7e2:	dc05      	bgt.n	801c7f0 <__ieee754_rem_pio2+0xf0>
 801c7e4:	4b65      	ldr	r3, [pc, #404]	@ (801c97c <__ieee754_rem_pio2+0x27c>)
 801c7e6:	1e42      	subs	r2, r0, #1
 801c7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7ec:	42b3      	cmp	r3, r6
 801c7ee:	d109      	bne.n	801c804 <__ieee754_rem_pio2+0x104>
 801c7f0:	ee16 3a90 	vmov	r3, s13
 801c7f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c7f8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801c7fc:	2b10      	cmp	r3, #16
 801c7fe:	ea4f 5226 	mov.w	r2, r6, asr #20
 801c802:	dc02      	bgt.n	801c80a <__ieee754_rem_pio2+0x10a>
 801c804:	ed84 6b00 	vstr	d6, [r4]
 801c808:	e01a      	b.n	801c840 <__ieee754_rem_pio2+0x140>
 801c80a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801c940 <__ieee754_rem_pio2+0x240>
 801c80e:	eeb0 6b40 	vmov.f64	d6, d0
 801c812:	eea4 6b03 	vfma.f64	d6, d4, d3
 801c816:	ee30 7b46 	vsub.f64	d7, d0, d6
 801c81a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801c81e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801c948 <__ieee754_rem_pio2+0x248>
 801c822:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801c826:	ee36 3b47 	vsub.f64	d3, d6, d7
 801c82a:	ee13 3a90 	vmov	r3, s7
 801c82e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801c832:	1ad3      	subs	r3, r2, r3
 801c834:	2b31      	cmp	r3, #49	@ 0x31
 801c836:	dc17      	bgt.n	801c868 <__ieee754_rem_pio2+0x168>
 801c838:	eeb0 0b46 	vmov.f64	d0, d6
 801c83c:	ed84 3b00 	vstr	d3, [r4]
 801c840:	ed94 6b00 	vldr	d6, [r4]
 801c844:	2d00      	cmp	r5, #0
 801c846:	ee30 0b46 	vsub.f64	d0, d0, d6
 801c84a:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c84e:	ed84 0b02 	vstr	d0, [r4, #8]
 801c852:	da85      	bge.n	801c760 <__ieee754_rem_pio2+0x60>
 801c854:	eeb1 6b46 	vneg.f64	d6, d6
 801c858:	eeb1 0b40 	vneg.f64	d0, d0
 801c85c:	ed84 6b00 	vstr	d6, [r4]
 801c860:	ed84 0b02 	vstr	d0, [r4, #8]
 801c864:	4240      	negs	r0, r0
 801c866:	e77b      	b.n	801c760 <__ieee754_rem_pio2+0x60>
 801c868:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801c958 <__ieee754_rem_pio2+0x258>
 801c86c:	eeb0 0b46 	vmov.f64	d0, d6
 801c870:	eea4 0b07 	vfma.f64	d0, d4, d7
 801c874:	ee36 6b40 	vsub.f64	d6, d6, d0
 801c878:	eea4 6b07 	vfma.f64	d6, d4, d7
 801c87c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801c960 <__ieee754_rem_pio2+0x260>
 801c880:	eeb0 7b46 	vmov.f64	d7, d6
 801c884:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801c888:	ee30 6b47 	vsub.f64	d6, d0, d7
 801c88c:	e7ba      	b.n	801c804 <__ieee754_rem_pio2+0x104>
 801c88e:	4b3c      	ldr	r3, [pc, #240]	@ (801c980 <__ieee754_rem_pio2+0x280>)
 801c890:	429e      	cmp	r6, r3
 801c892:	d906      	bls.n	801c8a2 <__ieee754_rem_pio2+0x1a2>
 801c894:	ee30 7b40 	vsub.f64	d7, d0, d0
 801c898:	ed80 7b02 	vstr	d7, [r0, #8]
 801c89c:	ed80 7b00 	vstr	d7, [r0]
 801c8a0:	e740      	b.n	801c724 <__ieee754_rem_pio2+0x24>
 801c8a2:	ee10 3a10 	vmov	r3, s0
 801c8a6:	1532      	asrs	r2, r6, #20
 801c8a8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801c8b2:	ec41 0b17 	vmov	d7, r0, r1
 801c8b6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c8ba:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801c968 <__ieee754_rem_pio2+0x268>
 801c8be:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c8c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c8c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c8ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c8ce:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801c8d2:	a808      	add	r0, sp, #32
 801c8d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801c8d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801c8dc:	ed8d 6b04 	vstr	d6, [sp, #16]
 801c8e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801c8e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c8e8:	2103      	movs	r1, #3
 801c8ea:	ed30 7b02 	vldmdb	r0!, {d7}
 801c8ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8f6:	460b      	mov	r3, r1
 801c8f8:	f101 31ff 	add.w	r1, r1, #4294967295
 801c8fc:	d0f5      	beq.n	801c8ea <__ieee754_rem_pio2+0x1ea>
 801c8fe:	4921      	ldr	r1, [pc, #132]	@ (801c984 <__ieee754_rem_pio2+0x284>)
 801c900:	9101      	str	r1, [sp, #4]
 801c902:	2102      	movs	r1, #2
 801c904:	9100      	str	r1, [sp, #0]
 801c906:	a802      	add	r0, sp, #8
 801c908:	4621      	mov	r1, r4
 801c90a:	f000 f845 	bl	801c998 <__kernel_rem_pio2>
 801c90e:	2d00      	cmp	r5, #0
 801c910:	f6bf af26 	bge.w	801c760 <__ieee754_rem_pio2+0x60>
 801c914:	ed94 7b00 	vldr	d7, [r4]
 801c918:	eeb1 7b47 	vneg.f64	d7, d7
 801c91c:	ed84 7b00 	vstr	d7, [r4]
 801c920:	ed94 7b02 	vldr	d7, [r4, #8]
 801c924:	eeb1 7b47 	vneg.f64	d7, d7
 801c928:	ed84 7b02 	vstr	d7, [r4, #8]
 801c92c:	e79a      	b.n	801c864 <__ieee754_rem_pio2+0x164>
 801c92e:	bf00      	nop
 801c930:	54400000 	.word	0x54400000
 801c934:	3ff921fb 	.word	0x3ff921fb
 801c938:	1a626331 	.word	0x1a626331
 801c93c:	3dd0b461 	.word	0x3dd0b461
 801c940:	1a600000 	.word	0x1a600000
 801c944:	3dd0b461 	.word	0x3dd0b461
 801c948:	2e037073 	.word	0x2e037073
 801c94c:	3ba3198a 	.word	0x3ba3198a
 801c950:	6dc9c883 	.word	0x6dc9c883
 801c954:	3fe45f30 	.word	0x3fe45f30
 801c958:	2e000000 	.word	0x2e000000
 801c95c:	3ba3198a 	.word	0x3ba3198a
 801c960:	252049c1 	.word	0x252049c1
 801c964:	397b839a 	.word	0x397b839a
 801c968:	00000000 	.word	0x00000000
 801c96c:	41700000 	.word	0x41700000
 801c970:	3fe921fb 	.word	0x3fe921fb
 801c974:	4002d97b 	.word	0x4002d97b
 801c978:	413921fb 	.word	0x413921fb
 801c97c:	0801dd50 	.word	0x0801dd50
 801c980:	7fefffff 	.word	0x7fefffff
 801c984:	0801ddd0 	.word	0x0801ddd0

0801c988 <fabs>:
 801c988:	ec51 0b10 	vmov	r0, r1, d0
 801c98c:	4602      	mov	r2, r0
 801c98e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c992:	ec43 2b10 	vmov	d0, r2, r3
 801c996:	4770      	bx	lr

0801c998 <__kernel_rem_pio2>:
 801c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c99c:	ed2d 8b06 	vpush	{d8-d10}
 801c9a0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801c9a4:	469b      	mov	fp, r3
 801c9a6:	9001      	str	r0, [sp, #4]
 801c9a8:	4bbb      	ldr	r3, [pc, #748]	@ (801cc98 <__kernel_rem_pio2+0x300>)
 801c9aa:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801c9ac:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801c9b0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801c9b4:	f112 0f14 	cmn.w	r2, #20
 801c9b8:	bfa8      	it	ge
 801c9ba:	1ed3      	subge	r3, r2, #3
 801c9bc:	f10b 3aff 	add.w	sl, fp, #4294967295
 801c9c0:	bfb8      	it	lt
 801c9c2:	2300      	movlt	r3, #0
 801c9c4:	f06f 0517 	mvn.w	r5, #23
 801c9c8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801cc80 <__kernel_rem_pio2+0x2e8>
 801c9cc:	bfa4      	itt	ge
 801c9ce:	2018      	movge	r0, #24
 801c9d0:	fb93 f3f0 	sdivge	r3, r3, r0
 801c9d4:	fb03 5505 	mla	r5, r3, r5, r5
 801c9d8:	eba3 040a 	sub.w	r4, r3, sl
 801c9dc:	4415      	add	r5, r2
 801c9de:	460f      	mov	r7, r1
 801c9e0:	eb09 060a 	add.w	r6, r9, sl
 801c9e4:	a81a      	add	r0, sp, #104	@ 0x68
 801c9e6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801c9ea:	2200      	movs	r2, #0
 801c9ec:	42b2      	cmp	r2, r6
 801c9ee:	dd0e      	ble.n	801ca0e <__kernel_rem_pio2+0x76>
 801c9f0:	aa1a      	add	r2, sp, #104	@ 0x68
 801c9f2:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801c9f6:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801c9fa:	2600      	movs	r6, #0
 801c9fc:	454e      	cmp	r6, r9
 801c9fe:	dc25      	bgt.n	801ca4c <__kernel_rem_pio2+0xb4>
 801ca00:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801cc80 <__kernel_rem_pio2+0x2e8>
 801ca04:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ca08:	4614      	mov	r4, r2
 801ca0a:	2000      	movs	r0, #0
 801ca0c:	e015      	b.n	801ca3a <__kernel_rem_pio2+0xa2>
 801ca0e:	42d4      	cmn	r4, r2
 801ca10:	d409      	bmi.n	801ca26 <__kernel_rem_pio2+0x8e>
 801ca12:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801ca16:	ee07 1a90 	vmov	s15, r1
 801ca1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ca1e:	eca0 7b02 	vstmia	r0!, {d7}
 801ca22:	3201      	adds	r2, #1
 801ca24:	e7e2      	b.n	801c9ec <__kernel_rem_pio2+0x54>
 801ca26:	eeb0 7b46 	vmov.f64	d7, d6
 801ca2a:	e7f8      	b.n	801ca1e <__kernel_rem_pio2+0x86>
 801ca2c:	ecbc 5b02 	vldmia	ip!, {d5}
 801ca30:	ed94 6b00 	vldr	d6, [r4]
 801ca34:	3001      	adds	r0, #1
 801ca36:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ca3a:	4550      	cmp	r0, sl
 801ca3c:	f1a4 0408 	sub.w	r4, r4, #8
 801ca40:	ddf4      	ble.n	801ca2c <__kernel_rem_pio2+0x94>
 801ca42:	ecae 7b02 	vstmia	lr!, {d7}
 801ca46:	3601      	adds	r6, #1
 801ca48:	3208      	adds	r2, #8
 801ca4a:	e7d7      	b.n	801c9fc <__kernel_rem_pio2+0x64>
 801ca4c:	aa06      	add	r2, sp, #24
 801ca4e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801cc88 <__kernel_rem_pio2+0x2f0>
 801ca52:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801cc90 <__kernel_rem_pio2+0x2f8>
 801ca56:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801ca5a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801ca5e:	9203      	str	r2, [sp, #12]
 801ca60:	9302      	str	r3, [sp, #8]
 801ca62:	464c      	mov	r4, r9
 801ca64:	00e3      	lsls	r3, r4, #3
 801ca66:	9304      	str	r3, [sp, #16]
 801ca68:	ab92      	add	r3, sp, #584	@ 0x248
 801ca6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ca6e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801ca72:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801ca74:	ab06      	add	r3, sp, #24
 801ca76:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801ca7a:	461e      	mov	r6, r3
 801ca7c:	4620      	mov	r0, r4
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	f1a2 0208 	sub.w	r2, r2, #8
 801ca84:	dc4a      	bgt.n	801cb1c <__kernel_rem_pio2+0x184>
 801ca86:	4628      	mov	r0, r5
 801ca88:	9305      	str	r3, [sp, #20]
 801ca8a:	f000 fa01 	bl	801ce90 <scalbn>
 801ca8e:	eeb0 8b40 	vmov.f64	d8, d0
 801ca92:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801ca96:	ee28 0b00 	vmul.f64	d0, d8, d0
 801ca9a:	f000 fa79 	bl	801cf90 <floor>
 801ca9e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801caa2:	eea0 8b47 	vfms.f64	d8, d0, d7
 801caa6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801caaa:	2d00      	cmp	r5, #0
 801caac:	ee17 8a90 	vmov	r8, s15
 801cab0:	9b05      	ldr	r3, [sp, #20]
 801cab2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cab6:	ee38 8b47 	vsub.f64	d8, d8, d7
 801caba:	dd41      	ble.n	801cb40 <__kernel_rem_pio2+0x1a8>
 801cabc:	1e60      	subs	r0, r4, #1
 801cabe:	aa06      	add	r2, sp, #24
 801cac0:	f1c5 0c18 	rsb	ip, r5, #24
 801cac4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801cac8:	fa46 f20c 	asr.w	r2, r6, ip
 801cacc:	4490      	add	r8, r2
 801cace:	fa02 f20c 	lsl.w	r2, r2, ip
 801cad2:	1ab6      	subs	r6, r6, r2
 801cad4:	aa06      	add	r2, sp, #24
 801cad6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801cada:	f1c5 0217 	rsb	r2, r5, #23
 801cade:	4116      	asrs	r6, r2
 801cae0:	2e00      	cmp	r6, #0
 801cae2:	dd3c      	ble.n	801cb5e <__kernel_rem_pio2+0x1c6>
 801cae4:	f04f 0c00 	mov.w	ip, #0
 801cae8:	f108 0801 	add.w	r8, r8, #1
 801caec:	4660      	mov	r0, ip
 801caee:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801caf2:	4564      	cmp	r4, ip
 801caf4:	dc66      	bgt.n	801cbc4 <__kernel_rem_pio2+0x22c>
 801caf6:	2d00      	cmp	r5, #0
 801caf8:	dd03      	ble.n	801cb02 <__kernel_rem_pio2+0x16a>
 801cafa:	2d01      	cmp	r5, #1
 801cafc:	d072      	beq.n	801cbe4 <__kernel_rem_pio2+0x24c>
 801cafe:	2d02      	cmp	r5, #2
 801cb00:	d07a      	beq.n	801cbf8 <__kernel_rem_pio2+0x260>
 801cb02:	2e02      	cmp	r6, #2
 801cb04:	d12b      	bne.n	801cb5e <__kernel_rem_pio2+0x1c6>
 801cb06:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb0a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801cb0e:	b330      	cbz	r0, 801cb5e <__kernel_rem_pio2+0x1c6>
 801cb10:	4628      	mov	r0, r5
 801cb12:	f000 f9bd 	bl	801ce90 <scalbn>
 801cb16:	ee38 8b40 	vsub.f64	d8, d8, d0
 801cb1a:	e020      	b.n	801cb5e <__kernel_rem_pio2+0x1c6>
 801cb1c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801cb20:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801cb24:	3801      	subs	r0, #1
 801cb26:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801cb2a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801cb2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801cb32:	eca6 0a01 	vstmia	r6!, {s0}
 801cb36:	ed92 0b00 	vldr	d0, [r2]
 801cb3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801cb3e:	e79e      	b.n	801ca7e <__kernel_rem_pio2+0xe6>
 801cb40:	d105      	bne.n	801cb4e <__kernel_rem_pio2+0x1b6>
 801cb42:	1e62      	subs	r2, r4, #1
 801cb44:	a906      	add	r1, sp, #24
 801cb46:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801cb4a:	15f6      	asrs	r6, r6, #23
 801cb4c:	e7c8      	b.n	801cae0 <__kernel_rem_pio2+0x148>
 801cb4e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801cb52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb5a:	da31      	bge.n	801cbc0 <__kernel_rem_pio2+0x228>
 801cb5c:	2600      	movs	r6, #0
 801cb5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb66:	f040 809b 	bne.w	801cca0 <__kernel_rem_pio2+0x308>
 801cb6a:	1e62      	subs	r2, r4, #1
 801cb6c:	2000      	movs	r0, #0
 801cb6e:	454a      	cmp	r2, r9
 801cb70:	da49      	bge.n	801cc06 <__kernel_rem_pio2+0x26e>
 801cb72:	2800      	cmp	r0, #0
 801cb74:	d062      	beq.n	801cc3c <__kernel_rem_pio2+0x2a4>
 801cb76:	3c01      	subs	r4, #1
 801cb78:	ab06      	add	r3, sp, #24
 801cb7a:	3d18      	subs	r5, #24
 801cb7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d0f8      	beq.n	801cb76 <__kernel_rem_pio2+0x1de>
 801cb84:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cb88:	4628      	mov	r0, r5
 801cb8a:	f000 f981 	bl	801ce90 <scalbn>
 801cb8e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801cc88 <__kernel_rem_pio2+0x2f0>
 801cb92:	1c62      	adds	r2, r4, #1
 801cb94:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cb96:	00d3      	lsls	r3, r2, #3
 801cb98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801cb9c:	4622      	mov	r2, r4
 801cb9e:	2a00      	cmp	r2, #0
 801cba0:	f280 80a8 	bge.w	801ccf4 <__kernel_rem_pio2+0x35c>
 801cba4:	4622      	mov	r2, r4
 801cba6:	2a00      	cmp	r2, #0
 801cba8:	f2c0 80c6 	blt.w	801cd38 <__kernel_rem_pio2+0x3a0>
 801cbac:	a96a      	add	r1, sp, #424	@ 0x1a8
 801cbae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801cbb2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801cc80 <__kernel_rem_pio2+0x2e8>
 801cbb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801cc9c <__kernel_rem_pio2+0x304>
 801cbba:	2000      	movs	r0, #0
 801cbbc:	1aa1      	subs	r1, r4, r2
 801cbbe:	e0b0      	b.n	801cd22 <__kernel_rem_pio2+0x38a>
 801cbc0:	2602      	movs	r6, #2
 801cbc2:	e78f      	b.n	801cae4 <__kernel_rem_pio2+0x14c>
 801cbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbc8:	b948      	cbnz	r0, 801cbde <__kernel_rem_pio2+0x246>
 801cbca:	b122      	cbz	r2, 801cbd6 <__kernel_rem_pio2+0x23e>
 801cbcc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801cbd0:	f843 2c04 	str.w	r2, [r3, #-4]
 801cbd4:	2201      	movs	r2, #1
 801cbd6:	f10c 0c01 	add.w	ip, ip, #1
 801cbda:	4610      	mov	r0, r2
 801cbdc:	e789      	b.n	801caf2 <__kernel_rem_pio2+0x15a>
 801cbde:	ebae 0202 	sub.w	r2, lr, r2
 801cbe2:	e7f5      	b.n	801cbd0 <__kernel_rem_pio2+0x238>
 801cbe4:	1e62      	subs	r2, r4, #1
 801cbe6:	ab06      	add	r3, sp, #24
 801cbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cbec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cbf0:	a906      	add	r1, sp, #24
 801cbf2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cbf6:	e784      	b.n	801cb02 <__kernel_rem_pio2+0x16a>
 801cbf8:	1e62      	subs	r2, r4, #1
 801cbfa:	ab06      	add	r3, sp, #24
 801cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cc04:	e7f4      	b.n	801cbf0 <__kernel_rem_pio2+0x258>
 801cc06:	ab06      	add	r3, sp, #24
 801cc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cc0c:	3a01      	subs	r2, #1
 801cc0e:	4318      	orrs	r0, r3
 801cc10:	e7ad      	b.n	801cb6e <__kernel_rem_pio2+0x1d6>
 801cc12:	3301      	adds	r3, #1
 801cc14:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801cc18:	2800      	cmp	r0, #0
 801cc1a:	d0fa      	beq.n	801cc12 <__kernel_rem_pio2+0x27a>
 801cc1c:	9a04      	ldr	r2, [sp, #16]
 801cc1e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801cc22:	446a      	add	r2, sp
 801cc24:	eb04 000b 	add.w	r0, r4, fp
 801cc28:	a91a      	add	r1, sp, #104	@ 0x68
 801cc2a:	1c66      	adds	r6, r4, #1
 801cc2c:	3a98      	subs	r2, #152	@ 0x98
 801cc2e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801cc32:	4423      	add	r3, r4
 801cc34:	42b3      	cmp	r3, r6
 801cc36:	da04      	bge.n	801cc42 <__kernel_rem_pio2+0x2aa>
 801cc38:	461c      	mov	r4, r3
 801cc3a:	e713      	b.n	801ca64 <__kernel_rem_pio2+0xcc>
 801cc3c:	9a03      	ldr	r2, [sp, #12]
 801cc3e:	2301      	movs	r3, #1
 801cc40:	e7e8      	b.n	801cc14 <__kernel_rem_pio2+0x27c>
 801cc42:	9902      	ldr	r1, [sp, #8]
 801cc44:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cc48:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801cc4c:	9104      	str	r1, [sp, #16]
 801cc4e:	ee07 1a90 	vmov	s15, r1
 801cc52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cc56:	2400      	movs	r4, #0
 801cc58:	eca0 7b02 	vstmia	r0!, {d7}
 801cc5c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801cc80 <__kernel_rem_pio2+0x2e8>
 801cc60:	4686      	mov	lr, r0
 801cc62:	4554      	cmp	r4, sl
 801cc64:	dd03      	ble.n	801cc6e <__kernel_rem_pio2+0x2d6>
 801cc66:	eca2 7b02 	vstmia	r2!, {d7}
 801cc6a:	3601      	adds	r6, #1
 801cc6c:	e7e2      	b.n	801cc34 <__kernel_rem_pio2+0x29c>
 801cc6e:	ecbc 5b02 	vldmia	ip!, {d5}
 801cc72:	ed3e 6b02 	vldmdb	lr!, {d6}
 801cc76:	3401      	adds	r4, #1
 801cc78:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cc7c:	e7f1      	b.n	801cc62 <__kernel_rem_pio2+0x2ca>
 801cc7e:	bf00      	nop
	...
 801cc8c:	3e700000 	.word	0x3e700000
 801cc90:	00000000 	.word	0x00000000
 801cc94:	41700000 	.word	0x41700000
 801cc98:	0801df18 	.word	0x0801df18
 801cc9c:	0801ded8 	.word	0x0801ded8
 801cca0:	4268      	negs	r0, r5
 801cca2:	eeb0 0b48 	vmov.f64	d0, d8
 801cca6:	f000 f8f3 	bl	801ce90 <scalbn>
 801ccaa:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801ce78 <__kernel_rem_pio2+0x4e0>
 801ccae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801ccb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccb6:	db17      	blt.n	801cce8 <__kernel_rem_pio2+0x350>
 801ccb8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801ce80 <__kernel_rem_pio2+0x4e8>
 801ccbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ccc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ccc4:	aa06      	add	r2, sp, #24
 801ccc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801ccca:	eea5 0b46 	vfms.f64	d0, d5, d6
 801ccce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ccd2:	3518      	adds	r5, #24
 801ccd4:	ee10 3a10 	vmov	r3, s0
 801ccd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ccdc:	ee17 3a10 	vmov	r3, s14
 801cce0:	3401      	adds	r4, #1
 801cce2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801cce6:	e74d      	b.n	801cb84 <__kernel_rem_pio2+0x1ec>
 801cce8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ccec:	aa06      	add	r2, sp, #24
 801ccee:	ee10 3a10 	vmov	r3, s0
 801ccf2:	e7f6      	b.n	801cce2 <__kernel_rem_pio2+0x34a>
 801ccf4:	a806      	add	r0, sp, #24
 801ccf6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801ccfa:	9001      	str	r0, [sp, #4]
 801ccfc:	ee07 0a90 	vmov	s15, r0
 801cd00:	3a01      	subs	r2, #1
 801cd02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cd06:	ee27 7b00 	vmul.f64	d7, d7, d0
 801cd0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801cd0e:	ed21 7b02 	vstmdb	r1!, {d7}
 801cd12:	e744      	b.n	801cb9e <__kernel_rem_pio2+0x206>
 801cd14:	ecbc 5b02 	vldmia	ip!, {d5}
 801cd18:	ecb5 6b02 	vldmia	r5!, {d6}
 801cd1c:	3001      	adds	r0, #1
 801cd1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cd22:	4548      	cmp	r0, r9
 801cd24:	dc01      	bgt.n	801cd2a <__kernel_rem_pio2+0x392>
 801cd26:	4281      	cmp	r1, r0
 801cd28:	daf4      	bge.n	801cd14 <__kernel_rem_pio2+0x37c>
 801cd2a:	a842      	add	r0, sp, #264	@ 0x108
 801cd2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801cd30:	ed81 7b00 	vstr	d7, [r1]
 801cd34:	3a01      	subs	r2, #1
 801cd36:	e736      	b.n	801cba6 <__kernel_rem_pio2+0x20e>
 801cd38:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801cd3a:	2a02      	cmp	r2, #2
 801cd3c:	dc0a      	bgt.n	801cd54 <__kernel_rem_pio2+0x3bc>
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	dc2d      	bgt.n	801cd9e <__kernel_rem_pio2+0x406>
 801cd42:	d046      	beq.n	801cdd2 <__kernel_rem_pio2+0x43a>
 801cd44:	f008 0007 	and.w	r0, r8, #7
 801cd48:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801cd4c:	ecbd 8b06 	vpop	{d8-d10}
 801cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd54:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801cd56:	2a03      	cmp	r2, #3
 801cd58:	d1f4      	bne.n	801cd44 <__kernel_rem_pio2+0x3ac>
 801cd5a:	a942      	add	r1, sp, #264	@ 0x108
 801cd5c:	f1a3 0208 	sub.w	r2, r3, #8
 801cd60:	440a      	add	r2, r1
 801cd62:	4611      	mov	r1, r2
 801cd64:	4620      	mov	r0, r4
 801cd66:	2800      	cmp	r0, #0
 801cd68:	f1a1 0108 	sub.w	r1, r1, #8
 801cd6c:	dc52      	bgt.n	801ce14 <__kernel_rem_pio2+0x47c>
 801cd6e:	4621      	mov	r1, r4
 801cd70:	2901      	cmp	r1, #1
 801cd72:	f1a2 0208 	sub.w	r2, r2, #8
 801cd76:	dc5d      	bgt.n	801ce34 <__kernel_rem_pio2+0x49c>
 801cd78:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801ce88 <__kernel_rem_pio2+0x4f0>
 801cd7c:	aa42      	add	r2, sp, #264	@ 0x108
 801cd7e:	4413      	add	r3, r2
 801cd80:	2c01      	cmp	r4, #1
 801cd82:	dc67      	bgt.n	801ce54 <__kernel_rem_pio2+0x4bc>
 801cd84:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801cd88:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801cd8c:	2e00      	cmp	r6, #0
 801cd8e:	d167      	bne.n	801ce60 <__kernel_rem_pio2+0x4c8>
 801cd90:	ed87 5b00 	vstr	d5, [r7]
 801cd94:	ed87 6b02 	vstr	d6, [r7, #8]
 801cd98:	ed87 7b04 	vstr	d7, [r7, #16]
 801cd9c:	e7d2      	b.n	801cd44 <__kernel_rem_pio2+0x3ac>
 801cd9e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801ce88 <__kernel_rem_pio2+0x4f0>
 801cda2:	aa42      	add	r2, sp, #264	@ 0x108
 801cda4:	4413      	add	r3, r2
 801cda6:	4622      	mov	r2, r4
 801cda8:	2a00      	cmp	r2, #0
 801cdaa:	da24      	bge.n	801cdf6 <__kernel_rem_pio2+0x45e>
 801cdac:	b34e      	cbz	r6, 801ce02 <__kernel_rem_pio2+0x46a>
 801cdae:	eeb1 7b46 	vneg.f64	d7, d6
 801cdb2:	ed87 7b00 	vstr	d7, [r7]
 801cdb6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801cdba:	aa44      	add	r2, sp, #272	@ 0x110
 801cdbc:	2301      	movs	r3, #1
 801cdbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cdc2:	429c      	cmp	r4, r3
 801cdc4:	da20      	bge.n	801ce08 <__kernel_rem_pio2+0x470>
 801cdc6:	b10e      	cbz	r6, 801cdcc <__kernel_rem_pio2+0x434>
 801cdc8:	eeb1 7b47 	vneg.f64	d7, d7
 801cdcc:	ed87 7b02 	vstr	d7, [r7, #8]
 801cdd0:	e7b8      	b.n	801cd44 <__kernel_rem_pio2+0x3ac>
 801cdd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801ce88 <__kernel_rem_pio2+0x4f0>
 801cdd6:	aa42      	add	r2, sp, #264	@ 0x108
 801cdd8:	4413      	add	r3, r2
 801cdda:	2c00      	cmp	r4, #0
 801cddc:	da05      	bge.n	801cdea <__kernel_rem_pio2+0x452>
 801cdde:	b10e      	cbz	r6, 801cde4 <__kernel_rem_pio2+0x44c>
 801cde0:	eeb1 7b47 	vneg.f64	d7, d7
 801cde4:	ed87 7b00 	vstr	d7, [r7]
 801cde8:	e7ac      	b.n	801cd44 <__kernel_rem_pio2+0x3ac>
 801cdea:	ed33 6b02 	vldmdb	r3!, {d6}
 801cdee:	3c01      	subs	r4, #1
 801cdf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801cdf4:	e7f1      	b.n	801cdda <__kernel_rem_pio2+0x442>
 801cdf6:	ed33 7b02 	vldmdb	r3!, {d7}
 801cdfa:	3a01      	subs	r2, #1
 801cdfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ce00:	e7d2      	b.n	801cda8 <__kernel_rem_pio2+0x410>
 801ce02:	eeb0 7b46 	vmov.f64	d7, d6
 801ce06:	e7d4      	b.n	801cdb2 <__kernel_rem_pio2+0x41a>
 801ce08:	ecb2 6b02 	vldmia	r2!, {d6}
 801ce0c:	3301      	adds	r3, #1
 801ce0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce12:	e7d6      	b.n	801cdc2 <__kernel_rem_pio2+0x42a>
 801ce14:	ed91 7b00 	vldr	d7, [r1]
 801ce18:	ed91 5b02 	vldr	d5, [r1, #8]
 801ce1c:	3801      	subs	r0, #1
 801ce1e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ce22:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce26:	ed81 6b00 	vstr	d6, [r1]
 801ce2a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ce2e:	ed81 7b02 	vstr	d7, [r1, #8]
 801ce32:	e798      	b.n	801cd66 <__kernel_rem_pio2+0x3ce>
 801ce34:	ed92 7b00 	vldr	d7, [r2]
 801ce38:	ed92 5b02 	vldr	d5, [r2, #8]
 801ce3c:	3901      	subs	r1, #1
 801ce3e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ce42:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce46:	ed82 6b00 	vstr	d6, [r2]
 801ce4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801ce4e:	ed82 7b02 	vstr	d7, [r2, #8]
 801ce52:	e78d      	b.n	801cd70 <__kernel_rem_pio2+0x3d8>
 801ce54:	ed33 6b02 	vldmdb	r3!, {d6}
 801ce58:	3c01      	subs	r4, #1
 801ce5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce5e:	e78f      	b.n	801cd80 <__kernel_rem_pio2+0x3e8>
 801ce60:	eeb1 5b45 	vneg.f64	d5, d5
 801ce64:	eeb1 6b46 	vneg.f64	d6, d6
 801ce68:	ed87 5b00 	vstr	d5, [r7]
 801ce6c:	eeb1 7b47 	vneg.f64	d7, d7
 801ce70:	ed87 6b02 	vstr	d6, [r7, #8]
 801ce74:	e790      	b.n	801cd98 <__kernel_rem_pio2+0x400>
 801ce76:	bf00      	nop
 801ce78:	00000000 	.word	0x00000000
 801ce7c:	41700000 	.word	0x41700000
 801ce80:	00000000 	.word	0x00000000
 801ce84:	3e700000 	.word	0x3e700000
	...

0801ce90 <scalbn>:
 801ce90:	ee10 1a90 	vmov	r1, s1
 801ce94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ce98:	b98b      	cbnz	r3, 801cebe <scalbn+0x2e>
 801ce9a:	ee10 3a10 	vmov	r3, s0
 801ce9e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cea2:	4319      	orrs	r1, r3
 801cea4:	d00a      	beq.n	801cebc <scalbn+0x2c>
 801cea6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801cf58 <scalbn+0xc8>
 801ceaa:	4b37      	ldr	r3, [pc, #220]	@ (801cf88 <scalbn+0xf8>)
 801ceac:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ceb0:	4298      	cmp	r0, r3
 801ceb2:	da0b      	bge.n	801cecc <scalbn+0x3c>
 801ceb4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801cf60 <scalbn+0xd0>
 801ceb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cebc:	4770      	bx	lr
 801cebe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801cec2:	4293      	cmp	r3, r2
 801cec4:	d107      	bne.n	801ced6 <scalbn+0x46>
 801cec6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ceca:	4770      	bx	lr
 801cecc:	ee10 1a90 	vmov	r1, s1
 801ced0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ced4:	3b36      	subs	r3, #54	@ 0x36
 801ced6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801ceda:	4290      	cmp	r0, r2
 801cedc:	dd0d      	ble.n	801cefa <scalbn+0x6a>
 801cede:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801cf68 <scalbn+0xd8>
 801cee2:	ee10 3a90 	vmov	r3, s1
 801cee6:	eeb0 6b47 	vmov.f64	d6, d7
 801ceea:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801cf70 <scalbn+0xe0>
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	fe27 7b05 	vselge.f64	d7, d7, d5
 801cef4:	ee27 0b06 	vmul.f64	d0, d7, d6
 801cef8:	4770      	bx	lr
 801cefa:	4418      	add	r0, r3
 801cefc:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801cf00:	4298      	cmp	r0, r3
 801cf02:	dcec      	bgt.n	801cede <scalbn+0x4e>
 801cf04:	2800      	cmp	r0, #0
 801cf06:	dd0a      	ble.n	801cf1e <scalbn+0x8e>
 801cf08:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cf0c:	ec53 2b10 	vmov	r2, r3, d0
 801cf10:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cf14:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801cf18:	ec43 2b10 	vmov	d0, r2, r3
 801cf1c:	4770      	bx	lr
 801cf1e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801cf22:	da09      	bge.n	801cf38 <scalbn+0xa8>
 801cf24:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801cf60 <scalbn+0xd0>
 801cf28:	ee10 3a90 	vmov	r3, s1
 801cf2c:	eeb0 6b47 	vmov.f64	d6, d7
 801cf30:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801cf78 <scalbn+0xe8>
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	e7db      	b.n	801cef0 <scalbn+0x60>
 801cf38:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801cf3c:	ec53 2b10 	vmov	r2, r3, d0
 801cf40:	3036      	adds	r0, #54	@ 0x36
 801cf42:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801cf46:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801cf4a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801cf80 <scalbn+0xf0>
 801cf4e:	ec43 2b10 	vmov	d0, r2, r3
 801cf52:	e7b1      	b.n	801ceb8 <scalbn+0x28>
 801cf54:	f3af 8000 	nop.w
 801cf58:	00000000 	.word	0x00000000
 801cf5c:	43500000 	.word	0x43500000
 801cf60:	c2f8f359 	.word	0xc2f8f359
 801cf64:	01a56e1f 	.word	0x01a56e1f
 801cf68:	8800759c 	.word	0x8800759c
 801cf6c:	7e37e43c 	.word	0x7e37e43c
 801cf70:	8800759c 	.word	0x8800759c
 801cf74:	fe37e43c 	.word	0xfe37e43c
 801cf78:	c2f8f359 	.word	0xc2f8f359
 801cf7c:	81a56e1f 	.word	0x81a56e1f
 801cf80:	00000000 	.word	0x00000000
 801cf84:	3c900000 	.word	0x3c900000
 801cf88:	ffff3cb0 	.word	0xffff3cb0
 801cf8c:	00000000 	.word	0x00000000

0801cf90 <floor>:
 801cf90:	ee10 3a90 	vmov	r3, s1
 801cf94:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801cf98:	ee10 2a10 	vmov	r2, s0
 801cf9c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801cfa0:	2913      	cmp	r1, #19
 801cfa2:	b530      	push	{r4, r5, lr}
 801cfa4:	4615      	mov	r5, r2
 801cfa6:	dc33      	bgt.n	801d010 <floor+0x80>
 801cfa8:	2900      	cmp	r1, #0
 801cfaa:	da18      	bge.n	801cfde <floor+0x4e>
 801cfac:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d070 <floor+0xe0>
 801cfb0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cfb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfbc:	dd0a      	ble.n	801cfd4 <floor+0x44>
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	da50      	bge.n	801d064 <floor+0xd4>
 801cfc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cfc6:	4313      	orrs	r3, r2
 801cfc8:	2200      	movs	r2, #0
 801cfca:	4293      	cmp	r3, r2
 801cfcc:	4b2a      	ldr	r3, [pc, #168]	@ (801d078 <floor+0xe8>)
 801cfce:	bf08      	it	eq
 801cfd0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	4610      	mov	r0, r2
 801cfd8:	ec41 0b10 	vmov	d0, r0, r1
 801cfdc:	e01f      	b.n	801d01e <floor+0x8e>
 801cfde:	4827      	ldr	r0, [pc, #156]	@ (801d07c <floor+0xec>)
 801cfe0:	4108      	asrs	r0, r1
 801cfe2:	ea03 0400 	and.w	r4, r3, r0
 801cfe6:	4314      	orrs	r4, r2
 801cfe8:	d019      	beq.n	801d01e <floor+0x8e>
 801cfea:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d070 <floor+0xe0>
 801cfee:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cff2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cffa:	ddeb      	ble.n	801cfd4 <floor+0x44>
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	bfbe      	ittt	lt
 801d000:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d004:	410a      	asrlt	r2, r1
 801d006:	189b      	addlt	r3, r3, r2
 801d008:	ea23 0300 	bic.w	r3, r3, r0
 801d00c:	2200      	movs	r2, #0
 801d00e:	e7e1      	b.n	801cfd4 <floor+0x44>
 801d010:	2933      	cmp	r1, #51	@ 0x33
 801d012:	dd05      	ble.n	801d020 <floor+0x90>
 801d014:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d018:	d101      	bne.n	801d01e <floor+0x8e>
 801d01a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d01e:	bd30      	pop	{r4, r5, pc}
 801d020:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d024:	f04f 30ff 	mov.w	r0, #4294967295
 801d028:	40e0      	lsrs	r0, r4
 801d02a:	4210      	tst	r0, r2
 801d02c:	d0f7      	beq.n	801d01e <floor+0x8e>
 801d02e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d070 <floor+0xe0>
 801d032:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d036:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d03e:	ddc9      	ble.n	801cfd4 <floor+0x44>
 801d040:	2b00      	cmp	r3, #0
 801d042:	da02      	bge.n	801d04a <floor+0xba>
 801d044:	2914      	cmp	r1, #20
 801d046:	d103      	bne.n	801d050 <floor+0xc0>
 801d048:	3301      	adds	r3, #1
 801d04a:	ea22 0200 	bic.w	r2, r2, r0
 801d04e:	e7c1      	b.n	801cfd4 <floor+0x44>
 801d050:	2401      	movs	r4, #1
 801d052:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d056:	fa04 f101 	lsl.w	r1, r4, r1
 801d05a:	440a      	add	r2, r1
 801d05c:	42aa      	cmp	r2, r5
 801d05e:	bf38      	it	cc
 801d060:	191b      	addcc	r3, r3, r4
 801d062:	e7f2      	b.n	801d04a <floor+0xba>
 801d064:	2200      	movs	r2, #0
 801d066:	4613      	mov	r3, r2
 801d068:	e7b4      	b.n	801cfd4 <floor+0x44>
 801d06a:	bf00      	nop
 801d06c:	f3af 8000 	nop.w
 801d070:	8800759c 	.word	0x8800759c
 801d074:	7e37e43c 	.word	0x7e37e43c
 801d078:	bff00000 	.word	0xbff00000
 801d07c:	000fffff 	.word	0x000fffff

0801d080 <_init>:
 801d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d082:	bf00      	nop
 801d084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d086:	bc08      	pop	{r3}
 801d088:	469e      	mov	lr, r3
 801d08a:	4770      	bx	lr

0801d08c <_fini>:
 801d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d08e:	bf00      	nop
 801d090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d092:	bc08      	pop	{r3}
 801d094:	469e      	mov	lr, r3
 801d096:	4770      	bx	lr
