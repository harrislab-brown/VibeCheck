
VibeCheck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de20  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  0801e0f0  0801e0f0  0001f0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f578  0801f578  00020578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f580  0801f580  00020580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801f584  0801f584  00020584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  24000000  0801f588  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d744  240002fc  0801f884  000212fc  2**2
                  ALLOC
  8 ._user_heap_stack 00006400  2401da40  0801f884  00021a40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000212fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003be05  00000000  00000000  0002132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000078d2  00000000  00000000  0005d12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029a0  00000000  00000000  00064a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000203a  00000000  00000000  000673a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003eecb  00000000  00000000  000693e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003db7a  00000000  00000000  000a82ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173510  00000000  00000000  000e5e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00259337  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c6a0  00000000  00000000  0025937c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000000a6  00000000  00000000  00265a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  00265ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002fc 	.word	0x240002fc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e0d8 	.word	0x0801e0d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000300 	.word	0x24000300
 800030c:	0801e0d8 	.word	0x0801e0d8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a2 	b.w	8000ab4 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	460c      	mov	r4, r1
 8000800:	2b00      	cmp	r3, #0
 8000802:	d14e      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000804:	4694      	mov	ip, r2
 8000806:	458c      	cmp	ip, r1
 8000808:	4686      	mov	lr, r0
 800080a:	fab2 f282 	clz	r2, r2
 800080e:	d962      	bls.n	80008d6 <__udivmoddi4+0xde>
 8000810:	b14a      	cbz	r2, 8000826 <__udivmoddi4+0x2e>
 8000812:	f1c2 0320 	rsb	r3, r2, #32
 8000816:	4091      	lsls	r1, r2
 8000818:	fa20 f303 	lsr.w	r3, r0, r3
 800081c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000820:	4319      	orrs	r1, r3
 8000822:	fa00 fe02 	lsl.w	lr, r0, r2
 8000826:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800082a:	fa1f f68c 	uxth.w	r6, ip
 800082e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000832:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000836:	fb07 1114 	mls	r1, r7, r4, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb04 f106 	mul.w	r1, r4, r6
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f104 30ff 	add.w	r0, r4, #4294967295
 800084e:	f080 8112 	bcs.w	8000a76 <__udivmoddi4+0x27e>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 810f 	bls.w	8000a76 <__udivmoddi4+0x27e>
 8000858:	3c02      	subs	r4, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a59      	subs	r1, r3, r1
 800085e:	fa1f f38e 	uxth.w	r3, lr
 8000862:	fbb1 f0f7 	udiv	r0, r1, r7
 8000866:	fb07 1110 	mls	r1, r7, r0, r1
 800086a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800086e:	fb00 f606 	mul.w	r6, r0, r6
 8000872:	429e      	cmp	r6, r3
 8000874:	d90a      	bls.n	800088c <__udivmoddi4+0x94>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 31ff 	add.w	r1, r0, #4294967295
 800087e:	f080 80fc 	bcs.w	8000a7a <__udivmoddi4+0x282>
 8000882:	429e      	cmp	r6, r3
 8000884:	f240 80f9 	bls.w	8000a7a <__udivmoddi4+0x282>
 8000888:	4463      	add	r3, ip
 800088a:	3802      	subs	r0, #2
 800088c:	1b9b      	subs	r3, r3, r6
 800088e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000892:	2100      	movs	r1, #0
 8000894:	b11d      	cbz	r5, 800089e <__udivmoddi4+0xa6>
 8000896:	40d3      	lsrs	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	e9c5 3200 	strd	r3, r2, [r5]
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d905      	bls.n	80008b2 <__udivmoddi4+0xba>
 80008a6:	b10d      	cbz	r5, 80008ac <__udivmoddi4+0xb4>
 80008a8:	e9c5 0100 	strd	r0, r1, [r5]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4608      	mov	r0, r1
 80008b0:	e7f5      	b.n	800089e <__udivmoddi4+0xa6>
 80008b2:	fab3 f183 	clz	r1, r3
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d146      	bne.n	8000948 <__udivmoddi4+0x150>
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	d302      	bcc.n	80008c4 <__udivmoddi4+0xcc>
 80008be:	4290      	cmp	r0, r2
 80008c0:	f0c0 80f0 	bcc.w	8000aa4 <__udivmoddi4+0x2ac>
 80008c4:	1a86      	subs	r6, r0, r2
 80008c6:	eb64 0303 	sbc.w	r3, r4, r3
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0e6      	beq.n	800089e <__udivmoddi4+0xa6>
 80008d0:	e9c5 6300 	strd	r6, r3, [r5]
 80008d4:	e7e3      	b.n	800089e <__udivmoddi4+0xa6>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	f040 8090 	bne.w	80009fc <__udivmoddi4+0x204>
 80008dc:	eba1 040c 	sub.w	r4, r1, ip
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa1f f78c 	uxth.w	r7, ip
 80008e8:	2101      	movs	r1, #1
 80008ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008f2:	fb08 4416 	mls	r4, r8, r6, r4
 80008f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008fa:	fb07 f006 	mul.w	r0, r7, r6
 80008fe:	4298      	cmp	r0, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x11c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f106 34ff 	add.w	r4, r6, #4294967295
 800090a:	d202      	bcs.n	8000912 <__udivmoddi4+0x11a>
 800090c:	4298      	cmp	r0, r3
 800090e:	f200 80cd 	bhi.w	8000aac <__udivmoddi4+0x2b4>
 8000912:	4626      	mov	r6, r4
 8000914:	1a1c      	subs	r4, r3, r0
 8000916:	fa1f f38e 	uxth.w	r3, lr
 800091a:	fbb4 f0f8 	udiv	r0, r4, r8
 800091e:	fb08 4410 	mls	r4, r8, r0, r4
 8000922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000926:	fb00 f707 	mul.w	r7, r0, r7
 800092a:	429f      	cmp	r7, r3
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x148>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f100 34ff 	add.w	r4, r0, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x146>
 8000938:	429f      	cmp	r7, r3
 800093a:	f200 80b0 	bhi.w	8000a9e <__udivmoddi4+0x2a6>
 800093e:	4620      	mov	r0, r4
 8000940:	1bdb      	subs	r3, r3, r7
 8000942:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000946:	e7a5      	b.n	8000894 <__udivmoddi4+0x9c>
 8000948:	f1c1 0620 	rsb	r6, r1, #32
 800094c:	408b      	lsls	r3, r1
 800094e:	fa22 f706 	lsr.w	r7, r2, r6
 8000952:	431f      	orrs	r7, r3
 8000954:	fa20 fc06 	lsr.w	ip, r0, r6
 8000958:	fa04 f301 	lsl.w	r3, r4, r1
 800095c:	ea43 030c 	orr.w	r3, r3, ip
 8000960:	40f4      	lsrs	r4, r6
 8000962:	fa00 f801 	lsl.w	r8, r0, r1
 8000966:	0c38      	lsrs	r0, r7, #16
 8000968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800096c:	fbb4 fef0 	udiv	lr, r4, r0
 8000970:	fa1f fc87 	uxth.w	ip, r7
 8000974:	fb00 441e 	mls	r4, r0, lr, r4
 8000978:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800097c:	fb0e f90c 	mul.w	r9, lr, ip
 8000980:	45a1      	cmp	r9, r4
 8000982:	fa02 f201 	lsl.w	r2, r2, r1
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x1a6>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800098e:	f080 8084 	bcs.w	8000a9a <__udivmoddi4+0x2a2>
 8000992:	45a1      	cmp	r9, r4
 8000994:	f240 8081 	bls.w	8000a9a <__udivmoddi4+0x2a2>
 8000998:	f1ae 0e02 	sub.w	lr, lr, #2
 800099c:	443c      	add	r4, r7
 800099e:	eba4 0409 	sub.w	r4, r4, r9
 80009a2:	fa1f f983 	uxth.w	r9, r3
 80009a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80009aa:	fb00 4413 	mls	r4, r0, r3, r4
 80009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80009b6:	45a4      	cmp	ip, r4
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x1d2>
 80009ba:	193c      	adds	r4, r7, r4
 80009bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80009c0:	d267      	bcs.n	8000a92 <__udivmoddi4+0x29a>
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d965      	bls.n	8000a92 <__udivmoddi4+0x29a>
 80009c6:	3b02      	subs	r3, #2
 80009c8:	443c      	add	r4, r7
 80009ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ce:	fba0 9302 	umull	r9, r3, r0, r2
 80009d2:	eba4 040c 	sub.w	r4, r4, ip
 80009d6:	429c      	cmp	r4, r3
 80009d8:	46ce      	mov	lr, r9
 80009da:	469c      	mov	ip, r3
 80009dc:	d351      	bcc.n	8000a82 <__udivmoddi4+0x28a>
 80009de:	d04e      	beq.n	8000a7e <__udivmoddi4+0x286>
 80009e0:	b155      	cbz	r5, 80009f8 <__udivmoddi4+0x200>
 80009e2:	ebb8 030e 	subs.w	r3, r8, lr
 80009e6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ea:	fa04 f606 	lsl.w	r6, r4, r6
 80009ee:	40cb      	lsrs	r3, r1
 80009f0:	431e      	orrs	r6, r3
 80009f2:	40cc      	lsrs	r4, r1
 80009f4:	e9c5 6400 	strd	r6, r4, [r5]
 80009f8:	2100      	movs	r1, #0
 80009fa:	e750      	b.n	800089e <__udivmoddi4+0xa6>
 80009fc:	f1c2 0320 	rsb	r3, r2, #32
 8000a00:	fa20 f103 	lsr.w	r1, r0, r3
 8000a04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a08:	fa24 f303 	lsr.w	r3, r4, r3
 8000a0c:	4094      	lsls	r4, r2
 8000a0e:	430c      	orrs	r4, r1
 8000a10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a20:	fb08 3110 	mls	r1, r8, r0, r3
 8000a24:	0c23      	lsrs	r3, r4, #16
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f107 	mul.w	r1, r0, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x24c>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a3a:	d22c      	bcs.n	8000a96 <__udivmoddi4+0x29e>
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d92a      	bls.n	8000a96 <__udivmoddi4+0x29e>
 8000a40:	3802      	subs	r0, #2
 8000a42:	4463      	add	r3, ip
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb01 f307 	mul.w	r3, r1, r7
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d908      	bls.n	8000a6e <__udivmoddi4+0x276>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a64:	d213      	bcs.n	8000a8e <__udivmoddi4+0x296>
 8000a66:	42a3      	cmp	r3, r4
 8000a68:	d911      	bls.n	8000a8e <__udivmoddi4+0x296>
 8000a6a:	3902      	subs	r1, #2
 8000a6c:	4464      	add	r4, ip
 8000a6e:	1ae4      	subs	r4, r4, r3
 8000a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a74:	e739      	b.n	80008ea <__udivmoddi4+0xf2>
 8000a76:	4604      	mov	r4, r0
 8000a78:	e6f0      	b.n	800085c <__udivmoddi4+0x64>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e706      	b.n	800088c <__udivmoddi4+0x94>
 8000a7e:	45c8      	cmp	r8, r9
 8000a80:	d2ae      	bcs.n	80009e0 <__udivmoddi4+0x1e8>
 8000a82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a8a:	3801      	subs	r0, #1
 8000a8c:	e7a8      	b.n	80009e0 <__udivmoddi4+0x1e8>
 8000a8e:	4631      	mov	r1, r6
 8000a90:	e7ed      	b.n	8000a6e <__udivmoddi4+0x276>
 8000a92:	4603      	mov	r3, r0
 8000a94:	e799      	b.n	80009ca <__udivmoddi4+0x1d2>
 8000a96:	4630      	mov	r0, r6
 8000a98:	e7d4      	b.n	8000a44 <__udivmoddi4+0x24c>
 8000a9a:	46d6      	mov	lr, sl
 8000a9c:	e77f      	b.n	800099e <__udivmoddi4+0x1a6>
 8000a9e:	4463      	add	r3, ip
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	e74d      	b.n	8000940 <__udivmoddi4+0x148>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e70f      	b.n	80008cc <__udivmoddi4+0xd4>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	e730      	b.n	8000914 <__udivmoddi4+0x11c>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LSM6DS3_Init>:

void LSM6DS3_Init(LSM6DS3* sensor, LSM6DS3_Config* config, SPI_HandleTypeDef* spi,  /* set the configuration parameters that need to be set once */
		GPIO_TypeDef* cs_port, uint16_t cs_pin,
		GPIO_TypeDef* int1_port, uint16_t int1_pin,
		GPIO_TypeDef* int2_port, uint16_t int2_pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	sensor->config = config;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	61da      	str	r2, [r3, #28]
	sensor->spi = spi;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	sensor->cs_port = cs_port;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	sensor->cs_pin = cs_pin;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	8b3a      	ldrh	r2, [r7, #24]
 8000adc:	811a      	strh	r2, [r3, #8]
	sensor->int1_port = int1_port;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	69fa      	ldr	r2, [r7, #28]
 8000ae2:	60da      	str	r2, [r3, #12]
	sensor->int1_pin = int1_pin;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8c3a      	ldrh	r2, [r7, #32]
 8000ae8:	821a      	strh	r2, [r3, #16]
	sensor->int2_port = int2_port;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	615a      	str	r2, [r3, #20]
	sensor->int2_pin = int2_pin;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000af4:	831a      	strh	r2, [r3, #24]

	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000af6:	8b3b      	ldrh	r3, [r7, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6838      	ldr	r0, [r7, #0]
 8000afe:	f00b fb95 	bl	800c22c <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop

08000b0c <LSM6DS3_TestCommunication>:


uint32_t LSM6DS3_TestCommunication(LSM6DS3* sensor)  /* check that the sensor is connected by querying its device ID */
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t reg_data;
	HAL_StatusTypeDef status = LSM6DS3_ReadRegister(sensor, LSM6DS3_REG_WHO_AM_I, &reg_data);
 8000b14:	f107 030e 	add.w	r3, r7, #14
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fb25 	bl	800116c <LSM6DS3_ReadRegister>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK && reg_data == LSM6DS3_DEVICE_ID)
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b6a      	cmp	r3, #106	@ 0x6a
 8000b30:	d101      	bne.n	8000b36 <LSM6DS3_TestCommunication+0x2a>
		return 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <LSM6DS3_TestCommunication+0x2c>
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LSM6DS3_Configure>:

/* configure the sensor */
/* this should be called each time we change a sensor setting so the chip can be updated */
void LSM6DS3_Configure(LSM6DS3* sensor)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	LSM6DS3_StopAccel(sensor);  /* disable the sensor before messing with the parameters */
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f9d7 	bl	8000efc <LSM6DS3_StopAccel>
	LSM6DS3_StopGyro(sensor);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 f9e2 	bl	8000f18 <LSM6DS3_StopGyro>

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_DRDY_PULSE_CFG_G, 0b10000000);  /* pulse the data ready pins instead of latching them */
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	210b      	movs	r1, #11
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fb3b 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT1_CTRL, 0x01);  /* INT1 set when accel data ready (p. 59) */
 8000b5e:	2201      	movs	r2, #1
 8000b60:	210d      	movs	r1, #13
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fb36 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_INT2_CTRL, 0x02);  /* INT2 set when gyro data ready (p. 60) */
 8000b68:	2202      	movs	r2, #2
 8000b6a:	210e      	movs	r1, #14
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fb31 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL4_C, 0b00000100);  /* disable the I2C interface, also disables the gyro LPF1 (p. 64) */
 8000b72:	2204      	movs	r2, #4
 8000b74:	2113      	movs	r1, #19
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f000 fb2c 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL6_C, 0b00000000);  /* sets the user offset weights to 2^(-10) g/LSB and the gyro LPF bandwidth (p. 66) */
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2115      	movs	r1, #21
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fb27 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL7_G, 0b00000000);  /* disables the gyro HPF (p. 67) */
 8000b86:	2200      	movs	r2, #0
 8000b88:	2116      	movs	r1, #22
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fb22 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL8_XL, 0b00000000);  /* acceleration filters, configured to keep us on the LPF1 path (p. 67) */
 8000b90:	2200      	movs	r2, #0
 8000b92:	2117      	movs	r1, #23
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fb1d 	bl	80011d4 <LSM6DS3_WriteRegister>

	float x, y, z;
	LSM6DS3_ReadAccel(sensor, &x, &y, &z);  /* just to make sure no status flags get stuck high, read out the data registers (this will reset the data status flags) */
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	f107 0210 	add.w	r2, r7, #16
 8000ba2:	f107 0114 	add.w	r1, r7, #20
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f9c4 	bl	8000f34 <LSM6DS3_ReadAccel>
	LSM6DS3_ReadGyro(sensor, &x, &y, &z);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0114 	add.w	r1, r7, #20
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa49 	bl	8001050 <LSM6DS3_ReadGyro>
	sensor->accel_x = 0;  /* then reset the local data storage since the values read will likely be garbage */
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
	sensor->accel_y = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->accel_z = 0;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->gyro_x = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor->gyro_y = 0;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
	sensor->gyro_z = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34

	LSM6DS3_WriteOffsets(sensor);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f804 	bl	8000bfc <LSM6DS3_WriteOffsets>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LSM6DS3_WriteOffsets>:


void LSM6DS3_WriteOffsets(LSM6DS3* sensor)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	/* x, y, z are the DC offsets of the sensor in g */
	/* this function will write to the user offset registers of the accelerometer chip to correct the offset */
	/* we assume the weight of the user offsets is 2^(-10) g/LSB */

	int8_t x_b = (int8_t)(sensor->config->usr_offset_x / 0.0009765625f);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	ed93 7a00 	vldr	s14, [r3]
 8000c0c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c18:	edc7 7a00 	vstr	s15, [r7]
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	73fb      	strb	r3, [r7, #15]
	int8_t y_b = (int8_t)(sensor->config->usr_offset_y / 0.0009765625f);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c28:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c34:	edc7 7a00 	vstr	s15, [r7]
 8000c38:	783b      	ldrb	r3, [r7, #0]
 8000c3a:	73bb      	strb	r3, [r7, #14]
	int8_t z_b = (int8_t)(sensor->config->usr_offset_z / 0.0009765625f);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c44:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000c84 <LSM6DS3_WriteOffsets+0x88>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	edc7 7a00 	vstr	s15, [r7]
 8000c54:	783b      	ldrb	r3, [r7, #0]
 8000c56:	737b      	strb	r3, [r7, #13]

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_X_OFS_USR, x_b);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2173      	movs	r1, #115	@ 0x73
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 fab8 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Y_OFS_USR, y_b);
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2174      	movs	r1, #116	@ 0x74
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fab2 	bl	80011d4 <LSM6DS3_WriteRegister>
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_Z_OFS_USR, z_b);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	461a      	mov	r2, r3
 8000c74:	2175      	movs	r1, #117	@ 0x75
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 faac 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	3a800000 	.word	0x3a800000

08000c88 <LSM6DS3_StartAccel>:


void LSM6DS3_StartAccel(LSM6DS3* sensor)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->accel_odr_hz)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d04d      	beq.n	8000d3a <LSM6DS3_StartAccel+0xb2>
 8000c9e:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d84c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ca6:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d042      	beq.n	8000d34 <LSM6DS3_StartAccel+0xac>
 8000cae:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d844      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cb6:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d037      	beq.n	8000d2e <LSM6DS3_StartAccel+0xa6>
 8000cbe:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d83c      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cc6:	f240 3241 	movw	r2, #833	@ 0x341
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02c      	beq.n	8000d28 <LSM6DS3_StartAccel+0xa0>
 8000cce:	f240 3241 	movw	r2, #833	@ 0x341
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d834      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cd6:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000cda:	d022      	beq.n	8000d22 <LSM6DS3_StartAccel+0x9a>
 8000cdc:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000ce0:	d82e      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000ce2:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce4:	d01a      	beq.n	8000d1c <LSM6DS3_StartAccel+0x94>
 8000ce6:	2bd0      	cmp	r3, #208	@ 0xd0
 8000ce8:	d82a      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cea:	2b68      	cmp	r3, #104	@ 0x68
 8000cec:	d013      	beq.n	8000d16 <LSM6DS3_StartAccel+0x8e>
 8000cee:	2b68      	cmp	r3, #104	@ 0x68
 8000cf0:	d826      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cf2:	2b34      	cmp	r3, #52	@ 0x34
 8000cf4:	d00c      	beq.n	8000d10 <LSM6DS3_StartAccel+0x88>
 8000cf6:	2b34      	cmp	r3, #52	@ 0x34
 8000cf8:	d822      	bhi.n	8000d40 <LSM6DS3_StartAccel+0xb8>
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d002      	beq.n	8000d04 <LSM6DS3_StartAccel+0x7c>
 8000cfe:	2b1a      	cmp	r3, #26
 8000d00:	d003      	beq.n	8000d0a <LSM6DS3_StartAccel+0x82>
 8000d02:	e01d      	b.n	8000d40 <LSM6DS3_StartAccel+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_ACCEL_ODR_13HZ;
 8000d04:	2310      	movs	r3, #16
 8000d06:	73fb      	strb	r3, [r7, #15]
		break;
 8000d08:	e01d      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 26:
		odr_data = LSM6DS3_ACCEL_ODR_26HZ;
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d0e:	e01a      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 52:
		odr_data = LSM6DS3_ACCEL_ODR_52HZ;
 8000d10:	2330      	movs	r3, #48	@ 0x30
 8000d12:	73fb      	strb	r3, [r7, #15]
		break;
 8000d14:	e017      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 104:
		odr_data = LSM6DS3_ACCEL_ODR_104HZ;
 8000d16:	2340      	movs	r3, #64	@ 0x40
 8000d18:	73fb      	strb	r3, [r7, #15]
		break;
 8000d1a:	e014      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 208:
		odr_data = LSM6DS3_ACCEL_ODR_208HZ;
 8000d1c:	2350      	movs	r3, #80	@ 0x50
 8000d1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d20:	e011      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 416:
		odr_data = LSM6DS3_ACCEL_ODR_416HZ;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	73fb      	strb	r3, [r7, #15]
		break;
 8000d26:	e00e      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 833:
		odr_data = LSM6DS3_ACCEL_ODR_833HZ;
 8000d28:	2370      	movs	r3, #112	@ 0x70
 8000d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d2c:	e00b      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 1660:
		odr_data = LSM6DS3_ACCEL_ODR_1660HZ;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	73fb      	strb	r3, [r7, #15]
		break;
 8000d32:	e008      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 3330:
		odr_data = LSM6DS3_ACCEL_ODR_3330HZ;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	73fb      	strb	r3, [r7, #15]
		break;
 8000d38:	e005      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	case 6660:
		odr_data = LSM6DS3_ACCEL_ODR_6660HZ;
 8000d3a:	23a0      	movs	r3, #160	@ 0xa0
 8000d3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3e:	e002      	b.n	8000d46 <LSM6DS3_StartAccel+0xbe>
	default:
		odr_data = LSM6DS3_ACCEL_ODR_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
		break;
 8000d44:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->g_range)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d82c      	bhi.n	8000dac <LSM6DS3_StartAccel+0x124>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <LSM6DS3_StartAccel+0xd0>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000d9b 	.word	0x08000d9b
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	{
	case 2:
		range_data = LSM6DS3_G_RANGE_2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
		break;
 8000d98:	e00b      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 4:
		range_data = LSM6DS3_G_RANGE_4;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	73bb      	strb	r3, [r7, #14]
		break;
 8000d9e:	e008      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 8:
		range_data = LSM6DS3_G_RANGE_8;
 8000da0:	230c      	movs	r3, #12
 8000da2:	73bb      	strb	r3, [r7, #14]
		break;
 8000da4:	e005      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	case 16:
		range_data = LSM6DS3_G_RANGE_16;
 8000da6:	2304      	movs	r3, #4
 8000da8:	73bb      	strb	r3, [r7, #14]
		break;
 8000daa:	e002      	b.n	8000db2 <LSM6DS3_StartAccel+0x12a>
	default:
		range_data = LSM6DS3_G_RANGE_2;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73bb      	strb	r3, [r7, #14]
		break;
 8000db0:	bf00      	nop
	}

	/* this register also contains LPF1_BW_SEL, here we will set BW to ODR/2 */
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, (odr_data | range_data));
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 fa08 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DS3_StartGyro>:


void LSM6DS3_StartGyro(LSM6DS3* sensor)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint8_t odr_data;
	switch(sensor->config->gyro_odr_hz)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d04d      	beq.n	8000e7e <LSM6DS3_StartGyro+0xb2>
 8000de2:	f641 2204 	movw	r2, #6660	@ 0x1a04
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d84c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dea:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d042      	beq.n	8000e78 <LSM6DS3_StartGyro+0xac>
 8000df2:	f640 5202 	movw	r2, #3330	@ 0xd02
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d844      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000dfa:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d037      	beq.n	8000e72 <LSM6DS3_StartGyro+0xa6>
 8000e02:	f240 627c 	movw	r2, #1660	@ 0x67c
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d83c      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e0a:	f240 3241 	movw	r2, #833	@ 0x341
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <LSM6DS3_StartGyro+0xa0>
 8000e12:	f240 3241 	movw	r2, #833	@ 0x341
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d834      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e1a:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e1e:	d022      	beq.n	8000e66 <LSM6DS3_StartGyro+0x9a>
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8000e24:	d82e      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e26:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e28:	d01a      	beq.n	8000e60 <LSM6DS3_StartGyro+0x94>
 8000e2a:	2bd0      	cmp	r3, #208	@ 0xd0
 8000e2c:	d82a      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e2e:	2b68      	cmp	r3, #104	@ 0x68
 8000e30:	d013      	beq.n	8000e5a <LSM6DS3_StartGyro+0x8e>
 8000e32:	2b68      	cmp	r3, #104	@ 0x68
 8000e34:	d826      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e36:	2b34      	cmp	r3, #52	@ 0x34
 8000e38:	d00c      	beq.n	8000e54 <LSM6DS3_StartGyro+0x88>
 8000e3a:	2b34      	cmp	r3, #52	@ 0x34
 8000e3c:	d822      	bhi.n	8000e84 <LSM6DS3_StartGyro+0xb8>
 8000e3e:	2b0d      	cmp	r3, #13
 8000e40:	d002      	beq.n	8000e48 <LSM6DS3_StartGyro+0x7c>
 8000e42:	2b1a      	cmp	r3, #26
 8000e44:	d003      	beq.n	8000e4e <LSM6DS3_StartGyro+0x82>
 8000e46:	e01d      	b.n	8000e84 <LSM6DS3_StartGyro+0xb8>
	{
	case 13:
		odr_data = LSM6DS3_GYRO_ODR_13HZ;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4c:	e01d      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 26:
		odr_data = LSM6DS3_GYRO_ODR_26HZ;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	73fb      	strb	r3, [r7, #15]
		break;
 8000e52:	e01a      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 52:
		odr_data = LSM6DS3_GYRO_ODR_52HZ;
 8000e54:	2330      	movs	r3, #48	@ 0x30
 8000e56:	73fb      	strb	r3, [r7, #15]
		break;
 8000e58:	e017      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 104:
		odr_data = LSM6DS3_GYRO_ODR_104HZ;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5e:	e014      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 208:
		odr_data = LSM6DS3_GYRO_ODR_208HZ;
 8000e60:	2350      	movs	r3, #80	@ 0x50
 8000e62:	73fb      	strb	r3, [r7, #15]
		break;
 8000e64:	e011      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 416:
		odr_data = LSM6DS3_GYRO_ODR_416HZ;
 8000e66:	2360      	movs	r3, #96	@ 0x60
 8000e68:	73fb      	strb	r3, [r7, #15]
		break;
 8000e6a:	e00e      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 833:
		odr_data = LSM6DS3_GYRO_ODR_833HZ;
 8000e6c:	2370      	movs	r3, #112	@ 0x70
 8000e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8000e70:	e00b      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 1660:
		odr_data = LSM6DS3_GYRO_ODR_1660HZ;
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	73fb      	strb	r3, [r7, #15]
		break;
 8000e76:	e008      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 3330:
		odr_data = LSM6DS3_GYRO_ODR_3330HZ;
 8000e78:	2390      	movs	r3, #144	@ 0x90
 8000e7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000e7c:	e005      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	case 6660:
		odr_data = LSM6DS3_GYRO_ODR_6660HZ;
 8000e7e:	23a0      	movs	r3, #160	@ 0xa0
 8000e80:	73fb      	strb	r3, [r7, #15]
		break;
 8000e82:	e002      	b.n	8000e8a <LSM6DS3_StartGyro+0xbe>
	default:
		odr_data = LSM6DS3_GYRO_ODR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
		break;
 8000e88:	bf00      	nop
	}

	uint8_t range_data;
	switch(sensor->config->dps_range)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e94:	d01f      	beq.n	8000ed6 <LSM6DS3_StartGyro+0x10a>
 8000e96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e9a:	d81f      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d016      	beq.n	8000ed0 <LSM6DS3_StartGyro+0x104>
 8000ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea6:	d819      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000ea8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eac:	d00d      	beq.n	8000eca <LSM6DS3_StartGyro+0xfe>
 8000eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eb2:	d813      	bhi.n	8000edc <LSM6DS3_StartGyro+0x110>
 8000eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000eb6:	d002      	beq.n	8000ebe <LSM6DS3_StartGyro+0xf2>
 8000eb8:	2bf5      	cmp	r3, #245	@ 0xf5
 8000eba:	d003      	beq.n	8000ec4 <LSM6DS3_StartGyro+0xf8>
 8000ebc:	e00e      	b.n	8000edc <LSM6DS3_StartGyro+0x110>
	{
	case 125:
		range_data = LSM6DS3_DPS_RANGE_125;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec2:	e00e      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 245:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73bb      	strb	r3, [r7, #14]
		break;
 8000ec8:	e00b      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 500:
		range_data = LSM6DS3_DPS_RANGE_500;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	73bb      	strb	r3, [r7, #14]
		break;
 8000ece:	e008      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 1000:
		range_data = LSM6DS3_DPS_RANGE_1000;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ed4:	e005      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	case 2000:
		range_data = LSM6DS3_DPS_RANGE_2000;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eda:	e002      	b.n	8000ee2 <LSM6DS3_StartGyro+0x116>
	default:
		range_data = LSM6DS3_DPS_RANGE_245;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
		break;
 8000ee0:	bf00      	nop
	}

	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, (odr_data | range_data));
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	2111      	movs	r1, #17
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f970 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LSM6DS3_StopAccel>:


void LSM6DS3_StopAccel(LSM6DS3* sensor)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL1_XL, LSM6DS3_ACCEL_ODR_DISABLE);  /* power down accel. (p. 61) */
 8000f04:	2200      	movs	r2, #0
 8000f06:	2110      	movs	r1, #16
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f963 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop

08000f18 <LSM6DS3_StopGyro>:


void LSM6DS3_StopGyro(LSM6DS3* sensor)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	(void)LSM6DS3_WriteRegister(sensor, LSM6DS3_REG_CTRL2_G, LSM6DS3_GYRO_ODR_DISABLE);  /* power down gyro. (p. 62) */
 8000f20:	2200      	movs	r2, #0
 8000f22:	2111      	movs	r1, #17
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f955 	bl	80011d4 <LSM6DS3_WriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop

08000f34 <LSM6DS3_ReadAccel>:


void LSM6DS3_ReadAccel(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08d      	sub	sp, #52	@ 0x34
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]
	/* get the acceleration in g */

	/* read multiple bytes corresponding to the raw accelerometer data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_XL | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f42:	4a41      	ldr	r2, [pc, #260]	@ (8001048 <LSM6DS3_ReadAccel+0x114>)
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	6018      	str	r0, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	8019      	strh	r1, [r3, #0]
 8000f52:	3302      	adds	r3, #2
 8000f54:	0c0a      	lsrs	r2, r1, #16
 8000f56:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681c      	ldr	r4, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	8912      	ldrh	r2, [r2, #8]
 8000f66:	f107 0110 	add.w	r1, r7, #16
 8000f6a:	f107 0018 	add.w	r0, r7, #24
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4623      	mov	r3, r4
 8000f74:	2207      	movs	r2, #7
 8000f76:	f000 f959 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8000f7a:	7c7b      	ldrb	r3, [r7, #17]
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	7d3b      	ldrb	r3, [r7, #20]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 8000f96:	7d7b      	ldrb	r3, [r7, #21]
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->accel_x = sensor->config->g_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	edc3 7a08 	vstr	s15, [r3, #32]
	sensor->accel_y = sensor->config->g_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fee:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensor->accel_z = sensor->config->g_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800104c <LSM6DS3_ReadAccel+0x118>
 800101e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	*x = sensor->accel_x;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	601a      	str	r2, [r3, #0]
	*y = sensor->accel_y;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	*z = sensor->accel_z;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]

}
 8001040:	bf00      	nop
 8001042:	372c      	adds	r7, #44	@ 0x2c
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	0801e0f0 	.word	0x0801e0f0
 800104c:	47000000 	.word	0x47000000

08001050 <LSM6DS3_ReadGyro>:


void LSM6DS3_ReadGyro(LSM6DS3* sensor, float* x, float* y, float * z)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08d      	sub	sp, #52	@ 0x34
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
	/* get the rotation rate in degrees per second */

	/* read multiple bytes corresponding to the raw gyroscope data */
	uint8_t tx_buf[7] = {(LSM6DS3_REG_OUTX_L_G | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800105e:	4a41      	ldr	r2, [pc, #260]	@ (8001164 <LSM6DS3_ReadGyro+0x114>)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	3304      	adds	r3, #4
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	3302      	adds	r3, #2
 8001070:	0c0a      	lsrs	r2, r1, #16
 8001072:	701a      	strb	r2, [r3, #0]
	uint8_t rx_buf[7];

	/* use our fast SPI implementation instead of the HAL call */
	SPI_TxRx_Fast(tx_buf, rx_buf, 7, sensor->spi->Instance, sensor->cs_port, sensor->cs_pin);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681c      	ldr	r4, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	8912      	ldrh	r2, [r2, #8]
 8001082:	f107 0110 	add.w	r1, r7, #16
 8001086:	f107 0018 	add.w	r0, r7, #24
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4623      	mov	r3, r4
 8001090:	2207      	movs	r2, #7
 8001092:	f000 f8cb 	bl	800122c <SPI_TxRx_Fast>

	/* convert the raw readings to physical units */
	int16_t raw_data_x = ((int16_t)(rx_buf[1])) | (((int16_t)(rx_buf[2])) << 8);
 8001096:	7c7b      	ldrb	r3, [r7, #17]
 8001098:	b21a      	sxth	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t raw_data_y = ((int16_t)(rx_buf[3])) | (((int16_t)(rx_buf[4])) << 8);
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t raw_data_z = ((int16_t)(rx_buf[5])) | (((int16_t)(rx_buf[6])) << 8);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	847b      	strh	r3, [r7, #34]	@ 0x22

	sensor->gyro_x = sensor->config->dps_range * (float)raw_data_x / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	sensor->gyro_y = sensor->config->dps_range * (float)raw_data_y / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800110e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	sensor->gyro_z = sensor->config->dps_range * (float)raw_data_z / (float)(1 << (LSM6DS3_RESOLUTION - 1));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001168 <LSM6DS3_ReadGyro+0x118>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	*x = sensor->gyro_x;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	601a      	str	r2, [r3, #0]
	*y = sensor->gyro_y;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	*z = sensor->gyro_z;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]
}
 800115c:	bf00      	nop
 800115e:	372c      	adds	r7, #44	@ 0x2c
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0801e0f8 	.word	0x0801e0f8
 8001168:	47000000 	.word	0x47000000

0800116c <LSM6DS3_ReadRegister>:



HAL_StatusTypeDef LSM6DS3_ReadRegister(LSM6DS3* sensor, uint8_t reg, uint8_t* data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]
	uint8_t tx_buf[2] = {(reg | 0x80), 0x00};  // set the first bit to indicate a read communication
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001180:	b2db      	uxtb	r3, r3
 8001182:	753b      	strb	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	757b      	strb	r3, [r7, #21]
	uint8_t rx_buf[2];

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	891b      	ldrh	r3, [r3, #8]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f00b f84a 	bl	800c22c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(sensor->spi, tx_buf, rx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f010 faed 	bl	8011788 <HAL_SPI_TransmitReceive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	891b      	ldrh	r3, [r3, #8]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f00b f835 	bl	800c22c <HAL_GPIO_WritePin>

	*data = rx_buf[1];
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	701a      	strb	r2, [r3, #0]

	return status;
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop

080011d4 <LSM6DS3_WriteRegister>:


HAL_StatusTypeDef LSM6DS3_WriteRegister(LSM6DS3* sensor, uint8_t reg, uint8_t data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
	uint8_t tx_buf[2] = {reg, data};
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_RESET);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6858      	ldr	r0, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f00b f818 	bl	800c22c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_SPI_Transmit(sensor->spi, tx_buf, 2, LSM6DS3_SPI_TIMEOUT_MS);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	f010 f8d0 	bl	80113ac <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(sensor->cs_port, sensor->cs_pin, GPIO_PIN_SET);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	891b      	ldrh	r3, [r3, #8]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f00b f806 	bl	800c22c <HAL_GPIO_WritePin>

	return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop

0800122c <SPI_TxRx_Fast>:
/* this uses the SPI FIFO on the H7, so it only works for transactions 16 bytes or less */
/* (the FIFO size depends on the specific SPI channel too, so check the RM) */
/* On the H723, SPI1, 2, 3 have 16 byte FIFO and SPI4, 5, 6 have 8 bytes FIFO */
/* the peripheral is configured using Cube to have 8 bit data frames and 1 data frame FIFO threshold */
__attribute__((optimize("-Ofast"))) inline void SPI_TxRx_Fast(uint8_t* tx, uint8_t* rx, uint8_t len, SPI_TypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 800122c:	b470      	push	{r4, r5, r6}
 800122e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001232:	4684      	mov	ip, r0
 8001234:	9c03      	ldr	r4, [sp, #12]
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 8001236:	042e      	lsls	r6, r5, #16


	/* If using both the HAL SPI functions and our own, we need the next 2 lines to put SPI in a known state */
	/* If only using our function, I think these could be omitted */
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 8001238:	4816      	ldr	r0, [pc, #88]	@ (8001294 <SPI_TxRx_Fast+0x68>)
	cs_port->BSRR = (uint32_t)cs_pin << 16U;  /* CS low */
 800123a:	61a6      	str	r6, [r4, #24]
	spi->CR2 &= ~SPI_CR2_TSIZE;  /* set TSIZE 0 for endless transfer (we disable SPI after a known number of bytes rather than looking for EOT) */
 800123c:	685e      	ldr	r6, [r3, #4]
 800123e:	4030      	ands	r0, r6
 8001240:	6058      	str	r0, [r3, #4]
	spi->CFG2 &= ~SPI_CFG2_COMM;  /* this puts the SPI in full-duplex mode (for some reason the HAL takes it out of this mode sometimes, even when it is configured in Cube as full-duplex) */
 8001242:	68d8      	ldr	r0, [r3, #12]
 8001244:	f420 20c0 	bic.w	r0, r0, #393216	@ 0x60000
 8001248:	60d8      	str	r0, [r3, #12]


	spi->CR1 |= SPI_CR1_SPE;  /* enable SPI */
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	f040 0001 	orr.w	r0, r0, #1
 8001250:	6018      	str	r0, [r3, #0]
	spi->CR1 |= SPI_CR1_CSTART;  /* start transmission */
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8001258:	6018      	str	r0, [r3, #0]

	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 800125a:	b1a2      	cbz	r2, 8001286 <SPI_TxRx_Fast+0x5a>
 800125c:	eb0c 0602 	add.w	r6, ip, r2
	{
		if(((spi->SR) & SPI_SR_TXP) == SPI_SR_TXP)  /* wait until TX FIFO has enough space for a data packet */
 8001260:	6958      	ldr	r0, [r3, #20]
 8001262:	0780      	lsls	r0, r0, #30
 8001264:	d5fc      	bpl.n	8001260 <SPI_TxRx_Fast+0x34>
		   *(__IO uint8_t*)&(spi->TXDR) = tx[i++];  /* put data in TXDR */
 8001266:	f81c 0b01 	ldrb.w	r0, [ip], #1
 800126a:	45b4      	cmp	ip, r6
 800126c:	f883 0020 	strb.w	r0, [r3, #32]
 8001270:	d1f6      	bne.n	8001260 <SPI_TxRx_Fast+0x34>
	for (uint8_t i = 0; i < len; )  /* put all the TX data in the FIFO at once - this FIFO is 16 bytes max so this won't work for arbitrary amounts of data */
 8001272:	440a      	add	r2, r1

	/* FIXME: this can potentially get stuck -- add a timeout or max iteration limit */

	for (uint8_t i = 0; i < len; )  /* read out everything from the RX buffer */
	{
		if(((spi->SR) & SPI_SR_RXP) == SPI_SR_RXP)  /* wait until RX FIFO contains a data packet */
 8001274:	6958      	ldr	r0, [r3, #20]
 8001276:	07c0      	lsls	r0, r0, #31
 8001278:	d5fc      	bpl.n	8001274 <SPI_TxRx_Fast+0x48>
			rx[i++] = *(__IO uint8_t*)&(spi->RXDR);  /* read the data from RXDR */
 800127a:	f893 0030 	ldrb.w	r0, [r3, #48]	@ 0x30
 800127e:	f801 0b01 	strb.w	r0, [r1], #1
 8001282:	4291      	cmp	r1, r2
 8001284:	d1f6      	bne.n	8001274 <SPI_TxRx_Fast+0x48>
	}

	spi->CR1 &= ~SPI_CR1_SPE;  /* disable SPI */
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
	cs_port->BSRR = cs_pin;  /* CS high */
 800128e:	61a5      	str	r5, [r4, #24]
}
 8001290:	bc70      	pop	{r4, r5, r6}
 8001292:	4770      	bx	lr
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	VibeCheckStrobe_PeriodElapsedUpdate(&vc.strobe);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80012a2:	f005 fc3e 	bl	8006b22 <VibeCheckStrobe_PeriodElapsedUpdate>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	24011de0 	.word	0x24011de0

080012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMAHalfCpltCallback(&vc.wavegen);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <HAL_DAC_ConvHalfCpltCallbackCh1+0x18>)
 80012be:	f006 f9db 	bl	8007678 <VibeCheckWaveGen_DMAHalfCpltCallback>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	24011e08 	.word	0x24011e08

080012d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_DMACpltCallback(&vc.wavegen);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 80012da:	f006 f9e9 	bl	80076b0 <VibeCheckWaveGen_DMACpltCallback>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24011e08 	.word	0x24011e08

080012ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	VibeCheckSensor_EXTICallback(&vc.sensor, GPIO_Pin);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012fc:	f004 f861 	bl	80053c2 <VibeCheckSensor_EXTICallback>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	240133ec 	.word	0x240133ec

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001312:	f000 ff23 	bl	800215c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f006 fc8b 	bl	8007c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 f84d 	bl	80013b8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800131e:	f000 f8bb 	bl	8001498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fdbf 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001326:	f000 fd8d 	bl	8001e44 <MX_DMA_Init>
  MX_DAC1_Init();
 800132a:	f000 f9cb 	bl	80016c4 <MX_DAC1_Init>
  MX_I2C2_Init();
 800132e:	f000 fa05 	bl	800173c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001332:	f000 fa43 	bl	80017bc <MX_SPI2_Init>
  MX_SPI3_Init();
 8001336:	f000 fa97 	bl	8001868 <MX_SPI3_Init>
  MX_SPI4_Init();
 800133a:	f000 faeb 	bl	8001914 <MX_SPI4_Init>
  MX_TIM4_Init();
 800133e:	f000 fc6f 	bl	8001c20 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001342:	f000 fbdf 	bl	8001b04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001346:	f000 fd31 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800134a:	f000 fb39 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800134e:	f000 fb8b 	bl	8001a68 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001352:	f000 f8d1 	bl	80014f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001356:	f000 f94b 	bl	80015f0 <MX_ADC2_Init>
  MX_UART7_Init();
 800135a:	f000 fcd9 	bl	8001d10 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800135e:	f017 fa5f 	bl	8018820 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);  /* start the timer for sensor data time stamps */
 8001362:	480b      	ldr	r0, [pc, #44]	@ (8001390 <main+0x84>)
 8001364:	f010 fe8a 	bl	801207c <HAL_TIM_Base_Start>
  VibeCheck_Init(&vc, &htim3, &htim1, &hdac1, &htim4, &(TIM2->CNT), &hspi2, &hspi3, &hspi4);
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <main+0x88>)
 800136a:	9304      	str	r3, [sp, #16]
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <main+0x8c>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <main+0x90>)
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <main+0x94>)
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <main+0x98>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <main+0x9c>)
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <main+0xa0>)
 8001380:	490b      	ldr	r1, [pc, #44]	@ (80013b0 <main+0xa4>)
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <main+0xa8>)
 8001384:	f001 fe42 	bl	800300c <VibeCheck_Init>

  while (1)
  {

	  VibeCheck_Loop(&vc);
 8001388:	480a      	ldr	r0, [pc, #40]	@ (80013b4 <main+0xa8>)
 800138a:	f002 f8e5 	bl	8003558 <VibeCheck_Loop>
 800138e:	e7fb      	b.n	8001388 <main+0x7c>
 8001390:	24000734 	.word	0x24000734
 8001394:	24000660 	.word	0x24000660
 8001398:	240005d8 	.word	0x240005d8
 800139c:	24000550 	.word	0x24000550
 80013a0:	40000024 	.word	0x40000024
 80013a4:	240007cc 	.word	0x240007cc
 80013a8:	240003f8 	.word	0x240003f8
 80013ac:	240006e8 	.word	0x240006e8
 80013b0:	24000780 	.word	0x24000780
 80013b4:	240009b8 	.word	0x240009b8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09c      	sub	sp, #112	@ 0x70
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c2:	224c      	movs	r2, #76	@ 0x4c
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f019 faeb 	bl	801a9a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2220      	movs	r2, #32
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f019 fae5 	bl	801a9a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013d8:	2002      	movs	r0, #2
 80013da:	f00c fb2d 	bl	800da38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <SystemClock_Config+0xdc>)
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemClock_Config+0xdc>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013fa:	bf00      	nop
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xdc>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001408:	d1f8      	bne.n	80013fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800140a:	2321      	movs	r3, #33	@ 0x21
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	2302      	movs	r3, #2
 800141e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001424:	2328      	movs	r3, #40	@ 0x28
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001428:	2301      	movs	r3, #1
 800142a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001434:	230c      	movs	r3, #12
 8001436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001438:	2300      	movs	r3, #0
 800143a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4618      	mov	r0, r3
 8001446:	f00c fb41 	bl	800dacc <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001450:	f000 feb0 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	233f      	movs	r3, #63	@ 0x3f
 8001456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001460:	2308      	movs	r3, #8
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001464:	2340      	movs	r3, #64	@ 0x40
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800146c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001472:	2340      	movs	r3, #64	@ 0x40
 8001474:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2103      	movs	r1, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f00c ff00 	bl	800e280 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001486:	f000 fe95 	bl	80021b4 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	@ 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024800 	.word	0x58024800

08001498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	22b8      	movs	r2, #184	@ 0xb8
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f019 fa7c 	bl	801a9a2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	@ 0xc0
 80014cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	4618      	mov	r0, r3
 80014e0:	f00d fa5a 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80014ea:	f000 fe63 	bl	80021b4 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	@ 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150a:	463b      	mov	r3, r7
 800150c:	2224      	movs	r2, #36	@ 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f019 fa46 	bl	801a9a2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001516:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <MX_ADC1_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800151e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001532:	2204      	movs	r2, #4
 8001534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001544:	2201      	movs	r2, #1
 8001546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001578:	2201      	movs	r2, #1
 800157a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 800157e:	f006 fe53 	bl	8008228 <HAL_ADC_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001588:	f000 fe14 	bl	80021b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 8001598:	f007 fe92 	bl	80092c0 <HAL_ADCEx_MultiModeConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015a2:	f000 fe07 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_ADC1_Init+0xf0>)
 80015a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015aa:	2306      	movs	r3, #6
 80015ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_ADC1_Init+0xf4>)
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_ADC1_Init+0xe8>)
 80015ca:	f007 f835 	bl	8008638 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015d4:	f000 fdee 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	@ 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000318 	.word	0x24000318
 80015e4:	40022000 	.word	0x40022000
 80015e8:	10c00010 	.word	0x10c00010
 80015ec:	47ff0000 	.word	0x47ff0000

080015f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2224      	movs	r2, #36	@ 0x24
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f019 f9d0 	bl	801a9a2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001604:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <MX_ADC2_Init+0xc8>)
 8001606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001608:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800160a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800160e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800161e:	2204      	movs	r2, #4
 8001620:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001624:	2200      	movs	r2, #0
 8001626:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800162a:	2200      	movs	r2, #0
 800162c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001630:	2201      	movs	r2, #1
 8001632:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001644:	2200      	movs	r2, #0
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800164a:	2200      	movs	r2, #0
 800164c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001654:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001656:	2200      	movs	r2, #0
 8001658:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 8001664:	2201      	movs	r2, #1
 8001666:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	4812      	ldr	r0, [pc, #72]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800166a:	f006 fddd 	bl	8008228 <HAL_ADC_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001674:	f000 fd9e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_ADC2_Init+0xcc>)
 800167a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_ADC2_Init+0xd0>)
 8001686:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001688:	2304      	movs	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_ADC2_Init+0xc4>)
 800169c:	f006 ffcc 	bl	8008638 <HAL_ADC_ConfigChannel>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016a6:	f000 fd85 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000388 	.word	0x24000388
 80016b8:	40022100 	.word	0x40022100
 80016bc:	0c900008 	.word	0x0c900008
 80016c0:	47ff0000 	.word	0x47ff0000

080016c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2224      	movs	r2, #36	@ 0x24
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f019 f966 	bl	801a9a2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <MX_DAC1_Init+0x74>)
 80016da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <MX_DAC1_Init+0x70>)
 80016de:	f008 f859 	bl	8009794 <HAL_DAC_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80016e8:	f000 fd64 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 80016f0:	2306      	movs	r3, #6
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_DAC1_Init+0x70>)
 8001708:	f008 f930 	bl	800996c <HAL_DAC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 fd4f 	bl	80021b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2210      	movs	r2, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_DAC1_Init+0x70>)
 800171e:	f008 f925 	bl	800996c <HAL_DAC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001728:	f000 fd44 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	240003f8 	.word	0x240003f8
 8001738:	40007400 	.word	0x40007400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f00a fd8c 	bl	800c294 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fd17 	bl	80021b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f00a fe1f 	bl	800c3cc <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fd0e 	bl	80021b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f00a fe61 	bl	800c462 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fd05 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240004fc 	.word	0x240004fc
 80017b4:	40005800 	.word	0x40005800
 80017b8:	307075b1 	.word	0x307075b1

080017bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <MX_SPI2_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_SPI2_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_SPI2_Init+0xa4>)
 800184e:	f00f fc89 	bl	8011164 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fcac 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000550 	.word	0x24000550
 8001864:	40003800 	.word	0x40003800

08001868 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <MX_SPI3_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_SPI3_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <MX_SPI3_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_SPI3_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <MX_SPI3_Init+0xa4>)
 800189c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <MX_SPI3_Init+0xa4>)
 80018fa:	f00f fc33 	bl	8011164 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fc56 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	240005d8 	.word	0x240005d8
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <MX_SPI4_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001948:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	@ (80019b8 <MX_SPI4_Init+0xa4>)
 80019a6:	f00f fbdd 	bl	8011164 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fc00 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000660 	.word	0x24000660
 80019bc:	40013400 	.word	0x40013400

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	@ (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f010 fadf 	bl	8011fce <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fbcd 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f011 fabe 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f000 fbbf 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a36:	2320      	movs	r3, #32
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f012 f900 	bl	8013c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f000 fbaf 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240006e8 	.word	0x240006e8
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a90:	22ef      	movs	r2, #239	@ 0xef
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ab0:	f010 fa8d 	bl	8011fce <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001aba:	f000 fb7b 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	480d      	ldr	r0, [pc, #52]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001acc:	f011 fa6c 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ad6:	f000 fb6d 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ada:	2320      	movs	r3, #32
 8001adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	@ (8001b00 <MX_TIM2_Init+0x98>)
 8001ae8:	f012 f8b0 	bl	8013c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001af2:	f000 fb5f 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	24000734 	.word	0x24000734

08001b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b38      	ldr	r3, [pc, #224]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <MX_TIM3_Init+0x118>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b5c:	482e      	ldr	r0, [pc, #184]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b5e:	f010 fa36 	bl	8011fce <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b68:	f000 fb24 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4827      	ldr	r0, [pc, #156]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b7a:	f011 fa15 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b84:	f000 fb16 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b88:	4823      	ldr	r0, [pc, #140]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001b8a:	f010 fbaa 	bl	80122e2 <HAL_TIM_PWM_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b94:	f000 fb0e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	481c      	ldr	r0, [pc, #112]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001ba8:	f012 f850 	bl	8013c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb2:	f000 faff 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb6:	2360      	movs	r3, #96	@ 0x60
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4812      	ldr	r0, [pc, #72]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bce:	f011 f8d7 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2204      	movs	r2, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	480d      	ldr	r0, [pc, #52]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001be4:	f011 f8cc 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001bee:	f000 fae1 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001bfa:	f011 f8c1 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <MX_TIM3_Init+0x114>)
 8001c0a:	f000 fee3 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001c0e:	bf00      	nop
 8001c10:	3738      	adds	r7, #56	@ 0x38
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000780 	.word	0x24000780
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	@ 0x38
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <MX_TIM4_Init+0xec>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c78:	4823      	ldr	r0, [pc, #140]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c7a:	f010 f9a8 	bl	8011fce <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001c84:	f000 fa96 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c92:	4619      	mov	r1, r3
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001c96:	f011 f987 	bl	8012fa8 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ca0:	f000 fa88 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ca4:	4818      	ldr	r0, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001ca6:	f010 fb1c 	bl	80122e2 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001cb0:	f000 fa80 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cc4:	f011 ffc2 	bl	8013c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001cce:	f000 fa71 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd2:	2360      	movs	r3, #96	@ 0x60
 8001cd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cea:	f011 f849 	bl	8012d80 <HAL_TIM_PWM_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001cf4:	f000 fa5e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <MX_TIM4_Init+0xe8>)
 8001cfa:	f000 fe6b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	@ 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240007cc 	.word	0x240007cc
 8001d0c:	40000800 	.word	0x40000800

08001d10 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d14:	4b23      	ldr	r3, [pc, #140]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d16:	4a24      	ldr	r2, [pc, #144]	@ (8001da8 <MX_UART7_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d3c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d5a:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d5c:	f012 f830 	bl	8013dc0 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART7_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f000 fa25 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480d      	ldr	r0, [pc, #52]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d6e:	f013 f93c 	bl	8014fea <HAL_UARTEx_SetTxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8001d78:	f000 fa1c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4809      	ldr	r0, [pc, #36]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d80:	f013 f971 	bl	8015066 <HAL_UARTEx_SetRxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART7_Init+0x7e>
  {
    Error_Handler();
 8001d8a:	f000 fa13 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART7_Init+0x94>)
 8001d90:	f013 f8f2 	bl	8014f78 <HAL_UARTEx_DisableFifoMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART7_Init+0x8e>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000890 	.word	0x24000890
 8001da8:	40007800 	.word	0x40007800

08001dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_USART1_UART_Init+0x94>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001df6:	f011 ffe3 	bl	8013dc0 <HAL_UART_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e00:	f000 f9d8 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e08:	f013 f8ef 	bl	8014fea <HAL_UARTEx_SetTxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f000 f9cf 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4808      	ldr	r0, [pc, #32]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e1a:	f013 f924 	bl	8015066 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e24:	f000 f9c6 	bl	80021b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_USART1_UART_Init+0x90>)
 8001e2a:	f013 f8a5 	bl	8014f78 <HAL_UARTEx_DisableFifoMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	24000924 	.word	0x24000924
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_DMA_Init+0x5c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f007 fbe4 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e72:	200b      	movs	r0, #11
 8001e74:	f007 fbfb 	bl	800966e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f007 fbdc 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e82:	200c      	movs	r0, #12
 8001e84:	f007 fbf3 	bl	800966e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	200d      	movs	r0, #13
 8001e8e:	f007 fbd4 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e92:	200d      	movs	r0, #13
 8001e94:	f007 fbeb 	bl	800966e <HAL_NVIC_EnableIRQ>

}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	58024400 	.word	0x58024400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eba:	4ba2      	ldr	r3, [pc, #648]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec0:	4aa0      	ldr	r2, [pc, #640]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a99      	ldr	r2, [pc, #612]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b96      	ldr	r3, [pc, #600]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	4b93      	ldr	r3, [pc, #588]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a91      	ldr	r2, [pc, #580]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b8f      	ldr	r3, [pc, #572]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b87      	ldr	r3, [pc, #540]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f50:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f60:	4b78      	ldr	r3, [pc, #480]	@ (8002144 <MX_GPIO_Init+0x2a0>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS3_GPIO_Port, ACCEL_NCS3_Pin, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4875      	ldr	r0, [pc, #468]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001f74:	f00a f95a 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING2_GPIO_Port, GPIO_TIMING2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4873      	ldr	r0, [pc, #460]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8001f7e:	f00a f955 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TIMING1_GPIO_Port, GPIO_TIMING1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4872      	ldr	r0, [pc, #456]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f88:	f00a f950 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	486f      	ldr	r0, [pc, #444]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8001f92:	f00a f94b 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS1_GPIO_Port, ACCEL_NCS1_Pin, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	486d      	ldr	r0, [pc, #436]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001f9e:	f00a f945 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACCEL_NCS2_GPIO_Port, ACCEL_NCS2_Pin, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	486c      	ldr	r0, [pc, #432]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8001fa8:	f00a f940 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb2:	4868      	ldr	r0, [pc, #416]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8001fb4:	f00a f93a 	bl	800c22c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACCEL_INTA3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA3_Pin;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTA3_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	485e      	ldr	r0, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fce:	f009 ff6d 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS3_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS3_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS3_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4857      	ldr	r0, [pc, #348]	@ (8002148 <MX_GPIO_Init+0x2a4>)
 8001fea:	f009 ff5f 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INTB3_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTB3_Pin;
 8001fee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACCEL_INTB3_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4851      	ldr	r0, [pc, #324]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002006:	f009 ff51 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TIMING2_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING2_Pin;
 800200a:	2304      	movs	r3, #4
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_TIMING2_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	484a      	ldr	r0, [pc, #296]	@ (800214c <MX_GPIO_Init+0x2a8>)
 8002022:	f009 ff43 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_TIMING1_Pin MUTE_INDICATOR_Pin MUTE_SIGNAL_Pin */
  GPIO_InitStruct.Pin = GPIO_TIMING1_Pin|MUTE_INDICATOR_Pin|MUTE_SIGNAL_Pin;
 8002026:	230b      	movs	r3, #11
 8002028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 800203e:	f009 ff35 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTE_BUTTON_Pin RECORD_BUTTON_Pin */
  GPIO_InitStruct.Pin = MUTE_BUTTON_Pin|RECORD_BUTTON_Pin;
 8002042:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	483e      	ldr	r0, [pc, #248]	@ (8002150 <MX_GPIO_Init+0x2ac>)
 8002058:	f009 ff28 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS1_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS1_Pin;
 800205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS1_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 8002076:	f009 ff19 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INTA1_Pin ACCEL_INTB1_Pin ACCEL_INTA2_Pin ACCEL_INTB2_Pin */
  GPIO_InitStruct.Pin = ACCEL_INTA1_Pin|ACCEL_INTB1_Pin|ACCEL_INTA2_Pin|ACCEL_INTB2_Pin;
 800207a:	f240 3306 	movw	r3, #774	@ 0x306
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	4831      	ldr	r0, [pc, #196]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 8002092:	f009 ff0b 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : DAC_EXT_Pin */
  GPIO_InitStruct.Pin = DAC_EXT_Pin;
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DAC_EXT_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4828      	ldr	r0, [pc, #160]	@ (800214c <MX_GPIO_Init+0x2a8>)
 80020ac:	f009 fefe 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_NCS2_Pin */
  GPIO_InitStruct.Pin = ACCEL_NCS2_Pin;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACCEL_NCS2_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4824      	ldr	r0, [pc, #144]	@ (8002158 <MX_GPIO_Init+0x2b4>)
 80020c8:	f009 fef0 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : RECORD_INDICATOR_Pin */
  GPIO_InitStruct.Pin = RECORD_INDICATOR_Pin;
 80020cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	2301      	movs	r3, #1
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RECORD_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	481b      	ldr	r0, [pc, #108]	@ (8002154 <MX_GPIO_Init+0x2b0>)
 80020e6:	f009 fee1 	bl	800beac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2007      	movs	r0, #7
 80020f0:	f007 faa3 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f007 faba 	bl	800966e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2008      	movs	r0, #8
 8002100:	f007 fa9b 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002104:	2008      	movs	r0, #8
 8002106:	f007 fab2 	bl	800966e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2009      	movs	r0, #9
 8002110:	f007 fa93 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002114:	2009      	movs	r0, #9
 8002116:	f007 faaa 	bl	800966e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2017      	movs	r0, #23
 8002120:	f007 fa8b 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002124:	2017      	movs	r0, #23
 8002126:	f007 faa2 	bl	800966e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	2028      	movs	r0, #40	@ 0x28
 8002130:	f007 fa83 	bl	800963a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002134:	2028      	movs	r0, #40	@ 0x28
 8002136:	f007 fa9a 	bl	800966e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	@ 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	58021000 	.word	0x58021000
 800214c:	58020800 	.word	0x58020800
 8002150:	58020000 	.word	0x58020000
 8002154:	58020400 	.word	0x58020400
 8002158:	58020c00 	.word	0x58020c00

0800215c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800216e:	f007 fa99 	bl	80096a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002172:	2301      	movs	r3, #1
 8002174:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002176:	2300      	movs	r3, #0
 8002178:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800217e:	231f      	movs	r3, #31
 8002180:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002182:	2387      	movs	r3, #135	@ 0x87
 8002184:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800219e:	463b      	mov	r3, r7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 fab7 	bl	8009714 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021a6:	2004      	movs	r0, #4
 80021a8:	f007 fa94 	bl	80096d4 <HAL_MPU_Enable>

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <Error_Handler+0x8>

080021c0 <Sequencer_Init>:
 */

#include "sequencer.h"

void Sequencer_Init(Sequencer* sequencer)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	sequencer->sequence_time_array = NULL;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
	sequencer->sequence_index = 0;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
	sequencer->time = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]

	sequencer->is_running = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	741a      	strb	r2, [r3, #16]
	sequencer->is_looping = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	745a      	strb	r2, [r3, #17]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <Sequencer_SetSequence>:

void Sequencer_SetSequence(Sequencer* sequencer, const uint32_t* sequence_time_array, const uint32_t sequence_len, uint8_t is_looping)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	70fb      	strb	r3, [r7, #3]
	sequencer->sequence_time_array = sequence_time_array;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	601a      	str	r2, [r3, #0]
	sequencer->sequence_len = sequence_len;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	sequencer->is_looping = is_looping;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	745a      	strb	r2, [r3, #17]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <Sequencer_Update>:

uint32_t Sequencer_Update(Sequencer* sequencer, uint32_t time, uint32_t* index)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	/*
	 * each element in the time array says how long to hold that step for
	 */

	if (sequencer->is_running && sequencer->sequence_time_array != NULL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	7c1b      	ldrb	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <Sequencer_Update+0x76>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02c      	beq.n	800229a <Sequencer_Update+0x76>
	{
		if (time > sequencer->time)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	429a      	cmp	r2, r3
 8002248:	d927      	bls.n	800229a <Sequencer_Update+0x76>
		{
			*index = sequencer->sequence_index;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
			sequencer->time += sequencer->sequence_time_array[sequencer->sequence_index];
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
			sequencer->sequence_index++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]

			if (sequencer->sequence_index == sequencer->sequence_len)  /* reached the end of the sequence */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d10a      	bne.n	8002296 <Sequencer_Update+0x72>
			{
				if (sequencer->is_looping)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	7c5b      	ldrb	r3, [r3, #17]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Sequencer_Update+0x6c>
					sequencer->sequence_index = 0;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	e002      	b.n	8002296 <Sequencer_Update+0x72>
				else
					sequencer->is_running = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	741a      	strb	r2, [r3, #16]
			}

			return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <Sequencer_Update+0x78>
		}
	}

	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <Sequencer_Start>:

void Sequencer_Start(Sequencer* sequencer, uint32_t time)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	sequencer->time = time;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	60da      	str	r2, [r3, #12]
	sequencer->sequence_index = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
	sequencer->is_running = 1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	741a      	strb	r2, [r3, #16]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <Sequencer_Stop>:

void Sequencer_Stop(Sequencer* sequencer)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	sequencer->is_running = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	741a      	strb	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <Sequencer_IsRunning>:

uint32_t Sequencer_IsRunning(Sequencer* sequencer)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return sequencer->is_running;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7c1b      	ldrb	r3, [r3, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_MspInit+0x34>)
 800230c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002310:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_MspInit+0x34>)
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_MspInit+0x34>)
 800231c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002328:	2005      	movs	r0, #5
 800232a:	f007 f97b 	bl	8009624 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <HAL_ADC_MspInit+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d133      	bne.n	80023c6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 8002366:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10e      	bne.n	800238e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002376:	4a34      	ldr	r2, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002380:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002394:	4a2c      	ldr	r2, [pc, #176]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800239e:	4b2a      	ldr	r3, [pc, #168]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ac:	2330      	movs	r3, #48	@ 0x30
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4823      	ldr	r0, [pc, #140]	@ (800244c <HAL_ADC_MspInit+0x110>)
 80023c0:	f009 fd74 	bl	800beac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023c4:	e037      	b.n	8002436 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_ADC_MspInit+0x114>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d132      	bne.n	8002436 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0x108>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023e8:	4a17      	ldr	r2, [pc, #92]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80023f2:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 80023f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_ADC_MspInit+0x10c>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23c0      	movs	r3, #192	@ 0xc0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <HAL_ADC_MspInit+0x118>)
 8002432:	f009 fd3b 	bl	800beac <HAL_GPIO_Init>
}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	@ 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	240144ec 	.word	0x240144ec
 8002448:	58024400 	.word	0x58024400
 800244c:	58020800 	.word	0x58020800
 8002450:	40022100 	.word	0x40022100
 8002454:	58020000 	.word	0x58020000

08002458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_DAC_MspInit+0x140>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 808a 	bne.w	8002590 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_DAC_MspInit+0x144>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248c:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800248e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002492:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b40      	ldr	r3, [pc, #256]	@ (800259c <HAL_DAC_MspInit+0x144>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_DAC_MspInit+0x144>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024b8:	2330      	movs	r3, #48	@ 0x30
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024bc:	2303      	movs	r3, #3
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4835      	ldr	r0, [pc, #212]	@ (80025a0 <HAL_DAC_MspInit+0x148>)
 80024cc:	f009 fcee 	bl	800beac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 80024d0:	4b34      	ldr	r3, [pc, #208]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d2:	4a35      	ldr	r2, [pc, #212]	@ (80025a8 <HAL_DAC_MspInit+0x150>)
 80024d4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80024d6:	4b33      	ldr	r3, [pc, #204]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024d8:	2243      	movs	r2, #67	@ 0x43
 80024da:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e2:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ee:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f0:	4b2c      	ldr	r3, [pc, #176]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 80024fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800250a:	2200      	movs	r2, #0
 800250c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002510:	2200      	movs	r2, #0
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002514:	4823      	ldr	r0, [pc, #140]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002516:	f007 fbf5 	bl	8009d04 <HAL_DMA_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8002520:	f7ff fe48 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1f      	ldr	r2, [pc, #124]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DAC_MspInit+0x14c>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8002530:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DAC_MspInit+0x158>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800253e:	2240      	movs	r2, #64	@ 0x40
 8002540:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800254a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002556:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800255a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002576:	f007 fbc5 	bl	8009d04 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fe18 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_DAC_MspInit+0x154>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002590:	bf00      	nop
 8002592:	3728      	adds	r7, #40	@ 0x28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40007400 	.word	0x40007400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020000 	.word	0x58020000
 80025a4:	2400040c 	.word	0x2400040c
 80025a8:	40020010 	.word	0x40020010
 80025ac:	24000484 	.word	0x24000484
 80025b0:	40020028 	.word	0x40020028

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0b8      	sub	sp, #224	@ 0xe0
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	22b8      	movs	r2, #184	@ 0xb8
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f018 f9e4 	bl	801a9a2 <memset>
  if(hi2c->Instance==I2C2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_I2C_MspInit+0xc8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d146      	bne.n	8002672 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025e4:	f04f 0208 	mov.w	r2, #8
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f6:	f107 0310 	add.w	r3, r7, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f00c f9cc 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002606:	f7ff fdd5 	bl	80021b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002628:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800262c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002642:	2304      	movs	r3, #4
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	@ (8002684 <HAL_I2C_MspInit+0xd0>)
 8002650:	f009 fc2c 	bl	800beac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_I2C_MspInit+0xcc>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	@ 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005800 	.word	0x40005800
 8002680:	58024400 	.word	0x58024400
 8002684:	58020400 	.word	0x58020400

08002688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0bc      	sub	sp, #240	@ 0xf0
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	22b8      	movs	r2, #184	@ 0xb8
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f018 f97a 	bl	801a9a2 <memset>
  if(hspi->Instance==SPI2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a72      	ldr	r2, [pc, #456]	@ (800287c <HAL_SPI_MspInit+0x1f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d146      	bne.n	8002746 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00c f963 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80026d8:	f7ff fd6c 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026dc:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e2:	4a67      	ldr	r2, [pc, #412]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a5f      	ldr	r2, [pc, #380]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b5d      	ldr	r3, [pc, #372]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ACCEL_SCK1_Pin|ACCEL_MISO1_Pin|ACCEL_MOSI1_Pin;
 8002718:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800271c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002732:	2305      	movs	r3, #5
 8002734:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800273c:	4619      	mov	r1, r3
 800273e:	4851      	ldr	r0, [pc, #324]	@ (8002884 <HAL_SPI_MspInit+0x1fc>)
 8002740:	f009 fbb4 	bl	800beac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002744:	e096      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_SPI_MspInit+0x200>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_SPI_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002750:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800275c:	2300      	movs	r3, #0
 800275e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002760:	f107 0320 	add.w	r3, r7, #32
 8002764:	4618      	mov	r0, r3
 8002766:	f00c f917 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002770:	f7ff fd20 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800277a:	4a41      	ldr	r2, [pc, #260]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002780:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002784:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800278a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a39      	ldr	r2, [pc, #228]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ACCEL_SCK2_Pin|ACCEL_MISO2_Pin|ACCEL_MOSI2_Pin;
 80027b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027d4:	4619      	mov	r1, r3
 80027d6:	482d      	ldr	r0, [pc, #180]	@ (800288c <HAL_SPI_MspInit+0x204>)
 80027d8:	f009 fb68 	bl	800beac <HAL_GPIO_Init>
}
 80027dc:	e04a      	b.n	8002874 <HAL_SPI_MspInit+0x1ec>
  else if(hspi->Instance==SPI4)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002890 <HAL_SPI_MspInit+0x208>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d145      	bne.n	8002874 <HAL_SPI_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fa:	f107 0320 	add.w	r3, r7, #32
 80027fe:	4618      	mov	r0, r3
 8002800:	f00c f8ca 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_SPI_MspInit+0x186>
      Error_Handler();
 800280a:	f7ff fcd3 	bl	80021b4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002814:	4a1a      	ldr	r2, [pc, #104]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002816:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800281a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <HAL_SPI_MspInit+0x1f8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ACCEL_SCK3_Pin|ACCEL_MISO3_Pin|ACCEL_MOSI3_Pin;
 800284a:	2364      	movs	r3, #100	@ 0x64
 800284c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002862:	2305      	movs	r3, #5
 8002864:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002868:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800286c:	4619      	mov	r1, r3
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <HAL_SPI_MspInit+0x20c>)
 8002870:	f009 fb1c 	bl	800beac <HAL_GPIO_Init>
}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	58024400 	.word	0x58024400
 8002884:	58020400 	.word	0x58020400
 8002888:	40003c00 	.word	0x40003c00
 800288c:	58020800 	.word	0x58020800
 8002890:	40013400 	.word	0x40013400
 8002894:	58021000 	.word	0x58021000

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_TIM_Base_MspInit+0x124>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028aa:	4b45      	ldr	r3, [pc, #276]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b0:	4a43      	ldr	r2, [pc, #268]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028ba:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028c8:	e074      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a39      	ldr	r2, [pc, #228]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b36      	ldr	r3, [pc, #216]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
}
 80028f2:	e05f      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_TIM_Base_MspInit+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d117      	bne.n	800292e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fe:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002904:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 800291c:	2201      	movs	r2, #1
 800291e:	2101      	movs	r1, #1
 8002920:	201d      	movs	r0, #29
 8002922:	f006 fe8a 	bl	800963a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002926:	201d      	movs	r0, #29
 8002928:	f006 fea1 	bl	800966e <HAL_NVIC_EnableIRQ>
}
 800292c:	e042      	b.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_TIM_Base_MspInit+0x130>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d13d      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_TIM_Base_MspInit+0x128>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream2;
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002958:	4a1d      	ldr	r2, [pc, #116]	@ (80029d0 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800295e:	221d      	movs	r2, #29
 8002960:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002962:	4b1a      	ldr	r3, [pc, #104]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800296e:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002974:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800297c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002998:	480c      	ldr	r0, [pc, #48]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 800299a:	f007 f9b3 	bl	8009d04 <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_MspInit+0x110>
      Error_Handler();
 80029a4:	f7ff fc06 	bl	80021b4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	4a07      	ldr	r2, [pc, #28]	@ (80029cc <HAL_TIM_Base_MspInit+0x134>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40010000 	.word	0x40010000
 80029c0:	58024400 	.word	0x58024400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	24000818 	.word	0x24000818
 80029d0:	40020040 	.word	0x40020040

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	@ (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d120      	bne.n	8002a38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	4a24      	ldr	r2, [pc, #144]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a06:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LED_STROBE_1_Pin|LED_STROBE_2_Pin|LED_STROBE_3_Pin;
 8002a14:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4818      	ldr	r0, [pc, #96]	@ (8002a94 <HAL_TIM_MspPostInit+0xc0>)
 8002a32:	f009 fa3b 	bl	800beac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a36:	e024      	b.n	8002a82 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	@ (8002a98 <HAL_TIM_MspPostInit+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11f      	bne.n	8002a82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b13      	ldr	r3, [pc, #76]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a52:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_ACCEL_Pin;
 8002a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a72:	2302      	movs	r3, #2
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LED_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <HAL_TIM_MspPostInit+0xc8>)
 8002a7e:	f009 fa15 	bl	800beac <HAL_GPIO_Init>
}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	@ 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020800 	.word	0x58020800
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	58020c00 	.word	0x58020c00

08002aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	22b8      	movs	r2, #184	@ 0xb8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f017 ff6e 	bl	801a9a2 <memset>
  if(huart->Instance==UART7)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a4d      	ldr	r2, [pc, #308]	@ (8002c00 <HAL_UART_MspInit+0x160>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d147      	bne.n	8002b60 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ad0:	f04f 0202 	mov.w	r2, #2
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f00b ff56 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002af2:	f7ff fb5f 	bl	80021b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002af6:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002afc:	4a41      	ldr	r2, [pc, #260]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002afe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b06:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b37      	ldr	r3, [pc, #220]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    PE9     ------> UART7_RTS
    PE10     ------> UART7_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b32:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b56:	4619      	mov	r1, r3
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <HAL_UART_MspInit+0x168>)
 8002b5a:	f009 f9a7 	bl	800beac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b5e:	e04a      	b.n	8002bf6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d145      	bne.n	8002bf6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6a:	f04f 0201 	mov.w	r2, #1
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00b ff09 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002b8c:	f7ff fb12 	bl	80021b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ba0:	4b18      	ldr	r3, [pc, #96]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb4:	4a13      	ldr	r2, [pc, #76]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbe:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <HAL_UART_MspInit+0x164>)
 8002bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002bcc:	23c0      	movs	r3, #192	@ 0xc0
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be4:	2307      	movs	r3, #7
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4807      	ldr	r0, [pc, #28]	@ (8002c10 <HAL_UART_MspInit+0x170>)
 8002bf2:	f009 f95b 	bl	800beac <HAL_GPIO_Init>
}
 8002bf6:	bf00      	nop
 8002bf8:	37e8      	adds	r7, #232	@ 0xe8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40007800 	.word	0x40007800
 8002c04:	58024400 	.word	0x58024400
 8002c08:	58021000 	.word	0x58021000
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	58020400 	.word	0x58020400

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f005 f853 	bl	8007d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA2_Pin);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f009 faf1 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB2_Pin);
 8002c84:	2004      	movs	r0, #4
 8002c86:	f009 faea 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA3_Pin);
 8002c92:	2008      	movs	r0, #8
 8002c94:	f009 fae3 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <DMA1_Stream0_IRQHandler+0x10>)
 8002ca2:	f007 fdf1 	bl	800a888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	2400040c 	.word	0x2400040c

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f007 fde7 	bl	800a888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000484 	.word	0x24000484

08002cc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA1_Stream2_IRQHandler+0x10>)
 8002cca:	f007 fddd 	bl	800a888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000818 	.word	0x24000818

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTA1_Pin);
 8002cdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002ce0:	f009 fabd 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB1_Pin);
 8002ce4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002ce8:	f009 fab9 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM3_IRQHandler+0x10>)
 8002cf6:	f00f ff3b 	bl	8012b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24000780 	.word	0x24000780

08002d04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INTB3_Pin);
 8002d08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d0c:	f009 faa7 	bl	800c25e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <OTG_HS_IRQHandler+0x10>)
 8002d1a:	f009 fd2f 	bl	800c77c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2401d1f0 	.word	0x2401d1f0

08002d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return 1;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_kill>:

int _kill(int pid, int sig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d42:	f017 fe9f 	bl	801aa84 <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2216      	movs	r2, #22
 8002d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_exit>:

void _exit (int status)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ffe7 	bl	8002d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6a:	bf00      	nop
 8002d6c:	e7fd      	b.n	8002d6a <_exit+0x12>

08002d6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d80:	f3af 8000 	nop.w
 8002d84:	4601      	mov	r1, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	60ba      	str	r2, [r7, #8]
 8002d8c:	b2ca      	uxtb	r2, r1
 8002d8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	dbf0      	blt.n	8002d80 <_read+0x12>
  }

  return len;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e009      	b.n	8002dce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60ba      	str	r2, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	dbf1      	blt.n	8002dba <_write+0x12>
  }
  return len;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_close>:

int _close(int file)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e08:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_isatty>:

int _isatty(int file)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <_sbrk+0x5c>)
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <_sbrk+0x60>)
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <_sbrk+0x64>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <_sbrk+0x68>)
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d207      	bcs.n	8002e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e78:	f017 fe04 	bl	801aa84 <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	220c      	movs	r2, #12
 8002e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	e009      	b.n	8002e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_sbrk+0x64>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <_sbrk+0x64>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <_sbrk+0x64>)
 8002e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24050000 	.word	0x24050000
 8002ea8:	00003200 	.word	0x00003200
 8002eac:	240144f0 	.word	0x240144f0
 8002eb0:	2401da40 	.word	0x2401da40

08002eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb8:	4b32      	ldr	r3, [pc, #200]	@ (8002f84 <SystemInit+0xd0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <SystemInit+0xd0>)
 8002ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <SystemInit+0xd4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d807      	bhi.n	8002ee4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f88 <SystemInit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f88 <SystemInit+0xd4>)
 8002ede:	f043 0307 	orr.w	r3, r3, #7
 8002ee2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <SystemInit+0xd8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <SystemInit+0xd8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <SystemInit+0xd8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <SystemInit+0xd8>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4924      	ldr	r1, [pc, #144]	@ (8002f8c <SystemInit+0xd8>)
 8002efc:	4b24      	ldr	r3, [pc, #144]	@ (8002f90 <SystemInit+0xdc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <SystemInit+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d007      	beq.n	8002f1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SystemInit+0xd4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <SystemInit+0xd4>)
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <SystemInit+0xd8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SystemInit+0xd8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <SystemInit+0xd8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <SystemInit+0xd8>)
 8002f32:	4a18      	ldr	r2, [pc, #96]	@ (8002f94 <SystemInit+0xe0>)
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <SystemInit+0xd8>)
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <SystemInit+0xe4>)
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <SystemInit+0xd8>)
 8002f3e:	4a17      	ldr	r2, [pc, #92]	@ (8002f9c <SystemInit+0xe8>)
 8002f40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f42:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <SystemInit+0xd8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <SystemInit+0xd8>)
 8002f4a:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <SystemInit+0xe8>)
 8002f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <SystemInit+0xd8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f54:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <SystemInit+0xd8>)
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <SystemInit+0xe8>)
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <SystemInit+0xd8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <SystemInit+0xd8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <SystemInit+0xd8>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	@ (8002f8c <SystemInit+0xd8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <SystemInit+0xec>)
 8002f74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00
 8002f88:	52002000 	.word	0x52002000
 8002f8c:	58024400 	.word	0x58024400
 8002f90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f94:	02020200 	.word	0x02020200
 8002f98:	01ff0000 	.word	0x01ff0000
 8002f9c:	01010280 	.word	0x01010280
 8002fa0:	52004000 	.word	0x52004000

08002fa4 <FindClosest>:
 */

#include "util.h"

uint32_t FindClosest(const uint32_t* arr, uint32_t len, uint32_t target)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
	uint32_t min_diff = 0xFFFFFFFF;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	61fb      	str	r3, [r7, #28]
	uint32_t closest_value = arr[0];
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	61bb      	str	r3, [r7, #24]

	for (uint32_t i = 0; i < len; i++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e019      	b.n	8002ff6 <FindClosest+0x52>
	{
		uint32_t diff = abs(arr[i] - target);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bfb8      	it	lt
 8002fd4:	425b      	neglt	r3, r3
 8002fd6:	613b      	str	r3, [r7, #16]

		if (diff < min_diff)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <FindClosest+0x4c>
		{
			min_diff = diff;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	61fb      	str	r3, [r7, #28]
			closest_value = arr[i];
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]
	for (uint32_t i = 0; i < len; i++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3e1      	bcc.n	8002fc2 <FindClosest+0x1e>
		}
	}

	return closest_value;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <VibeCheck_Init>:
		TIM_HandleTypeDef* htim_rgb,
		volatile uint32_t* time_micros,
		SPI_HandleTypeDef* hspi_accel0,
		SPI_HandleTypeDef* hspi_accel1,
		SPI_HandleTypeDef* hspi_accel2)
{
 800300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300e:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8003012:	af10      	add	r7, sp, #64	@ 0x40
 8003014:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 8003018:	f5a4 7407 	sub.w	r4, r4, #540	@ 0x21c
 800301c:	6020      	str	r0, [r4, #0]
 800301e:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 8003022:	f5a0 7008 	sub.w	r0, r0, #544	@ 0x220
 8003026:	6001      	str	r1, [r0, #0]
 8003028:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800302c:	f5a1 7109 	sub.w	r1, r1, #548	@ 0x224
 8003030:	600a      	str	r2, [r1, #0]
 8003032:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003036:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 800303a:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);  /* wait for steady power so the RGB LEDs don't get into a weird state */
 800303c:	200a      	movs	r0, #10
 800303e:	f004 fe89 	bl	8007d54 <HAL_Delay>

	VibeCheckShell_Init(&vc->shell);  /* the shell is linked to the USB middle-ware in usbd_cdc_if.c */
 8003042:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003046:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f002 fef1 	bl	8005e34 <VibeCheckShell_Init>

	VibeCheckShell_InputHandler strobe_cmd = {
 8003052:	4aca      	ldr	r2, [pc, #808]	@ (800337c <VibeCheck_Init+0x370>)
 8003054:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8003058:	6810      	ldr	r0, [r2, #0]
 800305a:	6018      	str	r0, [r3, #0]
 800305c:	8891      	ldrh	r1, [r2, #4]
 800305e:	7992      	ldrb	r2, [r2, #6]
 8003060:	8099      	strh	r1, [r3, #4]
 8003062:	719a      	strb	r2, [r3, #6]
 8003064:	f207 13ef 	addw	r3, r7, #495	@ 0x1ef
 8003068:	2239      	movs	r2, #57	@ 0x39
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f017 fc98 	bl	801a9a2 <memset>
 8003072:	4bc3      	ldr	r3, [pc, #780]	@ (8003380 <VibeCheck_Init+0x374>)
 8003074:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
			.name = "strobe",
			.execute = VibeCheckStrobeCMD_Execute,
			.obj = &vc->strobe
 8003078:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800307c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4bc0      	ldr	r3, [pc, #768]	@ (8003384 <VibeCheck_Init+0x378>)
 8003084:	4413      	add	r3, r2
	VibeCheckShell_InputHandler strobe_cmd = {
 8003086:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
	};

	VibeCheckShell_InputHandler wavegen_cmd = {
 800308a:	4abf      	ldr	r2, [pc, #764]	@ (8003388 <VibeCheck_Init+0x37c>)
 800308c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003090:	6810      	ldr	r0, [r2, #0]
 8003092:	6851      	ldr	r1, [r2, #4]
 8003094:	c303      	stmia	r3!, {r0, r1}
 8003096:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800309a:	2238      	movs	r2, #56	@ 0x38
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f017 fc7f 	bl	801a9a2 <memset>
 80030a4:	4bb9      	ldr	r3, [pc, #740]	@ (800338c <VibeCheck_Init+0x380>)
 80030a6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
			.name = "wavegen",
			.execute = VibeCheckWaveGenCMD_Execute,
			.obj = &vc->wavegen
 80030aa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80030ae:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4bb6      	ldr	r3, [pc, #728]	@ (8003390 <VibeCheck_Init+0x384>)
 80030b6:	4413      	add	r3, r2
	VibeCheckShell_InputHandler wavegen_cmd = {
 80030b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	};

	VibeCheckShell_InputHandler rgb_cmd = {
 80030bc:	4bb5      	ldr	r3, [pc, #724]	@ (8003394 <VibeCheck_Init+0x388>)
 80030be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030c2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80030c6:	223c      	movs	r2, #60	@ 0x3c
 80030c8:	2100      	movs	r1, #0
 80030ca:	4618      	mov	r0, r3
 80030cc:	f017 fc69 	bl	801a9a2 <memset>
 80030d0:	4bb1      	ldr	r3, [pc, #708]	@ (8003398 <VibeCheck_Init+0x38c>)
 80030d2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
			.name = "rgb",
			.execute = VibeCheckRGBCMD_Execute,
			.obj = &vc->rgb
 80030d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80030da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4bae      	ldr	r3, [pc, #696]	@ (800339c <VibeCheck_Init+0x390>)
 80030e2:	4413      	add	r3, r2
	VibeCheckShell_InputHandler rgb_cmd = {
 80030e4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	};

	VibeCheckShell_InputHandler sensor_cmd = {
 80030e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80030ec:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80030f0:	4aab      	ldr	r2, [pc, #684]	@ (80033a0 <VibeCheck_Init+0x394>)
 80030f2:	460b      	mov	r3, r1
 80030f4:	6810      	ldr	r0, [r2, #0]
 80030f6:	6018      	str	r0, [r3, #0]
 80030f8:	8890      	ldrh	r0, [r2, #4]
 80030fa:	7992      	ldrb	r2, [r2, #6]
 80030fc:	8098      	strh	r0, [r3, #4]
 80030fe:	719a      	strb	r2, [r3, #6]
 8003100:	1dcb      	adds	r3, r1, #7
 8003102:	2239      	movs	r2, #57	@ 0x39
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f017 fc4b 	bl	801a9a2 <memset>
 800310c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003110:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003114:	4aa3      	ldr	r2, [pc, #652]	@ (80033a4 <VibeCheck_Init+0x398>)
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "sensor",
			.execute = VibeCheckSensorCMD_Execute,
			.obj = &vc->sensor
 8003118:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800311c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4ba1      	ldr	r3, [pc, #644]	@ (80033a8 <VibeCheck_Init+0x39c>)
 8003124:	4413      	add	r3, r2
	VibeCheckShell_InputHandler sensor_cmd = {
 8003126:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 800312a:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800312e:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_InputHandler record_cmd = {
 8003130:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003134:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003138:	4a9c      	ldr	r2, [pc, #624]	@ (80033ac <VibeCheck_Init+0x3a0>)
 800313a:	4618      	mov	r0, r3
 800313c:	4611      	mov	r1, r2
 800313e:	2348      	movs	r3, #72	@ 0x48
 8003140:	461a      	mov	r2, r3
 8003142:	f017 fccc 	bl	801aade <memcpy>
			.name = "record",
			.execute = VibeCheckRecordCMD_Execute,
			.obj = NULL
	};

	VibeCheckShell_InputHandler connect_cmd = {
 8003146:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800314a:	f5a3 72d8 	sub.w	r2, r3, #432	@ 0x1b0
 800314e:	4998      	ldr	r1, [pc, #608]	@ (80033b0 <VibeCheck_Init+0x3a4>)
 8003150:	4613      	mov	r3, r2
 8003152:	6808      	ldr	r0, [r1, #0]
 8003154:	6849      	ldr	r1, [r1, #4]
 8003156:	c303      	stmia	r3!, {r0, r1}
 8003158:	f102 0308 	add.w	r3, r2, #8
 800315c:	2238      	movs	r2, #56	@ 0x38
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f017 fc1e 	bl	801a9a2 <memset>
 8003166:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800316a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800316e:	4a91      	ldr	r2, [pc, #580]	@ (80033b4 <VibeCheck_Init+0x3a8>)
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "connect",
			.execute = VibeCheckConnectCMD_Execute,
			.obj = &vc->rgb
 8003172:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003176:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b87      	ldr	r3, [pc, #540]	@ (800339c <VibeCheck_Init+0x390>)
 800317e:	4413      	add	r3, r2
	VibeCheckShell_InputHandler connect_cmd = {
 8003180:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003184:	f5a2 72d8 	sub.w	r2, r2, #432	@ 0x1b0
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_InputHandler disconnect_cmd = {
 800318a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800318e:	f5a3 74fc 	sub.w	r4, r3, #504	@ 0x1f8
 8003192:	4a89      	ldr	r2, [pc, #548]	@ (80033b8 <VibeCheck_Init+0x3ac>)
 8003194:	4623      	mov	r3, r4
 8003196:	6810      	ldr	r0, [r2, #0]
 8003198:	6851      	ldr	r1, [r2, #4]
 800319a:	c303      	stmia	r3!, {r0, r1}
 800319c:	8911      	ldrh	r1, [r2, #8]
 800319e:	7a92      	ldrb	r2, [r2, #10]
 80031a0:	8019      	strh	r1, [r3, #0]
 80031a2:	709a      	strb	r2, [r3, #2]
 80031a4:	f104 030b 	add.w	r3, r4, #11
 80031a8:	2235      	movs	r2, #53	@ 0x35
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f017 fbf8 	bl	801a9a2 <memset>
 80031b2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031b6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031ba:	4a80      	ldr	r2, [pc, #512]	@ (80033bc <VibeCheck_Init+0x3b0>)
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
			.name = "disconnect",
			.execute = VibeCheckDisconnectCMD_Execute,
			.obj = &vc->rgb
 80031be:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031c2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b74      	ldr	r3, [pc, #464]	@ (800339c <VibeCheck_Init+0x390>)
 80031ca:	4413      	add	r3, r2
	VibeCheckShell_InputHandler disconnect_cmd = {
 80031cc:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80031d0:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80031d4:	6453      	str	r3, [r2, #68]	@ 0x44
	};

	VibeCheckShell_RegisterInputHandler(&vc->shell, strobe_cmd);
 80031d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80031da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031de:	681e      	ldr	r6, [r3, #0]
 80031e0:	466d      	mov	r5, sp
 80031e2:	f507 74fa 	add.w	r4, r7, #500	@ 0x1f4
 80031e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80031f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031fa:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80031fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003200:	4630      	mov	r0, r6
 8003202:	f002 ff7d 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, wavegen_cmd);
 8003206:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800320a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800320e:	681e      	ldr	r6, [r3, #0]
 8003210:	466d      	mov	r5, sp
 8003212:	f507 74d6 	add.w	r4, r7, #428	@ 0x1ac
 8003216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003222:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003226:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800322a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800322e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003230:	4630      	mov	r0, r6
 8003232:	f002 ff65 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, rgb_cmd);
 8003236:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800323a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800323e:	681e      	ldr	r6, [r3, #0]
 8003240:	466d      	mov	r5, sp
 8003242:	f507 74b2 	add.w	r4, r7, #356	@ 0x164
 8003246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003252:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003256:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800325a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800325e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003260:	4630      	mov	r0, r6
 8003262:	f002 ff4d 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, sensor_cmd);
 8003266:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800326a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003276:	f5a3 7690 	sub.w	r6, r3, #288	@ 0x120
 800327a:	466d      	mov	r5, sp
 800327c:	f106 040c 	add.w	r4, r6, #12
 8003280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003290:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003294:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f002 ff31 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, record_cmd);
 800329e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032a2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032ae:	f5a3 76b4 	sub.w	r6, r3, #360	@ 0x168
 80032b2:	466d      	mov	r5, sp
 80032b4:	f106 040c 	add.w	r4, r6, #12
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80032cc:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f002 ff15 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, connect_cmd);
 80032d6:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032da:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80032e6:	f5a3 76d8 	sub.w	r6, r3, #432	@ 0x1b0
 80032ea:	466d      	mov	r5, sp
 80032ec:	f106 040c 	add.w	r4, r6, #12
 80032f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003304:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f002 fef9 	bl	8006100 <VibeCheckShell_RegisterInputHandler>
	VibeCheckShell_RegisterInputHandler(&vc->shell, disconnect_cmd);
 800330e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003312:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800331e:	f5a3 76fc 	sub.w	r6, r3, #504	@ 0x1f8
 8003322:	466d      	mov	r5, sp
 8003324:	f106 040c 	add.w	r4, r6, #12
 8003328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003334:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003338:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800333c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f002 fedd 	bl	8006100 <VibeCheckShell_RegisterInputHandler>


	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003346:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800334a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800334e:	4a1c      	ldr	r2, [pc, #112]	@ (80033c0 <VibeCheck_Init+0x3b4>)
 8003350:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Data_Execute,
			.obj = &vc->sensor
 8003352:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003356:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <VibeCheck_Init+0x39c>)
 800335e:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_data_sender = {
 8003360:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003364:	f5a2 7200 	sub.w	r2, r2, #512	@ 0x200
 8003368:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler sensor_status_sender = {
 800336a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800336e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003372:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <VibeCheck_Init+0x3b8>)
 8003374:	601a      	str	r2, [r3, #0]
			.execute = VibeCheckSensorSender_Status_Execute,
			.obj = &vc->sensor
 8003376:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800337a:	e025      	b.n	80033c8 <VibeCheck_Init+0x3bc>
 800337c:	0801e100 	.word	0x0801e100
 8003380:	08006d69 	.word	0x08006d69
 8003384:	00011428 	.word	0x00011428
 8003388:	0801e108 	.word	0x0801e108
 800338c:	08007a81 	.word	0x08007a81
 8003390:	00011450 	.word	0x00011450
 8003394:	00626772 	.word	0x00626772
 8003398:	08004351 	.word	0x08004351
 800339c:	00012490 	.word	0x00012490
 80033a0:	0801e110 	.word	0x0801e110
 80033a4:	080059a1 	.word	0x080059a1
 80033a8:	00012a34 	.word	0x00012a34
 80033ac:	0801e118 	.word	0x0801e118
 80033b0:	0801e160 	.word	0x0801e160
 80033b4:	08003e19 	.word	0x08003e19
 80033b8:	0801e168 	.word	0x0801e168
 80033bc:	08003e5d 	.word	0x08003e5d
 80033c0:	08005cc5 	.word	0x08005cc5
 80033c4:	08005da9 	.word	0x08005da9
 80033c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <VibeCheck_Init+0x524>)
 80033d0:	4413      	add	r3, r2
	VibeCheckShell_OutputHandler sensor_status_sender = {
 80033d2:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80033d6:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 80033da:	6053      	str	r3, [r2, #4]
	};

	VibeCheckShell_OutputHandler mute_button_sender = {
 80033dc:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80033e0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80033e4:	4a53      	ldr	r2, [pc, #332]	@ (8003534 <VibeCheck_Init+0x528>)
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80033ec:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckMuteSender_Execute,
			.obj = NULL
	};

	VibeCheckShell_OutputHandler record_button_sender = {
 80033f4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80033f8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80033fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003538 <VibeCheck_Init+0x52c>)
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003404:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
			.execute = VibeCheckRecordSender_Execute,
			.obj = NULL
	};


	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_data_sender);
 800340c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003410:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800341a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800341e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003422:	f002 fea1 	bl	8006168 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, sensor_status_sender);
 8003426:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800342a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003434:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003438:	e893 0006 	ldmia.w	r3, {r1, r2}
 800343c:	f002 fe94 	bl	8006168 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, mute_button_sender);
 8003440:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003444:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800344e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8003452:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003456:	f002 fe87 	bl	8006168 <VibeCheckShell_RegisterOutputHandler>
	VibeCheckShell_RegisterOutputHandler(&vc->shell, record_button_sender);
 800345a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800345e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003468:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800346c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003470:	f002 fe7a 	bl	8006168 <VibeCheckShell_RegisterOutputHandler>


	VibeCheckStrobe_Init(&vc->strobe, htim_strobe);
 8003474:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003478:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b2f      	ldr	r3, [pc, #188]	@ (800353c <VibeCheck_Init+0x530>)
 8003480:	4413      	add	r3, r2
 8003482:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8003486:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800348a:	6811      	ldr	r1, [r2, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 f931 	bl	80066f4 <VibeCheckStrobe_Init>
	VibeCheckWaveGen_Init(&vc->wavegen, hdac_wavegen, htim_wavegen);
 8003492:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003496:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <VibeCheck_Init+0x534>)
 800349e:	4413      	add	r3, r2
 80034a0:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80034a4:	f5a2 7209 	sub.w	r2, r2, #548	@ 0x224
 80034a8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80034ac:	f5a1 710a 	sub.w	r1, r1, #552	@ 0x228
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	6809      	ldr	r1, [r1, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fed9 	bl	800726c <VibeCheckWaveGen_Init>
	VibeCheckRGB_Init(&vc->rgb, htim_rgb);
 80034ba:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034be:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <VibeCheck_Init+0x538>)
 80034c6:	4413      	add	r3, r2
 80034c8:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fce7 	bl	8003ea0 <VibeCheckRGB_Init>
	VibeCheckRGB_SetBaseSequence(&vc->rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 80034d2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034d6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4819      	ldr	r0, [pc, #100]	@ (8003544 <VibeCheck_Init+0x538>)
 80034de:	4418      	add	r0, r3
 80034e0:	2312      	movs	r3, #18
 80034e2:	4a19      	ldr	r2, [pc, #100]	@ (8003548 <VibeCheck_Init+0x53c>)
 80034e4:	4919      	ldr	r1, [pc, #100]	@ (800354c <VibeCheck_Init+0x540>)
 80034e6:	f000 fdac 	bl	8004042 <VibeCheckRGB_SetBaseSequence>
	VibeCheckRGB_SetTopSequence(&vc->rgb, top_sequence_times, top_sequence_colors, top_sequence_len);
 80034ea:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 80034ee:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4813      	ldr	r0, [pc, #76]	@ (8003544 <VibeCheck_Init+0x538>)
 80034f6:	4418      	add	r0, r3
 80034f8:	2304      	movs	r3, #4
 80034fa:	4a15      	ldr	r2, [pc, #84]	@ (8003550 <VibeCheck_Init+0x544>)
 80034fc:	4915      	ldr	r1, [pc, #84]	@ (8003554 <VibeCheck_Init+0x548>)
 80034fe:	f000 fdd7 	bl	80040b0 <VibeCheckRGB_SetTopSequence>
	VibeCheckSensor_Init(&vc->sensor, time_micros, hspi_accel0, hspi_accel1, hspi_accel2);
 8003502:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8003506:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4808      	ldr	r0, [pc, #32]	@ (8003530 <VibeCheck_Init+0x524>)
 800350e:	4418      	add	r0, r3
 8003510:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800351a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800351e:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8003522:	f000 fff9 	bl	8004518 <VibeCheckSensor_Init>
}
 8003526:	bf00      	nop
 8003528:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 800352c:	46bd      	mov	sp, r7
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003530:	00012a34 	.word	0x00012a34
 8003534:	08003d61 	.word	0x08003d61
 8003538:	08003dc9 	.word	0x08003dc9
 800353c:	00011428 	.word	0x00011428
 8003540:	00011450 	.word	0x00011450
 8003544:	00012490 	.word	0x00012490
 8003548:	0801e470 	.word	0x0801e470
 800354c:	0801e428 	.word	0x0801e428
 8003550:	0801e3bc 	.word	0x0801e3bc
 8003554:	0801e3ac 	.word	0x0801e3ac

08003558 <VibeCheck_Loop>:

void VibeCheck_Loop(VibeCheck* vc)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b08f      	sub	sp, #60	@ 0x3c
 800355c:	af02      	add	r7, sp, #8
 800355e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003560:	f004 fbec 	bl	8007d3c <HAL_GetTick>
 8003564:	62b8      	str	r0, [r7, #40]	@ 0x28


	/* call object update functions */
	VibeCheckWaveGen_Update(&vc->wavegen);
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4b83      	ldr	r3, [pc, #524]	@ (8003778 <VibeCheck_Loop+0x220>)
 800356a:	4413      	add	r3, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f003 ff0b 	bl	8007388 <VibeCheckWaveGen_Update>
	VibeCheckRGB_Update(&vc->rgb);
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4b81      	ldr	r3, [pc, #516]	@ (800377c <VibeCheck_Loop+0x224>)
 8003576:	4413      	add	r3, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fcd7 	bl	8003f2c <VibeCheckRGB_Update>
	VibeCheckSensor_Update(&vc->sensor);
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4b7f      	ldr	r3, [pc, #508]	@ (8003780 <VibeCheck_Loop+0x228>)
 8003582:	4413      	add	r3, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f001 f8ef 	bl	8004768 <VibeCheckSensor_Update>


	/* update the shell */
	VibeCheckShell_Status shell_status = VibeCheckShell_Update(&vc->shell);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 fc99 	bl	8005ec4 <VibeCheckShell_Update>
 8003592:	4603      	mov	r3, r0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24


	/* send over USB */
	char* usb_tx;
	uint32_t usb_tx_len;
	if (VibeCheckShell_GetOutput(&vc->shell, &usb_tx, &usb_tx_len))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f107 021c 	add.w	r2, r7, #28
 800359c:	f107 0120 	add.w	r1, r7, #32
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fe61 	bl	8006268 <VibeCheckShell_GetOutput>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00f      	beq.n	80035cc <VibeCheck_Loop+0x74>
//
//		if ((end != '\n') || (start != 'a' && start != 'd' && start != 'e'))
//			HAL_Delay(1000);
		/* XXX */

		if (CDC_Transmit_HS((uint8_t*)usb_tx, usb_tx_len) == USBD_OK)
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	b292      	uxth	r2, r2
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f015 f9fb 	bl	80189b0 <CDC_Transmit_HS>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <VibeCheck_Loop+0x74>
			VibeCheckShell_UpdateOutputBuffer(&vc->shell, usb_tx_len);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fea3 	bl	8006312 <VibeCheckShell_UpdateOutputBuffer>
	}


	/* visualize the acceleration with the RGB LEDs */
	if (time - time_prev_led_update > 30)
 80035cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003784 <VibeCheck_Loop+0x22c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b1e      	cmp	r3, #30
 80035d6:	f240 81a1 	bls.w	800391c <VibeCheck_Loop+0x3c4>
	{
		time_prev_led_update = time;
 80035da:	4a6a      	ldr	r2, [pc, #424]	@ (8003784 <VibeCheck_Loop+0x22c>)
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	6013      	str	r3, [r2, #0]

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e4:	e196      	b.n	8003914 <VibeCheck_Loop+0x3bc>
		{
			if (vc->sensor.status[i].is_connected)
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	18ca      	adds	r2, r1, r3
 80035f4:	4b64      	ldr	r3, [pc, #400]	@ (8003788 <VibeCheck_Loop+0x230>)
 80035f6:	4413      	add	r3, r2
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8187 	beq.w	800390e <VibeCheck_Loop+0x3b6>
			{
				if (vc->sensor.status[i].accel_measuring)
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	18ca      	adds	r2, r1, r3
 800360e:	4b5f      	ldr	r3, [pc, #380]	@ (800378c <VibeCheck_Loop+0x234>)
 8003610:	4413      	add	r3, r2
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80c3 	beq.w	80037a0 <VibeCheck_Loop+0x248>
				{
					/* write the LEDs */
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].accel_x) / vc->sensor.sensor_config[i].g_range, 0, 0);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4857      	ldr	r0, [pc, #348]	@ (800377c <VibeCheck_Loop+0x224>)
 800361e:	4418      	add	r0, r3
 8003620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	189c      	adds	r4, r3, r2
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	18ca      	adds	r2, r1, r3
 8003636:	4b56      	ldr	r3, [pc, #344]	@ (8003790 <VibeCheck_Loop+0x238>)
 8003638:	4413      	add	r3, r2
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eef0 7ae7 	vabs.f32	s15, s15
 8003642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003646:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8003770 <VibeCheck_Loop+0x218>
 800364a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	18ca      	adds	r2, r1, r3
 800365c:	4b4d      	ldr	r3, [pc, #308]	@ (8003794 <VibeCheck_Loop+0x23c>)
 800365e:	4413      	add	r3, r2
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800366a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800366e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003672:	edc7 7a00 	vstr	s15, [r7]
 8003676:	783b      	ldrb	r3, [r7, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	4621      	mov	r1, r4
 8003682:	f000 fd4c 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_y) / vc->sensor.sensor_config[i].g_range, 0);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	483c      	ldr	r0, [pc, #240]	@ (800377c <VibeCheck_Loop+0x224>)
 800368a:	4418      	add	r0, r3
 800368c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	1c5c      	adds	r4, r3, #1
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	18ca      	adds	r2, r1, r3
 80036a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003798 <VibeCheck_Loop+0x240>)
 80036a6:	4413      	add	r3, r2
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	eef0 7ae7 	vabs.f32	s15, s15
 80036b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036b4:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8003770 <VibeCheck_Loop+0x218>
 80036b8:	ee27 5b06 	vmul.f64	d5, d7, d6
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	18ca      	adds	r2, r1, r3
 80036ca:	4b32      	ldr	r3, [pc, #200]	@ (8003794 <VibeCheck_Loop+0x23c>)
 80036cc:	4413      	add	r3, r2
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	ee07 3a90 	vmov	s15, r3
 80036d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80036d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80036e0:	edc7 7a00 	vstr	s15, [r7]
 80036e4:	783b      	ldrb	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2200      	movs	r2, #0
 80036ea:	9200      	str	r2, [sp, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	4621      	mov	r1, r4
 80036f0:	f000 fd15 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].accel_z) / vc->sensor.sensor_config[i].g_range);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4821      	ldr	r0, [pc, #132]	@ (800377c <VibeCheck_Loop+0x224>)
 80036f8:	4418      	add	r0, r3
 80036fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	1c9c      	adds	r4, r3, #2
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	18ca      	adds	r2, r1, r3
 8003712:	4b22      	ldr	r3, [pc, #136]	@ (800379c <VibeCheck_Loop+0x244>)
 8003714:	4413      	add	r3, r2
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eef0 7ae7 	vabs.f32	s15, s15
 800371e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003722:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8003770 <VibeCheck_Loop+0x218>
 8003726:	ee27 5b06 	vmul.f64	d5, d7, d6
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	18ca      	adds	r2, r1, r3
 8003738:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <VibeCheck_Loop+0x23c>)
 800373a:	4413      	add	r3, r2
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003746:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800374a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800374e:	edc7 7a00 	vstr	s15, [r7]
 8003752:	783b      	ldrb	r3, [r7, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	2200      	movs	r2, #0
 800375c:	4621      	mov	r1, r4
 800375e:	f000 fcde 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SendColors(&vc->rgb);
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	4b05      	ldr	r3, [pc, #20]	@ (800377c <VibeCheck_Loop+0x224>)
 8003766:	4413      	add	r3, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fd61 	bl	8004230 <VibeCheckRGB_SendColors>
 800376e:	e0ce      	b.n	800390e <VibeCheck_Loop+0x3b6>
 8003770:	00000000 	.word	0x00000000
 8003774:	406fe000 	.word	0x406fe000
 8003778:	00011450 	.word	0x00011450
 800377c:	00012490 	.word	0x00012490
 8003780:	00012a34 	.word	0x00012a34
 8003784:	240144f4 	.word	0x240144f4
 8003788:	00012b30 	.word	0x00012b30
 800378c:	00012b34 	.word	0x00012b34
 8003790:	00012aa8 	.word	0x00012aa8
 8003794:	00012a44 	.word	0x00012a44
 8003798:	00012aac 	.word	0x00012aac
 800379c:	00012ab0 	.word	0x00012ab0
				}
				else if (vc->sensor.status[i].gyro_measuring)
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	18ca      	adds	r2, r1, r3
 80037ae:	4b90      	ldr	r3, [pc, #576]	@ (80039f0 <VibeCheck_Loop+0x498>)
 80037b0:	4413      	add	r3, r2
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80aa 	beq.w	800390e <VibeCheck_Loop+0x3b6>
				{
					/* write the LEDs */
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_x) / vc->sensor.sensor_config[i].dps_range, 0, 0);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	488d      	ldr	r0, [pc, #564]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 80037be:	4418      	add	r0, r3
 80037c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	189c      	adds	r4, r3, r2
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	18ca      	adds	r2, r1, r3
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <VibeCheck_Loop+0x4a0>)
 80037d8:	4413      	add	r3, r2
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	eef0 7ae7 	vabs.f32	s15, s15
 80037e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e6:	ed9f 6b80 	vldr	d6, [pc, #512]	@ 80039e8 <VibeCheck_Loop+0x490>
 80037ea:	ee27 5b06 	vmul.f64	d5, d7, d6
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	18ca      	adds	r2, r1, r3
 80037fc:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <VibeCheck_Loop+0x4a4>)
 80037fe:	4413      	add	r3, r2
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800380a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800380e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003812:	edc7 7a00 	vstr	s15, [r7]
 8003816:	783b      	ldrb	r3, [r7, #0]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2300      	movs	r3, #0
 8003820:	4621      	mov	r1, r4
 8003822:	f000 fc7c 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 1, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_y) / vc->sensor.sensor_config[i].dps_range, 0);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4872      	ldr	r0, [pc, #456]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 800382a:	4418      	add	r0, r3
 800382c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	1c5c      	adds	r4, r3, #1
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	18ca      	adds	r2, r1, r3
 8003844:	4b6e      	ldr	r3, [pc, #440]	@ (8003a00 <VibeCheck_Loop+0x4a8>)
 8003846:	4413      	add	r3, r2
 8003848:	edd3 7a00 	vldr	s15, [r3]
 800384c:	eef0 7ae7 	vabs.f32	s15, s15
 8003850:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003854:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 80039e8 <VibeCheck_Loop+0x490>
 8003858:	ee27 5b06 	vmul.f64	d5, d7, d6
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	18ca      	adds	r2, r1, r3
 800386a:	4b64      	ldr	r3, [pc, #400]	@ (80039fc <VibeCheck_Loop+0x4a4>)
 800386c:	4413      	add	r3, r2
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003878:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800387c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003880:	edc7 7a00 	vstr	s15, [r7]
 8003884:	783b      	ldrb	r3, [r7, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2200      	movs	r2, #0
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	4621      	mov	r1, r4
 8003890:	f000 fc45 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SetColor(&vc->rgb, 3 * i + 2, 0, 0, 255 * fabs(vc->sensor.sensor_array[i].gyro_z) / vc->sensor.sensor_config[i].dps_range);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4857      	ldr	r0, [pc, #348]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 8003898:	4418      	add	r0, r3
 800389a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	1c9c      	adds	r4, r3, #2
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	18ca      	adds	r2, r1, r3
 80038b2:	4b54      	ldr	r3, [pc, #336]	@ (8003a04 <VibeCheck_Loop+0x4ac>)
 80038b4:	4413      	add	r3, r2
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	eef0 7ae7 	vabs.f32	s15, s15
 80038be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80038c2:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 80039e8 <VibeCheck_Loop+0x490>
 80038c6:	ee27 5b06 	vmul.f64	d5, d7, d6
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	18ca      	adds	r2, r1, r3
 80038d8:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <VibeCheck_Loop+0x4a4>)
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80038e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038ee:	edc7 7a00 	vstr	s15, [r7]
 80038f2:	783b      	ldrb	r3, [r7, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	2200      	movs	r2, #0
 80038fc:	4621      	mov	r1, r4
 80038fe:	f000 fc0e 	bl	800411e <VibeCheckRGB_SetColor>
					VibeCheckRGB_SendColors(&vc->rgb);
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 8003906:	4413      	add	r3, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fc91 	bl	8004230 <VibeCheckRGB_SendColors>
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	3301      	adds	r3, #1
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	2b02      	cmp	r3, #2
 8003918:	f67f ae65 	bls.w	80035e6 <VibeCheck_Loop+0x8e>
	/* update the RGB LEDs based on status changes of the sensors */
	/* this logic is a bit convoluted but works for now */

	uint32_t channel;
	uint32_t is_connected;
	if (VibeCheckSensor_ConnectionChanged(&vc->sensor, &channel, &is_connected))
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <VibeCheck_Loop+0x4b0>)
 8003920:	4413      	add	r3, r2
 8003922:	f107 0214 	add.w	r2, r7, #20
 8003926:	f107 0118 	add.w	r1, r7, #24
 800392a:	4618      	mov	r0, r3
 800392c:	f001 fb86 	bl	800503c <VibeCheckSensor_ConnectionChanged>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80b4 	beq.w	8003aa0 <VibeCheck_Loop+0x548>
	{
		if (is_connected)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06e      	beq.n	8003a1c <VibeCheck_Loop+0x4c4>
		{
			if (vc->sensor.status[channel].accel_measuring || vc->sensor.status[channel].gyro_measuring)
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	18ca      	adds	r2, r1, r3
 800394c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <VibeCheck_Loop+0x4b4>)
 800394e:	4413      	add	r3, r2
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <VibeCheck_Loop+0x416>
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	18ca      	adds	r2, r1, r3
 8003964:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <VibeCheck_Loop+0x498>)
 8003966:	4413      	add	r3, r2
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d022      	beq.n	80039b4 <VibeCheck_Loop+0x45c>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 0);
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 8003972:	4413      	add	r3, r2
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	460a      	mov	r2, r1
 8003978:	0052      	lsls	r2, r2, #1
 800397a:	4411      	add	r1, r2
 800397c:	2200      	movs	r2, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fc3f 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 0);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 8003988:	4413      	add	r3, r2
 800398a:	69b9      	ldr	r1, [r7, #24]
 800398c:	460a      	mov	r2, r1
 800398e:	0052      	lsls	r2, r2, #1
 8003990:	440a      	add	r2, r1
 8003992:	1c51      	adds	r1, r2, #1
 8003994:	2200      	movs	r2, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fc33 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 0);
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 80039a0:	4413      	add	r3, r2
 80039a2:	69b9      	ldr	r1, [r7, #24]
 80039a4:	460a      	mov	r2, r1
 80039a6:	0052      	lsls	r2, r2, #1
 80039a8:	440a      	add	r2, r1
 80039aa:	1c91      	adds	r1, r2, #2
 80039ac:	2200      	movs	r2, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fc27 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
			}
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_connected_times[channel], led_sensor_connected_colors[channel], led_sensor_connected_len[channel]);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	480f      	ldr	r0, [pc, #60]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 80039b8:	4418      	add	r0, r3
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <VibeCheck_Loop+0x4b8>)
 80039be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <VibeCheck_Loop+0x4bc>)
 80039c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4c12      	ldr	r4, [pc, #72]	@ (8003a18 <VibeCheck_Loop+0x4c0>)
 80039ce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80039d2:	f000 fb6d 	bl	80040b0 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <VibeCheck_Loop+0x49c>)
 80039da:	4413      	add	r3, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb7e 	bl	80040de <VibeCheckRGB_StartTopSequence>
 80039e2:	e055      	b.n	8003a90 <VibeCheck_Loop+0x538>
 80039e4:	f3af 8000 	nop.w
 80039e8:	00000000 	.word	0x00000000
 80039ec:	406fe000 	.word	0x406fe000
 80039f0:	00012b38 	.word	0x00012b38
 80039f4:	00012490 	.word	0x00012490
 80039f8:	00012ab4 	.word	0x00012ab4
 80039fc:	00012a4c 	.word	0x00012a4c
 8003a00:	00012ab8 	.word	0x00012ab8
 8003a04:	00012abc 	.word	0x00012abc
 8003a08:	00012a34 	.word	0x00012a34
 8003a0c:	00012b34 	.word	0x00012b34
 8003a10:	24000008 	.word	0x24000008
 8003a14:	24000014 	.word	0x24000014
 8003a18:	0801e940 	.word	0x0801e940
		}
		else
		{
			VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 1);
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4b9d      	ldr	r3, [pc, #628]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003a20:	4413      	add	r3, r2
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	460a      	mov	r2, r1
 8003a26:	0052      	lsls	r2, r2, #1
 8003a28:	4411      	add	r1, r2
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fbe8 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
			VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 1);
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4b97      	ldr	r3, [pc, #604]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003a36:	4413      	add	r3, r2
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	0052      	lsls	r2, r2, #1
 8003a3e:	440a      	add	r2, r1
 8003a40:	1c51      	adds	r1, r2, #1
 8003a42:	2201      	movs	r2, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fbdc 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
			VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 1);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4b91      	ldr	r3, [pc, #580]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	460a      	mov	r2, r1
 8003a54:	0052      	lsls	r2, r2, #1
 8003a56:	440a      	add	r2, r1
 8003a58:	1c91      	adds	r1, r2, #2
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fbd0 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
			VibeCheckRGB_SetTopSequence(&vc->rgb, led_sensor_disconnected_times[channel], led_sensor_disconnected_colors[channel], led_sensor_disconnected_len[channel]);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	488b      	ldr	r0, [pc, #556]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003a66:	4418      	add	r0, r3
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4a8b      	ldr	r2, [pc, #556]	@ (8003c98 <VibeCheck_Loop+0x740>)
 8003a6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4a8a      	ldr	r2, [pc, #552]	@ (8003c9c <VibeCheck_Loop+0x744>)
 8003a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	4c89      	ldr	r4, [pc, #548]	@ (8003ca0 <VibeCheck_Loop+0x748>)
 8003a7c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8003a80:	f000 fb16 	bl	80040b0 <VibeCheckRGB_SetTopSequence>
			VibeCheckRGB_StartTopSequence(&vc->rgb);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4b83      	ldr	r3, [pc, #524]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb27 	bl	80040de <VibeCheckRGB_StartTopSequence>
		}

		VibeCheckSensor_ResetConnectionFlag(&vc->sensor, channel);
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4b84      	ldr	r3, [pc, #528]	@ (8003ca4 <VibeCheck_Loop+0x74c>)
 8003a94:	4413      	add	r3, r2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 fb4b 	bl	8005136 <VibeCheckSensor_ResetConnectionFlag>
	}

	uint32_t accel_measuring, gyro_measuring;
	if (VibeCheckSensor_MeasuringChanged(&vc->sensor, &channel, &accel_measuring, &gyro_measuring))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4880      	ldr	r0, [pc, #512]	@ (8003ca4 <VibeCheck_Loop+0x74c>)
 8003aa4:	4418      	add	r0, r3
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	f107 0210 	add.w	r2, r7, #16
 8003aae:	f107 0118 	add.w	r1, r7, #24
 8003ab2:	f001 faf5 	bl	80050a0 <VibeCheckSensor_MeasuringChanged>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8095 	beq.w	8003be8 <VibeCheck_Loop+0x690>
	{
		if (accel_measuring || gyro_measuring)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <VibeCheck_Loop+0x572>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d030      	beq.n	8003b2c <VibeCheck_Loop+0x5d4>
		{
			if (vc->sensor.status[channel].is_connected)
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	18ca      	adds	r2, r1, r3
 8003ad8:	4b73      	ldr	r3, [pc, #460]	@ (8003ca8 <VibeCheck_Loop+0x750>)
 8003ada:	4413      	add	r3, r2
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8082 	beq.w	8003be8 <VibeCheck_Loop+0x690>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 0);
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	460a      	mov	r2, r1
 8003aee:	0052      	lsls	r2, r2, #1
 8003af0:	4411      	add	r1, r2
 8003af2:	2200      	movs	r2, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fb84 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 0);
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4b65      	ldr	r3, [pc, #404]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003afe:	4413      	add	r3, r2
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	460a      	mov	r2, r1
 8003b04:	0052      	lsls	r2, r2, #1
 8003b06:	440a      	add	r2, r1
 8003b08:	1c51      	adds	r1, r2, #1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fb78 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 0);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4b5f      	ldr	r3, [pc, #380]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003b16:	4413      	add	r3, r2
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	0052      	lsls	r2, r2, #1
 8003b1e:	440a      	add	r2, r1
 8003b20:	1c91      	adds	r1, r2, #2
 8003b22:	2200      	movs	r2, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fb6c 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
			if (vc->sensor.status[channel].is_connected)
 8003b2a:	e05d      	b.n	8003be8 <VibeCheck_Loop+0x690>
			}
		}
		else
		{
			if (vc->sensor.status[channel].is_connected)
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	18ca      	adds	r2, r1, r3
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca8 <VibeCheck_Loop+0x750>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d051      	beq.n	8003be8 <VibeCheck_Loop+0x690>
			{
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 0, 1);
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4b53      	ldr	r3, [pc, #332]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	0052      	lsls	r2, r2, #1
 8003b50:	4411      	add	r1, r2
 8003b52:	2201      	movs	r2, #1
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fb54 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 1, 1);
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	460a      	mov	r2, r1
 8003b64:	0052      	lsls	r2, r2, #1
 8003b66:	440a      	add	r2, r1
 8003b68:	1c51      	adds	r1, r2, #1
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fb48 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetUpdateWithSequence(&vc->rgb, 3 * channel + 2, 1);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4b47      	ldr	r3, [pc, #284]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003b76:	4413      	add	r3, r2
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	0052      	lsls	r2, r2, #1
 8003b7e:	440a      	add	r2, r1
 8003b80:	1c91      	adds	r1, r2, #2
 8003b82:	2201      	movs	r2, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fb3c 	bl	8004202 <VibeCheckRGB_SetUpdateWithSequence>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 0, 0, 0, 0);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4841      	ldr	r0, [pc, #260]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003b8e:	4418      	add	r0, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	1899      	adds	r1, r3, r2
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f000 fabd 	bl	800411e <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 1, 0, 0, 0);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	483b      	ldr	r0, [pc, #236]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003ba8:	4418      	add	r0, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f000 faaf 	bl	800411e <VibeCheckRGB_SetColor>
				VibeCheckRGB_SetColor(&vc->rgb, 3 * channel + 2, 0, 0, 0);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4834      	ldr	r0, [pc, #208]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003bc4:	4418      	add	r0, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	1c99      	adds	r1, r3, #2
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f000 faa1 	bl	800411e <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(&vc->rgb);
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4b2d      	ldr	r3, [pc, #180]	@ (8003c94 <VibeCheck_Loop+0x73c>)
 8003be0:	4413      	add	r3, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb24 	bl	8004230 <VibeCheckRGB_SendColors>
		}
	}


	/* check the buttons */
	if (time - time_prev_mute_press > 250 && HAL_GPIO_ReadPin(MUTE_BUTTON_GPIO_Port, MUTE_BUTTON_Pin))
 8003be8:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <VibeCheck_Loop+0x754>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2bfa      	cmp	r3, #250	@ 0xfa
 8003bf2:	d937      	bls.n	8003c64 <VibeCheck_Loop+0x70c>
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	482e      	ldr	r0, [pc, #184]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003bf8:	f008 fb00 	bl	800c1fc <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d030      	beq.n	8003c64 <VibeCheck_Loop+0x70c>
	{
		time_prev_mute_press = time;
 8003c02:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <VibeCheck_Loop+0x754>)
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	6013      	str	r3, [r2, #0]
		mute_pressed = 1;
 8003c08:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb4 <VibeCheck_Loop+0x75c>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

		if (is_muted)
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb8 <VibeCheck_Loop+0x760>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d013      	beq.n	8003c3e <VibeCheck_Loop+0x6e6>
		{
			is_muted = 0;
 8003c16:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <VibeCheck_Loop+0x760>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);  /* un-mute the output */
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2108      	movs	r1, #8
 8003c20:	4823      	ldr	r0, [pc, #140]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003c22:	f008 fb03 	bl	800c22c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);  /* turn off the LED */
 8003c26:	2200      	movs	r2, #0
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4821      	ldr	r0, [pc, #132]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003c2c:	f008 fafe 	bl	800c22c <HAL_GPIO_WritePin>
			VibeCheckStrobe_Unmute(&vc->strobe);
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4b22      	ldr	r3, [pc, #136]	@ (8003cbc <VibeCheck_Loop+0x764>)
 8003c34:	4413      	add	r3, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f002 fe08 	bl	800684c <VibeCheckStrobe_Unmute>
 8003c3c:	e012      	b.n	8003c64 <VibeCheck_Loop+0x70c>
		}
		else
		{
			is_muted = 1;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <VibeCheck_Loop+0x760>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_SET);  /* mute the output */
 8003c44:	2201      	movs	r2, #1
 8003c46:	2108      	movs	r1, #8
 8003c48:	4819      	ldr	r0, [pc, #100]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003c4a:	f008 faef 	bl	800c22c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_SET);  /* turn on the LED */
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2102      	movs	r1, #2
 8003c52:	4817      	ldr	r0, [pc, #92]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003c54:	f008 faea 	bl	800c22c <HAL_GPIO_WritePin>
			VibeCheckStrobe_Mute(&vc->strobe);
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4b18      	ldr	r3, [pc, #96]	@ (8003cbc <VibeCheck_Loop+0x764>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fdca 	bl	80067f8 <VibeCheckStrobe_Mute>
		}
	}

	if (time - time_prev_record_press > 250 && HAL_GPIO_ReadPin(RECORD_BUTTON_GPIO_Port, RECORD_BUTTON_Pin))
 8003c64:	4b16      	ldr	r3, [pc, #88]	@ (8003cc0 <VibeCheck_Loop+0x768>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2bfa      	cmp	r3, #250	@ 0xfa
 8003c6e:	d90d      	bls.n	8003c8c <VibeCheck_Loop+0x734>
 8003c70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c74:	480e      	ldr	r0, [pc, #56]	@ (8003cb0 <VibeCheck_Loop+0x758>)
 8003c76:	f008 fac1 	bl	800c1fc <HAL_GPIO_ReadPin>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <VibeCheck_Loop+0x734>
	{
		time_prev_record_press = time;
 8003c80:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc0 <VibeCheck_Loop+0x768>)
 8003c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c84:	6013      	str	r3, [r2, #0]
		record_pressed = 1;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <VibeCheck_Loop+0x76c>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
	}
}
 8003c8c:	bf00      	nop
 8003c8e:	3734      	adds	r7, #52	@ 0x34
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	00012490 	.word	0x00012490
 8003c98:	24000020 	.word	0x24000020
 8003c9c:	2400002c 	.word	0x2400002c
 8003ca0:	0801e94c 	.word	0x0801e94c
 8003ca4:	00012a34 	.word	0x00012a34
 8003ca8:	00012b30 	.word	0x00012b30
 8003cac:	240144f8 	.word	0x240144f8
 8003cb0:	58020000 	.word	0x58020000
 8003cb4:	24014504 	.word	0x24014504
 8003cb8:	24014500 	.word	0x24014500
 8003cbc:	00011428 	.word	0x00011428
 8003cc0:	240144fc 	.word	0x240144fc
 8003cc4:	24014508 	.word	0x24014508

08003cc8 <VibeCheckRecordCMD_Execute>:
#include "vibecheck_button_handler.h"

uint32_t is_muted, mute_pressed, record_pressed;

uint32_t VibeCheckRecordCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b092      	sub	sp, #72	@ 0x48
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
	/* for host to set recording LED */
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8003cd2:	f107 0308 	add.w	r3, r7, #8
 8003cd6:	2240      	movs	r2, #64	@ 0x40
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6838      	ldr	r0, [r7, #0]
 8003cdc:	f002 fb5c 	bl	8006398 <VibeCheckShell_GetNextString>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02f      	beq.n	8003d46 <VibeCheckRecordCMD_Execute+0x7e>
	{
		if (!strcmp(str, "start"))
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	4919      	ldr	r1, [pc, #100]	@ (8003d50 <VibeCheckRecordCMD_Execute+0x88>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fb0f 	bl	8000310 <strcmp>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <VibeCheckRecordCMD_Execute+0x4e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_SET); /* turn on the record LED */
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cfe:	4815      	ldr	r0, [pc, #84]	@ (8003d54 <VibeCheckRecordCMD_Execute+0x8c>)
 8003d00:	f008 fa94 	bl	800c22c <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003d04:	4914      	ldr	r1, [pc, #80]	@ (8003d58 <VibeCheckRecordCMD_Execute+0x90>)
 8003d06:	6838      	ldr	r0, [r7, #0]
 8003d08:	f002 fc66 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003d0c:	6838      	ldr	r0, [r7, #0]
 8003d0e:	f002 fce3 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e018      	b.n	8003d48 <VibeCheckRecordCMD_Execute+0x80>
		}
		else if (!strcmp(str, "stop"))
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	4910      	ldr	r1, [pc, #64]	@ (8003d5c <VibeCheckRecordCMD_Execute+0x94>)
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc faf7 	bl	8000310 <strcmp>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10e      	bne.n	8003d46 <VibeCheckRecordCMD_Execute+0x7e>
		{
			HAL_GPIO_WritePin(RECORD_INDICATOR_GPIO_Port, RECORD_INDICATOR_Pin, GPIO_PIN_RESET); /* turn off the record LED */
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d2e:	4809      	ldr	r0, [pc, #36]	@ (8003d54 <VibeCheckRecordCMD_Execute+0x8c>)
 8003d30:	f008 fa7c 	bl	800c22c <HAL_GPIO_WritePin>
			VibeCheckShell_PutOutputString(shell, "ack");
 8003d34:	4908      	ldr	r1, [pc, #32]	@ (8003d58 <VibeCheckRecordCMD_Execute+0x90>)
 8003d36:	6838      	ldr	r0, [r7, #0]
 8003d38:	f002 fc4e 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f002 fccb 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <VibeCheckRecordCMD_Execute+0x80>
		}
	}

	return 0;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3748      	adds	r7, #72	@ 0x48
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	0801e174 	.word	0x0801e174
 8003d54:	58020400 	.word	0x58020400
 8003d58:	0801e17c 	.word	0x0801e17c
 8003d5c:	0801e180 	.word	0x0801e180

08003d60 <VibeCheckMuteSender_Execute>:

uint32_t VibeCheckMuteSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
	/* mute button */
	if (mute_pressed)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <VibeCheckMuteSender_Execute+0x54>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01b      	beq.n	8003daa <VibeCheckMuteSender_Execute+0x4a>
	{
		mute_pressed = 0;
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <VibeCheckMuteSender_Execute+0x54>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003d78:	490f      	ldr	r1, [pc, #60]	@ (8003db8 <VibeCheckMuteSender_Execute+0x58>)
 8003d7a:	6838      	ldr	r0, [r7, #0]
 8003d7c:	f002 fc2c 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f002 fc9b 	bl	80066bc <VibeCheckShell_PutOutputSeparator>

		if (is_muted)
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <VibeCheckMuteSender_Execute+0x5c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <VibeCheckMuteSender_Execute+0x38>
			VibeCheckShell_PutOutputString(shell, "muted");
 8003d8e:	490c      	ldr	r1, [pc, #48]	@ (8003dc0 <VibeCheckMuteSender_Execute+0x60>)
 8003d90:	6838      	ldr	r0, [r7, #0]
 8003d92:	f002 fc21 	bl	80065d8 <VibeCheckShell_PutOutputString>
 8003d96:	e003      	b.n	8003da0 <VibeCheckMuteSender_Execute+0x40>
		else
			VibeCheckShell_PutOutputString(shell, "unmuted");
 8003d98:	490a      	ldr	r1, [pc, #40]	@ (8003dc4 <VibeCheckMuteSender_Execute+0x64>)
 8003d9a:	6838      	ldr	r0, [r7, #0]
 8003d9c:	f002 fc1c 	bl	80065d8 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8003da0:	6838      	ldr	r0, [r7, #0]
 8003da2:	f002 fc99 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <VibeCheckMuteSender_Execute+0x4c>
	}

	return 0;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24014504 	.word	0x24014504
 8003db8:	0801e188 	.word	0x0801e188
 8003dbc:	24014500 	.word	0x24014500
 8003dc0:	0801e190 	.word	0x0801e190
 8003dc4:	0801e198 	.word	0x0801e198

08003dc8 <VibeCheckRecordSender_Execute>:


uint32_t VibeCheckRecordSender_Execute(void* obj, VibeCheckShell* shell)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	/* record button */
	if (record_pressed)
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <VibeCheckRecordSender_Execute+0x44>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <VibeCheckRecordSender_Execute+0x38>
	{
		record_pressed = 0;
 8003dda:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <VibeCheckRecordSender_Execute+0x44>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
		VibeCheckShell_PutOutputString(shell, "event");
 8003de0:	490b      	ldr	r1, [pc, #44]	@ (8003e10 <VibeCheckRecordSender_Execute+0x48>)
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f002 fbf8 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8003de8:	6838      	ldr	r0, [r7, #0]
 8003dea:	f002 fc67 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "record");
 8003dee:	4909      	ldr	r1, [pc, #36]	@ (8003e14 <VibeCheckRecordSender_Execute+0x4c>)
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f002 fbf1 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputDelimiter(shell);
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f002 fc6e 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <VibeCheckRecordSender_Execute+0x3a>
	}

	return 0;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	24014508 	.word	0x24014508
 8003e10:	0801e188 	.word	0x0801e188
 8003e14:	0801e1a0 	.word	0x0801e1a0

08003e18 <VibeCheckConnectCMD_Execute>:

#include "vibecheck_connect_handler.h"
#include "vibecheck_rgb_sequences.h"

uint32_t VibeCheckConnectCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
	VibeCheckRGB_SetTopSequence(rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 8003e26:	2312      	movs	r3, #18
 8003e28:	4a09      	ldr	r2, [pc, #36]	@ (8003e50 <VibeCheckConnectCMD_Execute+0x38>)
 8003e2a:	490a      	ldr	r1, [pc, #40]	@ (8003e54 <VibeCheckConnectCMD_Execute+0x3c>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f93f 	bl	80040b0 <VibeCheckRGB_SetTopSequence>
	VibeCheckRGB_StartTopSequence(rgb);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f953 	bl	80040de <VibeCheckRGB_StartTopSequence>
	VibeCheckShell_PutOutputString(shell, "ack");
 8003e38:	4907      	ldr	r1, [pc, #28]	@ (8003e58 <VibeCheckConnectCMD_Execute+0x40>)
 8003e3a:	6838      	ldr	r0, [r7, #0]
 8003e3c:	f002 fbcc 	bl	80065d8 <VibeCheckShell_PutOutputString>
	VibeCheckShell_PutOutputDelimiter(shell);
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f002 fc49 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
	return 1;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	0801e9a0 	.word	0x0801e9a0
 8003e54:	0801e958 	.word	0x0801e958
 8003e58:	0801e1a8 	.word	0x0801e1a8

08003e5c <VibeCheckDisconnectCMD_Execute>:


uint32_t VibeCheckDisconnectCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
	VibeCheckRGB_SetTopSequence(rgb, connect_sequence_times, connect_sequence_colors, connect_sequence_len);
 8003e6a:	2312      	movs	r3, #18
 8003e6c:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <VibeCheckDisconnectCMD_Execute+0x38>)
 8003e6e:	490a      	ldr	r1, [pc, #40]	@ (8003e98 <VibeCheckDisconnectCMD_Execute+0x3c>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f91d 	bl	80040b0 <VibeCheckRGB_SetTopSequence>
	VibeCheckRGB_StartTopSequence(rgb);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f931 	bl	80040de <VibeCheckRGB_StartTopSequence>
	VibeCheckShell_PutOutputString(shell, "ack");
 8003e7c:	4907      	ldr	r1, [pc, #28]	@ (8003e9c <VibeCheckDisconnectCMD_Execute+0x40>)
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f002 fbaa 	bl	80065d8 <VibeCheckShell_PutOutputString>
	VibeCheckShell_PutOutputDelimiter(shell);
 8003e84:	6838      	ldr	r0, [r7, #0]
 8003e86:	f002 fc27 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
	return 1;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	0801e9a0 	.word	0x0801e9a0
 8003e98:	0801e958 	.word	0x0801e958
 8003e9c:	0801e1a8 	.word	0x0801e1a8

08003ea0 <VibeCheckRGB_Init>:

#include "vibecheck_rgb.h"


void VibeCheckRGB_Init(VibeCheckRGB* rgb, TIM_HandleTypeDef* htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
	Sequencer_Init(&rgb->base_sequence);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe f985 	bl	80021c0 <Sequencer_Init>
	Sequencer_Init(&rgb->top_sequence);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe f97f 	bl	80021c0 <Sequencer_Init>

	htim->Instance->PSC = VC_RGB_TIM_PSC - 1;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = VC_RGB_TIM_ARR - 1;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2263      	movs	r2, #99	@ 0x63
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
	rgb->htim = htim;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e008      	b.n	8003ef0 <VibeCheckRGB_Init+0x50>
		rgb->update_with_sequence[i] = 1;  /* LEDs follow the sequence by default */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	3208      	adds	r2, #8
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d9f3      	bls.n	8003ede <VibeCheckRGB_Init+0x3e>

	/* clear the DMA buffer, particularly setting all zeros during the reset time */
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	e009      	b.n	8003f10 <VibeCheckRGB_Init+0x70>
		rgb->bit_stream[i] = 0;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3320      	adds	r3, #32
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	809a      	strh	r2, [r3, #4]
	for (uint32_t i = 0; i < VC_RGB_BUF_LEN; i++)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f5b3 7f26 	cmp.w	r3, #664	@ 0x298
 8003f16:	d3f1      	bcc.n	8003efc <VibeCheckRGB_Init+0x5c>

	/* turn off all LEDs */
	VibeCheckRGB_SetAllOff(rgb);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f958 	bl	80041ce <VibeCheckRGB_SetAllOff>
	VibeCheckRGB_SendColors(rgb);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f986 	bl	8004230 <VibeCheckRGB_SendColors>
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <VibeCheckRGB_Update>:


void VibeCheckRGB_Update(VibeCheckRGB* rgb)  /* call repeatedly in the main loop */
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8003f34:	f003 ff02 	bl	8007d3c <HAL_GetTick>
 8003f38:	6178      	str	r0, [r7, #20]
	uint32_t step;
	if (Sequencer_Update(&rgb->top_sequence, time, &step))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8003f40:	f107 0210 	add.w	r2, r7, #16
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe f96c 	bl	8002224 <Sequencer_Update>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d02f      	beq.n	8003fb2 <VibeCheckRGB_Update+0x86>
	{
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e025      	b.n	8003fa4 <VibeCheckRGB_Update+0x78>
		{
			VibeCheckRGB_Color color = rgb->top_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 15a0 	ldr.w	r1, [r3, #1440]	@ 0x5a0
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	441a      	add	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	441a      	add	r2, r3
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	18ca      	adds	r2, r1, r3
 8003f72:	f107 030c 	add.w	r3, r7, #12
 8003f76:	8811      	ldrh	r1, [r2, #0]
 8003f78:	7892      	ldrb	r2, [r2, #2]
 8003f7a:	8019      	strh	r1, [r3, #0]
 8003f7c:	709a      	strb	r2, [r3, #2]
			if (rgb->update_with_sequence[i])
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	3208      	adds	r2, #8
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <VibeCheckRGB_Update+0x72>
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8003f8c:	7b3a      	ldrb	r2, [r7, #12]
 8003f8e:	7b79      	ldrb	r1, [r7, #13]
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	460b      	mov	r3, r1
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8c0 	bl	800411e <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d9d6      	bls.n	8003f58 <VibeCheckRGB_Update+0x2c>
		}
		VibeCheckRGB_SendColors(rgb);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f940 	bl	8004230 <VibeCheckRGB_SendColors>
			if (rgb->update_with_sequence[i])
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
		}
		VibeCheckRGB_SendColors(rgb);
	}
}
 8003fb0:	e043      	b.n	800403a <VibeCheckRGB_Update+0x10e>
	else if (!Sequencer_IsRunning(&rgb->top_sequence) && Sequencer_Update(&rgb->base_sequence, time, &step))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe f996 	bl	80022ea <Sequencer_IsRunning>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d13a      	bne.n	800403a <VibeCheckRGB_Update+0x10e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 8003fca:	f107 0210 	add.w	r2, r7, #16
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe f927 	bl	8002224 <Sequencer_Update>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d02e      	beq.n	800403a <VibeCheckRGB_Update+0x10e>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	e025      	b.n	800402e <VibeCheckRGB_Update+0x102>
			VibeCheckRGB_Color color = rgb->base_sequence_colors[VC_RGB_NUM_LEDS * step + i];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 1588 	ldr.w	r1, [r3, #1416]	@ 0x588
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	441a      	add	r2, r3
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	18ca      	adds	r2, r1, r3
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	8811      	ldrh	r1, [r2, #0]
 8004002:	7892      	ldrb	r2, [r2, #2]
 8004004:	8019      	strh	r1, [r3, #0]
 8004006:	709a      	strb	r2, [r3, #2]
			if (rgb->update_with_sequence[i])
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	3208      	adds	r2, #8
 800400e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <VibeCheckRGB_Update+0xfc>
				VibeCheckRGB_SetColor(rgb, i, color.r, color.g, color.b);
 8004016:	7a3a      	ldrb	r2, [r7, #8]
 8004018:	7a79      	ldrb	r1, [r7, #9]
 800401a:	7abb      	ldrb	r3, [r7, #10]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	460b      	mov	r3, r1
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f87b 	bl	800411e <VibeCheckRGB_SetColor>
		for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	3301      	adds	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d9d6      	bls.n	8003fe2 <VibeCheckRGB_Update+0xb6>
		VibeCheckRGB_SendColors(rgb);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8fb 	bl	8004230 <VibeCheckRGB_SendColors>
}
 800403a:	bf00      	nop
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <VibeCheckRGB_SetBaseSequence>:


void VibeCheckRGB_SetBaseSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
	rgb->base_sequence_colors = color;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	f8c3 2588 	str.w	r2, [r3, #1416]	@ 0x588
	Sequencer_SetSequence(&rgb->base_sequence, time, len, 1);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f203 5074 	addw	r0, r3, #1396	@ 0x574
 800405e:	2301      	movs	r3, #1
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	f7fe f8c8 	bl	80021f8 <Sequencer_SetSequence>
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <VibeCheckRGB_StartBaseSequence>:

void VibeCheckRGB_StartBaseSequence(VibeCheckRGB* rgb)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->base_sequence, HAL_GetTick());
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f203 5474 	addw	r4, r3, #1396	@ 0x574
 800407e:	f003 fe5d 	bl	8007d3c <HAL_GetTick>
 8004082:	4603      	mov	r3, r0
 8004084:	4619      	mov	r1, r3
 8004086:	4620      	mov	r0, r4
 8004088:	f7fe f90e 	bl	80022a8 <Sequencer_Start>
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <VibeCheckRGB_StopBaseSequence>:

void VibeCheckRGB_StopBaseSequence(VibeCheckRGB* rgb)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->base_sequence);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f203 5374 	addw	r3, r3, #1396	@ 0x574
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe f914 	bl	80022d0 <Sequencer_Stop>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <VibeCheckRGB_SetTopSequence>:

void VibeCheckRGB_SetTopSequence(VibeCheckRGB* rgb, const uint32_t* time, const VibeCheckRGB_Color* color, uint32_t len)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
	rgb->top_sequence_colors = color;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0
	Sequencer_SetSequence(&rgb->top_sequence, time, len, 0);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f203 508c 	addw	r0, r3, #1420	@ 0x58c
 80040cc:	2300      	movs	r3, #0
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	f7fe f891 	bl	80021f8 <Sequencer_SetSequence>
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <VibeCheckRGB_StartTopSequence>:

void VibeCheckRGB_StartTopSequence(VibeCheckRGB* rgb)
{
 80040de:	b590      	push	{r4, r7, lr}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
	Sequencer_Start(&rgb->top_sequence, HAL_GetTick());
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f203 548c 	addw	r4, r3, #1420	@ 0x58c
 80040ec:	f003 fe26 	bl	8007d3c <HAL_GetTick>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4619      	mov	r1, r3
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7fe f8d7 	bl	80022a8 <Sequencer_Start>
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}

08004102 <VibeCheckRGB_StopTopSequence>:

void VibeCheckRGB_StopTopSequence(VibeCheckRGB* rgb)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	Sequencer_Stop(&rgb->top_sequence);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe f8dd 	bl	80022d0 <Sequencer_Stop>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <VibeCheckRGB_SetColor>:


void VibeCheckRGB_SetColor(VibeCheckRGB* rgb, uint32_t index, uint8_t r, uint8_t g, uint8_t b)  /* set the color of an individual LED */
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	4611      	mov	r1, r2
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	4613      	mov	r3, r2
 8004132:	71bb      	strb	r3, [r7, #6]
	if (index > VC_RGB_NUM_LEDS - 1)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b08      	cmp	r3, #8
 8004138:	d901      	bls.n	800413e <VibeCheckRGB_SetColor+0x20>
		index = VC_RGB_NUM_LEDS - 1;
 800413a:	2308      	movs	r3, #8
 800413c:	60bb      	str	r3, [r7, #8]

	rgb->colors[index].r = r;
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	440b      	add	r3, r1
 800414a:	3304      	adds	r3, #4
 800414c:	79fa      	ldrb	r2, [r7, #7]
 800414e:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].g = g;
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	440b      	add	r3, r1
 800415c:	3305      	adds	r3, #5
 800415e:	79ba      	ldrb	r2, [r7, #6]
 8004160:	701a      	strb	r2, [r3, #0]
	rgb->colors[index].b = b;
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	440b      	add	r3, r1
 800416e:	3306      	adds	r3, #6
 8004170:	7e3a      	ldrb	r2, [r7, #24]
 8004172:	701a      	strb	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <VibeCheckRGB_GetColor>:


VibeCheckRGB_Color VibeCheckRGB_GetColor(VibeCheckRGB* rgb, uint32_t index)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	if (index > VC_RGB_NUM_LEDS - 1)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d901      	bls.n	8004194 <VibeCheckRGB_GetColor+0x14>
			index = VC_RGB_NUM_LEDS - 1;
 8004190:	2308      	movs	r3, #8
 8004192:	603b      	str	r3, [r7, #0]

	return rgb->colors[index];
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	18ca      	adds	r2, r1, r3
 80041a0:	f107 030c 	add.w	r3, r7, #12
 80041a4:	3204      	adds	r2, #4
 80041a6:	8811      	ldrh	r1, [r2, #0]
 80041a8:	7892      	ldrb	r2, [r2, #2]
 80041aa:	8019      	strh	r1, [r3, #0]
 80041ac:	709a      	strb	r2, [r3, #2]
 80041ae:	2300      	movs	r3, #0
 80041b0:	7b3a      	ldrb	r2, [r7, #12]
 80041b2:	f362 0307 	bfi	r3, r2, #0, #8
 80041b6:	7b7a      	ldrb	r2, [r7, #13]
 80041b8:	f362 230f 	bfi	r3, r2, #8, #8
 80041bc:	7bba      	ldrb	r2, [r7, #14]
 80041be:	f362 4317 	bfi	r3, r2, #16, #8
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <VibeCheckRGB_SetAllOff>:


void VibeCheckRGB_SetAllOff(VibeCheckRGB* rgb)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af02      	add	r7, sp, #8
 80041d4:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e00a      	b.n	80041f2 <VibeCheckRGB_SetAllOff+0x24>
		VibeCheckRGB_SetColor(rgb, i, 0, 0, 0);
 80041dc:	2300      	movs	r3, #0
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	2200      	movs	r2, #0
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff99 	bl	800411e <VibeCheckRGB_SetColor>
	for (uint32_t i = 0; i < VC_RGB_NUM_LEDS; i++)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d9f1      	bls.n	80041dc <VibeCheckRGB_SetAllOff+0xe>
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <VibeCheckRGB_SetUpdateWithSequence>:


void VibeCheckRGB_SetUpdateWithSequence(VibeCheckRGB* rgb, uint32_t index, uint32_t update)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
	if (index > VC_RGB_NUM_LEDS - 1)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d901      	bls.n	8004218 <VibeCheckRGB_SetUpdateWithSequence+0x16>
			index = VC_RGB_NUM_LEDS - 1;
 8004214:	2308      	movs	r3, #8
 8004216:	60bb      	str	r3, [r7, #8]

	rgb->update_with_sequence[index] = update;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	3208      	adds	r2, #8
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <VibeCheckRGB_SendColors>:


void VibeCheckRGB_SendColors(VibeCheckRGB* rgb)  /* send the colors to the LEDs */
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* compute the bit stream timings */
	uint32_t i = VC_RGB_RESET_PERIODS;  /* put the reset periods first so we are not affected by spurious pin events at startup and such */
 8004238:	23e0      	movs	r3, #224	@ 0xe0
 800423a:	61fb      	str	r3, [r7, #28]
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 800423c:	2300      	movs	r3, #0
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e074      	b.n	800432c <VibeCheckRGB_SendColors+0xfc>
	{
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8004242:	2308      	movs	r3, #8
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e01f      	b.n	8004288 <VibeCheckRGB_SendColors+0x58>
			rgb->bit_stream[i++] = ((rgb->colors[j].g >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	440b      	add	r3, r1
 8004254:	3305      	adds	r3, #5
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3b01      	subs	r3, #1
 800425e:	fa42 f303 	asr.w	r3, r2, r3
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <VibeCheckRGB_SendColors+0x3e>
 800426a:	2130      	movs	r1, #48	@ 0x30
 800426c:	e000      	b.n	8004270 <VibeCheckRGB_SendColors+0x40>
 800426e:	2118      	movs	r1, #24
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	61fa      	str	r2, [r7, #28]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	3320      	adds	r3, #32
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	460a      	mov	r2, r1
 8004280:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* green */
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3b01      	subs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1dc      	bne.n	8004248 <VibeCheckRGB_SendColors+0x18>

		for (uint32_t k = 8; k > 0; k--)  /* red */
 800428e:	2308      	movs	r3, #8
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e01f      	b.n	80042d4 <VibeCheckRGB_SendColors+0xa4>
			rgb->bit_stream[i++] = ((rgb->colors[j].r >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4613      	mov	r3, r2
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4413      	add	r3, r2
 800429e:	440b      	add	r3, r1
 80042a0:	3304      	adds	r3, #4
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	fa42 f303 	asr.w	r3, r2, r3
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <VibeCheckRGB_SendColors+0x8a>
 80042b6:	2130      	movs	r1, #48	@ 0x30
 80042b8:	e000      	b.n	80042bc <VibeCheckRGB_SendColors+0x8c>
 80042ba:	2118      	movs	r1, #24
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	3320      	adds	r3, #32
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	460a      	mov	r2, r1
 80042cc:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* red */
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1dc      	bne.n	8004294 <VibeCheckRGB_SendColors+0x64>

		for (uint32_t k = 8; k > 0; k--)  /* blue */
 80042da:	2308      	movs	r3, #8
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e01f      	b.n	8004320 <VibeCheckRGB_SendColors+0xf0>
			rgb->bit_stream[i++] = ((rgb->colors[j].b >> (k - 1)) & 0x01) ? VC_RGB_TIM_HIGH : VC_RGB_TIM_LOW;
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	3306      	adds	r3, #6
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	fa42 f303 	asr.w	r3, r2, r3
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <VibeCheckRGB_SendColors+0xd6>
 8004302:	2130      	movs	r1, #48	@ 0x30
 8004304:	e000      	b.n	8004308 <VibeCheckRGB_SendColors+0xd8>
 8004306:	2118      	movs	r1, #24
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	61fa      	str	r2, [r7, #28]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	3320      	adds	r3, #32
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	460a      	mov	r2, r1
 8004318:	809a      	strh	r2, [r3, #4]
		for (uint32_t k = 8; k > 0; k--)  /* blue */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3b01      	subs	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1dc      	bne.n	80042e0 <VibeCheckRGB_SendColors+0xb0>
	for (uint32_t j = 0; j < VC_RGB_NUM_LEDS; j++)  /* Bit order for LED is G7, G6, ..., G0, R7, ..., R0, B7, ..., B0 */
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3301      	adds	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d987      	bls.n	8004242 <VibeCheckRGB_SendColors+0x12>
	}

	/* start the DMA transfer */
	(void)HAL_TIM_PWM_Start_DMA(rgb->htim, VC_RGB_TIM_CHANNEL, (uint32_t*)rgb->bit_stream, VC_RGB_BUF_LEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800433c:	f44f 7326 	mov.w	r3, #664	@ 0x298
 8004340:	2100      	movs	r1, #0
 8004342:	f00e f9e1 	bl	8012708 <HAL_TIM_PWM_Start_DMA>
}
 8004346:	bf00      	nop
 8004348:	3720      	adds	r7, #32
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <VibeCheckRGBCMD_Execute>:

*/


uint32_t VibeCheckRGBCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b09c      	sub	sp, #112	@ 0x70
 8004354:	af02      	add	r7, sp, #8
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	VibeCheckRGB* rgb = (VibeCheckRGB*) obj;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	667b      	str	r3, [r7, #100]	@ 0x64

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800435e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	4619      	mov	r1, r3
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	f002 f816 	bl	8006398 <VibeCheckShell_GetNextString>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80c2 	beq.w	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
	{
		if (!strcmp(str, "set"))
 8004374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004378:	4962      	ldr	r1, [pc, #392]	@ (8004504 <VibeCheckRGBCMD_Execute+0x1b4>)
 800437a:	4618      	mov	r0, r3
 800437c:	f7fb ffc8 	bl	8000310 <strcmp>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d141      	bne.n	800440a <VibeCheckRGBCMD_Execute+0xba>
		{
			int32_t index, r, g, b;
			if (VibeCheckShell_GetNextInt(shell, &index)
 8004386:	f107 0320 	add.w	r3, r7, #32
 800438a:	4619      	mov	r1, r3
 800438c:	6838      	ldr	r0, [r7, #0]
 800438e:	f002 f87b 	bl	8006488 <VibeCheckShell_GetNextInt>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80af 	beq.w	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &r)
 800439a:	f107 031c 	add.w	r3, r7, #28
 800439e:	4619      	mov	r1, r3
 80043a0:	6838      	ldr	r0, [r7, #0]
 80043a2:	f002 f871 	bl	8006488 <VibeCheckShell_GetNextInt>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80a5 	beq.w	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &g)
 80043ae:	f107 0318 	add.w	r3, r7, #24
 80043b2:	4619      	mov	r1, r3
 80043b4:	6838      	ldr	r0, [r7, #0]
 80043b6:	f002 f867 	bl	8006488 <VibeCheckShell_GetNextInt>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 809b 	beq.w	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
					&& VibeCheckShell_GetNextInt(shell, &b))
 80043c2:	f107 0314 	add.w	r3, r7, #20
 80043c6:	4619      	mov	r1, r3
 80043c8:	6838      	ldr	r0, [r7, #0]
 80043ca:	f002 f85d 	bl	8006488 <VibeCheckShell_GetNextInt>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8091 	beq.w	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_SetColor(rgb, index, r, g, b);
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	4618      	mov	r0, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	b2d9      	uxtb	r1, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	460b      	mov	r3, r1
 80043ea:	4601      	mov	r1, r0
 80043ec:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80043ee:	f7ff fe96 	bl	800411e <VibeCheckRGB_SetColor>
				VibeCheckRGB_SendColors(rgb);
 80043f2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80043f4:	f7ff ff1c 	bl	8004230 <VibeCheckRGB_SendColors>
				VibeCheckShell_PutOutputString(shell, "ack");
 80043f8:	4943      	ldr	r1, [pc, #268]	@ (8004508 <VibeCheckRGBCMD_Execute+0x1b8>)
 80043fa:	6838      	ldr	r0, [r7, #0]
 80043fc:	f002 f8ec 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004400:	6838      	ldr	r0, [r7, #0]
 8004402:	f002 f969 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004406:	2301      	movs	r3, #1
 8004408:	e077      	b.n	80044fa <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "get"))
 800440a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800440e:	493f      	ldr	r1, [pc, #252]	@ (800450c <VibeCheckRGBCMD_Execute+0x1bc>)
 8004410:	4618      	mov	r0, r3
 8004412:	f7fb ff7d 	bl	8000310 <strcmp>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d137      	bne.n	800448c <VibeCheckRGBCMD_Execute+0x13c>
		{
			int32_t index;
			if (VibeCheckShell_GetNextInt(shell, &index))
 800441c:	f107 0310 	add.w	r3, r7, #16
 8004420:	4619      	mov	r1, r3
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f002 f830 	bl	8006488 <VibeCheckShell_GetNextInt>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d064      	beq.n	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
			{
				VibeCheckRGB_Color color = VibeCheckRGB_GetColor(rgb, index);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4619      	mov	r1, r3
 8004432:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004434:	f7ff fea4 	bl	8004180 <VibeCheckRGB_GetColor>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	733a      	strb	r2, [r7, #12]
 800443e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004442:	737a      	strb	r2, [r7, #13]
 8004444:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004448:	73bb      	strb	r3, [r7, #14]

				VibeCheckShell_PutOutputString(shell, "ack");
 800444a:	492f      	ldr	r1, [pc, #188]	@ (8004508 <VibeCheckRGBCMD_Execute+0x1b8>)
 800444c:	6838      	ldr	r0, [r7, #0]
 800444e:	f002 f8c3 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputSeparator(shell);
 8004452:	6838      	ldr	r0, [r7, #0]
 8004454:	f002 f932 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.r);
 8004458:	7b3b      	ldrb	r3, [r7, #12]
 800445a:	4619      	mov	r1, r3
 800445c:	6838      	ldr	r0, [r7, #0]
 800445e:	f002 f8f7 	bl	8006650 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8004462:	6838      	ldr	r0, [r7, #0]
 8004464:	f002 f92a 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.g);
 8004468:	7b7b      	ldrb	r3, [r7, #13]
 800446a:	4619      	mov	r1, r3
 800446c:	6838      	ldr	r0, [r7, #0]
 800446e:	f002 f8ef 	bl	8006650 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputSeparator(shell);
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	f002 f922 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
				VibeCheckShell_PutOutputInt(shell, color.b);
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	4619      	mov	r1, r3
 800447c:	6838      	ldr	r0, [r7, #0]
 800447e:	f002 f8e7 	bl	8006650 <VibeCheckShell_PutOutputInt>
				VibeCheckShell_PutOutputDelimiter(shell);
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f002 f928 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8004488:	2301      	movs	r3, #1
 800448a:	e036      	b.n	80044fa <VibeCheckRGBCMD_Execute+0x1aa>
			}
		}
		else if (!strcmp(str, "start"))
 800448c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004490:	491f      	ldr	r1, [pc, #124]	@ (8004510 <VibeCheckRGBCMD_Execute+0x1c0>)
 8004492:	4618      	mov	r0, r3
 8004494:	f7fb ff3c 	bl	8000310 <strcmp>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10e      	bne.n	80044bc <VibeCheckRGBCMD_Execute+0x16c>
		{
			VibeCheckRGB_StartBaseSequence(rgb);
 800449e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044a0:	f7ff fde6 	bl	8004070 <VibeCheckRGB_StartBaseSequence>
			VibeCheckRGB_StartTopSequence(rgb);
 80044a4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044a6:	f7ff fe1a 	bl	80040de <VibeCheckRGB_StartTopSequence>
			VibeCheckShell_PutOutputString(shell, "ack");
 80044aa:	4917      	ldr	r1, [pc, #92]	@ (8004508 <VibeCheckRGBCMD_Execute+0x1b8>)
 80044ac:	6838      	ldr	r0, [r7, #0]
 80044ae:	f002 f893 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f002 f910 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e01e      	b.n	80044fa <VibeCheckRGBCMD_Execute+0x1aa>
		}
		else if (!strcmp(str, "stop"))
 80044bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c0:	4914      	ldr	r1, [pc, #80]	@ (8004514 <VibeCheckRGBCMD_Execute+0x1c4>)
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fb ff24 	bl	8000310 <strcmp>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d114      	bne.n	80044f8 <VibeCheckRGBCMD_Execute+0x1a8>
		{
			VibeCheckRGB_StopBaseSequence(rgb);
 80044ce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044d0:	f7ff fde0 	bl	8004094 <VibeCheckRGB_StopBaseSequence>
			VibeCheckRGB_StopTopSequence(rgb);
 80044d4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044d6:	f7ff fe14 	bl	8004102 <VibeCheckRGB_StopTopSequence>
			VibeCheckRGB_SetAllOff(rgb);
 80044da:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044dc:	f7ff fe77 	bl	80041ce <VibeCheckRGB_SetAllOff>
			VibeCheckRGB_SendColors(rgb);
 80044e0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80044e2:	f7ff fea5 	bl	8004230 <VibeCheckRGB_SendColors>
			VibeCheckShell_PutOutputString(shell, "ack");
 80044e6:	4908      	ldr	r1, [pc, #32]	@ (8004508 <VibeCheckRGBCMD_Execute+0x1b8>)
 80044e8:	6838      	ldr	r0, [r7, #0]
 80044ea:	f002 f875 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f002 f8f2 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <VibeCheckRGBCMD_Execute+0x1aa>
		}
	}

	return 0;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3768      	adds	r7, #104	@ 0x68
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	0801e1ac 	.word	0x0801e1ac
 8004508:	0801e1b0 	.word	0x0801e1b0
 800450c:	0801e1b4 	.word	0x0801e1b4
 8004510:	0801e1b8 	.word	0x0801e1b8
 8004514:	0801e1c0 	.word	0x0801e1c0

08004518 <VibeCheckSensor_Init>:

#include "vibecheck_sensor.h"


void VibeCheckSensor_Init(VibeCheckSensor* sensor, volatile uint32_t* time_micros, SPI_HandleTypeDef* hspi0, SPI_HandleTypeDef* hspi1, SPI_HandleTypeDef* hspi2)
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b0a1      	sub	sp, #132	@ 0x84
 800451c:	af06      	add	r7, sp, #24
 800451e:	6178      	str	r0, [r7, #20]
 8004520:	6139      	str	r1, [r7, #16]
 8004522:	60fa      	str	r2, [r7, #12]
 8004524:	60bb      	str	r3, [r7, #8]
	sensor->data_ind = 0;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	sensor->data_ready = 0;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800453a:	461a      	mov	r2, r3
 800453c:	2300      	movs	r3, #0
 800453e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	sensor->data_packet_size = VC_SENSOR_DEFAULT_PACKET_SIZE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004548:	461a      	mov	r2, r3
 800454a:	230a      	movs	r3, #10
 800454c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
	sensor->time_prev_update = 0;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004556:	461a      	mov	r2, r3
 8004558:	2300      	movs	r3, #0
 800455a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	sensor->generate_fake_data = 0;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

	sensor->time_micros = time_micros;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004572:	461a      	mov	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

	/* set all the configurations to defaults */
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	667b      	str	r3, [r7, #100]	@ 0x64
 800457e:	e04a      	b.n	8004616 <VibeCheckSensor_Init+0xfe>
	{
		sensor->sensor_config[i].usr_offset_x = 0.0f;
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_y = 0.0f;
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3304      	adds	r3, #4
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].usr_offset_z = 0.0f;
 80045aa:	6979      	ldr	r1, [r7, #20]
 80045ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3308      	adds	r3, #8
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].accel_odr_hz = VC_SENSOR_DEFAULT_ODR;
 80045c0:	6979      	ldr	r1, [r7, #20]
 80045c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	330c      	adds	r3, #12
 80045d0:	2234      	movs	r2, #52	@ 0x34
 80045d2:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].g_range = VC_SENSOR_DEFAULT_G_RANGE;
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3310      	adds	r3, #16
 80045e4:	2204      	movs	r2, #4
 80045e6:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].gyro_odr_hz = VC_SENSOR_DEFAULT_ODR;
 80045e8:	6979      	ldr	r1, [r7, #20]
 80045ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3314      	adds	r3, #20
 80045f8:	2234      	movs	r2, #52	@ 0x34
 80045fa:	601a      	str	r2, [r3, #0]
		sensor->sensor_config[i].dps_range = VC_SENSOR_DEFAULT_DPS_RANGE;
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3318      	adds	r3, #24
 800460c:	227d      	movs	r2, #125	@ 0x7d
 800460e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004610:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004612:	3301      	adds	r3, #1
 8004614:	667b      	str	r3, [r7, #100]	@ 0x64
 8004616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004618:	2b02      	cmp	r3, #2
 800461a:	d9b1      	bls.n	8004580 <VibeCheckSensor_Init+0x68>
	}


	/* initialize the sensor chips */
	SPI_HandleTypeDef* hspi[VC_SENSOR_NUM_SENSORS] = {hspi0, hspi1, hspi2};
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004624:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004628:	65fb      	str	r3, [r7, #92]	@ 0x5c

	GPIO_TypeDef* cs_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_GPIO_Port, ACCEL_NCS2_GPIO_Port, ACCEL_NCS3_GPIO_Port};
 800462a:	4a49      	ldr	r2, [pc, #292]	@ (8004750 <VibeCheckSensor_Init+0x238>)
 800462c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004630:	ca07      	ldmia	r2, {r0, r1, r2}
 8004632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t cs_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_NCS1_Pin, ACCEL_NCS2_Pin, ACCEL_NCS3_Pin};
 8004636:	4a47      	ldr	r2, [pc, #284]	@ (8004754 <VibeCheckSensor_Init+0x23c>)
 8004638:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800463c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004640:	6018      	str	r0, [r3, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int1_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_GPIO_Port, ACCEL_INTA2_GPIO_Port, ACCEL_INTA3_GPIO_Port};
 8004646:	4a44      	ldr	r2, [pc, #272]	@ (8004758 <VibeCheckSensor_Init+0x240>)
 8004648:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800464c:	ca07      	ldmia	r2, {r0, r1, r2}
 800464e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int1_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTA1_Pin, ACCEL_INTA2_Pin, ACCEL_INTA3_Pin};
 8004652:	4a42      	ldr	r2, [pc, #264]	@ (800475c <VibeCheckSensor_Init+0x244>)
 8004654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	3304      	adds	r3, #4
 8004660:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* int2_ports[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_GPIO_Port, ACCEL_INTB2_GPIO_Port, ACCEL_INTB3_GPIO_Port};
 8004662:	4a3f      	ldr	r2, [pc, #252]	@ (8004760 <VibeCheckSensor_Init+0x248>)
 8004664:	f107 0320 	add.w	r3, r7, #32
 8004668:	ca07      	ldmia	r2, {r0, r1, r2}
 800466a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t int2_pins[VC_SENSOR_NUM_SENSORS] = {ACCEL_INTB1_Pin, ACCEL_INTB2_Pin, ACCEL_INTB3_Pin};
 800466e:	4a3d      	ldr	r2, [pc, #244]	@ (8004764 <VibeCheckSensor_Init+0x24c>)
 8004670:	f107 0318 	add.w	r3, r7, #24
 8004674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004678:	6018      	str	r0, [r3, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	8019      	strh	r1, [r3, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	663b      	str	r3, [r7, #96]	@ 0x60
 8004682:	e05c      	b.n	800473e <VibeCheckSensor_Init+0x226>
	{
		LSM6DS3_Init(&sensor->sensor_array[i], &sensor->sensor_config[i],
 8004684:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	3350      	adds	r3, #80	@ 0x50
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	1d1d      	adds	r5, r3, #4
 8004696:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	18d6      	adds	r6, r2, r3
 80046a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	3360      	adds	r3, #96	@ 0x60
 80046aa:	f107 0208 	add.w	r2, r7, #8
 80046ae:	4413      	add	r3, r2
 80046b0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	18cb      	adds	r3, r1, r3
 80046c4:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	18c3      	adds	r3, r0, r3
 80046d8:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80046dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	18c3      	adds	r3, r0, r3
 80046ea:	f853 1c34 	ldr.w	r1, [r3, #-52]
 80046ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	18c3      	adds	r3, r0, r3
 80046fc:	f833 0c3c 	ldrh.w	r0, [r3, #-60]
 8004700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	f103 0460 	add.w	r4, r3, #96	@ 0x60
 8004708:	f107 0308 	add.w	r3, r7, #8
 800470c:	18e3      	adds	r3, r4, r3
 800470e:	f853 4c48 	ldr.w	r4, [r3, #-72]
 8004712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	3360      	adds	r3, #96	@ 0x60
 8004718:	f107 0c08 	add.w	ip, r7, #8
 800471c:	4463      	add	r3, ip
 800471e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8004722:	9304      	str	r3, [sp, #16]
 8004724:	9403      	str	r4, [sp, #12]
 8004726:	9002      	str	r0, [sp, #8]
 8004728:	9101      	str	r1, [sp, #4]
 800472a:	9200      	str	r2, [sp, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4631      	mov	r1, r6
 8004732:	4628      	mov	r0, r5
 8004734:	f7fc f9c0 	bl	8000ab8 <LSM6DS3_Init>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8004738:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800473a:	3301      	adds	r3, #1
 800473c:	663b      	str	r3, [r7, #96]	@ 0x60
 800473e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004740:	2b02      	cmp	r3, #2
 8004742:	d99f      	bls.n	8004684 <VibeCheckSensor_Init+0x16c>
				hspi[i], cs_ports[i], cs_pins[i], int1_ports[i], int1_pins[i], int2_ports[i], int2_pins[i]);
	}

}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	376c      	adds	r7, #108	@ 0x6c
 800474a:	46bd      	mov	sp, r7
 800474c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800474e:	bf00      	nop
 8004750:	0801e1c8 	.word	0x0801e1c8
 8004754:	0801e1d4 	.word	0x0801e1d4
 8004758:	0801e1dc 	.word	0x0801e1dc
 800475c:	0801e1e8 	.word	0x0801e1e8
 8004760:	0801e1f0 	.word	0x0801e1f0
 8004764:	0801e1fc 	.word	0x0801e1fc

08004768 <VibeCheckSensor_Update>:


void VibeCheckSensor_Update(VibeCheckSensor* sensor)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8004770:	f003 fae4 	bl	8007d3c <HAL_GetTick>
 8004774:	61b8      	str	r0, [r7, #24]
	if (time - sensor->time_prev_update > VC_SENSOR_UPDATE_INTERVAL_MS)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004788:	f240 8118 	bls.w	80049bc <VibeCheckSensor_Update+0x254>

		/* if not connected -> test for connection -> if success, set connected flag, configure the sensor, and send message to host */
		/* if connected but not running -> test for connection -> if failure, reset connected flag, send message to host */
		/* if running either accelerometer or gyro -> check data received status flag and reset it -> if no data received, reset connected flag, send message to host */

		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e0ac      	b.n	80048ec <VibeCheckSensor_Update+0x184>
		{
			if (!sensor->status[i].is_connected)
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	4613      	mov	r3, r2
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	440b      	add	r3, r1
 80047a0:	33fc      	adds	r3, #252	@ 0xfc
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d134      	bne.n	8004812 <VibeCheckSensor_Update+0xaa>
			{
				if (LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	3350      	adds	r3, #80	@ 0x50
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc f9a6 	bl	8000b0c <LSM6DS3_TestCommunication>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808f 	beq.w	80048e6 <VibeCheckSensor_Update+0x17e>
				{
					sensor->status[i].is_connected = 1;
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	440b      	add	r3, r1
 80047d6:	33fc      	adds	r3, #252	@ 0xfc
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
					sensor->status[i].connection_change_flag = 1;
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	4613      	mov	r3, r2
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
					sensor->status[i].received_data_flag = 1;  /* give ourselves a grace period to receive data by artificially setting the flag */
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	440b      	add	r3, r1
 8004800:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]
					VibeCheckSensor_UpdateSensor(sensor, i);
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fcae 	bl	800516c <VibeCheckSensor_UpdateSensor>
 8004810:	e069      	b.n	80048e6 <VibeCheckSensor_Update+0x17e>
				}
			}
			else
			{
				if (!sensor->status[i].accel_measuring && !sensor->status[i].gyro_measuring)
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	440b      	add	r3, r1
 8004820:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d130      	bne.n	800488c <VibeCheckSensor_Update+0x124>
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d124      	bne.n	800488c <VibeCheckSensor_Update+0x124>
				{
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3350      	adds	r3, #80	@ 0x50
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc f959 	bl	8000b0c <LSM6DS3_TestCommunication>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d142      	bne.n	80048e6 <VibeCheckSensor_Update+0x17e>
					{
						sensor->status[i].is_connected = 0;
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	440b      	add	r3, r1
 800486e:	33fc      	adds	r3, #252	@ 0xfc
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
					if (!LSM6DS3_TestCommunication(&sensor->sensor_array[i]))
 800488a:	e02c      	b.n	80048e6 <VibeCheckSensor_Update+0x17e>
					}
				}
				else
				{
					if (sensor->status[i].received_data_flag)
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	440b      	add	r3, r1
 800489a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00b      	beq.n	80048bc <VibeCheckSensor_Update+0x154>
					{
						sensor->status[i].received_data_flag = 0;
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e014      	b.n	80048e6 <VibeCheckSensor_Update+0x17e>
					}
					else
					{
						sensor->status[i].is_connected = 0;
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	440b      	add	r3, r1
 80048ca:	33fc      	adds	r3, #252	@ 0xfc
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
						sensor->status[i].connection_change_flag = 1;
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	440b      	add	r3, r1
 80048de:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f67f af4f 	bls.w	8004792 <VibeCheckSensor_Update+0x2a>
				}
			}
		}

		/* make some random data (3 sine wave phases) for testing the host plotting/data logging */
		if (sensor->generate_fake_data)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d055      	beq.n	80049ae <VibeCheckSensor_Update+0x246>
		{
			float val1 = sinf(2.0f * 3.14159f * time);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80049c4 <VibeCheckSensor_Update+0x25c>
 8004910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004914:	eeb0 0a67 	vmov.f32	s0, s15
 8004918:	f018 fda6 	bl	801d468 <sinf>
 800491c:	ed87 0a05 	vstr	s0, [r7, #20]
			float val2 = sinf(2.0f * 3.14159f * time + 3.14159f / 3.0f);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80049c4 <VibeCheckSensor_Update+0x25c>
 800492e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004932:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80049c8 <VibeCheckSensor_Update+0x260>
 8004936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800493a:	eeb0 0a67 	vmov.f32	s0, s15
 800493e:	f018 fd93 	bl	801d468 <sinf>
 8004942:	ed87 0a04 	vstr	s0, [r7, #16]
			float val3 = sinf(2.0f * 3.14159f * time + 2.0f * 3.14159f / 3.0f);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80049c4 <VibeCheckSensor_Update+0x25c>
 8004954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004958:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80049cc <VibeCheckSensor_Update+0x264>
 800495c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004960:	eeb0 0a67 	vmov.f32	s0, s15
 8004964:	f018 fd80 	bl	801d468 <sinf>
 8004968:	ed87 0a03 	vstr	s0, [r7, #12]

			VibeCheckSensor_AddData(sensor, 1, time, val1, val2, val3);
 800496c:	ed97 1a03 	vldr	s2, [r7, #12]
 8004970:	edd7 0a04 	vldr	s1, [r7, #16]
 8004974:	ed97 0a05 	vldr	s0, [r7, #20]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	2101      	movs	r1, #1
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fc4a 	bl	8005216 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 2, time, val3, val1, val2);
 8004982:	ed97 1a04 	vldr	s2, [r7, #16]
 8004986:	edd7 0a05 	vldr	s1, [r7, #20]
 800498a:	ed97 0a03 	vldr	s0, [r7, #12]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	2102      	movs	r1, #2
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fc3f 	bl	8005216 <VibeCheckSensor_AddData>
			VibeCheckSensor_AddData(sensor, 3, time, val2, val3, val1);
 8004998:	ed97 1a05 	vldr	s2, [r7, #20]
 800499c:	edd7 0a03 	vldr	s1, [r7, #12]
 80049a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	2103      	movs	r1, #3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fc34 	bl	8005216 <VibeCheckSensor_AddData>
		}

		sensor->time_prev_update = time;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049b4:	461a      	mov	r2, r3
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	}
}
 80049bc:	bf00      	nop
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40c90fd0 	.word	0x40c90fd0
 80049c8:	3f860a8b 	.word	0x3f860a8b
 80049cc:	40060a8b 	.word	0x40060a8b

080049d0 <VibeCheckSensor_StartAccel>:

void VibeCheckSensor_StartAccel(VibeCheckSensor* sensor, uint32_t channel)  /* start acceleration measurement of specified channel */
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <VibeCheckSensor_StartAccel+0x14>
 80049e0:	2302      	movs	r3, #2
 80049e2:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].accel_measuring)
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	440b      	add	r3, r1
 80049f2:	33fc      	adds	r3, #252	@ 0xfc
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d017      	beq.n	8004a2a <VibeCheckSensor_StartAccel+0x5a>
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	440b      	add	r3, r1
 8004a08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10b      	bne.n	8004a2a <VibeCheckSensor_StartAccel+0x5a>
		LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	3350      	adds	r3, #80	@ 0x50
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fc f92f 	bl	8000c88 <LSM6DS3_StartAccel>
	/*
	 * I choose to set the flag here immediately, even if the accelerometer is not currently connected. This way, it can be set
	 * to start sampling immediately once the accelerometer is plugged in.
	 */

	sensor->status[channel].accel_measuring = 1;
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	4413      	add	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <VibeCheckSensor_StopAccel>:

void VibeCheckSensor_StopAccel(VibeCheckSensor* sensor, uint32_t channel)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <VibeCheckSensor_StopAccel+0x14>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].accel_measuring)
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	33fc      	adds	r3, #252	@ 0xfc
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d017      	beq.n	8004ab8 <VibeCheckSensor_StopAccel+0x5a>
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <VibeCheckSensor_StopAccel+0x5a>
		LSM6DS3_StopAccel(&sensor->sensor_array[channel]);
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	3350      	adds	r3, #80	@ 0x50
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4413      	add	r3, r2
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fa22 	bl	8000efc <LSM6DS3_StopAccel>

	sensor->status[channel].accel_measuring = 0;
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <VibeCheckSensor_StartGyro>:

void VibeCheckSensor_StartGyro(VibeCheckSensor* sensor, uint32_t channel)  /* start gyroscope measurement of specified channel */
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <VibeCheckSensor_StartGyro+0x14>
 8004afc:	2302      	movs	r3, #2
 8004afe:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && !sensor->status[channel].gyro_measuring)
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	33fc      	adds	r3, #252	@ 0xfc
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <VibeCheckSensor_StartGyro+0x5a>
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <VibeCheckSensor_StartGyro+0x5a>
		LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3350      	adds	r3, #80	@ 0x50
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc f943 	bl	8000dcc <LSM6DS3_StartGyro>

	sensor->status[channel].gyro_measuring = 1;
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	440b      	add	r3, r1
 8004b54:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <VibeCheckSensor_StopGyro>:

void VibeCheckSensor_StopGyro(VibeCheckSensor* sensor, uint32_t channel)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <VibeCheckSensor_StopGyro+0x14>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected && sensor->status[channel].gyro_measuring)
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	33fc      	adds	r3, #252	@ 0xfc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <VibeCheckSensor_StopGyro+0x5a>
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <VibeCheckSensor_StopGyro+0x5a>
		LSM6DS3_StopGyro(&sensor->sensor_array[channel]);
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	3350      	adds	r3, #80	@ 0x50
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc f9a2 	bl	8000f18 <LSM6DS3_StopGyro>

	sensor->status[channel].gyro_measuring = 0;
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
	sensor->status[channel].measuring_change_flag = 1;
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <VibeCheckSensor_SetAccelODR>:

void VibeCheckSensor_SetAccelODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <VibeCheckSensor_SetAccelODR+0x16>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].accel_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	210a      	movs	r1, #10
 8004c22:	480a      	ldr	r0, [pc, #40]	@ (8004c4c <VibeCheckSensor_SetAccelODR+0x44>)
 8004c24:	f7fe f9be 	bl	8002fa4 <FindClosest>
 8004c28:	68f9      	ldr	r1, [r7, #12]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	330c      	adds	r3, #12
 8004c38:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fa95 	bl	800516c <VibeCheckSensor_UpdateSensor>
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	0801eb88 	.word	0x0801eb88

08004c50 <VibeCheckSensor_SetGyroODR>:

void VibeCheckSensor_SetGyroODR(VibeCheckSensor* sensor, uint32_t channel, uint32_t odr)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <VibeCheckSensor_SetGyroODR+0x16>
 8004c62:	2302      	movs	r3, #2
 8004c64:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].gyro_odr_hz = FindClosest(VC_SENSOR_ALLOWED_ODR, sizeof(VC_SENSOR_ALLOWED_ODR) / sizeof(VC_SENSOR_ALLOWED_ODR[0]), odr);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	210a      	movs	r1, #10
 8004c6a:	480a      	ldr	r0, [pc, #40]	@ (8004c94 <VibeCheckSensor_SetGyroODR+0x44>)
 8004c6c:	f7fe f99a 	bl	8002fa4 <FindClosest>
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3314      	adds	r3, #20
 8004c80:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fa71 	bl	800516c <VibeCheckSensor_UpdateSensor>
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	0801eb88 	.word	0x0801eb88

08004c98 <VibeCheckSensor_SetAccelRange>:

void VibeCheckSensor_SetAccelRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <VibeCheckSensor_SetAccelRange+0x16>
 8004caa:	2302      	movs	r3, #2
 8004cac:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].g_range = FindClosest(VC_SENSOR_ALLOWED_G_RANGE, sizeof(VC_SENSOR_ALLOWED_G_RANGE) / sizeof(VC_SENSOR_ALLOWED_G_RANGE[0]), range);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	2104      	movs	r1, #4
 8004cb2:	480a      	ldr	r0, [pc, #40]	@ (8004cdc <VibeCheckSensor_SetAccelRange+0x44>)
 8004cb4:	f7fe f976 	bl	8002fa4 <FindClosest>
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fa4d 	bl	800516c <VibeCheckSensor_UpdateSensor>
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	0801ebb0 	.word	0x0801ebb0

08004ce0 <VibeCheckSensor_SetGyroRange>:

void VibeCheckSensor_SetGyroRange(VibeCheckSensor* sensor, uint32_t channel, uint32_t range)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <VibeCheckSensor_SetGyroRange+0x16>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	60bb      	str	r3, [r7, #8]

	sensor->sensor_config[channel].dps_range = FindClosest(VC_SENSOR_ALLOWED_DPS_RANGE, sizeof(VC_SENSOR_ALLOWED_DPS_RANGE) / sizeof(VC_SENSOR_ALLOWED_DPS_RANGE[0]), range);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	2105      	movs	r1, #5
 8004cfa:	480a      	ldr	r0, [pc, #40]	@ (8004d24 <VibeCheckSensor_SetGyroRange+0x44>)
 8004cfc:	f7fe f952 	bl	8002fa4 <FindClosest>
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3318      	adds	r3, #24
 8004d10:	6018      	str	r0, [r3, #0]
	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fa29 	bl	800516c <VibeCheckSensor_UpdateSensor>
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	0801ebc0 	.word	0x0801ebc0

08004d28 <VibeCheckSensor_SetOffsets>:

void VibeCheckSensor_SetOffsets(VibeCheckSensor* sensor, uint32_t channel, float x, float y, float z)  /* accelerometer DC offsets in g */
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6178      	str	r0, [r7, #20]
 8004d30:	6139      	str	r1, [r7, #16]
 8004d32:	ed87 0a03 	vstr	s0, [r7, #12]
 8004d36:	edc7 0a02 	vstr	s1, [r7, #8]
 8004d3a:	ed87 1a01 	vstr	s2, [r7, #4]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <VibeCheckSensor_SetOffsets+0x20>
 8004d44:	2302      	movs	r3, #2
 8004d46:	613b      	str	r3, [r7, #16]

	/* TODO: test that setting the sensor user offset registers works */

	if (x > VC_SENSOR_MAX_OFFSET) x = VC_SENSOR_MAX_OFFSET;  /* clamp the offsets to the max value that can fit in the register */
 8004d48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d4c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004e18 <VibeCheckSensor_SetOffsets+0xf0>
 8004d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d58:	dd01      	ble.n	8004d5e <VibeCheckSensor_SetOffsets+0x36>
 8004d5a:	4b30      	ldr	r3, [pc, #192]	@ (8004e1c <VibeCheckSensor_SetOffsets+0xf4>)
 8004d5c:	60fb      	str	r3, [r7, #12]
	if (x < -VC_SENSOR_MAX_OFFSET) x = -VC_SENSOR_MAX_OFFSET;
 8004d5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d62:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8004e20 <VibeCheckSensor_SetOffsets+0xf8>
 8004d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	d501      	bpl.n	8004d74 <VibeCheckSensor_SetOffsets+0x4c>
 8004d70:	4b2c      	ldr	r3, [pc, #176]	@ (8004e24 <VibeCheckSensor_SetOffsets+0xfc>)
 8004d72:	60fb      	str	r3, [r7, #12]
	if (y > VC_SENSOR_MAX_OFFSET) y = VC_SENSOR_MAX_OFFSET;
 8004d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d78:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8004e18 <VibeCheckSensor_SetOffsets+0xf0>
 8004d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	dd01      	ble.n	8004d8a <VibeCheckSensor_SetOffsets+0x62>
 8004d86:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <VibeCheckSensor_SetOffsets+0xf4>)
 8004d88:	60bb      	str	r3, [r7, #8]
	if (y < -VC_SENSOR_MAX_OFFSET) y = -VC_SENSOR_MAX_OFFSET;
 8004d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d8e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004e20 <VibeCheckSensor_SetOffsets+0xf8>
 8004d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d501      	bpl.n	8004da0 <VibeCheckSensor_SetOffsets+0x78>
 8004d9c:	4b21      	ldr	r3, [pc, #132]	@ (8004e24 <VibeCheckSensor_SetOffsets+0xfc>)
 8004d9e:	60bb      	str	r3, [r7, #8]
	if (z > VC_SENSOR_MAX_OFFSET) z = VC_SENSOR_MAX_OFFSET;
 8004da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004da4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004e18 <VibeCheckSensor_SetOffsets+0xf0>
 8004da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db0:	dd01      	ble.n	8004db6 <VibeCheckSensor_SetOffsets+0x8e>
 8004db2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e1c <VibeCheckSensor_SetOffsets+0xf4>)
 8004db4:	607b      	str	r3, [r7, #4]
	if (z < -VC_SENSOR_MAX_OFFSET) z = -VC_SENSOR_MAX_OFFSET;
 8004db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004e20 <VibeCheckSensor_SetOffsets+0xf8>
 8004dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc6:	d501      	bpl.n	8004dcc <VibeCheckSensor_SetOffsets+0xa4>
 8004dc8:	4b16      	ldr	r3, [pc, #88]	@ (8004e24 <VibeCheckSensor_SetOffsets+0xfc>)
 8004dca:	607b      	str	r3, [r7, #4]

	sensor->sensor_config[channel].usr_offset_x = x;
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_y = y;
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	3304      	adds	r3, #4
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	601a      	str	r2, [r3, #0]
	sensor->sensor_config[channel].usr_offset_z = z;
 8004df2:	6979      	ldr	r1, [r7, #20]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	3308      	adds	r3, #8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]

	VibeCheckSensor_UpdateSensor(sensor, channel);
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f000 f9af 	bl	800516c <VibeCheckSensor_UpdateSensor>
}
 8004e0e:	bf00      	nop
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	3dfe0000 	.word	0x3dfe0000
 8004e1c:	3dfe0000 	.word	0x3dfe0000
 8004e20:	bdfe0000 	.word	0xbdfe0000
 8004e24:	bdfe0000 	.word	0xbdfe0000

08004e28 <VibeCheckSensor_GetAccelODR>:

uint32_t VibeCheckSensor_GetAccelODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <VibeCheckSensor_GetAccelODR+0x14>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].accel_odr_hz;
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	681b      	ldr	r3, [r3, #0]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <VibeCheckSensor_GetGyroODR>:

uint32_t VibeCheckSensor_GetGyroODR(VibeCheckSensor* sensor, uint32_t channel)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <VibeCheckSensor_GetGyroODR+0x14>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].gyro_odr_hz;
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <VibeCheckSensor_GetAccelRange>:

uint32_t VibeCheckSensor_GetAccelRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <VibeCheckSensor_GetAccelRange+0x14>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].g_range;
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	3310      	adds	r3, #16
 8004eb0:	681b      	ldr	r3, [r3, #0]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <VibeCheckSensor_GetGyroRange>:

uint32_t VibeCheckSensor_GetGyroRange(VibeCheckSensor* sensor, uint32_t channel)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <VibeCheckSensor_GetGyroRange+0x14>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	603b      	str	r3, [r7, #0]
	return sensor->sensor_config[channel].dps_range;
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <VibeCheckSensor_GetOffsets>:

void VibeCheckSensor_GetOffsets(VibeCheckSensor* sensor, uint32_t channel, float* x, float* y, float* z)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <VibeCheckSensor_GetOffsets+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	60bb      	str	r3, [r7, #8]
	*x = sensor->sensor_config[channel].usr_offset_x;
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
	*y = sensor->sensor_config[channel].usr_offset_y;
 8004f1c:	68f9      	ldr	r1, [r7, #12]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]
	*z = sensor->sensor_config[channel].usr_offset_z;
 8004f32:	68f9      	ldr	r1, [r7, #12]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	3308      	adds	r3, #8
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	601a      	str	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <VibeCheckSensor_StartFakeData>:


void VibeCheckSensor_StartFakeData(VibeCheckSensor* sensor)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 1;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f62:	461a      	mov	r2, r3
 8004f64:	2301      	movs	r3, #1
 8004f66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <VibeCheckSensor_StopFakeData>:


void VibeCheckSensor_StopFakeData(VibeCheckSensor* sensor)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
	sensor->generate_fake_data = 0;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f84:	461a      	mov	r2, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <VibeCheckSensor_SetPacketSize>:


void VibeCheckSensor_SetPacketSize(VibeCheckSensor* sensor, uint32_t size)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	if (size < 1) size = 1;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <VibeCheckSensor_SetPacketSize+0x14>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	603b      	str	r3, [r7, #0]
	if (size > VC_SENSOR_MAX_PACKET_SIZE) size = VC_SENSOR_MAX_PACKET_SIZE;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b64      	cmp	r3, #100	@ 0x64
 8004fb0:	d901      	bls.n	8004fb6 <VibeCheckSensor_SetPacketSize+0x1e>
 8004fb2:	2364      	movs	r3, #100	@ 0x64
 8004fb4:	603b      	str	r3, [r7, #0]

	/* reset the state of the data buffer */
	sensor->data_packet_size = size;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
	sensor->data_ready = 0;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	sensor->data_ind = 0;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <VibeCheckSensor_GetPacketSize>:


uint32_t VibeCheckSensor_GetPacketSize(VibeCheckSensor* sensor)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	return sensor->data_packet_size;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <VibeCheckSensor_IsConnected>:
	sensor->start_time = *sensor->time_micros;
}


uint32_t VibeCheckSensor_IsConnected(VibeCheckSensor* sensor, uint32_t channel)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <VibeCheckSensor_IsConnected+0x14>
 800501a:	2302      	movs	r3, #2
 800501c:	603b      	str	r3, [r7, #0]
	return sensor->status[channel].is_connected;
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	440b      	add	r3, r1
 800502c:	33fc      	adds	r3, #252	@ 0xfc
 800502e:	681b      	ldr	r3, [r3, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <VibeCheckSensor_ConnectionChanged>:


uint32_t VibeCheckSensor_ConnectionChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* is_connected)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e01e      	b.n	800508c <VibeCheckSensor_ConnectionChanged+0x50>
	{
		if (sensor->status[i].connection_change_flag)
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4613      	mov	r3, r2
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	440b      	add	r3, r1
 800505c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00f      	beq.n	8005086 <VibeCheckSensor_ConnectionChanged+0x4a>
		{
			*channel = i;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	601a      	str	r2, [r3, #0]
			*is_connected = sensor->status[i].is_connected;
 800506c:	68f9      	ldr	r1, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	440b      	add	r3, r1
 800507a:	33fc      	adds	r3, #252	@ 0xfc
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
			return 1;
 8005082:	2301      	movs	r3, #1
 8005084:	e006      	b.n	8005094 <VibeCheckSensor_ConnectionChanged+0x58>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d9dd      	bls.n	800504e <VibeCheckSensor_ConnectionChanged+0x12>
		}
	}

	return 0;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <VibeCheckSensor_MeasuringChanged>:


uint32_t VibeCheckSensor_MeasuringChanged(VibeCheckSensor* sensor, uint32_t* channel, uint32_t* accel_measuring, uint32_t* gyro_measuring)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e036      	b.n	8005122 <VibeCheckSensor_MeasuringChanged+0x82>
	{
		if (sensor->status[i].measuring_change_flag)
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d027      	beq.n	800511c <VibeCheckSensor_MeasuringChanged+0x7c>
		{
			sensor->status[i].measuring_change_flag = 0;
 80050cc:	68f9      	ldr	r1, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4613      	mov	r3, r2
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			*channel = i;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	601a      	str	r2, [r3, #0]
			*accel_measuring = sensor->status[i].accel_measuring;
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	601a      	str	r2, [r3, #0]
			*gyro_measuring = sensor->status[i].gyro_measuring;
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4613      	mov	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]
			return 1;
 8005118:	2301      	movs	r3, #1
 800511a:	e006      	b.n	800512a <VibeCheckSensor_MeasuringChanged+0x8a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d9c5      	bls.n	80050b4 <VibeCheckSensor_MeasuringChanged+0x14>
		}
	}

	return 0;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <VibeCheckSensor_ResetConnectionFlag>:


void VibeCheckSensor_ResetConnectionFlag(VibeCheckSensor* sensor, uint32_t channel)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <VibeCheckSensor_ResetConnectionFlag+0x14>
 8005146:	2302      	movs	r3, #2
 8005148:	603b      	str	r3, [r7, #0]
	sensor->status[channel].connection_change_flag = 0;
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	440b      	add	r3, r1
 8005158:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <VibeCheckSensor_UpdateSensor>:


void VibeCheckSensor_UpdateSensor(VibeCheckSensor* sensor, uint32_t channel)  /* send the new configuration parameters to a sensor chip */
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
	if (channel >= VC_SENSOR_NUM_SENSORS) channel = VC_SENSOR_NUM_SENSORS - 1;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <VibeCheckSensor_UpdateSensor+0x14>
 800517c:	2302      	movs	r3, #2
 800517e:	603b      	str	r3, [r7, #0]

	if (sensor->status[channel].is_connected)
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	33fc      	adds	r3, #252	@ 0xfc
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03b      	beq.n	800520e <VibeCheckSensor_UpdateSensor+0xa2>
	{
		LSM6DS3_Configure(&sensor->sensor_array[channel]);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3350      	adds	r3, #80	@ 0x50
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	3304      	adds	r3, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb fcc9 	bl	8000b40 <LSM6DS3_Configure>
		if (sensor->status[channel].accel_measuring)
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <VibeCheckSensor_UpdateSensor+0x72>
			LSM6DS3_StartAccel(&sensor->sensor_array[channel]);
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	3350      	adds	r3, #80	@ 0x50
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	3304      	adds	r3, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fb fd55 	bl	8000c88 <LSM6DS3_StartAccel>
		if (sensor->status[channel].gyro_measuring)
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <VibeCheckSensor_UpdateSensor+0xa2>
			LSM6DS3_StartGyro(&sensor->sensor_array[channel]);
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	3350      	adds	r3, #80	@ 0x50
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	3304      	adds	r3, #4
 8005208:	4618      	mov	r0, r3
 800520a:	f7fb fddf 	bl	8000dcc <LSM6DS3_StartGyro>
	}
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <VibeCheckSensor_AddData>:


void VibeCheckSensor_AddData(VibeCheckSensor* sensor, uint8_t id, uint32_t time, float x, float y, float z)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	6178      	str	r0, [r7, #20]
 800521e:	460b      	mov	r3, r1
 8005220:	60fa      	str	r2, [r7, #12]
 8005222:	ed87 0a02 	vstr	s0, [r7, #8]
 8005226:	edc7 0a01 	vstr	s1, [r7, #4]
 800522a:	ed87 1a00 	vstr	s2, [r7]
 800522e:	74fb      	strb	r3, [r7, #19]
	sensor->data[sensor->data_ind].id = id;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005236:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800524a:	7cfa      	ldrb	r2, [r7, #19]
 800524c:	701a      	strb	r2, [r3, #0]
	sensor->data[sensor->data_ind].time = time;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005254:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005258:	6979      	ldr	r1, [r7, #20]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].x = x;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005272:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005276:	6979      	ldr	r1, [r7, #20]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].y = y;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005290:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]
	sensor->data[sensor->data_ind].z = z;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ae:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	601a      	str	r2, [r3, #0]

	sensor->data_ind++;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052d0:	3301      	adds	r3, #1
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	if (sensor->data_ind == sensor->data_packet_size)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d107      	bne.n	8005304 <VibeCheckSensor_AddData+0xee>
	{
		sensor->data_ready = 1;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052fa:	461a      	mov	r2, r3
 80052fc:	2301      	movs	r3, #1
 80052fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
	{
		sensor->data_ind = 0;
		sensor->data_ready = 1;
	}
}
 8005302:	e01a      	b.n	800533a <VibeCheckSensor_AddData+0x124>
	else if (sensor->data_ind == 2 * sensor->data_packet_size)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005314:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	429a      	cmp	r2, r3
 800531c:	d10d      	bne.n	800533a <VibeCheckSensor_AddData+0x124>
		sensor->data_ind = 0;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005324:	461a      	mov	r2, r3
 8005326:	2300      	movs	r3, #0
 8005328:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
		sensor->data_ready = 1;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005332:	461a      	mov	r2, r3
 8005334:	2301      	movs	r3, #1
 8005336:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <VibeCheckSensor_GetDataReady>:


uint32_t VibeCheckSensor_GetDataReady(VibeCheckSensor* sensor, volatile VibeCheckSensor_Data** data)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
	if (sensor->data_ready)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d02a      	beq.n	80053b4 <VibeCheckSensor_GetDataReady+0x6e>
	{
		sensor->data_ready = 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
		if (sensor->data_ind < sensor->data_packet_size)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005372:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800537c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005380:	429a      	cmp	r2, r3
 8005382:	d210      	bcs.n	80053a6 <VibeCheckSensor_GetDataReady+0x60>
		{
			/* ready to send the second half */
			*data = &sensor->data[sensor->data_packet_size];
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800538a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e004      	b.n	80053b0 <VibeCheckSensor_GetDataReady+0x6a>
		}
		else
		{
			/* ready to send the first half */
			*data = &sensor->data[0];
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	601a      	str	r2, [r3, #0]
		}
		return 1;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <VibeCheckSensor_GetDataReady+0x70>
	}
	return 0;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <VibeCheckSensor_EXTICallback>:


void VibeCheckSensor_EXTICallback(VibeCheckSensor* sensor, uint16_t GPIO_Pin)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08a      	sub	sp, #40	@ 0x28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	807b      	strh	r3, [r7, #2]
	/*
	 * Read the sensor data when a signal occurs on a data ready pin. We assume that the INT1 pin indicates acceleration
	 * data ready and that the INT2 pin indicates gyroscope data ready.
	 */

	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d2:	e0ae      	b.n	8005532 <VibeCheckSensor_EXTICallback+0x170>
	{
		if (GPIO_Pin == sensor->sensor_array[i].int1_pin && sensor->status[i].accel_measuring)
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	3364      	adds	r3, #100	@ 0x64
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d148      	bne.n	800547e <VibeCheckSensor_EXTICallback+0xbc>
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f0:	4613      	mov	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d03c      	beq.n	800547e <VibeCheckSensor_EXTICallback+0xbc>
		{
			float x, y, z;
			LSM6DS3_ReadAccel(&sensor->sensor_array[i], &x, &y, &z);
 8005404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005406:	4613      	mov	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	3350      	adds	r3, #80	@ 0x50
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	1d18      	adds	r0, r3, #4
 8005416:	f107 0318 	add.w	r3, r7, #24
 800541a:	f107 021c 	add.w	r2, r7, #28
 800541e:	f107 0120 	add.w	r1, r7, #32
 8005422:	f7fb fd87 	bl	8000f34 <LSM6DS3_ReadAccel>
			VibeCheckSensor_AddData(sensor, 2 * i, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	b2db      	uxtb	r3, r3
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	b2d9      	uxtb	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005434:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005440:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	edd7 7a08 	vldr	s15, [r7, #32]
 800544a:	ed97 7a07 	vldr	s14, [r7, #28]
 800544e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005452:	eeb0 1a66 	vmov.f32	s2, s13
 8005456:	eef0 0a47 	vmov.f32	s1, s14
 800545a:	eeb0 0a67 	vmov.f32	s0, s15
 800545e:	461a      	mov	r2, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fed8 	bl	8005216 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	440b      	add	r3, r1
 8005474:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
			break;
 800547c:	e05e      	b.n	800553c <VibeCheckSensor_EXTICallback+0x17a>
		}

		if (GPIO_Pin == sensor->sensor_array[i].int2_pin && sensor->status[i].gyro_measuring)
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	440b      	add	r3, r1
 800548c:	336c      	adds	r3, #108	@ 0x6c
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	887a      	ldrh	r2, [r7, #2]
 8005492:	429a      	cmp	r2, r3
 8005494:	d14a      	bne.n	800552c <VibeCheckSensor_EXTICallback+0x16a>
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d03e      	beq.n	800552c <VibeCheckSensor_EXTICallback+0x16a>
		{
			float x, y, z;
			LSM6DS3_ReadGyro(&sensor->sensor_array[i], &x, &y, &z);
 80054ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	3350      	adds	r3, #80	@ 0x50
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	1d18      	adds	r0, r3, #4
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	f107 0210 	add.w	r2, r7, #16
 80054c8:	f107 0114 	add.w	r1, r7, #20
 80054cc:	f7fb fdc0 	bl	8001050 <LSM6DS3_ReadGyro>
			VibeCheckSensor_AddData(sensor, 2 * i + 1, *sensor->time_micros - sensor->start_time, x, y, z);  /* time stamps are in microseconds */
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	b2d9      	uxtb	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80054f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80054fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8005500:	eeb0 1a66 	vmov.f32	s2, s13
 8005504:	eef0 0a47 	vmov.f32	s1, s14
 8005508:	eeb0 0a67 	vmov.f32	s0, s15
 800550c:	461a      	mov	r2, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fe81 	bl	8005216 <VibeCheckSensor_AddData>
			sensor->status[i].received_data_flag = 1;
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005518:	4613      	mov	r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
			break;
 800552a:	e007      	b.n	800553c <VibeCheckSensor_EXTICallback+0x17a>
	for (uint32_t i = 0; i < VC_SENSOR_NUM_SENSORS; i++)
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	2b02      	cmp	r3, #2
 8005536:	f67f af4d 	bls.w	80053d4 <VibeCheckSensor_EXTICallback+0x12>
		}
	}
}
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	3728      	adds	r7, #40	@ 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <VibeCheckSensorCMD_Set>:

#include "vibecheck_sensor_handler.h"


static uint32_t VibeCheckSensorCMD_Set(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b09c      	sub	sp, #112	@ 0x70
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005550:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005554:	2240      	movs	r2, #64	@ 0x40
 8005556:	4619      	mov	r1, r3
 8005558:	68b8      	ldr	r0, [r7, #8]
 800555a:	f000 ff1d 	bl	8006398 <VibeCheckShell_GetNextString>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 80eb 	beq.w	800573c <VibeCheckSensorCMD_Set+0x1f8>
	{
		if (!strcmp(str, "accel"))
 8005566:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800556a:	4977      	ldr	r1, [pc, #476]	@ (8005748 <VibeCheckSensorCMD_Set+0x204>)
 800556c:	4618      	mov	r0, r3
 800556e:	f7fa fecf 	bl	8000310 <strcmp>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d14f      	bne.n	8005618 <VibeCheckSensorCMD_Set+0xd4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005578:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800557c:	2240      	movs	r2, #64	@ 0x40
 800557e:	4619      	mov	r1, r3
 8005580:	68b8      	ldr	r0, [r7, #8]
 8005582:	f000 ff09 	bl	8006398 <VibeCheckShell_GetNextString>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80d7 	beq.w	800573c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 800558e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005592:	496e      	ldr	r1, [pc, #440]	@ (800574c <VibeCheckSensorCMD_Set+0x208>)
 8005594:	4618      	mov	r0, r3
 8005596:	f7fa febb 	bl	8000310 <strcmp>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d118      	bne.n	80055d2 <VibeCheckSensorCMD_Set+0x8e>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 80055a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055a4:	4619      	mov	r1, r3
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f000 ff6e 	bl	8006488 <VibeCheckShell_GetNextInt>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80c4 	beq.w	800573c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelODR(sensor, channel, odr);
 80055b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b6:	461a      	mov	r2, r3
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fb24 	bl	8004c08 <VibeCheckSensor_SetAccelODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 80055c0:	4963      	ldr	r1, [pc, #396]	@ (8005750 <VibeCheckSensorCMD_Set+0x20c>)
 80055c2:	68b8      	ldr	r0, [r7, #8]
 80055c4:	f001 f808 	bl	80065d8 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80055c8:	68b8      	ldr	r0, [r7, #8]
 80055ca:	f001 f885 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0b5      	b.n	800573e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 80055d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80055d6:	495f      	ldr	r1, [pc, #380]	@ (8005754 <VibeCheckSensorCMD_Set+0x210>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa fe99 	bl	8000310 <strcmp>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f040 80ab 	bne.w	800573c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 80055e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055ea:	4619      	mov	r1, r3
 80055ec:	68b8      	ldr	r0, [r7, #8]
 80055ee:	f000 ff4b 	bl	8006488 <VibeCheckShell_GetNextInt>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetAccelRange(sensor, channel, range);
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	461a      	mov	r2, r3
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fb49 	bl	8004c98 <VibeCheckSensor_SetAccelRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005606:	4952      	ldr	r1, [pc, #328]	@ (8005750 <VibeCheckSensorCMD_Set+0x20c>)
 8005608:	68b8      	ldr	r0, [r7, #8]
 800560a:	f000 ffe5 	bl	80065d8 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 800560e:	68b8      	ldr	r0, [r7, #8]
 8005610:	f001 f862 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005614:	2301      	movs	r3, #1
 8005616:	e092      	b.n	800573e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8005618:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800561c:	494e      	ldr	r1, [pc, #312]	@ (8005758 <VibeCheckSensorCMD_Set+0x214>)
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa fe76 	bl	8000310 <strcmp>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d14b      	bne.n	80056c2 <VibeCheckSensorCMD_Set+0x17e>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800562a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800562e:	2240      	movs	r2, #64	@ 0x40
 8005630:	4619      	mov	r1, r3
 8005632:	68b8      	ldr	r0, [r7, #8]
 8005634:	f000 feb0 	bl	8006398 <VibeCheckShell_GetNextString>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d07e      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
			{
				if (!strcmp(str, "odr"))
 800563e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005642:	4942      	ldr	r1, [pc, #264]	@ (800574c <VibeCheckSensorCMD_Set+0x208>)
 8005644:	4618      	mov	r0, r3
 8005646:	f7fa fe63 	bl	8000310 <strcmp>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d117      	bne.n	8005680 <VibeCheckSensorCMD_Set+0x13c>
				{
					int32_t odr;
					if (VibeCheckShell_GetNextInt(shell, &odr))
 8005650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005654:	4619      	mov	r1, r3
 8005656:	68b8      	ldr	r0, [r7, #8]
 8005658:	f000 ff16 	bl	8006488 <VibeCheckShell_GetNextInt>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d06c      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroODR(sensor, channel, odr);
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	461a      	mov	r2, r3
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff faf1 	bl	8004c50 <VibeCheckSensor_SetGyroODR>
						VibeCheckShell_PutOutputString(shell, "ack");
 800566e:	4938      	ldr	r1, [pc, #224]	@ (8005750 <VibeCheckSensorCMD_Set+0x20c>)
 8005670:	68b8      	ldr	r0, [r7, #8]
 8005672:	f000 ffb1 	bl	80065d8 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005676:	68b8      	ldr	r0, [r7, #8]
 8005678:	f001 f82e 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 800567c:	2301      	movs	r3, #1
 800567e:	e05e      	b.n	800573e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
				else if (!strcmp(str, "range"))
 8005680:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005684:	4933      	ldr	r1, [pc, #204]	@ (8005754 <VibeCheckSensorCMD_Set+0x210>)
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa fe42 	bl	8000310 <strcmp>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d154      	bne.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
				{
					int32_t range;
					if (VibeCheckShell_GetNextInt(shell, &range))
 8005692:	f107 0320 	add.w	r3, r7, #32
 8005696:	4619      	mov	r1, r3
 8005698:	68b8      	ldr	r0, [r7, #8]
 800569a:	f000 fef5 	bl	8006488 <VibeCheckShell_GetNextInt>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d04b      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
					{
						VibeCheckSensor_SetGyroRange(sensor, channel, range);
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fb18 	bl	8004ce0 <VibeCheckSensor_SetGyroRange>
						VibeCheckShell_PutOutputString(shell, "ack");
 80056b0:	4927      	ldr	r1, [pc, #156]	@ (8005750 <VibeCheckSensorCMD_Set+0x20c>)
 80056b2:	68b8      	ldr	r0, [r7, #8]
 80056b4:	f000 ff90 	bl	80065d8 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 80056b8:	68b8      	ldr	r0, [r7, #8]
 80056ba:	f001 f80d 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	e03d      	b.n	800573e <VibeCheckSensorCMD_Set+0x1fa>
					}
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 80056c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80056c6:	4925      	ldr	r1, [pc, #148]	@ (800575c <VibeCheckSensorCMD_Set+0x218>)
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fa fe21 	bl	8000310 <strcmp>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d133      	bne.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
		{
			float x, y, z;
			if (VibeCheckShell_GetNextFloat(shell, &x)
 80056d4:	f107 031c 	add.w	r3, r7, #28
 80056d8:	4619      	mov	r1, r3
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f000 fef0 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02a      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &y)
 80056e6:	f107 0318 	add.w	r3, r7, #24
 80056ea:	4619      	mov	r1, r3
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	f000 fee7 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d021      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
					&& VibeCheckShell_GetNextFloat(shell, &z))
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	4619      	mov	r1, r3
 80056fe:	68b8      	ldr	r0, [r7, #8]
 8005700:	f000 fede 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d018      	beq.n	800573c <VibeCheckSensorCMD_Set+0x1f8>
			{
				VibeCheckSensor_SetOffsets(sensor, channel, x, y, z);
 800570a:	edd7 7a07 	vldr	s15, [r7, #28]
 800570e:	ed97 7a06 	vldr	s14, [r7, #24]
 8005712:	edd7 6a05 	vldr	s13, [r7, #20]
 8005716:	eeb0 1a66 	vmov.f32	s2, s13
 800571a:	eef0 0a47 	vmov.f32	s1, s14
 800571e:	eeb0 0a67 	vmov.f32	s0, s15
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff faff 	bl	8004d28 <VibeCheckSensor_SetOffsets>
				VibeCheckShell_PutOutputString(shell, "ack");
 800572a:	4909      	ldr	r1, [pc, #36]	@ (8005750 <VibeCheckSensorCMD_Set+0x20c>)
 800572c:	68b8      	ldr	r0, [r7, #8]
 800572e:	f000 ff53 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8005732:	68b8      	ldr	r0, [r7, #8]
 8005734:	f000 ffd0 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <VibeCheckSensorCMD_Set+0x1fa>
			}
		}
	}


	return 0;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3770      	adds	r7, #112	@ 0x70
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0801e204 	.word	0x0801e204
 800574c:	0801e20c 	.word	0x0801e20c
 8005750:	0801e210 	.word	0x0801e210
 8005754:	0801e214 	.word	0x0801e214
 8005758:	0801e21c 	.word	0x0801e21c
 800575c:	0801e224 	.word	0x0801e224

08005760 <VibeCheckSensorCMD_Get>:


static uint32_t VibeCheckSensorCMD_Get(VibeCheckSensor* sensor, VibeCheckShell* shell, uint32_t channel)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b09a      	sub	sp, #104	@ 0x68
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 800576c:	f107 0320 	add.w	r3, r7, #32
 8005770:	2240      	movs	r2, #64	@ 0x40
 8005772:	4619      	mov	r1, r3
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	f000 fe0f 	bl	8006398 <VibeCheckShell_GetNextString>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80fb 	beq.w	8005978 <VibeCheckSensorCMD_Get+0x218>
	{
		if (!strcmp(str, "accel"))
 8005782:	f107 0320 	add.w	r3, r7, #32
 8005786:	497f      	ldr	r1, [pc, #508]	@ (8005984 <VibeCheckSensorCMD_Get+0x224>)
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fdc1 	bl	8000310 <strcmp>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d147      	bne.n	8005824 <VibeCheckSensorCMD_Get+0xc4>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005794:	f107 0320 	add.w	r3, r7, #32
 8005798:	2240      	movs	r2, #64	@ 0x40
 800579a:	4619      	mov	r1, r3
 800579c:	68b8      	ldr	r0, [r7, #8]
 800579e:	f000 fdfb 	bl	8006398 <VibeCheckShell_GetNextString>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80e7 	beq.w	8005978 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 80057aa:	f107 0320 	add.w	r3, r7, #32
 80057ae:	4976      	ldr	r1, [pc, #472]	@ (8005988 <VibeCheckSensorCMD_Get+0x228>)
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fa fdad 	bl	8000310 <strcmp>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d114      	bne.n	80057e6 <VibeCheckSensorCMD_Get+0x86>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80057bc:	4973      	ldr	r1, [pc, #460]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 80057be:	68b8      	ldr	r0, [r7, #8]
 80057c0:	f000 ff0a 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f000 ff79 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelODR(sensor, channel));
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fb2b 	bl	8004e28 <VibeCheckSensor_GetAccelODR>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4619      	mov	r1, r3
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f000 ff3a 	bl	8006650 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80057dc:	68b8      	ldr	r0, [r7, #8]
 80057de:	f000 ff7b 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0c9      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 80057e6:	f107 0320 	add.w	r3, r7, #32
 80057ea:	4969      	ldr	r1, [pc, #420]	@ (8005990 <VibeCheckSensorCMD_Get+0x230>)
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fa fd8f 	bl	8000310 <strcmp>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 80bf 	bne.w	8005978 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 80057fa:	4964      	ldr	r1, [pc, #400]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 80057fc:	68b8      	ldr	r0, [r7, #8]
 80057fe:	f000 feeb 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005802:	68b8      	ldr	r0, [r7, #8]
 8005804:	f000 ff5a 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetAccelRange(sensor, channel));
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fb3e 	bl	8004e8c <VibeCheckSensor_GetAccelRange>
 8005810:	4603      	mov	r3, r0
 8005812:	4619      	mov	r1, r3
 8005814:	68b8      	ldr	r0, [r7, #8]
 8005816:	f000 ff1b 	bl	8006650 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f000 ff5c 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005820:	2301      	movs	r3, #1
 8005822:	e0aa      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "gyro"))
 8005824:	f107 0320 	add.w	r3, r7, #32
 8005828:	495a      	ldr	r1, [pc, #360]	@ (8005994 <VibeCheckSensorCMD_Get+0x234>)
 800582a:	4618      	mov	r0, r3
 800582c:	f7fa fd70 	bl	8000310 <strcmp>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d146      	bne.n	80058c4 <VibeCheckSensorCMD_Get+0x164>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005836:	f107 0320 	add.w	r3, r7, #32
 800583a:	2240      	movs	r2, #64	@ 0x40
 800583c:	4619      	mov	r1, r3
 800583e:	68b8      	ldr	r0, [r7, #8]
 8005840:	f000 fdaa 	bl	8006398 <VibeCheckShell_GetNextString>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8096 	beq.w	8005978 <VibeCheckSensorCMD_Get+0x218>
			{
				if (!strcmp(str, "odr"))
 800584c:	f107 0320 	add.w	r3, r7, #32
 8005850:	494d      	ldr	r1, [pc, #308]	@ (8005988 <VibeCheckSensorCMD_Get+0x228>)
 8005852:	4618      	mov	r0, r3
 8005854:	f7fa fd5c 	bl	8000310 <strcmp>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d114      	bne.n	8005888 <VibeCheckSensorCMD_Get+0x128>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800585e:	494b      	ldr	r1, [pc, #300]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f000 feb9 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005866:	68b8      	ldr	r0, [r7, #8]
 8005868:	f000 ff28 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroODR(sensor, channel));
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7ff faf3 	bl	8004e5a <VibeCheckSensor_GetGyroODR>
 8005874:	4603      	mov	r3, r0
 8005876:	4619      	mov	r1, r3
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f000 fee9 	bl	8006650 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 800587e:	68b8      	ldr	r0, [r7, #8]
 8005880:	f000 ff2a 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005884:	2301      	movs	r3, #1
 8005886:	e078      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
				}
				else if (!strcmp(str, "range"))
 8005888:	f107 0320 	add.w	r3, r7, #32
 800588c:	4940      	ldr	r1, [pc, #256]	@ (8005990 <VibeCheckSensorCMD_Get+0x230>)
 800588e:	4618      	mov	r0, r3
 8005890:	f7fa fd3e 	bl	8000310 <strcmp>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d16e      	bne.n	8005978 <VibeCheckSensorCMD_Get+0x218>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 800589a:	493c      	ldr	r1, [pc, #240]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 800589c:	68b8      	ldr	r0, [r7, #8]
 800589e:	f000 fe9b 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f000 ff0a 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetGyroRange(sensor, channel));
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7ff fb07 	bl	8004ebe <VibeCheckSensor_GetGyroRange>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4619      	mov	r1, r3
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 fecb 	bl	8006650 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 80058ba:	68b8      	ldr	r0, [r7, #8]
 80058bc:	f000 ff0c 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e05a      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
				}
			}
		}
		else if (!strcmp(str, "offsets"))
 80058c4:	f107 0320 	add.w	r3, r7, #32
 80058c8:	4933      	ldr	r1, [pc, #204]	@ (8005998 <VibeCheckSensorCMD_Get+0x238>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fa fd20 	bl	8000310 <strcmp>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d132      	bne.n	800593c <VibeCheckSensorCMD_Get+0x1dc>
		{
			float x, y, z;
			VibeCheckSensor_GetOffsets(sensor, channel, &x, &y, &z);
 80058d6:	f107 0118 	add.w	r1, r7, #24
 80058da:	f107 021c 	add.w	r2, r7, #28
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	460b      	mov	r3, r1
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fb01 	bl	8004ef0 <VibeCheckSensor_GetOffsets>

			VibeCheckShell_PutOutputString(shell, "ack");
 80058ee:	4927      	ldr	r1, [pc, #156]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 80058f0:	68b8      	ldr	r0, [r7, #8]
 80058f2:	f000 fe71 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80058f6:	68b8      	ldr	r0, [r7, #8]
 80058f8:	f000 fee0 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, x);
 80058fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005900:	eeb0 0a67 	vmov.f32	s0, s15
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	f000 febb 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800590a:	68b8      	ldr	r0, [r7, #8]
 800590c:	f000 fed6 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, y);
 8005910:	edd7 7a06 	vldr	s15, [r7, #24]
 8005914:	eeb0 0a67 	vmov.f32	s0, s15
 8005918:	68b8      	ldr	r0, [r7, #8]
 800591a:	f000 feb1 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 800591e:	68b8      	ldr	r0, [r7, #8]
 8005920:	f000 fecc 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, z);
 8005924:	edd7 7a05 	vldr	s15, [r7, #20]
 8005928:	eeb0 0a67 	vmov.f32	s0, s15
 800592c:	68b8      	ldr	r0, [r7, #8]
 800592e:	f000 fea7 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f000 fed0 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005938:	2301      	movs	r3, #1
 800593a:	e01e      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
		}
		else if (!strcmp(str, "connected"))
 800593c:	f107 0320 	add.w	r3, r7, #32
 8005940:	4916      	ldr	r1, [pc, #88]	@ (800599c <VibeCheckSensorCMD_Get+0x23c>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fce4 	bl	8000310 <strcmp>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d114      	bne.n	8005978 <VibeCheckSensorCMD_Get+0x218>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 800594e:	490f      	ldr	r1, [pc, #60]	@ (800598c <VibeCheckSensorCMD_Get+0x22c>)
 8005950:	68b8      	ldr	r0, [r7, #8]
 8005952:	f000 fe41 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f000 feb0 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_IsConnected(sensor, channel));
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fb53 	bl	800500a <VibeCheckSensor_IsConnected>
 8005964:	4603      	mov	r3, r0
 8005966:	4619      	mov	r1, r3
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f000 fe71 	bl	8006650 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputDelimiter(shell);
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f000 feb2 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <VibeCheckSensorCMD_Get+0x21a>
		}
	}

	return 0;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3760      	adds	r7, #96	@ 0x60
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	0801e204 	.word	0x0801e204
 8005988:	0801e20c 	.word	0x0801e20c
 800598c:	0801e210 	.word	0x0801e210
 8005990:	0801e214 	.word	0x0801e214
 8005994:	0801e21c 	.word	0x0801e21c
 8005998:	0801e224 	.word	0x0801e224
 800599c:	0801e22c 	.word	0x0801e22c

080059a0 <VibeCheckSensorCMD_Execute>:


uint32_t VibeCheckSensorCMD_Execute(void* obj, VibeCheckShell* shell)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b096      	sub	sp, #88	@ 0x58
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	657b      	str	r3, [r7, #84]	@ 0x54

	char str[VC_SHELL_MAX_TOKEN_LEN];
	int32_t channel;
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	2240      	movs	r2, #64	@ 0x40
 80059b4:	4619      	mov	r1, r3
 80059b6:	6838      	ldr	r0, [r7, #0]
 80059b8:	f000 fcee 	bl	8006398 <VibeCheckShell_GetNextString>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8169 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
	{
		if (!strcmp(str, "fakedata"))
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	49b5      	ldr	r1, [pc, #724]	@ (8005ca0 <VibeCheckSensorCMD_Execute+0x300>)
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fa fca0 	bl	8000310 <strcmp>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d135      	bne.n	8005a42 <VibeCheckSensorCMD_Execute+0xa2>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80059d6:	f107 0314 	add.w	r3, r7, #20
 80059da:	2240      	movs	r2, #64	@ 0x40
 80059dc:	4619      	mov	r1, r3
 80059de:	6838      	ldr	r0, [r7, #0]
 80059e0:	f000 fcda 	bl	8006398 <VibeCheckShell_GetNextString>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8155 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 80059ec:	f107 0314 	add.w	r3, r7, #20
 80059f0:	49ac      	ldr	r1, [pc, #688]	@ (8005ca4 <VibeCheckSensorCMD_Execute+0x304>)
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fa fc8c 	bl	8000310 <strcmp>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <VibeCheckSensorCMD_Execute+0x76>
				{
					VibeCheckSensor_StartFakeData(sensor);
 80059fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005a00:	f7ff faa8 	bl	8004f54 <VibeCheckSensor_StartFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005a04:	49a8      	ldr	r1, [pc, #672]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005a06:	6838      	ldr	r0, [r7, #0]
 8005a08:	f000 fde6 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005a0c:	6838      	ldr	r0, [r7, #0]
 8005a0e:	f000 fe63 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e140      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
				}
				else if (!strcmp(str, "stop"))
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	49a4      	ldr	r1, [pc, #656]	@ (8005cac <VibeCheckSensorCMD_Execute+0x30c>)
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fa fc77 	bl	8000310 <strcmp>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 8136 	bne.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckSensor_StopFakeData(sensor);
 8005a2a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005a2c:	f7ff faa3 	bl	8004f76 <VibeCheckSensor_StopFakeData>
					VibeCheckShell_PutOutputString(shell, "ack");
 8005a30:	499d      	ldr	r1, [pc, #628]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005a32:	6838      	ldr	r0, [r7, #0]
 8005a34:	f000 fdd0 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005a38:	6838      	ldr	r0, [r7, #0]
 8005a3a:	f000 fe4d 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e12a      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (!strcmp(str, "set"))
 8005a42:	f107 0314 	add.w	r3, r7, #20
 8005a46:	499a      	ldr	r1, [pc, #616]	@ (8005cb0 <VibeCheckSensorCMD_Execute+0x310>)
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fa fc61 	bl	8000310 <strcmp>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d12c      	bne.n	8005aae <VibeCheckSensorCMD_Execute+0x10e>
		{
			/* setters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	2240      	movs	r2, #64	@ 0x40
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6838      	ldr	r0, [r7, #0]
 8005a5e:	f000 fc9b 	bl	8006398 <VibeCheckShell_GetNextString>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8116 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 8005a6a:	f107 0314 	add.w	r3, r7, #20
 8005a6e:	4991      	ldr	r1, [pc, #580]	@ (8005cb4 <VibeCheckSensorCMD_Execute+0x314>)
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fa fc4d 	bl	8000310 <strcmp>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 810c 	bne.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
				{
					int32_t size;
					if (VibeCheckShell_GetNextInt(shell, &size))
 8005a7e:	f107 030c 	add.w	r3, r7, #12
 8005a82:	4619      	mov	r1, r3
 8005a84:	6838      	ldr	r0, [r7, #0]
 8005a86:	f000 fcff 	bl	8006488 <VibeCheckShell_GetNextInt>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8102 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
					{
						VibeCheckSensor_SetPacketSize(sensor, size);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005a98:	f7ff fa7e 	bl	8004f98 <VibeCheckSensor_SetPacketSize>
						VibeCheckShell_PutOutputString(shell, "ack");
 8005a9c:	4982      	ldr	r1, [pc, #520]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005a9e:	6838      	ldr	r0, [r7, #0]
 8005aa0:	f000 fd9a 	bl	80065d8 <VibeCheckShell_PutOutputString>
						VibeCheckShell_PutOutputDelimiter(shell);
 8005aa4:	6838      	ldr	r0, [r7, #0]
 8005aa6:	f000 fe17 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
						return 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0f4      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
			}
		}
		else if (!strcmp(str, "get"))
 8005aae:	f107 0314 	add.w	r3, r7, #20
 8005ab2:	4981      	ldr	r1, [pc, #516]	@ (8005cb8 <VibeCheckSensorCMD_Execute+0x318>)
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fc2b 	bl	8000310 <strcmp>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d128      	bne.n	8005b12 <VibeCheckSensorCMD_Execute+0x172>
		{
			/* getters for overall sensor subsystem (not channel specific) */
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	2240      	movs	r2, #64	@ 0x40
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6838      	ldr	r0, [r7, #0]
 8005aca:	f000 fc65 	bl	8006398 <VibeCheckShell_GetNextString>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80e0 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "packetsize"))
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4976      	ldr	r1, [pc, #472]	@ (8005cb4 <VibeCheckSensorCMD_Execute+0x314>)
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fa fc17 	bl	8000310 <strcmp>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 80d6 	bne.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
				{
					VibeCheckShell_PutOutputString(shell, "ack");
 8005aea:	496f      	ldr	r1, [pc, #444]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	f000 fd73 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputSeparator(shell);
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	f000 fde2 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
					VibeCheckShell_PutOutputInt(shell, VibeCheckSensor_GetPacketSize(sensor));
 8005af8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005afa:	f7ff fa77 	bl	8004fec <VibeCheckSensor_GetPacketSize>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4619      	mov	r1, r3
 8005b02:	6838      	ldr	r0, [r7, #0]
 8005b04:	f000 fda4 	bl	8006650 <VibeCheckShell_PutOutputInt>
					VibeCheckShell_PutOutputDelimiter(shell);
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f000 fde5 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e0c2      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
		else if (VibeCheckShell_TurnToInt(str, &channel))
 8005b12:	f107 0210 	add.w	r2, r7, #16
 8005b16:	f107 0314 	add.w	r3, r7, #20
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fceb 	bl	80064f8 <VibeCheckShell_TurnToInt>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80b6 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	2240      	movs	r2, #64	@ 0x40
 8005b30:	4619      	mov	r1, r3
 8005b32:	6838      	ldr	r0, [r7, #0]
 8005b34:	f000 fc30 	bl	8006398 <VibeCheckShell_GetNextString>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80ab 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
			{
				if (!strcmp(str, "start"))
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4957      	ldr	r1, [pc, #348]	@ (8005ca4 <VibeCheckSensorCMD_Execute+0x304>)
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fa fbe2 	bl	8000310 <strcmp>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d138      	bne.n	8005bc4 <VibeCheckSensorCMD_Execute+0x224>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	2240      	movs	r2, #64	@ 0x40
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	f000 fc1c 	bl	8006398 <VibeCheckShell_GetNextString>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 8097 	beq.w	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	4953      	ldr	r1, [pc, #332]	@ (8005cbc <VibeCheckSensorCMD_Execute+0x31c>)
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fa fbce 	bl	8000310 <strcmp>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10d      	bne.n	8005b96 <VibeCheckSensorCMD_Execute+0x1f6>
						{
							VibeCheckSensor_StartAccel(sensor, channel);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005b80:	f7fe ff26 	bl	80049d0 <VibeCheckSensor_StartAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005b84:	4948      	ldr	r1, [pc, #288]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005b86:	6838      	ldr	r0, [r7, #0]
 8005b88:	f000 fd26 	bl	80065d8 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005b8c:	6838      	ldr	r0, [r7, #0]
 8005b8e:	f000 fda3 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e080      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 8005b96:	f107 0314 	add.w	r3, r7, #20
 8005b9a:	4949      	ldr	r1, [pc, #292]	@ (8005cc0 <VibeCheckSensorCMD_Execute+0x320>)
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fa fbb7 	bl	8000310 <strcmp>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d176      	bne.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StartGyro(sensor, channel);
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4619      	mov	r1, r3
 8005bac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005bae:	f7fe ff9d 	bl	8004aec <VibeCheckSensor_StartGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005bb2:	493d      	ldr	r1, [pc, #244]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005bb4:	6838      	ldr	r0, [r7, #0]
 8005bb6:	f000 fd0f 	bl	80065d8 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005bba:	6838      	ldr	r0, [r7, #0]
 8005bbc:	f000 fd8c 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e069      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "stop"))
 8005bc4:	f107 0314 	add.w	r3, r7, #20
 8005bc8:	4938      	ldr	r1, [pc, #224]	@ (8005cac <VibeCheckSensorCMD_Execute+0x30c>)
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fa fba0 	bl	8000310 <strcmp>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d137      	bne.n	8005c46 <VibeCheckSensorCMD_Execute+0x2a6>
				{
					if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	2240      	movs	r2, #64	@ 0x40
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6838      	ldr	r0, [r7, #0]
 8005be0:	f000 fbda 	bl	8006398 <VibeCheckShell_GetNextString>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d055      	beq.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
					{
						if (!strcmp(str, "accel"))
 8005bea:	f107 0314 	add.w	r3, r7, #20
 8005bee:	4933      	ldr	r1, [pc, #204]	@ (8005cbc <VibeCheckSensorCMD_Execute+0x31c>)
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fa fb8d 	bl	8000310 <strcmp>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10d      	bne.n	8005c18 <VibeCheckSensorCMD_Execute+0x278>
						{
							VibeCheckSensor_StopAccel(sensor, channel);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c02:	f7fe ff2c 	bl	8004a5e <VibeCheckSensor_StopAccel>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005c06:	4928      	ldr	r1, [pc, #160]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005c08:	6838      	ldr	r0, [r7, #0]
 8005c0a:	f000 fce5 	bl	80065d8 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005c0e:	6838      	ldr	r0, [r7, #0]
 8005c10:	f000 fd62 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e03f      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
						}
						else if (!strcmp(str, "gyro"))
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	4928      	ldr	r1, [pc, #160]	@ (8005cc0 <VibeCheckSensorCMD_Execute+0x320>)
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fb76 	bl	8000310 <strcmp>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d135      	bne.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
						{
							VibeCheckSensor_StopGyro(sensor, channel);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c30:	f7fe ffa3 	bl	8004b7a <VibeCheckSensor_StopGyro>
							VibeCheckShell_PutOutputString(shell, "ack");
 8005c34:	491c      	ldr	r1, [pc, #112]	@ (8005ca8 <VibeCheckSensorCMD_Execute+0x308>)
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f000 fcce 	bl	80065d8 <VibeCheckShell_PutOutputString>
							VibeCheckShell_PutOutputDelimiter(shell);
 8005c3c:	6838      	ldr	r0, [r7, #0]
 8005c3e:	f000 fd4b 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
							return 1;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e028      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
						}
					}
				}
				else if (!strcmp(str, "set"))
 8005c46:	f107 0314 	add.w	r3, r7, #20
 8005c4a:	4919      	ldr	r1, [pc, #100]	@ (8005cb0 <VibeCheckSensorCMD_Execute+0x310>)
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fb5f 	bl	8000310 <strcmp>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <VibeCheckSensorCMD_Execute+0x2ce>
				{
					if (VibeCheckSensorCMD_Set(sensor, shell, channel))
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c60:	f7ff fc70 	bl	8005544 <VibeCheckSensorCMD_Set>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d015      	beq.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e014      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
					}
				}
				else if (!strcmp(str, "get"))
 8005c6e:	f107 0314 	add.w	r3, r7, #20
 8005c72:	4911      	ldr	r1, [pc, #68]	@ (8005cb8 <VibeCheckSensorCMD_Execute+0x318>)
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fa fb4b 	bl	8000310 <strcmp>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
				{
					if (VibeCheckSensorCMD_Get(sensor, shell, channel))
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005c88:	f7ff fd6a 	bl	8005760 <VibeCheckSensorCMD_Get>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <VibeCheckSensorCMD_Execute+0x2f6>
					{
						return 1;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <VibeCheckSensorCMD_Execute+0x2f8>
				}
			}
		}
	}

	return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3758      	adds	r7, #88	@ 0x58
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0801e238 	.word	0x0801e238
 8005ca4:	0801e244 	.word	0x0801e244
 8005ca8:	0801e210 	.word	0x0801e210
 8005cac:	0801e24c 	.word	0x0801e24c
 8005cb0:	0801e254 	.word	0x0801e254
 8005cb4:	0801e258 	.word	0x0801e258
 8005cb8:	0801e264 	.word	0x0801e264
 8005cbc:	0801e204 	.word	0x0801e204
 8005cc0:	0801e21c 	.word	0x0801e21c

08005cc4 <VibeCheckSensorSender_Data_Execute>:


uint32_t VibeCheckSensorSender_Data_Execute(void* obj, VibeCheckShell* shell)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

	volatile VibeCheckSensor_Data* data;
	if (VibeCheckSensor_GetDataReady(sensor, &data))
 8005cd2:	f107 030c 	add.w	r3, r7, #12
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6938      	ldr	r0, [r7, #16]
 8005cda:	f7ff fb34 	bl	8005346 <VibeCheckSensor_GetDataReady>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d059      	beq.n	8005d98 <VibeCheckSensorSender_Data_Execute+0xd4>
	{
		VibeCheckShell_PutOutputString(shell, "data");
 8005ce4:	492f      	ldr	r1, [pc, #188]	@ (8005da4 <VibeCheckSensorSender_Data_Execute+0xe0>)
 8005ce6:	6838      	ldr	r0, [r7, #0]
 8005ce8:	f000 fc76 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005cec:	6838      	ldr	r0, [r7, #0]
 8005cee:	f000 fce5 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, sensor->data_packet_size);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6838      	ldr	r0, [r7, #0]
 8005d00:	f000 fca6 	bl	8006650 <VibeCheckShell_PutOutputInt>

		uint32_t data_written = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]

		while (data_written < sensor->data_packet_size)
 8005d08:	e039      	b.n	8005d7e <VibeCheckSensorSender_Data_Execute+0xba>
		{
			VibeCheckShell_PutOutputSeparator(shell);
 8005d0a:	6838      	ldr	r0, [r7, #0]
 8005d0c:	f000 fcd6 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->id);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	6838      	ldr	r0, [r7, #0]
 8005d1a:	f000 fc99 	bl	8006650 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f000 fccc 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputInt(shell, data->time);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6838      	ldr	r0, [r7, #0]
 8005d2c:	f000 fc90 	bl	8006650 <VibeCheckShell_PutOutputInt>
			VibeCheckShell_PutOutputSeparator(shell);
 8005d30:	6838      	ldr	r0, [r7, #0]
 8005d32:	f000 fcc3 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->x);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d40:	6838      	ldr	r0, [r7, #0]
 8005d42:	f000 fc9d 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005d46:	6838      	ldr	r0, [r7, #0]
 8005d48:	f000 fcb8 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->y);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d52:	eeb0 0a67 	vmov.f32	s0, s15
 8005d56:	6838      	ldr	r0, [r7, #0]
 8005d58:	f000 fc92 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputSeparator(shell);
 8005d5c:	6838      	ldr	r0, [r7, #0]
 8005d5e:	f000 fcad 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, data->z);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d68:	eeb0 0a67 	vmov.f32	s0, s15
 8005d6c:	6838      	ldr	r0, [r7, #0]
 8005d6e:	f000 fc87 	bl	8006680 <VibeCheckShell_PutOutputFloat>


			data++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3314      	adds	r3, #20
 8005d76:	60fb      	str	r3, [r7, #12]
			data_written++;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
		while (data_written < sensor->data_packet_size)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3bd      	bcc.n	8005d0a <VibeCheckSensorSender_Data_Execute+0x46>
		}

		VibeCheckShell_PutOutputDelimiter(shell);
 8005d8e:	6838      	ldr	r0, [r7, #0]
 8005d90:	f000 fca2 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>

		return 1;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <VibeCheckSensorSender_Data_Execute+0xd6>
	}

	return 0;
 8005d98:	2300      	movs	r3, #0

}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	0801e268 	.word	0x0801e268

08005da8 <VibeCheckSensorSender_Status_Execute>:


uint32_t VibeCheckSensorSender_Status_Execute(void* obj, VibeCheckShell* shell)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	VibeCheckSensor* sensor = (VibeCheckSensor*)obj;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	617b      	str	r3, [r7, #20]

	uint32_t channel, is_connected;
	if (VibeCheckSensor_ConnectionChanged(sensor, &channel, &is_connected))
 8005db6:	f107 020c 	add.w	r2, r7, #12
 8005dba:	f107 0310 	add.w	r3, r7, #16
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6978      	ldr	r0, [r7, #20]
 8005dc2:	f7ff f93b 	bl	800503c <VibeCheckSensor_ConnectionChanged>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d026      	beq.n	8005e1a <VibeCheckSensorSender_Status_Execute+0x72>
	{
		VibeCheckShell_PutOutputString(shell, "event");
 8005dcc:	4915      	ldr	r1, [pc, #84]	@ (8005e24 <VibeCheckSensorSender_Status_Execute+0x7c>)
 8005dce:	6838      	ldr	r0, [r7, #0]
 8005dd0:	f000 fc02 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005dd4:	6838      	ldr	r0, [r7, #0]
 8005dd6:	f000 fc71 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputString(shell, "sensor");
 8005dda:	4913      	ldr	r1, [pc, #76]	@ (8005e28 <VibeCheckSensorSender_Status_Execute+0x80>)
 8005ddc:	6838      	ldr	r0, [r7, #0]
 8005dde:	f000 fbfb 	bl	80065d8 <VibeCheckShell_PutOutputString>
		VibeCheckShell_PutOutputSeparator(shell);
 8005de2:	6838      	ldr	r0, [r7, #0]
 8005de4:	f000 fc6a 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
		VibeCheckShell_PutOutputInt(shell, channel);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4619      	mov	r1, r3
 8005dec:	6838      	ldr	r0, [r7, #0]
 8005dee:	f000 fc2f 	bl	8006650 <VibeCheckShell_PutOutputInt>
		VibeCheckShell_PutOutputSeparator(shell);
 8005df2:	6838      	ldr	r0, [r7, #0]
 8005df4:	f000 fc62 	bl	80066bc <VibeCheckShell_PutOutputSeparator>

		if (is_connected)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <VibeCheckSensorSender_Status_Execute+0x60>
			VibeCheckShell_PutOutputString(shell, "connected");
 8005dfe:	490b      	ldr	r1, [pc, #44]	@ (8005e2c <VibeCheckSensorSender_Status_Execute+0x84>)
 8005e00:	6838      	ldr	r0, [r7, #0]
 8005e02:	f000 fbe9 	bl	80065d8 <VibeCheckShell_PutOutputString>
 8005e06:	e003      	b.n	8005e10 <VibeCheckSensorSender_Status_Execute+0x68>
		else
			VibeCheckShell_PutOutputString(shell, "disconnected");
 8005e08:	4909      	ldr	r1, [pc, #36]	@ (8005e30 <VibeCheckSensorSender_Status_Execute+0x88>)
 8005e0a:	6838      	ldr	r0, [r7, #0]
 8005e0c:	f000 fbe4 	bl	80065d8 <VibeCheckShell_PutOutputString>

		VibeCheckShell_PutOutputDelimiter(shell);
 8005e10:	6838      	ldr	r0, [r7, #0]
 8005e12:	f000 fc61 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
		return 1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <VibeCheckSensorSender_Status_Execute+0x74>
	}

	return 0;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	0801e270 	.word	0x0801e270
 8005e28:	0801e278 	.word	0x0801e278
 8005e2c:	0801e22c 	.word	0x0801e22c
 8005e30:	0801e280 	.word	0x0801e280

08005e34 <VibeCheckShell_Init>:

#include "vibecheck_shell.h"


void VibeCheckShell_Init(VibeCheckShell* shell)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	shell->input_head = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6013      	str	r3, [r2, #0]
	shell->input_tail = 0;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2300      	movs	r3, #0
 8005e52:	6053      	str	r3, [r2, #4]
	shell->input_count = 0;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6093      	str	r3, [r2, #8]
	shell->input_delimiter_count = 0;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005e66:	461a      	mov	r2, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60d3      	str	r3, [r2, #12]

	shell->output_head = 0;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e72:	461a      	mov	r2, r3
 8005e74:	2300      	movs	r3, #0
 8005e76:	6113      	str	r3, [r2, #16]
	shell->output_tail = 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2300      	movs	r3, #0
 8005e82:	6153      	str	r3, [r2, #20]
	shell->output_end = 0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6193      	str	r3, [r2, #24]
	shell->output_count = 0;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8005e96:	461a      	mov	r2, r3
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61d3      	str	r3, [r2, #28]

	shell->ih_count = 0;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
	shell->oh_count = 0;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <VibeCheckShell_Update>:

VibeCheckShell_Status VibeCheckShell_Update(VibeCheckShell* shell)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b099      	sub	sp, #100	@ 0x64
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

	VibeCheckShell_Status status = {
 8005ecc:	2300      	movs	r3, #0
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
			.ibuf_status = VC_SHELL_INPUT_BUFFER_OK,
			.obuf_status = VC_SHELL_OUTPUT_BUFFER_OK
	};

	/* check if character buffer overflow */
	if (shell->input_count >= VC_SHELL_IO_BUF_LEN)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005edc:	d302      	bcc.n	8005ee4 <VibeCheckShell_Update+0x20>
		status.ibuf_status = VC_SHELL_INPUT_BUFFER_OVERFLOW;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e


	/* handle the inputs */
	if (shell->input_delimiter_count)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8099 	beq.w	8006024 <VibeCheckShell_Update+0x160>
		status.ihandl_status = VC_SHELL_INPUT_PROCESSED;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	while (shell->input_delimiter_count)
 8005ef8:	e094      	b.n	8006024 <VibeCheckShell_Update+0x160>
	{
		/* look for a handler */
		char ih_name[VC_SHELL_MAX_TOKEN_LEN];
		if (VibeCheckShell_GetNextString(shell, ih_name, VC_SHELL_MAX_TOKEN_LEN))
 8005efa:	f107 030c 	add.w	r3, r7, #12
 8005efe:	2240      	movs	r2, #64	@ 0x40
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa48 	bl	8006398 <VibeCheckShell_GetNextString>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04a      	beq.n	8005fa4 <VibeCheckShell_Update+0xe0>
		{
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f12:	e03e      	b.n	8005f92 <VibeCheckShell_Update+0xce>
			{
				if (!strcmp(shell->input_handlers[i].name, ih_name))
 8005f14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4a74      	ldr	r2, [pc, #464]	@ (80060f0 <VibeCheckShell_Update+0x22c>)
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4413      	add	r3, r2
 8005f26:	f107 020c 	add.w	r2, r7, #12
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa f9ef 	bl	8000310 <strcmp>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11d      	bne.n	8005f74 <VibeCheckShell_Update+0xb0>
				{
					/* found a handler for this input */
					if (!shell->input_handlers[i].execute(shell->input_handlers[i].obj, shell))
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	18ca      	adds	r2, r1, r3
 8005f46:	4b6b      	ldr	r3, [pc, #428]	@ (80060f4 <VibeCheckShell_Update+0x230>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	18ca      	adds	r2, r1, r3
 8005f5a:	4b67      	ldr	r3, [pc, #412]	@ (80060f8 <VibeCheckShell_Update+0x234>)
 8005f5c:	4413      	add	r3, r2
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	47a0      	blx	r4
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11f      	bne.n	8005fac <VibeCheckShell_Update+0xe8>
						status.ihandl_status = VC_SHELL_INPUT_ERROR_EXECUTING;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
					break;
 8005f72:	e01b      	b.n	8005fac <VibeCheckShell_Update+0xe8>
				}

				if (i == shell->ih_count - 1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005f7a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d102      	bne.n	8005f8c <VibeCheckShell_Update+0xc8>
					status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005f86:	2302      	movs	r3, #2
 8005f88:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			for (uint32_t i = 0; i < shell->ih_count; i++)
 8005f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f8e:	3301      	adds	r3, #1
 8005f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8005f98:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005f9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d3b8      	bcc.n	8005f14 <VibeCheckShell_Update+0x50>
 8005fa2:	e004      	b.n	8005fae <VibeCheckShell_Update+0xea>
			}
		}
		else
		{
			/* couldn't get a string from the input for handler name */
			status.ihandl_status = VC_SHELL_INPUT_ERROR_NO_HANDLER;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8005faa:	e000      	b.n	8005fae <VibeCheckShell_Update+0xea>
					break;
 8005fac:	bf00      	nop
		}

		/* clean up the remainder of the previous message */
		while (1)
		{
			char x = shell->input[shell->input_tail];
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	5cd3      	ldrb	r3, [r2, r3]
 8005fba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			shell->input_count--;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005fce:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8005fe0:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fee:	d105      	bne.n	8005ffc <VibeCheckShell_Update+0x138>
				shell->input_tail = 0;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6053      	str	r3, [r2, #4]

			if(strchr(VC_SHELL_DELIMITER, x) != NULL)
 8005ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006000:	4619      	mov	r1, r3
 8006002:	483e      	ldr	r0, [pc, #248]	@ (80060fc <VibeCheckShell_Update+0x238>)
 8006004:	f014 fcd5 	bl	801a9b2 <strchr>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d100      	bne.n	8006010 <VibeCheckShell_Update+0x14c>
		{
 800600e:	e7ce      	b.n	8005fae <VibeCheckShell_Update+0xea>
				break;  /* found the delimiter */
 8006010:	bf00      	nop
		}


		shell->input_delimiter_count--;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	3b01      	subs	r3, #1
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8006022:	60d3      	str	r3, [r2, #12]
	while (shell->input_delimiter_count)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af64 	bne.w	8005efa <VibeCheckShell_Update+0x36>
	}


	/* handle the outputs */
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006036:	e032      	b.n	800609e <VibeCheckShell_Update+0x1da>
	{
		if (shell->output_handlers[i].execute(shell->output_handlers[i].obj, shell))
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800603c:	f242 2344 	movw	r3, #8772	@ 0x2244
 8006040:	440b      	add	r3, r1
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4413      	add	r3, r2
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800604c:	f242 2344 	movw	r3, #8772	@ 0x2244
 8006050:	4403      	add	r3, r0
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	440b      	add	r3, r1
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	4790      	blx	r2
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d019      	beq.n	8006098 <VibeCheckShell_Update+0x1d4>
		{
			status.ohandl_status = VC_SHELL_OUTPUT_PROCESSED;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			/* wrap the output buffer if necessary so that an output packet doesn't get split up */
			if (VC_SHELL_IO_BUF_LEN - shell->output_head < VC_SHELL_MAX_OUTPUT_PACKET_LEN)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607a:	d20d      	bcs.n	8006098 <VibeCheckShell_Update+0x1d4>
			{
				shell->output_end = shell->output_head;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800608a:	6193      	str	r3, [r2, #24]
				shell->output_head = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6113      	str	r3, [r2, #16]
	for (uint32_t i = 0; i < shell->oh_count; i++)
 8006098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800609a:	3301      	adds	r3, #1
 800609c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80060a4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 80060a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d3c4      	bcc.n	8006038 <VibeCheckShell_Update+0x174>
			}
		}
	}

	/* check if character buffer overflow */
	if (shell->output_count >= VC_SHELL_IO_BUF_LEN)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d302      	bcc.n	80060c2 <VibeCheckShell_Update+0x1fe>
		status.obuf_status = VC_SHELL_OUTPUT_BUFFER_OVERFLOW;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	return status;
 80060c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c6:	2300      	movs	r3, #0
 80060c8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80060cc:	f362 0307 	bfi	r3, r2, #0, #8
 80060d0:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 80060d4:	f362 230f 	bfi	r3, r2, #8, #8
 80060d8:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80060dc:	f362 4317 	bfi	r3, r2, #16, #8
 80060e0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80060e4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3764      	adds	r7, #100	@ 0x64
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd90      	pop	{r4, r7, pc}
 80060f0:	00010020 	.word	0x00010020
 80060f4:	00010060 	.word	0x00010060
 80060f8:	00010064 	.word	0x00010064
 80060fc:	0801e290 	.word	0x0801e290

08006100 <VibeCheckShell_RegisterInputHandler>:

void VibeCheckShell_RegisterInputHandler(VibeCheckShell* shell, VibeCheckShell_InputHandler handler)
{
 8006100:	b084      	sub	sp, #16
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	f107 0014 	add.w	r0, r7, #20
 800610e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (shell->ih_count < VC_SHELL_MAX_NUM_HANDLERS)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006118:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800611c:	2b3f      	cmp	r3, #63	@ 0x3f
 800611e:	d819      	bhi.n	8006154 <VibeCheckShell_RegisterInputHandler+0x54>
		shell->input_handlers[shell->ih_count++] = handler;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8006126:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 800612a:	1c53      	adds	r3, r2, #1
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8006132:	f8c1 3220 	str.w	r3, [r1, #544]	@ 0x220
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	18ca      	adds	r2, r1, r3
 8006142:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <VibeCheckShell_RegisterInputHandler+0x64>)
 8006144:	4413      	add	r3, r2
 8006146:	4618      	mov	r0, r3
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	2248      	movs	r2, #72	@ 0x48
 800614e:	4619      	mov	r1, r3
 8006150:	f014 fcc5 	bl	801aade <memcpy>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800615e:	b004      	add	sp, #16
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	00010020 	.word	0x00010020

08006168 <VibeCheckShell_RegisterOutputHandler>:

void VibeCheckShell_RegisterOutputHandler(VibeCheckShell* shell, VibeCheckShell_OutputHandler handler)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	e883 0006 	stmia.w	r3, {r1, r2}
	if (shell->oh_count < VC_SHELL_MAX_NUM_HANDLERS)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800617c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 8006180:	2b3f      	cmp	r3, #63	@ 0x3f
 8006182:	d816      	bhi.n	80061b2 <VibeCheckShell_RegisterOutputHandler+0x4a>
		shell->output_handlers[shell->oh_count++] = handler;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800618a:	f8d3 2424 	ldr.w	r2, [r3, #1060]	@ 0x424
 800618e:	1c53      	adds	r3, r2, #1
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	f501 3188 	add.w	r1, r1, #69632	@ 0x11000
 8006196:	f8c1 3424 	str.w	r3, [r1, #1060]	@ 0x424
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	f242 2344 	movw	r3, #8772	@ 0x2244
 80061a0:	4413      	add	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	440b      	add	r3, r1
 80061a6:	3304      	adds	r3, #4
 80061a8:	1d3a      	adds	r2, r7, #4
 80061aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061ae:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <VibeCheckShell_PutInput>:

void VibeCheckShell_PutInput(VibeCheckShell* shell, char* input, uint32_t input_max_len)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
	/* add to the input buffer */
	for (uint32_t i = 0; i < input_max_len; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e03e      	b.n	8006250 <VibeCheckShell_PutInput+0x90>
	{
		if (*input)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03f      	beq.n	800625a <VibeCheckShell_PutInput+0x9a>
		{
			shell->input[shell->input_head++] = *input;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80061ea:	600a      	str	r2, [r1, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	7811      	ldrb	r1, [r2, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	54d1      	strb	r1, [r2, r3]
			if (shell->input_head == VC_SHELL_IO_BUF_LEN)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006200:	d105      	bne.n	800620e <VibeCheckShell_PutInput+0x4e>
					shell->input_head = 0;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006208:	461a      	mov	r2, r3
 800620a:	2300      	movs	r3, #0
 800620c:	6013      	str	r3, [r2, #0]
			shell->input_count++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	3301      	adds	r3, #1
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 800621e:	6093      	str	r3, [r2, #8]

			if (strchr(VC_SHELL_DELIMITER, *input) != NULL)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	480f      	ldr	r0, [pc, #60]	@ (8006264 <VibeCheckShell_PutInput+0xa4>)
 8006228:	f014 fbc3 	bl	801a9b2 <strchr>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <VibeCheckShell_PutInput+0x84>
				shell->input_delimiter_count++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	3301      	adds	r3, #1
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8006242:	60d3      	str	r3, [r2, #12]

			input++;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < input_max_len; i++)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	3301      	adds	r3, #1
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d3bc      	bcc.n	80061d2 <VibeCheckShell_PutInput+0x12>
		}
		else
			break;
	}
}
 8006258:	e000      	b.n	800625c <VibeCheckShell_PutInput+0x9c>
			break;
 800625a:	bf00      	nop
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	0801e290 	.word	0x0801e290

08006268 <VibeCheckShell_GetOutput>:


uint32_t VibeCheckShell_GetOutput(VibeCheckShell* shell, char** output, uint32_t* len)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
	/* returns true if there is stuff in the output buffer we haven't yet sent */
	uint32_t head = shell->output_head;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	617b      	str	r3, [r7, #20]
	uint32_t tail = shell->output_tail;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	613b      	str	r3, [r7, #16]

	if (head == tail)
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	429a      	cmp	r2, r3
 800628e:	d101      	bne.n	8006294 <VibeCheckShell_GetOutput+0x2c>
		return 0;
 8006290:	2300      	movs	r3, #0
 8006292:	e038      	b.n	8006306 <VibeCheckShell_GetOutput+0x9e>

	if (head > tail)
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	429a      	cmp	r2, r3
 800629a:	d90e      	bls.n	80062ba <VibeCheckShell_GetOutput+0x52>
	{
		/* the output doesn't wrap so send it 'normally' */
		*output = &shell->output[tail];
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	f248 0310 	movw	r3, #32784	@ 0x8010
 80062a2:	4413      	add	r3, r2
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	441a      	add	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	601a      	str	r2, [r3, #0]
		*len = head - tail;
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
		return 1;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e025      	b.n	8006306 <VibeCheckShell_GetOutput+0x9e>
	}
	else
	{
		if (shell->output_end)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d011      	beq.n	80062ea <VibeCheckShell_GetOutput+0x82>
		{
			/* the output would have wrapped but we caught it - only send up to the delimited end of the output */
			*output = &shell->output[tail];
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	f248 0310 	movw	r3, #32784	@ 0x8010
 80062cc:	4413      	add	r3, r2
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	441a      	add	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	601a      	str	r2, [r3, #0]
			*len = shell->output_end - tail;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad2      	subs	r2, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
			return 1;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e00d      	b.n	8006306 <VibeCheckShell_GetOutput+0x9e>
		}
		else
		{
			/* the output wraps: only return up to the end of the buffer region so our output is contiguous in memory */
			*output = &shell->output[tail];
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	f248 0310 	movw	r3, #32784	@ 0x8010
 80062f0:	4413      	add	r3, r2
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	441a      	add	r2, r3
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	601a      	str	r2, [r3, #0]
			*len = VC_SHELL_IO_BUF_LEN - tail;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f5c3 4200 	rsb	r2, r3, #32768	@ 0x8000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
			return 1;
 8006304:	2301      	movs	r3, #1
		}
	}
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <VibeCheckShell_UpdateOutputBuffer>:


void VibeCheckShell_UpdateOutputBuffer(VibeCheckShell* shell, uint32_t len)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
	/* length argument tells how many characters we successfully transmitted */

	/* update the tail of the output buffer now that we have confirmed transmission */
	shell->output_count -= len;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800632e:	61d3      	str	r3, [r2, #28]
	shell->output_tail += len;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	4413      	add	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 8006342:	6153      	str	r3, [r2, #20]

	if (shell->output_end)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <VibeCheckShell_UpdateOutputBuffer+0x58>
	{
		/* sent a packet which ends in the wrapping boundary region */
		shell->output_end = 0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006356:	461a      	mov	r2, r3
 8006358:	2300      	movs	r3, #0
 800635a:	6193      	str	r3, [r2, #24]
		shell->output_tail = 0;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006362:	461a      	mov	r2, r3
 8006364:	2300      	movs	r3, #0
 8006366:	6153      	str	r3, [r2, #20]
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
	}


}
 8006368:	e010      	b.n	800638c <VibeCheckShell_UpdateOutputBuffer+0x7a>
		if (shell->output_tail >= VC_SHELL_IO_BUF_LEN)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006376:	d309      	bcc.n	800638c <VibeCheckShell_UpdateOutputBuffer+0x7a>
				shell->output_tail -= VC_SHELL_IO_BUF_LEN;  /* we tried to send a message that wrapped because it was bigger than the assumed maximum packet length */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800638a:	6153      	str	r3, [r2, #20]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <VibeCheckShell_GetNextString>:


/* these return true if they successfully get the next token */
uint32_t VibeCheckShell_GetNextString(VibeCheckShell* shell, char* next, uint32_t max_len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]

	for (uint32_t i = 0; i < max_len; )
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e05f      	b.n	800646a <VibeCheckShell_GetNextString+0xd2>
	{

		char x = shell->input[shell->input_tail];
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	5cd3      	ldrb	r3, [r2, r3]
 80063b6:	74fb      	strb	r3, [r7, #19]

		if (strchr(VC_SHELL_DELIMITER, x) != NULL)
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	4619      	mov	r1, r3
 80063bc:	482f      	ldr	r0, [pc, #188]	@ (800647c <VibeCheckShell_GetNextString+0xe4>)
 80063be:	f014 faf8 	bl	801a9b2 <strchr>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <VibeCheckShell_GetNextString+0x44>
		{
			/* this is a delimiter */
			if (i)  /* we have something in the token so return it */
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <VibeCheckShell_GetNextString+0x40>
			{
				*next = '\0';
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]
				return 1;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e04d      	b.n	8006474 <VibeCheckShell_GetNextString+0xdc>
			}
			else
				return 0;  /* don't go any further than the delimiter */
 80063d8:	2300      	movs	r3, #0
 80063da:	e04b      	b.n	8006474 <VibeCheckShell_GetNextString+0xdc>
		}
		else
		{
			shell->input_count--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80063ec:	6093      	str	r3, [r2, #8]
			shell->input_tail++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80063fe:	6053      	str	r3, [r2, #4]
			if (shell->input_tail == VC_SHELL_IO_BUF_LEN)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640c:	d105      	bne.n	800641a <VibeCheckShell_GetNextString+0x82>
				shell->input_tail = 0;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006414:	461a      	mov	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	6053      	str	r3, [r2, #4]

			if (strchr(VC_SHELL_INPUT_SEPARATORS, x) != NULL)
 800641a:	7cfb      	ldrb	r3, [r7, #19]
 800641c:	4619      	mov	r1, r3
 800641e:	4818      	ldr	r0, [pc, #96]	@ (8006480 <VibeCheckShell_GetNextString+0xe8>)
 8006420:	f014 fac7 	bl	801a9b2 <strchr>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d007      	beq.n	800643a <VibeCheckShell_GetNextString+0xa2>
			{
				/* this is a separator */
				if (i) /* if we have something in the token return it, otherwise just continue in order to skip leading separators */
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <VibeCheckShell_GetNextString+0xd2>
				{
					*next = '\0';
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
					return 1;
 8006436:	2301      	movs	r3, #1
 8006438:	e01c      	b.n	8006474 <VibeCheckShell_GetNextString+0xdc>
				}
			}
			else
			{
				/* this is a character */
				*(next++) = tolower(x);  /* turn to all lower case letters */
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	74bb      	strb	r3, [r7, #18]
 800643e:	7cbb      	ldrb	r3, [r7, #18]
 8006440:	3301      	adds	r3, #1
 8006442:	4a10      	ldr	r2, [pc, #64]	@ (8006484 <VibeCheckShell_GetNextString+0xec>)
 8006444:	4413      	add	r3, r2
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d103      	bne.n	8006458 <VibeCheckShell_GetNextString+0xc0>
 8006450:	7cbb      	ldrb	r3, [r7, #18]
 8006452:	f103 0220 	add.w	r2, r3, #32
 8006456:	e000      	b.n	800645a <VibeCheckShell_GetNextString+0xc2>
 8006458:	7cba      	ldrb	r2, [r7, #18]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
				i++;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < max_len; )
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	429a      	cmp	r2, r3
 8006470:	d39b      	bcc.n	80063aa <VibeCheckShell_GetNextString+0x12>
			}
		}
	}

	return 0;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	0801e290 	.word	0x0801e290
 8006480:	0801e294 	.word	0x0801e294
 8006484:	0801ee90 	.word	0x0801ee90

08006488 <VibeCheckShell_GetNextInt>:


uint32_t VibeCheckShell_GetNextInt(VibeCheckShell* shell, int32_t* next)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b092      	sub	sp, #72	@ 0x48
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	2240      	movs	r2, #64	@ 0x40
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ff7c 	bl	8006398 <VibeCheckShell_GetNextString>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <VibeCheckShell_GetNextInt+0x2e>
	{
		return VibeCheckShell_TurnToInt(str, next);
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 f823 	bl	80064f8 <VibeCheckShell_TurnToInt>
 80064b2:	4603      	mov	r3, r0
 80064b4:	e000      	b.n	80064b8 <VibeCheckShell_GetNextInt+0x30>
	}

	return 0;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3748      	adds	r7, #72	@ 0x48
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <VibeCheckShell_GetNextFloat>:


uint32_t VibeCheckShell_GetNextFloat(VibeCheckShell* shell, float* next)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b092      	sub	sp, #72	@ 0x48
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80064ca:	f107 0308 	add.w	r3, r7, #8
 80064ce:	2240      	movs	r2, #64	@ 0x40
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ff60 	bl	8006398 <VibeCheckShell_GetNextString>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <VibeCheckShell_GetNextFloat+0x2e>
	{
		return VibeCheckShell_TurnToFloat(str, next);
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f83d 	bl	8006564 <VibeCheckShell_TurnToFloat>
 80064ea:	4603      	mov	r3, r0
 80064ec:	e000      	b.n	80064f0 <VibeCheckShell_GetNextFloat+0x30>
	}

	return 0;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3748      	adds	r7, #72	@ 0x48
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <VibeCheckShell_TurnToInt>:

/* if the type of the next token is not known, get it as a string and then try to convert it to numeric using these functions */
uint32_t VibeCheckShell_TurnToInt(char* str, int32_t* next)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	char valid[] = "-0123456789";
 8006502:	4a17      	ldr	r2, [pc, #92]	@ (8006560 <VibeCheckShell_TurnToInt+0x68>)
 8006504:	f107 0308 	add.w	r3, r7, #8
 8006508:	ca07      	ldmia	r2, {r0, r1, r2}
 800650a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < strlen(str); i++)
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	e012      	b.n	800653a <VibeCheckShell_TurnToInt+0x42>
		if (strchr(valid, str[i]) == NULL)
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f014 fa44 	bl	801a9b2 <strchr>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <VibeCheckShell_TurnToInt+0x3c>
			return 0;  /* next token contains non-numeric characters */
 8006530:	2300      	movs	r3, #0
 8006532:	e010      	b.n	8006556 <VibeCheckShell_TurnToInt+0x5e>
	for (uint32_t i = 0; i < strlen(str); i++)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	3301      	adds	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7f9 ff48 	bl	80003d0 <strlen>
 8006540:	4602      	mov	r2, r0
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4293      	cmp	r3, r2
 8006546:	d3e5      	bcc.n	8006514 <VibeCheckShell_TurnToInt+0x1c>
	*next = atoi(str);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f012 fe88 	bl	801925e <atoi>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	601a      	str	r2, [r3, #0]
	return 1;
 8006554:	2301      	movs	r3, #1
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	0801e298 	.word	0x0801e298

08006564 <VibeCheckShell_TurnToFloat>:

uint32_t VibeCheckShell_TurnToFloat(char* str, float* next)
{
 8006564:	b590      	push	{r4, r7, lr}
 8006566:	b089      	sub	sp, #36	@ 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	char valid[] = ".-0123456789";
 800656e:	4b19      	ldr	r3, [pc, #100]	@ (80065d4 <VibeCheckShell_TurnToFloat+0x70>)
 8006570:	f107 040c 	add.w	r4, r7, #12
 8006574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006576:	c407      	stmia	r4!, {r0, r1, r2}
 8006578:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < strlen(str); i++)
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e012      	b.n	80065a6 <VibeCheckShell_TurnToFloat+0x42>
		if (strchr(valid, str[i]) == NULL)
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	f107 030c 	add.w	r3, r7, #12
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f014 fa0e 	bl	801a9b2 <strchr>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <VibeCheckShell_TurnToFloat+0x3c>
			return 0;  /* next token contains non-numeric characters */
 800659c:	2300      	movs	r3, #0
 800659e:	e014      	b.n	80065ca <VibeCheckShell_TurnToFloat+0x66>
	for (uint32_t i = 0; i < strlen(str); i++)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7f9 ff12 	bl	80003d0 <strlen>
 80065ac:	4602      	mov	r2, r0
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d3e5      	bcc.n	8006580 <VibeCheckShell_TurnToFloat+0x1c>
	*next = atof(str);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f012 fe4f 	bl	8019258 <atof>
 80065ba:	eeb0 7b40 	vmov.f64	d7, d0
 80065be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 80065c8:	2301      	movs	r3, #1
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3724      	adds	r7, #36	@ 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd90      	pop	{r4, r7, pc}
 80065d2:	bf00      	nop
 80065d4:	0801e2a4 	.word	0x0801e2a4

080065d8 <VibeCheckShell_PutOutputString>:



/* add things to the output */
void VibeCheckShell_PutOutputString(VibeCheckShell* shell, char* str)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
	while (*str)
 80065e2:	e029      	b.n	8006638 <VibeCheckShell_PutOutputString+0x60>
	{
		shell->output[shell->output_head++] = *(str++);
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	1c53      	adds	r3, r2, #1
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	1c59      	adds	r1, r3, #1
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80065fa:	6101      	str	r1, [r0, #16]
 80065fc:	7811      	ldrb	r1, [r2, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	441a      	add	r2, r3
 8006602:	f248 0310 	movw	r3, #32784	@ 0x8010
 8006606:	4413      	add	r3, r2
 8006608:	460a      	mov	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
		shell->output_count++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	3301      	adds	r3, #1
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800661c:	61d3      	str	r3, [r2, #28]
		if (shell->output_head == VC_SHELL_IO_BUF_LEN)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800662a:	d105      	bne.n	8006638 <VibeCheckShell_PutOutputString+0x60>
			shell->output_head = 0;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006632:	461a      	mov	r2, r3
 8006634:	2300      	movs	r3, #0
 8006636:	6113      	str	r3, [r2, #16]
	while (*str)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1d1      	bne.n	80065e4 <VibeCheckShell_PutOutputString+0xc>
	}
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <VibeCheckShell_PutOutputInt>:

void VibeCheckShell_PutOutputInt(VibeCheckShell* shell, uint32_t val)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b092      	sub	sp, #72	@ 0x48
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%ld", val);
 800665a:	f107 0308 	add.w	r3, r7, #8
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4906      	ldr	r1, [pc, #24]	@ (800667c <VibeCheckShell_PutOutputInt+0x2c>)
 8006662:	4618      	mov	r0, r3
 8006664:	f014 f93a 	bl	801a8dc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 8006668:	f107 0308 	add.w	r3, r7, #8
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff ffb2 	bl	80065d8 <VibeCheckShell_PutOutputString>
}
 8006674:	bf00      	nop
 8006676:	3748      	adds	r7, #72	@ 0x48
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	0801e2b4 	.word	0x0801e2b4

08006680 <VibeCheckShell_PutOutputFloat>:

void VibeCheckShell_PutOutputFloat(VibeCheckShell* shell, float val)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b092      	sub	sp, #72	@ 0x48
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	ed87 0a00 	vstr	s0, [r7]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	sprintf(str, "%.3f", val);
 800668c:	edd7 7a00 	vldr	s15, [r7]
 8006690:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006694:	f107 0008 	add.w	r0, r7, #8
 8006698:	ec53 2b17 	vmov	r2, r3, d7
 800669c:	4906      	ldr	r1, [pc, #24]	@ (80066b8 <VibeCheckShell_PutOutputFloat+0x38>)
 800669e:	f014 f91d 	bl	801a8dc <siprintf>
	VibeCheckShell_PutOutputString(shell, str);
 80066a2:	f107 0308 	add.w	r3, r7, #8
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff95 	bl	80065d8 <VibeCheckShell_PutOutputString>
}
 80066ae:	bf00      	nop
 80066b0:	3748      	adds	r7, #72	@ 0x48
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	0801e2b8 	.word	0x0801e2b8

080066bc <VibeCheckShell_PutOutputSeparator>:

void VibeCheckShell_PutOutputSeparator(VibeCheckShell* shell)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_OUTPUT_SEPARATOR);
 80066c4:	4903      	ldr	r1, [pc, #12]	@ (80066d4 <VibeCheckShell_PutOutputSeparator+0x18>)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff ff86 	bl	80065d8 <VibeCheckShell_PutOutputString>
}
 80066cc:	bf00      	nop
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	0801e2c0 	.word	0x0801e2c0

080066d8 <VibeCheckShell_PutOutputDelimiter>:

void VibeCheckShell_PutOutputDelimiter(VibeCheckShell* shell)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	VibeCheckShell_PutOutputString(shell, VC_SHELL_DELIMITER);
 80066e0:	4903      	ldr	r1, [pc, #12]	@ (80066f0 <VibeCheckShell_PutOutputDelimiter+0x18>)
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ff78 	bl	80065d8 <VibeCheckShell_PutOutputString>
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	0801e290 	.word	0x0801e290

080066f4 <VibeCheckStrobe_Init>:

#include "vibecheck_strobe.h"


void VibeCheckStrobe_Init(VibeCheckStrobe* strobe, TIM_HandleTypeDef* htim)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	strobe->htim = htim;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	601a      	str	r2, [r3, #0]
	strobe->freq_hz = VC_STROBE_DEFAULT_FREQ_HZ;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a15      	ldr	r2, [pc, #84]	@ (800675c <VibeCheckStrobe_Init+0x68>)
 8006708:	605a      	str	r2, [r3, #4]
	strobe->exposure_ms = VC_STROBE_DEFAULT_EXPOSURE_MS;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006710:	609a      	str	r2, [r3, #8]
	strobe->phase_deg = 0.0f;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	60da      	str	r2, [r3, #12]
	strobe->is_running = 0;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	611a      	str	r2, [r3, #16]
	strobe->is_muted = 0;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	615a      	str	r2, [r3, #20]

	/* set up the timer registers */
	strobe->htim->Instance->PSC = VC_STROBE_TIM_PSC - 1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f640 125f 	movw	r2, #2399	@ 0x95f
 8006730:	629a      	str	r2, [r3, #40]	@ 0x28

	VibeCheckStrobe_SetFrequency(strobe, strobe->freq_hz);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	edd3 7a01 	vldr	s15, [r3, #4]
 8006738:	eeb0 0a67 	vmov.f32	s0, s15
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8af 	bl	80068a0 <VibeCheckStrobe_SetFrequency>
	VibeCheckStrobe_SetExposure(strobe, strobe->exposure_ms);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	edd3 7a02 	vldr	s15, [r3, #8]
 8006748:	eeb0 0a67 	vmov.f32	s0, s15
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f98d 	bl	8006a6c <VibeCheckStrobe_SetExposure>

}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	42700000 	.word	0x42700000

08006760 <VibeCheckStrobe_Start>:

void VibeCheckStrobe_Start(VibeCheckStrobe* strobe)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	/* start the timers with interrupts when period completes */
	strobe->is_running = 1;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	611a      	str	r2, [r3, #16]
	if (!strobe->is_muted)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d116      	bne.n	80067a4 <VibeCheckStrobe_Start+0x44>
	{
		HAL_TIM_Base_Start_IT(strobe->htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f00b fcfc 	bl	8012178 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2100      	movs	r1, #0
 8006786:	4618      	mov	r0, r3
 8006788:	f00b fe0c 	bl	80123a4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2104      	movs	r1, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f00b fe06 	bl	80123a4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2108      	movs	r1, #8
 800679e:	4618      	mov	r0, r3
 80067a0:	f00b fe00 	bl	80123a4 <HAL_TIM_PWM_Start>
	}
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <VibeCheckStrobe_Stop>:

void VibeCheckStrobe_Stop(VibeCheckStrobe* strobe)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	strobe->is_running = 0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]
	if (!strobe->is_muted)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d116      	bne.n	80067f0 <VibeCheckStrobe_Stop+0x44>
	{
		HAL_TIM_Base_Stop_IT(strobe->htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f00b fd5c 	bl	8012284 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f00b ff02 	bl	80125dc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2104      	movs	r1, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f00b fefc 	bl	80125dc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2108      	movs	r1, #8
 80067ea:	4618      	mov	r0, r3
 80067ec:	f00b fef6 	bl	80125dc <HAL_TIM_PWM_Stop>
	}
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <VibeCheckStrobe_Mute>:

void VibeCheckStrobe_Mute(VibeCheckStrobe* strobe)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	/* stop the lights without affecting the state */
	if (!strobe->is_muted)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11d      	bne.n	8006844 <VibeCheckStrobe_Mute+0x4c>
	{
		strobe->is_muted = 1;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
		if (strobe->is_running)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <VibeCheckStrobe_Mute+0x4c>
		{
			HAL_TIM_Base_Stop_IT(strobe->htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f00b fd32 	bl	8012284 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f00b fed8 	bl	80125dc <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_2);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2104      	movs	r1, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f00b fed2 	bl	80125dc <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(strobe->htim, TIM_CHANNEL_3);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2108      	movs	r1, #8
 800683e:	4618      	mov	r0, r3
 8006840:	f00b fecc 	bl	80125dc <HAL_TIM_PWM_Stop>
		}
	}
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <VibeCheckStrobe_Unmute>:

void VibeCheckStrobe_Unmute(VibeCheckStrobe* strobe)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	if (strobe->is_muted)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01d      	beq.n	8006898 <VibeCheckStrobe_Unmute+0x4c>
	{
		strobe->is_muted = 0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	615a      	str	r2, [r3, #20]
		if (strobe->is_running)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <VibeCheckStrobe_Unmute+0x4c>
		{
			HAL_TIM_Base_Start_IT(strobe->htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f00b fc82 	bl	8012178 <HAL_TIM_Base_Start_IT>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f00b fd92 	bl	80123a4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_2);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2104      	movs	r1, #4
 8006886:	4618      	mov	r0, r3
 8006888:	f00b fd8c 	bl	80123a4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(strobe->htim, TIM_CHANNEL_3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2108      	movs	r1, #8
 8006892:	4618      	mov	r0, r3
 8006894:	f00b fd86 	bl	80123a4 <HAL_TIM_PWM_Start>
		}
	}
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <VibeCheckStrobe_SetFrequency>:
{
	return strobe->is_running;
}

void VibeCheckStrobe_SetFrequency(VibeCheckStrobe* strobe, float freq_hz)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_STROBE_MIN_FREQ_HZ)
 80068ac:	edd7 7a00 	vldr	s15, [r7]
 80068b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80068b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	d502      	bpl.n	80068c4 <VibeCheckStrobe_SetFrequency+0x24>
		freq_hz = VC_STROBE_MIN_FREQ_HZ;
 80068be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80068c2:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_STROBE_MAX_FREQ_HZ)
 80068c4:	edd7 7a00 	vldr	s15, [r7]
 80068c8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006934 <VibeCheckStrobe_SetFrequency+0x94>
 80068cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	dd01      	ble.n	80068da <VibeCheckStrobe_SetFrequency+0x3a>
		freq_hz = VC_STROBE_MAX_FREQ_HZ;
 80068d6:	4b18      	ldr	r3, [pc, #96]	@ (8006938 <VibeCheckStrobe_SetFrequency+0x98>)
 80068d8:	603b      	str	r3, [r7, #0]

	strobe->arr_steady = VC_STROBE_TIM_COUNTS_PER_SECOND / freq_hz - 1;
 80068da:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800693c <VibeCheckStrobe_SetFrequency+0x9c>
 80068de:	ed97 7a00 	vldr	s14, [r7]
 80068e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f2:	ee17 2a90 	vmov	r2, s15
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	619a      	str	r2, [r3, #24]
	strobe->freq_hz = VC_STROBE_TIM_COUNTS_PER_SECOND / ((float)strobe->arr_steady + 1.0f);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800690a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800693c <VibeCheckStrobe_SetFrequency+0x9c>
 8006912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	edc3 7a01 	vstr	s15, [r3, #4]
	strobe->htim->Instance->ARR = strobe->arr_steady;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6992      	ldr	r2, [r2, #24]
 8006926:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	447a0000 	.word	0x447a0000
 8006938:	447a0000 	.word	0x447a0000
 800693c:	47c35000 	.word	0x47c35000

08006940 <VibeCheckStrobe_GetFrequency>:

float VibeCheckStrobe_GetFrequency(VibeCheckStrobe* strobe)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	return strobe->freq_hz;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	ee07 3a90 	vmov	s15, r3
}
 8006950:	eeb0 0a67 	vmov.f32	s0, s15
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
	...

08006960 <VibeCheckStrobe_SetPhase>:

void VibeCheckStrobe_SetPhase(VibeCheckStrobe* strobe, float phase_deg)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	ed87 0a00 	vstr	s0, [r7]
	 * To shift the phase, update ARR for a single period and then put it back
	 * The most reliable way would probably by with DMA into the ARR register, but this seems more complicated
	 * Instead let's try with an interrupt at the end of each period, and some struct variables to keep track of the phase update sequence
	 */

	if (phase_deg < VC_STROBE_MIN_PHASE_DEG)
 800696c:	edd7 7a00 	vldr	s15, [r7]
 8006970:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006a38 <VibeCheckStrobe_SetPhase+0xd8>
 8006974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697c:	d501      	bpl.n	8006982 <VibeCheckStrobe_SetPhase+0x22>
		phase_deg = VC_STROBE_MIN_PHASE_DEG;
 800697e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a3c <VibeCheckStrobe_SetPhase+0xdc>)
 8006980:	603b      	str	r3, [r7, #0]
	if (phase_deg > VC_STROBE_MAX_PHASE_DEG)
 8006982:	edd7 7a00 	vldr	s15, [r7]
 8006986:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006a40 <VibeCheckStrobe_SetPhase+0xe0>
 800698a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800698e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006992:	dd01      	ble.n	8006998 <VibeCheckStrobe_SetPhase+0x38>
		phase_deg = VC_STROBE_MAX_PHASE_DEG;
 8006994:	4b2b      	ldr	r3, [pc, #172]	@ (8006a44 <VibeCheckStrobe_SetPhase+0xe4>)
 8006996:	603b      	str	r3, [r7, #0]


	float deg_shift = phase_deg - strobe->phase_deg;  /* how many degrees we want to shift the phase */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	edd3 7a03 	vldr	s15, [r3, #12]
 800699e:	ed97 7a00 	vldr	s14, [r7]
 80069a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069a6:	edc7 7a03 	vstr	s15, [r7, #12]
	int32_t arr_shift = deg_shift / 360.0f * strobe->arr_steady;  /* how much we need to alter the ARR for a single period to achieve the target phase shift */
 80069aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80069ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a48 <VibeCheckStrobe_SetPhase+0xe8>
 80069b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ca:	ee17 3a90 	vmov	r3, s15
 80069ce:	60bb      	str	r3, [r7, #8]

	if (arr_shift && !strobe->phase_change_pending && !strobe->revert_arr_pending)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d029      	beq.n	8006a2a <VibeCheckStrobe_SetPhase+0xca>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d125      	bne.n	8006a2a <VibeCheckStrobe_SetPhase+0xca>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d121      	bne.n	8006a2a <VibeCheckStrobe_SetPhase+0xca>
	{
		strobe->phase_deg += (float)arr_shift / (float)strobe->arr_steady * 360.0f;  /* calculate the actual phase shift accounting for rounding error */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006a06:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006a48 <VibeCheckStrobe_SetPhase+0xe8>
 8006a0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	edc3 7a03 	vstr	s15, [r3, #12]
		strobe->arr_phase = strobe->arr_steady + arr_shift;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	441a      	add	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	61da      	str	r2, [r3, #28]
		strobe->phase_change_pending = 1;  /* set the flag to enact the phase shift on the ARR interrupt */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	621a      	str	r2, [r3, #32]
	}
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	c3340000 	.word	0xc3340000
 8006a3c:	c3340000 	.word	0xc3340000
 8006a40:	43340000 	.word	0x43340000
 8006a44:	43340000 	.word	0x43340000
 8006a48:	43b40000 	.word	0x43b40000

08006a4c <VibeCheckStrobe_GetPhase>:

float VibeCheckStrobe_GetPhase(VibeCheckStrobe* strobe)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	return strobe->phase_deg;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	ee07 3a90 	vmov	s15, r3
}
 8006a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <VibeCheckStrobe_SetExposure>:

void VibeCheckStrobe_SetExposure(VibeCheckStrobe* strobe, float exposure_ms)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	ed87 0a00 	vstr	s0, [r7]

	uint32_t ccr_val = exposure_ms * 0.001f * VC_STROBE_TIM_COUNTS_PER_SECOND;
 8006a78:	edd7 7a00 	vldr	s15, [r7]
 8006a7c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006af8 <VibeCheckStrobe_SetExposure+0x8c>
 8006a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a84:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006afc <VibeCheckStrobe_SetExposure+0x90>
 8006a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a90:	ee17 3a90 	vmov	r3, s15
 8006a94:	60fb      	str	r3, [r7, #12]
	if (ccr_val > strobe->htim->Instance->ARR)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d904      	bls.n	8006aae <VibeCheckStrobe_SetExposure+0x42>
		ccr_val = strobe->htim->Instance->ARR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	60fb      	str	r3, [r7, #12]
	strobe->exposure_ms = (float)ccr_val / (float)VC_STROBE_TIM_COUNTS_PER_SECOND * 1000.0f;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ab8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006afc <VibeCheckStrobe_SetExposure+0x90>
 8006abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ac0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006b00 <VibeCheckStrobe_SetExposure+0x94>
 8006ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	edc3 7a02 	vstr	s15, [r3, #8]
	strobe->htim->Instance->CCR1 = ccr_val;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	635a      	str	r2, [r3, #52]	@ 0x34
	strobe->htim->Instance->CCR2 = ccr_val;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	@ 0x38
	strobe->htim->Instance->CCR3 = ccr_val;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	3a83126f 	.word	0x3a83126f
 8006afc:	47c35000 	.word	0x47c35000
 8006b00:	447a0000 	.word	0x447a0000

08006b04 <VibeCheckStrobe_GetExposure>:

float VibeCheckStrobe_GetExposure(VibeCheckStrobe* strobe)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	return strobe->exposure_ms;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	ee07 3a90 	vmov	s15, r3
}
 8006b14:	eeb0 0a67 	vmov.f32	s0, s15
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <VibeCheckStrobe_PeriodElapsedUpdate>:


/* use an interrupt to make sure this is called each period */
void VibeCheckStrobe_PeriodElapsedUpdate(VibeCheckStrobe* strobe)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
	if (strobe->revert_arr_pending)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <VibeCheckStrobe_PeriodElapsedUpdate+0x22>
	{
		strobe->htim->Instance->ARR = strobe->arr_steady;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6992      	ldr	r2, [r2, #24]
 8006b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 0;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	if (strobe->phase_change_pending)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <VibeCheckStrobe_PeriodElapsedUpdate+0x42>
	{
		strobe->htim->Instance->ARR = strobe->arr_phase;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	69d2      	ldr	r2, [r2, #28]
 8006b56:	62da      	str	r2, [r3, #44]	@ 0x2c
		strobe->revert_arr_pending = 1;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	625a      	str	r2, [r3, #36]	@ 0x24
		strobe->phase_change_pending = 0;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	621a      	str	r2, [r3, #32]
	}
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <VibeCheckStrobeCMD_Set>:
*/



static uint32_t VibeCheckStrobeCMD_Set(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b096      	sub	sp, #88	@ 0x58
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	2240      	movs	r2, #64	@ 0x40
 8006b80:	4619      	mov	r1, r3
 8006b82:	6838      	ldr	r0, [r7, #0]
 8006b84:	f7ff fc08 	bl	8006398 <VibeCheckShell_GetNextString>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d065      	beq.n	8006c5a <VibeCheckStrobeCMD_Set+0xea>
	{
		if (!strcmp(str, "frequency"))
 8006b8e:	f107 0318 	add.w	r3, r7, #24
 8006b92:	4934      	ldr	r1, [pc, #208]	@ (8006c64 <VibeCheckStrobeCMD_Set+0xf4>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fbbb 	bl	8000310 <strcmp>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d118      	bne.n	8006bd2 <VibeCheckStrobeCMD_Set+0x62>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6838      	ldr	r0, [r7, #0]
 8006ba8:	f7ff fc8a 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d053      	beq.n	8006c5a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetFrequency(strobe, val);
 8006bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8006bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fe70 	bl	80068a0 <VibeCheckStrobe_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006bc0:	4929      	ldr	r1, [pc, #164]	@ (8006c68 <VibeCheckStrobeCMD_Set+0xf8>)
 8006bc2:	6838      	ldr	r0, [r7, #0]
 8006bc4:	f7ff fd08 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006bc8:	6838      	ldr	r0, [r7, #0]
 8006bca:	f7ff fd85 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e044      	b.n	8006c5c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "phase"))
 8006bd2:	f107 0318 	add.w	r3, r7, #24
 8006bd6:	4925      	ldr	r1, [pc, #148]	@ (8006c6c <VibeCheckStrobeCMD_Set+0xfc>)
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7f9 fb99 	bl	8000310 <strcmp>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d118      	bne.n	8006c16 <VibeCheckStrobeCMD_Set+0xa6>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006be4:	f107 0310 	add.w	r3, r7, #16
 8006be8:	4619      	mov	r1, r3
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f7ff fc68 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d031      	beq.n	8006c5a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetPhase(strobe, val);
 8006bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff feae 	bl	8006960 <VibeCheckStrobe_SetPhase>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006c04:	4918      	ldr	r1, [pc, #96]	@ (8006c68 <VibeCheckStrobeCMD_Set+0xf8>)
 8006c06:	6838      	ldr	r0, [r7, #0]
 8006c08:	f7ff fce6 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006c0c:	6838      	ldr	r0, [r7, #0]
 8006c0e:	f7ff fd63 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e022      	b.n	8006c5c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
		else if (!strcmp(str, "exposure"))
 8006c16:	f107 0318 	add.w	r3, r7, #24
 8006c1a:	4915      	ldr	r1, [pc, #84]	@ (8006c70 <VibeCheckStrobeCMD_Set+0x100>)
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7f9 fb77 	bl	8000310 <strcmp>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d118      	bne.n	8006c5a <VibeCheckStrobeCMD_Set+0xea>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6838      	ldr	r0, [r7, #0]
 8006c30:	f7ff fc46 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00f      	beq.n	8006c5a <VibeCheckStrobeCMD_Set+0xea>
			{
				VibeCheckStrobe_SetExposure(strobe, val);
 8006c3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff12 	bl	8006a6c <VibeCheckStrobe_SetExposure>
				VibeCheckShell_PutOutputString(shell, "ack");
 8006c48:	4907      	ldr	r1, [pc, #28]	@ (8006c68 <VibeCheckStrobeCMD_Set+0xf8>)
 8006c4a:	6838      	ldr	r0, [r7, #0]
 8006c4c:	f7ff fcc4 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 8006c50:	6838      	ldr	r0, [r7, #0]
 8006c52:	f7ff fd41 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <VibeCheckStrobeCMD_Set+0xec>
			}
		}
	}

	return 0;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3758      	adds	r7, #88	@ 0x58
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	0801e2c4 	.word	0x0801e2c4
 8006c68:	0801e2d0 	.word	0x0801e2d0
 8006c6c:	0801e2d4 	.word	0x0801e2d4
 8006c70:	0801e2dc 	.word	0x0801e2dc

08006c74 <VibeCheckStrobeCMD_Get>:

static uint32_t VibeCheckStrobeCMD_Get(VibeCheckStrobe* strobe, VibeCheckShell* shell)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b092      	sub	sp, #72	@ 0x48
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	2240      	movs	r2, #64	@ 0x40
 8006c84:	4619      	mov	r1, r3
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f7ff fb86 	bl	8006398 <VibeCheckShell_GetNextString>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d05c      	beq.n	8006d4c <VibeCheckStrobeCMD_Get+0xd8>
	{
		if (!strcmp(str, "frequency"))
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4930      	ldr	r1, [pc, #192]	@ (8006d58 <VibeCheckStrobeCMD_Get+0xe4>)
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7f9 fb39 	bl	8000310 <strcmp>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d115      	bne.n	8006cd0 <VibeCheckStrobeCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006ca4:	492d      	ldr	r1, [pc, #180]	@ (8006d5c <VibeCheckStrobeCMD_Get+0xe8>)
 8006ca6:	6838      	ldr	r0, [r7, #0]
 8006ca8:	f7ff fc96 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7ff fd05 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetFrequency(strobe));
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fe44 	bl	8006940 <VibeCheckStrobe_GetFrequency>
 8006cb8:	eef0 7a40 	vmov.f32	s15, s0
 8006cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc0:	6838      	ldr	r0, [r7, #0]
 8006cc2:	f7ff fcdd 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006cc6:	6838      	ldr	r0, [r7, #0]
 8006cc8:	f7ff fd06 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e03e      	b.n	8006d4e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "phase"))
 8006cd0:	f107 0308 	add.w	r3, r7, #8
 8006cd4:	4922      	ldr	r1, [pc, #136]	@ (8006d60 <VibeCheckStrobeCMD_Get+0xec>)
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7f9 fb1a 	bl	8000310 <strcmp>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d115      	bne.n	8006d0e <VibeCheckStrobeCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006ce2:	491e      	ldr	r1, [pc, #120]	@ (8006d5c <VibeCheckStrobeCMD_Get+0xe8>)
 8006ce4:	6838      	ldr	r0, [r7, #0]
 8006ce6:	f7ff fc77 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006cea:	6838      	ldr	r0, [r7, #0]
 8006cec:	f7ff fce6 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetPhase(strobe));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff feab 	bl	8006a4c <VibeCheckStrobe_GetPhase>
 8006cf6:	eef0 7a40 	vmov.f32	s15, s0
 8006cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006cfe:	6838      	ldr	r0, [r7, #0]
 8006d00:	f7ff fcbe 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006d04:	6838      	ldr	r0, [r7, #0]
 8006d06:	f7ff fce7 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e01f      	b.n	8006d4e <VibeCheckStrobeCMD_Get+0xda>
		}
		else if (!strcmp(str, "exposure"))
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4914      	ldr	r1, [pc, #80]	@ (8006d64 <VibeCheckStrobeCMD_Get+0xf0>)
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7f9 fafb 	bl	8000310 <strcmp>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d115      	bne.n	8006d4c <VibeCheckStrobeCMD_Get+0xd8>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8006d20:	490e      	ldr	r1, [pc, #56]	@ (8006d5c <VibeCheckStrobeCMD_Get+0xe8>)
 8006d22:	6838      	ldr	r0, [r7, #0]
 8006d24:	f7ff fc58 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8006d28:	6838      	ldr	r0, [r7, #0]
 8006d2a:	f7ff fcc7 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckStrobe_GetExposure(strobe));
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fee8 	bl	8006b04 <VibeCheckStrobe_GetExposure>
 8006d34:	eef0 7a40 	vmov.f32	s15, s0
 8006d38:	eeb0 0a67 	vmov.f32	s0, s15
 8006d3c:	6838      	ldr	r0, [r7, #0]
 8006d3e:	f7ff fc9f 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006d42:	6838      	ldr	r0, [r7, #0]
 8006d44:	f7ff fcc8 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <VibeCheckStrobeCMD_Get+0xda>
		}
	}

	return 0;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3748      	adds	r7, #72	@ 0x48
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	0801e2c4 	.word	0x0801e2c4
 8006d5c:	0801e2d0 	.word	0x0801e2d0
 8006d60:	0801e2d4 	.word	0x0801e2d4
 8006d64:	0801e2dc 	.word	0x0801e2dc

08006d68 <VibeCheckStrobeCMD_Execute>:

uint32_t VibeCheckStrobeCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b094      	sub	sp, #80	@ 0x50
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	VibeCheckStrobe* strobe = (VibeCheckStrobe*)obj;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8006d76:	f107 030c 	add.w	r3, r7, #12
 8006d7a:	2240      	movs	r2, #64	@ 0x40
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f7ff fb0a 	bl	8006398 <VibeCheckShell_GetNextString>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04d      	beq.n	8006e26 <VibeCheckStrobeCMD_Execute+0xbe>
	{
		if (!strcmp(str, "start"))
 8006d8a:	f107 030c 	add.w	r3, r7, #12
 8006d8e:	4928      	ldr	r1, [pc, #160]	@ (8006e30 <VibeCheckStrobeCMD_Execute+0xc8>)
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7f9 fabd 	bl	8000310 <strcmp>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <VibeCheckStrobeCMD_Execute+0x4c>
		{
			VibeCheckStrobe_Start(strobe);
 8006d9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d9e:	f7ff fcdf 	bl	8006760 <VibeCheckStrobe_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006da2:	4924      	ldr	r1, [pc, #144]	@ (8006e34 <VibeCheckStrobeCMD_Execute+0xcc>)
 8006da4:	6838      	ldr	r0, [r7, #0]
 8006da6:	f7ff fc17 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006daa:	6838      	ldr	r0, [r7, #0]
 8006dac:	f7ff fc94 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e039      	b.n	8006e28 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "stop"))
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	491f      	ldr	r1, [pc, #124]	@ (8006e38 <VibeCheckStrobeCMD_Execute+0xd0>)
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7f9 faa8 	bl	8000310 <strcmp>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <VibeCheckStrobeCMD_Execute+0x76>
		{
			VibeCheckStrobe_Stop(strobe);
 8006dc6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006dc8:	f7ff fcf0 	bl	80067ac <VibeCheckStrobe_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8006dcc:	4919      	ldr	r1, [pc, #100]	@ (8006e34 <VibeCheckStrobeCMD_Execute+0xcc>)
 8006dce:	6838      	ldr	r0, [r7, #0]
 8006dd0:	f7ff fc02 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7ff fc7f 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e024      	b.n	8006e28 <VibeCheckStrobeCMD_Execute+0xc0>
		}
		else if (!strcmp(str, "set"))
 8006dde:	f107 030c 	add.w	r3, r7, #12
 8006de2:	4916      	ldr	r1, [pc, #88]	@ (8006e3c <VibeCheckStrobeCMD_Execute+0xd4>)
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7f9 fa93 	bl	8000310 <strcmp>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d108      	bne.n	8006e02 <VibeCheckStrobeCMD_Execute+0x9a>
		{
			if (VibeCheckStrobeCMD_Set(strobe, shell))
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006df4:	f7ff febc 	bl	8006b70 <VibeCheckStrobeCMD_Set>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e012      	b.n	8006e28 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
		else if (!strcmp(str, "get"))
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	490e      	ldr	r1, [pc, #56]	@ (8006e40 <VibeCheckStrobeCMD_Execute+0xd8>)
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7f9 fa81 	bl	8000310 <strcmp>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <VibeCheckStrobeCMD_Execute+0xbe>
		{
			if (VibeCheckStrobeCMD_Get(strobe, shell))
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e18:	f7ff ff2c 	bl	8006c74 <VibeCheckStrobeCMD_Get>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <VibeCheckStrobeCMD_Execute+0xbe>
			{
				return 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <VibeCheckStrobeCMD_Execute+0xc0>
			}
		}
	}

	return 0;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3750      	adds	r7, #80	@ 0x50
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	0801e2e8 	.word	0x0801e2e8
 8006e34:	0801e2d0 	.word	0x0801e2d0
 8006e38:	0801e2f0 	.word	0x0801e2f0
 8006e3c:	0801e2f8 	.word	0x0801e2f8
 8006e40:	0801e2fc 	.word	0x0801e2fc
 8006e44:	00000000 	.word	0x00000000

08006e48 <ComputeSineWave>:

static const uint32_t demo_times1[] = {150,    150, 150,    150, 300,    150,    150,    300,    300,    300,    300,           300,   150,    150, 300,    150,       150, 300,    300,    150,   150,    300,        150,   150,    300,    300,    300,    300,        300,    150,   300,    150,   150,    150,    300,    150,    300,    150,    75,     75,   75,   75,  150,    150,    600};
static const float demo_freqs1[] =    {58.27,  185, 233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 277.18, 233.08,        0,     233.08, 185, 277.18, 233.08, 277.18, 369.99, 349.23, 51.91, 277.18, 233.08,     77.78, 311.13, 277.18, 233.08, 207.65, 0,          369.99, 415.3, 369.99, 415.3, 369.99,   0,    369.99, 466.16, 369.99, 466.16, 369.99, 0,  369.99, 0,   369.99,   0,   46.25};

static void ComputeSineWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	ed2d 8b02 	vpush	{d8}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e032      	b.n	8006ec6 <ComputeSineWave+0x7e>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1.0f + amplitude * sin((float)i * 2.0f * 3.14159f / (float)len));
 8006e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e64:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e76:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8006ee8 <ComputeSineWave+0xa0>
 8006e7a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e90:	eeb0 0b47 	vmov.f64	d0, d7
 8006e94:	f016 fa70 	bl	801d378 <sin>
 8006e98:	eeb0 7b40 	vmov.f64	d7, d0
 8006e9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006ea0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8006ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ea8:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8006ee0 <ComputeSineWave+0x98>
 8006eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	60fa      	str	r2, [r7, #12]
 8006eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006eba:	ee17 2a90 	vmov	r2, s15
 8006ebe:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d3c8      	bcc.n	8006e60 <ComputeSineWave+0x18>
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	ecbd 8b02 	vpop	{d8}
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	f3af 8000 	nop.w
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	409ffe00 	.word	0x409ffe00
 8006ee8:	40490fd0 	.word	0x40490fd0

08006eec <ComputeSquareWave>:

static void ComputeSquareWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	e02c      	b.n	8006f5a <ComputeSquareWave+0x6e>
		if (i < len / 2)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d212      	bcs.n	8006f30 <ComputeSquareWave+0x44>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + amplitude);
 8006f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f16:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006f70 <ComputeSquareWave+0x84>
 8006f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1d1a      	adds	r2, r3, #4
 8006f22:	60fa      	str	r2, [r7, #12]
 8006f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f28:	ee17 2a90 	vmov	r2, s15
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e011      	b.n	8006f54 <ComputeSquareWave+0x68>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - amplitude);
 8006f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8006f70 <ComputeSquareWave+0x84>
 8006f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	1d1a      	adds	r2, r3, #4
 8006f48:	60fa      	str	r2, [r7, #12]
 8006f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4e:	ee17 2a90 	vmov	r2, s15
 8006f52:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3301      	adds	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d3ce      	bcc.n	8006f00 <ComputeSquareWave+0x14>
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	44fff000 	.word	0x44fff000

08006f74 <ComputeSawWave>:

static void ComputeSawWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e052      	b.n	800702e <ComputeSawWave+0xba>
		if (i < len / 2)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d222      	bcs.n	8006fd8 <ComputeSawWave+0x64>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * (float)i * amplitude / (float)len);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006fa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fa4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fbe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007044 <ComputeSawWave+0xd0>
 8006fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1d1a      	adds	r2, r3, #4
 8006fca:	60fa      	str	r2, [r7, #12]
 8006fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd0:	ee17 2a90 	vmov	r2, s15
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e027      	b.n	8007028 <ComputeSawWave+0xb4>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 2 * amplitude + 2 * (float)i * amplitude / (float)len);
 8006fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ffa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007008:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800700c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007010:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8007044 <ComputeSawWave+0xd0>
 8007014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	1d1a      	adds	r2, r3, #4
 800701c:	60fa      	str	r2, [r7, #12]
 800701e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007022:	ee17 2a90 	vmov	r2, s15
 8007026:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	3301      	adds	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3a8      	bcc.n	8006f88 <ComputeSawWave+0x14>
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	44fff000 	.word	0x44fff000

08007048 <ComputeTriangleWave>:

static void ComputeTriangleWave(uint32_t* buf, uint32_t len, float amplitude)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	ed87 0a01 	vstr	s0, [r7, #4]
	for (uint32_t i = 0; i < len; i++)
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e082      	b.n	8007162 <ComputeTriangleWave+0x11a>
		if (i < len / 4)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	089b      	lsrs	r3, r3, #2
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	429a      	cmp	r2, r3
 8007064:	d221      	bcs.n	80070aa <ComputeTriangleWave+0x62>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 4 * i * amplitude / (float)len);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007072:	edd7 7a01 	vldr	s15, [r7, #4]
 8007076:	ee67 6a27 	vmul.f32	s13, s14, s15
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	ee07 3a90 	vmov	s15, r3
 8007080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800708c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007090:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800717c <ComputeTriangleWave+0x134>
 8007094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1d1a      	adds	r2, r3, #4
 800709c:	60fa      	str	r2, [r7, #12]
 800709e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a2:	ee17 2a90 	vmov	r2, s15
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e058      	b.n	800715c <ComputeTriangleWave+0x114>
		else if (i < 3 * len / 4)
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4613      	mov	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	089b      	lsrs	r3, r3, #2
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d227      	bcs.n	800710a <ComputeTriangleWave+0xc2>
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 + 2 * amplitude - 4 * i * amplitude / (float)len);
 80070ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80070be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80070c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80070da:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80070ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070f0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800717c <ComputeTriangleWave+0x134>
 80070f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	60fa      	str	r2, [r7, #12]
 80070fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007102:	ee17 2a90 	vmov	r2, s15
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e028      	b.n	800715c <ComputeTriangleWave+0x114>
		else
			*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE * (1 - 4 * amplitude + 4 * i * amplitude / (float)len);
 800710a:	edd7 7a01 	vldr	s15, [r7, #4]
 800710e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8007112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800711a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	edd7 7a01 	vldr	s15, [r7, #4]
 800712e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007144:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800717c <ComputeTriangleWave+0x134>
 8007148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	60fa      	str	r2, [r7, #12]
 8007152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007156:	ee17 2a90 	vmov	r2, s15
 800715a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3301      	adds	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	f4ff af78 	bcc.w	800705c <ComputeTriangleWave+0x14>
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	44fff000 	.word	0x44fff000

08007180 <ComputeNullWave>:

static void ComputeNullWave(uint32_t* buf, uint32_t len)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < len; i++)
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e008      	b.n	80071a2 <ComputeNullWave+0x22>
		*buf++ = 0.5f * VC_WAVE_DAC_FULL_SCALE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800719a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < len; i++)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d3f2      	bcc.n	8007190 <ComputeNullWave+0x10>
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <VibeCheckWaveGen_RecomputeWave>:




static void VibeCheckWaveGen_RecomputeWave(VibeCheckWaveGen* wavegen, uint32_t* buf)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	if (wavegen->is_running)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d044      	beq.n	8007258 <VibeCheckWaveGen_RecomputeWave+0xa0>
	{
		switch (wavegen->waveform)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071d4:	7e1b      	ldrb	r3, [r3, #24]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d844      	bhi.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <VibeCheckWaveGen_RecomputeWave+0x28>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	0800720b 	.word	0x0800720b
 80071e8:	08007225 	.word	0x08007225
 80071ec:	0800723f 	.word	0x0800723f
		{
		case VC_WAVE_SINE:
			ComputeSineWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80071fa:	eeb0 0a67 	vmov.f32	s0, s15
 80071fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007202:	6838      	ldr	r0, [r7, #0]
 8007204:	f7ff fe20 	bl	8006e48 <ComputeSineWave>
			break;
 8007208:	e02c      	b.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SQUARE:
			ComputeSquareWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007210:	edd3 7a08 	vldr	s15, [r3, #32]
 8007214:	eeb0 0a67 	vmov.f32	s0, s15
 8007218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800721c:	6838      	ldr	r0, [r7, #0]
 800721e:	f7ff fe65 	bl	8006eec <ComputeSquareWave>
			break;
 8007222:	e01f      	b.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_SAW:
			ComputeSawWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722a:	edd3 7a08 	vldr	s15, [r3, #32]
 800722e:	eeb0 0a67 	vmov.f32	s0, s15
 8007232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f7ff fe9c 	bl	8006f74 <ComputeSawWave>
			break;
 800723c:	e012      	b.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
		case VC_WAVE_TRIANGLE:
			ComputeTriangleWave(buf, VC_WAVE_BUF_LEN, wavegen->amplitude);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007244:	edd3 7a08 	vldr	s15, [r3, #32]
 8007248:	eeb0 0a67 	vmov.f32	s0, s15
 800724c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007250:	6838      	ldr	r0, [r7, #0]
 8007252:	f7ff fef9 	bl	8007048 <ComputeTriangleWave>
			break;
 8007256:	e005      	b.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
		}
	}
	else
	{
		ComputeNullWave(buf, VC_WAVE_BUF_LEN);
 8007258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800725c:	6838      	ldr	r0, [r7, #0]
 800725e:	f7ff ff8f 	bl	8007180 <ComputeNullWave>
	}
}
 8007262:	e7ff      	b.n	8007264 <VibeCheckWaveGen_RecomputeWave+0xac>
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <VibeCheckWaveGen_Init>:


void VibeCheckWaveGen_Init(VibeCheckWaveGen* wavegen, DAC_HandleTypeDef *hdac, TIM_HandleTypeDef* htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
	wavegen->hdac = hdac;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	605a      	str	r2, [r3, #4]
	wavegen->htim = htim;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]
	wavegen->freq_hz = VC_WAVE_DEFAULT_FREQ_HZ;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800728a:	461a      	mov	r2, r3
 800728c:	4b3c      	ldr	r3, [pc, #240]	@ (8007380 <VibeCheckWaveGen_Init+0x114>)
 800728e:	61d3      	str	r3, [r2, #28]
	wavegen->amplitude = VC_WAVE_DEFAULT_AMPLITUDE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007296:	461a      	mov	r2, r3
 8007298:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800729c:	6213      	str	r3, [r2, #32]
	wavegen->waveform = VC_WAVE_SINE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a4:	2200      	movs	r2, #0
 80072a6:	761a      	strb	r2, [r3, #24]

	wavegen->is_running = 0;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ae:	461a      	mov	r2, r3
 80072b0:	2300      	movs	r3, #0
 80072b2:	6253      	str	r3, [r2, #36]	@ 0x24

	wavegen->wave_ping_compute_pending = 0;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ba:	461a      	mov	r2, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 0;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c6:	461a      	mov	r2, r3
 80072c8:	2300      	movs	r3, #0
 80072ca:	60d3      	str	r3, [r2, #12]
	wavegen->wave_ping_compute_ready = 0;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072d2:	461a      	mov	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	6113      	str	r3, [r2, #16]
	wavegen->wave_pong_compute_ready = 0;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072de:	461a      	mov	r2, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	6153      	str	r3, [r2, #20]

	wavegen->demo_num = 0;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072ea:	461a      	mov	r2, r3
 80072ec:	2300      	movs	r3, #0
 80072ee:	6293      	str	r3, [r2, #40]	@ 0x28

	/* set up timer registers */
	wavegen->htim->Instance->PSC = VC_WAVE_TIM_PSC - 1;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	220b      	movs	r2, #11
 80072f8:	629a      	str	r2, [r3, #40]	@ 0x28
	VibeCheckWaveGen_SetFrequency(wavegen, wavegen->freq_hz);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007300:	edd3 7a07 	vldr	s15, [r3, #28]
 8007304:	eeb0 0a67 	vmov.f32	s0, s15
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f8db 	bl	80074c4 <VibeCheckWaveGen_SetFrequency>

	/* compute the initial wave (set the DAC to the midpoint to avoid noise) */
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3308      	adds	r3, #8
 8007312:	4619      	mov	r1, r3
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ff4f 	bl	80071b8 <VibeCheckWaveGen_RecomputeWave>
	VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8007320:	4619      	mov	r1, r3
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff ff48 	bl	80071b8 <VibeCheckWaveGen_RecomputeWave>

	/* start the DAC */
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_1, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6858      	ldr	r0, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f103 0208 	add.w	r2, r3, #8
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800733a:	2100      	movs	r1, #0
 800733c:	f002 fa4c 	bl	80097d8 <HAL_DAC_Start_DMA>
	HAL_DAC_Start_DMA(wavegen->hdac, DAC_CHANNEL_2, wavegen->wave, VC_WAVE_BUF_LEN, DAC_ALIGN_12B_R);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6858      	ldr	r0, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f103 0208 	add.w	r2, r3, #8
 800734a:	2300      	movs	r3, #0
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007352:	2110      	movs	r1, #16
 8007354:	f002 fa40 	bl	80097d8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(wavegen->htim);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f00a fe8d 	bl	801207c <HAL_TIM_Base_Start>

	/* un-mute the output and turn off the mute LED*/
	HAL_GPIO_WritePin(MUTE_SIGNAL_GPIO_Port, MUTE_SIGNAL_Pin, GPIO_PIN_RESET);
 8007362:	2200      	movs	r2, #0
 8007364:	2108      	movs	r1, #8
 8007366:	4807      	ldr	r0, [pc, #28]	@ (8007384 <VibeCheckWaveGen_Init+0x118>)
 8007368:	f004 ff60 	bl	800c22c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUTE_INDICATOR_GPIO_Port, MUTE_INDICATOR_Pin, GPIO_PIN_RESET);
 800736c:	2200      	movs	r2, #0
 800736e:	2102      	movs	r1, #2
 8007370:	4804      	ldr	r0, [pc, #16]	@ (8007384 <VibeCheckWaveGen_Init+0x118>)
 8007372:	f004 ff5b 	bl	800c22c <HAL_GPIO_WritePin>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	42700000 	.word	0x42700000
 8007384:	58020000 	.word	0x58020000

08007388 <VibeCheckWaveGen_Update>:

void VibeCheckWaveGen_Update(VibeCheckWaveGen* wavegen)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	/* call in the main loop */

	uint32_t time = HAL_GetTick();
 8007390:	f000 fcd4 	bl	8007d3c <HAL_GetTick>
 8007394:	60f8      	str	r0, [r7, #12]


	/*
	 * to make a smooth transition between waves when a parameter is changed, change the two halves of the double buffer separately
	 */
	if (wavegen->wave_ping_compute_ready)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <VibeCheckWaveGen_Update+0x32>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[0]);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3308      	adds	r3, #8
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff05 	bl	80071b8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_ping_compute_ready = 0;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b4:	461a      	mov	r2, r3
 80073b6:	2300      	movs	r3, #0
 80073b8:	6113      	str	r3, [r2, #16]
	}
	if (wavegen->wave_pong_compute_ready)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00c      	beq.n	80073e0 <VibeCheckWaveGen_Update+0x58>
	{
		VibeCheckWaveGen_RecomputeWave(wavegen, &wavegen->wave[VC_WAVE_BUF_LEN]);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff fef2 	bl	80071b8 <VibeCheckWaveGen_RecomputeWave>
		wavegen->wave_pong_compute_ready = 0;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073da:	461a      	mov	r2, r3
 80073dc:	2300      	movs	r3, #0
 80073de:	6153      	str	r3, [r2, #20]

	/*
	 * update the sequencer
	 */
	uint32_t seq_index;
	if (Sequencer_Update(&wavegen->sequencer, time, &seq_index))
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	f241 032c 	movw	r3, #4140	@ 0x102c
 80073e6:	4413      	add	r3, r2
 80073e8:	f107 0208 	add.w	r2, r7, #8
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fa ff18 	bl	8002224 <Sequencer_Update>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d017      	beq.n	800742a <VibeCheckWaveGen_Update+0xa2>
	{
		VibeCheckWaveGen_SetFrequency(wavegen, wavegen->demo_num ? demo_freqs1[seq_index] : demo_freqs0[seq_index]);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <VibeCheckWaveGen_Update+0x8c>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4a0a      	ldr	r2, [pc, #40]	@ (8007434 <VibeCheckWaveGen_Update+0xac>)
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	edd3 7a00 	vldr	s15, [r3]
 8007412:	e005      	b.n	8007420 <VibeCheckWaveGen_Update+0x98>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4a08      	ldr	r2, [pc, #32]	@ (8007438 <VibeCheckWaveGen_Update+0xb0>)
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	edd3 7a00 	vldr	s15, [r3]
 8007420:	eeb0 0a67 	vmov.f32	s0, s15
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f84d 	bl	80074c4 <VibeCheckWaveGen_SetFrequency>
	}

}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	0801ed58 	.word	0x0801ed58
 8007438:	0801ec3c 	.word	0x0801ec3c

0800743c <VibeCheckWaveGen_Start>:

void VibeCheckWaveGen_Start(VibeCheckWaveGen* wavegen)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	if (!wavegen->is_running)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d111      	bne.n	8007474 <VibeCheckWaveGen_Start+0x38>
	{
		wavegen->is_running = 1;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007456:	461a      	mov	r2, r3
 8007458:	2301      	movs	r3, #1
 800745a:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007462:	461a      	mov	r2, r3
 8007464:	2301      	movs	r3, #1
 8007466:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746e:	461a      	mov	r2, r3
 8007470:	2301      	movs	r3, #1
 8007472:	60d3      	str	r3, [r2, #12]
	}

}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <VibeCheckWaveGen_Stop>:

void VibeCheckWaveGen_Stop(VibeCheckWaveGen* wavegen)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	if (wavegen->is_running)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d011      	beq.n	80074b8 <VibeCheckWaveGen_Stop+0x38>
	{
		wavegen->is_running = 0;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800749a:	461a      	mov	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	6253      	str	r3, [r2, #36]	@ 0x24
		wavegen->wave_ping_compute_pending = 1;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074a6:	461a      	mov	r2, r3
 80074a8:	2301      	movs	r3, #1
 80074aa:	6093      	str	r3, [r2, #8]
		wavegen->wave_pong_compute_pending = 1;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074b2:	461a      	mov	r2, r3
 80074b4:	2301      	movs	r3, #1
 80074b6:	60d3      	str	r3, [r2, #12]
	}
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <VibeCheckWaveGen_SetFrequency>:

void VibeCheckWaveGen_SetFrequency(VibeCheckWaveGen* wavegen, float freq_hz)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	ed87 0a00 	vstr	s0, [r7]
	if (freq_hz < VC_WAVE_MIN_FREQ_HZ)
 80074d0:	edd7 7a00 	vldr	s15, [r7]
 80074d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074dc:	d502      	bpl.n	80074e4 <VibeCheckWaveGen_SetFrequency+0x20>
		freq_hz = VC_WAVE_MIN_FREQ_HZ;
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	603b      	str	r3, [r7, #0]
	if (freq_hz > VC_WAVE_MAX_FREQ_HZ)
 80074e4:	edd7 7a00 	vldr	s15, [r7]
 80074e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8007564 <VibeCheckWaveGen_SetFrequency+0xa0>
 80074ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f4:	dd01      	ble.n	80074fa <VibeCheckWaveGen_SetFrequency+0x36>
		freq_hz = VC_WAVE_MAX_FREQ_HZ;
 80074f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007568 <VibeCheckWaveGen_SetFrequency+0xa4>)
 80074f8:	603b      	str	r3, [r7, #0]

	uint32_t arr = VC_WAVE_TIM_COUNTS_PER_SECOND / (VC_WAVE_BUF_LEN * freq_hz) - 1;
 80074fa:	edd7 7a00 	vldr	s15, [r7]
 80074fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800756c <VibeCheckWaveGen_SetFrequency+0xa8>
 8007502:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007506:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007570 <VibeCheckWaveGen_SetFrequency+0xac>
 800750a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800750e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751a:	ee17 3a90 	vmov	r3, s15
 800751e:	60fb      	str	r3, [r7, #12]
	wavegen->freq_hz = VC_WAVE_TIM_COUNTS_PER_SECOND / ((float)arr + 1.0f) / VC_WAVE_BUF_LEN;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800752e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007532:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8007570 <VibeCheckWaveGen_SetFrequency+0xac>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800756c <VibeCheckWaveGen_SetFrequency+0xa8>
 800753e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007548:	edc3 7a07 	vstr	s15, [r3, #28]
	wavegen->htim->Instance->ARR = arr;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	46989600 	.word	0x46989600
 8007568:	46989600 	.word	0x46989600
 800756c:	44000000 	.word	0x44000000
 8007570:	4b989680 	.word	0x4b989680

08007574 <VibeCheckWaveGen_GetFrequency>:

float VibeCheckWaveGen_GetFrequency(VibeCheckWaveGen* wavegen)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	return wavegen->freq_hz;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	ee07 3a90 	vmov	s15, r3
}
 8007588:	eeb0 0a67 	vmov.f32	s0, s15
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <VibeCheckWaveGen_SetAmplitude>:

void VibeCheckWaveGen_SetAmplitude(VibeCheckWaveGen* wavegen, float amplitude)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	ed87 0a00 	vstr	s0, [r7]
	if (amplitude < 0.0f)
 80075a2:	edd7 7a00 	vldr	s15, [r7]
 80075a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	d502      	bpl.n	80075b6 <VibeCheckWaveGen_SetAmplitude+0x20>
		amplitude = 0.0f;
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	603b      	str	r3, [r7, #0]
	if (amplitude > 1.0f)
 80075b6:	edd7 7a00 	vldr	s15, [r7]
 80075ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c6:	dd02      	ble.n	80075ce <VibeCheckWaveGen_SetAmplitude+0x38>
		amplitude = 1.0f;
 80075c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80075cc:	603b      	str	r3, [r7, #0]

	wavegen->amplitude = amplitude;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d4:	461a      	mov	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6213      	str	r3, [r2, #32]
	wavegen->wave_ping_compute_pending = 1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e0:	461a      	mov	r2, r3
 80075e2:	2301      	movs	r3, #1
 80075e4:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ec:	461a      	mov	r2, r3
 80075ee:	2301      	movs	r3, #1
 80075f0:	60d3      	str	r3, [r2, #12]
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <VibeCheckWaveGen_GetAmplitude>:

float VibeCheckWaveGen_GetAmplitude(VibeCheckWaveGen* wavegen)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
	return wavegen->amplitude;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	ee07 3a90 	vmov	s15, r3
}
 8007612:	eeb0 0a67 	vmov.f32	s0, s15
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <VibeCheckWaveGen_SetWaveform>:

void VibeCheckWaveGen_SetWaveform(VibeCheckWaveGen* wavegen, VibeCheckWaveGen_Waveform waveform)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	70fb      	strb	r3, [r7, #3]
	wavegen->waveform = waveform;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007632:	461a      	mov	r2, r3
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	7613      	strb	r3, [r2, #24]
	wavegen->wave_ping_compute_pending = 1;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763e:	461a      	mov	r2, r3
 8007640:	2301      	movs	r3, #1
 8007642:	6093      	str	r3, [r2, #8]
	wavegen->wave_pong_compute_pending = 1;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764a:	461a      	mov	r2, r3
 800764c:	2301      	movs	r3, #1
 800764e:	60d3      	str	r3, [r2, #12]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <VibeCheckWaveGen_GetWaveform>:

VibeCheckWaveGen_Waveform VibeCheckWaveGen_GetWaveform(VibeCheckWaveGen* wavegen)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	return wavegen->waveform;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800766a:	7e1b      	ldrb	r3, [r3, #24]
}
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <VibeCheckWaveGen_DMAHalfCpltCallback>:


/* keeps track of which end of the double buffer to compute when updating the wave */
void VibeCheckWaveGen_DMAHalfCpltCallback(VibeCheckWaveGen* wavegen)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_ping_compute_pending)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <VibeCheckWaveGen_DMAHalfCpltCallback+0x2c>
	{
		wavegen->wave_ping_compute_pending = 0;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007692:	461a      	mov	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	6093      	str	r3, [r2, #8]
		wavegen->wave_ping_compute_ready = 1;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800769e:	461a      	mov	r2, r3
 80076a0:	2301      	movs	r3, #1
 80076a2:	6113      	str	r3, [r2, #16]
	}
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <VibeCheckWaveGen_DMACpltCallback>:

void VibeCheckWaveGen_DMACpltCallback(VibeCheckWaveGen* wavegen)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
	if (wavegen->wave_pong_compute_pending)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <VibeCheckWaveGen_DMACpltCallback+0x2c>
	{
		wavegen->wave_pong_compute_pending = 0;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ca:	461a      	mov	r2, r3
 80076cc:	2300      	movs	r3, #0
 80076ce:	60d3      	str	r3, [r2, #12]
		wavegen->wave_pong_compute_ready = 1;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d6:	461a      	mov	r2, r3
 80076d8:	2301      	movs	r3, #1
 80076da:	6153      	str	r3, [r2, #20]
	}
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <VibeCheckWaveGen_StartDemo>:



void VibeCheckWaveGen_StartDemo(VibeCheckWaveGen* wavegen)
{
 80076e8:	b590      	push	{r4, r7, lr}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	Sequencer_Init(&wavegen->sequencer);
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	f241 032c 	movw	r3, #4140	@ 0x102c
 80076f6:	4413      	add	r3, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fa fd61 	bl	80021c0 <Sequencer_Init>
	if (wavegen->demo_num)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <VibeCheckWaveGen_StartDemo+0x36>
		Sequencer_SetSequence(&wavegen->sequencer, demo_times0, sizeof(demo_times0) / sizeof(demo_times0[0]), 1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f241 002c 	movw	r0, #4140	@ 0x102c
 8007710:	4418      	add	r0, r3
 8007712:	2301      	movs	r3, #1
 8007714:	221a      	movs	r2, #26
 8007716:	4916      	ldr	r1, [pc, #88]	@ (8007770 <VibeCheckWaveGen_StartDemo+0x88>)
 8007718:	f7fa fd6e 	bl	80021f8 <Sequencer_SetSequence>
 800771c:	e008      	b.n	8007730 <VibeCheckWaveGen_StartDemo+0x48>
	else
		Sequencer_SetSequence(&wavegen->sequencer, demo_times1, sizeof(demo_times1) / sizeof(demo_times1[0]), 1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f241 002c 	movw	r0, #4140	@ 0x102c
 8007724:	4418      	add	r0, r3
 8007726:	2301      	movs	r3, #1
 8007728:	222d      	movs	r2, #45	@ 0x2d
 800772a:	4912      	ldr	r1, [pc, #72]	@ (8007774 <VibeCheckWaveGen_StartDemo+0x8c>)
 800772c:	f7fa fd64 	bl	80021f8 <Sequencer_SetSequence>
	wavegen->demo_num = !wavegen->demo_num;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800774a:	629a      	str	r2, [r3, #40]	@ 0x28
	Sequencer_Start(&wavegen->sequencer, HAL_GetTick());
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f241 042c 	movw	r4, #4140	@ 0x102c
 8007752:	441c      	add	r4, r3
 8007754:	f000 faf2 	bl	8007d3c <HAL_GetTick>
 8007758:	4603      	mov	r3, r0
 800775a:	4619      	mov	r1, r3
 800775c:	4620      	mov	r0, r4
 800775e:	f7fa fda3 	bl	80022a8 <Sequencer_Start>
	VibeCheckWaveGen_Start(wavegen);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fe6a 	bl	800743c <VibeCheckWaveGen_Start>
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	bd90      	pop	{r4, r7, pc}
 8007770:	0801ebd4 	.word	0x0801ebd4
 8007774:	0801eca4 	.word	0x0801eca4

08007778 <VibeCheckWaveGen_StopDemo>:

void VibeCheckWaveGen_StopDemo(VibeCheckWaveGen* wavegen)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	VibeCheckWaveGen_Stop(wavegen);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fe7d 	bl	8007480 <VibeCheckWaveGen_Stop>
	Sequencer_Stop(&wavegen->sequencer);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	f241 032c 	movw	r3, #4140	@ 0x102c
 800778c:	4413      	add	r3, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa fd9e 	bl	80022d0 <Sequencer_Stop>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <VibeCheckWaveGenCMD_Set>:
*/



static uint32_t VibeCheckWaveGenCMD_Set(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b094      	sub	sp, #80	@ 0x50
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 80077a6:	f107 0310 	add.w	r3, r7, #16
 80077aa:	2240      	movs	r2, #64	@ 0x40
 80077ac:	4619      	mov	r1, r3
 80077ae:	6838      	ldr	r0, [r7, #0]
 80077b0:	f7fe fdf2 	bl	8006398 <VibeCheckShell_GetNextString>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80b0 	beq.w	800791c <VibeCheckWaveGenCMD_Set+0x180>
	{
		if (!strcmp(str, "frequency"))
 80077bc:	f107 0310 	add.w	r3, r7, #16
 80077c0:	4959      	ldr	r1, [pc, #356]	@ (8007928 <VibeCheckWaveGenCMD_Set+0x18c>)
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f8 fda4 	bl	8000310 <strcmp>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d119      	bne.n	8007802 <VibeCheckWaveGenCMD_Set+0x66>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	4619      	mov	r1, r3
 80077d4:	6838      	ldr	r0, [r7, #0]
 80077d6:	f7fe fe73 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 809d 	beq.w	800791c <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetFrequency(wavegen, val);
 80077e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80077e6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fe6a 	bl	80074c4 <VibeCheckWaveGen_SetFrequency>
				VibeCheckShell_PutOutputString(shell, "ack");
 80077f0:	494e      	ldr	r1, [pc, #312]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f7fe fef0 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 80077f8:	6838      	ldr	r0, [r7, #0]
 80077fa:	f7fe ff6d 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	e08d      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "amplitude"))
 8007802:	f107 0310 	add.w	r3, r7, #16
 8007806:	494a      	ldr	r1, [pc, #296]	@ (8007930 <VibeCheckWaveGenCMD_Set+0x194>)
 8007808:	4618      	mov	r0, r3
 800780a:	f7f8 fd81 	bl	8000310 <strcmp>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d118      	bne.n	8007846 <VibeCheckWaveGenCMD_Set+0xaa>
		{
			float val;
			if (VibeCheckShell_GetNextFloat(shell, &val))
 8007814:	f107 0308 	add.w	r3, r7, #8
 8007818:	4619      	mov	r1, r3
 800781a:	6838      	ldr	r0, [r7, #0]
 800781c:	f7fe fe50 	bl	80064c0 <VibeCheckShell_GetNextFloat>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d07a      	beq.n	800791c <VibeCheckWaveGenCMD_Set+0x180>
			{
				VibeCheckWaveGen_SetAmplitude(wavegen, val);
 8007826:	edd7 7a02 	vldr	s15, [r7, #8]
 800782a:	eeb0 0a67 	vmov.f32	s0, s15
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff feb1 	bl	8007596 <VibeCheckWaveGen_SetAmplitude>
				VibeCheckShell_PutOutputString(shell, "ack");
 8007834:	493d      	ldr	r1, [pc, #244]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 8007836:	6838      	ldr	r0, [r7, #0]
 8007838:	f7fe fece 	bl	80065d8 <VibeCheckShell_PutOutputString>
				VibeCheckShell_PutOutputDelimiter(shell);
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f7fe ff4b 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
				return 1;
 8007842:	2301      	movs	r3, #1
 8007844:	e06b      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
			}
		}
		else if (!strcmp(str, "waveform"))
 8007846:	f107 0310 	add.w	r3, r7, #16
 800784a:	493a      	ldr	r1, [pc, #232]	@ (8007934 <VibeCheckWaveGenCMD_Set+0x198>)
 800784c:	4618      	mov	r0, r3
 800784e:	f7f8 fd5f 	bl	8000310 <strcmp>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d161      	bne.n	800791c <VibeCheckWaveGenCMD_Set+0x180>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007858:	f107 0310 	add.w	r3, r7, #16
 800785c:	2240      	movs	r2, #64	@ 0x40
 800785e:	4619      	mov	r1, r3
 8007860:	6838      	ldr	r0, [r7, #0]
 8007862:	f7fe fd99 	bl	8006398 <VibeCheckShell_GetNextString>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d057      	beq.n	800791c <VibeCheckWaveGenCMD_Set+0x180>
			{
				if (!strcmp(str, "sine"))
 800786c:	f107 0310 	add.w	r3, r7, #16
 8007870:	4931      	ldr	r1, [pc, #196]	@ (8007938 <VibeCheckWaveGenCMD_Set+0x19c>)
 8007872:	4618      	mov	r0, r3
 8007874:	f7f8 fd4c 	bl	8000310 <strcmp>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10c      	bne.n	8007898 <VibeCheckWaveGenCMD_Set+0xfc>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SINE);
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fecd 	bl	8007620 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007886:	4929      	ldr	r1, [pc, #164]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 8007888:	6838      	ldr	r0, [r7, #0]
 800788a:	f7fe fea5 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 800788e:	6838      	ldr	r0, [r7, #0]
 8007890:	f7fe ff22 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007894:	2301      	movs	r3, #1
 8007896:	e042      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "square"))
 8007898:	f107 0310 	add.w	r3, r7, #16
 800789c:	4927      	ldr	r1, [pc, #156]	@ (800793c <VibeCheckWaveGenCMD_Set+0x1a0>)
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f8 fd36 	bl	8000310 <strcmp>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <VibeCheckWaveGenCMD_Set+0x128>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SQUARE);
 80078aa:	2101      	movs	r1, #1
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff feb7 	bl	8007620 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80078b2:	491e      	ldr	r1, [pc, #120]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 80078b4:	6838      	ldr	r0, [r7, #0]
 80078b6:	f7fe fe8f 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80078ba:	6838      	ldr	r0, [r7, #0]
 80078bc:	f7fe ff0c 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e02c      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "saw"))
 80078c4:	f107 0310 	add.w	r3, r7, #16
 80078c8:	491d      	ldr	r1, [pc, #116]	@ (8007940 <VibeCheckWaveGenCMD_Set+0x1a4>)
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7f8 fd20 	bl	8000310 <strcmp>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10c      	bne.n	80078f0 <VibeCheckWaveGenCMD_Set+0x154>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_SAW);
 80078d6:	2102      	movs	r1, #2
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff fea1 	bl	8007620 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 80078de:	4913      	ldr	r1, [pc, #76]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 80078e0:	6838      	ldr	r0, [r7, #0]
 80078e2:	f7fe fe79 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f7fe fef6 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e016      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
				}
				else if (!strcmp(str, "triangle"))
 80078f0:	f107 0310 	add.w	r3, r7, #16
 80078f4:	4913      	ldr	r1, [pc, #76]	@ (8007944 <VibeCheckWaveGenCMD_Set+0x1a8>)
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7f8 fd0a 	bl	8000310 <strcmp>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10c      	bne.n	800791c <VibeCheckWaveGenCMD_Set+0x180>
				{
					VibeCheckWaveGen_SetWaveform(wavegen, VC_WAVE_TRIANGLE);
 8007902:	2103      	movs	r1, #3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff fe8b 	bl	8007620 <VibeCheckWaveGen_SetWaveform>
					VibeCheckShell_PutOutputString(shell, "ack");
 800790a:	4908      	ldr	r1, [pc, #32]	@ (800792c <VibeCheckWaveGenCMD_Set+0x190>)
 800790c:	6838      	ldr	r0, [r7, #0]
 800790e:	f7fe fe63 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007912:	6838      	ldr	r0, [r7, #0]
 8007914:	f7fe fee0 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <VibeCheckWaveGenCMD_Set+0x182>
				}
			}
		}
	}

	return 0;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3750      	adds	r7, #80	@ 0x50
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	0801e300 	.word	0x0801e300
 800792c:	0801e30c 	.word	0x0801e30c
 8007930:	0801e310 	.word	0x0801e310
 8007934:	0801e31c 	.word	0x0801e31c
 8007938:	0801e328 	.word	0x0801e328
 800793c:	0801e330 	.word	0x0801e330
 8007940:	0801e338 	.word	0x0801e338
 8007944:	0801e33c 	.word	0x0801e33c

08007948 <VibeCheckWaveGenCMD_Get>:

static uint32_t VibeCheckWaveGenCMD_Get(VibeCheckWaveGen* wavegen, VibeCheckShell* shell)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b092      	sub	sp, #72	@ 0x48
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	2240      	movs	r2, #64	@ 0x40
 8007958:	4619      	mov	r1, r3
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f7fe fd1c 	bl	8006398 <VibeCheckShell_GetNextString>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d077      	beq.n	8007a56 <VibeCheckWaveGenCMD_Get+0x10e>
	{
		if (!strcmp(str, "frequency"))
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	493d      	ldr	r1, [pc, #244]	@ (8007a60 <VibeCheckWaveGenCMD_Get+0x118>)
 800796c:	4618      	mov	r0, r3
 800796e:	f7f8 fccf 	bl	8000310 <strcmp>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d115      	bne.n	80079a4 <VibeCheckWaveGenCMD_Get+0x5c>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 8007978:	493a      	ldr	r1, [pc, #232]	@ (8007a64 <VibeCheckWaveGenCMD_Get+0x11c>)
 800797a:	6838      	ldr	r0, [r7, #0]
 800797c:	f7fe fe2c 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 8007980:	6838      	ldr	r0, [r7, #0]
 8007982:	f7fe fe9b 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetFrequency(wavegen));
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fdf4 	bl	8007574 <VibeCheckWaveGen_GetFrequency>
 800798c:	eef0 7a40 	vmov.f32	s15, s0
 8007990:	eeb0 0a67 	vmov.f32	s0, s15
 8007994:	6838      	ldr	r0, [r7, #0]
 8007996:	f7fe fe73 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 800799a:	6838      	ldr	r0, [r7, #0]
 800799c:	f7fe fe9c 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e059      	b.n	8007a58 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "amplitude"))
 80079a4:	f107 0308 	add.w	r3, r7, #8
 80079a8:	492f      	ldr	r1, [pc, #188]	@ (8007a68 <VibeCheckWaveGenCMD_Get+0x120>)
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 fcb0 	bl	8000310 <strcmp>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d115      	bne.n	80079e2 <VibeCheckWaveGenCMD_Get+0x9a>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80079b6:	492b      	ldr	r1, [pc, #172]	@ (8007a64 <VibeCheckWaveGenCMD_Get+0x11c>)
 80079b8:	6838      	ldr	r0, [r7, #0]
 80079ba:	f7fe fe0d 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80079be:	6838      	ldr	r0, [r7, #0]
 80079c0:	f7fe fe7c 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			VibeCheckShell_PutOutputFloat(shell, VibeCheckWaveGen_GetAmplitude(wavegen));
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fe1a 	bl	80075fe <VibeCheckWaveGen_GetAmplitude>
 80079ca:	eef0 7a40 	vmov.f32	s15, s0
 80079ce:	eeb0 0a67 	vmov.f32	s0, s15
 80079d2:	6838      	ldr	r0, [r7, #0]
 80079d4:	f7fe fe54 	bl	8006680 <VibeCheckShell_PutOutputFloat>
			VibeCheckShell_PutOutputDelimiter(shell);
 80079d8:	6838      	ldr	r0, [r7, #0]
 80079da:	f7fe fe7d 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 80079de:	2301      	movs	r3, #1
 80079e0:	e03a      	b.n	8007a58 <VibeCheckWaveGenCMD_Get+0x110>
		}
		else if (!strcmp(str, "waveform"))
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4921      	ldr	r1, [pc, #132]	@ (8007a6c <VibeCheckWaveGenCMD_Get+0x124>)
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7f8 fc91 	bl	8000310 <strcmp>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d130      	bne.n	8007a56 <VibeCheckWaveGenCMD_Get+0x10e>
		{
			VibeCheckShell_PutOutputString(shell, "ack");
 80079f4:	491b      	ldr	r1, [pc, #108]	@ (8007a64 <VibeCheckWaveGenCMD_Get+0x11c>)
 80079f6:	6838      	ldr	r0, [r7, #0]
 80079f8:	f7fe fdee 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputSeparator(shell);
 80079fc:	6838      	ldr	r0, [r7, #0]
 80079fe:	f7fe fe5d 	bl	80066bc <VibeCheckShell_PutOutputSeparator>
			switch (VibeCheckWaveGen_GetWaveform(wavegen))
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe2a 	bl	800765c <VibeCheckWaveGen_GetWaveform>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d81e      	bhi.n	8007a4c <VibeCheckWaveGenCMD_Get+0x104>
 8007a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <VibeCheckWaveGenCMD_Get+0xcc>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a2f 	.word	0x08007a2f
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a43 	.word	0x08007a43
			{
			case VC_WAVE_SINE:
				VibeCheckShell_PutOutputString(shell, "sine");
 8007a24:	4912      	ldr	r1, [pc, #72]	@ (8007a70 <VibeCheckWaveGenCMD_Get+0x128>)
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f7fe fdd6 	bl	80065d8 <VibeCheckShell_PutOutputString>
				break;
 8007a2c:	e00e      	b.n	8007a4c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SQUARE:
				VibeCheckShell_PutOutputString(shell, "square");
 8007a2e:	4911      	ldr	r1, [pc, #68]	@ (8007a74 <VibeCheckWaveGenCMD_Get+0x12c>)
 8007a30:	6838      	ldr	r0, [r7, #0]
 8007a32:	f7fe fdd1 	bl	80065d8 <VibeCheckShell_PutOutputString>
				break;
 8007a36:	e009      	b.n	8007a4c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_SAW:
				VibeCheckShell_PutOutputString(shell, "saw");
 8007a38:	490f      	ldr	r1, [pc, #60]	@ (8007a78 <VibeCheckWaveGenCMD_Get+0x130>)
 8007a3a:	6838      	ldr	r0, [r7, #0]
 8007a3c:	f7fe fdcc 	bl	80065d8 <VibeCheckShell_PutOutputString>
				break;
 8007a40:	e004      	b.n	8007a4c <VibeCheckWaveGenCMD_Get+0x104>
			case VC_WAVE_TRIANGLE:
				VibeCheckShell_PutOutputString(shell, "triangle");
 8007a42:	490e      	ldr	r1, [pc, #56]	@ (8007a7c <VibeCheckWaveGenCMD_Get+0x134>)
 8007a44:	6838      	ldr	r0, [r7, #0]
 8007a46:	f7fe fdc7 	bl	80065d8 <VibeCheckShell_PutOutputString>
				break;
 8007a4a:	bf00      	nop
			}
			VibeCheckShell_PutOutputDelimiter(shell);
 8007a4c:	6838      	ldr	r0, [r7, #0]
 8007a4e:	f7fe fe43 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <VibeCheckWaveGenCMD_Get+0x110>
		}
	}

	return 0;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3748      	adds	r7, #72	@ 0x48
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	0801e300 	.word	0x0801e300
 8007a64:	0801e30c 	.word	0x0801e30c
 8007a68:	0801e310 	.word	0x0801e310
 8007a6c:	0801e31c 	.word	0x0801e31c
 8007a70:	0801e328 	.word	0x0801e328
 8007a74:	0801e330 	.word	0x0801e330
 8007a78:	0801e338 	.word	0x0801e338
 8007a7c:	0801e33c 	.word	0x0801e33c

08007a80 <VibeCheckWaveGenCMD_Execute>:


uint32_t VibeCheckWaveGenCMD_Execute(void* obj, VibeCheckShell* shell)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b094      	sub	sp, #80	@ 0x50
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	VibeCheckWaveGen* wavegen = (VibeCheckWaveGen*)obj;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	char str[VC_SHELL_MAX_TOKEN_LEN];
	if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007a8e:	f107 030c 	add.w	r3, r7, #12
 8007a92:	2240      	movs	r2, #64	@ 0x40
 8007a94:	4619      	mov	r1, r3
 8007a96:	6838      	ldr	r0, [r7, #0]
 8007a98:	f7fe fc7e 	bl	8006398 <VibeCheckShell_GetNextString>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 808b 	beq.w	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
	{
		if (!strcmp(str, "start"))
 8007aa4:	f107 030c 	add.w	r3, r7, #12
 8007aa8:	4946      	ldr	r1, [pc, #280]	@ (8007bc4 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7f8 fc30 	bl	8000310 <strcmp>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <VibeCheckWaveGenCMD_Execute+0x4e>
		{
			VibeCheckWaveGen_Start(wavegen);
 8007ab6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007ab8:	f7ff fcc0 	bl	800743c <VibeCheckWaveGen_Start>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007abc:	4942      	ldr	r1, [pc, #264]	@ (8007bc8 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007abe:	6838      	ldr	r0, [r7, #0]
 8007ac0:	f7fe fd8a 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007ac4:	6838      	ldr	r0, [r7, #0]
 8007ac6:	f7fe fe07 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e076      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "stop"))
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	493e      	ldr	r1, [pc, #248]	@ (8007bcc <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7f8 fc1b 	bl	8000310 <strcmp>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <VibeCheckWaveGenCMD_Execute+0x78>
		{
			VibeCheckWaveGen_Stop(wavegen);
 8007ae0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007ae2:	f7ff fccd 	bl	8007480 <VibeCheckWaveGen_Stop>
			VibeCheckShell_PutOutputString(shell, "ack");
 8007ae6:	4938      	ldr	r1, [pc, #224]	@ (8007bc8 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007ae8:	6838      	ldr	r0, [r7, #0]
 8007aea:	f7fe fd75 	bl	80065d8 <VibeCheckShell_PutOutputString>
			VibeCheckShell_PutOutputDelimiter(shell);
 8007aee:	6838      	ldr	r0, [r7, #0]
 8007af0:	f7fe fdf2 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
			return 1;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e061      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
		}
		else if (!strcmp(str, "set"))
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	4934      	ldr	r1, [pc, #208]	@ (8007bd0 <VibeCheckWaveGenCMD_Execute+0x150>)
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f8 fc06 	bl	8000310 <strcmp>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d108      	bne.n	8007b1c <VibeCheckWaveGenCMD_Execute+0x9c>
		{
			if (VibeCheckWaveGenCMD_Set(wavegen, shell))
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007b0e:	f7ff fe45 	bl	800779c <VibeCheckWaveGenCMD_Set>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d050      	beq.n	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e04f      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "get"))
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	492c      	ldr	r1, [pc, #176]	@ (8007bd4 <VibeCheckWaveGenCMD_Execute+0x154>)
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f8 fbf4 	bl	8000310 <strcmp>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d108      	bne.n	8007b40 <VibeCheckWaveGenCMD_Execute+0xc0>
		{
			if (VibeCheckWaveGenCMD_Get(wavegen, shell))
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007b32:	f7ff ff09 	bl	8007948 <VibeCheckWaveGenCMD_Get>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d03e      	beq.n	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				return 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e03d      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
			}
		}
		else if (!strcmp(str, "demo"))
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4924      	ldr	r1, [pc, #144]	@ (8007bd8 <VibeCheckWaveGenCMD_Execute+0x158>)
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7f8 fbe2 	bl	8000310 <strcmp>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d133      	bne.n	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
		{
			if (VibeCheckShell_GetNextString(shell, str, VC_SHELL_MAX_TOKEN_LEN))
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	2240      	movs	r2, #64	@ 0x40
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6838      	ldr	r0, [r7, #0]
 8007b5c:	f7fe fc1c 	bl	8006398 <VibeCheckShell_GetNextString>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d029      	beq.n	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
			{
				if (!strcmp(str, "start"))
 8007b66:	f107 030c 	add.w	r3, r7, #12
 8007b6a:	4916      	ldr	r1, [pc, #88]	@ (8007bc4 <VibeCheckWaveGenCMD_Execute+0x144>)
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7f8 fbcf 	bl	8000310 <strcmp>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <VibeCheckWaveGenCMD_Execute+0x110>
				{
					VibeCheckWaveGen_StartDemo(wavegen);
 8007b78:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007b7a:	f7ff fdb5 	bl	80076e8 <VibeCheckWaveGen_StartDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007b7e:	4912      	ldr	r1, [pc, #72]	@ (8007bc8 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007b80:	6838      	ldr	r0, [r7, #0]
 8007b82:	f7fe fd29 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007b86:	6838      	ldr	r0, [r7, #0]
 8007b88:	f7fe fda6 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e015      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
				}
				else if (!strcmp(str, "stop"))
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	490d      	ldr	r1, [pc, #52]	@ (8007bcc <VibeCheckWaveGenCMD_Execute+0x14c>)
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7f8 fbba 	bl	8000310 <strcmp>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10b      	bne.n	8007bba <VibeCheckWaveGenCMD_Execute+0x13a>
				{
					VibeCheckWaveGen_StopDemo(wavegen);
 8007ba2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007ba4:	f7ff fde8 	bl	8007778 <VibeCheckWaveGen_StopDemo>
					VibeCheckShell_PutOutputString(shell, "ack");
 8007ba8:	4907      	ldr	r1, [pc, #28]	@ (8007bc8 <VibeCheckWaveGenCMD_Execute+0x148>)
 8007baa:	6838      	ldr	r0, [r7, #0]
 8007bac:	f7fe fd14 	bl	80065d8 <VibeCheckShell_PutOutputString>
					VibeCheckShell_PutOutputDelimiter(shell);
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f7fe fd91 	bl	80066d8 <VibeCheckShell_PutOutputDelimiter>
					return 1;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <VibeCheckWaveGenCMD_Execute+0x13c>
				}
			}
		}
	}

	return 0;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3750      	adds	r7, #80	@ 0x50
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	0801e348 	.word	0x0801e348
 8007bc8:	0801e30c 	.word	0x0801e30c
 8007bcc:	0801e350 	.word	0x0801e350
 8007bd0:	0801e358 	.word	0x0801e358
 8007bd4:	0801e35c 	.word	0x0801e35c
 8007bd8:	0801e360 	.word	0x0801e360

08007bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007be0:	f7fb f968 	bl	8002eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007be4:	480c      	ldr	r0, [pc, #48]	@ (8007c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007be6:	490d      	ldr	r1, [pc, #52]	@ (8007c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007be8:	4a0d      	ldr	r2, [pc, #52]	@ (8007c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007bec:	e002      	b.n	8007bf4 <LoopCopyDataInit>

08007bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bf2:	3304      	adds	r3, #4

08007bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bf8:	d3f9      	bcc.n	8007bee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8007c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8007c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c00:	e001      	b.n	8007c06 <LoopFillZerobss>

08007c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c04:	3204      	adds	r2, #4

08007c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c08:	d3fb      	bcc.n	8007c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007c0a:	f012 ff41 	bl	801aa90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c0e:	f7f9 fb7d 	bl	800130c <main>
  bx  lr
 8007c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8007c18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007c1c:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 8007c20:	0801f588 	.word	0x0801f588
  ldr r2, =_sbss
 8007c24:	240002fc 	.word	0x240002fc
  ldr r4, =_ebss
 8007c28:	2401da40 	.word	0x2401da40

08007c2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c2c:	e7fe      	b.n	8007c2c <ADC3_IRQHandler>
	...

08007c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c36:	2003      	movs	r0, #3
 8007c38:	f001 fcf4 	bl	8009624 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007c3c:	f006 fcd6 	bl	800e5ec <HAL_RCC_GetSysClockFreq>
 8007c40:	4602      	mov	r2, r0
 8007c42:	4b15      	ldr	r3, [pc, #84]	@ (8007c98 <HAL_Init+0x68>)
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	4913      	ldr	r1, [pc, #76]	@ (8007c9c <HAL_Init+0x6c>)
 8007c4e:	5ccb      	ldrb	r3, [r1, r3]
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	fa22 f303 	lsr.w	r3, r2, r3
 8007c58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c98 <HAL_Init+0x68>)
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	4a0e      	ldr	r2, [pc, #56]	@ (8007c9c <HAL_Init+0x6c>)
 8007c64:	5cd3      	ldrb	r3, [r2, r3]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c70:	4a0b      	ldr	r2, [pc, #44]	@ (8007ca0 <HAL_Init+0x70>)
 8007c72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c74:	4a0b      	ldr	r2, [pc, #44]	@ (8007ca4 <HAL_Init+0x74>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c7a:	2002      	movs	r0, #2
 8007c7c:	f000 f814 	bl	8007ca8 <HAL_InitTick>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e002      	b.n	8007c90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007c8a:	f7fa fb3b 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	0801e39c 	.word	0x0801e39c
 8007ca0:	24000004 	.word	0x24000004
 8007ca4:	24000000 	.word	0x24000000

08007ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007cb0:	4b15      	ldr	r3, [pc, #84]	@ (8007d08 <HAL_InitTick+0x60>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e021      	b.n	8007d00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007cbc:	4b13      	ldr	r3, [pc, #76]	@ (8007d0c <HAL_InitTick+0x64>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_InitTick+0x60>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fcd9 	bl	800968a <HAL_SYSTICK_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e00e      	b.n	8007d00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b0f      	cmp	r3, #15
 8007ce6:	d80a      	bhi.n	8007cfe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ce8:	2200      	movs	r2, #0
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf0:	f001 fca3 	bl	800963a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cf4:	4a06      	ldr	r2, [pc, #24]	@ (8007d10 <HAL_InitTick+0x68>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e000      	b.n	8007d00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	2400003c 	.word	0x2400003c
 8007d0c:	24000000 	.word	0x24000000
 8007d10:	24000038 	.word	0x24000038

08007d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007d18:	4b06      	ldr	r3, [pc, #24]	@ (8007d34 <HAL_IncTick+0x20>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <HAL_IncTick+0x24>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4413      	add	r3, r2
 8007d24:	4a04      	ldr	r2, [pc, #16]	@ (8007d38 <HAL_IncTick+0x24>)
 8007d26:	6013      	str	r3, [r2, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	2400003c 	.word	0x2400003c
 8007d38:	2401450c 	.word	0x2401450c

08007d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8007d40:	4b03      	ldr	r3, [pc, #12]	@ (8007d50 <HAL_GetTick+0x14>)
 8007d42:	681b      	ldr	r3, [r3, #0]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	2401450c 	.word	0x2401450c

08007d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d5c:	f7ff ffee 	bl	8007d3c <HAL_GetTick>
 8007d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d005      	beq.n	8007d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <HAL_Delay+0x44>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d7a:	bf00      	nop
 8007d7c:	f7ff ffde 	bl	8007d3c <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d8f7      	bhi.n	8007d7c <HAL_Delay+0x28>
  {
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2400003c 	.word	0x2400003c

08007d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	609a      	str	r2, [r3, #8]
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	609a      	str	r2, [r3, #8]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3360      	adds	r3, #96	@ 0x60
 8007e16:	461a      	mov	r2, r3
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a10      	ldr	r2, [pc, #64]	@ (8007e64 <LL_ADC_SetOffset+0x60>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d10b      	bne.n	8007e40 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007e3e:	e00b      	b.n	8007e58 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	430b      	orrs	r3, r1
 8007e52:	431a      	orrs	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	601a      	str	r2, [r3, #0]
}
 8007e58:	bf00      	nop
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	58026000 	.word	0x58026000

08007e68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3360      	adds	r3, #96	@ 0x60
 8007e76:	461a      	mov	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	611a      	str	r2, [r3, #16]
}
 8007eba:	bf00      	nop
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f08 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3360      	adds	r3, #96	@ 0x60
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	601a      	str	r2, [r3, #0]
  }
}
 8007efa:	bf00      	nop
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	58026000 	.word	0x58026000

08007f0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f4c <LL_ADC_SetOffsetSaturation+0x40>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10e      	bne.n	8007f3e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3360      	adds	r3, #96	@ 0x60
 8007f24:	461a      	mov	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	58026000 	.word	0x58026000

08007f50 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f90 <LL_ADC_SetOffsetSign+0x40>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d10e      	bne.n	8007f82 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3360      	adds	r3, #96	@ 0x60
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007f82:	bf00      	nop
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	58026000 	.word	0x58026000

08007f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3360      	adds	r3, #96	@ 0x60
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe4 <LL_ADC_SetOffsetState+0x50>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d108      	bne.n	8007fc8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8007fc6:	e007      	b.n	8007fd8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	601a      	str	r2, [r3, #0]
}
 8007fd8:	bf00      	nop
 8007fda:	371c      	adds	r7, #28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	58026000 	.word	0x58026000

08007fe8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3330      	adds	r3, #48	@ 0x30
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	0a1b      	lsrs	r3, r3, #8
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	f003 030c 	and.w	r3, r3, #12
 8008004:	4413      	add	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	211f      	movs	r1, #31
 8008014:	fa01 f303 	lsl.w	r3, r1, r3
 8008018:	43db      	mvns	r3, r3
 800801a:	401a      	ands	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	0e9b      	lsrs	r3, r3, #26
 8008020:	f003 011f 	and.w	r1, r3, #31
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	fa01 f303 	lsl.w	r3, r1, r3
 800802e:	431a      	orrs	r2, r3
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3314      	adds	r3, #20
 8008050:	461a      	mov	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	0e5b      	lsrs	r3, r3, #25
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	4413      	add	r3, r2
 800805e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	0d1b      	lsrs	r3, r3, #20
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2107      	movs	r1, #7
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	43db      	mvns	r3, r3
 8008074:	401a      	ands	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	0d1b      	lsrs	r3, r3, #20
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	431a      	orrs	r2, r3
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800808a:	bf00      	nop
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008110 <LL_ADC_SetChannelSingleDiff+0x78>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d115      	bne.n	80080d8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	43db      	mvns	r3, r3
 80080ba:	401a      	ands	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f003 0318 	and.w	r3, r3, #24
 80080c2:	4914      	ldr	r1, [pc, #80]	@ (8008114 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80080c4:	40d9      	lsrs	r1, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	400b      	ands	r3, r1
 80080ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80080d6:	e014      	b.n	8008102 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e4:	43db      	mvns	r3, r3
 80080e6:	401a      	ands	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f003 0318 	and.w	r3, r3, #24
 80080ee:	4909      	ldr	r1, [pc, #36]	@ (8008114 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80080f0:	40d9      	lsrs	r1, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	400b      	ands	r3, r1
 80080f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fa:	431a      	orrs	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	58026000 	.word	0x58026000
 8008114:	000fffff 	.word	0x000fffff

08008118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	4b04      	ldr	r3, [pc, #16]	@ (8008138 <LL_ADC_DisableDeepPowerDown+0x20>)
 8008126:	4013      	ands	r3, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6093      	str	r3, [r2, #8]
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	5fffffc0 	.word	0x5fffffc0

0800813c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008150:	d101      	bne.n	8008156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689a      	ldr	r2, [r3, #8]
 8008170:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <LL_ADC_EnableInternalRegulator+0x24>)
 8008172:	4013      	ands	r3, r2
 8008174:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	6fffffc0 	.word	0x6fffffc0

0800818c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800819c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a0:	d101      	bne.n	80081a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <LL_ADC_IsEnabled+0x18>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <LL_ADC_IsEnabled+0x1a>
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d101      	bne.n	80081f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b08      	cmp	r3, #8
 8008212:	d101      	bne.n	8008218 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b089      	sub	sp, #36	@ 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008234:	2300      	movs	r3, #0
 8008236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e1ee      	b.n	8008620 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fa f873 	bl	800233c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff ff67 	bl	800813c <LL_ADC_IsDeepPowerDownEnabled>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff ff4d 	bl	8008118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ff82 	bl	800818c <LL_ADC_IsInternalRegulatorEnabled>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d114      	bne.n	80082b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff ff66 	bl	8008164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008298:	4b8e      	ldr	r3, [pc, #568]	@ (80084d4 <HAL_ADC_Init+0x2ac>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	099b      	lsrs	r3, r3, #6
 800829e:	4a8e      	ldr	r2, [pc, #568]	@ (80084d8 <HAL_ADC_Init+0x2b0>)
 80082a0:	fba2 2303 	umull	r2, r3, r2, r3
 80082a4:	099b      	lsrs	r3, r3, #6
 80082a6:	3301      	adds	r3, #1
 80082a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80082aa:	e002      	b.n	80082b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1f9      	bne.n	80082ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff ff65 	bl	800818c <LL_ADC_IsInternalRegulatorEnabled>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10d      	bne.n	80082e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082cc:	f043 0210 	orr.w	r2, r3, #16
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082d8:	f043 0201 	orr.w	r2, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff ff76 	bl	80081da <LL_ADC_REG_IsConversionOngoing>
 80082ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f040 8188 	bne.w	800860e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 8184 	bne.w	800860e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800830e:	f043 0202 	orr.w	r2, r3, #2
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f7ff ff4a 	bl	80081b4 <LL_ADC_IsEnabled>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d136      	bne.n	8008394 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a6c      	ldr	r2, [pc, #432]	@ (80084dc <HAL_ADC_Init+0x2b4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_ADC_Init+0x112>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a6a      	ldr	r2, [pc, #424]	@ (80084e0 <HAL_ADC_Init+0x2b8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10e      	bne.n	8008358 <HAL_ADC_Init+0x130>
 800833a:	4868      	ldr	r0, [pc, #416]	@ (80084dc <HAL_ADC_Init+0x2b4>)
 800833c:	f7ff ff3a 	bl	80081b4 <LL_ADC_IsEnabled>
 8008340:	4604      	mov	r4, r0
 8008342:	4867      	ldr	r0, [pc, #412]	@ (80084e0 <HAL_ADC_Init+0x2b8>)
 8008344:	f7ff ff36 	bl	80081b4 <LL_ADC_IsEnabled>
 8008348:	4603      	mov	r3, r0
 800834a:	4323      	orrs	r3, r4
 800834c:	2b00      	cmp	r3, #0
 800834e:	bf0c      	ite	eq
 8008350:	2301      	moveq	r3, #1
 8008352:	2300      	movne	r3, #0
 8008354:	b2db      	uxtb	r3, r3
 8008356:	e008      	b.n	800836a <HAL_ADC_Init+0x142>
 8008358:	4862      	ldr	r0, [pc, #392]	@ (80084e4 <HAL_ADC_Init+0x2bc>)
 800835a:	f7ff ff2b 	bl	80081b4 <LL_ADC_IsEnabled>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d012      	beq.n	8008394 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a5a      	ldr	r2, [pc, #360]	@ (80084dc <HAL_ADC_Init+0x2b4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_ADC_Init+0x15a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a58      	ldr	r2, [pc, #352]	@ (80084e0 <HAL_ADC_Init+0x2b8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d101      	bne.n	8008386 <HAL_ADC_Init+0x15e>
 8008382:	4a59      	ldr	r2, [pc, #356]	@ (80084e8 <HAL_ADC_Init+0x2c0>)
 8008384:	e000      	b.n	8008388 <HAL_ADC_Init+0x160>
 8008386:	4a59      	ldr	r2, [pc, #356]	@ (80084ec <HAL_ADC_Init+0x2c4>)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7ff fd04 	bl	8007d9c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a52      	ldr	r2, [pc, #328]	@ (80084e4 <HAL_ADC_Init+0x2bc>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d129      	bne.n	80083f2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7e5b      	ldrb	r3, [r3, #25]
 80083a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80083a8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80083ae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d013      	beq.n	80083e0 <HAL_ADC_Init+0x1b8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b0c      	cmp	r3, #12
 80083be:	d00d      	beq.n	80083dc <HAL_ADC_Init+0x1b4>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b1c      	cmp	r3, #28
 80083c6:	d007      	beq.n	80083d8 <HAL_ADC_Init+0x1b0>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b18      	cmp	r3, #24
 80083ce:	d101      	bne.n	80083d4 <HAL_ADC_Init+0x1ac>
 80083d0:	2318      	movs	r3, #24
 80083d2:	e006      	b.n	80083e2 <HAL_ADC_Init+0x1ba>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e004      	b.n	80083e2 <HAL_ADC_Init+0x1ba>
 80083d8:	2310      	movs	r3, #16
 80083da:	e002      	b.n	80083e2 <HAL_ADC_Init+0x1ba>
 80083dc:	2308      	movs	r3, #8
 80083de:	e000      	b.n	80083e2 <HAL_ADC_Init+0x1ba>
 80083e0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80083e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80083ec:	4313      	orrs	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e00e      	b.n	8008410 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7e5b      	ldrb	r3, [r3, #25]
 80083f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80083fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8008402:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800840a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800840c:	4313      	orrs	r3, r2
 800840e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d106      	bne.n	8008428 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	3b01      	subs	r3, #1
 8008420:	045b      	lsls	r3, r3, #17
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4313      	orrs	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	2b00      	cmp	r3, #0
 800842e:	d009      	beq.n	8008444 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a26      	ldr	r2, [pc, #152]	@ (80084e4 <HAL_ADC_Init+0x2bc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d115      	bne.n	800847a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	4b26      	ldr	r3, [pc, #152]	@ (80084f0 <HAL_ADC_Init+0x2c8>)
 8008456:	4013      	ands	r3, r2
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6812      	ldr	r2, [r2, #0]
 800845c:	69b9      	ldr	r1, [r7, #24]
 800845e:	430b      	orrs	r3, r1
 8008460:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	611a      	str	r2, [r3, #16]
 8008478:	e009      	b.n	800848e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	4b1c      	ldr	r3, [pc, #112]	@ (80084f4 <HAL_ADC_Init+0x2cc>)
 8008482:	4013      	ands	r3, r2
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6812      	ldr	r2, [r2, #0]
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	430b      	orrs	r3, r1
 800848c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fea1 	bl	80081da <LL_ADC_REG_IsConversionOngoing>
 8008498:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff feae 	bl	8008200 <LL_ADC_INJ_IsConversionOngoing>
 80084a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 808e 	bne.w	80085ca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 808a 	bne.w	80085ca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a0a      	ldr	r2, [pc, #40]	@ (80084e4 <HAL_ADC_Init+0x2bc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d11b      	bne.n	80084f8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7e1b      	ldrb	r3, [r3, #24]
 80084c4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80084cc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80084ce:	4313      	orrs	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e018      	b.n	8008506 <HAL_ADC_Init+0x2de>
 80084d4:	24000000 	.word	0x24000000
 80084d8:	053e2d63 	.word	0x053e2d63
 80084dc:	40022000 	.word	0x40022000
 80084e0:	40022100 	.word	0x40022100
 80084e4:	58026000 	.word	0x58026000
 80084e8:	40022300 	.word	0x40022300
 80084ec:	58026300 	.word	0x58026300
 80084f0:	fff04007 	.word	0xfff04007
 80084f4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	7e1b      	ldrb	r3, [r3, #24]
 80084fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8008502:	4313      	orrs	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	4b46      	ldr	r3, [pc, #280]	@ (8008628 <HAL_ADC_Init+0x400>)
 800850e:	4013      	ands	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	69b9      	ldr	r1, [r7, #24]
 8008516:	430b      	orrs	r3, r1
 8008518:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008520:	2b01      	cmp	r3, #1
 8008522:	d137      	bne.n	8008594 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a3f      	ldr	r2, [pc, #252]	@ (800862c <HAL_ADC_Init+0x404>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d116      	bne.n	8008562 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691a      	ldr	r2, [r3, #16]
 800853a:	4b3d      	ldr	r3, [pc, #244]	@ (8008630 <HAL_ADC_Init+0x408>)
 800853c:	4013      	ands	r3, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008546:	4311      	orrs	r1, r2
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800854c:	4311      	orrs	r1, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008552:	430a      	orrs	r2, r1
 8008554:	431a      	orrs	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0201 	orr.w	r2, r2, #1
 800855e:	611a      	str	r2, [r3, #16]
 8008560:	e020      	b.n	80085a4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	4b32      	ldr	r3, [pc, #200]	@ (8008634 <HAL_ADC_Init+0x40c>)
 800856a:	4013      	ands	r3, r2
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008570:	3a01      	subs	r2, #1
 8008572:	0411      	lsls	r1, r2, #16
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008578:	4311      	orrs	r1, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800857e:	4311      	orrs	r1, r2
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008584:	430a      	orrs	r2, r1
 8008586:	431a      	orrs	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0201 	orr.w	r2, r2, #1
 8008590:	611a      	str	r2, [r3, #16]
 8008592:	e007      	b.n	80085a4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0201 	bic.w	r2, r2, #1
 80085a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1b      	ldr	r2, [pc, #108]	@ (800862c <HAL_ADC_Init+0x404>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d002      	beq.n	80085ca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fd67 	bl	8009098 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d10c      	bne.n	80085ec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d8:	f023 010f 	bic.w	r1, r3, #15
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	1e5a      	subs	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80085ea:	e007      	b.n	80085fc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 020f 	bic.w	r2, r2, #15
 80085fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	f043 0201 	orr.w	r2, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	661a      	str	r2, [r3, #96]	@ 0x60
 800860c:	e007      	b.n	800861e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008612:	f043 0210 	orr.w	r2, r3, #16
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800861e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3724      	adds	r7, #36	@ 0x24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd90      	pop	{r4, r7, pc}
 8008628:	ffffbffc 	.word	0xffffbffc
 800862c:	58026000 	.word	0x58026000
 8008630:	fc00f81f 	.word	0xfc00f81f
 8008634:	fc00f81e 	.word	0xfc00f81e

08008638 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b0b9      	sub	sp, #228	@ 0xe4
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008652:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	4aab      	ldr	r2, [pc, #684]	@ (8008908 <HAL_ADC_ConfigChannel+0x2d0>)
 800865a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d102      	bne.n	800866c <HAL_ADC_ConfigChannel+0x34>
 8008666:	2302      	movs	r3, #2
 8008668:	f000 bcfe 	b.w	8009068 <HAL_ADC_ConfigChannel+0xa30>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fdae 	bl	80081da <LL_ADC_REG_IsConversionOngoing>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	f040 84e2 	bne.w	800904a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	db38      	blt.n	8008700 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a9e      	ldr	r2, [pc, #632]	@ (800890c <HAL_ADC_ConfigChannel+0x2d4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d033      	beq.n	8008700 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d108      	bne.n	80086b6 <HAL_ADC_ConfigChannel+0x7e>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	0e9b      	lsrs	r3, r3, #26
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	e01d      	b.n	80086f2 <HAL_ADC_ConfigChannel+0xba>
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80086c2:	fa93 f3a3 	rbit	r3, r3
 80086c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80086ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80086d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80086da:	2320      	movs	r3, #32
 80086dc:	e004      	b.n	80086e8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80086de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80086e2:	fab3 f383 	clz	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2201      	movs	r2, #1
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	69d1      	ldr	r1, [r2, #28]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6812      	ldr	r2, [r2, #0]
 80086fc:	430b      	orrs	r3, r1
 80086fe:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6859      	ldr	r1, [r3, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	f7ff fc6b 	bl	8007fe8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fd5f 	bl	80081da <LL_ADC_REG_IsConversionOngoing>
 800871c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fd6b 	bl	8008200 <LL_ADC_INJ_IsConversionOngoing>
 800872a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800872e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 8270 	bne.w	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008738:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 826b 	bne.w	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	461a      	mov	r2, r3
 8008750:	f7ff fc76 	bl	8008040 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6c      	ldr	r2, [pc, #432]	@ (800890c <HAL_ADC_ConfigChannel+0x2d4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d10d      	bne.n	800877a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	08db      	lsrs	r3, r3, #3
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	fa02 f303 	lsl.w	r3, r2, r3
 8008774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008778:	e032      	b.n	80087e0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800877a:	4b65      	ldr	r3, [pc, #404]	@ (8008910 <HAL_ADC_ConfigChannel+0x2d8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008786:	d10b      	bne.n	80087a0 <HAL_ADC_ConfigChannel+0x168>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	695a      	ldr	r2, [r3, #20]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	089b      	lsrs	r3, r3, #2
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	e01d      	b.n	80087dc <HAL_ADC_ConfigChannel+0x1a4>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f003 0310 	and.w	r3, r3, #16
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <HAL_ADC_ConfigChannel+0x18e>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	089b      	lsrs	r3, r3, #2
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	e00a      	b.n	80087dc <HAL_ADC_ConfigChannel+0x1a4>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	089b      	lsrs	r3, r3, #2
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d048      	beq.n	800887a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6919      	ldr	r1, [r3, #16]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087f8:	f7ff fb04 	bl	8007e04 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a42      	ldr	r2, [pc, #264]	@ (800890c <HAL_ADC_ConfigChannel+0x2d4>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d119      	bne.n	800883a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6919      	ldr	r1, [r3, #16]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	461a      	mov	r2, r3
 8008814:	f7ff fb9c 	bl	8007f50 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6919      	ldr	r1, [r3, #16]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d102      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x1f8>
 800882a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800882e:	e000      	b.n	8008832 <HAL_ADC_ConfigChannel+0x1fa>
 8008830:	2300      	movs	r3, #0
 8008832:	461a      	mov	r2, r3
 8008834:	f7ff fb6a 	bl	8007f0c <LL_ADC_SetOffsetSaturation>
 8008838:	e1ee      	b.n	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6919      	ldr	r1, [r3, #16]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008848:	2b01      	cmp	r3, #1
 800884a:	d102      	bne.n	8008852 <HAL_ADC_ConfigChannel+0x21a>
 800884c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008850:	e000      	b.n	8008854 <HAL_ADC_ConfigChannel+0x21c>
 8008852:	2300      	movs	r3, #0
 8008854:	461a      	mov	r2, r3
 8008856:	f7ff fb37 	bl	8007ec8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6919      	ldr	r1, [r3, #16]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	7e1b      	ldrb	r3, [r3, #24]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d102      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x238>
 800886a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800886e:	e000      	b.n	8008872 <HAL_ADC_ConfigChannel+0x23a>
 8008870:	2300      	movs	r3, #0
 8008872:	461a      	mov	r2, r3
 8008874:	f7ff fb0e 	bl	8007e94 <LL_ADC_SetDataRightShift>
 8008878:	e1ce      	b.n	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a23      	ldr	r2, [pc, #140]	@ (800890c <HAL_ADC_ConfigChannel+0x2d4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	f040 8181 	bne.w	8008b88 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2100      	movs	r1, #0
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff faeb 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008892:	4603      	mov	r3, r0
 8008894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x27a>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2100      	movs	r1, #0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fae0 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 80088a8:	4603      	mov	r3, r0
 80088aa:	0e9b      	lsrs	r3, r3, #26
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	e01e      	b.n	80088f0 <HAL_ADC_ConfigChannel+0x2b8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2100      	movs	r1, #0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fad5 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 80088be:	4603      	mov	r3, r0
 80088c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088c8:	fa93 f3a3 	rbit	r3, r3
 80088cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80088d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80088d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80088e0:	2320      	movs	r3, #32
 80088e2:	e004      	b.n	80088ee <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80088e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80088e8:	fab3 f383 	clz	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10b      	bne.n	8008914 <HAL_ADC_ConfigChannel+0x2dc>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0e9b      	lsrs	r3, r3, #26
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	e01e      	b.n	8008946 <HAL_ADC_ConfigChannel+0x30e>
 8008908:	47ff0000 	.word	0x47ff0000
 800890c:	58026000 	.word	0x58026000
 8008910:	5c001000 	.word	0x5c001000
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800891c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008920:	fa93 f3a3 	rbit	r3, r3
 8008924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800892c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8008938:	2320      	movs	r3, #32
 800893a:	e004      	b.n	8008946 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800893c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008940:	fab3 f383 	clz	r3, r3
 8008944:	b2db      	uxtb	r3, r3
 8008946:	429a      	cmp	r2, r3
 8008948:	d106      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fb1e 	bl	8007f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2101      	movs	r1, #1
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fa82 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008964:	4603      	mov	r3, r0
 8008966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <HAL_ADC_ConfigChannel+0x34c>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2101      	movs	r1, #1
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fa77 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 800897a:	4603      	mov	r3, r0
 800897c:	0e9b      	lsrs	r3, r3, #26
 800897e:	f003 021f 	and.w	r2, r3, #31
 8008982:	e01e      	b.n	80089c2 <HAL_ADC_ConfigChannel+0x38a>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2101      	movs	r1, #1
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fa6c 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008990:	4603      	mov	r3, r0
 8008992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800899a:	fa93 f3a3 	rbit	r3, r3
 800899e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80089a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80089aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80089b2:	2320      	movs	r3, #32
 80089b4:	e004      	b.n	80089c0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80089b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80089ba:	fab3 f383 	clz	r3, r3
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <HAL_ADC_ConfigChannel+0x3a2>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	0e9b      	lsrs	r3, r3, #26
 80089d4:	f003 031f 	and.w	r3, r3, #31
 80089d8:	e018      	b.n	8008a0c <HAL_ADC_ConfigChannel+0x3d4>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089e6:	fa93 f3a3 	rbit	r3, r3
 80089ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80089ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80089f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80089f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80089fe:	2320      	movs	r3, #32
 8008a00:	e004      	b.n	8008a0c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8008a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a06:	fab3 f383 	clz	r3, r3
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d106      	bne.n	8008a1e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2200      	movs	r2, #0
 8008a16:	2101      	movs	r1, #1
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fabb 	bl	8007f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2102      	movs	r1, #2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fa1f 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <HAL_ADC_ConfigChannel+0x412>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2102      	movs	r1, #2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff fa14 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008a40:	4603      	mov	r3, r0
 8008a42:	0e9b      	lsrs	r3, r3, #26
 8008a44:	f003 021f 	and.w	r2, r3, #31
 8008a48:	e01e      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x450>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fa09 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a60:	fa93 f3a3 	rbit	r3, r3
 8008a64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8008a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8008a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8008a78:	2320      	movs	r3, #32
 8008a7a:	e004      	b.n	8008a86 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8008a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a80:	fab3 f383 	clz	r3, r3
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	461a      	mov	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <HAL_ADC_ConfigChannel+0x468>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	0e9b      	lsrs	r3, r3, #26
 8008a9a:	f003 031f 	and.w	r3, r3, #31
 8008a9e:	e014      	b.n	8008aca <HAL_ADC_ConfigChannel+0x492>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008aa8:	fa93 f3a3 	rbit	r3, r3
 8008aac:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8008aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8008ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008abc:	2320      	movs	r3, #32
 8008abe:	e004      	b.n	8008aca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ac4:	fab3 f383 	clz	r3, r3
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d106      	bne.n	8008adc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2102      	movs	r1, #2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fa5c 	bl	8007f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2103      	movs	r1, #3
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff f9c0 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <HAL_ADC_ConfigChannel+0x4d0>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2103      	movs	r1, #3
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7ff f9b5 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008afe:	4603      	mov	r3, r0
 8008b00:	0e9b      	lsrs	r3, r3, #26
 8008b02:	f003 021f 	and.w	r2, r3, #31
 8008b06:	e017      	b.n	8008b38 <HAL_ADC_ConfigChannel+0x500>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2103      	movs	r1, #3
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff f9aa 	bl	8007e68 <LL_ADC_GetOffsetChannel>
 8008b14:	4603      	mov	r3, r0
 8008b16:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b1a:	fa93 f3a3 	rbit	r3, r3
 8008b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8008b20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b22:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8008b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	e003      	b.n	8008b36 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8008b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b30:	fab3 f383 	clz	r3, r3
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d105      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0x518>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	0e9b      	lsrs	r3, r3, #26
 8008b4a:	f003 031f 	and.w	r3, r3, #31
 8008b4e:	e011      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x53c>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b58:	fa93 f3a3 	rbit	r3, r3
 8008b5c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8008b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b60:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8008b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8008b68:	2320      	movs	r3, #32
 8008b6a:	e003      	b.n	8008b74 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8008b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b6e:	fab3 f383 	clz	r3, r3
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d14f      	bne.n	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2103      	movs	r1, #3
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fa07 	bl	8007f94 <LL_ADC_SetOffsetState>
 8008b86:	e047      	b.n	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	069b      	lsls	r3, r3, #26
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d107      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008baa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	069b      	lsls	r3, r3, #26
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d107      	bne.n	8008bd0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008bce:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	069b      	lsls	r3, r3, #26
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d107      	bne.n	8008bf4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008bf2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	069b      	lsls	r3, r3, #26
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d107      	bne.n	8008c18 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008c16:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fac9 	bl	80081b4 <LL_ADC_IsEnabled>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 8219 	bne.w	800905c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6819      	ldr	r1, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f7ff fa2e 	bl	8008098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4aa1      	ldr	r2, [pc, #644]	@ (8008ec8 <HAL_ADC_ConfigChannel+0x890>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	f040 812e 	bne.w	8008ea4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10b      	bne.n	8008c70 <HAL_ADC_ConfigChannel+0x638>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	0e9b      	lsrs	r3, r3, #26
 8008c5e:	3301      	adds	r3, #1
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	bf94      	ite	ls
 8008c68:	2301      	movls	r3, #1
 8008c6a:	2300      	movhi	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	e019      	b.n	8008ca4 <HAL_ADC_ConfigChannel+0x66c>
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c78:	fa93 f3a3 	rbit	r3, r3
 8008c7c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8008c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8008c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8008c88:	2320      	movs	r3, #32
 8008c8a:	e003      	b.n	8008c94 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8008c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c8e:	fab3 f383 	clz	r3, r3
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	3301      	adds	r3, #1
 8008c96:	f003 031f 	and.w	r3, r3, #31
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	bf94      	ite	ls
 8008c9e:	2301      	movls	r3, #1
 8008ca0:	2300      	movhi	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d079      	beq.n	8008d9c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d107      	bne.n	8008cc4 <HAL_ADC_ConfigChannel+0x68c>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	0e9b      	lsrs	r3, r3, #26
 8008cba:	3301      	adds	r3, #1
 8008cbc:	069b      	lsls	r3, r3, #26
 8008cbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cc2:	e015      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x6b8>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ccc:	fa93 f3a3 	rbit	r3, r3
 8008cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8008cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cd4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8008cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8008cdc:	2320      	movs	r3, #32
 8008cde:	e003      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8008ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ce2:	fab3 f383 	clz	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	3301      	adds	r3, #1
 8008cea:	069b      	lsls	r3, r3, #26
 8008cec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <HAL_ADC_ConfigChannel+0x6d8>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	0e9b      	lsrs	r3, r3, #26
 8008d02:	3301      	adds	r3, #1
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	2101      	movs	r1, #1
 8008d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0e:	e017      	b.n	8008d40 <HAL_ADC_ConfigChannel+0x708>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d18:	fa93 f3a3 	rbit	r3, r3
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8008d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8008d28:	2320      	movs	r3, #32
 8008d2a:	e003      	b.n	8008d34 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8008d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d2e:	fab3 f383 	clz	r3, r3
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	3301      	adds	r3, #1
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2101      	movs	r1, #1
 8008d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d40:	ea42 0103 	orr.w	r1, r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <HAL_ADC_ConfigChannel+0x72e>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	0e9b      	lsrs	r3, r3, #26
 8008d56:	3301      	adds	r3, #1
 8008d58:	f003 021f 	and.w	r2, r3, #31
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	4413      	add	r3, r2
 8008d62:	051b      	lsls	r3, r3, #20
 8008d64:	e018      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x760>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6e:	fa93 f3a3 	rbit	r3, r3
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8008d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8008d7e:	2320      	movs	r3, #32
 8008d80:	e003      	b.n	8008d8a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	fab3 f383 	clz	r3, r3
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f003 021f 	and.w	r2, r3, #31
 8008d90:	4613      	mov	r3, r2
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	4413      	add	r3, r2
 8008d96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	e07e      	b.n	8008e9a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d107      	bne.n	8008db8 <HAL_ADC_ConfigChannel+0x780>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	0e9b      	lsrs	r3, r3, #26
 8008dae:	3301      	adds	r3, #1
 8008db0:	069b      	lsls	r3, r3, #26
 8008db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008db6:	e015      	b.n	8008de4 <HAL_ADC_ConfigChannel+0x7ac>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	fa93 f3a3 	rbit	r3, r3
 8008dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8008dd0:	2320      	movs	r3, #32
 8008dd2:	e003      	b.n	8008ddc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	fab3 f383 	clz	r3, r3
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	3301      	adds	r3, #1
 8008dde:	069b      	lsls	r3, r3, #26
 8008de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <HAL_ADC_ConfigChannel+0x7cc>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	0e9b      	lsrs	r3, r3, #26
 8008df6:	3301      	adds	r3, #1
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008e02:	e017      	b.n	8008e34 <HAL_ADC_ConfigChannel+0x7fc>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	fa93 f3a3 	rbit	r3, r3
 8008e10:	61bb      	str	r3, [r7, #24]
  return result;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	e003      	b.n	8008e28 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	fab3 f383 	clz	r3, r3
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f003 031f 	and.w	r3, r3, #31
 8008e2e:	2101      	movs	r1, #1
 8008e30:	fa01 f303 	lsl.w	r3, r1, r3
 8008e34:	ea42 0103 	orr.w	r1, r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10d      	bne.n	8008e60 <HAL_ADC_ConfigChannel+0x828>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	0e9b      	lsrs	r3, r3, #26
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f003 021f 	and.w	r2, r3, #31
 8008e50:	4613      	mov	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	3b1e      	subs	r3, #30
 8008e58:	051b      	lsls	r3, r3, #20
 8008e5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e5e:	e01b      	b.n	8008e98 <HAL_ADC_ConfigChannel+0x860>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	fa93 f3a3 	rbit	r3, r3
 8008e6c:	60fb      	str	r3, [r7, #12]
  return result;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8008e78:	2320      	movs	r3, #32
 8008e7a:	e003      	b.n	8008e84 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	fab3 f383 	clz	r3, r3
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	3301      	adds	r3, #1
 8008e86:	f003 021f 	and.w	r2, r3, #31
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	4413      	add	r3, r2
 8008e90:	3b1e      	subs	r3, #30
 8008e92:	051b      	lsls	r3, r3, #20
 8008e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	6892      	ldr	r2, [r2, #8]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f7ff f8ce 	bl	8008040 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f280 80d7 	bge.w	800905c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a06      	ldr	r2, [pc, #24]	@ (8008ecc <HAL_ADC_ConfigChannel+0x894>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d004      	beq.n	8008ec2 <HAL_ADC_ConfigChannel+0x88a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	@ (8008ed0 <HAL_ADC_ConfigChannel+0x898>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d10a      	bne.n	8008ed8 <HAL_ADC_ConfigChannel+0x8a0>
 8008ec2:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <HAL_ADC_ConfigChannel+0x89c>)
 8008ec4:	e009      	b.n	8008eda <HAL_ADC_ConfigChannel+0x8a2>
 8008ec6:	bf00      	nop
 8008ec8:	47ff0000 	.word	0x47ff0000
 8008ecc:	40022000 	.word	0x40022000
 8008ed0:	40022100 	.word	0x40022100
 8008ed4:	40022300 	.word	0x40022300
 8008ed8:	4b65      	ldr	r3, [pc, #404]	@ (8009070 <HAL_ADC_ConfigChannel+0xa38>)
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe ff84 	bl	8007de8 <LL_ADC_GetCommonPathInternalCh>
 8008ee0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a62      	ldr	r2, [pc, #392]	@ (8009074 <HAL_ADC_ConfigChannel+0xa3c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d004      	beq.n	8008ef8 <HAL_ADC_ConfigChannel+0x8c0>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a61      	ldr	r2, [pc, #388]	@ (8009078 <HAL_ADC_ConfigChannel+0xa40>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d10e      	bne.n	8008f16 <HAL_ADC_ConfigChannel+0x8de>
 8008ef8:	485e      	ldr	r0, [pc, #376]	@ (8009074 <HAL_ADC_ConfigChannel+0xa3c>)
 8008efa:	f7ff f95b 	bl	80081b4 <LL_ADC_IsEnabled>
 8008efe:	4604      	mov	r4, r0
 8008f00:	485d      	ldr	r0, [pc, #372]	@ (8009078 <HAL_ADC_ConfigChannel+0xa40>)
 8008f02:	f7ff f957 	bl	80081b4 <LL_ADC_IsEnabled>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4323      	orrs	r3, r4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	e008      	b.n	8008f28 <HAL_ADC_ConfigChannel+0x8f0>
 8008f16:	4859      	ldr	r0, [pc, #356]	@ (800907c <HAL_ADC_ConfigChannel+0xa44>)
 8008f18:	f7ff f94c 	bl	80081b4 <LL_ADC_IsEnabled>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8084 	beq.w	8009036 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a53      	ldr	r2, [pc, #332]	@ (8009080 <HAL_ADC_ConfigChannel+0xa48>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d132      	bne.n	8008f9e <HAL_ADC_ConfigChannel+0x966>
 8008f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d12c      	bne.n	8008f9e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a4c      	ldr	r2, [pc, #304]	@ (800907c <HAL_ADC_ConfigChannel+0xa44>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f040 8086 	bne.w	800905c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a47      	ldr	r2, [pc, #284]	@ (8009074 <HAL_ADC_ConfigChannel+0xa3c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_ADC_ConfigChannel+0x92c>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a46      	ldr	r2, [pc, #280]	@ (8009078 <HAL_ADC_ConfigChannel+0xa40>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d101      	bne.n	8008f68 <HAL_ADC_ConfigChannel+0x930>
 8008f64:	4a47      	ldr	r2, [pc, #284]	@ (8009084 <HAL_ADC_ConfigChannel+0xa4c>)
 8008f66:	e000      	b.n	8008f6a <HAL_ADC_ConfigChannel+0x932>
 8008f68:	4a41      	ldr	r2, [pc, #260]	@ (8009070 <HAL_ADC_ConfigChannel+0xa38>)
 8008f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe ff24 	bl	8007dc2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008f7a:	4b43      	ldr	r3, [pc, #268]	@ (8009088 <HAL_ADC_ConfigChannel+0xa50>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	099b      	lsrs	r3, r3, #6
 8008f80:	4a42      	ldr	r2, [pc, #264]	@ (800908c <HAL_ADC_ConfigChannel+0xa54>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	3301      	adds	r3, #1
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008f8e:	e002      	b.n	8008f96 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f9      	bne.n	8008f90 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f9c:	e05e      	b.n	800905c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8009090 <HAL_ADC_ConfigChannel+0xa58>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d120      	bne.n	8008fea <HAL_ADC_ConfigChannel+0x9b2>
 8008fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11a      	bne.n	8008fea <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a30      	ldr	r2, [pc, #192]	@ (800907c <HAL_ADC_ConfigChannel+0xa44>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d14e      	bne.n	800905c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009074 <HAL_ADC_ConfigChannel+0xa3c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d004      	beq.n	8008fd2 <HAL_ADC_ConfigChannel+0x99a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8009078 <HAL_ADC_ConfigChannel+0xa40>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d101      	bne.n	8008fd6 <HAL_ADC_ConfigChannel+0x99e>
 8008fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009084 <HAL_ADC_ConfigChannel+0xa4c>)
 8008fd4:	e000      	b.n	8008fd8 <HAL_ADC_ConfigChannel+0x9a0>
 8008fd6:	4a26      	ldr	r2, [pc, #152]	@ (8009070 <HAL_ADC_ConfigChannel+0xa38>)
 8008fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe feed 	bl	8007dc2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008fe8:	e038      	b.n	800905c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a29      	ldr	r2, [pc, #164]	@ (8009094 <HAL_ADC_ConfigChannel+0xa5c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d133      	bne.n	800905c <HAL_ADC_ConfigChannel+0xa24>
 8008ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d12d      	bne.n	800905c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a1d      	ldr	r2, [pc, #116]	@ (800907c <HAL_ADC_ConfigChannel+0xa44>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d128      	bne.n	800905c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a19      	ldr	r2, [pc, #100]	@ (8009074 <HAL_ADC_ConfigChannel+0xa3c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d004      	beq.n	800901e <HAL_ADC_ConfigChannel+0x9e6>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a17      	ldr	r2, [pc, #92]	@ (8009078 <HAL_ADC_ConfigChannel+0xa40>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d101      	bne.n	8009022 <HAL_ADC_ConfigChannel+0x9ea>
 800901e:	4a19      	ldr	r2, [pc, #100]	@ (8009084 <HAL_ADC_ConfigChannel+0xa4c>)
 8009020:	e000      	b.n	8009024 <HAL_ADC_ConfigChannel+0x9ec>
 8009022:	4a13      	ldr	r2, [pc, #76]	@ (8009070 <HAL_ADC_ConfigChannel+0xa38>)
 8009024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe fec7 	bl	8007dc2 <LL_ADC_SetCommonPathInternalCh>
 8009034:	e012      	b.n	800905c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800903a:	f043 0220 	orr.w	r2, r3, #32
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009048:	e008      	b.n	800905c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800904e:	f043 0220 	orr.w	r2, r3, #32
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009064:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8009068:	4618      	mov	r0, r3
 800906a:	37e4      	adds	r7, #228	@ 0xe4
 800906c:	46bd      	mov	sp, r7
 800906e:	bd90      	pop	{r4, r7, pc}
 8009070:	58026300 	.word	0x58026300
 8009074:	40022000 	.word	0x40022000
 8009078:	40022100 	.word	0x40022100
 800907c:	58026000 	.word	0x58026000
 8009080:	c7520000 	.word	0xc7520000
 8009084:	40022300 	.word	0x40022300
 8009088:	24000000 	.word	0x24000000
 800908c:	053e2d63 	.word	0x053e2d63
 8009090:	c3210000 	.word	0xc3210000
 8009094:	cb840000 	.word	0xcb840000

08009098 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a6c      	ldr	r2, [pc, #432]	@ (8009258 <ADC_ConfigureBoostMode+0x1c0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <ADC_ConfigureBoostMode+0x1c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a6b      	ldr	r2, [pc, #428]	@ (800925c <ADC_ConfigureBoostMode+0x1c4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d109      	bne.n	80090c8 <ADC_ConfigureBoostMode+0x30>
 80090b4:	4b6a      	ldr	r3, [pc, #424]	@ (8009260 <ADC_ConfigureBoostMode+0x1c8>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf14      	ite	ne
 80090c0:	2301      	movne	r3, #1
 80090c2:	2300      	moveq	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	e008      	b.n	80090da <ADC_ConfigureBoostMode+0x42>
 80090c8:	4b66      	ldr	r3, [pc, #408]	@ (8009264 <ADC_ConfigureBoostMode+0x1cc>)
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bf14      	ite	ne
 80090d4:	2301      	movne	r3, #1
 80090d6:	2300      	moveq	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01c      	beq.n	8009118 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80090de:	f005 fbff 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 80090e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090ec:	d010      	beq.n	8009110 <ADC_ConfigureBoostMode+0x78>
 80090ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090f2:	d873      	bhi.n	80091dc <ADC_ConfigureBoostMode+0x144>
 80090f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f8:	d002      	beq.n	8009100 <ADC_ConfigureBoostMode+0x68>
 80090fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090fe:	d16d      	bne.n	80091dc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	60fb      	str	r3, [r7, #12]
        break;
 800910e:	e068      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	089b      	lsrs	r3, r3, #2
 8009114:	60fb      	str	r3, [r7, #12]
        break;
 8009116:	e064      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009118:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800911c:	f04f 0100 	mov.w	r1, #0
 8009120:	f006 fdda 	bl	800fcd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009124:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800912e:	d051      	beq.n	80091d4 <ADC_ConfigureBoostMode+0x13c>
 8009130:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8009134:	d854      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 8009136:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800913a:	d047      	beq.n	80091cc <ADC_ConfigureBoostMode+0x134>
 800913c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8009140:	d84e      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 8009142:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8009146:	d03d      	beq.n	80091c4 <ADC_ConfigureBoostMode+0x12c>
 8009148:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800914c:	d848      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 800914e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009152:	d033      	beq.n	80091bc <ADC_ConfigureBoostMode+0x124>
 8009154:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009158:	d842      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 800915a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800915e:	d029      	beq.n	80091b4 <ADC_ConfigureBoostMode+0x11c>
 8009160:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8009164:	d83c      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 8009166:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800916a:	d01a      	beq.n	80091a2 <ADC_ConfigureBoostMode+0x10a>
 800916c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009170:	d836      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 8009172:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009176:	d014      	beq.n	80091a2 <ADC_ConfigureBoostMode+0x10a>
 8009178:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800917c:	d830      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 800917e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009182:	d00e      	beq.n	80091a2 <ADC_ConfigureBoostMode+0x10a>
 8009184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009188:	d82a      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 800918a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800918e:	d008      	beq.n	80091a2 <ADC_ConfigureBoostMode+0x10a>
 8009190:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009194:	d824      	bhi.n	80091e0 <ADC_ConfigureBoostMode+0x148>
 8009196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800919a:	d002      	beq.n	80091a2 <ADC_ConfigureBoostMode+0x10a>
 800919c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091a0:	d11e      	bne.n	80091e0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	0c9b      	lsrs	r3, r3, #18
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	60fb      	str	r3, [r7, #12]
        break;
 80091b2:	e016      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	091b      	lsrs	r3, r3, #4
 80091b8:	60fb      	str	r3, [r7, #12]
        break;
 80091ba:	e012      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	60fb      	str	r3, [r7, #12]
        break;
 80091c2:	e00e      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	60fb      	str	r3, [r7, #12]
        break;
 80091ca:	e00a      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	09db      	lsrs	r3, r3, #7
 80091d0:	60fb      	str	r3, [r7, #12]
        break;
 80091d2:	e006      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	60fb      	str	r3, [r7, #12]
        break;
 80091da:	e002      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80091e0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009268 <ADC_ConfigureBoostMode+0x1d0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d808      	bhi.n	8009202 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80091fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8009200:	e025      	b.n	800924e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4a19      	ldr	r2, [pc, #100]	@ (800926c <ADC_ConfigureBoostMode+0x1d4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d80a      	bhi.n	8009220 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800921c:	609a      	str	r2, [r3, #8]
}
 800921e:	e016      	b.n	800924e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4a13      	ldr	r2, [pc, #76]	@ (8009270 <ADC_ConfigureBoostMode+0x1d8>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d80a      	bhi.n	800923e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800923a:	609a      	str	r2, [r3, #8]
}
 800923c:	e007      	b.n	800924e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800924c:	609a      	str	r2, [r3, #8]
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40022000 	.word	0x40022000
 800925c:	40022100 	.word	0x40022100
 8009260:	40022300 	.word	0x40022300
 8009264:	58026300 	.word	0x58026300
 8009268:	005f5e10 	.word	0x005f5e10
 800926c:	00bebc20 	.word	0x00bebc20
 8009270:	017d7840 	.word	0x017d7840

08009274 <LL_ADC_IsEnabled>:
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <LL_ADC_IsEnabled+0x18>
 8009288:	2301      	movs	r3, #1
 800928a:	e000      	b.n	800928e <LL_ADC_IsEnabled+0x1a>
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <LL_ADC_REG_IsConversionOngoing>:
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0304 	and.w	r3, r3, #4
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d101      	bne.n	80092b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b0a3      	sub	sp, #140	@ 0x8c
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80092da:	2302      	movs	r3, #2
 80092dc:	e0c1      	b.n	8009462 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80092e6:	2300      	movs	r3, #0
 80092e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a5e      	ldr	r2, [pc, #376]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d102      	bne.n	80092fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80092f8:	4b5d      	ldr	r3, [pc, #372]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e001      	b.n	8009302 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10b      	bne.n	8009320 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800930c:	f043 0220 	orr.w	r2, r3, #32
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e0a0      	b.n	8009462 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff ffb9 	bl	800929a <LL_ADC_REG_IsConversionOngoing>
 8009328:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff ffb2 	bl	800929a <LL_ADC_REG_IsConversionOngoing>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	f040 8081 	bne.w	8009440 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800933e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009342:	2b00      	cmp	r3, #0
 8009344:	d17c      	bne.n	8009440 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a48      	ldr	r2, [pc, #288]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d004      	beq.n	800935a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a46      	ldr	r2, [pc, #280]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d101      	bne.n	800935e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800935a:	4b46      	ldr	r3, [pc, #280]	@ (8009474 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800935c:	e000      	b.n	8009360 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800935e:	4b46      	ldr	r3, [pc, #280]	@ (8009478 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009360:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d039      	beq.n	80093de <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800936a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	431a      	orrs	r2, r3
 8009378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800937a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a3a      	ldr	r2, [pc, #232]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d004      	beq.n	8009390 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a39      	ldr	r2, [pc, #228]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d10e      	bne.n	80093ae <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009390:	4836      	ldr	r0, [pc, #216]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009392:	f7ff ff6f 	bl	8009274 <LL_ADC_IsEnabled>
 8009396:	4604      	mov	r4, r0
 8009398:	4835      	ldr	r0, [pc, #212]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800939a:	f7ff ff6b 	bl	8009274 <LL_ADC_IsEnabled>
 800939e:	4603      	mov	r3, r0
 80093a0:	4323      	orrs	r3, r4
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bf0c      	ite	eq
 80093a6:	2301      	moveq	r3, #1
 80093a8:	2300      	movne	r3, #0
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	e008      	b.n	80093c0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80093ae:	4833      	ldr	r0, [pc, #204]	@ (800947c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80093b0:	f7ff ff60 	bl	8009274 <LL_ADC_IsEnabled>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bf0c      	ite	eq
 80093ba:	2301      	moveq	r3, #1
 80093bc:	2300      	movne	r3, #0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d047      	beq.n	8009454 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80093c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009480 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	6811      	ldr	r1, [r2, #0]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	6892      	ldr	r2, [r2, #8]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	431a      	orrs	r2, r3
 80093d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80093dc:	e03a      	b.n	8009454 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80093de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80093e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1f      	ldr	r2, [pc, #124]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d004      	beq.n	80093fe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d10e      	bne.n	800941c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80093fe:	481b      	ldr	r0, [pc, #108]	@ (800946c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009400:	f7ff ff38 	bl	8009274 <LL_ADC_IsEnabled>
 8009404:	4604      	mov	r4, r0
 8009406:	481a      	ldr	r0, [pc, #104]	@ (8009470 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009408:	f7ff ff34 	bl	8009274 <LL_ADC_IsEnabled>
 800940c:	4603      	mov	r3, r0
 800940e:	4323      	orrs	r3, r4
 8009410:	2b00      	cmp	r3, #0
 8009412:	bf0c      	ite	eq
 8009414:	2301      	moveq	r3, #1
 8009416:	2300      	movne	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e008      	b.n	800942e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800941c:	4817      	ldr	r0, [pc, #92]	@ (800947c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800941e:	f7ff ff29 	bl	8009274 <LL_ADC_IsEnabled>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	bf0c      	ite	eq
 8009428:	2301      	moveq	r3, #1
 800942a:	2300      	movne	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d010      	beq.n	8009454 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009432:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	4b12      	ldr	r3, [pc, #72]	@ (8009480 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009438:	4013      	ands	r3, r2
 800943a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800943c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800943e:	e009      	b.n	8009454 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009444:	f043 0220 	orr.w	r2, r3, #32
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8009452:	e000      	b.n	8009456 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009454:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800945e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8009462:	4618      	mov	r0, r3
 8009464:	378c      	adds	r7, #140	@ 0x8c
 8009466:	46bd      	mov	sp, r7
 8009468:	bd90      	pop	{r4, r7, pc}
 800946a:	bf00      	nop
 800946c:	40022000 	.word	0x40022000
 8009470:	40022100 	.word	0x40022100
 8009474:	40022300 	.word	0x40022300
 8009478:	58026300 	.word	0x58026300
 800947c:	58026000 	.word	0x58026000
 8009480:	fffff0e0 	.word	0xfffff0e0

08009484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009494:	4b0b      	ldr	r3, [pc, #44]	@ (80094c4 <__NVIC_SetPriorityGrouping+0x40>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094a0:	4013      	ands	r3, r2
 80094a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80094ac:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <__NVIC_SetPriorityGrouping+0x44>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094b2:	4a04      	ldr	r2, [pc, #16]	@ (80094c4 <__NVIC_SetPriorityGrouping+0x40>)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	60d3      	str	r3, [r2, #12]
}
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	e000ed00 	.word	0xe000ed00
 80094c8:	05fa0000 	.word	0x05fa0000

080094cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094d0:	4b04      	ldr	r3, [pc, #16]	@ (80094e4 <__NVIC_GetPriorityGrouping+0x18>)
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	0a1b      	lsrs	r3, r3, #8
 80094d6:	f003 0307 	and.w	r3, r3, #7
}
 80094da:	4618      	mov	r0, r3
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	e000ed00 	.word	0xe000ed00

080094e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80094f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	db0b      	blt.n	8009512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	f003 021f 	and.w	r2, r3, #31
 8009500:	4907      	ldr	r1, [pc, #28]	@ (8009520 <__NVIC_EnableIRQ+0x38>)
 8009502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	2001      	movs	r0, #1
 800950a:	fa00 f202 	lsl.w	r2, r0, r2
 800950e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	e000e100 	.word	0xe000e100

08009524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	4603      	mov	r3, r0
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009534:	2b00      	cmp	r3, #0
 8009536:	db0a      	blt.n	800954e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b2da      	uxtb	r2, r3
 800953c:	490c      	ldr	r1, [pc, #48]	@ (8009570 <__NVIC_SetPriority+0x4c>)
 800953e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009542:	0112      	lsls	r2, r2, #4
 8009544:	b2d2      	uxtb	r2, r2
 8009546:	440b      	add	r3, r1
 8009548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800954c:	e00a      	b.n	8009564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	4908      	ldr	r1, [pc, #32]	@ (8009574 <__NVIC_SetPriority+0x50>)
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	3b04      	subs	r3, #4
 800955c:	0112      	lsls	r2, r2, #4
 800955e:	b2d2      	uxtb	r2, r2
 8009560:	440b      	add	r3, r1
 8009562:	761a      	strb	r2, [r3, #24]
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	e000e100 	.word	0xe000e100
 8009574:	e000ed00 	.word	0xe000ed00

08009578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009578:	b480      	push	{r7}
 800957a:	b089      	sub	sp, #36	@ 0x24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f003 0307 	and.w	r3, r3, #7
 800958a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f1c3 0307 	rsb	r3, r3, #7
 8009592:	2b04      	cmp	r3, #4
 8009594:	bf28      	it	cs
 8009596:	2304      	movcs	r3, #4
 8009598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	3304      	adds	r3, #4
 800959e:	2b06      	cmp	r3, #6
 80095a0:	d902      	bls.n	80095a8 <NVIC_EncodePriority+0x30>
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	3b03      	subs	r3, #3
 80095a6:	e000      	b.n	80095aa <NVIC_EncodePriority+0x32>
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	fa02 f303 	lsl.w	r3, r2, r3
 80095b6:	43da      	mvns	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	401a      	ands	r2, r3
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095c0:	f04f 31ff 	mov.w	r1, #4294967295
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	fa01 f303 	lsl.w	r3, r1, r3
 80095ca:	43d9      	mvns	r1, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095d0:	4313      	orrs	r3, r2
         );
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3724      	adds	r7, #36	@ 0x24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
	...

080095e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095f0:	d301      	bcc.n	80095f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80095f2:	2301      	movs	r3, #1
 80095f4:	e00f      	b.n	8009616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80095f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009620 <SysTick_Config+0x40>)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80095fe:	210f      	movs	r1, #15
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	f7ff ff8e 	bl	8009524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009608:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <SysTick_Config+0x40>)
 800960a:	2200      	movs	r2, #0
 800960c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800960e:	4b04      	ldr	r3, [pc, #16]	@ (8009620 <SysTick_Config+0x40>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	e000e010 	.word	0xe000e010

08009624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff ff29 	bl	8009484 <__NVIC_SetPriorityGrouping>
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	4603      	mov	r3, r0
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
 8009646:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009648:	f7ff ff40 	bl	80094cc <__NVIC_GetPriorityGrouping>
 800964c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	6978      	ldr	r0, [r7, #20]
 8009654:	f7ff ff90 	bl	8009578 <NVIC_EncodePriority>
 8009658:	4602      	mov	r2, r0
 800965a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff ff5f 	bl	8009524 <__NVIC_SetPriority>
}
 8009666:	bf00      	nop
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	4603      	mov	r3, r0
 8009676:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff ff33 	bl	80094e8 <__NVIC_EnableIRQ>
}
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff ffa4 	bl	80095e0 <SysTick_Config>
 8009698:	4603      	mov	r3, r0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80096a8:	f3bf 8f5f 	dmb	sy
}
 80096ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80096ae:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <HAL_MPU_Disable+0x28>)
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	4a06      	ldr	r2, [pc, #24]	@ (80096cc <HAL_MPU_Disable+0x28>)
 80096b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80096ba:	4b05      	ldr	r3, [pc, #20]	@ (80096d0 <HAL_MPU_Disable+0x2c>)
 80096bc:	2200      	movs	r2, #0
 80096be:	605a      	str	r2, [r3, #4]
}
 80096c0:	bf00      	nop
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	e000ed00 	.word	0xe000ed00
 80096d0:	e000ed90 	.word	0xe000ed90

080096d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80096dc:	4a0b      	ldr	r2, [pc, #44]	@ (800970c <HAL_MPU_Enable+0x38>)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80096e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <HAL_MPU_Enable+0x3c>)
 80096e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ea:	4a09      	ldr	r2, [pc, #36]	@ (8009710 <HAL_MPU_Enable+0x3c>)
 80096ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80096f2:	f3bf 8f4f 	dsb	sy
}
 80096f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80096f8:	f3bf 8f6f 	isb	sy
}
 80096fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	e000ed90 	.word	0xe000ed90
 8009710:	e000ed00 	.word	0xe000ed00

08009714 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	785a      	ldrb	r2, [r3, #1]
 8009720:	4b1b      	ldr	r3, [pc, #108]	@ (8009790 <HAL_MPU_ConfigRegion+0x7c>)
 8009722:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8009724:	4b1a      	ldr	r3, [pc, #104]	@ (8009790 <HAL_MPU_ConfigRegion+0x7c>)
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	4a19      	ldr	r2, [pc, #100]	@ (8009790 <HAL_MPU_ConfigRegion+0x7c>)
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8009730:	4a17      	ldr	r2, [pc, #92]	@ (8009790 <HAL_MPU_ConfigRegion+0x7c>)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7b1b      	ldrb	r3, [r3, #12]
 800973c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7adb      	ldrb	r3, [r3, #11]
 8009742:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009744:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7a9b      	ldrb	r3, [r3, #10]
 800974a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800974c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7b5b      	ldrb	r3, [r3, #13]
 8009752:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	7b9b      	ldrb	r3, [r3, #14]
 800975a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800975c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	7bdb      	ldrb	r3, [r3, #15]
 8009762:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7a5b      	ldrb	r3, [r3, #9]
 800976a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800976c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7a1b      	ldrb	r3, [r3, #8]
 8009772:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009774:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800977c:	4a04      	ldr	r2, [pc, #16]	@ (8009790 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800977e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009780:	6113      	str	r3, [r2, #16]
}
 8009782:	bf00      	nop
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	e000ed90 	.word	0xe000ed90

08009794 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e014      	b.n	80097d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	791b      	ldrb	r3, [r3, #4]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7f8 fe4e 	bl	8002458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2202      	movs	r2, #2
 80097c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d101      	bne.n	80097f0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e0a2      	b.n	8009936 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	795b      	ldrb	r3, [r3, #5]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <HAL_DAC_Start_DMA+0x24>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e09c      	b.n	8009936 <HAL_DAC_Start_DMA+0x15e>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2201      	movs	r2, #1
 8009800:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2202      	movs	r2, #2
 8009806:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d129      	bne.n	8009862 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	4a4b      	ldr	r2, [pc, #300]	@ (8009940 <HAL_DAC_Start_DMA+0x168>)
 8009814:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	4a4a      	ldr	r2, [pc, #296]	@ (8009944 <HAL_DAC_Start_DMA+0x16c>)
 800981c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	4a49      	ldr	r2, [pc, #292]	@ (8009948 <HAL_DAC_Start_DMA+0x170>)
 8009824:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009834:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_DAC_Start_DMA+0x6c>
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d005      	beq.n	800984e <HAL_DAC_Start_DMA+0x76>
 8009842:	e009      	b.n	8009858 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3308      	adds	r3, #8
 800984a:	613b      	str	r3, [r7, #16]
        break;
 800984c:	e033      	b.n	80098b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	330c      	adds	r3, #12
 8009854:	613b      	str	r3, [r7, #16]
        break;
 8009856:	e02e      	b.n	80098b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3310      	adds	r3, #16
 800985e:	613b      	str	r3, [r7, #16]
        break;
 8009860:	e029      	b.n	80098b6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	4a39      	ldr	r2, [pc, #228]	@ (800994c <HAL_DAC_Start_DMA+0x174>)
 8009868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4a38      	ldr	r2, [pc, #224]	@ (8009950 <HAL_DAC_Start_DMA+0x178>)
 8009870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	4a37      	ldr	r2, [pc, #220]	@ (8009954 <HAL_DAC_Start_DMA+0x17c>)
 8009878:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009888:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_DAC_Start_DMA+0xc0>
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	2b04      	cmp	r3, #4
 8009894:	d005      	beq.n	80098a2 <HAL_DAC_Start_DMA+0xca>
 8009896:	e009      	b.n	80098ac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3314      	adds	r3, #20
 800989e:	613b      	str	r3, [r7, #16]
        break;
 80098a0:	e009      	b.n	80098b6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3318      	adds	r3, #24
 80098a8:	613b      	str	r3, [r7, #16]
        break;
 80098aa:	e004      	b.n	80098b6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	331c      	adds	r3, #28
 80098b2:	613b      	str	r3, [r7, #16]
        break;
 80098b4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d111      	bne.n	80098e0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6898      	ldr	r0, [r3, #8]
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	f000 fd6d 	bl	800a3b4 <HAL_DMA_Start_IT>
 80098da:	4603      	mov	r3, r0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e010      	b.n	8009902 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80098ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68d8      	ldr	r0, [r3, #12]
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	f000 fd5b 	bl	800a3b4 <HAL_DMA_Start_IT>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10c      	bne.n	8009928 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2201      	movs	r2, #1
 800991c:	409a      	lsls	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e005      	b.n	8009934 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f043 0204 	orr.w	r2, r3, #4
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	08009bf1 	.word	0x08009bf1
 8009944:	08009c13 	.word	0x08009c13
 8009948:	08009c2f 	.word	0x08009c2f
 800994c:	08009c99 	.word	0x08009c99
 8009950:	08009cbb 	.word	0x08009cbb
 8009954:	08009cd7 	.word	0x08009cd7

08009958 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	@ 0x28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <HAL_DAC_ConfigChannel+0x1e>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e12a      	b.n	8009be4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	795b      	ldrb	r3, [r3, #5]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_DAC_ConfigChannel+0x2e>
 8009996:	2302      	movs	r3, #2
 8009998:	e124      	b.n	8009be4 <HAL_DAC_ConfigChannel+0x278>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2201      	movs	r2, #1
 800999e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2202      	movs	r2, #2
 80099a4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d17a      	bne.n	8009aa4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80099ae:	f7fe f9c5 	bl	8007d3c <HAL_GetTick>
 80099b2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d13d      	bne.n	8009a36 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80099ba:	e018      	b.n	80099ee <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80099bc:	f7fe f9be 	bl	8007d3c <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d911      	bls.n	80099ee <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099d0:	4b86      	ldr	r3, [pc, #536]	@ (8009bec <HAL_DAC_ConfigChannel+0x280>)
 80099d2:	4013      	ands	r3, r2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	f043 0208 	orr.w	r2, r3, #8
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2203      	movs	r2, #3
 80099e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e0fa      	b.n	8009be4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f4:	4b7d      	ldr	r3, [pc, #500]	@ (8009bec <HAL_DAC_ConfigChannel+0x280>)
 80099f6:	4013      	ands	r3, r2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1df      	bne.n	80099bc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	6992      	ldr	r2, [r2, #24]
 8009a04:	641a      	str	r2, [r3, #64]	@ 0x40
 8009a06:	e020      	b.n	8009a4a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009a08:	f7fe f998 	bl	8007d3c <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d90f      	bls.n	8009a36 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da0a      	bge.n	8009a36 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f043 0208 	orr.w	r2, r3, #8
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2203      	movs	r2, #3
 8009a30:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e0d6      	b.n	8009be4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dbe3      	blt.n	8009a08 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	6992      	ldr	r2, [r2, #24]
 8009a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f003 0310 	and.w	r3, r3, #16
 8009a56:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5e:	43db      	mvns	r3, r3
 8009a60:	ea02 0103 	and.w	r1, r2, r3
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f003 0310 	and.w	r3, r3, #16
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	430a      	orrs	r2, r1
 8009a76:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f003 0310 	and.w	r3, r3, #16
 8009a84:	21ff      	movs	r1, #255	@ 0xff
 8009a86:	fa01 f303 	lsl.w	r3, r1, r3
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	ea02 0103 	and.w	r1, r2, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f003 0310 	and.w	r3, r3, #16
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d11d      	bne.n	8009ae8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	221f      	movs	r2, #31
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aee:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f003 0310 	and.w	r3, r3, #16
 8009af6:	2207      	movs	r2, #7
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	43db      	mvns	r3, r3
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	4013      	ands	r3, r2
 8009b02:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d102      	bne.n	8009b12 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b10:	e00f      	b.n	8009b32 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d102      	bne.n	8009b20 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b1e:	e008      	b.n	8009b32 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b2c:	e001      	b.n	8009b32 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f003 0310 	and.w	r3, r3, #16
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6819      	ldr	r1, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b70:	43da      	mvns	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	400a      	ands	r2, r1
 8009b78:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	43db      	mvns	r3, r3
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4013      	ands	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f003 0310 	and.w	r3, r3, #16
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6819      	ldr	r1, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	22c0      	movs	r2, #192	@ 0xc0
 8009bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bca:	43da      	mvns	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	400a      	ands	r2, r1
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8009be0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3728      	adds	r7, #40	@ 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20008000 	.word	0x20008000

08009bf0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7f7 fb66 	bl	80012d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2201      	movs	r2, #1
 8009c08:	711a      	strb	r2, [r3, #4]
}
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b084      	sub	sp, #16
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7f7 fb47 	bl	80012b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f043 0204 	orr.w	r2, r3, #4
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fe85 	bl	8009958 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2201      	movs	r2, #1
 8009c52:	711a      	strb	r2, [r3, #4]
}
 8009c54:	bf00      	nop
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7ff ffd8 	bl	8009c5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	711a      	strb	r2, [r3, #4]
}
 8009cb2:	bf00      	nop
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff ffd1 	bl	8009c70 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	f043 0204 	orr.w	r2, r3, #4
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f7ff ffc7 	bl	8009c84 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	711a      	strb	r2, [r3, #4]
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009d0c:	f7fe f816 	bl	8007d3c <HAL_GetTick>
 8009d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e312      	b.n	800a342 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a66      	ldr	r2, [pc, #408]	@ (8009ebc <HAL_DMA_Init+0x1b8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d04a      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a65      	ldr	r2, [pc, #404]	@ (8009ec0 <HAL_DMA_Init+0x1bc>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d045      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a63      	ldr	r2, [pc, #396]	@ (8009ec4 <HAL_DMA_Init+0x1c0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d040      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a62      	ldr	r2, [pc, #392]	@ (8009ec8 <HAL_DMA_Init+0x1c4>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d03b      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a60      	ldr	r2, [pc, #384]	@ (8009ecc <HAL_DMA_Init+0x1c8>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d036      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a5f      	ldr	r2, [pc, #380]	@ (8009ed0 <HAL_DMA_Init+0x1cc>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d031      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8009ed4 <HAL_DMA_Init+0x1d0>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d02c      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a5c      	ldr	r2, [pc, #368]	@ (8009ed8 <HAL_DMA_Init+0x1d4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d027      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a5a      	ldr	r2, [pc, #360]	@ (8009edc <HAL_DMA_Init+0x1d8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d022      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a59      	ldr	r2, [pc, #356]	@ (8009ee0 <HAL_DMA_Init+0x1dc>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d01d      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a57      	ldr	r2, [pc, #348]	@ (8009ee4 <HAL_DMA_Init+0x1e0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d018      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a56      	ldr	r2, [pc, #344]	@ (8009ee8 <HAL_DMA_Init+0x1e4>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d013      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a54      	ldr	r2, [pc, #336]	@ (8009eec <HAL_DMA_Init+0x1e8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00e      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a53      	ldr	r2, [pc, #332]	@ (8009ef0 <HAL_DMA_Init+0x1ec>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d009      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a51      	ldr	r2, [pc, #324]	@ (8009ef4 <HAL_DMA_Init+0x1f0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d004      	beq.n	8009dbc <HAL_DMA_Init+0xb8>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a50      	ldr	r2, [pc, #320]	@ (8009ef8 <HAL_DMA_Init+0x1f4>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d101      	bne.n	8009dc0 <HAL_DMA_Init+0xbc>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e000      	b.n	8009dc2 <HAL_DMA_Init+0xbe>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 813c 	beq.w	800a040 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a37      	ldr	r2, [pc, #220]	@ (8009ebc <HAL_DMA_Init+0x1b8>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d04a      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a36      	ldr	r2, [pc, #216]	@ (8009ec0 <HAL_DMA_Init+0x1bc>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d045      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a34      	ldr	r2, [pc, #208]	@ (8009ec4 <HAL_DMA_Init+0x1c0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d040      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a33      	ldr	r2, [pc, #204]	@ (8009ec8 <HAL_DMA_Init+0x1c4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d03b      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a31      	ldr	r2, [pc, #196]	@ (8009ecc <HAL_DMA_Init+0x1c8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d036      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a30      	ldr	r2, [pc, #192]	@ (8009ed0 <HAL_DMA_Init+0x1cc>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d031      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed4 <HAL_DMA_Init+0x1d0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d02c      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a2d      	ldr	r2, [pc, #180]	@ (8009ed8 <HAL_DMA_Init+0x1d4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d027      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009edc <HAL_DMA_Init+0x1d8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d022      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2a      	ldr	r2, [pc, #168]	@ (8009ee0 <HAL_DMA_Init+0x1dc>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d01d      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a28      	ldr	r2, [pc, #160]	@ (8009ee4 <HAL_DMA_Init+0x1e0>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d018      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a27      	ldr	r2, [pc, #156]	@ (8009ee8 <HAL_DMA_Init+0x1e4>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d013      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a25      	ldr	r2, [pc, #148]	@ (8009eec <HAL_DMA_Init+0x1e8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00e      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a24      	ldr	r2, [pc, #144]	@ (8009ef0 <HAL_DMA_Init+0x1ec>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d009      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a22      	ldr	r2, [pc, #136]	@ (8009ef4 <HAL_DMA_Init+0x1f0>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <HAL_DMA_Init+0x174>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a21      	ldr	r2, [pc, #132]	@ (8009ef8 <HAL_DMA_Init+0x1f4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d108      	bne.n	8009e8a <HAL_DMA_Init+0x186>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0201 	bic.w	r2, r2, #1
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	e007      	b.n	8009e9a <HAL_DMA_Init+0x196>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0201 	bic.w	r2, r2, #1
 8009e98:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009e9a:	e02f      	b.n	8009efc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e9c:	f7fd ff4e 	bl	8007d3c <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b05      	cmp	r3, #5
 8009ea8:	d928      	bls.n	8009efc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e242      	b.n	800a342 <HAL_DMA_Init+0x63e>
 8009ebc:	40020010 	.word	0x40020010
 8009ec0:	40020028 	.word	0x40020028
 8009ec4:	40020040 	.word	0x40020040
 8009ec8:	40020058 	.word	0x40020058
 8009ecc:	40020070 	.word	0x40020070
 8009ed0:	40020088 	.word	0x40020088
 8009ed4:	400200a0 	.word	0x400200a0
 8009ed8:	400200b8 	.word	0x400200b8
 8009edc:	40020410 	.word	0x40020410
 8009ee0:	40020428 	.word	0x40020428
 8009ee4:	40020440 	.word	0x40020440
 8009ee8:	40020458 	.word	0x40020458
 8009eec:	40020470 	.word	0x40020470
 8009ef0:	40020488 	.word	0x40020488
 8009ef4:	400204a0 	.word	0x400204a0
 8009ef8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1c8      	bne.n	8009e9c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4b83      	ldr	r3, [pc, #524]	@ (800a124 <HAL_DMA_Init+0x420>)
 8009f16:	4013      	ands	r3, r2
 8009f18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009f22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d107      	bne.n	8009f60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b28      	cmp	r3, #40	@ 0x28
 8009f66:	d903      	bls.n	8009f70 <HAL_DMA_Init+0x26c>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f6e:	d91f      	bls.n	8009fb0 <HAL_DMA_Init+0x2ac>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f76:	d903      	bls.n	8009f80 <HAL_DMA_Init+0x27c>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b42      	cmp	r3, #66	@ 0x42
 8009f7e:	d917      	bls.n	8009fb0 <HAL_DMA_Init+0x2ac>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b46      	cmp	r3, #70	@ 0x46
 8009f86:	d903      	bls.n	8009f90 <HAL_DMA_Init+0x28c>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b48      	cmp	r3, #72	@ 0x48
 8009f8e:	d90f      	bls.n	8009fb0 <HAL_DMA_Init+0x2ac>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b4e      	cmp	r3, #78	@ 0x4e
 8009f96:	d903      	bls.n	8009fa0 <HAL_DMA_Init+0x29c>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b52      	cmp	r3, #82	@ 0x52
 8009f9e:	d907      	bls.n	8009fb0 <HAL_DMA_Init+0x2ac>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	2b73      	cmp	r3, #115	@ 0x73
 8009fa6:	d905      	bls.n	8009fb4 <HAL_DMA_Init+0x2b0>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	2b77      	cmp	r3, #119	@ 0x77
 8009fae:	d801      	bhi.n	8009fb4 <HAL_DMA_Init+0x2b0>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <HAL_DMA_Init+0x2b2>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fc0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f023 0307 	bic.w	r3, r3, #7
 8009fd8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d117      	bne.n	800a01c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00e      	beq.n	800a01c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fdca 	bl	800bb98 <DMA_CheckFifoParam>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d008      	beq.n	800a01c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2240      	movs	r2, #64	@ 0x40
 800a00e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e192      	b.n	800a342 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 fd05 	bl	800ba34 <DMA_CalcBaseAndBitshift>
 800a02a:	4603      	mov	r3, r0
 800a02c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a032:	f003 031f 	and.w	r3, r3, #31
 800a036:	223f      	movs	r2, #63	@ 0x3f
 800a038:	409a      	lsls	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	609a      	str	r2, [r3, #8]
 800a03e:	e0c8      	b.n	800a1d2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a38      	ldr	r2, [pc, #224]	@ (800a128 <HAL_DMA_Init+0x424>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d022      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a37      	ldr	r2, [pc, #220]	@ (800a12c <HAL_DMA_Init+0x428>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d01d      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a35      	ldr	r2, [pc, #212]	@ (800a130 <HAL_DMA_Init+0x42c>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d018      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a34      	ldr	r2, [pc, #208]	@ (800a134 <HAL_DMA_Init+0x430>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d013      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a32      	ldr	r2, [pc, #200]	@ (800a138 <HAL_DMA_Init+0x434>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00e      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a31      	ldr	r2, [pc, #196]	@ (800a13c <HAL_DMA_Init+0x438>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d009      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a2f      	ldr	r2, [pc, #188]	@ (800a140 <HAL_DMA_Init+0x43c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d004      	beq.n	800a090 <HAL_DMA_Init+0x38c>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a2e      	ldr	r2, [pc, #184]	@ (800a144 <HAL_DMA_Init+0x440>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d101      	bne.n	800a094 <HAL_DMA_Init+0x390>
 800a090:	2301      	movs	r3, #1
 800a092:	e000      	b.n	800a096 <HAL_DMA_Init+0x392>
 800a094:	2300      	movs	r3, #0
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 8092 	beq.w	800a1c0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a21      	ldr	r2, [pc, #132]	@ (800a128 <HAL_DMA_Init+0x424>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d021      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a20      	ldr	r2, [pc, #128]	@ (800a12c <HAL_DMA_Init+0x428>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d01c      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a130 <HAL_DMA_Init+0x42c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d017      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a1d      	ldr	r2, [pc, #116]	@ (800a134 <HAL_DMA_Init+0x430>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d012      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a138 <HAL_DMA_Init+0x434>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d00d      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a13c <HAL_DMA_Init+0x438>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d008      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a18      	ldr	r2, [pc, #96]	@ (800a140 <HAL_DMA_Init+0x43c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <HAL_DMA_Init+0x3e6>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a17      	ldr	r2, [pc, #92]	@ (800a144 <HAL_DMA_Init+0x440>)
 800a0e8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <HAL_DMA_Init+0x444>)
 800a106:	4013      	ands	r3, r2
 800a108:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b40      	cmp	r3, #64	@ 0x40
 800a110:	d01c      	beq.n	800a14c <HAL_DMA_Init+0x448>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b80      	cmp	r3, #128	@ 0x80
 800a118:	d102      	bne.n	800a120 <HAL_DMA_Init+0x41c>
 800a11a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a11e:	e016      	b.n	800a14e <HAL_DMA_Init+0x44a>
 800a120:	2300      	movs	r3, #0
 800a122:	e014      	b.n	800a14e <HAL_DMA_Init+0x44a>
 800a124:	fe10803f 	.word	0xfe10803f
 800a128:	58025408 	.word	0x58025408
 800a12c:	5802541c 	.word	0x5802541c
 800a130:	58025430 	.word	0x58025430
 800a134:	58025444 	.word	0x58025444
 800a138:	58025458 	.word	0x58025458
 800a13c:	5802546c 	.word	0x5802546c
 800a140:	58025480 	.word	0x58025480
 800a144:	58025494 	.word	0x58025494
 800a148:	fffe000f 	.word	0xfffe000f
 800a14c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	68d2      	ldr	r2, [r2, #12]
 800a152:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a15c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a16c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a17c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	4b6e      	ldr	r3, [pc, #440]	@ (800a34c <HAL_DMA_Init+0x648>)
 800a194:	4413      	add	r3, r2
 800a196:	4a6e      	ldr	r2, [pc, #440]	@ (800a350 <HAL_DMA_Init+0x64c>)
 800a198:	fba2 2303 	umull	r2, r3, r2, r3
 800a19c:	091b      	lsrs	r3, r3, #4
 800a19e:	009a      	lsls	r2, r3, #2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 fc45 	bl	800ba34 <DMA_CalcBaseAndBitshift>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1b2:	f003 031f 	and.w	r3, r3, #31
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	605a      	str	r2, [r3, #4]
 800a1be:	e008      	b.n	800a1d2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2240      	movs	r2, #64	@ 0x40
 800a1c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e0b7      	b.n	800a342 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a5f      	ldr	r2, [pc, #380]	@ (800a354 <HAL_DMA_Init+0x650>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d072      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a5d      	ldr	r2, [pc, #372]	@ (800a358 <HAL_DMA_Init+0x654>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d06d      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a5c      	ldr	r2, [pc, #368]	@ (800a35c <HAL_DMA_Init+0x658>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d068      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a5a      	ldr	r2, [pc, #360]	@ (800a360 <HAL_DMA_Init+0x65c>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d063      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a59      	ldr	r2, [pc, #356]	@ (800a364 <HAL_DMA_Init+0x660>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d05e      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a57      	ldr	r2, [pc, #348]	@ (800a368 <HAL_DMA_Init+0x664>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d059      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a56      	ldr	r2, [pc, #344]	@ (800a36c <HAL_DMA_Init+0x668>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d054      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a54      	ldr	r2, [pc, #336]	@ (800a370 <HAL_DMA_Init+0x66c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d04f      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a53      	ldr	r2, [pc, #332]	@ (800a374 <HAL_DMA_Init+0x670>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d04a      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a51      	ldr	r2, [pc, #324]	@ (800a378 <HAL_DMA_Init+0x674>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d045      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a50      	ldr	r2, [pc, #320]	@ (800a37c <HAL_DMA_Init+0x678>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d040      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a4e      	ldr	r2, [pc, #312]	@ (800a380 <HAL_DMA_Init+0x67c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d03b      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a4d      	ldr	r2, [pc, #308]	@ (800a384 <HAL_DMA_Init+0x680>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d036      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a4b      	ldr	r2, [pc, #300]	@ (800a388 <HAL_DMA_Init+0x684>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d031      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a4a      	ldr	r2, [pc, #296]	@ (800a38c <HAL_DMA_Init+0x688>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d02c      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a48      	ldr	r2, [pc, #288]	@ (800a390 <HAL_DMA_Init+0x68c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d027      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a47      	ldr	r2, [pc, #284]	@ (800a394 <HAL_DMA_Init+0x690>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d022      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a45      	ldr	r2, [pc, #276]	@ (800a398 <HAL_DMA_Init+0x694>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d01d      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a44      	ldr	r2, [pc, #272]	@ (800a39c <HAL_DMA_Init+0x698>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d018      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a42      	ldr	r2, [pc, #264]	@ (800a3a0 <HAL_DMA_Init+0x69c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d013      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a41      	ldr	r2, [pc, #260]	@ (800a3a4 <HAL_DMA_Init+0x6a0>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d00e      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a3f      	ldr	r2, [pc, #252]	@ (800a3a8 <HAL_DMA_Init+0x6a4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d009      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a3e      	ldr	r2, [pc, #248]	@ (800a3ac <HAL_DMA_Init+0x6a8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <HAL_DMA_Init+0x5be>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a3c      	ldr	r2, [pc, #240]	@ (800a3b0 <HAL_DMA_Init+0x6ac>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d101      	bne.n	800a2c6 <HAL_DMA_Init+0x5c2>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <HAL_DMA_Init+0x5c4>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d032      	beq.n	800a332 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 fcdf 	bl	800bc90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2b80      	cmp	r3, #128	@ 0x80
 800a2d8:	d102      	bne.n	800a2e0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2e8:	b2d2      	uxtb	r2, r2
 800a2ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a2f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d010      	beq.n	800a320 <HAL_DMA_Init+0x61c>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b08      	cmp	r3, #8
 800a304:	d80c      	bhi.n	800a320 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 fd5c 	bl	800bdc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	e008      	b.n	800a332 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	a7fdabf8 	.word	0xa7fdabf8
 800a350:	cccccccd 	.word	0xcccccccd
 800a354:	40020010 	.word	0x40020010
 800a358:	40020028 	.word	0x40020028
 800a35c:	40020040 	.word	0x40020040
 800a360:	40020058 	.word	0x40020058
 800a364:	40020070 	.word	0x40020070
 800a368:	40020088 	.word	0x40020088
 800a36c:	400200a0 	.word	0x400200a0
 800a370:	400200b8 	.word	0x400200b8
 800a374:	40020410 	.word	0x40020410
 800a378:	40020428 	.word	0x40020428
 800a37c:	40020440 	.word	0x40020440
 800a380:	40020458 	.word	0x40020458
 800a384:	40020470 	.word	0x40020470
 800a388:	40020488 	.word	0x40020488
 800a38c:	400204a0 	.word	0x400204a0
 800a390:	400204b8 	.word	0x400204b8
 800a394:	58025408 	.word	0x58025408
 800a398:	5802541c 	.word	0x5802541c
 800a39c:	58025430 	.word	0x58025430
 800a3a0:	58025444 	.word	0x58025444
 800a3a4:	58025458 	.word	0x58025458
 800a3a8:	5802546c 	.word	0x5802546c
 800a3ac:	58025480 	.word	0x58025480
 800a3b0:	58025494 	.word	0x58025494

0800a3b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
 800a3c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e226      	b.n	800a81e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <HAL_DMA_Start_IT+0x2a>
 800a3da:	2302      	movs	r3, #2
 800a3dc:	e21f      	b.n	800a81e <HAL_DMA_Start_IT+0x46a>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	f040 820a 	bne.w	800a808 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a68      	ldr	r2, [pc, #416]	@ (800a5a8 <HAL_DMA_Start_IT+0x1f4>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d04a      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a66      	ldr	r2, [pc, #408]	@ (800a5ac <HAL_DMA_Start_IT+0x1f8>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d045      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a65      	ldr	r2, [pc, #404]	@ (800a5b0 <HAL_DMA_Start_IT+0x1fc>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d040      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a63      	ldr	r2, [pc, #396]	@ (800a5b4 <HAL_DMA_Start_IT+0x200>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d03b      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a62      	ldr	r2, [pc, #392]	@ (800a5b8 <HAL_DMA_Start_IT+0x204>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d036      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a60      	ldr	r2, [pc, #384]	@ (800a5bc <HAL_DMA_Start_IT+0x208>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d031      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a5f      	ldr	r2, [pc, #380]	@ (800a5c0 <HAL_DMA_Start_IT+0x20c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d02c      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a5d      	ldr	r2, [pc, #372]	@ (800a5c4 <HAL_DMA_Start_IT+0x210>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d027      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a5c      	ldr	r2, [pc, #368]	@ (800a5c8 <HAL_DMA_Start_IT+0x214>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d022      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a5a      	ldr	r2, [pc, #360]	@ (800a5cc <HAL_DMA_Start_IT+0x218>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d01d      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a59      	ldr	r2, [pc, #356]	@ (800a5d0 <HAL_DMA_Start_IT+0x21c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d018      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a57      	ldr	r2, [pc, #348]	@ (800a5d4 <HAL_DMA_Start_IT+0x220>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d013      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a56      	ldr	r2, [pc, #344]	@ (800a5d8 <HAL_DMA_Start_IT+0x224>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d00e      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a54      	ldr	r2, [pc, #336]	@ (800a5dc <HAL_DMA_Start_IT+0x228>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d009      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a53      	ldr	r2, [pc, #332]	@ (800a5e0 <HAL_DMA_Start_IT+0x22c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d004      	beq.n	800a4a2 <HAL_DMA_Start_IT+0xee>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a51      	ldr	r2, [pc, #324]	@ (800a5e4 <HAL_DMA_Start_IT+0x230>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d108      	bne.n	800a4b4 <HAL_DMA_Start_IT+0x100>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e007      	b.n	800a4c4 <HAL_DMA_Start_IT+0x110>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0201 	bic.w	r2, r2, #1
 800a4c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f001 f906 	bl	800b6dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a34      	ldr	r2, [pc, #208]	@ (800a5a8 <HAL_DMA_Start_IT+0x1f4>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d04a      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a33      	ldr	r2, [pc, #204]	@ (800a5ac <HAL_DMA_Start_IT+0x1f8>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d045      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a31      	ldr	r2, [pc, #196]	@ (800a5b0 <HAL_DMA_Start_IT+0x1fc>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d040      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a30      	ldr	r2, [pc, #192]	@ (800a5b4 <HAL_DMA_Start_IT+0x200>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d03b      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a2e      	ldr	r2, [pc, #184]	@ (800a5b8 <HAL_DMA_Start_IT+0x204>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d036      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a2d      	ldr	r2, [pc, #180]	@ (800a5bc <HAL_DMA_Start_IT+0x208>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d031      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a2b      	ldr	r2, [pc, #172]	@ (800a5c0 <HAL_DMA_Start_IT+0x20c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d02c      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a2a      	ldr	r2, [pc, #168]	@ (800a5c4 <HAL_DMA_Start_IT+0x210>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d027      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a28      	ldr	r2, [pc, #160]	@ (800a5c8 <HAL_DMA_Start_IT+0x214>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d022      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a27      	ldr	r2, [pc, #156]	@ (800a5cc <HAL_DMA_Start_IT+0x218>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d01d      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a25      	ldr	r2, [pc, #148]	@ (800a5d0 <HAL_DMA_Start_IT+0x21c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d018      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a24      	ldr	r2, [pc, #144]	@ (800a5d4 <HAL_DMA_Start_IT+0x220>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d013      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a22      	ldr	r2, [pc, #136]	@ (800a5d8 <HAL_DMA_Start_IT+0x224>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00e      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a21      	ldr	r2, [pc, #132]	@ (800a5dc <HAL_DMA_Start_IT+0x228>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d009      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e0 <HAL_DMA_Start_IT+0x22c>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d004      	beq.n	800a570 <HAL_DMA_Start_IT+0x1bc>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e4 <HAL_DMA_Start_IT+0x230>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d101      	bne.n	800a574 <HAL_DMA_Start_IT+0x1c0>
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <HAL_DMA_Start_IT+0x1c2>
 800a574:	2300      	movs	r3, #0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d036      	beq.n	800a5e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f023 021e 	bic.w	r2, r3, #30
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0216 	orr.w	r2, r2, #22
 800a58c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03e      	beq.n	800a614 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0208 	orr.w	r2, r2, #8
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	e035      	b.n	800a614 <HAL_DMA_Start_IT+0x260>
 800a5a8:	40020010 	.word	0x40020010
 800a5ac:	40020028 	.word	0x40020028
 800a5b0:	40020040 	.word	0x40020040
 800a5b4:	40020058 	.word	0x40020058
 800a5b8:	40020070 	.word	0x40020070
 800a5bc:	40020088 	.word	0x40020088
 800a5c0:	400200a0 	.word	0x400200a0
 800a5c4:	400200b8 	.word	0x400200b8
 800a5c8:	40020410 	.word	0x40020410
 800a5cc:	40020428 	.word	0x40020428
 800a5d0:	40020440 	.word	0x40020440
 800a5d4:	40020458 	.word	0x40020458
 800a5d8:	40020470 	.word	0x40020470
 800a5dc:	40020488 	.word	0x40020488
 800a5e0:	400204a0 	.word	0x400204a0
 800a5e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f023 020e 	bic.w	r2, r3, #14
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 020a 	orr.w	r2, r2, #10
 800a5fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0204 	orr.w	r2, r2, #4
 800a612:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a83      	ldr	r2, [pc, #524]	@ (800a828 <HAL_DMA_Start_IT+0x474>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d072      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a82      	ldr	r2, [pc, #520]	@ (800a82c <HAL_DMA_Start_IT+0x478>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d06d      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a80      	ldr	r2, [pc, #512]	@ (800a830 <HAL_DMA_Start_IT+0x47c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d068      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a7f      	ldr	r2, [pc, #508]	@ (800a834 <HAL_DMA_Start_IT+0x480>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d063      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a7d      	ldr	r2, [pc, #500]	@ (800a838 <HAL_DMA_Start_IT+0x484>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d05e      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a7c      	ldr	r2, [pc, #496]	@ (800a83c <HAL_DMA_Start_IT+0x488>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d059      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a7a      	ldr	r2, [pc, #488]	@ (800a840 <HAL_DMA_Start_IT+0x48c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d054      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a79      	ldr	r2, [pc, #484]	@ (800a844 <HAL_DMA_Start_IT+0x490>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d04f      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a77      	ldr	r2, [pc, #476]	@ (800a848 <HAL_DMA_Start_IT+0x494>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d04a      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a76      	ldr	r2, [pc, #472]	@ (800a84c <HAL_DMA_Start_IT+0x498>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d045      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a74      	ldr	r2, [pc, #464]	@ (800a850 <HAL_DMA_Start_IT+0x49c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d040      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a73      	ldr	r2, [pc, #460]	@ (800a854 <HAL_DMA_Start_IT+0x4a0>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d03b      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a71      	ldr	r2, [pc, #452]	@ (800a858 <HAL_DMA_Start_IT+0x4a4>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d036      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a70      	ldr	r2, [pc, #448]	@ (800a85c <HAL_DMA_Start_IT+0x4a8>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d031      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a6e      	ldr	r2, [pc, #440]	@ (800a860 <HAL_DMA_Start_IT+0x4ac>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d02c      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a6d      	ldr	r2, [pc, #436]	@ (800a864 <HAL_DMA_Start_IT+0x4b0>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d027      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a6b      	ldr	r2, [pc, #428]	@ (800a868 <HAL_DMA_Start_IT+0x4b4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d022      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a6a      	ldr	r2, [pc, #424]	@ (800a86c <HAL_DMA_Start_IT+0x4b8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d01d      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a68      	ldr	r2, [pc, #416]	@ (800a870 <HAL_DMA_Start_IT+0x4bc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d018      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a67      	ldr	r2, [pc, #412]	@ (800a874 <HAL_DMA_Start_IT+0x4c0>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a65      	ldr	r2, [pc, #404]	@ (800a878 <HAL_DMA_Start_IT+0x4c4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00e      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a64      	ldr	r2, [pc, #400]	@ (800a87c <HAL_DMA_Start_IT+0x4c8>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d009      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a62      	ldr	r2, [pc, #392]	@ (800a880 <HAL_DMA_Start_IT+0x4cc>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <HAL_DMA_Start_IT+0x350>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a61      	ldr	r2, [pc, #388]	@ (800a884 <HAL_DMA_Start_IT+0x4d0>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d101      	bne.n	800a708 <HAL_DMA_Start_IT+0x354>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <HAL_DMA_Start_IT+0x356>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d01a      	beq.n	800a744 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d007      	beq.n	800a72c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a72a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a73e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a742:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a37      	ldr	r2, [pc, #220]	@ (800a828 <HAL_DMA_Start_IT+0x474>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d04a      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a36      	ldr	r2, [pc, #216]	@ (800a82c <HAL_DMA_Start_IT+0x478>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d045      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a34      	ldr	r2, [pc, #208]	@ (800a830 <HAL_DMA_Start_IT+0x47c>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d040      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a33      	ldr	r2, [pc, #204]	@ (800a834 <HAL_DMA_Start_IT+0x480>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d03b      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a31      	ldr	r2, [pc, #196]	@ (800a838 <HAL_DMA_Start_IT+0x484>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d036      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a30      	ldr	r2, [pc, #192]	@ (800a83c <HAL_DMA_Start_IT+0x488>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d031      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a2e      	ldr	r2, [pc, #184]	@ (800a840 <HAL_DMA_Start_IT+0x48c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d02c      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a2d      	ldr	r2, [pc, #180]	@ (800a844 <HAL_DMA_Start_IT+0x490>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d027      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a2b      	ldr	r2, [pc, #172]	@ (800a848 <HAL_DMA_Start_IT+0x494>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d022      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a84c <HAL_DMA_Start_IT+0x498>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d01d      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a28      	ldr	r2, [pc, #160]	@ (800a850 <HAL_DMA_Start_IT+0x49c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d018      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a27      	ldr	r2, [pc, #156]	@ (800a854 <HAL_DMA_Start_IT+0x4a0>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a25      	ldr	r2, [pc, #148]	@ (800a858 <HAL_DMA_Start_IT+0x4a4>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00e      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a24      	ldr	r2, [pc, #144]	@ (800a85c <HAL_DMA_Start_IT+0x4a8>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a22      	ldr	r2, [pc, #136]	@ (800a860 <HAL_DMA_Start_IT+0x4ac>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <HAL_DMA_Start_IT+0x430>
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a21      	ldr	r2, [pc, #132]	@ (800a864 <HAL_DMA_Start_IT+0x4b0>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d108      	bne.n	800a7f6 <HAL_DMA_Start_IT+0x442>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f042 0201 	orr.w	r2, r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e012      	b.n	800a81c <HAL_DMA_Start_IT+0x468>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 0201 	orr.w	r2, r2, #1
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	e009      	b.n	800a81c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a80e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3718      	adds	r7, #24
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40020010 	.word	0x40020010
 800a82c:	40020028 	.word	0x40020028
 800a830:	40020040 	.word	0x40020040
 800a834:	40020058 	.word	0x40020058
 800a838:	40020070 	.word	0x40020070
 800a83c:	40020088 	.word	0x40020088
 800a840:	400200a0 	.word	0x400200a0
 800a844:	400200b8 	.word	0x400200b8
 800a848:	40020410 	.word	0x40020410
 800a84c:	40020428 	.word	0x40020428
 800a850:	40020440 	.word	0x40020440
 800a854:	40020458 	.word	0x40020458
 800a858:	40020470 	.word	0x40020470
 800a85c:	40020488 	.word	0x40020488
 800a860:	400204a0 	.word	0x400204a0
 800a864:	400204b8 	.word	0x400204b8
 800a868:	58025408 	.word	0x58025408
 800a86c:	5802541c 	.word	0x5802541c
 800a870:	58025430 	.word	0x58025430
 800a874:	58025444 	.word	0x58025444
 800a878:	58025458 	.word	0x58025458
 800a87c:	5802546c 	.word	0x5802546c
 800a880:	58025480 	.word	0x58025480
 800a884:	58025494 	.word	0x58025494

0800a888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	@ 0x28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a894:	4b67      	ldr	r3, [pc, #412]	@ (800aa34 <HAL_DMA_IRQHandler+0x1ac>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a67      	ldr	r2, [pc, #412]	@ (800aa38 <HAL_DMA_IRQHandler+0x1b0>)
 800a89a:	fba2 2303 	umull	r2, r3, r2, r3
 800a89e:	0a9b      	lsrs	r3, r3, #10
 800a8a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a5f      	ldr	r2, [pc, #380]	@ (800aa3c <HAL_DMA_IRQHandler+0x1b4>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d04a      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a5d      	ldr	r2, [pc, #372]	@ (800aa40 <HAL_DMA_IRQHandler+0x1b8>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d045      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a5c      	ldr	r2, [pc, #368]	@ (800aa44 <HAL_DMA_IRQHandler+0x1bc>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d040      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a5a      	ldr	r2, [pc, #360]	@ (800aa48 <HAL_DMA_IRQHandler+0x1c0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d03b      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a59      	ldr	r2, [pc, #356]	@ (800aa4c <HAL_DMA_IRQHandler+0x1c4>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d036      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a57      	ldr	r2, [pc, #348]	@ (800aa50 <HAL_DMA_IRQHandler+0x1c8>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d031      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a56      	ldr	r2, [pc, #344]	@ (800aa54 <HAL_DMA_IRQHandler+0x1cc>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d02c      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a54      	ldr	r2, [pc, #336]	@ (800aa58 <HAL_DMA_IRQHandler+0x1d0>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d027      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a53      	ldr	r2, [pc, #332]	@ (800aa5c <HAL_DMA_IRQHandler+0x1d4>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d022      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a51      	ldr	r2, [pc, #324]	@ (800aa60 <HAL_DMA_IRQHandler+0x1d8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d01d      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a50      	ldr	r2, [pc, #320]	@ (800aa64 <HAL_DMA_IRQHandler+0x1dc>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d018      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a4e      	ldr	r2, [pc, #312]	@ (800aa68 <HAL_DMA_IRQHandler+0x1e0>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d013      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a4d      	ldr	r2, [pc, #308]	@ (800aa6c <HAL_DMA_IRQHandler+0x1e4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d00e      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a4b      	ldr	r2, [pc, #300]	@ (800aa70 <HAL_DMA_IRQHandler+0x1e8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d009      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a4a      	ldr	r2, [pc, #296]	@ (800aa74 <HAL_DMA_IRQHandler+0x1ec>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d004      	beq.n	800a95a <HAL_DMA_IRQHandler+0xd2>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a48      	ldr	r2, [pc, #288]	@ (800aa78 <HAL_DMA_IRQHandler+0x1f0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d101      	bne.n	800a95e <HAL_DMA_IRQHandler+0xd6>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <HAL_DMA_IRQHandler+0xd8>
 800a95e:	2300      	movs	r3, #0
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 842b 	beq.w	800b1bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a96a:	f003 031f 	and.w	r3, r3, #31
 800a96e:	2208      	movs	r2, #8
 800a970:	409a      	lsls	r2, r3
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	4013      	ands	r3, r2
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 80a2 	beq.w	800aac0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a2e      	ldr	r2, [pc, #184]	@ (800aa3c <HAL_DMA_IRQHandler+0x1b4>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d04a      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a2d      	ldr	r2, [pc, #180]	@ (800aa40 <HAL_DMA_IRQHandler+0x1b8>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d045      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a2b      	ldr	r2, [pc, #172]	@ (800aa44 <HAL_DMA_IRQHandler+0x1bc>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d040      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a2a      	ldr	r2, [pc, #168]	@ (800aa48 <HAL_DMA_IRQHandler+0x1c0>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d03b      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a28      	ldr	r2, [pc, #160]	@ (800aa4c <HAL_DMA_IRQHandler+0x1c4>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d036      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a27      	ldr	r2, [pc, #156]	@ (800aa50 <HAL_DMA_IRQHandler+0x1c8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d031      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a25      	ldr	r2, [pc, #148]	@ (800aa54 <HAL_DMA_IRQHandler+0x1cc>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d02c      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a24      	ldr	r2, [pc, #144]	@ (800aa58 <HAL_DMA_IRQHandler+0x1d0>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d027      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a22      	ldr	r2, [pc, #136]	@ (800aa5c <HAL_DMA_IRQHandler+0x1d4>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d022      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a21      	ldr	r2, [pc, #132]	@ (800aa60 <HAL_DMA_IRQHandler+0x1d8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d01d      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa64 <HAL_DMA_IRQHandler+0x1dc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d018      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	@ (800aa68 <HAL_DMA_IRQHandler+0x1e0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a1c      	ldr	r2, [pc, #112]	@ (800aa6c <HAL_DMA_IRQHandler+0x1e4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00e      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a1b      	ldr	r2, [pc, #108]	@ (800aa70 <HAL_DMA_IRQHandler+0x1e8>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d009      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a19      	ldr	r2, [pc, #100]	@ (800aa74 <HAL_DMA_IRQHandler+0x1ec>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d004      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x194>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a18      	ldr	r2, [pc, #96]	@ (800aa78 <HAL_DMA_IRQHandler+0x1f0>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d12f      	bne.n	800aa7c <HAL_DMA_IRQHandler+0x1f4>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bf14      	ite	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	2300      	moveq	r3, #0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	e02e      	b.n	800aa90 <HAL_DMA_IRQHandler+0x208>
 800aa32:	bf00      	nop
 800aa34:	24000000 	.word	0x24000000
 800aa38:	1b4e81b5 	.word	0x1b4e81b5
 800aa3c:	40020010 	.word	0x40020010
 800aa40:	40020028 	.word	0x40020028
 800aa44:	40020040 	.word	0x40020040
 800aa48:	40020058 	.word	0x40020058
 800aa4c:	40020070 	.word	0x40020070
 800aa50:	40020088 	.word	0x40020088
 800aa54:	400200a0 	.word	0x400200a0
 800aa58:	400200b8 	.word	0x400200b8
 800aa5c:	40020410 	.word	0x40020410
 800aa60:	40020428 	.word	0x40020428
 800aa64:	40020440 	.word	0x40020440
 800aa68:	40020458 	.word	0x40020458
 800aa6c:	40020470 	.word	0x40020470
 800aa70:	40020488 	.word	0x40020488
 800aa74:	400204a0 	.word	0x400204a0
 800aa78:	400204b8 	.word	0x400204b8
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0308 	and.w	r3, r3, #8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bf14      	ite	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	2300      	moveq	r3, #0
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d015      	beq.n	800aac0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0204 	bic.w	r2, r2, #4
 800aaa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaa8:	f003 031f 	and.w	r3, r3, #31
 800aaac:	2208      	movs	r2, #8
 800aaae:	409a      	lsls	r2, r3
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab8:	f043 0201 	orr.w	r2, r3, #1
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aac4:	f003 031f 	and.w	r3, r3, #31
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	fa22 f303 	lsr.w	r3, r2, r3
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d06e      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a69      	ldr	r2, [pc, #420]	@ (800ac80 <HAL_DMA_IRQHandler+0x3f8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d04a      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a67      	ldr	r2, [pc, #412]	@ (800ac84 <HAL_DMA_IRQHandler+0x3fc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d045      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a66      	ldr	r2, [pc, #408]	@ (800ac88 <HAL_DMA_IRQHandler+0x400>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d040      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a64      	ldr	r2, [pc, #400]	@ (800ac8c <HAL_DMA_IRQHandler+0x404>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d03b      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a63      	ldr	r2, [pc, #396]	@ (800ac90 <HAL_DMA_IRQHandler+0x408>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d036      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a61      	ldr	r2, [pc, #388]	@ (800ac94 <HAL_DMA_IRQHandler+0x40c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d031      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a60      	ldr	r2, [pc, #384]	@ (800ac98 <HAL_DMA_IRQHandler+0x410>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d02c      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a5e      	ldr	r2, [pc, #376]	@ (800ac9c <HAL_DMA_IRQHandler+0x414>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d027      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a5d      	ldr	r2, [pc, #372]	@ (800aca0 <HAL_DMA_IRQHandler+0x418>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d022      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a5b      	ldr	r2, [pc, #364]	@ (800aca4 <HAL_DMA_IRQHandler+0x41c>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01d      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a5a      	ldr	r2, [pc, #360]	@ (800aca8 <HAL_DMA_IRQHandler+0x420>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d018      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a58      	ldr	r2, [pc, #352]	@ (800acac <HAL_DMA_IRQHandler+0x424>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d013      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a57      	ldr	r2, [pc, #348]	@ (800acb0 <HAL_DMA_IRQHandler+0x428>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00e      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a55      	ldr	r2, [pc, #340]	@ (800acb4 <HAL_DMA_IRQHandler+0x42c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d009      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a54      	ldr	r2, [pc, #336]	@ (800acb8 <HAL_DMA_IRQHandler+0x430>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d004      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x2ee>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a52      	ldr	r2, [pc, #328]	@ (800acbc <HAL_DMA_IRQHandler+0x434>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d10a      	bne.n	800ab8c <HAL_DMA_IRQHandler+0x304>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bf14      	ite	ne
 800ab84:	2301      	movne	r3, #1
 800ab86:	2300      	moveq	r3, #0
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	e003      	b.n	800ab94 <HAL_DMA_IRQHandler+0x30c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2300      	movs	r3, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00d      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9c:	f003 031f 	and.w	r3, r3, #31
 800aba0:	2201      	movs	r2, #1
 800aba2:	409a      	lsls	r2, r3
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abac:	f043 0202 	orr.w	r2, r3, #2
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abb8:	f003 031f 	and.w	r3, r3, #31
 800abbc:	2204      	movs	r2, #4
 800abbe:	409a      	lsls	r2, r3
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 808f 	beq.w	800ace8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a2c      	ldr	r2, [pc, #176]	@ (800ac80 <HAL_DMA_IRQHandler+0x3f8>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d04a      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac84 <HAL_DMA_IRQHandler+0x3fc>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d045      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a29      	ldr	r2, [pc, #164]	@ (800ac88 <HAL_DMA_IRQHandler+0x400>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d040      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a27      	ldr	r2, [pc, #156]	@ (800ac8c <HAL_DMA_IRQHandler+0x404>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d03b      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a26      	ldr	r2, [pc, #152]	@ (800ac90 <HAL_DMA_IRQHandler+0x408>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d036      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a24      	ldr	r2, [pc, #144]	@ (800ac94 <HAL_DMA_IRQHandler+0x40c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d031      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a23      	ldr	r2, [pc, #140]	@ (800ac98 <HAL_DMA_IRQHandler+0x410>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d02c      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a21      	ldr	r2, [pc, #132]	@ (800ac9c <HAL_DMA_IRQHandler+0x414>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d027      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a20      	ldr	r2, [pc, #128]	@ (800aca0 <HAL_DMA_IRQHandler+0x418>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d022      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a1e      	ldr	r2, [pc, #120]	@ (800aca4 <HAL_DMA_IRQHandler+0x41c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d01d      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a1d      	ldr	r2, [pc, #116]	@ (800aca8 <HAL_DMA_IRQHandler+0x420>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d018      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a1b      	ldr	r2, [pc, #108]	@ (800acac <HAL_DMA_IRQHandler+0x424>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d013      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a1a      	ldr	r2, [pc, #104]	@ (800acb0 <HAL_DMA_IRQHandler+0x428>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d00e      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a18      	ldr	r2, [pc, #96]	@ (800acb4 <HAL_DMA_IRQHandler+0x42c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d009      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	@ (800acb8 <HAL_DMA_IRQHandler+0x430>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d004      	beq.n	800ac6a <HAL_DMA_IRQHandler+0x3e2>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a15      	ldr	r2, [pc, #84]	@ (800acbc <HAL_DMA_IRQHandler+0x434>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d12a      	bne.n	800acc0 <HAL_DMA_IRQHandler+0x438>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bf14      	ite	ne
 800ac78:	2301      	movne	r3, #1
 800ac7a:	2300      	moveq	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	e023      	b.n	800acc8 <HAL_DMA_IRQHandler+0x440>
 800ac80:	40020010 	.word	0x40020010
 800ac84:	40020028 	.word	0x40020028
 800ac88:	40020040 	.word	0x40020040
 800ac8c:	40020058 	.word	0x40020058
 800ac90:	40020070 	.word	0x40020070
 800ac94:	40020088 	.word	0x40020088
 800ac98:	400200a0 	.word	0x400200a0
 800ac9c:	400200b8 	.word	0x400200b8
 800aca0:	40020410 	.word	0x40020410
 800aca4:	40020428 	.word	0x40020428
 800aca8:	40020440 	.word	0x40020440
 800acac:	40020458 	.word	0x40020458
 800acb0:	40020470 	.word	0x40020470
 800acb4:	40020488 	.word	0x40020488
 800acb8:	400204a0 	.word	0x400204a0
 800acbc:	400204b8 	.word	0x400204b8
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2300      	movs	r3, #0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00d      	beq.n	800ace8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acd0:	f003 031f 	and.w	r3, r3, #31
 800acd4:	2204      	movs	r2, #4
 800acd6:	409a      	lsls	r2, r3
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace0:	f043 0204 	orr.w	r2, r3, #4
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acec:	f003 031f 	and.w	r3, r3, #31
 800acf0:	2210      	movs	r2, #16
 800acf2:	409a      	lsls	r2, r3
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	4013      	ands	r3, r2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80a6 	beq.w	800ae4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a85      	ldr	r2, [pc, #532]	@ (800af18 <HAL_DMA_IRQHandler+0x690>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d04a      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a83      	ldr	r2, [pc, #524]	@ (800af1c <HAL_DMA_IRQHandler+0x694>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d045      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a82      	ldr	r2, [pc, #520]	@ (800af20 <HAL_DMA_IRQHandler+0x698>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d040      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a80      	ldr	r2, [pc, #512]	@ (800af24 <HAL_DMA_IRQHandler+0x69c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d03b      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a7f      	ldr	r2, [pc, #508]	@ (800af28 <HAL_DMA_IRQHandler+0x6a0>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d036      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a7d      	ldr	r2, [pc, #500]	@ (800af2c <HAL_DMA_IRQHandler+0x6a4>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d031      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a7c      	ldr	r2, [pc, #496]	@ (800af30 <HAL_DMA_IRQHandler+0x6a8>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d02c      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a7a      	ldr	r2, [pc, #488]	@ (800af34 <HAL_DMA_IRQHandler+0x6ac>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d027      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a79      	ldr	r2, [pc, #484]	@ (800af38 <HAL_DMA_IRQHandler+0x6b0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d022      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a77      	ldr	r2, [pc, #476]	@ (800af3c <HAL_DMA_IRQHandler+0x6b4>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d01d      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a76      	ldr	r2, [pc, #472]	@ (800af40 <HAL_DMA_IRQHandler+0x6b8>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d018      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a74      	ldr	r2, [pc, #464]	@ (800af44 <HAL_DMA_IRQHandler+0x6bc>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d013      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a73      	ldr	r2, [pc, #460]	@ (800af48 <HAL_DMA_IRQHandler+0x6c0>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d00e      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a71      	ldr	r2, [pc, #452]	@ (800af4c <HAL_DMA_IRQHandler+0x6c4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d009      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a70      	ldr	r2, [pc, #448]	@ (800af50 <HAL_DMA_IRQHandler+0x6c8>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d004      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x516>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a6e      	ldr	r2, [pc, #440]	@ (800af54 <HAL_DMA_IRQHandler+0x6cc>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d10a      	bne.n	800adb4 <HAL_DMA_IRQHandler+0x52c>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0308 	and.w	r3, r3, #8
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf14      	ite	ne
 800adac:	2301      	movne	r3, #1
 800adae:	2300      	moveq	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	e009      	b.n	800adc8 <HAL_DMA_IRQHandler+0x540>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf14      	ite	ne
 800adc2:	2301      	movne	r3, #1
 800adc4:	2300      	moveq	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d03e      	beq.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800add0:	f003 031f 	and.w	r3, r3, #31
 800add4:	2210      	movs	r2, #16
 800add6:	409a      	lsls	r2, r3
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d018      	beq.n	800ae1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d108      	bne.n	800ae0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d024      	beq.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	4798      	blx	r3
 800ae08:	e01f      	b.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01b      	beq.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	4798      	blx	r3
 800ae1a:	e016      	b.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d107      	bne.n	800ae3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0208 	bic.w	r2, r2, #8
 800ae38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae4e:	f003 031f 	and.w	r3, r3, #31
 800ae52:	2220      	movs	r2, #32
 800ae54:	409a      	lsls	r2, r3
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 8110 	beq.w	800b080 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a2c      	ldr	r2, [pc, #176]	@ (800af18 <HAL_DMA_IRQHandler+0x690>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d04a      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a2b      	ldr	r2, [pc, #172]	@ (800af1c <HAL_DMA_IRQHandler+0x694>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d045      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a29      	ldr	r2, [pc, #164]	@ (800af20 <HAL_DMA_IRQHandler+0x698>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d040      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a28      	ldr	r2, [pc, #160]	@ (800af24 <HAL_DMA_IRQHandler+0x69c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d03b      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a26      	ldr	r2, [pc, #152]	@ (800af28 <HAL_DMA_IRQHandler+0x6a0>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d036      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a25      	ldr	r2, [pc, #148]	@ (800af2c <HAL_DMA_IRQHandler+0x6a4>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d031      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a23      	ldr	r2, [pc, #140]	@ (800af30 <HAL_DMA_IRQHandler+0x6a8>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d02c      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a22      	ldr	r2, [pc, #136]	@ (800af34 <HAL_DMA_IRQHandler+0x6ac>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d027      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a20      	ldr	r2, [pc, #128]	@ (800af38 <HAL_DMA_IRQHandler+0x6b0>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d022      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a1f      	ldr	r2, [pc, #124]	@ (800af3c <HAL_DMA_IRQHandler+0x6b4>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d01d      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a1d      	ldr	r2, [pc, #116]	@ (800af40 <HAL_DMA_IRQHandler+0x6b8>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d018      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a1c      	ldr	r2, [pc, #112]	@ (800af44 <HAL_DMA_IRQHandler+0x6bc>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d013      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a1a      	ldr	r2, [pc, #104]	@ (800af48 <HAL_DMA_IRQHandler+0x6c0>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00e      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a19      	ldr	r2, [pc, #100]	@ (800af4c <HAL_DMA_IRQHandler+0x6c4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d009      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a17      	ldr	r2, [pc, #92]	@ (800af50 <HAL_DMA_IRQHandler+0x6c8>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d004      	beq.n	800af00 <HAL_DMA_IRQHandler+0x678>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a16      	ldr	r2, [pc, #88]	@ (800af54 <HAL_DMA_IRQHandler+0x6cc>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d12b      	bne.n	800af58 <HAL_DMA_IRQHandler+0x6d0>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0310 	and.w	r3, r3, #16
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	bf14      	ite	ne
 800af0e:	2301      	movne	r3, #1
 800af10:	2300      	moveq	r3, #0
 800af12:	b2db      	uxtb	r3, r3
 800af14:	e02a      	b.n	800af6c <HAL_DMA_IRQHandler+0x6e4>
 800af16:	bf00      	nop
 800af18:	40020010 	.word	0x40020010
 800af1c:	40020028 	.word	0x40020028
 800af20:	40020040 	.word	0x40020040
 800af24:	40020058 	.word	0x40020058
 800af28:	40020070 	.word	0x40020070
 800af2c:	40020088 	.word	0x40020088
 800af30:	400200a0 	.word	0x400200a0
 800af34:	400200b8 	.word	0x400200b8
 800af38:	40020410 	.word	0x40020410
 800af3c:	40020428 	.word	0x40020428
 800af40:	40020440 	.word	0x40020440
 800af44:	40020458 	.word	0x40020458
 800af48:	40020470 	.word	0x40020470
 800af4c:	40020488 	.word	0x40020488
 800af50:	400204a0 	.word	0x400204a0
 800af54:	400204b8 	.word	0x400204b8
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	bf14      	ite	ne
 800af66:	2301      	movne	r3, #1
 800af68:	2300      	moveq	r3, #0
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 8087 	beq.w	800b080 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af76:	f003 031f 	and.w	r3, r3, #31
 800af7a:	2220      	movs	r2, #32
 800af7c:	409a      	lsls	r2, r3
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b04      	cmp	r3, #4
 800af8c:	d139      	bne.n	800b002 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 0216 	bic.w	r2, r2, #22
 800af9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695a      	ldr	r2, [r3, #20]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d103      	bne.n	800afbe <HAL_DMA_IRQHandler+0x736>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0208 	bic.w	r2, r2, #8
 800afcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	223f      	movs	r2, #63	@ 0x3f
 800afd8:	409a      	lsls	r2, r3
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 834a 	beq.w	800b68c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	4798      	blx	r3
          }
          return;
 800b000:	e344      	b.n	800b68c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d018      	beq.n	800b042 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d108      	bne.n	800b030 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b022:	2b00      	cmp	r3, #0
 800b024:	d02c      	beq.n	800b080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
 800b02e:	e027      	b.n	800b080 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d023      	beq.n	800b080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	4798      	blx	r3
 800b040:	e01e      	b.n	800b080 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10f      	bne.n	800b070 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0210 	bic.w	r2, r2, #16
 800b05e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d003      	beq.n	800b080 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8306 	beq.w	800b696 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8088 	beq.w	800b1a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2204      	movs	r2, #4
 800b09c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a7a      	ldr	r2, [pc, #488]	@ (800b290 <HAL_DMA_IRQHandler+0xa08>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d04a      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a79      	ldr	r2, [pc, #484]	@ (800b294 <HAL_DMA_IRQHandler+0xa0c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d045      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a77      	ldr	r2, [pc, #476]	@ (800b298 <HAL_DMA_IRQHandler+0xa10>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d040      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a76      	ldr	r2, [pc, #472]	@ (800b29c <HAL_DMA_IRQHandler+0xa14>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d03b      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a74      	ldr	r2, [pc, #464]	@ (800b2a0 <HAL_DMA_IRQHandler+0xa18>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d036      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a73      	ldr	r2, [pc, #460]	@ (800b2a4 <HAL_DMA_IRQHandler+0xa1c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d031      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a71      	ldr	r2, [pc, #452]	@ (800b2a8 <HAL_DMA_IRQHandler+0xa20>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d02c      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a70      	ldr	r2, [pc, #448]	@ (800b2ac <HAL_DMA_IRQHandler+0xa24>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d027      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a6e      	ldr	r2, [pc, #440]	@ (800b2b0 <HAL_DMA_IRQHandler+0xa28>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d022      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a6d      	ldr	r2, [pc, #436]	@ (800b2b4 <HAL_DMA_IRQHandler+0xa2c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d01d      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a6b      	ldr	r2, [pc, #428]	@ (800b2b8 <HAL_DMA_IRQHandler+0xa30>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d018      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a6a      	ldr	r2, [pc, #424]	@ (800b2bc <HAL_DMA_IRQHandler+0xa34>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d013      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a68      	ldr	r2, [pc, #416]	@ (800b2c0 <HAL_DMA_IRQHandler+0xa38>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d00e      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a67      	ldr	r2, [pc, #412]	@ (800b2c4 <HAL_DMA_IRQHandler+0xa3c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d009      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a65      	ldr	r2, [pc, #404]	@ (800b2c8 <HAL_DMA_IRQHandler+0xa40>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d004      	beq.n	800b140 <HAL_DMA_IRQHandler+0x8b8>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a64      	ldr	r2, [pc, #400]	@ (800b2cc <HAL_DMA_IRQHandler+0xa44>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d108      	bne.n	800b152 <HAL_DMA_IRQHandler+0x8ca>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e007      	b.n	800b162 <HAL_DMA_IRQHandler+0x8da>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f022 0201 	bic.w	r2, r2, #1
 800b160:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3301      	adds	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d307      	bcc.n	800b17e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1f2      	bne.n	800b162 <HAL_DMA_IRQHandler+0x8da>
 800b17c:	e000      	b.n	800b180 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b17e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d004      	beq.n	800b198 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2203      	movs	r2, #3
 800b192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b196:	e003      	b.n	800b1a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8272 	beq.w	800b696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	e26c      	b.n	800b696 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a43      	ldr	r2, [pc, #268]	@ (800b2d0 <HAL_DMA_IRQHandler+0xa48>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d022      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a42      	ldr	r2, [pc, #264]	@ (800b2d4 <HAL_DMA_IRQHandler+0xa4c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d01d      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a40      	ldr	r2, [pc, #256]	@ (800b2d8 <HAL_DMA_IRQHandler+0xa50>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d018      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a3f      	ldr	r2, [pc, #252]	@ (800b2dc <HAL_DMA_IRQHandler+0xa54>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d013      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a3d      	ldr	r2, [pc, #244]	@ (800b2e0 <HAL_DMA_IRQHandler+0xa58>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00e      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a3c      	ldr	r2, [pc, #240]	@ (800b2e4 <HAL_DMA_IRQHandler+0xa5c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d009      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a3a      	ldr	r2, [pc, #232]	@ (800b2e8 <HAL_DMA_IRQHandler+0xa60>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d004      	beq.n	800b20c <HAL_DMA_IRQHandler+0x984>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a39      	ldr	r2, [pc, #228]	@ (800b2ec <HAL_DMA_IRQHandler+0xa64>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d101      	bne.n	800b210 <HAL_DMA_IRQHandler+0x988>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e000      	b.n	800b212 <HAL_DMA_IRQHandler+0x98a>
 800b210:	2300      	movs	r3, #0
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 823f 	beq.w	800b696 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b224:	f003 031f 	and.w	r3, r3, #31
 800b228:	2204      	movs	r2, #4
 800b22a:	409a      	lsls	r2, r3
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 80cd 	beq.w	800b3d0 <HAL_DMA_IRQHandler+0xb48>
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 80c7 	beq.w	800b3d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2204      	movs	r2, #4
 800b24c:	409a      	lsls	r2, r3
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d049      	beq.n	800b2f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 8210 	beq.w	800b690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b278:	e20a      	b.n	800b690 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 8206 	beq.w	800b690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b28c:	e200      	b.n	800b690 <HAL_DMA_IRQHandler+0xe08>
 800b28e:	bf00      	nop
 800b290:	40020010 	.word	0x40020010
 800b294:	40020028 	.word	0x40020028
 800b298:	40020040 	.word	0x40020040
 800b29c:	40020058 	.word	0x40020058
 800b2a0:	40020070 	.word	0x40020070
 800b2a4:	40020088 	.word	0x40020088
 800b2a8:	400200a0 	.word	0x400200a0
 800b2ac:	400200b8 	.word	0x400200b8
 800b2b0:	40020410 	.word	0x40020410
 800b2b4:	40020428 	.word	0x40020428
 800b2b8:	40020440 	.word	0x40020440
 800b2bc:	40020458 	.word	0x40020458
 800b2c0:	40020470 	.word	0x40020470
 800b2c4:	40020488 	.word	0x40020488
 800b2c8:	400204a0 	.word	0x400204a0
 800b2cc:	400204b8 	.word	0x400204b8
 800b2d0:	58025408 	.word	0x58025408
 800b2d4:	5802541c 	.word	0x5802541c
 800b2d8:	58025430 	.word	0x58025430
 800b2dc:	58025444 	.word	0x58025444
 800b2e0:	58025458 	.word	0x58025458
 800b2e4:	5802546c 	.word	0x5802546c
 800b2e8:	58025480 	.word	0x58025480
 800b2ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f003 0320 	and.w	r3, r3, #32
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d160      	bne.n	800b3bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a7f      	ldr	r2, [pc, #508]	@ (800b4fc <HAL_DMA_IRQHandler+0xc74>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d04a      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a7d      	ldr	r2, [pc, #500]	@ (800b500 <HAL_DMA_IRQHandler+0xc78>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d045      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a7c      	ldr	r2, [pc, #496]	@ (800b504 <HAL_DMA_IRQHandler+0xc7c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d040      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a7a      	ldr	r2, [pc, #488]	@ (800b508 <HAL_DMA_IRQHandler+0xc80>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d03b      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a79      	ldr	r2, [pc, #484]	@ (800b50c <HAL_DMA_IRQHandler+0xc84>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d036      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a77      	ldr	r2, [pc, #476]	@ (800b510 <HAL_DMA_IRQHandler+0xc88>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d031      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a76      	ldr	r2, [pc, #472]	@ (800b514 <HAL_DMA_IRQHandler+0xc8c>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d02c      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a74      	ldr	r2, [pc, #464]	@ (800b518 <HAL_DMA_IRQHandler+0xc90>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d027      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a73      	ldr	r2, [pc, #460]	@ (800b51c <HAL_DMA_IRQHandler+0xc94>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d022      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a71      	ldr	r2, [pc, #452]	@ (800b520 <HAL_DMA_IRQHandler+0xc98>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d01d      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a70      	ldr	r2, [pc, #448]	@ (800b524 <HAL_DMA_IRQHandler+0xc9c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d018      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a6e      	ldr	r2, [pc, #440]	@ (800b528 <HAL_DMA_IRQHandler+0xca0>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d013      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a6d      	ldr	r2, [pc, #436]	@ (800b52c <HAL_DMA_IRQHandler+0xca4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00e      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a6b      	ldr	r2, [pc, #428]	@ (800b530 <HAL_DMA_IRQHandler+0xca8>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d009      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a6a      	ldr	r2, [pc, #424]	@ (800b534 <HAL_DMA_IRQHandler+0xcac>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d004      	beq.n	800b39a <HAL_DMA_IRQHandler+0xb12>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a68      	ldr	r2, [pc, #416]	@ (800b538 <HAL_DMA_IRQHandler+0xcb0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d108      	bne.n	800b3ac <HAL_DMA_IRQHandler+0xb24>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0208 	bic.w	r2, r2, #8
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	e007      	b.n	800b3bc <HAL_DMA_IRQHandler+0xb34>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f022 0204 	bic.w	r2, r2, #4
 800b3ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8165 	beq.w	800b690 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b3ce:	e15f      	b.n	800b690 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3d4:	f003 031f 	and.w	r3, r3, #31
 800b3d8:	2202      	movs	r2, #2
 800b3da:	409a      	lsls	r2, r3
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	f000 80c5 	beq.w	800b570 <HAL_DMA_IRQHandler+0xce8>
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f003 0302 	and.w	r3, r3, #2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80bf 	beq.w	800b570 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3f6:	f003 031f 	and.w	r3, r3, #31
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	409a      	lsls	r2, r3
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d018      	beq.n	800b43e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b412:	2b00      	cmp	r3, #0
 800b414:	d109      	bne.n	800b42a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 813a 	beq.w	800b694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b428:	e134      	b.n	800b694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8130 	beq.w	800b694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b43c:	e12a      	b.n	800b694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f003 0320 	and.w	r3, r3, #32
 800b444:	2b00      	cmp	r3, #0
 800b446:	f040 8089 	bne.w	800b55c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a2b      	ldr	r2, [pc, #172]	@ (800b4fc <HAL_DMA_IRQHandler+0xc74>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d04a      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a29      	ldr	r2, [pc, #164]	@ (800b500 <HAL_DMA_IRQHandler+0xc78>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d045      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a28      	ldr	r2, [pc, #160]	@ (800b504 <HAL_DMA_IRQHandler+0xc7c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d040      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a26      	ldr	r2, [pc, #152]	@ (800b508 <HAL_DMA_IRQHandler+0xc80>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d03b      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a25      	ldr	r2, [pc, #148]	@ (800b50c <HAL_DMA_IRQHandler+0xc84>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d036      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a23      	ldr	r2, [pc, #140]	@ (800b510 <HAL_DMA_IRQHandler+0xc88>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d031      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a22      	ldr	r2, [pc, #136]	@ (800b514 <HAL_DMA_IRQHandler+0xc8c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d02c      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a20      	ldr	r2, [pc, #128]	@ (800b518 <HAL_DMA_IRQHandler+0xc90>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d027      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a1f      	ldr	r2, [pc, #124]	@ (800b51c <HAL_DMA_IRQHandler+0xc94>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d022      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b520 <HAL_DMA_IRQHandler+0xc98>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d01d      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b524 <HAL_DMA_IRQHandler+0xc9c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d018      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b528 <HAL_DMA_IRQHandler+0xca0>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d013      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a19      	ldr	r2, [pc, #100]	@ (800b52c <HAL_DMA_IRQHandler+0xca4>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00e      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a17      	ldr	r2, [pc, #92]	@ (800b530 <HAL_DMA_IRQHandler+0xca8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d009      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a16      	ldr	r2, [pc, #88]	@ (800b534 <HAL_DMA_IRQHandler+0xcac>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d004      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xc62>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a14      	ldr	r2, [pc, #80]	@ (800b538 <HAL_DMA_IRQHandler+0xcb0>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d128      	bne.n	800b53c <HAL_DMA_IRQHandler+0xcb4>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 0214 	bic.w	r2, r2, #20
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	e027      	b.n	800b54c <HAL_DMA_IRQHandler+0xcc4>
 800b4fc:	40020010 	.word	0x40020010
 800b500:	40020028 	.word	0x40020028
 800b504:	40020040 	.word	0x40020040
 800b508:	40020058 	.word	0x40020058
 800b50c:	40020070 	.word	0x40020070
 800b510:	40020088 	.word	0x40020088
 800b514:	400200a0 	.word	0x400200a0
 800b518:	400200b8 	.word	0x400200b8
 800b51c:	40020410 	.word	0x40020410
 800b520:	40020428 	.word	0x40020428
 800b524:	40020440 	.word	0x40020440
 800b528:	40020458 	.word	0x40020458
 800b52c:	40020470 	.word	0x40020470
 800b530:	40020488 	.word	0x40020488
 800b534:	400204a0 	.word	0x400204a0
 800b538:	400204b8 	.word	0x400204b8
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 020a 	bic.w	r2, r2, #10
 800b54a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 8097 	beq.w	800b694 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b56e:	e091      	b.n	800b694 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b574:	f003 031f 	and.w	r3, r3, #31
 800b578:	2208      	movs	r2, #8
 800b57a:	409a      	lsls	r2, r3
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	4013      	ands	r3, r2
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 8088 	beq.w	800b696 <HAL_DMA_IRQHandler+0xe0e>
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 8082 	beq.w	800b696 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a41      	ldr	r2, [pc, #260]	@ (800b69c <HAL_DMA_IRQHandler+0xe14>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d04a      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a3f      	ldr	r2, [pc, #252]	@ (800b6a0 <HAL_DMA_IRQHandler+0xe18>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d045      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a3e      	ldr	r2, [pc, #248]	@ (800b6a4 <HAL_DMA_IRQHandler+0xe1c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d040      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a3c      	ldr	r2, [pc, #240]	@ (800b6a8 <HAL_DMA_IRQHandler+0xe20>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d03b      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a3b      	ldr	r2, [pc, #236]	@ (800b6ac <HAL_DMA_IRQHandler+0xe24>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d036      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a39      	ldr	r2, [pc, #228]	@ (800b6b0 <HAL_DMA_IRQHandler+0xe28>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d031      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a38      	ldr	r2, [pc, #224]	@ (800b6b4 <HAL_DMA_IRQHandler+0xe2c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d02c      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a36      	ldr	r2, [pc, #216]	@ (800b6b8 <HAL_DMA_IRQHandler+0xe30>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d027      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a35      	ldr	r2, [pc, #212]	@ (800b6bc <HAL_DMA_IRQHandler+0xe34>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d022      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a33      	ldr	r2, [pc, #204]	@ (800b6c0 <HAL_DMA_IRQHandler+0xe38>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d01d      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a32      	ldr	r2, [pc, #200]	@ (800b6c4 <HAL_DMA_IRQHandler+0xe3c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d018      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a30      	ldr	r2, [pc, #192]	@ (800b6c8 <HAL_DMA_IRQHandler+0xe40>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d013      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a2f      	ldr	r2, [pc, #188]	@ (800b6cc <HAL_DMA_IRQHandler+0xe44>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00e      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a2d      	ldr	r2, [pc, #180]	@ (800b6d0 <HAL_DMA_IRQHandler+0xe48>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d009      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a2c      	ldr	r2, [pc, #176]	@ (800b6d4 <HAL_DMA_IRQHandler+0xe4c>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d004      	beq.n	800b632 <HAL_DMA_IRQHandler+0xdaa>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a2a      	ldr	r2, [pc, #168]	@ (800b6d8 <HAL_DMA_IRQHandler+0xe50>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d108      	bne.n	800b644 <HAL_DMA_IRQHandler+0xdbc>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 021c 	bic.w	r2, r2, #28
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	e007      	b.n	800b654 <HAL_DMA_IRQHandler+0xdcc>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 020e 	bic.w	r2, r2, #14
 800b652:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b658:	f003 031f 	and.w	r3, r3, #31
 800b65c:	2201      	movs	r2, #1
 800b65e:	409a      	lsls	r2, r3
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d009      	beq.n	800b696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	4798      	blx	r3
 800b68a:	e004      	b.n	800b696 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b68c:	bf00      	nop
 800b68e:	e002      	b.n	800b696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b690:	bf00      	nop
 800b692:	e000      	b.n	800b696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b694:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b696:	3728      	adds	r7, #40	@ 0x28
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	40020010 	.word	0x40020010
 800b6a0:	40020028 	.word	0x40020028
 800b6a4:	40020040 	.word	0x40020040
 800b6a8:	40020058 	.word	0x40020058
 800b6ac:	40020070 	.word	0x40020070
 800b6b0:	40020088 	.word	0x40020088
 800b6b4:	400200a0 	.word	0x400200a0
 800b6b8:	400200b8 	.word	0x400200b8
 800b6bc:	40020410 	.word	0x40020410
 800b6c0:	40020428 	.word	0x40020428
 800b6c4:	40020440 	.word	0x40020440
 800b6c8:	40020458 	.word	0x40020458
 800b6cc:	40020470 	.word	0x40020470
 800b6d0:	40020488 	.word	0x40020488
 800b6d4:	400204a0 	.word	0x400204a0
 800b6d8:	400204b8 	.word	0x400204b8

0800b6dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a7f      	ldr	r2, [pc, #508]	@ (800b8f8 <DMA_SetConfig+0x21c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d072      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a7d      	ldr	r2, [pc, #500]	@ (800b8fc <DMA_SetConfig+0x220>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d06d      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a7c      	ldr	r2, [pc, #496]	@ (800b900 <DMA_SetConfig+0x224>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d068      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a7a      	ldr	r2, [pc, #488]	@ (800b904 <DMA_SetConfig+0x228>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d063      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a79      	ldr	r2, [pc, #484]	@ (800b908 <DMA_SetConfig+0x22c>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d05e      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a77      	ldr	r2, [pc, #476]	@ (800b90c <DMA_SetConfig+0x230>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d059      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a76      	ldr	r2, [pc, #472]	@ (800b910 <DMA_SetConfig+0x234>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d054      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a74      	ldr	r2, [pc, #464]	@ (800b914 <DMA_SetConfig+0x238>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d04f      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a73      	ldr	r2, [pc, #460]	@ (800b918 <DMA_SetConfig+0x23c>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d04a      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a71      	ldr	r2, [pc, #452]	@ (800b91c <DMA_SetConfig+0x240>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d045      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a70      	ldr	r2, [pc, #448]	@ (800b920 <DMA_SetConfig+0x244>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d040      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a6e      	ldr	r2, [pc, #440]	@ (800b924 <DMA_SetConfig+0x248>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d03b      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a6d      	ldr	r2, [pc, #436]	@ (800b928 <DMA_SetConfig+0x24c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d036      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a6b      	ldr	r2, [pc, #428]	@ (800b92c <DMA_SetConfig+0x250>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d031      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a6a      	ldr	r2, [pc, #424]	@ (800b930 <DMA_SetConfig+0x254>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d02c      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a68      	ldr	r2, [pc, #416]	@ (800b934 <DMA_SetConfig+0x258>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d027      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a67      	ldr	r2, [pc, #412]	@ (800b938 <DMA_SetConfig+0x25c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d022      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a65      	ldr	r2, [pc, #404]	@ (800b93c <DMA_SetConfig+0x260>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d01d      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a64      	ldr	r2, [pc, #400]	@ (800b940 <DMA_SetConfig+0x264>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d018      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a62      	ldr	r2, [pc, #392]	@ (800b944 <DMA_SetConfig+0x268>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d013      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a61      	ldr	r2, [pc, #388]	@ (800b948 <DMA_SetConfig+0x26c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d00e      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a5f      	ldr	r2, [pc, #380]	@ (800b94c <DMA_SetConfig+0x270>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d009      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a5e      	ldr	r2, [pc, #376]	@ (800b950 <DMA_SetConfig+0x274>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d004      	beq.n	800b7e6 <DMA_SetConfig+0x10a>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a5c      	ldr	r2, [pc, #368]	@ (800b954 <DMA_SetConfig+0x278>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d101      	bne.n	800b7ea <DMA_SetConfig+0x10e>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <DMA_SetConfig+0x110>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00d      	beq.n	800b80c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b7f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b80a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a39      	ldr	r2, [pc, #228]	@ (800b8f8 <DMA_SetConfig+0x21c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d04a      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a38      	ldr	r2, [pc, #224]	@ (800b8fc <DMA_SetConfig+0x220>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d045      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a36      	ldr	r2, [pc, #216]	@ (800b900 <DMA_SetConfig+0x224>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d040      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a35      	ldr	r2, [pc, #212]	@ (800b904 <DMA_SetConfig+0x228>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d03b      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a33      	ldr	r2, [pc, #204]	@ (800b908 <DMA_SetConfig+0x22c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d036      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a32      	ldr	r2, [pc, #200]	@ (800b90c <DMA_SetConfig+0x230>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d031      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a30      	ldr	r2, [pc, #192]	@ (800b910 <DMA_SetConfig+0x234>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d02c      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a2f      	ldr	r2, [pc, #188]	@ (800b914 <DMA_SetConfig+0x238>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d027      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a2d      	ldr	r2, [pc, #180]	@ (800b918 <DMA_SetConfig+0x23c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d022      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a2c      	ldr	r2, [pc, #176]	@ (800b91c <DMA_SetConfig+0x240>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d01d      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a2a      	ldr	r2, [pc, #168]	@ (800b920 <DMA_SetConfig+0x244>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d018      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a29      	ldr	r2, [pc, #164]	@ (800b924 <DMA_SetConfig+0x248>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d013      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a27      	ldr	r2, [pc, #156]	@ (800b928 <DMA_SetConfig+0x24c>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d00e      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a26      	ldr	r2, [pc, #152]	@ (800b92c <DMA_SetConfig+0x250>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d009      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a24      	ldr	r2, [pc, #144]	@ (800b930 <DMA_SetConfig+0x254>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d004      	beq.n	800b8ac <DMA_SetConfig+0x1d0>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a23      	ldr	r2, [pc, #140]	@ (800b934 <DMA_SetConfig+0x258>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d101      	bne.n	800b8b0 <DMA_SetConfig+0x1d4>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e000      	b.n	800b8b2 <DMA_SetConfig+0x1d6>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d059      	beq.n	800b96a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ba:	f003 031f 	and.w	r3, r3, #31
 800b8be:	223f      	movs	r2, #63	@ 0x3f
 800b8c0:	409a      	lsls	r2, r3
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b8d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	2b40      	cmp	r3, #64	@ 0x40
 800b8e4:	d138      	bne.n	800b958 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b8f6:	e086      	b.n	800ba06 <DMA_SetConfig+0x32a>
 800b8f8:	40020010 	.word	0x40020010
 800b8fc:	40020028 	.word	0x40020028
 800b900:	40020040 	.word	0x40020040
 800b904:	40020058 	.word	0x40020058
 800b908:	40020070 	.word	0x40020070
 800b90c:	40020088 	.word	0x40020088
 800b910:	400200a0 	.word	0x400200a0
 800b914:	400200b8 	.word	0x400200b8
 800b918:	40020410 	.word	0x40020410
 800b91c:	40020428 	.word	0x40020428
 800b920:	40020440 	.word	0x40020440
 800b924:	40020458 	.word	0x40020458
 800b928:	40020470 	.word	0x40020470
 800b92c:	40020488 	.word	0x40020488
 800b930:	400204a0 	.word	0x400204a0
 800b934:	400204b8 	.word	0x400204b8
 800b938:	58025408 	.word	0x58025408
 800b93c:	5802541c 	.word	0x5802541c
 800b940:	58025430 	.word	0x58025430
 800b944:	58025444 	.word	0x58025444
 800b948:	58025458 	.word	0x58025458
 800b94c:	5802546c 	.word	0x5802546c
 800b950:	58025480 	.word	0x58025480
 800b954:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	60da      	str	r2, [r3, #12]
}
 800b968:	e04d      	b.n	800ba06 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a29      	ldr	r2, [pc, #164]	@ (800ba14 <DMA_SetConfig+0x338>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d022      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a27      	ldr	r2, [pc, #156]	@ (800ba18 <DMA_SetConfig+0x33c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d01d      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a26      	ldr	r2, [pc, #152]	@ (800ba1c <DMA_SetConfig+0x340>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d018      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a24      	ldr	r2, [pc, #144]	@ (800ba20 <DMA_SetConfig+0x344>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d013      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a23      	ldr	r2, [pc, #140]	@ (800ba24 <DMA_SetConfig+0x348>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00e      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a21      	ldr	r2, [pc, #132]	@ (800ba28 <DMA_SetConfig+0x34c>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d009      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a20      	ldr	r2, [pc, #128]	@ (800ba2c <DMA_SetConfig+0x350>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d004      	beq.n	800b9ba <DMA_SetConfig+0x2de>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a1e      	ldr	r2, [pc, #120]	@ (800ba30 <DMA_SetConfig+0x354>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d101      	bne.n	800b9be <DMA_SetConfig+0x2e2>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <DMA_SetConfig+0x2e4>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d020      	beq.n	800ba06 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9c8:	f003 031f 	and.w	r3, r3, #31
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	409a      	lsls	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	2b40      	cmp	r3, #64	@ 0x40
 800b9e2:	d108      	bne.n	800b9f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	60da      	str	r2, [r3, #12]
}
 800b9f4:	e007      	b.n	800ba06 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	60da      	str	r2, [r3, #12]
}
 800ba06:	bf00      	nop
 800ba08:	371c      	adds	r7, #28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	58025408 	.word	0x58025408
 800ba18:	5802541c 	.word	0x5802541c
 800ba1c:	58025430 	.word	0x58025430
 800ba20:	58025444 	.word	0x58025444
 800ba24:	58025458 	.word	0x58025458
 800ba28:	5802546c 	.word	0x5802546c
 800ba2c:	58025480 	.word	0x58025480
 800ba30:	58025494 	.word	0x58025494

0800ba34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a42      	ldr	r2, [pc, #264]	@ (800bb4c <DMA_CalcBaseAndBitshift+0x118>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d04a      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a41      	ldr	r2, [pc, #260]	@ (800bb50 <DMA_CalcBaseAndBitshift+0x11c>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d045      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a3f      	ldr	r2, [pc, #252]	@ (800bb54 <DMA_CalcBaseAndBitshift+0x120>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d040      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a3e      	ldr	r2, [pc, #248]	@ (800bb58 <DMA_CalcBaseAndBitshift+0x124>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d03b      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a3c      	ldr	r2, [pc, #240]	@ (800bb5c <DMA_CalcBaseAndBitshift+0x128>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d036      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a3b      	ldr	r2, [pc, #236]	@ (800bb60 <DMA_CalcBaseAndBitshift+0x12c>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d031      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a39      	ldr	r2, [pc, #228]	@ (800bb64 <DMA_CalcBaseAndBitshift+0x130>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d02c      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a38      	ldr	r2, [pc, #224]	@ (800bb68 <DMA_CalcBaseAndBitshift+0x134>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d027      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a36      	ldr	r2, [pc, #216]	@ (800bb6c <DMA_CalcBaseAndBitshift+0x138>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d022      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a35      	ldr	r2, [pc, #212]	@ (800bb70 <DMA_CalcBaseAndBitshift+0x13c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d01d      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a33      	ldr	r2, [pc, #204]	@ (800bb74 <DMA_CalcBaseAndBitshift+0x140>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d018      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a32      	ldr	r2, [pc, #200]	@ (800bb78 <DMA_CalcBaseAndBitshift+0x144>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d013      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a30      	ldr	r2, [pc, #192]	@ (800bb7c <DMA_CalcBaseAndBitshift+0x148>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d00e      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a2f      	ldr	r2, [pc, #188]	@ (800bb80 <DMA_CalcBaseAndBitshift+0x14c>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d009      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a2d      	ldr	r2, [pc, #180]	@ (800bb84 <DMA_CalcBaseAndBitshift+0x150>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d004      	beq.n	800badc <DMA_CalcBaseAndBitshift+0xa8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a2c      	ldr	r2, [pc, #176]	@ (800bb88 <DMA_CalcBaseAndBitshift+0x154>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d101      	bne.n	800bae0 <DMA_CalcBaseAndBitshift+0xac>
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <DMA_CalcBaseAndBitshift+0xae>
 800bae0:	2300      	movs	r3, #0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d024      	beq.n	800bb30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	b2db      	uxtb	r3, r3
 800baec:	3b10      	subs	r3, #16
 800baee:	4a27      	ldr	r2, [pc, #156]	@ (800bb8c <DMA_CalcBaseAndBitshift+0x158>)
 800baf0:	fba2 2303 	umull	r2, r3, r2, r3
 800baf4:	091b      	lsrs	r3, r3, #4
 800baf6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	4a24      	ldr	r2, [pc, #144]	@ (800bb90 <DMA_CalcBaseAndBitshift+0x15c>)
 800bb00:	5cd3      	ldrb	r3, [r2, r3]
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d908      	bls.n	800bb20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	4b1f      	ldr	r3, [pc, #124]	@ (800bb94 <DMA_CalcBaseAndBitshift+0x160>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	1d1a      	adds	r2, r3, #4
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb1e:	e00d      	b.n	800bb3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b1b      	ldr	r3, [pc, #108]	@ (800bb94 <DMA_CalcBaseAndBitshift+0x160>)
 800bb28:	4013      	ands	r3, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb2e:	e005      	b.n	800bb3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	40020010 	.word	0x40020010
 800bb50:	40020028 	.word	0x40020028
 800bb54:	40020040 	.word	0x40020040
 800bb58:	40020058 	.word	0x40020058
 800bb5c:	40020070 	.word	0x40020070
 800bb60:	40020088 	.word	0x40020088
 800bb64:	400200a0 	.word	0x400200a0
 800bb68:	400200b8 	.word	0x400200b8
 800bb6c:	40020410 	.word	0x40020410
 800bb70:	40020428 	.word	0x40020428
 800bb74:	40020440 	.word	0x40020440
 800bb78:	40020458 	.word	0x40020458
 800bb7c:	40020470 	.word	0x40020470
 800bb80:	40020488 	.word	0x40020488
 800bb84:	400204a0 	.word	0x400204a0
 800bb88:	400204b8 	.word	0x400204b8
 800bb8c:	aaaaaaab 	.word	0xaaaaaaab
 800bb90:	0801ee0c 	.word	0x0801ee0c
 800bb94:	fffffc00 	.word	0xfffffc00

0800bb98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d120      	bne.n	800bbee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d858      	bhi.n	800bc66 <DMA_CheckFifoParam+0xce>
 800bbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbbc <DMA_CheckFifoParam+0x24>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bbcd 	.word	0x0800bbcd
 800bbc0:	0800bbdf 	.word	0x0800bbdf
 800bbc4:	0800bbcd 	.word	0x0800bbcd
 800bbc8:	0800bc67 	.word	0x0800bc67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d048      	beq.n	800bc6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bbdc:	e045      	b.n	800bc6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bbe6:	d142      	bne.n	800bc6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bbec:	e03f      	b.n	800bc6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbf6:	d123      	bne.n	800bc40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	d838      	bhi.n	800bc72 <DMA_CheckFifoParam+0xda>
 800bc00:	a201      	add	r2, pc, #4	@ (adr r2, 800bc08 <DMA_CheckFifoParam+0x70>)
 800bc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc06:	bf00      	nop
 800bc08:	0800bc19 	.word	0x0800bc19
 800bc0c:	0800bc1f 	.word	0x0800bc1f
 800bc10:	0800bc19 	.word	0x0800bc19
 800bc14:	0800bc31 	.word	0x0800bc31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	73fb      	strb	r3, [r7, #15]
        break;
 800bc1c:	e030      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d025      	beq.n	800bc76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc2e:	e022      	b.n	800bc76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bc38:	d11f      	bne.n	800bc7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bc3e:	e01c      	b.n	800bc7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d902      	bls.n	800bc4e <DMA_CheckFifoParam+0xb6>
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d003      	beq.n	800bc54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bc4c:	e018      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	73fb      	strb	r3, [r7, #15]
        break;
 800bc52:	e015      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00e      	beq.n	800bc7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
    break;
 800bc64:	e00b      	b.n	800bc7e <DMA_CheckFifoParam+0xe6>
        break;
 800bc66:	bf00      	nop
 800bc68:	e00a      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        break;
 800bc6a:	bf00      	nop
 800bc6c:	e008      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        break;
 800bc6e:	bf00      	nop
 800bc70:	e006      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        break;
 800bc72:	bf00      	nop
 800bc74:	e004      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        break;
 800bc76:	bf00      	nop
 800bc78:	e002      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
        break;
 800bc7a:	bf00      	nop
 800bc7c:	e000      	b.n	800bc80 <DMA_CheckFifoParam+0xe8>
    break;
 800bc7e:	bf00      	nop
    }
  }

  return status;
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop

0800bc90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4a38      	ldr	r2, [pc, #224]	@ (800bd84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d022      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a36      	ldr	r2, [pc, #216]	@ (800bd88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d01d      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a35      	ldr	r2, [pc, #212]	@ (800bd8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d018      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a33      	ldr	r2, [pc, #204]	@ (800bd90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d013      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a32      	ldr	r2, [pc, #200]	@ (800bd94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00e      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a30      	ldr	r2, [pc, #192]	@ (800bd98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d009      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a2f      	ldr	r2, [pc, #188]	@ (800bd9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d004      	beq.n	800bcee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a2d      	ldr	r2, [pc, #180]	@ (800bda0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d101      	bne.n	800bcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e000      	b.n	800bcf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d01a      	beq.n	800bd2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	3b08      	subs	r3, #8
 800bd00:	4a28      	ldr	r2, [pc, #160]	@ (800bda4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bd02:	fba2 2303 	umull	r2, r3, r2, r3
 800bd06:	091b      	lsrs	r3, r3, #4
 800bd08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4b26      	ldr	r3, [pc, #152]	@ (800bda8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bd0e:	4413      	add	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	461a      	mov	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a24      	ldr	r2, [pc, #144]	@ (800bdac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bd1c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f003 031f 	and.w	r3, r3, #31
 800bd24:	2201      	movs	r2, #1
 800bd26:	409a      	lsls	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bd2c:	e024      	b.n	800bd78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	3b10      	subs	r3, #16
 800bd36:	4a1e      	ldr	r2, [pc, #120]	@ (800bdb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bd38:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3c:	091b      	lsrs	r3, r3, #4
 800bd3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4a1c      	ldr	r2, [pc, #112]	@ (800bdb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d806      	bhi.n	800bd56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d902      	bls.n	800bd56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3308      	adds	r3, #8
 800bd54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4b18      	ldr	r3, [pc, #96]	@ (800bdbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a16      	ldr	r2, [pc, #88]	@ (800bdc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bd68:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f003 031f 	and.w	r3, r3, #31
 800bd70:	2201      	movs	r2, #1
 800bd72:	409a      	lsls	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bd78:	bf00      	nop
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	58025408 	.word	0x58025408
 800bd88:	5802541c 	.word	0x5802541c
 800bd8c:	58025430 	.word	0x58025430
 800bd90:	58025444 	.word	0x58025444
 800bd94:	58025458 	.word	0x58025458
 800bd98:	5802546c 	.word	0x5802546c
 800bd9c:	58025480 	.word	0x58025480
 800bda0:	58025494 	.word	0x58025494
 800bda4:	cccccccd 	.word	0xcccccccd
 800bda8:	16009600 	.word	0x16009600
 800bdac:	58025880 	.word	0x58025880
 800bdb0:	aaaaaaab 	.word	0xaaaaaaab
 800bdb4:	400204b8 	.word	0x400204b8
 800bdb8:	4002040f 	.word	0x4002040f
 800bdbc:	10008200 	.word	0x10008200
 800bdc0:	40020880 	.word	0x40020880

0800bdc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d04a      	beq.n	800be70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d847      	bhi.n	800be70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a25      	ldr	r2, [pc, #148]	@ (800be7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d022      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a24      	ldr	r2, [pc, #144]	@ (800be80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d01d      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a22      	ldr	r2, [pc, #136]	@ (800be84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d018      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a21      	ldr	r2, [pc, #132]	@ (800be88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d013      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a1f      	ldr	r2, [pc, #124]	@ (800be8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00e      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a1e      	ldr	r2, [pc, #120]	@ (800be90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d009      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a1c      	ldr	r2, [pc, #112]	@ (800be94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d004      	beq.n	800be30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a1b      	ldr	r2, [pc, #108]	@ (800be98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d101      	bne.n	800be34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	4b17      	ldr	r3, [pc, #92]	@ (800be9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800be3e:	4413      	add	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	461a      	mov	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a15      	ldr	r2, [pc, #84]	@ (800bea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800be4c:	671a      	str	r2, [r3, #112]	@ 0x70
 800be4e:	e009      	b.n	800be64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4b14      	ldr	r3, [pc, #80]	@ (800bea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	461a      	mov	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a11      	ldr	r2, [pc, #68]	@ (800bea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800be62:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b01      	subs	r3, #1
 800be68:	2201      	movs	r2, #1
 800be6a:	409a      	lsls	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800be70:	bf00      	nop
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	58025408 	.word	0x58025408
 800be80:	5802541c 	.word	0x5802541c
 800be84:	58025430 	.word	0x58025430
 800be88:	58025444 	.word	0x58025444
 800be8c:	58025458 	.word	0x58025458
 800be90:	5802546c 	.word	0x5802546c
 800be94:	58025480 	.word	0x58025480
 800be98:	58025494 	.word	0x58025494
 800be9c:	1600963f 	.word	0x1600963f
 800bea0:	58025940 	.word	0x58025940
 800bea4:	1000823f 	.word	0x1000823f
 800bea8:	40020940 	.word	0x40020940

0800beac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800beac:	b480      	push	{r7}
 800beae:	b089      	sub	sp, #36	@ 0x24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800beba:	4b86      	ldr	r3, [pc, #536]	@ (800c0d4 <HAL_GPIO_Init+0x228>)
 800bebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bebe:	e18c      	b.n	800c1da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	2101      	movs	r1, #1
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	fa01 f303 	lsl.w	r3, r1, r3
 800becc:	4013      	ands	r3, r2
 800bece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f000 817e 	beq.w	800c1d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	f003 0303 	and.w	r3, r3, #3
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d005      	beq.n	800bef0 <HAL_GPIO_Init+0x44>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	f003 0303 	and.w	r3, r3, #3
 800beec:	2b02      	cmp	r3, #2
 800beee:	d130      	bne.n	800bf52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	2203      	movs	r2, #3
 800befc:	fa02 f303 	lsl.w	r3, r2, r3
 800bf00:	43db      	mvns	r3, r3
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4013      	ands	r3, r2
 800bf06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	68da      	ldr	r2, [r3, #12]
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	fa02 f303 	lsl.w	r3, r2, r3
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf26:	2201      	movs	r2, #1
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2e:	43db      	mvns	r3, r3
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	4013      	ands	r3, r2
 800bf34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	091b      	lsrs	r3, r3, #4
 800bf3c:	f003 0201 	and.w	r2, r3, #1
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	fa02 f303 	lsl.w	r3, r2, r3
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d017      	beq.n	800bf8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	2203      	movs	r2, #3
 800bf6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6e:	43db      	mvns	r3, r3
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	4013      	ands	r3, r2
 800bf74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	689a      	ldr	r2, [r3, #8]
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d123      	bne.n	800bfe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	08da      	lsrs	r2, r3, #3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3208      	adds	r2, #8
 800bfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	f003 0307 	and.w	r3, r3, #7
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	220f      	movs	r2, #15
 800bfb2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb6:	43db      	mvns	r3, r3
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	4013      	ands	r3, r2
 800bfbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	691a      	ldr	r2, [r3, #16]
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	fa02 f303 	lsl.w	r3, r2, r3
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	08da      	lsrs	r2, r3, #3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3208      	adds	r2, #8
 800bfdc:	69b9      	ldr	r1, [r7, #24]
 800bfde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	2203      	movs	r2, #3
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	43db      	mvns	r3, r3
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	4013      	ands	r3, r2
 800bff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f003 0203 	and.w	r2, r3, #3
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	fa02 f303 	lsl.w	r3, r2, r3
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	69ba      	ldr	r2, [r7, #24]
 800c014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 80d8 	beq.w	800c1d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c024:	4b2c      	ldr	r3, [pc, #176]	@ (800c0d8 <HAL_GPIO_Init+0x22c>)
 800c026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c02a:	4a2b      	ldr	r2, [pc, #172]	@ (800c0d8 <HAL_GPIO_Init+0x22c>)
 800c02c:	f043 0302 	orr.w	r3, r3, #2
 800c030:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c034:	4b28      	ldr	r3, [pc, #160]	@ (800c0d8 <HAL_GPIO_Init+0x22c>)
 800c036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c042:	4a26      	ldr	r2, [pc, #152]	@ (800c0dc <HAL_GPIO_Init+0x230>)
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	089b      	lsrs	r3, r3, #2
 800c048:	3302      	adds	r3, #2
 800c04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c04e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	220f      	movs	r2, #15
 800c05a:	fa02 f303 	lsl.w	r3, r2, r3
 800c05e:	43db      	mvns	r3, r3
 800c060:	69ba      	ldr	r2, [r7, #24]
 800c062:	4013      	ands	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a1d      	ldr	r2, [pc, #116]	@ (800c0e0 <HAL_GPIO_Init+0x234>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d04a      	beq.n	800c104 <HAL_GPIO_Init+0x258>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a1c      	ldr	r2, [pc, #112]	@ (800c0e4 <HAL_GPIO_Init+0x238>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d02b      	beq.n	800c0ce <HAL_GPIO_Init+0x222>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a1b      	ldr	r2, [pc, #108]	@ (800c0e8 <HAL_GPIO_Init+0x23c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d025      	beq.n	800c0ca <HAL_GPIO_Init+0x21e>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a1a      	ldr	r2, [pc, #104]	@ (800c0ec <HAL_GPIO_Init+0x240>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d01f      	beq.n	800c0c6 <HAL_GPIO_Init+0x21a>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a19      	ldr	r2, [pc, #100]	@ (800c0f0 <HAL_GPIO_Init+0x244>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d019      	beq.n	800c0c2 <HAL_GPIO_Init+0x216>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a18      	ldr	r2, [pc, #96]	@ (800c0f4 <HAL_GPIO_Init+0x248>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d013      	beq.n	800c0be <HAL_GPIO_Init+0x212>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a17      	ldr	r2, [pc, #92]	@ (800c0f8 <HAL_GPIO_Init+0x24c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00d      	beq.n	800c0ba <HAL_GPIO_Init+0x20e>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a16      	ldr	r2, [pc, #88]	@ (800c0fc <HAL_GPIO_Init+0x250>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d007      	beq.n	800c0b6 <HAL_GPIO_Init+0x20a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a15      	ldr	r2, [pc, #84]	@ (800c100 <HAL_GPIO_Init+0x254>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d101      	bne.n	800c0b2 <HAL_GPIO_Init+0x206>
 800c0ae:	2309      	movs	r3, #9
 800c0b0:	e029      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0b2:	230a      	movs	r3, #10
 800c0b4:	e027      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0b6:	2307      	movs	r3, #7
 800c0b8:	e025      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0ba:	2306      	movs	r3, #6
 800c0bc:	e023      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0be:	2305      	movs	r3, #5
 800c0c0:	e021      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	e01f      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e01d      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e01b      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e019      	b.n	800c106 <HAL_GPIO_Init+0x25a>
 800c0d2:	bf00      	nop
 800c0d4:	58000080 	.word	0x58000080
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	58000400 	.word	0x58000400
 800c0e0:	58020000 	.word	0x58020000
 800c0e4:	58020400 	.word	0x58020400
 800c0e8:	58020800 	.word	0x58020800
 800c0ec:	58020c00 	.word	0x58020c00
 800c0f0:	58021000 	.word	0x58021000
 800c0f4:	58021400 	.word	0x58021400
 800c0f8:	58021800 	.word	0x58021800
 800c0fc:	58021c00 	.word	0x58021c00
 800c100:	58022400 	.word	0x58022400
 800c104:	2300      	movs	r3, #0
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	f002 0203 	and.w	r2, r2, #3
 800c10c:	0092      	lsls	r2, r2, #2
 800c10e:	4093      	lsls	r3, r2
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	4313      	orrs	r3, r2
 800c114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c116:	4938      	ldr	r1, [pc, #224]	@ (800c1f8 <HAL_GPIO_Init+0x34c>)
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	089b      	lsrs	r3, r3, #2
 800c11c:	3302      	adds	r3, #2
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	43db      	mvns	r3, r3
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	4013      	ands	r3, r2
 800c134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800c142:	69ba      	ldr	r2, [r7, #24]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4313      	orrs	r3, r2
 800c148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c14a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	43db      	mvns	r3, r3
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	4013      	ands	r3, r2
 800c162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4313      	orrs	r3, r2
 800c176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	43db      	mvns	r3, r3
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	4013      	ands	r3, r2
 800c18e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800c19c:	69ba      	ldr	r2, [r7, #24]
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	69ba      	ldr	r2, [r7, #24]
 800c1a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	43db      	mvns	r3, r3
 800c1b4:	69ba      	ldr	r2, [r7, #24]
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f47f ae6b 	bne.w	800bec0 <HAL_GPIO_Init+0x14>
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	3724      	adds	r7, #36	@ 0x24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	58000400 	.word	0x58000400

0800c1fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	460b      	mov	r3, r1
 800c206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	887b      	ldrh	r3, [r7, #2]
 800c20e:	4013      	ands	r3, r2
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c214:	2301      	movs	r3, #1
 800c216:	73fb      	strb	r3, [r7, #15]
 800c218:	e001      	b.n	800c21e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
 800c238:	4613      	mov	r3, r2
 800c23a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c23c:	787b      	ldrb	r3, [r7, #1]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c242:	887a      	ldrh	r2, [r7, #2]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c248:	e003      	b.n	800c252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c24a:	887b      	ldrh	r3, [r7, #2]
 800c24c:	041a      	lsls	r2, r3, #16
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	619a      	str	r2, [r3, #24]
}
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c25e:	b580      	push	{r7, lr}
 800c260:	b082      	sub	sp, #8
 800c262:	af00      	add	r7, sp, #0
 800c264:	4603      	mov	r3, r0
 800c266:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c26c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	4013      	ands	r3, r2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d008      	beq.n	800c28a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c27c:	88fb      	ldrh	r3, [r7, #6]
 800c27e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c282:	88fb      	ldrh	r3, [r7, #6]
 800c284:	4618      	mov	r0, r3
 800c286:	f7f5 f831 	bl	80012ec <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c28a:	bf00      	nop
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e08b      	b.n	800c3be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7f6 f97a 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2224      	movs	r2, #36	@ 0x24
 800c2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0201 	bic.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c2e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c2f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d107      	bne.n	800c30e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c30a:	609a      	str	r2, [r3, #8]
 800c30c:	e006      	b.n	800c31c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	689a      	ldr	r2, [r3, #8]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c31a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	2b02      	cmp	r3, #2
 800c322:	d108      	bne.n	800c336 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c332:	605a      	str	r2, [r3, #4]
 800c334:	e007      	b.n	800c346 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	685a      	ldr	r2, [r3, #4]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6859      	ldr	r1, [r3, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	4b1d      	ldr	r3, [pc, #116]	@ (800c3c8 <HAL_I2C_Init+0x134>)
 800c352:	430b      	orrs	r3, r1
 800c354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68da      	ldr	r2, [r3, #12]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	691a      	ldr	r2, [r3, #16]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	69d9      	ldr	r1, [r3, #28]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0201 	orr.w	r2, r2, #1
 800c39e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	02008000 	.word	0x02008000

0800c3cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b20      	cmp	r3, #32
 800c3e0:	d138      	bne.n	800c454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d101      	bne.n	800c3f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	e032      	b.n	800c456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2224      	movs	r2, #36	@ 0x24
 800c3fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0201 	bic.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c41e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6819      	ldr	r1, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	430a      	orrs	r2, r1
 800c42e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	e000      	b.n	800c456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c454:	2302      	movs	r3, #2
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c462:	b480      	push	{r7}
 800c464:	b085      	sub	sp, #20
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b20      	cmp	r3, #32
 800c476:	d139      	bne.n	800c4ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c482:	2302      	movs	r3, #2
 800c484:	e033      	b.n	800c4ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2224      	movs	r2, #36	@ 0x24
 800c492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f022 0201 	bic.w	r2, r2, #1
 800c4a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c4b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f042 0201 	orr.w	r2, r2, #1
 800c4d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e000      	b.n	800c4ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c4ec:	2302      	movs	r3, #2
  }
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3714      	adds	r7, #20
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr

0800c4fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b086      	sub	sp, #24
 800c4fe:	af02      	add	r7, sp, #8
 800c500:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e0fe      	b.n	800c70a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d106      	bne.n	800c526 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f00c fb8d 	bl	8018c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2203      	movs	r2, #3
 800c52a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4618      	mov	r0, r3
 800c534:	f008 ff49 	bl	80153ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7c1a      	ldrb	r2, [r3, #16]
 800c540:	f88d 2000 	strb.w	r2, [sp]
 800c544:	3304      	adds	r3, #4
 800c546:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c548:	f008 fe1a 	bl	8015180 <USB_CoreInit>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2202      	movs	r2, #2
 800c556:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e0d5      	b.n	800c70a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2100      	movs	r1, #0
 800c564:	4618      	mov	r0, r3
 800c566:	f008 ff41 	bl	80153ec <USB_SetCurrentMode>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2202      	movs	r2, #2
 800c574:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e0c6      	b.n	800c70a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c57c:	2300      	movs	r3, #0
 800c57e:	73fb      	strb	r3, [r7, #15]
 800c580:	e04a      	b.n	800c618 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c582:	7bfa      	ldrb	r2, [r7, #15]
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	3315      	adds	r3, #21
 800c592:	2201      	movs	r2, #1
 800c594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c596:	7bfa      	ldrb	r2, [r7, #15]
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	4613      	mov	r3, r2
 800c59c:	00db      	lsls	r3, r3, #3
 800c59e:	4413      	add	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3314      	adds	r3, #20
 800c5a6:	7bfa      	ldrb	r2, [r7, #15]
 800c5a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c5aa:	7bfa      	ldrb	r2, [r7, #15]
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	b298      	uxth	r0, r3
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	440b      	add	r3, r1
 800c5bc:	332e      	adds	r3, #46	@ 0x2e
 800c5be:	4602      	mov	r2, r0
 800c5c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c5c2:	7bfa      	ldrb	r2, [r7, #15]
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	00db      	lsls	r3, r3, #3
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	3318      	adds	r3, #24
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c5d6:	7bfa      	ldrb	r2, [r7, #15]
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	331c      	adds	r3, #28
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c5ea:	7bfa      	ldrb	r2, [r7, #15]
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	4413      	add	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	440b      	add	r3, r1
 800c5f8:	3320      	adds	r3, #32
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c5fe:	7bfa      	ldrb	r2, [r7, #15]
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	00db      	lsls	r3, r3, #3
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	3324      	adds	r3, #36	@ 0x24
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	3301      	adds	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	791b      	ldrb	r3, [r3, #4]
 800c61c:	7bfa      	ldrb	r2, [r7, #15]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d3af      	bcc.n	800c582 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]
 800c626:	e044      	b.n	800c6b2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c628:	7bfa      	ldrb	r2, [r7, #15]
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	4613      	mov	r3, r2
 800c62e:	00db      	lsls	r3, r3, #3
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c63a:	2200      	movs	r2, #0
 800c63c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c63e:	7bfa      	ldrb	r2, [r7, #15]
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	4613      	mov	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	4413      	add	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	440b      	add	r3, r1
 800c64c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c650:	7bfa      	ldrb	r2, [r7, #15]
 800c652:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c654:	7bfa      	ldrb	r2, [r7, #15]
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	4613      	mov	r3, r2
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	4413      	add	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	440b      	add	r3, r1
 800c662:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c666:	2200      	movs	r2, #0
 800c668:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c66a:	7bfa      	ldrb	r2, [r7, #15]
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	00db      	lsls	r3, r3, #3
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	440b      	add	r3, r1
 800c678:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c680:	7bfa      	ldrb	r2, [r7, #15]
 800c682:	6879      	ldr	r1, [r7, #4]
 800c684:	4613      	mov	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	4413      	add	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	440b      	add	r3, r1
 800c68e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c696:	7bfa      	ldrb	r2, [r7, #15]
 800c698:	6879      	ldr	r1, [r7, #4]
 800c69a:	4613      	mov	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	4413      	add	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	440b      	add	r3, r1
 800c6a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	73fb      	strb	r3, [r7, #15]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	791b      	ldrb	r3, [r3, #4]
 800c6b6:	7bfa      	ldrb	r2, [r7, #15]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d3b5      	bcc.n	800c628 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	7c1a      	ldrb	r2, [r3, #16]
 800c6c4:	f88d 2000 	strb.w	r2, [sp]
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c6cc:	f008 feda 	bl	8015484 <USB_DevInit>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d005      	beq.n	800c6e2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2202      	movs	r2, #2
 800c6da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e013      	b.n	800c70a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	7b1b      	ldrb	r3, [r3, #12]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d102      	bne.n	800c6fe <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f96d 	bl	800d9d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4618      	mov	r0, r3
 800c704:	f009 ff19 	bl	801653a <USB_DevDisconnect>

  return HAL_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <HAL_PCD_Start+0x1c>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e022      	b.n	800c774 <HAL_PCD_Start+0x62>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d009      	beq.n	800c756 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c746:	2b01      	cmp	r3, #1
 800c748:	d105      	bne.n	800c756 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c74e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f008 fe24 	bl	80153a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4618      	mov	r0, r3
 800c766:	f009 fec7 	bl	80164f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3710      	adds	r7, #16
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c77c:	b590      	push	{r4, r7, lr}
 800c77e:	b08d      	sub	sp, #52	@ 0x34
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f009 ff85 	bl	80166a2 <USB_GetMode>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f040 84b9 	bne.w	800d112 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f009 fee9 	bl	801657c <USB_ReadInterrupts>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 84af 	beq.w	800d110 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f009 fed6 	bl	801657c <USB_ReadInterrupts>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d107      	bne.n	800c7ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	695a      	ldr	r2, [r3, #20]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f002 0202 	and.w	r2, r2, #2
 800c7e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f009 fec4 	bl	801657c <USB_ReadInterrupts>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f003 0310 	and.w	r3, r3, #16
 800c7fa:	2b10      	cmp	r3, #16
 800c7fc:	d161      	bne.n	800c8c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	699a      	ldr	r2, [r3, #24]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0210 	bic.w	r2, r2, #16
 800c80c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	6a1b      	ldr	r3, [r3, #32]
 800c812:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	f003 020f 	and.w	r2, r3, #15
 800c81a:	4613      	mov	r3, r2
 800c81c:	00db      	lsls	r3, r3, #3
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	4413      	add	r3, r2
 800c82a:	3304      	adds	r3, #4
 800c82c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	0c5b      	lsrs	r3, r3, #17
 800c832:	f003 030f 	and.w	r3, r3, #15
 800c836:	2b02      	cmp	r3, #2
 800c838:	d124      	bne.n	800c884 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c83a:	69ba      	ldr	r2, [r7, #24]
 800c83c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c840:	4013      	ands	r3, r2
 800c842:	2b00      	cmp	r3, #0
 800c844:	d035      	beq.n	800c8b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	091b      	lsrs	r3, r3, #4
 800c84e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c854:	b29b      	uxth	r3, r3
 800c856:	461a      	mov	r2, r3
 800c858:	6a38      	ldr	r0, [r7, #32]
 800c85a:	f009 fcfb 	bl	8016254 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	68da      	ldr	r2, [r3, #12]
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	091b      	lsrs	r3, r3, #4
 800c866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c86a:	441a      	add	r2, r3
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	695a      	ldr	r2, [r3, #20]
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	091b      	lsrs	r3, r3, #4
 800c878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c87c:	441a      	add	r2, r3
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	615a      	str	r2, [r3, #20]
 800c882:	e016      	b.n	800c8b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	0c5b      	lsrs	r3, r3, #17
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	2b06      	cmp	r3, #6
 800c88e:	d110      	bne.n	800c8b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c896:	2208      	movs	r2, #8
 800c898:	4619      	mov	r1, r3
 800c89a:	6a38      	ldr	r0, [r7, #32]
 800c89c:	f009 fcda 	bl	8016254 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	091b      	lsrs	r3, r3, #4
 800c8a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8ac:	441a      	add	r2, r3
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	699a      	ldr	r2, [r3, #24]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f042 0210 	orr.w	r2, r2, #16
 800c8c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f009 fe58 	bl	801657c <USB_ReadInterrupts>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c8d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c8d6:	f040 80a7 	bne.w	800ca28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f009 fe5d 	bl	80165a2 <USB_ReadDevAllOutEpInterrupt>
 800c8e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c8ea:	e099      	b.n	800ca20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 808e 	beq.w	800ca14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f009 fe81 	bl	801660a <USB_ReadDevOutEPInterrupt>
 800c908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00c      	beq.n	800c92e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c920:	461a      	mov	r2, r3
 800c922:	2301      	movs	r3, #1
 800c924:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c926:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 fecf 	bl	800d6cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	f003 0308 	and.w	r3, r3, #8
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00c      	beq.n	800c952 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c944:	461a      	mov	r2, r3
 800c946:	2308      	movs	r3, #8
 800c948:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c94a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 ffa5 	bl	800d89c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f003 0310 	and.w	r3, r3, #16
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d008      	beq.n	800c96e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	4413      	add	r3, r2
 800c964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c968:	461a      	mov	r2, r3
 800c96a:	2310      	movs	r3, #16
 800c96c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	2b00      	cmp	r3, #0
 800c976:	d030      	beq.n	800c9da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c980:	2b80      	cmp	r3, #128	@ 0x80
 800c982:	d109      	bne.n	800c998 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	69fa      	ldr	r2, [r7, #28]
 800c98e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c996:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c99a:	4613      	mov	r3, r2
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	78db      	ldrb	r3, [r3, #3]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d108      	bne.n	800c9c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f00c fa34 	bl	8018e30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ca:	015a      	lsls	r2, r3, #5
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d008      	beq.n	800c9f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	2320      	movs	r3, #32
 800c9f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d009      	beq.n	800ca14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ca12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	3301      	adds	r3, #1
 800ca18:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ca1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1c:	085b      	lsrs	r3, r3, #1
 800ca1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f47f af62 	bne.w	800c8ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f009 fda5 	bl	801657c <USB_ReadInterrupts>
 800ca32:	4603      	mov	r3, r0
 800ca34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ca38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca3c:	f040 80db 	bne.w	800cbf6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f009 fdc6 	bl	80165d6 <USB_ReadDevAllInEpInterrupt>
 800ca4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800ca50:	e0cd      	b.n	800cbee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80c2 	beq.w	800cbe2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f009 fdec 	bl	8016646 <USB_ReadDevInEPInterrupt>
 800ca6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f003 0301 	and.w	r3, r3, #1
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d057      	beq.n	800cb2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	f003 030f 	and.w	r3, r3, #15
 800ca80:	2201      	movs	r2, #1
 800ca82:	fa02 f303 	lsl.w	r3, r2, r3
 800ca86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	43db      	mvns	r3, r3
 800ca94:	69f9      	ldr	r1, [r7, #28]
 800ca96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800caaa:	461a      	mov	r2, r3
 800caac:	2301      	movs	r3, #1
 800caae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	799b      	ldrb	r3, [r3, #6]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d132      	bne.n	800cb1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cab8:	6879      	ldr	r1, [r7, #4]
 800caba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cabc:	4613      	mov	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	4413      	add	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	3320      	adds	r3, #32
 800cac8:	6819      	ldr	r1, [r3, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cace:	4613      	mov	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4403      	add	r3, r0
 800cad8:	331c      	adds	r3, #28
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4419      	add	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cae2:	4613      	mov	r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	4413      	add	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4403      	add	r3, r0
 800caec:	3320      	adds	r3, #32
 800caee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800caf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d113      	bne.n	800cb1e <HAL_PCD_IRQHandler+0x3a2>
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cafa:	4613      	mov	r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	4413      	add	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	440b      	add	r3, r1
 800cb04:	3324      	adds	r3, #36	@ 0x24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d108      	bne.n	800cb1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6818      	ldr	r0, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb16:	461a      	mov	r2, r3
 800cb18:	2101      	movs	r1, #1
 800cb1a:	f009 fdf5 	bl	8016708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f00c f8fe 	bl	8018d26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f003 0308 	and.w	r3, r3, #8
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	015a      	lsls	r2, r3, #5
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb40:	461a      	mov	r2, r3
 800cb42:	2308      	movs	r3, #8
 800cb44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f003 0310 	and.w	r3, r3, #16
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d008      	beq.n	800cb62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	2310      	movs	r3, #16
 800cb60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d008      	beq.n	800cb7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb78:	461a      	mov	r2, r3
 800cb7a:	2340      	movs	r3, #64	@ 0x40
 800cb7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f003 0302 	and.w	r3, r3, #2
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d023      	beq.n	800cbd0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800cb88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cb8a:	6a38      	ldr	r0, [r7, #32]
 800cb8c:	f008 fdd8 	bl	8015740 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800cb90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb92:	4613      	mov	r3, r2
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	3310      	adds	r3, #16
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	4413      	add	r3, r2
 800cba0:	3304      	adds	r3, #4
 800cba2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	78db      	ldrb	r3, [r3, #3]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d108      	bne.n	800cbbe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f00c f94b 	bl	8018e54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbca:	461a      	mov	r2, r3
 800cbcc:	2302      	movs	r3, #2
 800cbce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800cbda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fce8 	bl	800d5b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800cbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbea:	085b      	lsrs	r3, r3, #1
 800cbec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f47f af2e 	bne.w	800ca52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f009 fcbe 	bl	801657c <USB_ReadInterrupts>
 800cc00:	4603      	mov	r3, r0
 800cc02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc0a:	d122      	bne.n	800cc52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	69fa      	ldr	r2, [r7, #28]
 800cc16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc1a:	f023 0301 	bic.w	r3, r3, #1
 800cc1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d108      	bne.n	800cc3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cc32:	2100      	movs	r1, #0
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fef3 	bl	800da20 <HAL_PCDEx_LPM_Callback>
 800cc3a:	e002      	b.n	800cc42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f00c f8e9 	bl	8018e14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	695a      	ldr	r2, [r3, #20]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800cc50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f009 fc90 	bl	801657c <USB_ReadInterrupts>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc66:	d112      	bne.n	800cc8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d102      	bne.n	800cc7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f00c f8a5 	bl	8018dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	695a      	ldr	r2, [r3, #20]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800cc8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f009 fc72 	bl	801657c <USB_ReadInterrupts>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cca2:	d121      	bne.n	800cce8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	695a      	ldr	r2, [r3, #20]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ccb2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d111      	bne.n	800cce2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cccc:	089b      	lsrs	r3, r3, #2
 800ccce:	f003 020f 	and.w	r2, r3, #15
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ccd8:	2101      	movs	r1, #1
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fea0 	bl	800da20 <HAL_PCDEx_LPM_Callback>
 800cce0:	e002      	b.n	800cce8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f00c f870 	bl	8018dc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f009 fc45 	bl	801657c <USB_ReadInterrupts>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ccf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccfc:	f040 80b7 	bne.w	800ce6e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	69fa      	ldr	r2, [r7, #28]
 800cd0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd0e:	f023 0301 	bic.w	r3, r3, #1
 800cd12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2110      	movs	r1, #16
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f008 fd10 	bl	8015740 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd20:	2300      	movs	r3, #0
 800cd22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd24:	e046      	b.n	800cdb4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd28:	015a      	lsls	r2, r3, #5
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd32:	461a      	mov	r2, r3
 800cd34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cd38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3c:	015a      	lsls	r2, r3, #5
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	4413      	add	r3, r2
 800cd42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd4a:	0151      	lsls	r1, r2, #5
 800cd4c:	69fa      	ldr	r2, [r7, #28]
 800cd4e:	440a      	add	r2, r1
 800cd50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cd54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5c:	015a      	lsls	r2, r3, #5
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	4413      	add	r3, r2
 800cd62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd66:	461a      	mov	r2, r3
 800cd68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cd6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd70:	015a      	lsls	r2, r3, #5
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	4413      	add	r3, r2
 800cd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd7e:	0151      	lsls	r1, r2, #5
 800cd80:	69fa      	ldr	r2, [r7, #28]
 800cd82:	440a      	add	r2, r1
 800cd84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cd88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd9e:	0151      	lsls	r1, r2, #5
 800cda0:	69fa      	ldr	r2, [r7, #28]
 800cda2:	440a      	add	r2, r1
 800cda4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cda8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cdac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	791b      	ldrb	r3, [r3, #4]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d3b2      	bcc.n	800cd26 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	69fa      	ldr	r2, [r7, #28]
 800cdca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cdce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800cdd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7bdb      	ldrb	r3, [r3, #15]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d016      	beq.n	800ce0a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cde2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cde6:	69fa      	ldr	r2, [r7, #28]
 800cde8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cdec:	f043 030b 	orr.w	r3, r3, #11
 800cdf0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdfc:	69fa      	ldr	r2, [r7, #28]
 800cdfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce02:	f043 030b 	orr.w	r3, r3, #11
 800ce06:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce08:	e015      	b.n	800ce36 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce10:	695a      	ldr	r2, [r3, #20]
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce18:	4619      	mov	r1, r3
 800ce1a:	f242 032b 	movw	r3, #8235	@ 0x202b
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	69fa      	ldr	r2, [r7, #28]
 800ce2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce30:	f043 030b 	orr.w	r3, r3, #11
 800ce34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	69fa      	ldr	r2, [r7, #28]
 800ce40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ce44:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ce48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6818      	ldr	r0, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ce58:	461a      	mov	r2, r3
 800ce5a:	f009 fc55 	bl	8016708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	695a      	ldr	r2, [r3, #20]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ce6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f009 fb82 	bl	801657c <USB_ReadInterrupts>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce82:	d123      	bne.n	800cecc <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f009 fc19 	bl	80166c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f008 fccd 	bl	8015832 <USB_GetDevSpeed>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681c      	ldr	r4, [r3, #0]
 800cea4:	f001 fd1c 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 800cea8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f008 f9d7 	bl	8015264 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f00b ff5d 	bl	8018d76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	695a      	ldr	r2, [r3, #20]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800ceca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f009 fb53 	bl	801657c <USB_ReadInterrupts>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f003 0308 	and.w	r3, r3, #8
 800cedc:	2b08      	cmp	r3, #8
 800cede:	d10a      	bne.n	800cef6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f00b ff3a 	bl	8018d5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	695a      	ldr	r2, [r3, #20]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f002 0208 	and.w	r2, r2, #8
 800cef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f009 fb3e 	bl	801657c <USB_ReadInterrupts>
 800cf00:	4603      	mov	r3, r0
 800cf02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf06:	2b80      	cmp	r3, #128	@ 0x80
 800cf08:	d123      	bne.n	800cf52 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cf16:	2301      	movs	r3, #1
 800cf18:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf1a:	e014      	b.n	800cf46 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf20:	4613      	mov	r3, r2
 800cf22:	00db      	lsls	r3, r3, #3
 800cf24:	4413      	add	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	440b      	add	r3, r1
 800cf2a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d105      	bne.n	800cf40 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800cf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fb08 	bl	800d550 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf42:	3301      	adds	r3, #1
 800cf44:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	791b      	ldrb	r3, [r3, #4]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d3e4      	bcc.n	800cf1c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4618      	mov	r0, r3
 800cf58:	f009 fb10 	bl	801657c <USB_ReadInterrupts>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf66:	d13c      	bne.n	800cfe2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cf68:	2301      	movs	r3, #1
 800cf6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf6c:	e02b      	b.n	800cfc6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf70:	015a      	lsls	r2, r3, #5
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	4413      	add	r3, r2
 800cf76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf82:	4613      	mov	r3, r2
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	440b      	add	r3, r1
 800cf8c:	3318      	adds	r3, #24
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d115      	bne.n	800cfc0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800cf94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	da12      	bge.n	800cfc0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	4413      	add	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	3317      	adds	r3, #23
 800cfaa:	2201      	movs	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fac8 	bl	800d550 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d3cd      	bcc.n	800cf6e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	695a      	ldr	r2, [r3, #20]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800cfe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f009 fac8 	bl	801657c <USB_ReadInterrupts>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cff6:	d156      	bne.n	800d0a6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cff8:	2301      	movs	r3, #1
 800cffa:	627b      	str	r3, [r7, #36]	@ 0x24
 800cffc:	e045      	b.n	800d08a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d000:	015a      	lsls	r2, r3, #5
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	4413      	add	r3, r2
 800d006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d012:	4613      	mov	r3, r2
 800d014:	00db      	lsls	r3, r3, #3
 800d016:	4413      	add	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	440b      	add	r3, r1
 800d01c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d12e      	bne.n	800d084 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d026:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800d028:	2b00      	cmp	r3, #0
 800d02a:	da2b      	bge.n	800d084 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800d038:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d121      	bne.n	800d084 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800d040:	6879      	ldr	r1, [r7, #4]
 800d042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d044:	4613      	mov	r3, r2
 800d046:	00db      	lsls	r3, r3, #3
 800d048:	4413      	add	r3, r2
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	440b      	add	r3, r1
 800d04e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800d052:	2201      	movs	r2, #1
 800d054:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	69fa      	ldr	r2, [r7, #28]
 800d078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d07c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d080:	6053      	str	r3, [r2, #4]
            break;
 800d082:	e008      	b.n	800d096 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800d084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d086:	3301      	adds	r3, #1
 800d088:	627b      	str	r3, [r7, #36]	@ 0x24
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	791b      	ldrb	r3, [r3, #4]
 800d08e:	461a      	mov	r2, r3
 800d090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d092:	4293      	cmp	r3, r2
 800d094:	d3b3      	bcc.n	800cffe <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	695a      	ldr	r2, [r3, #20]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800d0a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f009 fa66 	bl	801657c <USB_ReadInterrupts>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0ba:	d10a      	bne.n	800d0d2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f00b fedb 	bl	8018e78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	695a      	ldr	r2, [r3, #20]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800d0d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f009 fa50 	bl	801657c <USB_ReadInterrupts>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f003 0304 	and.w	r3, r3, #4
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d115      	bne.n	800d112 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f00b fecb 	bl	8018e94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6859      	ldr	r1, [r3, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	430a      	orrs	r2, r1
 800d10c:	605a      	str	r2, [r3, #4]
 800d10e:	e000      	b.n	800d112 <HAL_PCD_IRQHandler+0x996>
      return;
 800d110:	bf00      	nop
    }
  }
}
 800d112:	3734      	adds	r7, #52	@ 0x34
 800d114:	46bd      	mov	sp, r7
 800d116:	bd90      	pop	{r4, r7, pc}

0800d118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_PCD_SetAddress+0x1a>
 800d12e:	2302      	movs	r3, #2
 800d130:	e012      	b.n	800d158 <HAL_PCD_SetAddress+0x40>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	78fa      	ldrb	r2, [r7, #3]
 800d13e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	78fa      	ldrb	r2, [r7, #3]
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f009 f9af 	bl	80164ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	461a      	mov	r2, r3
 800d16e:	4603      	mov	r3, r0
 800d170:	70fb      	strb	r3, [r7, #3]
 800d172:	460b      	mov	r3, r1
 800d174:	803b      	strh	r3, [r7, #0]
 800d176:	4613      	mov	r3, r2
 800d178:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d17e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d182:	2b00      	cmp	r3, #0
 800d184:	da0f      	bge.n	800d1a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	f003 020f 	and.w	r2, r3, #15
 800d18c:	4613      	mov	r3, r2
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	4413      	add	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	3310      	adds	r3, #16
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4413      	add	r3, r2
 800d19a:	3304      	adds	r3, #4
 800d19c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	705a      	strb	r2, [r3, #1]
 800d1a4:	e00f      	b.n	800d1c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1a6:	78fb      	ldrb	r3, [r7, #3]
 800d1a8:	f003 020f 	and.w	r2, r3, #15
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	4413      	add	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	3304      	adds	r3, #4
 800d1be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d1c6:	78fb      	ldrb	r3, [r7, #3]
 800d1c8:	f003 030f 	and.w	r3, r3, #15
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d1d2:	883a      	ldrh	r2, [r7, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	78ba      	ldrb	r2, [r7, #2]
 800d1dc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d1f0:	78bb      	ldrb	r3, [r7, #2]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d102      	bne.n	800d1fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d202:	2b01      	cmp	r3, #1
 800d204:	d101      	bne.n	800d20a <HAL_PCD_EP_Open+0xaa>
 800d206:	2302      	movs	r3, #2
 800d208:	e00e      	b.n	800d228 <HAL_PCD_EP_Open+0xc8>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	4618      	mov	r0, r3
 800d21a:	f008 fb2f 	bl	801587c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d226:	7afb      	ldrb	r3, [r7, #11]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d240:	2b00      	cmp	r3, #0
 800d242:	da0f      	bge.n	800d264 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 020f 	and.w	r2, r3, #15
 800d24a:	4613      	mov	r3, r2
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	4413      	add	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	3310      	adds	r3, #16
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	4413      	add	r3, r2
 800d258:	3304      	adds	r3, #4
 800d25a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2201      	movs	r2, #1
 800d260:	705a      	strb	r2, [r3, #1]
 800d262:	e00f      	b.n	800d284 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	f003 020f 	and.w	r2, r3, #15
 800d26a:	4613      	mov	r3, r2
 800d26c:	00db      	lsls	r3, r3, #3
 800d26e:	4413      	add	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	4413      	add	r3, r2
 800d27a:	3304      	adds	r3, #4
 800d27c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2200      	movs	r2, #0
 800d282:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d284:	78fb      	ldrb	r3, [r7, #3]
 800d286:	f003 030f 	and.w	r3, r3, #15
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d296:	2b01      	cmp	r3, #1
 800d298:	d101      	bne.n	800d29e <HAL_PCD_EP_Close+0x6e>
 800d29a:	2302      	movs	r3, #2
 800d29c:	e00e      	b.n	800d2bc <HAL_PCD_EP_Close+0x8c>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f008 fb6d 	bl	801598c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3710      	adds	r7, #16
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	607a      	str	r2, [r7, #4]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2d4:	7afb      	ldrb	r3, [r7, #11]
 800d2d6:	f003 020f 	and.w	r2, r3, #15
 800d2da:	4613      	mov	r3, r2
 800d2dc:	00db      	lsls	r3, r3, #3
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2200      	movs	r2, #0
 800d304:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d306:	7afb      	ldrb	r3, [r7, #11]
 800d308:	f003 030f 	and.w	r3, r3, #15
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	799b      	ldrb	r3, [r3, #6]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d102      	bne.n	800d320 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6818      	ldr	r0, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	799b      	ldrb	r3, [r3, #6]
 800d328:	461a      	mov	r2, r3
 800d32a:	6979      	ldr	r1, [r7, #20]
 800d32c:	f008 fc0a 	bl	8015b44 <USB_EPStartXfer>

  return HAL_OK;
 800d330:	2300      	movs	r3, #0
}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d33a:	b480      	push	{r7}
 800d33c:	b083      	sub	sp, #12
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	460b      	mov	r3, r1
 800d344:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d346:	78fb      	ldrb	r3, [r7, #3]
 800d348:	f003 020f 	and.w	r2, r3, #15
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	4613      	mov	r3, r2
 800d350:	00db      	lsls	r3, r3, #3
 800d352:	4413      	add	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	440b      	add	r3, r1
 800d358:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d35c:	681b      	ldr	r3, [r3, #0]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b086      	sub	sp, #24
 800d36e:	af00      	add	r7, sp, #0
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	460b      	mov	r3, r1
 800d378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d37a:	7afb      	ldrb	r3, [r7, #11]
 800d37c:	f003 020f 	and.w	r2, r3, #15
 800d380:	4613      	mov	r3, r2
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	3310      	adds	r3, #16
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	4413      	add	r3, r2
 800d38e:	3304      	adds	r3, #4
 800d390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3aa:	7afb      	ldrb	r3, [r7, #11]
 800d3ac:	f003 030f 	and.w	r3, r3, #15
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	799b      	ldrb	r3, [r3, #6]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d102      	bne.n	800d3c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	799b      	ldrb	r3, [r3, #6]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6979      	ldr	r1, [r7, #20]
 800d3d0:	f008 fbb8 	bl	8015b44 <USB_EPStartXfer>

  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3718      	adds	r7, #24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d3ea:	78fb      	ldrb	r3, [r7, #3]
 800d3ec:	f003 030f 	and.w	r3, r3, #15
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	7912      	ldrb	r2, [r2, #4]
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d901      	bls.n	800d3fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e04f      	b.n	800d49c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d400:	2b00      	cmp	r3, #0
 800d402:	da0f      	bge.n	800d424 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	f003 020f 	and.w	r2, r3, #15
 800d40a:	4613      	mov	r3, r2
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	4413      	add	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	3310      	adds	r3, #16
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	4413      	add	r3, r2
 800d418:	3304      	adds	r3, #4
 800d41a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2201      	movs	r2, #1
 800d420:	705a      	strb	r2, [r3, #1]
 800d422:	e00d      	b.n	800d440 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d424:	78fa      	ldrb	r2, [r7, #3]
 800d426:	4613      	mov	r3, r2
 800d428:	00db      	lsls	r3, r3, #3
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	4413      	add	r3, r2
 800d436:	3304      	adds	r3, #4
 800d438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2201      	movs	r2, #1
 800d444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d446:	78fb      	ldrb	r3, [r7, #3]
 800d448:	f003 030f 	and.w	r3, r3, #15
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d101      	bne.n	800d460 <HAL_PCD_EP_SetStall+0x82>
 800d45c:	2302      	movs	r3, #2
 800d45e:	e01d      	b.n	800d49c <HAL_PCD_EP_SetStall+0xbe>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68f9      	ldr	r1, [r7, #12]
 800d46e:	4618      	mov	r0, r3
 800d470:	f008 ff48 	bl	8016304 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d474:	78fb      	ldrb	r3, [r7, #3]
 800d476:	f003 030f 	and.w	r3, r3, #15
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d109      	bne.n	800d492 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6818      	ldr	r0, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7999      	ldrb	r1, [r3, #6]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d48c:	461a      	mov	r2, r3
 800d48e:	f009 f93b 	bl	8016708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d49a:	2300      	movs	r3, #0
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d4b0:	78fb      	ldrb	r3, [r7, #3]
 800d4b2:	f003 030f 	and.w	r3, r3, #15
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	7912      	ldrb	r2, [r2, #4]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d901      	bls.n	800d4c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e042      	b.n	800d548 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d4c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	da0f      	bge.n	800d4ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d4ca:	78fb      	ldrb	r3, [r7, #3]
 800d4cc:	f003 020f 	and.w	r2, r3, #15
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	00db      	lsls	r3, r3, #3
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	3310      	adds	r3, #16
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	4413      	add	r3, r2
 800d4de:	3304      	adds	r3, #4
 800d4e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	705a      	strb	r2, [r3, #1]
 800d4e8:	e00f      	b.n	800d50a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d4ea:	78fb      	ldrb	r3, [r7, #3]
 800d4ec:	f003 020f 	and.w	r2, r3, #15
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	4413      	add	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4413      	add	r3, r2
 800d500:	3304      	adds	r3, #4
 800d502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	f003 030f 	and.w	r3, r3, #15
 800d516:	b2da      	uxtb	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d522:	2b01      	cmp	r3, #1
 800d524:	d101      	bne.n	800d52a <HAL_PCD_EP_ClrStall+0x86>
 800d526:	2302      	movs	r3, #2
 800d528:	e00e      	b.n	800d548 <HAL_PCD_EP_ClrStall+0xa4>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	4618      	mov	r0, r3
 800d53a:	f008 ff51 	bl	80163e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	460b      	mov	r3, r1
 800d55a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d55c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d560:	2b00      	cmp	r3, #0
 800d562:	da0c      	bge.n	800d57e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	f003 020f 	and.w	r2, r3, #15
 800d56a:	4613      	mov	r3, r2
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	4413      	add	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	3310      	adds	r3, #16
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	4413      	add	r3, r2
 800d578:	3304      	adds	r3, #4
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	e00c      	b.n	800d598 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	f003 020f 	and.w	r2, r3, #15
 800d584:	4613      	mov	r3, r2
 800d586:	00db      	lsls	r3, r3, #3
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	4413      	add	r3, r2
 800d594:	3304      	adds	r3, #4
 800d596:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68f9      	ldr	r1, [r7, #12]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f008 fd70 	bl	8016084 <USB_EPStopXfer>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d5a8:	7afb      	ldrb	r3, [r7, #11]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3710      	adds	r7, #16
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b08a      	sub	sp, #40	@ 0x28
 800d5b6:	af02      	add	r7, sp, #8
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	3310      	adds	r3, #16
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	695a      	ldr	r2, [r3, #20]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d901      	bls.n	800d5ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e06b      	b.n	800d6c2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	691a      	ldr	r2, [r3, #16]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d902      	bls.n	800d606 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	3303      	adds	r3, #3
 800d60a:	089b      	lsrs	r3, r3, #2
 800d60c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d60e:	e02a      	b.n	800d666 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	691a      	ldr	r2, [r3, #16]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	695b      	ldr	r3, [r3, #20]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	69fa      	ldr	r2, [r7, #28]
 800d622:	429a      	cmp	r2, r3
 800d624:	d902      	bls.n	800d62c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	3303      	adds	r3, #3
 800d630:	089b      	lsrs	r3, r3, #2
 800d632:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	68d9      	ldr	r1, [r3, #12]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	4603      	mov	r3, r0
 800d648:	6978      	ldr	r0, [r7, #20]
 800d64a:	f008 fdc5 	bl	80161d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	695a      	ldr	r2, [r3, #20]
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	441a      	add	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	015a      	lsls	r2, r3, #5
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	4413      	add	r3, r2
 800d66e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d809      	bhi.n	800d690 <PCD_WriteEmptyTxFifo+0xde>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	695a      	ldr	r2, [r3, #20]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d684:	429a      	cmp	r2, r3
 800d686:	d203      	bcs.n	800d690 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	691b      	ldr	r3, [r3, #16]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1bf      	bne.n	800d610 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	691a      	ldr	r2, [r3, #16]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d811      	bhi.n	800d6c0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	f003 030f 	and.w	r3, r3, #15
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d6a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	43db      	mvns	r3, r3
 800d6b6:	6939      	ldr	r1, [r7, #16]
 800d6b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d6bc:	4013      	ands	r3, r2
 800d6be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b088      	sub	sp, #32
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	333c      	adds	r3, #60	@ 0x3c
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	799b      	ldrb	r3, [r3, #6]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d17b      	bne.n	800d7fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f003 0308 	and.w	r3, r3, #8
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d015      	beq.n	800d738 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	4a61      	ldr	r2, [pc, #388]	@ (800d894 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d710:	4293      	cmp	r3, r2
 800d712:	f240 80b9 	bls.w	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 80b3 	beq.w	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	015a      	lsls	r2, r3, #5
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	4413      	add	r3, r2
 800d72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d72e:	461a      	mov	r2, r3
 800d730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d734:	6093      	str	r3, [r2, #8]
 800d736:	e0a7      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	f003 0320 	and.w	r3, r3, #32
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d74e:	461a      	mov	r2, r3
 800d750:	2320      	movs	r3, #32
 800d752:	6093      	str	r3, [r2, #8]
 800d754:	e098      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f040 8093 	bne.w	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	4a4b      	ldr	r2, [pc, #300]	@ (800d894 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d90f      	bls.n	800d78a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00a      	beq.n	800d78a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d780:	461a      	mov	r2, r3
 800d782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d786:	6093      	str	r3, [r2, #8]
 800d788:	e07e      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	4613      	mov	r3, r2
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	4413      	add	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	4413      	add	r3, r2
 800d79c:	3304      	adds	r3, #4
 800d79e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1a      	ldr	r2, [r3, #32]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	0159      	lsls	r1, r3, #5
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	440b      	add	r3, r1
 800d7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7b0:	691b      	ldr	r3, [r3, #16]
 800d7b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7b6:	1ad2      	subs	r2, r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d114      	bne.n	800d7ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6818      	ldr	r0, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	f008 ff96 	bl	8016708 <USB_EP0_OutStart>
 800d7dc:	e006      	b.n	800d7ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	68da      	ldr	r2, [r3, #12]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	441a      	add	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f00b fa7c 	bl	8018cf0 <HAL_PCD_DataOutStageCallback>
 800d7f8:	e046      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	4a26      	ldr	r2, [pc, #152]	@ (800d898 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d124      	bne.n	800d84c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00a      	beq.n	800d822 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d818:	461a      	mov	r2, r3
 800d81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d81e:	6093      	str	r3, [r2, #8]
 800d820:	e032      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f003 0320 	and.w	r3, r3, #32
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	015a      	lsls	r2, r3, #5
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	4413      	add	r3, r2
 800d834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d838:	461a      	mov	r2, r3
 800d83a:	2320      	movs	r3, #32
 800d83c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	b2db      	uxtb	r3, r3
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f00b fa53 	bl	8018cf0 <HAL_PCD_DataOutStageCallback>
 800d84a:	e01d      	b.n	800d888 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d114      	bne.n	800d87c <PCD_EP_OutXfrComplete_int+0x1b0>
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	4613      	mov	r3, r2
 800d858:	00db      	lsls	r3, r3, #3
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	440b      	add	r3, r1
 800d860:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d108      	bne.n	800d87c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6818      	ldr	r0, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d874:	461a      	mov	r2, r3
 800d876:	2100      	movs	r1, #0
 800d878:	f008 ff46 	bl	8016708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	4619      	mov	r1, r3
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f00b fa34 	bl	8018cf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3720      	adds	r7, #32
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	4f54300a 	.word	0x4f54300a
 800d898:	4f54310a 	.word	0x4f54310a

0800d89c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	333c      	adds	r3, #60	@ 0x3c
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	015a      	lsls	r2, r3, #5
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	4a15      	ldr	r2, [pc, #84]	@ (800d924 <PCD_EP_OutSetupPacket_int+0x88>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d90e      	bls.n	800d8f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d009      	beq.n	800d8f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	015a      	lsls	r2, r3, #5
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f00b f9eb 	bl	8018ccc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	4a0a      	ldr	r2, [pc, #40]	@ (800d924 <PCD_EP_OutSetupPacket_int+0x88>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d90c      	bls.n	800d918 <PCD_EP_OutSetupPacket_int+0x7c>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	799b      	ldrb	r3, [r3, #6]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d108      	bne.n	800d918 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6818      	ldr	r0, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d910:	461a      	mov	r2, r3
 800d912:	2101      	movs	r1, #1
 800d914:	f008 fef8 	bl	8016708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3718      	adds	r7, #24
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	4f54300a 	.word	0x4f54300a

0800d928 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
 800d934:	4613      	mov	r3, r2
 800d936:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d93e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d107      	bne.n	800d956 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d946:	883b      	ldrh	r3, [r7, #0]
 800d948:	0419      	lsls	r1, r3, #16
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	430a      	orrs	r2, r1
 800d952:	629a      	str	r2, [r3, #40]	@ 0x28
 800d954:	e028      	b.n	800d9a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95c:	0c1b      	lsrs	r3, r3, #16
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]
 800d968:	e00d      	b.n	800d986 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	3340      	adds	r3, #64	@ 0x40
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	0c1b      	lsrs	r3, r3, #16
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	4413      	add	r3, r2
 800d97e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d980:	7bfb      	ldrb	r3, [r7, #15]
 800d982:	3301      	adds	r3, #1
 800d984:	73fb      	strb	r3, [r7, #15]
 800d986:	7bfa      	ldrb	r2, [r7, #15]
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	3b01      	subs	r3, #1
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d3ec      	bcc.n	800d96a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d990:	883b      	ldrh	r3, [r7, #0]
 800d992:	0418      	lsls	r0, r3, #16
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6819      	ldr	r1, [r3, #0]
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	4302      	orrs	r2, r0
 800d9a0:	3340      	adds	r3, #64	@ 0x40
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	440b      	add	r3, r1
 800d9a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	460b      	mov	r3, r1
 800d9c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	887a      	ldrh	r2, [r7, #2]
 800d9c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da06:	4b05      	ldr	r3, [pc, #20]	@ (800da1c <HAL_PCDEx_ActivateLPM+0x44>)
 800da08:	4313      	orrs	r3, r2
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr
 800da1c:	10000003 	.word	0x10000003

0800da20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800da40:	4b19      	ldr	r3, [pc, #100]	@ (800daa8 <HAL_PWREx_ConfigSupply+0x70>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f003 0304 	and.w	r3, r3, #4
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d00a      	beq.n	800da62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800da4c:	4b16      	ldr	r3, [pc, #88]	@ (800daa8 <HAL_PWREx_ConfigSupply+0x70>)
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f003 0307 	and.w	r3, r3, #7
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	429a      	cmp	r2, r3
 800da58:	d001      	beq.n	800da5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e01f      	b.n	800da9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	e01d      	b.n	800da9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800da62:	4b11      	ldr	r3, [pc, #68]	@ (800daa8 <HAL_PWREx_ConfigSupply+0x70>)
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	f023 0207 	bic.w	r2, r3, #7
 800da6a:	490f      	ldr	r1, [pc, #60]	@ (800daa8 <HAL_PWREx_ConfigSupply+0x70>)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4313      	orrs	r3, r2
 800da70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800da72:	f7fa f963 	bl	8007d3c <HAL_GetTick>
 800da76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da78:	e009      	b.n	800da8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800da7a:	f7fa f95f 	bl	8007d3c <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da88:	d901      	bls.n	800da8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	e007      	b.n	800da9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800da8e:	4b06      	ldr	r3, [pc, #24]	@ (800daa8 <HAL_PWREx_ConfigSupply+0x70>)
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da9a:	d1ee      	bne.n	800da7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	58024800 	.word	0x58024800

0800daac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800daac:	b480      	push	{r7}
 800daae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800dab0:	4b05      	ldr	r3, [pc, #20]	@ (800dac8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	4a04      	ldr	r2, [pc, #16]	@ (800dac8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800daba:	60d3      	str	r3, [r2, #12]
}
 800dabc:	bf00      	nop
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	58024800 	.word	0x58024800

0800dacc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08c      	sub	sp, #48	@ 0x30
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e3c8      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 8087 	beq.w	800dbfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800daec:	4b88      	ldr	r3, [pc, #544]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800daf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800daf6:	4b86      	ldr	r3, [pc, #536]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800daf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafe:	2b10      	cmp	r3, #16
 800db00:	d007      	beq.n	800db12 <HAL_RCC_OscConfig+0x46>
 800db02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db04:	2b18      	cmp	r3, #24
 800db06:	d110      	bne.n	800db2a <HAL_RCC_OscConfig+0x5e>
 800db08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0a:	f003 0303 	and.w	r3, r3, #3
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d10b      	bne.n	800db2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db12:	4b7f      	ldr	r3, [pc, #508]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d06c      	beq.n	800dbf8 <HAL_RCC_OscConfig+0x12c>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d168      	bne.n	800dbf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e3a2      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db32:	d106      	bne.n	800db42 <HAL_RCC_OscConfig+0x76>
 800db34:	4b76      	ldr	r3, [pc, #472]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a75      	ldr	r2, [pc, #468]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db3e:	6013      	str	r3, [r2, #0]
 800db40:	e02e      	b.n	800dba0 <HAL_RCC_OscConfig+0xd4>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10c      	bne.n	800db64 <HAL_RCC_OscConfig+0x98>
 800db4a:	4b71      	ldr	r3, [pc, #452]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a70      	ldr	r2, [pc, #448]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	4b6e      	ldr	r3, [pc, #440]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a6d      	ldr	r2, [pc, #436]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	e01d      	b.n	800dba0 <HAL_RCC_OscConfig+0xd4>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800db6c:	d10c      	bne.n	800db88 <HAL_RCC_OscConfig+0xbc>
 800db6e:	4b68      	ldr	r3, [pc, #416]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a67      	ldr	r2, [pc, #412]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	4b65      	ldr	r3, [pc, #404]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a64      	ldr	r2, [pc, #400]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	e00b      	b.n	800dba0 <HAL_RCC_OscConfig+0xd4>
 800db88:	4b61      	ldr	r3, [pc, #388]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a60      	ldr	r2, [pc, #384]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800db92:	6013      	str	r3, [r2, #0]
 800db94:	4b5e      	ldr	r3, [pc, #376]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a5d      	ldr	r2, [pc, #372]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800db9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d013      	beq.n	800dbd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dba8:	f7fa f8c8 	bl	8007d3c <HAL_GetTick>
 800dbac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dbae:	e008      	b.n	800dbc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbb0:	f7fa f8c4 	bl	8007d3c <HAL_GetTick>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	2b64      	cmp	r3, #100	@ 0x64
 800dbbc:	d901      	bls.n	800dbc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e356      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dbc2:	4b53      	ldr	r3, [pc, #332]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d0f0      	beq.n	800dbb0 <HAL_RCC_OscConfig+0xe4>
 800dbce:	e014      	b.n	800dbfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd0:	f7fa f8b4 	bl	8007d3c <HAL_GetTick>
 800dbd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbd6:	e008      	b.n	800dbea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbd8:	f7fa f8b0 	bl	8007d3c <HAL_GetTick>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	2b64      	cmp	r3, #100	@ 0x64
 800dbe4:	d901      	bls.n	800dbea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e342      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbea:	4b49      	ldr	r3, [pc, #292]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1f0      	bne.n	800dbd8 <HAL_RCC_OscConfig+0x10c>
 800dbf6:	e000      	b.n	800dbfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f003 0302 	and.w	r3, r3, #2
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 808c 	beq.w	800dd20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc08:	4b41      	ldr	r3, [pc, #260]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc12:	4b3f      	ldr	r3, [pc, #252]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d007      	beq.n	800dc2e <HAL_RCC_OscConfig+0x162>
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	2b18      	cmp	r3, #24
 800dc22:	d137      	bne.n	800dc94 <HAL_RCC_OscConfig+0x1c8>
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d132      	bne.n	800dc94 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc2e:	4b38      	ldr	r3, [pc, #224]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f003 0304 	and.w	r3, r3, #4
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d005      	beq.n	800dc46 <HAL_RCC_OscConfig+0x17a>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e314      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dc46:	4b32      	ldr	r3, [pc, #200]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f023 0219 	bic.w	r2, r3, #25
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	492f      	ldr	r1, [pc, #188]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc54:	4313      	orrs	r3, r2
 800dc56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc58:	f7fa f870 	bl	8007d3c <HAL_GetTick>
 800dc5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc5e:	e008      	b.n	800dc72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc60:	f7fa f86c 	bl	8007d3c <HAL_GetTick>
 800dc64:	4602      	mov	r2, r0
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d901      	bls.n	800dc72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	e2fe      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc72:	4b27      	ldr	r3, [pc, #156]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f003 0304 	and.w	r3, r3, #4
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d0f0      	beq.n	800dc60 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc7e:	4b24      	ldr	r3, [pc, #144]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	061b      	lsls	r3, r3, #24
 800dc8c:	4920      	ldr	r1, [pc, #128]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc92:	e045      	b.n	800dd20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d026      	beq.n	800dcea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dc9c:	4b1c      	ldr	r3, [pc, #112]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f023 0219 	bic.w	r2, r3, #25
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	4919      	ldr	r1, [pc, #100]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcae:	f7fa f845 	bl	8007d3c <HAL_GetTick>
 800dcb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcb4:	e008      	b.n	800dcc8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dcb6:	f7fa f841 	bl	8007d3c <HAL_GetTick>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	d901      	bls.n	800dcc8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800dcc4:	2303      	movs	r3, #3
 800dcc6:	e2d3      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcc8:	4b11      	ldr	r3, [pc, #68]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f003 0304 	and.w	r3, r3, #4
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d0f0      	beq.n	800dcb6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcd4:	4b0e      	ldr	r3, [pc, #56]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	061b      	lsls	r3, r3, #24
 800dce2:	490b      	ldr	r1, [pc, #44]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dce4:	4313      	orrs	r3, r2
 800dce6:	604b      	str	r3, [r1, #4]
 800dce8:	e01a      	b.n	800dd20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dcea:	4b09      	ldr	r3, [pc, #36]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a08      	ldr	r2, [pc, #32]	@ (800dd10 <HAL_RCC_OscConfig+0x244>)
 800dcf0:	f023 0301 	bic.w	r3, r3, #1
 800dcf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf6:	f7fa f821 	bl	8007d3c <HAL_GetTick>
 800dcfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dcfc:	e00a      	b.n	800dd14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dcfe:	f7fa f81d 	bl	8007d3c <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d903      	bls.n	800dd14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	e2af      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
 800dd10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd14:	4b96      	ldr	r3, [pc, #600]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f003 0304 	and.w	r3, r3, #4
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d1ee      	bne.n	800dcfe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f003 0310 	and.w	r3, r3, #16
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d06a      	beq.n	800de02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd2c:	4b90      	ldr	r3, [pc, #576]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd36:	4b8e      	ldr	r3, [pc, #568]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	2b08      	cmp	r3, #8
 800dd40:	d007      	beq.n	800dd52 <HAL_RCC_OscConfig+0x286>
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	2b18      	cmp	r3, #24
 800dd46:	d11b      	bne.n	800dd80 <HAL_RCC_OscConfig+0x2b4>
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d116      	bne.n	800dd80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dd52:	4b87      	ldr	r3, [pc, #540]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <HAL_RCC_OscConfig+0x29e>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	69db      	ldr	r3, [r3, #28]
 800dd62:	2b80      	cmp	r3, #128	@ 0x80
 800dd64:	d001      	beq.n	800dd6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e282      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dd6a:	4b81      	ldr	r3, [pc, #516]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	061b      	lsls	r3, r3, #24
 800dd78:	497d      	ldr	r1, [pc, #500]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dd7e:	e040      	b.n	800de02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	69db      	ldr	r3, [r3, #28]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d023      	beq.n	800ddd0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dd88:	4b79      	ldr	r3, [pc, #484]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a78      	ldr	r2, [pc, #480]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd94:	f7f9 ffd2 	bl	8007d3c <HAL_GetTick>
 800dd98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dd9a:	e008      	b.n	800ddae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dd9c:	f7f9 ffce 	bl	8007d3c <HAL_GetTick>
 800dda0:	4602      	mov	r2, r0
 800dda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d901      	bls.n	800ddae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e260      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ddae:	4b70      	ldr	r3, [pc, #448]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0f0      	beq.n	800dd9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddba:	4b6d      	ldr	r3, [pc, #436]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	061b      	lsls	r3, r3, #24
 800ddc8:	4969      	ldr	r1, [pc, #420]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	60cb      	str	r3, [r1, #12]
 800ddce:	e018      	b.n	800de02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ddd0:	4b67      	ldr	r3, [pc, #412]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a66      	ldr	r2, [pc, #408]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dddc:	f7f9 ffae 	bl	8007d3c <HAL_GetTick>
 800dde0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dde2:	e008      	b.n	800ddf6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dde4:	f7f9 ffaa 	bl	8007d3c <HAL_GetTick>
 800dde8:	4602      	mov	r2, r0
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d901      	bls.n	800ddf6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ddf2:	2303      	movs	r3, #3
 800ddf4:	e23c      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ddf6:	4b5e      	ldr	r3, [pc, #376]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1f0      	bne.n	800dde4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f003 0308 	and.w	r3, r3, #8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d036      	beq.n	800de7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d019      	beq.n	800de4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800de16:	4b56      	ldr	r3, [pc, #344]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de1a:	4a55      	ldr	r2, [pc, #340]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de1c:	f043 0301 	orr.w	r3, r3, #1
 800de20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de22:	f7f9 ff8b 	bl	8007d3c <HAL_GetTick>
 800de26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800de28:	e008      	b.n	800de3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de2a:	f7f9 ff87 	bl	8007d3c <HAL_GetTick>
 800de2e:	4602      	mov	r2, r0
 800de30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	2b02      	cmp	r3, #2
 800de36:	d901      	bls.n	800de3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800de38:	2303      	movs	r3, #3
 800de3a:	e219      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800de3c:	4b4c      	ldr	r3, [pc, #304]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d0f0      	beq.n	800de2a <HAL_RCC_OscConfig+0x35e>
 800de48:	e018      	b.n	800de7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800de4a:	4b49      	ldr	r3, [pc, #292]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de4e:	4a48      	ldr	r2, [pc, #288]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de50:	f023 0301 	bic.w	r3, r3, #1
 800de54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de56:	f7f9 ff71 	bl	8007d3c <HAL_GetTick>
 800de5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800de5c:	e008      	b.n	800de70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de5e:	f7f9 ff6d 	bl	8007d3c <HAL_GetTick>
 800de62:	4602      	mov	r2, r0
 800de64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d901      	bls.n	800de70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800de6c:	2303      	movs	r3, #3
 800de6e:	e1ff      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800de70:	4b3f      	ldr	r3, [pc, #252]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de74:	f003 0302 	and.w	r3, r3, #2
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1f0      	bne.n	800de5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f003 0320 	and.w	r3, r3, #32
 800de84:	2b00      	cmp	r3, #0
 800de86:	d036      	beq.n	800def6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d019      	beq.n	800dec4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800de90:	4b37      	ldr	r3, [pc, #220]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a36      	ldr	r2, [pc, #216]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800de96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800de9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800de9c:	f7f9 ff4e 	bl	8007d3c <HAL_GetTick>
 800dea0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dea2:	e008      	b.n	800deb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dea4:	f7f9 ff4a 	bl	8007d3c <HAL_GetTick>
 800dea8:	4602      	mov	r2, r0
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d901      	bls.n	800deb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800deb2:	2303      	movs	r3, #3
 800deb4:	e1dc      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800deb6:	4b2e      	ldr	r3, [pc, #184]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d0f0      	beq.n	800dea4 <HAL_RCC_OscConfig+0x3d8>
 800dec2:	e018      	b.n	800def6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dec4:	4b2a      	ldr	r3, [pc, #168]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a29      	ldr	r2, [pc, #164]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800deca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dece:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ded0:	f7f9 ff34 	bl	8007d3c <HAL_GetTick>
 800ded4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ded6:	e008      	b.n	800deea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ded8:	f7f9 ff30 	bl	8007d3c <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee0:	1ad3      	subs	r3, r2, r3
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d901      	bls.n	800deea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e1c2      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800deea:	4b21      	ldr	r3, [pc, #132]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1f0      	bne.n	800ded8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0304 	and.w	r3, r3, #4
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 8086 	beq.w	800e010 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800df04:	4b1b      	ldr	r3, [pc, #108]	@ (800df74 <HAL_RCC_OscConfig+0x4a8>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a1a      	ldr	r2, [pc, #104]	@ (800df74 <HAL_RCC_OscConfig+0x4a8>)
 800df0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800df10:	f7f9 ff14 	bl	8007d3c <HAL_GetTick>
 800df14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df16:	e008      	b.n	800df2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df18:	f7f9 ff10 	bl	8007d3c <HAL_GetTick>
 800df1c:	4602      	mov	r2, r0
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	2b64      	cmp	r3, #100	@ 0x64
 800df24:	d901      	bls.n	800df2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e1a2      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800df2a:	4b12      	ldr	r3, [pc, #72]	@ (800df74 <HAL_RCC_OscConfig+0x4a8>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0f0      	beq.n	800df18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d106      	bne.n	800df4c <HAL_RCC_OscConfig+0x480>
 800df3e:	4b0c      	ldr	r3, [pc, #48]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df42:	4a0b      	ldr	r2, [pc, #44]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df44:	f043 0301 	orr.w	r3, r3, #1
 800df48:	6713      	str	r3, [r2, #112]	@ 0x70
 800df4a:	e032      	b.n	800dfb2 <HAL_RCC_OscConfig+0x4e6>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d111      	bne.n	800df78 <HAL_RCC_OscConfig+0x4ac>
 800df54:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df58:	4a05      	ldr	r2, [pc, #20]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df5a:	f023 0301 	bic.w	r3, r3, #1
 800df5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800df60:	4b03      	ldr	r3, [pc, #12]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df64:	4a02      	ldr	r2, [pc, #8]	@ (800df70 <HAL_RCC_OscConfig+0x4a4>)
 800df66:	f023 0304 	bic.w	r3, r3, #4
 800df6a:	6713      	str	r3, [r2, #112]	@ 0x70
 800df6c:	e021      	b.n	800dfb2 <HAL_RCC_OscConfig+0x4e6>
 800df6e:	bf00      	nop
 800df70:	58024400 	.word	0x58024400
 800df74:	58024800 	.word	0x58024800
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	2b05      	cmp	r3, #5
 800df7e:	d10c      	bne.n	800df9a <HAL_RCC_OscConfig+0x4ce>
 800df80:	4b83      	ldr	r3, [pc, #524]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800df82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df84:	4a82      	ldr	r2, [pc, #520]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800df86:	f043 0304 	orr.w	r3, r3, #4
 800df8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800df8c:	4b80      	ldr	r3, [pc, #512]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800df8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df90:	4a7f      	ldr	r2, [pc, #508]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	6713      	str	r3, [r2, #112]	@ 0x70
 800df98:	e00b      	b.n	800dfb2 <HAL_RCC_OscConfig+0x4e6>
 800df9a:	4b7d      	ldr	r3, [pc, #500]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800df9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df9e:	4a7c      	ldr	r2, [pc, #496]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800dfa0:	f023 0301 	bic.w	r3, r3, #1
 800dfa4:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfa6:	4b7a      	ldr	r3, [pc, #488]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800dfa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfaa:	4a79      	ldr	r2, [pc, #484]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800dfac:	f023 0304 	bic.w	r3, r3, #4
 800dfb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	689b      	ldr	r3, [r3, #8]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d015      	beq.n	800dfe6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfba:	f7f9 febf 	bl	8007d3c <HAL_GetTick>
 800dfbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfc0:	e00a      	b.n	800dfd8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfc2:	f7f9 febb 	bl	8007d3c <HAL_GetTick>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d901      	bls.n	800dfd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e14b      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfd8:	4b6d      	ldr	r3, [pc, #436]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800dfda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfdc:	f003 0302 	and.w	r3, r3, #2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d0ee      	beq.n	800dfc2 <HAL_RCC_OscConfig+0x4f6>
 800dfe4:	e014      	b.n	800e010 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfe6:	f7f9 fea9 	bl	8007d3c <HAL_GetTick>
 800dfea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dfec:	e00a      	b.n	800e004 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfee:	f7f9 fea5 	bl	8007d3c <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d901      	bls.n	800e004 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800e000:	2303      	movs	r3, #3
 800e002:	e135      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e004:	4b62      	ldr	r3, [pc, #392]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e008:	f003 0302 	and.w	r3, r3, #2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1ee      	bne.n	800dfee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e014:	2b00      	cmp	r3, #0
 800e016:	f000 812a 	beq.w	800e26e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e01a:	4b5d      	ldr	r3, [pc, #372]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e022:	2b18      	cmp	r3, #24
 800e024:	f000 80ba 	beq.w	800e19c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	f040 8095 	bne.w	800e15c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e032:	4b57      	ldr	r3, [pc, #348]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a56      	ldr	r2, [pc, #344]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e03c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e03e:	f7f9 fe7d 	bl	8007d3c <HAL_GetTick>
 800e042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e044:	e008      	b.n	800e058 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e046:	f7f9 fe79 	bl	8007d3c <HAL_GetTick>
 800e04a:	4602      	mov	r2, r0
 800e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	2b02      	cmp	r3, #2
 800e052:	d901      	bls.n	800e058 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800e054:	2303      	movs	r3, #3
 800e056:	e10b      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e058:	4b4d      	ldr	r3, [pc, #308]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1f0      	bne.n	800e046 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e064:	4b4a      	ldr	r3, [pc, #296]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e068:	4b4a      	ldr	r3, [pc, #296]	@ (800e194 <HAL_RCC_OscConfig+0x6c8>)
 800e06a:	4013      	ands	r3, r2
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e074:	0112      	lsls	r2, r2, #4
 800e076:	430a      	orrs	r2, r1
 800e078:	4945      	ldr	r1, [pc, #276]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	628b      	str	r3, [r1, #40]	@ 0x28
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e082:	3b01      	subs	r3, #1
 800e084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e08c:	3b01      	subs	r3, #1
 800e08e:	025b      	lsls	r3, r3, #9
 800e090:	b29b      	uxth	r3, r3
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e098:	3b01      	subs	r3, #1
 800e09a:	041b      	lsls	r3, r3, #16
 800e09c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	061b      	lsls	r3, r3, #24
 800e0aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e0ae:	4938      	ldr	r1, [pc, #224]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e0b4:	4b36      	ldr	r3, [pc, #216]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b8:	4a35      	ldr	r2, [pc, #212]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0ba:	f023 0301 	bic.w	r3, r3, #1
 800e0be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e0c0:	4b33      	ldr	r3, [pc, #204]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e0c4:	4b34      	ldr	r3, [pc, #208]	@ (800e198 <HAL_RCC_OscConfig+0x6cc>)
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e0cc:	00d2      	lsls	r2, r2, #3
 800e0ce:	4930      	ldr	r1, [pc, #192]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e0d4:	4b2e      	ldr	r3, [pc, #184]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d8:	f023 020c 	bic.w	r2, r3, #12
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0e0:	492b      	ldr	r1, [pc, #172]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e0e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ea:	f023 0202 	bic.w	r2, r3, #2
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f2:	4927      	ldr	r1, [pc, #156]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e0f8:	4b25      	ldr	r3, [pc, #148]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fc:	4a24      	ldr	r2, [pc, #144]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e0fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e104:	4b22      	ldr	r3, [pc, #136]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e108:	4a21      	ldr	r2, [pc, #132]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e10a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e10e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e110:	4b1f      	ldr	r3, [pc, #124]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e114:	4a1e      	ldr	r2, [pc, #120]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e11a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e11c:	4b1c      	ldr	r3, [pc, #112]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e120:	4a1b      	ldr	r2, [pc, #108]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e128:	4b19      	ldr	r3, [pc, #100]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a18      	ldr	r2, [pc, #96]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e12e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e134:	f7f9 fe02 	bl	8007d3c <HAL_GetTick>
 800e138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e13a:	e008      	b.n	800e14e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e13c:	f7f9 fdfe 	bl	8007d3c <HAL_GetTick>
 800e140:	4602      	mov	r2, r0
 800e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	2b02      	cmp	r3, #2
 800e148:	d901      	bls.n	800e14e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e090      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e14e:	4b10      	ldr	r3, [pc, #64]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0f0      	beq.n	800e13c <HAL_RCC_OscConfig+0x670>
 800e15a:	e088      	b.n	800e26e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e15c:	4b0c      	ldr	r3, [pc, #48]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0b      	ldr	r2, [pc, #44]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e168:	f7f9 fde8 	bl	8007d3c <HAL_GetTick>
 800e16c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e16e:	e008      	b.n	800e182 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e170:	f7f9 fde4 	bl	8007d3c <HAL_GetTick>
 800e174:	4602      	mov	r2, r0
 800e176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d901      	bls.n	800e182 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800e17e:	2303      	movs	r3, #3
 800e180:	e076      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e182:	4b03      	ldr	r3, [pc, #12]	@ (800e190 <HAL_RCC_OscConfig+0x6c4>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1f0      	bne.n	800e170 <HAL_RCC_OscConfig+0x6a4>
 800e18e:	e06e      	b.n	800e26e <HAL_RCC_OscConfig+0x7a2>
 800e190:	58024400 	.word	0x58024400
 800e194:	fffffc0c 	.word	0xfffffc0c
 800e198:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e19c:	4b36      	ldr	r3, [pc, #216]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e1a2:	4b35      	ldr	r3, [pc, #212]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d031      	beq.n	800e214 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	f003 0203 	and.w	r2, r3, #3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d12a      	bne.n	800e214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	091b      	lsrs	r3, r3, #4
 800e1c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d122      	bne.n	800e214 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d11a      	bne.n	800e214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	0a5b      	lsrs	r3, r3, #9
 800e1e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d111      	bne.n	800e214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	0c1b      	lsrs	r3, r3, #16
 800e1f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d108      	bne.n	800e214 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	0e1b      	lsrs	r3, r3, #24
 800e206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e20e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e210:	429a      	cmp	r2, r3
 800e212:	d001      	beq.n	800e218 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	e02b      	b.n	800e270 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e218:	4b17      	ldr	r3, [pc, #92]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21c:	08db      	lsrs	r3, r3, #3
 800e21e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e222:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d01f      	beq.n	800e26e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e22e:	4b12      	ldr	r3, [pc, #72]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e232:	4a11      	ldr	r2, [pc, #68]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e234:	f023 0301 	bic.w	r3, r3, #1
 800e238:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e23a:	f7f9 fd7f 	bl	8007d3c <HAL_GetTick>
 800e23e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e240:	bf00      	nop
 800e242:	f7f9 fd7b 	bl	8007d3c <HAL_GetTick>
 800e246:	4602      	mov	r2, r0
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d0f9      	beq.n	800e242 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e24e:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e252:	4b0a      	ldr	r3, [pc, #40]	@ (800e27c <HAL_RCC_OscConfig+0x7b0>)
 800e254:	4013      	ands	r3, r2
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e25a:	00d2      	lsls	r2, r2, #3
 800e25c:	4906      	ldr	r1, [pc, #24]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e262:	4b05      	ldr	r3, [pc, #20]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e266:	4a04      	ldr	r2, [pc, #16]	@ (800e278 <HAL_RCC_OscConfig+0x7ac>)
 800e268:	f043 0301 	orr.w	r3, r3, #1
 800e26c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3730      	adds	r7, #48	@ 0x30
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	58024400 	.word	0x58024400
 800e27c:	ffff0007 	.word	0xffff0007

0800e280 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e290:	2301      	movs	r3, #1
 800e292:	e19c      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e294:	4b8a      	ldr	r3, [pc, #552]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 030f 	and.w	r3, r3, #15
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d910      	bls.n	800e2c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2a2:	4b87      	ldr	r3, [pc, #540]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f023 020f 	bic.w	r2, r3, #15
 800e2aa:	4985      	ldr	r1, [pc, #532]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2b2:	4b83      	ldr	r3, [pc, #524]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f003 030f 	and.w	r3, r3, #15
 800e2ba:	683a      	ldr	r2, [r7, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d001      	beq.n	800e2c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e184      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0304 	and.w	r3, r3, #4
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d010      	beq.n	800e2f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	691a      	ldr	r2, [r3, #16]
 800e2d4:	4b7b      	ldr	r3, [pc, #492]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d908      	bls.n	800e2f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e2e0:	4b78      	ldr	r3, [pc, #480]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	4975      	ldr	r1, [pc, #468]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d010      	beq.n	800e320 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	695a      	ldr	r2, [r3, #20]
 800e302:	4b70      	ldr	r3, [pc, #448]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d908      	bls.n	800e320 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e30e:	4b6d      	ldr	r3, [pc, #436]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e310:	69db      	ldr	r3, [r3, #28]
 800e312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	496a      	ldr	r1, [pc, #424]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e31c:	4313      	orrs	r3, r2
 800e31e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f003 0310 	and.w	r3, r3, #16
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d010      	beq.n	800e34e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699a      	ldr	r2, [r3, #24]
 800e330:	4b64      	ldr	r3, [pc, #400]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e332:	69db      	ldr	r3, [r3, #28]
 800e334:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e338:	429a      	cmp	r2, r3
 800e33a:	d908      	bls.n	800e34e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e33c:	4b61      	ldr	r3, [pc, #388]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e33e:	69db      	ldr	r3, [r3, #28]
 800e340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	699b      	ldr	r3, [r3, #24]
 800e348:	495e      	ldr	r1, [pc, #376]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e34a:	4313      	orrs	r3, r2
 800e34c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f003 0320 	and.w	r3, r3, #32
 800e356:	2b00      	cmp	r3, #0
 800e358:	d010      	beq.n	800e37c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	69da      	ldr	r2, [r3, #28]
 800e35e:	4b59      	ldr	r3, [pc, #356]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e360:	6a1b      	ldr	r3, [r3, #32]
 800e362:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e366:	429a      	cmp	r2, r3
 800e368:	d908      	bls.n	800e37c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e36a:	4b56      	ldr	r3, [pc, #344]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	4953      	ldr	r1, [pc, #332]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e378:	4313      	orrs	r3, r2
 800e37a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f003 0302 	and.w	r3, r3, #2
 800e384:	2b00      	cmp	r3, #0
 800e386:	d010      	beq.n	800e3aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68da      	ldr	r2, [r3, #12]
 800e38c:	4b4d      	ldr	r3, [pc, #308]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e38e:	699b      	ldr	r3, [r3, #24]
 800e390:	f003 030f 	and.w	r3, r3, #15
 800e394:	429a      	cmp	r2, r3
 800e396:	d908      	bls.n	800e3aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e398:	4b4a      	ldr	r3, [pc, #296]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	f023 020f 	bic.w	r2, r3, #15
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	4947      	ldr	r1, [pc, #284]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d055      	beq.n	800e462 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e3b6:	4b43      	ldr	r3, [pc, #268]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	4940      	ldr	r1, [pc, #256]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	2b02      	cmp	r3, #2
 800e3ce:	d107      	bne.n	800e3e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e3d0:	4b3c      	ldr	r3, [pc, #240]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d121      	bne.n	800e420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e0f6      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	2b03      	cmp	r3, #3
 800e3e6:	d107      	bne.n	800e3f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e3e8:	4b36      	ldr	r3, [pc, #216]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d115      	bne.n	800e420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e0ea      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d107      	bne.n	800e410 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e400:	4b30      	ldr	r3, [pc, #192]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d109      	bne.n	800e420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e0de      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e410:	4b2c      	ldr	r3, [pc, #176]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f003 0304 	and.w	r3, r3, #4
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e41c:	2301      	movs	r3, #1
 800e41e:	e0d6      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e420:	4b28      	ldr	r3, [pc, #160]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f023 0207 	bic.w	r2, r3, #7
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	4925      	ldr	r1, [pc, #148]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e42e:	4313      	orrs	r3, r2
 800e430:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e432:	f7f9 fc83 	bl	8007d3c <HAL_GetTick>
 800e436:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e438:	e00a      	b.n	800e450 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e43a:	f7f9 fc7f 	bl	8007d3c <HAL_GetTick>
 800e43e:	4602      	mov	r2, r0
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e448:	4293      	cmp	r3, r2
 800e44a:	d901      	bls.n	800e450 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e0be      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e450:	4b1c      	ldr	r3, [pc, #112]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	429a      	cmp	r2, r3
 800e460:	d1eb      	bne.n	800e43a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d010      	beq.n	800e490 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	68da      	ldr	r2, [r3, #12]
 800e472:	4b14      	ldr	r3, [pc, #80]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	f003 030f 	and.w	r3, r3, #15
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d208      	bcs.n	800e490 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e47e:	4b11      	ldr	r3, [pc, #68]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	f023 020f 	bic.w	r2, r3, #15
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	490e      	ldr	r1, [pc, #56]	@ (800e4c4 <HAL_RCC_ClockConfig+0x244>)
 800e48c:	4313      	orrs	r3, r2
 800e48e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e490:	4b0b      	ldr	r3, [pc, #44]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 030f 	and.w	r3, r3, #15
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d214      	bcs.n	800e4c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e49e:	4b08      	ldr	r3, [pc, #32]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f023 020f 	bic.w	r2, r3, #15
 800e4a6:	4906      	ldr	r1, [pc, #24]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4ae:	4b04      	ldr	r3, [pc, #16]	@ (800e4c0 <HAL_RCC_ClockConfig+0x240>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f003 030f 	and.w	r3, r3, #15
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d005      	beq.n	800e4c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e086      	b.n	800e5ce <HAL_RCC_ClockConfig+0x34e>
 800e4c0:	52002000 	.word	0x52002000
 800e4c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f003 0304 	and.w	r3, r3, #4
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d010      	beq.n	800e4f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	691a      	ldr	r2, [r3, #16]
 800e4d8:	4b3f      	ldr	r3, [pc, #252]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d208      	bcs.n	800e4f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e4e4:	4b3c      	ldr	r3, [pc, #240]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e4e6:	699b      	ldr	r3, [r3, #24]
 800e4e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	4939      	ldr	r1, [pc, #228]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f003 0308 	and.w	r3, r3, #8
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d010      	beq.n	800e524 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	695a      	ldr	r2, [r3, #20]
 800e506:	4b34      	ldr	r3, [pc, #208]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e50e:	429a      	cmp	r2, r3
 800e510:	d208      	bcs.n	800e524 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e512:	4b31      	ldr	r3, [pc, #196]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e514:	69db      	ldr	r3, [r3, #28]
 800e516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	492e      	ldr	r1, [pc, #184]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e520:	4313      	orrs	r3, r2
 800e522:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 0310 	and.w	r3, r3, #16
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d010      	beq.n	800e552 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	699a      	ldr	r2, [r3, #24]
 800e534:	4b28      	ldr	r3, [pc, #160]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d208      	bcs.n	800e552 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e540:	4b25      	ldr	r3, [pc, #148]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	4922      	ldr	r1, [pc, #136]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e54e:	4313      	orrs	r3, r2
 800e550:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d010      	beq.n	800e580 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	69da      	ldr	r2, [r3, #28]
 800e562:	4b1d      	ldr	r3, [pc, #116]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d208      	bcs.n	800e580 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e56e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	69db      	ldr	r3, [r3, #28]
 800e57a:	4917      	ldr	r1, [pc, #92]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e57c:	4313      	orrs	r3, r2
 800e57e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e580:	f000 f834 	bl	800e5ec <HAL_RCC_GetSysClockFreq>
 800e584:	4602      	mov	r2, r0
 800e586:	4b14      	ldr	r3, [pc, #80]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	0a1b      	lsrs	r3, r3, #8
 800e58c:	f003 030f 	and.w	r3, r3, #15
 800e590:	4912      	ldr	r1, [pc, #72]	@ (800e5dc <HAL_RCC_ClockConfig+0x35c>)
 800e592:	5ccb      	ldrb	r3, [r1, r3]
 800e594:	f003 031f 	and.w	r3, r3, #31
 800e598:	fa22 f303 	lsr.w	r3, r2, r3
 800e59c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e59e:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d8 <HAL_RCC_ClockConfig+0x358>)
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	f003 030f 	and.w	r3, r3, #15
 800e5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800e5dc <HAL_RCC_ClockConfig+0x35c>)
 800e5a8:	5cd3      	ldrb	r3, [r2, r3]
 800e5aa:	f003 031f 	and.w	r3, r3, #31
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800e5b4:	4a0a      	ldr	r2, [pc, #40]	@ (800e5e0 <HAL_RCC_ClockConfig+0x360>)
 800e5b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e5b8:	4a0a      	ldr	r2, [pc, #40]	@ (800e5e4 <HAL_RCC_ClockConfig+0x364>)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e5be:	4b0a      	ldr	r3, [pc, #40]	@ (800e5e8 <HAL_RCC_ClockConfig+0x368>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f9 fb70 	bl	8007ca8 <HAL_InitTick>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	58024400 	.word	0x58024400
 800e5dc:	0801e39c 	.word	0x0801e39c
 800e5e0:	24000004 	.word	0x24000004
 800e5e4:	24000000 	.word	0x24000000
 800e5e8:	24000038 	.word	0x24000038

0800e5ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b089      	sub	sp, #36	@ 0x24
 800e5f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e5f2:	4bb3      	ldr	r3, [pc, #716]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e5fa:	2b18      	cmp	r3, #24
 800e5fc:	f200 8155 	bhi.w	800e8aa <HAL_RCC_GetSysClockFreq+0x2be>
 800e600:	a201      	add	r2, pc, #4	@ (adr r2, 800e608 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e606:	bf00      	nop
 800e608:	0800e66d 	.word	0x0800e66d
 800e60c:	0800e8ab 	.word	0x0800e8ab
 800e610:	0800e8ab 	.word	0x0800e8ab
 800e614:	0800e8ab 	.word	0x0800e8ab
 800e618:	0800e8ab 	.word	0x0800e8ab
 800e61c:	0800e8ab 	.word	0x0800e8ab
 800e620:	0800e8ab 	.word	0x0800e8ab
 800e624:	0800e8ab 	.word	0x0800e8ab
 800e628:	0800e693 	.word	0x0800e693
 800e62c:	0800e8ab 	.word	0x0800e8ab
 800e630:	0800e8ab 	.word	0x0800e8ab
 800e634:	0800e8ab 	.word	0x0800e8ab
 800e638:	0800e8ab 	.word	0x0800e8ab
 800e63c:	0800e8ab 	.word	0x0800e8ab
 800e640:	0800e8ab 	.word	0x0800e8ab
 800e644:	0800e8ab 	.word	0x0800e8ab
 800e648:	0800e699 	.word	0x0800e699
 800e64c:	0800e8ab 	.word	0x0800e8ab
 800e650:	0800e8ab 	.word	0x0800e8ab
 800e654:	0800e8ab 	.word	0x0800e8ab
 800e658:	0800e8ab 	.word	0x0800e8ab
 800e65c:	0800e8ab 	.word	0x0800e8ab
 800e660:	0800e8ab 	.word	0x0800e8ab
 800e664:	0800e8ab 	.word	0x0800e8ab
 800e668:	0800e69f 	.word	0x0800e69f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e66c:	4b94      	ldr	r3, [pc, #592]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f003 0320 	and.w	r3, r3, #32
 800e674:	2b00      	cmp	r3, #0
 800e676:	d009      	beq.n	800e68c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e678:	4b91      	ldr	r3, [pc, #580]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	08db      	lsrs	r3, r3, #3
 800e67e:	f003 0303 	and.w	r3, r3, #3
 800e682:	4a90      	ldr	r2, [pc, #576]	@ (800e8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e684:	fa22 f303 	lsr.w	r3, r2, r3
 800e688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e68a:	e111      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e68c:	4b8d      	ldr	r3, [pc, #564]	@ (800e8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e68e:	61bb      	str	r3, [r7, #24]
      break;
 800e690:	e10e      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e692:	4b8d      	ldr	r3, [pc, #564]	@ (800e8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e694:	61bb      	str	r3, [r7, #24]
      break;
 800e696:	e10b      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e698:	4b8c      	ldr	r3, [pc, #560]	@ (800e8cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e69a:	61bb      	str	r3, [r7, #24]
      break;
 800e69c:	e108      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e69e:	4b88      	ldr	r3, [pc, #544]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6a2:	f003 0303 	and.w	r3, r3, #3
 800e6a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e6a8:	4b85      	ldr	r3, [pc, #532]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ac:	091b      	lsrs	r3, r3, #4
 800e6ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e6b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e6b4:	4b82      	ldr	r3, [pc, #520]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e6be:	4b80      	ldr	r3, [pc, #512]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e6c2:	08db      	lsrs	r3, r3, #3
 800e6c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	fb02 f303 	mul.w	r3, r2, r3
 800e6ce:	ee07 3a90 	vmov	s15, r3
 800e6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 80e1 	beq.w	800e8a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	f000 8083 	beq.w	800e7f0 <HAL_RCC_GetSysClockFreq+0x204>
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	f200 80a1 	bhi.w	800e834 <HAL_RCC_GetSysClockFreq+0x248>
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d003      	beq.n	800e700 <HAL_RCC_GetSysClockFreq+0x114>
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d056      	beq.n	800e7ac <HAL_RCC_GetSysClockFreq+0x1c0>
 800e6fe:	e099      	b.n	800e834 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e700:	4b6f      	ldr	r3, [pc, #444]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d02d      	beq.n	800e768 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e70c:	4b6c      	ldr	r3, [pc, #432]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	08db      	lsrs	r3, r3, #3
 800e712:	f003 0303 	and.w	r3, r3, #3
 800e716:	4a6b      	ldr	r2, [pc, #428]	@ (800e8c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e718:	fa22 f303 	lsr.w	r3, r2, r3
 800e71c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	ee07 3a90 	vmov	s15, r3
 800e724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	ee07 3a90 	vmov	s15, r3
 800e72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e736:	4b62      	ldr	r3, [pc, #392]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e73e:	ee07 3a90 	vmov	s15, r3
 800e742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e746:	ed97 6a02 	vldr	s12, [r7, #8]
 800e74a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e762:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e766:	e087      	b.n	800e878 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	ee07 3a90 	vmov	s15, r3
 800e76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e772:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e8d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e77a:	4b51      	ldr	r3, [pc, #324]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e782:	ee07 3a90 	vmov	s15, r3
 800e786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e78a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e78e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e7aa:	e065      	b.n	800e878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	ee07 3a90 	vmov	s15, r3
 800e7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7be:	4b40      	ldr	r3, [pc, #256]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7c6:	ee07 3a90 	vmov	s15, r3
 800e7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e7ee:	e043      	b.n	800e878 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	ee07 3a90 	vmov	s15, r3
 800e7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e8dc <HAL_RCC_GetSysClockFreq+0x2f0>
 800e7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e802:	4b2f      	ldr	r3, [pc, #188]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e80a:	ee07 3a90 	vmov	s15, r3
 800e80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e812:	ed97 6a02 	vldr	s12, [r7, #8]
 800e816:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e832:	e021      	b.n	800e878 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	ee07 3a90 	vmov	s15, r3
 800e83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e83e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e8d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e846:	4b1e      	ldr	r3, [pc, #120]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e856:	ed97 6a02 	vldr	s12, [r7, #8]
 800e85a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e8d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e876:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e878:	4b11      	ldr	r3, [pc, #68]	@ (800e8c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e87c:	0a5b      	lsrs	r3, r3, #9
 800e87e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e882:	3301      	adds	r3, #1
 800e884:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	ee07 3a90 	vmov	s15, r3
 800e88c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e890:	edd7 6a07 	vldr	s13, [r7, #28]
 800e894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e89c:	ee17 3a90 	vmov	r3, s15
 800e8a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e8a2:	e005      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	61bb      	str	r3, [r7, #24]
      break;
 800e8a8:	e002      	b.n	800e8b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e8aa:	4b07      	ldr	r3, [pc, #28]	@ (800e8c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e8ac:	61bb      	str	r3, [r7, #24]
      break;
 800e8ae:	bf00      	nop
  }

  return sysclockfreq;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3724      	adds	r7, #36	@ 0x24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	58024400 	.word	0x58024400
 800e8c4:	03d09000 	.word	0x03d09000
 800e8c8:	003d0900 	.word	0x003d0900
 800e8cc:	016e3600 	.word	0x016e3600
 800e8d0:	46000000 	.word	0x46000000
 800e8d4:	4c742400 	.word	0x4c742400
 800e8d8:	4a742400 	.word	0x4a742400
 800e8dc:	4bb71b00 	.word	0x4bb71b00

0800e8e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e8e6:	f7ff fe81 	bl	800e5ec <HAL_RCC_GetSysClockFreq>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	4b10      	ldr	r3, [pc, #64]	@ (800e930 <HAL_RCC_GetHCLKFreq+0x50>)
 800e8ee:	699b      	ldr	r3, [r3, #24]
 800e8f0:	0a1b      	lsrs	r3, r3, #8
 800e8f2:	f003 030f 	and.w	r3, r3, #15
 800e8f6:	490f      	ldr	r1, [pc, #60]	@ (800e934 <HAL_RCC_GetHCLKFreq+0x54>)
 800e8f8:	5ccb      	ldrb	r3, [r1, r3]
 800e8fa:	f003 031f 	and.w	r3, r3, #31
 800e8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e902:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e904:	4b0a      	ldr	r3, [pc, #40]	@ (800e930 <HAL_RCC_GetHCLKFreq+0x50>)
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	f003 030f 	and.w	r3, r3, #15
 800e90c:	4a09      	ldr	r2, [pc, #36]	@ (800e934 <HAL_RCC_GetHCLKFreq+0x54>)
 800e90e:	5cd3      	ldrb	r3, [r2, r3]
 800e910:	f003 031f 	and.w	r3, r3, #31
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	fa22 f303 	lsr.w	r3, r2, r3
 800e91a:	4a07      	ldr	r2, [pc, #28]	@ (800e938 <HAL_RCC_GetHCLKFreq+0x58>)
 800e91c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e91e:	4a07      	ldr	r2, [pc, #28]	@ (800e93c <HAL_RCC_GetHCLKFreq+0x5c>)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e924:	4b04      	ldr	r3, [pc, #16]	@ (800e938 <HAL_RCC_GetHCLKFreq+0x58>)
 800e926:	681b      	ldr	r3, [r3, #0]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	58024400 	.word	0x58024400
 800e934:	0801e39c 	.word	0x0801e39c
 800e938:	24000004 	.word	0x24000004
 800e93c:	24000000 	.word	0x24000000

0800e940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e944:	f7ff ffcc 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 800e948:	4602      	mov	r2, r0
 800e94a:	4b06      	ldr	r3, [pc, #24]	@ (800e964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	091b      	lsrs	r3, r3, #4
 800e950:	f003 0307 	and.w	r3, r3, #7
 800e954:	4904      	ldr	r1, [pc, #16]	@ (800e968 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e956:	5ccb      	ldrb	r3, [r1, r3]
 800e958:	f003 031f 	and.w	r3, r3, #31
 800e95c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e960:	4618      	mov	r0, r3
 800e962:	bd80      	pop	{r7, pc}
 800e964:	58024400 	.word	0x58024400
 800e968:	0801e39c 	.word	0x0801e39c

0800e96c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e970:	f7ff ffb6 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 800e974:	4602      	mov	r2, r0
 800e976:	4b06      	ldr	r3, [pc, #24]	@ (800e990 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	0a1b      	lsrs	r3, r3, #8
 800e97c:	f003 0307 	and.w	r3, r3, #7
 800e980:	4904      	ldr	r1, [pc, #16]	@ (800e994 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e982:	5ccb      	ldrb	r3, [r1, r3]
 800e984:	f003 031f 	and.w	r3, r3, #31
 800e988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	58024400 	.word	0x58024400
 800e994:	0801e39c 	.word	0x0801e39c

0800e998 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e99c:	b0c6      	sub	sp, #280	@ 0x118
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e9bc:	2500      	movs	r5, #0
 800e9be:	ea54 0305 	orrs.w	r3, r4, r5
 800e9c2:	d049      	beq.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e9ce:	d02f      	beq.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e9d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e9d4:	d828      	bhi.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e9d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e9da:	d01a      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e9dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e9e0:	d822      	bhi.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e9e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9ea:	d007      	beq.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e9ec:	e01c      	b.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9ee:	4bab      	ldr	r3, [pc, #684]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f2:	4aaa      	ldr	r2, [pc, #680]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800e9f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e9f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9fa:	e01a      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea00:	3308      	adds	r3, #8
 800ea02:	2102      	movs	r1, #2
 800ea04:	4618      	mov	r0, r3
 800ea06:	f002 fa49 	bl	8010e9c <RCCEx_PLL2_Config>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ea10:	e00f      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea16:	3328      	adds	r3, #40	@ 0x28
 800ea18:	2102      	movs	r1, #2
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f002 faf0 	bl	8011000 <RCCEx_PLL3_Config>
 800ea20:	4603      	mov	r3, r0
 800ea22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ea26:	e004      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ea2e:	e000      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ea30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10a      	bne.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ea3a:	4b98      	ldr	r3, [pc, #608]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ea3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ea42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea48:	4a94      	ldr	r2, [pc, #592]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ea4a:	430b      	orrs	r3, r1
 800ea4c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ea4e:	e003      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ea58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ea64:	f04f 0900 	mov.w	r9, #0
 800ea68:	ea58 0309 	orrs.w	r3, r8, r9
 800ea6c:	d047      	beq.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ea6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea74:	2b04      	cmp	r3, #4
 800ea76:	d82a      	bhi.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ea78:	a201      	add	r2, pc, #4	@ (adr r2, 800ea80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ea7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea7e:	bf00      	nop
 800ea80:	0800ea95 	.word	0x0800ea95
 800ea84:	0800eaa3 	.word	0x0800eaa3
 800ea88:	0800eab9 	.word	0x0800eab9
 800ea8c:	0800ead7 	.word	0x0800ead7
 800ea90:	0800ead7 	.word	0x0800ead7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea94:	4b81      	ldr	r3, [pc, #516]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ea96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea98:	4a80      	ldr	r2, [pc, #512]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ea9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eaa0:	e01a      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f002 f9f6 	bl	8010e9c <RCCEx_PLL2_Config>
 800eab0:	4603      	mov	r3, r0
 800eab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eab6:	e00f      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eabc:	3328      	adds	r3, #40	@ 0x28
 800eabe:	2100      	movs	r1, #0
 800eac0:	4618      	mov	r0, r3
 800eac2:	f002 fa9d 	bl	8011000 <RCCEx_PLL3_Config>
 800eac6:	4603      	mov	r3, r0
 800eac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eacc:	e004      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ead4:	e000      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ead6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ead8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10a      	bne.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800eae0:	4b6e      	ldr	r3, [pc, #440]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eae4:	f023 0107 	bic.w	r1, r3, #7
 800eae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eaec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eaee:	4a6b      	ldr	r2, [pc, #428]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eaf0:	430b      	orrs	r3, r1
 800eaf2:	6513      	str	r3, [r2, #80]	@ 0x50
 800eaf4:	e003      	b.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eafa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb06:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800eb0a:	f04f 0b00 	mov.w	fp, #0
 800eb0e:	ea5a 030b 	orrs.w	r3, sl, fp
 800eb12:	d05b      	beq.n	800ebcc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800eb1c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800eb20:	d03b      	beq.n	800eb9a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800eb22:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800eb26:	d834      	bhi.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800eb28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb2c:	d037      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800eb2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb32:	d82e      	bhi.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800eb34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb38:	d033      	beq.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800eb3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb3e:	d828      	bhi.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800eb40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb44:	d01a      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800eb46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb4a:	d822      	bhi.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800eb50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb54:	d007      	beq.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800eb56:	e01c      	b.n	800eb92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb58:	4b50      	ldr	r3, [pc, #320]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb5c:	4a4f      	ldr	r2, [pc, #316]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800eb5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb64:	e01e      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f002 f994 	bl	8010e9c <RCCEx_PLL2_Config>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eb7a:	e013      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb80:	3328      	adds	r3, #40	@ 0x28
 800eb82:	2100      	movs	r1, #0
 800eb84:	4618      	mov	r0, r3
 800eb86:	f002 fa3b 	bl	8011000 <RCCEx_PLL3_Config>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb90:	e008      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800eb98:	e004      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800eb9a:	bf00      	nop
 800eb9c:	e002      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800eb9e:	bf00      	nop
 800eba0:	e000      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800eba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10b      	bne.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ebac:	4b3b      	ldr	r3, [pc, #236]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ebae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebb0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ebb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ebbc:	4a37      	ldr	r2, [pc, #220]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ebbe:	430b      	orrs	r3, r1
 800ebc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebc2:	e003      	b.n	800ebcc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ebc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ebcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ebd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ebdc:	2300      	movs	r3, #0
 800ebde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ebe2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	d05d      	beq.n	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ebec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ebf4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ebf8:	d03b      	beq.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ebfa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ebfe:	d834      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ec00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec04:	d037      	beq.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ec06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec0a:	d82e      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ec0c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec10:	d033      	beq.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ec12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec16:	d828      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ec18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec1c:	d01a      	beq.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ec1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec22:	d822      	bhi.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ec28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec2c:	d007      	beq.n	800ec3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ec2e:	e01c      	b.n	800ec6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec30:	4b1a      	ldr	r3, [pc, #104]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec34:	4a19      	ldr	r2, [pc, #100]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec3c:	e01e      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec42:	3308      	adds	r3, #8
 800ec44:	2100      	movs	r1, #0
 800ec46:	4618      	mov	r0, r3
 800ec48:	f002 f928 	bl	8010e9c <RCCEx_PLL2_Config>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ec52:	e013      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec58:	3328      	adds	r3, #40	@ 0x28
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f002 f9cf 	bl	8011000 <RCCEx_PLL3_Config>
 800ec62:	4603      	mov	r3, r0
 800ec64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec68:	e008      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ec70:	e004      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ec72:	bf00      	nop
 800ec74:	e002      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ec76:	bf00      	nop
 800ec78:	e000      	b.n	800ec7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ec7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10d      	bne.n	800eca0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ec84:	4b05      	ldr	r3, [pc, #20]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ec8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ec94:	4a01      	ldr	r2, [pc, #4]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ec96:	430b      	orrs	r3, r1
 800ec98:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec9a:	e005      	b.n	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ec9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800eca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ecb4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ecbe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	d03a      	beq.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ecc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecce:	2b30      	cmp	r3, #48	@ 0x30
 800ecd0:	d01f      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ecd2:	2b30      	cmp	r3, #48	@ 0x30
 800ecd4:	d819      	bhi.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	d00c      	beq.n	800ecf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ecda:	2b20      	cmp	r3, #32
 800ecdc:	d815      	bhi.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d019      	beq.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ece2:	2b10      	cmp	r3, #16
 800ece4:	d111      	bne.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ece6:	4baa      	ldr	r3, [pc, #680]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ece8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecea:	4aa9      	ldr	r2, [pc, #676]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ecec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ecf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ecf2:	e011      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ecf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecf8:	3308      	adds	r3, #8
 800ecfa:	2102      	movs	r1, #2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f002 f8cd 	bl	8010e9c <RCCEx_PLL2_Config>
 800ed02:	4603      	mov	r3, r0
 800ed04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ed08:	e006      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ed10:	e002      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ed12:	bf00      	nop
 800ed14:	e000      	b.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ed16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ed20:	4b9b      	ldr	r3, [pc, #620]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ed22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ed28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed2e:	4a98      	ldr	r2, [pc, #608]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ed30:	430b      	orrs	r3, r1
 800ed32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ed34:	e003      	b.n	800ed3e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ed3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ed3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ed4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ed54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	d051      	beq.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ed5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed68:	d035      	beq.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ed6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed6e:	d82e      	bhi.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ed70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed74:	d031      	beq.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ed76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed7a:	d828      	bhi.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ed7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed80:	d01a      	beq.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ed82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed86:	d822      	bhi.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d003      	beq.n	800ed94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ed8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed90:	d007      	beq.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ed92:	e01c      	b.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed94:	4b7e      	ldr	r3, [pc, #504]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ed96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed98:	4a7d      	ldr	r2, [pc, #500]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ed9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eda0:	e01c      	b.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eda6:	3308      	adds	r3, #8
 800eda8:	2100      	movs	r1, #0
 800edaa:	4618      	mov	r0, r3
 800edac:	f002 f876 	bl	8010e9c <RCCEx_PLL2_Config>
 800edb0:	4603      	mov	r3, r0
 800edb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edb6:	e011      	b.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edbc:	3328      	adds	r3, #40	@ 0x28
 800edbe:	2100      	movs	r1, #0
 800edc0:	4618      	mov	r0, r3
 800edc2:	f002 f91d 	bl	8011000 <RCCEx_PLL3_Config>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edcc:	e006      	b.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800edd4:	e002      	b.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800edd6:	bf00      	nop
 800edd8:	e000      	b.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800edda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d10a      	bne.n	800edfa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ede4:	4b6a      	ldr	r3, [pc, #424]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ede6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800edec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800edf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800edf2:	4a67      	ldr	r2, [pc, #412]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800edf4:	430b      	orrs	r3, r1
 800edf6:	6513      	str	r3, [r2, #80]	@ 0x50
 800edf8:	e003      	b.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800edfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ee02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ee0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ee12:	2300      	movs	r3, #0
 800ee14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ee18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	d053      	beq.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ee22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee2c:	d033      	beq.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ee2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee32:	d82c      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ee34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee38:	d02f      	beq.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ee3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee3e:	d826      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ee40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee44:	d02b      	beq.n	800ee9e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ee46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee4a:	d820      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ee4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee50:	d012      	beq.n	800ee78 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ee52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee56:	d81a      	bhi.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d022      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ee5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee60:	d115      	bne.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee66:	3308      	adds	r3, #8
 800ee68:	2101      	movs	r1, #1
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f002 f816 	bl	8010e9c <RCCEx_PLL2_Config>
 800ee70:	4603      	mov	r3, r0
 800ee72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee76:	e015      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee7c:	3328      	adds	r3, #40	@ 0x28
 800ee7e:	2101      	movs	r1, #1
 800ee80:	4618      	mov	r0, r3
 800ee82:	f002 f8bd 	bl	8011000 <RCCEx_PLL3_Config>
 800ee86:	4603      	mov	r3, r0
 800ee88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee8c:	e00a      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ee94:	e006      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ee96:	bf00      	nop
 800ee98:	e004      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ee9a:	bf00      	nop
 800ee9c:	e002      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ee9e:	bf00      	nop
 800eea0:	e000      	b.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800eea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10a      	bne.n	800eec2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eeac:	4b38      	ldr	r3, [pc, #224]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800eeae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eeb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800eeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eeba:	4a35      	ldr	r2, [pc, #212]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800eebc:	430b      	orrs	r3, r1
 800eebe:	6513      	str	r3, [r2, #80]	@ 0x50
 800eec0:	e003      	b.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800eec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800eed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eeda:	2300      	movs	r3, #0
 800eedc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800eee0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800eee4:	460b      	mov	r3, r1
 800eee6:	4313      	orrs	r3, r2
 800eee8:	d058      	beq.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800eeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eeee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800eef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eef6:	d033      	beq.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800eef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eefc:	d82c      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800eefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef02:	d02f      	beq.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ef04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef08:	d826      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ef0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef0e:	d02b      	beq.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ef10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef14:	d820      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ef16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef1a:	d012      	beq.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ef1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef20:	d81a      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d022      	beq.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ef26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef2a:	d115      	bne.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef30:	3308      	adds	r3, #8
 800ef32:	2101      	movs	r1, #1
 800ef34:	4618      	mov	r0, r3
 800ef36:	f001 ffb1 	bl	8010e9c <RCCEx_PLL2_Config>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef40:	e015      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef46:	3328      	adds	r3, #40	@ 0x28
 800ef48:	2101      	movs	r1, #1
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f002 f858 	bl	8011000 <RCCEx_PLL3_Config>
 800ef50:	4603      	mov	r3, r0
 800ef52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef56:	e00a      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ef5e:	e006      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ef60:	bf00      	nop
 800ef62:	e004      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ef64:	bf00      	nop
 800ef66:	e002      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ef68:	bf00      	nop
 800ef6a:	e000      	b.n	800ef6e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ef6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10e      	bne.n	800ef94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ef76:	4b06      	ldr	r3, [pc, #24]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ef78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ef7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ef86:	4a02      	ldr	r2, [pc, #8]	@ (800ef90 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ef88:	430b      	orrs	r3, r1
 800ef8a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef8c:	e006      	b.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ef8e:	bf00      	nop
 800ef90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ef98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ef9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800efa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800efac:	2300      	movs	r3, #0
 800efae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800efb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800efb6:	460b      	mov	r3, r1
 800efb8:	4313      	orrs	r3, r2
 800efba:	d037      	beq.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800efbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efc6:	d00e      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800efc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efcc:	d816      	bhi.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d018      	beq.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800efd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efd6:	d111      	bne.n	800effc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efd8:	4bc4      	ldr	r3, [pc, #784]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800efda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efdc:	4ac3      	ldr	r2, [pc, #780]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800efde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800efe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800efe4:	e00f      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800efe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efea:	3308      	adds	r3, #8
 800efec:	2101      	movs	r1, #1
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 ff54 	bl	8010e9c <RCCEx_PLL2_Config>
 800eff4:	4603      	mov	r3, r0
 800eff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800effa:	e004      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800effc:	2301      	movs	r3, #1
 800effe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f002:	e000      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800f004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10a      	bne.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f00e:	4bb7      	ldr	r3, [pc, #732]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f012:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f01c:	4ab3      	ldr	r2, [pc, #716]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f01e:	430b      	orrs	r3, r1
 800f020:	6513      	str	r3, [r2, #80]	@ 0x50
 800f022:	e003      	b.n	800f02c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800f038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f042:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f046:	460b      	mov	r3, r1
 800f048:	4313      	orrs	r3, r2
 800f04a:	d039      	beq.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f052:	2b03      	cmp	r3, #3
 800f054:	d81c      	bhi.n	800f090 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800f056:	a201      	add	r2, pc, #4	@ (adr r2, 800f05c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f099 	.word	0x0800f099
 800f060:	0800f06d 	.word	0x0800f06d
 800f064:	0800f07b 	.word	0x0800f07b
 800f068:	0800f099 	.word	0x0800f099
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f06c:	4b9f      	ldr	r3, [pc, #636]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f070:	4a9e      	ldr	r2, [pc, #632]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f078:	e00f      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f07e:	3308      	adds	r3, #8
 800f080:	2102      	movs	r1, #2
 800f082:	4618      	mov	r0, r3
 800f084:	f001 ff0a 	bl	8010e9c <RCCEx_PLL2_Config>
 800f088:	4603      	mov	r3, r0
 800f08a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f08e:	e004      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f096:	e000      	b.n	800f09a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800f098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f09a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10a      	bne.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f0a2:	4b92      	ldr	r3, [pc, #584]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0a6:	f023 0103 	bic.w	r1, r3, #3
 800f0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0b0:	4a8e      	ldr	r2, [pc, #568]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f0b2:	430b      	orrs	r3, r1
 800f0b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0b6:	e003      	b.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f0bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800f0cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f0da:	460b      	mov	r3, r1
 800f0dc:	4313      	orrs	r3, r2
 800f0de:	f000 8099 	beq.w	800f214 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f0e2:	4b83      	ldr	r3, [pc, #524]	@ (800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a82      	ldr	r2, [pc, #520]	@ (800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f0ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f0ee:	f7f8 fe25 	bl	8007d3c <HAL_GetTick>
 800f0f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f0f6:	e00b      	b.n	800f110 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f0f8:	f7f8 fe20 	bl	8007d3c <HAL_GetTick>
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	2b64      	cmp	r3, #100	@ 0x64
 800f106:	d903      	bls.n	800f110 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800f108:	2303      	movs	r3, #3
 800f10a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f10e:	e005      	b.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f110:	4b77      	ldr	r3, [pc, #476]	@ (800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d0ed      	beq.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800f11c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f120:	2b00      	cmp	r3, #0
 800f122:	d173      	bne.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f124:	4b71      	ldr	r3, [pc, #452]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f126:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f12c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f130:	4053      	eors	r3, r2
 800f132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f136:	2b00      	cmp	r3, #0
 800f138:	d015      	beq.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f13a:	4b6c      	ldr	r3, [pc, #432]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f13e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f142:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f146:	4b69      	ldr	r3, [pc, #420]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f14a:	4a68      	ldr	r2, [pc, #416]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f14c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f150:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f152:	4b66      	ldr	r3, [pc, #408]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f156:	4a65      	ldr	r2, [pc, #404]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f15c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f15e:	4a63      	ldr	r2, [pc, #396]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f164:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f16a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f172:	d118      	bne.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f174:	f7f8 fde2 	bl	8007d3c <HAL_GetTick>
 800f178:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f17c:	e00d      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f17e:	f7f8 fddd 	bl	8007d3c <HAL_GetTick>
 800f182:	4602      	mov	r2, r0
 800f184:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f188:	1ad2      	subs	r2, r2, r3
 800f18a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f18e:	429a      	cmp	r2, r3
 800f190:	d903      	bls.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800f192:	2303      	movs	r3, #3
 800f194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800f198:	e005      	b.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f19a:	4b54      	ldr	r3, [pc, #336]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f19e:	f003 0302 	and.w	r3, r3, #2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d0eb      	beq.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800f1a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d129      	bne.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f1b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1be:	d10e      	bne.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x846>
 800f1c0:	4b4a      	ldr	r3, [pc, #296]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f1d0:	091a      	lsrs	r2, r3, #4
 800f1d2:	4b48      	ldr	r3, [pc, #288]	@ (800f2f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	4a45      	ldr	r2, [pc, #276]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1d8:	430b      	orrs	r3, r1
 800f1da:	6113      	str	r3, [r2, #16]
 800f1dc:	e005      	b.n	800f1ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 800f1de:	4b43      	ldr	r3, [pc, #268]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	4a42      	ldr	r2, [pc, #264]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f1e8:	6113      	str	r3, [r2, #16]
 800f1ea:	4b40      	ldr	r3, [pc, #256]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f1f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1fa:	4a3c      	ldr	r2, [pc, #240]	@ (800f2ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800f1fc:	430b      	orrs	r3, r1
 800f1fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800f200:	e008      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f206:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800f20a:	e003      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f20c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f002 0301 	and.w	r3, r2, #1
 800f220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f224:	2300      	movs	r3, #0
 800f226:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f22a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f22e:	460b      	mov	r3, r1
 800f230:	4313      	orrs	r3, r2
 800f232:	f000 808f 	beq.w	800f354 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f23a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f23c:	2b28      	cmp	r3, #40	@ 0x28
 800f23e:	d871      	bhi.n	800f324 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800f240:	a201      	add	r2, pc, #4	@ (adr r2, 800f248 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800f242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f246:	bf00      	nop
 800f248:	0800f32d 	.word	0x0800f32d
 800f24c:	0800f325 	.word	0x0800f325
 800f250:	0800f325 	.word	0x0800f325
 800f254:	0800f325 	.word	0x0800f325
 800f258:	0800f325 	.word	0x0800f325
 800f25c:	0800f325 	.word	0x0800f325
 800f260:	0800f325 	.word	0x0800f325
 800f264:	0800f325 	.word	0x0800f325
 800f268:	0800f2f9 	.word	0x0800f2f9
 800f26c:	0800f325 	.word	0x0800f325
 800f270:	0800f325 	.word	0x0800f325
 800f274:	0800f325 	.word	0x0800f325
 800f278:	0800f325 	.word	0x0800f325
 800f27c:	0800f325 	.word	0x0800f325
 800f280:	0800f325 	.word	0x0800f325
 800f284:	0800f325 	.word	0x0800f325
 800f288:	0800f30f 	.word	0x0800f30f
 800f28c:	0800f325 	.word	0x0800f325
 800f290:	0800f325 	.word	0x0800f325
 800f294:	0800f325 	.word	0x0800f325
 800f298:	0800f325 	.word	0x0800f325
 800f29c:	0800f325 	.word	0x0800f325
 800f2a0:	0800f325 	.word	0x0800f325
 800f2a4:	0800f325 	.word	0x0800f325
 800f2a8:	0800f32d 	.word	0x0800f32d
 800f2ac:	0800f325 	.word	0x0800f325
 800f2b0:	0800f325 	.word	0x0800f325
 800f2b4:	0800f325 	.word	0x0800f325
 800f2b8:	0800f325 	.word	0x0800f325
 800f2bc:	0800f325 	.word	0x0800f325
 800f2c0:	0800f325 	.word	0x0800f325
 800f2c4:	0800f325 	.word	0x0800f325
 800f2c8:	0800f32d 	.word	0x0800f32d
 800f2cc:	0800f325 	.word	0x0800f325
 800f2d0:	0800f325 	.word	0x0800f325
 800f2d4:	0800f325 	.word	0x0800f325
 800f2d8:	0800f325 	.word	0x0800f325
 800f2dc:	0800f325 	.word	0x0800f325
 800f2e0:	0800f325 	.word	0x0800f325
 800f2e4:	0800f325 	.word	0x0800f325
 800f2e8:	0800f32d 	.word	0x0800f32d
 800f2ec:	58024400 	.word	0x58024400
 800f2f0:	58024800 	.word	0x58024800
 800f2f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f2fc:	3308      	adds	r3, #8
 800f2fe:	2101      	movs	r1, #1
 800f300:	4618      	mov	r0, r3
 800f302:	f001 fdcb 	bl	8010e9c <RCCEx_PLL2_Config>
 800f306:	4603      	mov	r3, r0
 800f308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f30c:	e00f      	b.n	800f32e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f312:	3328      	adds	r3, #40	@ 0x28
 800f314:	2101      	movs	r1, #1
 800f316:	4618      	mov	r0, r3
 800f318:	f001 fe72 	bl	8011000 <RCCEx_PLL3_Config>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f322:	e004      	b.n	800f32e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f324:	2301      	movs	r3, #1
 800f326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f32a:	e000      	b.n	800f32e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800f32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f32e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f332:	2b00      	cmp	r3, #0
 800f334:	d10a      	bne.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f336:	4bbf      	ldr	r3, [pc, #764]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f33a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f344:	4abb      	ldr	r2, [pc, #748]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f346:	430b      	orrs	r3, r1
 800f348:	6553      	str	r3, [r2, #84]	@ 0x54
 800f34a:	e003      	b.n	800f354 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f34c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35c:	f002 0302 	and.w	r3, r2, #2
 800f360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f364:	2300      	movs	r3, #0
 800f366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f36a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f36e:	460b      	mov	r3, r1
 800f370:	4313      	orrs	r3, r2
 800f372:	d041      	beq.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f37a:	2b05      	cmp	r3, #5
 800f37c:	d824      	bhi.n	800f3c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800f37e:	a201      	add	r2, pc, #4	@ (adr r2, 800f384 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800f380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f384:	0800f3d1 	.word	0x0800f3d1
 800f388:	0800f39d 	.word	0x0800f39d
 800f38c:	0800f3b3 	.word	0x0800f3b3
 800f390:	0800f3d1 	.word	0x0800f3d1
 800f394:	0800f3d1 	.word	0x0800f3d1
 800f398:	0800f3d1 	.word	0x0800f3d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	2101      	movs	r1, #1
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f001 fd79 	bl	8010e9c <RCCEx_PLL2_Config>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3b0:	e00f      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3b6:	3328      	adds	r3, #40	@ 0x28
 800f3b8:	2101      	movs	r1, #1
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f001 fe20 	bl	8011000 <RCCEx_PLL3_Config>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3c6:	e004      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f3ce:	e000      	b.n	800f3d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800f3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d10a      	bne.n	800f3f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f3da:	4b96      	ldr	r3, [pc, #600]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3de:	f023 0107 	bic.w	r1, r3, #7
 800f3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3e8:	4a92      	ldr	r2, [pc, #584]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f3ea:	430b      	orrs	r3, r1
 800f3ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800f3ee:	e003      	b.n	800f3f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f3f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	f002 0304 	and.w	r3, r2, #4
 800f404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f408:	2300      	movs	r3, #0
 800f40a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f40e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f412:	460b      	mov	r3, r1
 800f414:	4313      	orrs	r3, r2
 800f416:	d044      	beq.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f420:	2b05      	cmp	r3, #5
 800f422:	d825      	bhi.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f479 	.word	0x0800f479
 800f430:	0800f445 	.word	0x0800f445
 800f434:	0800f45b 	.word	0x0800f45b
 800f438:	0800f479 	.word	0x0800f479
 800f43c:	0800f479 	.word	0x0800f479
 800f440:	0800f479 	.word	0x0800f479
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f448:	3308      	adds	r3, #8
 800f44a:	2101      	movs	r1, #1
 800f44c:	4618      	mov	r0, r3
 800f44e:	f001 fd25 	bl	8010e9c <RCCEx_PLL2_Config>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f458:	e00f      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f45e:	3328      	adds	r3, #40	@ 0x28
 800f460:	2101      	movs	r1, #1
 800f462:	4618      	mov	r0, r3
 800f464:	f001 fdcc 	bl	8011000 <RCCEx_PLL3_Config>
 800f468:	4603      	mov	r3, r0
 800f46a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f46e:	e004      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f476:	e000      	b.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800f478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f47a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10b      	bne.n	800f49a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f482:	4b6c      	ldr	r3, [pc, #432]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f486:	f023 0107 	bic.w	r1, r3, #7
 800f48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f492:	4a68      	ldr	r2, [pc, #416]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f494:	430b      	orrs	r3, r1
 800f496:	6593      	str	r3, [r2, #88]	@ 0x58
 800f498:	e003      	b.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f49a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f49e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4aa:	f002 0320 	and.w	r3, r2, #32
 800f4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f4b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	d055      	beq.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ce:	d033      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800f4d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4d4:	d82c      	bhi.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4da:	d02f      	beq.n	800f53c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800f4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e0:	d826      	bhi.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f4e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4e6:	d02b      	beq.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800f4e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4ec:	d820      	bhi.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f4ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4f2:	d012      	beq.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800f4f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4f8:	d81a      	bhi.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d022      	beq.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800f4fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f502:	d115      	bne.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f508:	3308      	adds	r3, #8
 800f50a:	2100      	movs	r1, #0
 800f50c:	4618      	mov	r0, r3
 800f50e:	f001 fcc5 	bl	8010e9c <RCCEx_PLL2_Config>
 800f512:	4603      	mov	r3, r0
 800f514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f518:	e015      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f51e:	3328      	adds	r3, #40	@ 0x28
 800f520:	2102      	movs	r1, #2
 800f522:	4618      	mov	r0, r3
 800f524:	f001 fd6c 	bl	8011000 <RCCEx_PLL3_Config>
 800f528:	4603      	mov	r3, r0
 800f52a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f52e:	e00a      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f536:	e006      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f538:	bf00      	nop
 800f53a:	e004      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f53c:	bf00      	nop
 800f53e:	e002      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f540:	bf00      	nop
 800f542:	e000      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800f544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10b      	bne.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f54e:	4b39      	ldr	r3, [pc, #228]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f552:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f55e:	4a35      	ldr	r2, [pc, #212]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f560:	430b      	orrs	r3, r1
 800f562:	6553      	str	r3, [r2, #84]	@ 0x54
 800f564:	e003      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f566:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f56a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f576:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f57a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f57e:	2300      	movs	r3, #0
 800f580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f584:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f588:	460b      	mov	r3, r1
 800f58a:	4313      	orrs	r3, r2
 800f58c:	d058      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f596:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f59a:	d033      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800f59c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f5a0:	d82c      	bhi.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f5a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5a6:	d02f      	beq.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f5a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5ac:	d826      	bhi.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f5ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5b2:	d02b      	beq.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800f5b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5b8:	d820      	bhi.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f5ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5be:	d012      	beq.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800f5c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5c4:	d81a      	bhi.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d022      	beq.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800f5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5ce:	d115      	bne.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f001 fc5f 	bl	8010e9c <RCCEx_PLL2_Config>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f5e4:	e015      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5ea:	3328      	adds	r3, #40	@ 0x28
 800f5ec:	2102      	movs	r1, #2
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f001 fd06 	bl	8011000 <RCCEx_PLL3_Config>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f5fa:	e00a      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f602:	e006      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f604:	bf00      	nop
 800f606:	e004      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f608:	bf00      	nop
 800f60a:	e002      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f60c:	bf00      	nop
 800f60e:	e000      	b.n	800f612 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800f610:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f616:	2b00      	cmp	r3, #0
 800f618:	d10e      	bne.n	800f638 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f61a:	4b06      	ldr	r3, [pc, #24]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f61c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f61e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f626:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f62a:	4a02      	ldr	r2, [pc, #8]	@ (800f634 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800f62c:	430b      	orrs	r3, r1
 800f62e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f630:	e006      	b.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800f632:	bf00      	nop
 800f634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f63c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f648:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f64c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f650:	2300      	movs	r3, #0
 800f652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f656:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f65a:	460b      	mov	r3, r1
 800f65c:	4313      	orrs	r3, r2
 800f65e:	d055      	beq.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f664:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f668:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f66c:	d033      	beq.n	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800f66e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f672:	d82c      	bhi.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f678:	d02f      	beq.n	800f6da <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800f67a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f67e:	d826      	bhi.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f680:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f684:	d02b      	beq.n	800f6de <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800f686:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f68a:	d820      	bhi.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f68c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f690:	d012      	beq.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800f692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f696:	d81a      	bhi.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d022      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800f69c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6a0:	d115      	bne.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6a6:	3308      	adds	r3, #8
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f001 fbf6 	bl	8010e9c <RCCEx_PLL2_Config>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6b6:	e015      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6bc:	3328      	adds	r3, #40	@ 0x28
 800f6be:	2102      	movs	r1, #2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f001 fc9d 	bl	8011000 <RCCEx_PLL3_Config>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6cc:	e00a      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f6d4:	e006      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f6d6:	bf00      	nop
 800f6d8:	e004      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f6da:	bf00      	nop
 800f6dc:	e002      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f6de:	bf00      	nop
 800f6e0:	e000      	b.n	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800f6e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10b      	bne.n	800f704 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f6ec:	4ba0      	ldr	r3, [pc, #640]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f6ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f6f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f6fc:	4a9c      	ldr	r2, [pc, #624]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f6fe:	430b      	orrs	r3, r1
 800f700:	6593      	str	r3, [r2, #88]	@ 0x58
 800f702:	e003      	b.n	800f70c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f708:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800f70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	f002 0308 	and.w	r3, r2, #8
 800f718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f71c:	2300      	movs	r3, #0
 800f71e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f722:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f726:	460b      	mov	r3, r1
 800f728:	4313      	orrs	r3, r2
 800f72a:	d01e      	beq.n	800f76a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800f72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f738:	d10c      	bne.n	800f754 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f73e:	3328      	adds	r3, #40	@ 0x28
 800f740:	2102      	movs	r1, #2
 800f742:	4618      	mov	r0, r3
 800f744:	f001 fc5c 	bl	8011000 <RCCEx_PLL3_Config>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800f754:	4b86      	ldr	r3, [pc, #536]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f758:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f764:	4a82      	ldr	r2, [pc, #520]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f766:	430b      	orrs	r3, r1
 800f768:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	f002 0310 	and.w	r3, r2, #16
 800f776:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f77a:	2300      	movs	r3, #0
 800f77c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f780:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f784:	460b      	mov	r3, r1
 800f786:	4313      	orrs	r3, r2
 800f788:	d01e      	beq.n	800f7c8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f78e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f796:	d10c      	bne.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f79c:	3328      	adds	r3, #40	@ 0x28
 800f79e:	2102      	movs	r1, #2
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f001 fc2d 	bl	8011000 <RCCEx_PLL3_Config>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f7b2:	4b6f      	ldr	r3, [pc, #444]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f7c2:	4a6b      	ldr	r2, [pc, #428]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f7c4:	430b      	orrs	r3, r1
 800f7c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f7d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f7da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f7de:	460b      	mov	r3, r1
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	d03e      	beq.n	800f862 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f7e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f7ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7f0:	d022      	beq.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800f7f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7f6:	d81b      	bhi.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800f7fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f800:	d00b      	beq.n	800f81a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800f802:	e015      	b.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f808:	3308      	adds	r3, #8
 800f80a:	2100      	movs	r1, #0
 800f80c:	4618      	mov	r0, r3
 800f80e:	f001 fb45 	bl	8010e9c <RCCEx_PLL2_Config>
 800f812:	4603      	mov	r3, r0
 800f814:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f818:	e00f      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f81e:	3328      	adds	r3, #40	@ 0x28
 800f820:	2102      	movs	r1, #2
 800f822:	4618      	mov	r0, r3
 800f824:	f001 fbec 	bl	8011000 <RCCEx_PLL3_Config>
 800f828:	4603      	mov	r3, r0
 800f82a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f82e:	e004      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f830:	2301      	movs	r3, #1
 800f832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f836:	e000      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800f838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f83a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10b      	bne.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f842:	4b4b      	ldr	r3, [pc, #300]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f84e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f852:	4a47      	ldr	r2, [pc, #284]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f854:	430b      	orrs	r3, r1
 800f856:	6593      	str	r3, [r2, #88]	@ 0x58
 800f858:	e003      	b.n	800f862 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f85a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f85e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f86e:	673b      	str	r3, [r7, #112]	@ 0x70
 800f870:	2300      	movs	r3, #0
 800f872:	677b      	str	r3, [r7, #116]	@ 0x74
 800f874:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f878:	460b      	mov	r3, r1
 800f87a:	4313      	orrs	r3, r2
 800f87c:	d03b      	beq.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f882:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f88a:	d01f      	beq.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800f88c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f890:	d818      	bhi.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800f892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f896:	d003      	beq.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800f898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f89c:	d007      	beq.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800f89e:	e011      	b.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8a0:	4b33      	ldr	r3, [pc, #204]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8a4:	4a32      	ldr	r2, [pc, #200]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8ac:	e00f      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8b2:	3328      	adds	r3, #40	@ 0x28
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f001 fba2 	bl	8011000 <RCCEx_PLL3_Config>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8c2:	e004      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f8ca:	e000      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800f8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10b      	bne.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8d6:	4b26      	ldr	r3, [pc, #152]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f8d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8e6:	4a22      	ldr	r2, [pc, #136]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f8e8:	430b      	orrs	r3, r1
 800f8ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800f8ec:	e003      	b.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f8f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f902:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f904:	2300      	movs	r3, #0
 800f906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f908:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f90c:	460b      	mov	r3, r1
 800f90e:	4313      	orrs	r3, r2
 800f910:	d034      	beq.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d003      	beq.n	800f924 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800f91c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f920:	d007      	beq.n	800f932 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800f922:	e011      	b.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f924:	4b12      	ldr	r3, [pc, #72]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f928:	4a11      	ldr	r2, [pc, #68]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f92a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f930:	e00e      	b.n	800f950 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f936:	3308      	adds	r3, #8
 800f938:	2102      	movs	r1, #2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f001 faae 	bl	8010e9c <RCCEx_PLL2_Config>
 800f940:	4603      	mov	r3, r0
 800f942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f946:	e003      	b.n	800f950 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800f948:	2301      	movs	r3, #1
 800f94a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800f94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10d      	bne.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f958:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f95c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f966:	4a02      	ldr	r2, [pc, #8]	@ (800f970 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800f968:	430b      	orrs	r3, r1
 800f96a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f96c:	e006      	b.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800f96e:	bf00      	nop
 800f970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800f978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f984:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f988:	663b      	str	r3, [r7, #96]	@ 0x60
 800f98a:	2300      	movs	r3, #0
 800f98c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f98e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f992:	460b      	mov	r3, r1
 800f994:	4313      	orrs	r3, r2
 800f996:	d00c      	beq.n	800f9b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f99c:	3328      	adds	r3, #40	@ 0x28
 800f99e:	2102      	movs	r1, #2
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f001 fb2d 	bl	8011000 <RCCEx_PLL3_Config>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d002      	beq.n	800f9b2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f9be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	d036      	beq.n	800fa3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f9d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9d8:	d018      	beq.n	800fa0c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800f9da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9de:	d811      	bhi.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f9e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9e4:	d014      	beq.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800f9e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9ea:	d80b      	bhi.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d011      	beq.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800f9f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9f4:	d106      	bne.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9f6:	4bb7      	ldr	r3, [pc, #732]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fa:	4ab6      	ldr	r2, [pc, #728]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800f9fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fa02:	e008      	b.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800fa0a:	e004      	b.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800fa0c:	bf00      	nop
 800fa0e:	e002      	b.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800fa10:	bf00      	nop
 800fa12:	e000      	b.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800fa14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d10a      	bne.n	800fa34 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa1e:	4bad      	ldr	r3, [pc, #692]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800fa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa2c:	4aa9      	ldr	r2, [pc, #676]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa2e:	430b      	orrs	r3, r1
 800fa30:	6553      	str	r3, [r2, #84]	@ 0x54
 800fa32:	e003      	b.n	800fa3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fa38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800fa48:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fa52:	460b      	mov	r3, r1
 800fa54:	4313      	orrs	r3, r2
 800fa56:	d009      	beq.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa58:	4b9e      	ldr	r3, [pc, #632]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa66:	4a9b      	ldr	r2, [pc, #620]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa68:	430b      	orrs	r3, r1
 800fa6a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800fa78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fa82:	460b      	mov	r3, r1
 800fa84:	4313      	orrs	r3, r2
 800fa86:	d009      	beq.n	800fa9c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa88:	4b92      	ldr	r3, [pc, #584]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800fa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fa94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fa96:	4a8f      	ldr	r2, [pc, #572]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fa98:	430b      	orrs	r3, r1
 800fa9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800faa8:	643b      	str	r3, [r7, #64]	@ 0x40
 800faaa:	2300      	movs	r3, #0
 800faac:	647b      	str	r3, [r7, #68]	@ 0x44
 800faae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800fab2:	460b      	mov	r3, r1
 800fab4:	4313      	orrs	r3, r2
 800fab6:	d00e      	beq.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fab8:	4b86      	ldr	r3, [pc, #536]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	4a85      	ldr	r2, [pc, #532]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fabe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fac2:	6113      	str	r3, [r2, #16]
 800fac4:	4b83      	ldr	r3, [pc, #524]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fac6:	6919      	ldr	r1, [r3, #16]
 800fac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800facc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fad0:	4a80      	ldr	r2, [pc, #512]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fad2:	430b      	orrs	r3, r1
 800fad4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fade:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800fae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fae4:	2300      	movs	r3, #0
 800fae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fae8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800faec:	460b      	mov	r3, r1
 800faee:	4313      	orrs	r3, r2
 800faf0:	d009      	beq.n	800fb06 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800faf2:	4b78      	ldr	r3, [pc, #480]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800faf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fafe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb00:	4a74      	ldr	r2, [pc, #464]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb02:	430b      	orrs	r3, r1
 800fb04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800fb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb14:	2300      	movs	r3, #0
 800fb16:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	d00a      	beq.n	800fb38 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb22:	4b6c      	ldr	r3, [pc, #432]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800fb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb32:	4a68      	ldr	r2, [pc, #416]	@ (800fcd4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800fb34:	430b      	orrs	r3, r1
 800fb36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb40:	2100      	movs	r1, #0
 800fb42:	62b9      	str	r1, [r7, #40]	@ 0x28
 800fb44:	f003 0301 	and.w	r3, r3, #1
 800fb48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fb4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800fb4e:	460b      	mov	r3, r1
 800fb50:	4313      	orrs	r3, r2
 800fb52:	d011      	beq.n	800fb78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb58:	3308      	adds	r3, #8
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f001 f99d 	bl	8010e9c <RCCEx_PLL2_Config>
 800fb62:	4603      	mov	r3, r0
 800fb64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fb68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d003      	beq.n	800fb78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fb74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	2100      	movs	r1, #0
 800fb82:	6239      	str	r1, [r7, #32]
 800fb84:	f003 0302 	and.w	r3, r3, #2
 800fb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fb8e:	460b      	mov	r3, r1
 800fb90:	4313      	orrs	r3, r2
 800fb92:	d011      	beq.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fb98:	3308      	adds	r3, #8
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f001 f97d 	bl	8010e9c <RCCEx_PLL2_Config>
 800fba2:	4603      	mov	r3, r0
 800fba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d003      	beq.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fbb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	61b9      	str	r1, [r7, #24]
 800fbc4:	f003 0304 	and.w	r3, r3, #4
 800fbc8:	61fb      	str	r3, [r7, #28]
 800fbca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fbce:	460b      	mov	r3, r1
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	d011      	beq.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbd8:	3308      	adds	r3, #8
 800fbda:	2102      	movs	r1, #2
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f001 f95d 	bl	8010e9c <RCCEx_PLL2_Config>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fbe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d003      	beq.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fbf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	2100      	movs	r1, #0
 800fc02:	6139      	str	r1, [r7, #16]
 800fc04:	f003 0308 	and.w	r3, r3, #8
 800fc08:	617b      	str	r3, [r7, #20]
 800fc0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	4313      	orrs	r3, r2
 800fc12:	d011      	beq.n	800fc38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc18:	3328      	adds	r3, #40	@ 0x28
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f001 f9ef 	bl	8011000 <RCCEx_PLL3_Config>
 800fc22:	4603      	mov	r3, r0
 800fc24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800fc28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d003      	beq.n	800fc38 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	2100      	movs	r1, #0
 800fc42:	60b9      	str	r1, [r7, #8]
 800fc44:	f003 0310 	and.w	r3, r3, #16
 800fc48:	60fb      	str	r3, [r7, #12]
 800fc4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4313      	orrs	r3, r2
 800fc52:	d011      	beq.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc58:	3328      	adds	r3, #40	@ 0x28
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f001 f9cf 	bl	8011000 <RCCEx_PLL3_Config>
 800fc62:	4603      	mov	r3, r0
 800fc64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fc68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fc74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	2100      	movs	r1, #0
 800fc82:	6039      	str	r1, [r7, #0]
 800fc84:	f003 0320 	and.w	r3, r3, #32
 800fc88:	607b      	str	r3, [r7, #4]
 800fc8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fc8e:	460b      	mov	r3, r1
 800fc90:	4313      	orrs	r3, r2
 800fc92:	d011      	beq.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800fc98:	3328      	adds	r3, #40	@ 0x28
 800fc9a:	2102      	movs	r1, #2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f001 f9af 	bl	8011000 <RCCEx_PLL3_Config>
 800fca2:	4603      	mov	r3, r0
 800fca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800fca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800fcb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800fcb8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	e000      	b.n	800fcc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800fcc4:	2301      	movs	r3, #1
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800fccc:	46bd      	mov	sp, r7
 800fcce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fcd2:	bf00      	nop
 800fcd4:	58024400 	.word	0x58024400

0800fcd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b090      	sub	sp, #64	@ 0x40
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fce6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800fcea:	430b      	orrs	r3, r1
 800fcec:	f040 8094 	bne.w	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fcf0:	4b9b      	ldr	r3, [pc, #620]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fcf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcf4:	f003 0307 	and.w	r3, r3, #7
 800fcf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	f200 8087 	bhi.w	800fe10 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fd02:	a201      	add	r2, pc, #4	@ (adr r2, 800fd08 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd08:	0800fd1d 	.word	0x0800fd1d
 800fd0c:	0800fd45 	.word	0x0800fd45
 800fd10:	0800fd6d 	.word	0x0800fd6d
 800fd14:	0800fe09 	.word	0x0800fe09
 800fd18:	0800fd95 	.word	0x0800fd95
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd1c:	4b90      	ldr	r3, [pc, #576]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd28:	d108      	bne.n	800fd3c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 ff62 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd38:	f000 bc93 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd40:	f000 bc8f 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd44:	4b86      	ldr	r3, [pc, #536]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd50:	d108      	bne.n	800fd64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fca6 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd60:	f000 bc7f 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd68:	f000 bc7b 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fd6c:	4b7c      	ldr	r3, [pc, #496]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd78:	d108      	bne.n	800fd8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd7a:	f107 030c 	add.w	r3, r7, #12
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f000 fde6 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd88:	f000 bc6b 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd90:	f000 bc67 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fd94:	4b72      	ldr	r3, [pc, #456]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fd96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fd9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fd9e:	4b70      	ldr	r3, [pc, #448]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f003 0304 	and.w	r3, r3, #4
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	d10c      	bne.n	800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fdaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d109      	bne.n	800fdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdb0:	4b6b      	ldr	r3, [pc, #428]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	08db      	lsrs	r3, r3, #3
 800fdb6:	f003 0303 	and.w	r3, r3, #3
 800fdba:	4a6a      	ldr	r2, [pc, #424]	@ (800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800fdbc:	fa22 f303 	lsr.w	r3, r2, r3
 800fdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdc2:	e01f      	b.n	800fe04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fdc4:	4b66      	ldr	r3, [pc, #408]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdd0:	d106      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fdd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fdd8:	d102      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fdda:	4b63      	ldr	r3, [pc, #396]	@ (800ff68 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800fddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdde:	e011      	b.n	800fe04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fde0:	4b5f      	ldr	r3, [pc, #380]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fde8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fdec:	d106      	bne.n	800fdfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fdf4:	d102      	bne.n	800fdfc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fdf6:	4b5d      	ldr	r3, [pc, #372]	@ (800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdfa:	e003      	b.n	800fe04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fe00:	f000 bc2f 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800fe04:	f000 bc2d 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe08:	4b59      	ldr	r3, [pc, #356]	@ (800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fe0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe0c:	f000 bc29 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe14:	f000 bc25 	b.w	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800fe18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800fe20:	430b      	orrs	r3, r1
 800fe22:	f040 80a7 	bne.w	800ff74 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800fe26:	4b4e      	ldr	r3, [pc, #312]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe2a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800fe2e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fe30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fe36:	d054      	beq.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800fe38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fe3e:	f200 808b 	bhi.w	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800fe42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fe48:	f000 8083 	beq.w	800ff52 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fe52:	f200 8081 	bhi.w	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800fe56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe5c:	d02f      	beq.n	800febe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe64:	d878      	bhi.n	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800fe66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d004      	beq.n	800fe76 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800fe6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fe72:	d012      	beq.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800fe74:	e070      	b.n	800ff58 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fe76:	4b3a      	ldr	r3, [pc, #232]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe82:	d107      	bne.n	800fe94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fe84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 feb5 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fe8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fe92:	e3e6      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fe94:	2300      	movs	r3, #0
 800fe96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe98:	e3e3      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fe9a:	4b31      	ldr	r3, [pc, #196]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fea6:	d107      	bne.n	800feb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fea8:	f107 0318 	add.w	r3, r7, #24
 800feac:	4618      	mov	r0, r3
 800feae:	f000 fbfb 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800feb6:	e3d4      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800feb8:	2300      	movs	r3, #0
 800feba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800febc:	e3d1      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800febe:	4b28      	ldr	r3, [pc, #160]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800feca:	d107      	bne.n	800fedc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fecc:	f107 030c 	add.w	r3, r7, #12
 800fed0:	4618      	mov	r0, r3
 800fed2:	f000 fd3d 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800feda:	e3c2      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee0:	e3bf      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fee2:	4b1f      	ldr	r3, [pc, #124]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800fee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fee6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800feea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800feec:	4b1c      	ldr	r3, [pc, #112]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	f003 0304 	and.w	r3, r3, #4
 800fef4:	2b04      	cmp	r3, #4
 800fef6:	d10c      	bne.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800fef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d109      	bne.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fefe:	4b18      	ldr	r3, [pc, #96]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	08db      	lsrs	r3, r3, #3
 800ff04:	f003 0303 	and.w	r3, r3, #3
 800ff08:	4a16      	ldr	r2, [pc, #88]	@ (800ff64 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ff0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff10:	e01e      	b.n	800ff50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff12:	4b13      	ldr	r3, [pc, #76]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff1e:	d106      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ff20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff26:	d102      	bne.n	800ff2e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ff28:	4b0f      	ldr	r3, [pc, #60]	@ (800ff68 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ff2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff2c:	e010      	b.n	800ff50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ff2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff60 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff3a:	d106      	bne.n	800ff4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff42:	d102      	bne.n	800ff4a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ff44:	4b09      	ldr	r3, [pc, #36]	@ (800ff6c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff48:	e002      	b.n	800ff50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ff4e:	e388      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ff50:	e387      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ff52:	4b07      	ldr	r3, [pc, #28]	@ (800ff70 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ff54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff56:	e384      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff5c:	e381      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ff5e:	bf00      	nop
 800ff60:	58024400 	.word	0x58024400
 800ff64:	03d09000 	.word	0x03d09000
 800ff68:	003d0900 	.word	0x003d0900
 800ff6c:	016e3600 	.word	0x016e3600
 800ff70:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ff74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff78:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ff7c:	430b      	orrs	r3, r1
 800ff7e:	f040 809c 	bne.w	80100ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ff82:	4b9e      	ldr	r3, [pc, #632]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ff84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff86:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ff8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ff8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ff92:	d054      	beq.n	801003e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ff94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ff9a:	f200 808b 	bhi.w	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ffa4:	f000 8083 	beq.w	80100ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ffae:	f200 8081 	bhi.w	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ffb8:	d02f      	beq.n	801001a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ffba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ffc0:	d878      	bhi.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d004      	beq.n	800ffd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ffc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ffce:	d012      	beq.n	800fff6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ffd0:	e070      	b.n	80100b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ffd2:	4b8a      	ldr	r3, [pc, #552]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ffda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ffde:	d107      	bne.n	800fff0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ffe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 fe07 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ffea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffee:	e338      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800fff0:	2300      	movs	r3, #0
 800fff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fff4:	e335      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fff6:	4b81      	ldr	r3, [pc, #516]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010002:	d107      	bne.n	8010014 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010004:	f107 0318 	add.w	r3, r7, #24
 8010008:	4618      	mov	r0, r3
 801000a:	f000 fb4d 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010012:	e326      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010014:	2300      	movs	r3, #0
 8010016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010018:	e323      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801001a:	4b78      	ldr	r3, [pc, #480]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010026:	d107      	bne.n	8010038 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010028:	f107 030c 	add.w	r3, r7, #12
 801002c:	4618      	mov	r0, r3
 801002e:	f000 fc8f 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010036:	e314      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010038:	2300      	movs	r3, #0
 801003a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801003c:	e311      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801003e:	4b6f      	ldr	r3, [pc, #444]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010042:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010046:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010048:	4b6c      	ldr	r3, [pc, #432]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f003 0304 	and.w	r3, r3, #4
 8010050:	2b04      	cmp	r3, #4
 8010052:	d10c      	bne.n	801006e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8010054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010056:	2b00      	cmp	r3, #0
 8010058:	d109      	bne.n	801006e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801005a:	4b68      	ldr	r3, [pc, #416]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	08db      	lsrs	r3, r3, #3
 8010060:	f003 0303 	and.w	r3, r3, #3
 8010064:	4a66      	ldr	r2, [pc, #408]	@ (8010200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8010066:	fa22 f303 	lsr.w	r3, r2, r3
 801006a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801006c:	e01e      	b.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801006e:	4b63      	ldr	r3, [pc, #396]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801007a:	d106      	bne.n	801008a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801007c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801007e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010082:	d102      	bne.n	801008a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010084:	4b5f      	ldr	r3, [pc, #380]	@ (8010204 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8010086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010088:	e010      	b.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801008a:	4b5c      	ldr	r3, [pc, #368]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010096:	d106      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8010098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801009a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801009e:	d102      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100a0:	4b59      	ldr	r3, [pc, #356]	@ (8010208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100a4:	e002      	b.n	80100ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80100aa:	e2da      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80100ac:	e2d9      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80100ae:	4b57      	ldr	r3, [pc, #348]	@ (801020c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80100b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100b2:	e2d6      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100b8:	e2d3      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80100ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80100c2:	430b      	orrs	r3, r1
 80100c4:	f040 80a7 	bne.w	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80100c8:	4b4c      	ldr	r3, [pc, #304]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80100ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80100d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80100d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100d8:	d055      	beq.n	8010186 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100e0:	f200 8096 	bhi.w	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80100e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80100ea:	f000 8084 	beq.w	80101f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80100ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80100f4:	f200 808c 	bhi.w	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80100f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80100fe:	d030      	beq.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8010100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010106:	f200 8083 	bhi.w	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801010a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010c:	2b00      	cmp	r3, #0
 801010e:	d004      	beq.n	801011a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8010110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010116:	d012      	beq.n	801013e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8010118:	e07a      	b.n	8010210 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801011a:	4b38      	ldr	r3, [pc, #224]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010126:	d107      	bne.n	8010138 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fd63 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010136:	e294      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010138:	2300      	movs	r3, #0
 801013a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801013c:	e291      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801013e:	4b2f      	ldr	r3, [pc, #188]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801014a:	d107      	bne.n	801015c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801014c:	f107 0318 	add.w	r3, r7, #24
 8010150:	4618      	mov	r0, r3
 8010152:	f000 faa9 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801015a:	e282      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801015c:	2300      	movs	r3, #0
 801015e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010160:	e27f      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010162:	4b26      	ldr	r3, [pc, #152]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801016a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801016e:	d107      	bne.n	8010180 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010170:	f107 030c 	add.w	r3, r7, #12
 8010174:	4618      	mov	r0, r3
 8010176:	f000 fbeb 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801017e:	e270      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010184:	e26d      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010186:	4b1d      	ldr	r3, [pc, #116]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801018a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801018e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010190:	4b1a      	ldr	r3, [pc, #104]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f003 0304 	and.w	r3, r3, #4
 8010198:	2b04      	cmp	r3, #4
 801019a:	d10c      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801019c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d109      	bne.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101a2:	4b16      	ldr	r3, [pc, #88]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	08db      	lsrs	r3, r3, #3
 80101a8:	f003 0303 	and.w	r3, r3, #3
 80101ac:	4a14      	ldr	r2, [pc, #80]	@ (8010200 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80101ae:	fa22 f303 	lsr.w	r3, r2, r3
 80101b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101b4:	e01e      	b.n	80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80101b6:	4b11      	ldr	r3, [pc, #68]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101c2:	d106      	bne.n	80101d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80101c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101ca:	d102      	bne.n	80101d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80101cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010204 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80101ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101d0:	e010      	b.n	80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80101d2:	4b0a      	ldr	r3, [pc, #40]	@ (80101fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80101da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80101de:	d106      	bne.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80101e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101e6:	d102      	bne.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80101e8:	4b07      	ldr	r3, [pc, #28]	@ (8010208 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101ec:	e002      	b.n	80101f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80101ee:	2300      	movs	r3, #0
 80101f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80101f2:	e236      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80101f4:	e235      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80101f6:	4b05      	ldr	r3, [pc, #20]	@ (801020c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80101f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101fa:	e232      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80101fc:	58024400 	.word	0x58024400
 8010200:	03d09000 	.word	0x03d09000
 8010204:	003d0900 	.word	0x003d0900
 8010208:	016e3600 	.word	0x016e3600
 801020c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8010210:	2300      	movs	r3, #0
 8010212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010214:	e225      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010216:	e9d7 2300 	ldrd	r2, r3, [r7]
 801021a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801021e:	430b      	orrs	r3, r1
 8010220:	f040 8085 	bne.w	801032e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010224:	4b9c      	ldr	r3, [pc, #624]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010228:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801022c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801022e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010230:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010234:	d06b      	beq.n	801030e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8010236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801023c:	d874      	bhi.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801023e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010240:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010244:	d056      	beq.n	80102f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8010246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010248:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801024c:	d86c      	bhi.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801024e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010254:	d03b      	beq.n	80102ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8010256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801025c:	d864      	bhi.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801025e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010260:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010264:	d021      	beq.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8010266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801026c:	d85c      	bhi.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	2b00      	cmp	r3, #0
 8010272:	d004      	beq.n	801027e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801027a:	d004      	beq.n	8010286 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801027c:	e054      	b.n	8010328 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801027e:	f7fe fb5f 	bl	800e940 <HAL_RCC_GetPCLK1Freq>
 8010282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010284:	e1ed      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010286:	4b84      	ldr	r3, [pc, #528]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801028e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010292:	d107      	bne.n	80102a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010294:	f107 0318 	add.w	r3, r7, #24
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fa05 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102a2:	e1de      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102a8:	e1db      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80102aa:	4b7b      	ldr	r3, [pc, #492]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80102b6:	d107      	bne.n	80102c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102b8:	f107 030c 	add.w	r3, r7, #12
 80102bc:	4618      	mov	r0, r3
 80102be:	f000 fb47 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102c6:	e1cc      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80102c8:	2300      	movs	r3, #0
 80102ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102cc:	e1c9      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80102ce:	4b72      	ldr	r3, [pc, #456]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	f003 0304 	and.w	r3, r3, #4
 80102d6:	2b04      	cmp	r3, #4
 80102d8:	d109      	bne.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102da:	4b6f      	ldr	r3, [pc, #444]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	08db      	lsrs	r3, r3, #3
 80102e0:	f003 0303 	and.w	r3, r3, #3
 80102e4:	4a6d      	ldr	r2, [pc, #436]	@ (801049c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80102e6:	fa22 f303 	lsr.w	r3, r2, r3
 80102ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102ec:	e1b9      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f2:	e1b6      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80102f4:	4b68      	ldr	r3, [pc, #416]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80102fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010300:	d102      	bne.n	8010308 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8010302:	4b67      	ldr	r3, [pc, #412]	@ (80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8010304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010306:	e1ac      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010308:	2300      	movs	r3, #0
 801030a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801030c:	e1a9      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801030e:	4b62      	ldr	r3, [pc, #392]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801031a:	d102      	bne.n	8010322 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801031c:	4b61      	ldr	r3, [pc, #388]	@ (80104a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801031e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010320:	e19f      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010326:	e19c      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010328:	2300      	movs	r3, #0
 801032a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801032c:	e199      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801032e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010332:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8010336:	430b      	orrs	r3, r1
 8010338:	d173      	bne.n	8010422 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801033a:	4b57      	ldr	r3, [pc, #348]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801033c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801033e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010342:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801034a:	d02f      	beq.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801034c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801034e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010352:	d863      	bhi.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8010354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010356:	2b00      	cmp	r3, #0
 8010358:	d004      	beq.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801035a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801035c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010360:	d012      	beq.n	8010388 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8010362:	e05b      	b.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010364:	4b4c      	ldr	r3, [pc, #304]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801036c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010370:	d107      	bne.n	8010382 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010372:	f107 0318 	add.w	r3, r7, #24
 8010376:	4618      	mov	r0, r3
 8010378:	f000 f996 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010380:	e16f      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010386:	e16c      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010388:	4b43      	ldr	r3, [pc, #268]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010394:	d107      	bne.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010396:	f107 030c 	add.w	r3, r7, #12
 801039a:	4618      	mov	r0, r3
 801039c:	f000 fad8 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103a4:	e15d      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103aa:	e15a      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80103ac:	4b3a      	ldr	r3, [pc, #232]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80103b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103b6:	4b38      	ldr	r3, [pc, #224]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f003 0304 	and.w	r3, r3, #4
 80103be:	2b04      	cmp	r3, #4
 80103c0:	d10c      	bne.n	80103dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80103c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d109      	bne.n	80103dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103c8:	4b33      	ldr	r3, [pc, #204]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	08db      	lsrs	r3, r3, #3
 80103ce:	f003 0303 	and.w	r3, r3, #3
 80103d2:	4a32      	ldr	r2, [pc, #200]	@ (801049c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80103d4:	fa22 f303 	lsr.w	r3, r2, r3
 80103d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103da:	e01e      	b.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103dc:	4b2e      	ldr	r3, [pc, #184]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80103e8:	d106      	bne.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80103ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103f0:	d102      	bne.n	80103f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103f2:	4b2b      	ldr	r3, [pc, #172]	@ (80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80103f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103f6:	e010      	b.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103f8:	4b27      	ldr	r3, [pc, #156]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010404:	d106      	bne.n	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8010406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801040c:	d102      	bne.n	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801040e:	4b25      	ldr	r3, [pc, #148]	@ (80104a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8010410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010412:	e002      	b.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010418:	e123      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801041a:	e122      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010420:	e11f      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010426:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801042a:	430b      	orrs	r3, r1
 801042c:	d13c      	bne.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801042e:	4b1a      	ldr	r3, [pc, #104]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8010430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010436:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801043a:	2b00      	cmp	r3, #0
 801043c:	d004      	beq.n	8010448 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801043e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010444:	d012      	beq.n	801046c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8010446:	e023      	b.n	8010490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010448:	4b13      	ldr	r3, [pc, #76]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010454:	d107      	bne.n	8010466 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801045a:	4618      	mov	r0, r3
 801045c:	f000 fbcc 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010464:	e0fd      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010466:	2300      	movs	r3, #0
 8010468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801046a:	e0fa      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801046c:	4b0a      	ldr	r3, [pc, #40]	@ (8010498 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010478:	d107      	bne.n	801048a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801047a:	f107 0318 	add.w	r3, r7, #24
 801047e:	4618      	mov	r0, r3
 8010480:	f000 f912 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010484:	6a3b      	ldr	r3, [r7, #32]
 8010486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010488:	e0eb      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801048e:	e0e8      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8010490:	2300      	movs	r3, #0
 8010492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010494:	e0e5      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8010496:	bf00      	nop
 8010498:	58024400 	.word	0x58024400
 801049c:	03d09000 	.word	0x03d09000
 80104a0:	003d0900 	.word	0x003d0900
 80104a4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80104a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80104b0:	430b      	orrs	r3, r1
 80104b2:	f040 8085 	bne.w	80105c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80104b6:	4b6d      	ldr	r3, [pc, #436]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80104b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80104be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80104c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80104c6:	d06b      	beq.n	80105a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80104c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80104ce:	d874      	bhi.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80104d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104d6:	d056      	beq.n	8010586 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80104d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104de:	d86c      	bhi.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80104e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80104e6:	d03b      	beq.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80104e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80104ee:	d864      	bhi.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80104f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104f6:	d021      	beq.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80104f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104fe:	d85c      	bhi.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8010500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010502:	2b00      	cmp	r3, #0
 8010504:	d004      	beq.n	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8010506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801050c:	d004      	beq.n	8010518 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801050e:	e054      	b.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010510:	f000 f8b4 	bl	801067c <HAL_RCCEx_GetD3PCLK1Freq>
 8010514:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010516:	e0a4      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010518:	4b54      	ldr	r3, [pc, #336]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010524:	d107      	bne.n	8010536 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010526:	f107 0318 	add.w	r3, r7, #24
 801052a:	4618      	mov	r0, r3
 801052c:	f000 f8bc 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010534:	e095      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801053a:	e092      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801053c:	4b4b      	ldr	r3, [pc, #300]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010548:	d107      	bne.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801054a:	f107 030c 	add.w	r3, r7, #12
 801054e:	4618      	mov	r0, r3
 8010550:	f000 f9fe 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010558:	e083      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801055a:	2300      	movs	r3, #0
 801055c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801055e:	e080      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010560:	4b42      	ldr	r3, [pc, #264]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f003 0304 	and.w	r3, r3, #4
 8010568:	2b04      	cmp	r3, #4
 801056a:	d109      	bne.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801056c:	4b3f      	ldr	r3, [pc, #252]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	08db      	lsrs	r3, r3, #3
 8010572:	f003 0303 	and.w	r3, r3, #3
 8010576:	4a3e      	ldr	r2, [pc, #248]	@ (8010670 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8010578:	fa22 f303 	lsr.w	r3, r2, r3
 801057c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801057e:	e070      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010580:	2300      	movs	r3, #0
 8010582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010584:	e06d      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010586:	4b39      	ldr	r3, [pc, #228]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801058e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010592:	d102      	bne.n	801059a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8010594:	4b37      	ldr	r3, [pc, #220]	@ (8010674 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8010596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010598:	e063      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801059e:	e060      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80105a0:	4b32      	ldr	r3, [pc, #200]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80105ac:	d102      	bne.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80105ae:	4b32      	ldr	r3, [pc, #200]	@ (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80105b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105b2:	e056      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80105b4:	2300      	movs	r3, #0
 80105b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105b8:	e053      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105be:	e050      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80105c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80105c8:	430b      	orrs	r3, r1
 80105ca:	d148      	bne.n	801065e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80105cc:	4b27      	ldr	r3, [pc, #156]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80105ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80105d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80105d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105dc:	d02a      	beq.n	8010634 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80105de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105e4:	d838      	bhi.n	8010658 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80105e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d004      	beq.n	80105f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105f2:	d00d      	beq.n	8010610 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80105f4:	e030      	b.n	8010658 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80105f6:	4b1d      	ldr	r3, [pc, #116]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010602:	d102      	bne.n	801060a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8010604:	4b1c      	ldr	r3, [pc, #112]	@ (8010678 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8010606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010608:	e02b      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801060a:	2300      	movs	r3, #0
 801060c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801060e:	e028      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010610:	4b16      	ldr	r3, [pc, #88]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010618:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801061c:	d107      	bne.n	801062e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801061e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010622:	4618      	mov	r0, r3
 8010624:	f000 fae8 	bl	8010bf8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801062c:	e019      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010632:	e016      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010634:	4b0d      	ldr	r3, [pc, #52]	@ (801066c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801063c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010640:	d107      	bne.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010642:	f107 0318 	add.w	r3, r7, #24
 8010646:	4618      	mov	r0, r3
 8010648:	f000 f82e 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010650:	e007      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8010652:	2300      	movs	r3, #0
 8010654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010656:	e004      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801065c:	e001      	b.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8010662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010664:	4618      	mov	r0, r3
 8010666:	3740      	adds	r7, #64	@ 0x40
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	58024400 	.word	0x58024400
 8010670:	03d09000 	.word	0x03d09000
 8010674:	003d0900 	.word	0x003d0900
 8010678:	016e3600 	.word	0x016e3600

0801067c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010680:	f7fe f92e 	bl	800e8e0 <HAL_RCC_GetHCLKFreq>
 8010684:	4602      	mov	r2, r0
 8010686:	4b06      	ldr	r3, [pc, #24]	@ (80106a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	091b      	lsrs	r3, r3, #4
 801068c:	f003 0307 	and.w	r3, r3, #7
 8010690:	4904      	ldr	r1, [pc, #16]	@ (80106a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010692:	5ccb      	ldrb	r3, [r1, r3]
 8010694:	f003 031f 	and.w	r3, r3, #31
 8010698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801069c:	4618      	mov	r0, r3
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	58024400 	.word	0x58024400
 80106a4:	0801e39c 	.word	0x0801e39c

080106a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b089      	sub	sp, #36	@ 0x24
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80106b0:	4ba1      	ldr	r3, [pc, #644]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80106b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106b4:	f003 0303 	and.w	r3, r3, #3
 80106b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80106ba:	4b9f      	ldr	r3, [pc, #636]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80106bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106be:	0b1b      	lsrs	r3, r3, #12
 80106c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80106c6:	4b9c      	ldr	r3, [pc, #624]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80106c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ca:	091b      	lsrs	r3, r3, #4
 80106cc:	f003 0301 	and.w	r3, r3, #1
 80106d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80106d2:	4b99      	ldr	r3, [pc, #612]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80106d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106d6:	08db      	lsrs	r3, r3, #3
 80106d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	fb02 f303 	mul.w	r3, r2, r3
 80106e2:	ee07 3a90 	vmov	s15, r3
 80106e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f000 8111 	beq.w	8010918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	f000 8083 	beq.w	8010804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	2b02      	cmp	r3, #2
 8010702:	f200 80a1 	bhi.w	8010848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d003      	beq.n	8010714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	2b01      	cmp	r3, #1
 8010710:	d056      	beq.n	80107c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010712:	e099      	b.n	8010848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010714:	4b88      	ldr	r3, [pc, #544]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f003 0320 	and.w	r3, r3, #32
 801071c:	2b00      	cmp	r3, #0
 801071e:	d02d      	beq.n	801077c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010720:	4b85      	ldr	r3, [pc, #532]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	08db      	lsrs	r3, r3, #3
 8010726:	f003 0303 	and.w	r3, r3, #3
 801072a:	4a84      	ldr	r2, [pc, #528]	@ (801093c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801072c:	fa22 f303 	lsr.w	r3, r2, r3
 8010730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	ee07 3a90 	vmov	s15, r3
 8010738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	ee07 3a90 	vmov	s15, r3
 8010742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801074a:	4b7b      	ldr	r3, [pc, #492]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801074c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801074e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010752:	ee07 3a90 	vmov	s15, r3
 8010756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801075a:	ed97 6a03 	vldr	s12, [r7, #12]
 801075e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801076a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801076e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010776:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801077a:	e087      	b.n	801088c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	ee07 3a90 	vmov	s15, r3
 8010782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010786:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801078a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801078e:	4b6a      	ldr	r3, [pc, #424]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010796:	ee07 3a90 	vmov	s15, r3
 801079a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801079e:	ed97 6a03 	vldr	s12, [r7, #12]
 80107a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80107a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80107be:	e065      	b.n	801088c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	ee07 3a90 	vmov	s15, r3
 80107c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80107ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80107ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80107d2:	4b59      	ldr	r3, [pc, #356]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80107d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107da:	ee07 3a90 	vmov	s15, r3
 80107de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80107e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80107e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80107ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80107ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80107f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80107f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010802:	e043      	b.n	801088c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	ee07 3a90 	vmov	s15, r3
 801080a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801080e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801094c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010816:	4b48      	ldr	r3, [pc, #288]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801081a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801081e:	ee07 3a90 	vmov	s15, r3
 8010822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010826:	ed97 6a03 	vldr	s12, [r7, #12]
 801082a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801082e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801083a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801083e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010846:	e021      	b.n	801088c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	ee07 3a90 	vmov	s15, r3
 801084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010852:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801085a:	4b37      	ldr	r3, [pc, #220]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801085c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801085e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010862:	ee07 3a90 	vmov	s15, r3
 8010866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801086a:	ed97 6a03 	vldr	s12, [r7, #12]
 801086e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801087a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801087e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801088a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801088c:	4b2a      	ldr	r3, [pc, #168]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801088e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010890:	0a5b      	lsrs	r3, r3, #9
 8010892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010896:	ee07 3a90 	vmov	s15, r3
 801089a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801089e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80108a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80108a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80108aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108b2:	ee17 2a90 	vmov	r2, s15
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80108ba:	4b1f      	ldr	r3, [pc, #124]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108be:	0c1b      	lsrs	r3, r3, #16
 80108c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108c4:	ee07 3a90 	vmov	s15, r3
 80108c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80108d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80108d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80108d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108e0:	ee17 2a90 	vmov	r2, s15
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80108e8:	4b13      	ldr	r3, [pc, #76]	@ (8010938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ec:	0e1b      	lsrs	r3, r3, #24
 80108ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108f2:	ee07 3a90 	vmov	s15, r3
 80108f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80108fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010902:	edd7 6a07 	vldr	s13, [r7, #28]
 8010906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801090a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801090e:	ee17 2a90 	vmov	r2, s15
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010916:	e008      	b.n	801092a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	609a      	str	r2, [r3, #8]
}
 801092a:	bf00      	nop
 801092c:	3724      	adds	r7, #36	@ 0x24
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	58024400 	.word	0x58024400
 801093c:	03d09000 	.word	0x03d09000
 8010940:	46000000 	.word	0x46000000
 8010944:	4c742400 	.word	0x4c742400
 8010948:	4a742400 	.word	0x4a742400
 801094c:	4bb71b00 	.word	0x4bb71b00

08010950 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010950:	b480      	push	{r7}
 8010952:	b089      	sub	sp, #36	@ 0x24
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010958:	4ba1      	ldr	r3, [pc, #644]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801095a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801095c:	f003 0303 	and.w	r3, r3, #3
 8010960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010962:	4b9f      	ldr	r3, [pc, #636]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010966:	0d1b      	lsrs	r3, r3, #20
 8010968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801096c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801096e:	4b9c      	ldr	r3, [pc, #624]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010972:	0a1b      	lsrs	r3, r3, #8
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801097a:	4b99      	ldr	r3, [pc, #612]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801097e:	08db      	lsrs	r3, r3, #3
 8010980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010984:	693a      	ldr	r2, [r7, #16]
 8010986:	fb02 f303 	mul.w	r3, r2, r3
 801098a:	ee07 3a90 	vmov	s15, r3
 801098e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 8111 	beq.w	8010bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801099e:	69bb      	ldr	r3, [r7, #24]
 80109a0:	2b02      	cmp	r3, #2
 80109a2:	f000 8083 	beq.w	8010aac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	f200 80a1 	bhi.w	8010af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d003      	beq.n	80109bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	d056      	beq.n	8010a68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80109ba:	e099      	b.n	8010af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80109bc:	4b88      	ldr	r3, [pc, #544]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	f003 0320 	and.w	r3, r3, #32
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d02d      	beq.n	8010a24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80109c8:	4b85      	ldr	r3, [pc, #532]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	08db      	lsrs	r3, r3, #3
 80109ce:	f003 0303 	and.w	r3, r3, #3
 80109d2:	4a84      	ldr	r2, [pc, #528]	@ (8010be4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80109d4:	fa22 f303 	lsr.w	r3, r2, r3
 80109d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	ee07 3a90 	vmov	s15, r3
 80109e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	ee07 3a90 	vmov	s15, r3
 80109ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109f2:	4b7b      	ldr	r3, [pc, #492]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80109f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109fa:	ee07 3a90 	vmov	s15, r3
 80109fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010a22:	e087      	b.n	8010b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	ee07 3a90 	vmov	s15, r3
 8010a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010bec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a36:	4b6a      	ldr	r3, [pc, #424]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a3e:	ee07 3a90 	vmov	s15, r3
 8010a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a66:	e065      	b.n	8010b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	ee07 3a90 	vmov	s15, r3
 8010a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a7a:	4b59      	ldr	r3, [pc, #356]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a82:	ee07 3a90 	vmov	s15, r3
 8010a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010aaa:	e043      	b.n	8010b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	ee07 3a90 	vmov	s15, r3
 8010ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010abe:	4b48      	ldr	r3, [pc, #288]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ac6:	ee07 3a90 	vmov	s15, r3
 8010aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010aee:	e021      	b.n	8010b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	ee07 3a90 	vmov	s15, r3
 8010af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b02:	4b37      	ldr	r3, [pc, #220]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b0a:	ee07 3a90 	vmov	s15, r3
 8010b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010b34:	4b2a      	ldr	r3, [pc, #168]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b38:	0a5b      	lsrs	r3, r3, #9
 8010b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b3e:	ee07 3a90 	vmov	s15, r3
 8010b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b5a:	ee17 2a90 	vmov	r2, s15
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010b62:	4b1f      	ldr	r3, [pc, #124]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b66:	0c1b      	lsrs	r3, r3, #16
 8010b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b6c:	ee07 3a90 	vmov	s15, r3
 8010b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010b88:	ee17 2a90 	vmov	r2, s15
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010b90:	4b13      	ldr	r3, [pc, #76]	@ (8010be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b94:	0e1b      	lsrs	r3, r3, #24
 8010b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b9a:	ee07 3a90 	vmov	s15, r3
 8010b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010bb6:	ee17 2a90 	vmov	r2, s15
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010bbe:	e008      	b.n	8010bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	609a      	str	r2, [r3, #8]
}
 8010bd2:	bf00      	nop
 8010bd4:	3724      	adds	r7, #36	@ 0x24
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	58024400 	.word	0x58024400
 8010be4:	03d09000 	.word	0x03d09000
 8010be8:	46000000 	.word	0x46000000
 8010bec:	4c742400 	.word	0x4c742400
 8010bf0:	4a742400 	.word	0x4a742400
 8010bf4:	4bb71b00 	.word	0x4bb71b00

08010bf8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b089      	sub	sp, #36	@ 0x24
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010c00:	4ba0      	ldr	r3, [pc, #640]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c04:	f003 0303 	and.w	r3, r3, #3
 8010c08:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c0e:	091b      	lsrs	r3, r3, #4
 8010c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010c14:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010c16:	4b9b      	ldr	r3, [pc, #620]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010c20:	4b98      	ldr	r3, [pc, #608]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c24:	08db      	lsrs	r3, r3, #3
 8010c26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c2a:	693a      	ldr	r2, [r7, #16]
 8010c2c:	fb02 f303 	mul.w	r3, r2, r3
 8010c30:	ee07 3a90 	vmov	s15, r3
 8010c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	f000 8111 	beq.w	8010e66 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	2b02      	cmp	r3, #2
 8010c48:	f000 8083 	beq.w	8010d52 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	f200 80a1 	bhi.w	8010d96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d003      	beq.n	8010c62 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010c5a:	69bb      	ldr	r3, [r7, #24]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d056      	beq.n	8010d0e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010c60:	e099      	b.n	8010d96 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c62:	4b88      	ldr	r3, [pc, #544]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f003 0320 	and.w	r3, r3, #32
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d02d      	beq.n	8010cca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c6e:	4b85      	ldr	r3, [pc, #532]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	08db      	lsrs	r3, r3, #3
 8010c74:	f003 0303 	and.w	r3, r3, #3
 8010c78:	4a83      	ldr	r2, [pc, #524]	@ (8010e88 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8010c7e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	ee07 3a90 	vmov	s15, r3
 8010c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	ee07 3a90 	vmov	s15, r3
 8010c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c98:	4b7a      	ldr	r3, [pc, #488]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ca0:	ee07 3a90 	vmov	s15, r3
 8010ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010cc8:	e087      	b.n	8010dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	ee07 3a90 	vmov	s15, r3
 8010cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cd4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010e90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cdc:	4b69      	ldr	r3, [pc, #420]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ce4:	ee07 3a90 	vmov	s15, r3
 8010ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cf0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d0c:	e065      	b.n	8010dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	ee07 3a90 	vmov	s15, r3
 8010d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d18:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8010e94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d20:	4b58      	ldr	r3, [pc, #352]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d28:	ee07 3a90 	vmov	s15, r3
 8010d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d34:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d50:	e043      	b.n	8010dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	ee07 3a90 	vmov	s15, r3
 8010d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d5c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d64:	4b47      	ldr	r3, [pc, #284]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d6c:	ee07 3a90 	vmov	s15, r3
 8010d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d78:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d94:	e021      	b.n	8010dda <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	ee07 3a90 	vmov	s15, r3
 8010d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010da0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010e90 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010da8:	4b36      	ldr	r3, [pc, #216]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010db0:	ee07 3a90 	vmov	s15, r3
 8010db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dbc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010e8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010dd8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010dda:	4b2a      	ldr	r3, [pc, #168]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dde:	0a5b      	lsrs	r3, r3, #9
 8010de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010de4:	ee07 3a90 	vmov	s15, r3
 8010de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e00:	ee17 2a90 	vmov	r2, s15
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010e08:	4b1e      	ldr	r3, [pc, #120]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e0c:	0c1b      	lsrs	r3, r3, #16
 8010e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e12:	ee07 3a90 	vmov	s15, r3
 8010e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e2e:	ee17 2a90 	vmov	r2, s15
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010e36:	4b13      	ldr	r3, [pc, #76]	@ (8010e84 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e3a:	0e1b      	lsrs	r3, r3, #24
 8010e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e40:	ee07 3a90 	vmov	s15, r3
 8010e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e5c:	ee17 2a90 	vmov	r2, s15
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010e64:	e008      	b.n	8010e78 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	609a      	str	r2, [r3, #8]
}
 8010e78:	bf00      	nop
 8010e7a:	3724      	adds	r7, #36	@ 0x24
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	58024400 	.word	0x58024400
 8010e88:	03d09000 	.word	0x03d09000
 8010e8c:	46000000 	.word	0x46000000
 8010e90:	4c742400 	.word	0x4c742400
 8010e94:	4a742400 	.word	0x4a742400
 8010e98:	4bb71b00 	.word	0x4bb71b00

08010e9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010eaa:	4b53      	ldr	r3, [pc, #332]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eae:	f003 0303 	and.w	r3, r3, #3
 8010eb2:	2b03      	cmp	r3, #3
 8010eb4:	d101      	bne.n	8010eba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e099      	b.n	8010fee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010eba:	4b4f      	ldr	r3, [pc, #316]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010ec0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010ec6:	f7f6 ff39 	bl	8007d3c <HAL_GetTick>
 8010eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010ecc:	e008      	b.n	8010ee0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010ece:	f7f6 ff35 	bl	8007d3c <HAL_GetTick>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d901      	bls.n	8010ee0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010edc:	2303      	movs	r3, #3
 8010ede:	e086      	b.n	8010fee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010ee0:	4b45      	ldr	r3, [pc, #276]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1f0      	bne.n	8010ece <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010eec:	4b42      	ldr	r3, [pc, #264]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ef0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	031b      	lsls	r3, r3, #12
 8010efa:	493f      	ldr	r1, [pc, #252]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010efc:	4313      	orrs	r3, r2
 8010efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	689b      	ldr	r3, [r3, #8]
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	025b      	lsls	r3, r3, #9
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	431a      	orrs	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	041b      	lsls	r3, r3, #16
 8010f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010f22:	431a      	orrs	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	3b01      	subs	r3, #1
 8010f2a:	061b      	lsls	r3, r3, #24
 8010f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010f30:	4931      	ldr	r1, [pc, #196]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f32:	4313      	orrs	r3, r2
 8010f34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010f36:	4b30      	ldr	r3, [pc, #192]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	492d      	ldr	r1, [pc, #180]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f44:	4313      	orrs	r3, r2
 8010f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010f48:	4b2b      	ldr	r3, [pc, #172]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f4c:	f023 0220 	bic.w	r2, r3, #32
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	699b      	ldr	r3, [r3, #24]
 8010f54:	4928      	ldr	r1, [pc, #160]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f56:	4313      	orrs	r3, r2
 8010f58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010f5a:	4b27      	ldr	r3, [pc, #156]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f5e:	4a26      	ldr	r2, [pc, #152]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f60:	f023 0310 	bic.w	r3, r3, #16
 8010f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010f66:	4b24      	ldr	r3, [pc, #144]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010f6a:	4b24      	ldr	r3, [pc, #144]	@ (8010ffc <RCCEx_PLL2_Config+0x160>)
 8010f6c:	4013      	ands	r3, r2
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	69d2      	ldr	r2, [r2, #28]
 8010f72:	00d2      	lsls	r2, r2, #3
 8010f74:	4920      	ldr	r1, [pc, #128]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f76:	4313      	orrs	r3, r2
 8010f78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f80:	f043 0310 	orr.w	r3, r3, #16
 8010f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d106      	bne.n	8010f9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f90:	4a19      	ldr	r2, [pc, #100]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010f98:	e00f      	b.n	8010fba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d106      	bne.n	8010fae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010fa0:	4b15      	ldr	r3, [pc, #84]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa4:	4a14      	ldr	r2, [pc, #80]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010fac:	e005      	b.n	8010fba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010fae:	4b12      	ldr	r3, [pc, #72]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb2:	4a11      	ldr	r2, [pc, #68]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010fba:	4b0f      	ldr	r3, [pc, #60]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fc6:	f7f6 feb9 	bl	8007d3c <HAL_GetTick>
 8010fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010fcc:	e008      	b.n	8010fe0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010fce:	f7f6 feb5 	bl	8007d3c <HAL_GetTick>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	1ad3      	subs	r3, r2, r3
 8010fd8:	2b02      	cmp	r3, #2
 8010fda:	d901      	bls.n	8010fe0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e006      	b.n	8010fee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010fe0:	4b05      	ldr	r3, [pc, #20]	@ (8010ff8 <RCCEx_PLL2_Config+0x15c>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d0f0      	beq.n	8010fce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	58024400 	.word	0x58024400
 8010ffc:	ffff0007 	.word	0xffff0007

08011000 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801100e:	4b53      	ldr	r3, [pc, #332]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011012:	f003 0303 	and.w	r3, r3, #3
 8011016:	2b03      	cmp	r3, #3
 8011018:	d101      	bne.n	801101e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801101a:	2301      	movs	r3, #1
 801101c:	e099      	b.n	8011152 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801101e:	4b4f      	ldr	r3, [pc, #316]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a4e      	ldr	r2, [pc, #312]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011024:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801102a:	f7f6 fe87 	bl	8007d3c <HAL_GetTick>
 801102e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011030:	e008      	b.n	8011044 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011032:	f7f6 fe83 	bl	8007d3c <HAL_GetTick>
 8011036:	4602      	mov	r2, r0
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	2b02      	cmp	r3, #2
 801103e:	d901      	bls.n	8011044 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011040:	2303      	movs	r3, #3
 8011042:	e086      	b.n	8011152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011044:	4b45      	ldr	r3, [pc, #276]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1f0      	bne.n	8011032 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011050:	4b42      	ldr	r3, [pc, #264]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011054:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	051b      	lsls	r3, r3, #20
 801105e:	493f      	ldr	r1, [pc, #252]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011060:	4313      	orrs	r3, r2
 8011062:	628b      	str	r3, [r1, #40]	@ 0x28
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	3b01      	subs	r3, #1
 801106a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	3b01      	subs	r3, #1
 8011074:	025b      	lsls	r3, r3, #9
 8011076:	b29b      	uxth	r3, r3
 8011078:	431a      	orrs	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	3b01      	subs	r3, #1
 8011080:	041b      	lsls	r3, r3, #16
 8011082:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011086:	431a      	orrs	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	3b01      	subs	r3, #1
 801108e:	061b      	lsls	r3, r3, #24
 8011090:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011094:	4931      	ldr	r1, [pc, #196]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011096:	4313      	orrs	r3, r2
 8011098:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801109a:	4b30      	ldr	r3, [pc, #192]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 801109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801109e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	695b      	ldr	r3, [r3, #20]
 80110a6:	492d      	ldr	r1, [pc, #180]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110a8:	4313      	orrs	r3, r2
 80110aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80110ac:	4b2b      	ldr	r3, [pc, #172]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	699b      	ldr	r3, [r3, #24]
 80110b8:	4928      	ldr	r1, [pc, #160]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110ba:	4313      	orrs	r3, r2
 80110bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80110be:	4b27      	ldr	r3, [pc, #156]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c2:	4a26      	ldr	r2, [pc, #152]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80110ca:	4b24      	ldr	r3, [pc, #144]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110ce:	4b24      	ldr	r3, [pc, #144]	@ (8011160 <RCCEx_PLL3_Config+0x160>)
 80110d0:	4013      	ands	r3, r2
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	69d2      	ldr	r2, [r2, #28]
 80110d6:	00d2      	lsls	r2, r2, #3
 80110d8:	4920      	ldr	r1, [pc, #128]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110da:	4313      	orrs	r3, r2
 80110dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80110de:	4b1f      	ldr	r3, [pc, #124]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e2:	4a1e      	ldr	r2, [pc, #120]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80110e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d106      	bne.n	80110fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80110f0:	4b1a      	ldr	r3, [pc, #104]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f4:	4a19      	ldr	r2, [pc, #100]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 80110f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80110fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80110fc:	e00f      	b.n	801111e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d106      	bne.n	8011112 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011104:	4b15      	ldr	r3, [pc, #84]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011108:	4a14      	ldr	r2, [pc, #80]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 801110a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801110e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011110:	e005      	b.n	801111e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011112:	4b12      	ldr	r3, [pc, #72]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011116:	4a11      	ldr	r2, [pc, #68]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801111c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801111e:	4b0f      	ldr	r3, [pc, #60]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a0e      	ldr	r2, [pc, #56]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801112a:	f7f6 fe07 	bl	8007d3c <HAL_GetTick>
 801112e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011130:	e008      	b.n	8011144 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011132:	f7f6 fe03 	bl	8007d3c <HAL_GetTick>
 8011136:	4602      	mov	r2, r0
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	2b02      	cmp	r3, #2
 801113e:	d901      	bls.n	8011144 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e006      	b.n	8011152 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011144:	4b05      	ldr	r3, [pc, #20]	@ (801115c <RCCEx_PLL3_Config+0x15c>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801114c:	2b00      	cmp	r3, #0
 801114e:	d0f0      	beq.n	8011132 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011150:	7bfb      	ldrb	r3, [r7, #15]
}
 8011152:	4618      	mov	r0, r3
 8011154:	3710      	adds	r7, #16
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	58024400 	.word	0x58024400
 8011160:	ffff0007 	.word	0xffff0007

08011164 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e10f      	b.n	8011396 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a87      	ldr	r2, [pc, #540]	@ (80113a0 <HAL_SPI_Init+0x23c>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d00f      	beq.n	80111a6 <HAL_SPI_Init+0x42>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	4a86      	ldr	r2, [pc, #536]	@ (80113a4 <HAL_SPI_Init+0x240>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d00a      	beq.n	80111a6 <HAL_SPI_Init+0x42>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	4a84      	ldr	r2, [pc, #528]	@ (80113a8 <HAL_SPI_Init+0x244>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d005      	beq.n	80111a6 <HAL_SPI_Init+0x42>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	2b0f      	cmp	r3, #15
 80111a0:	d901      	bls.n	80111a6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	e0f7      	b.n	8011396 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fef6 	bl	8011f98 <SPI_GetPacketSize>
 80111ac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	4a7b      	ldr	r2, [pc, #492]	@ (80113a0 <HAL_SPI_Init+0x23c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d00c      	beq.n	80111d2 <HAL_SPI_Init+0x6e>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4a79      	ldr	r2, [pc, #484]	@ (80113a4 <HAL_SPI_Init+0x240>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d007      	beq.n	80111d2 <HAL_SPI_Init+0x6e>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a78      	ldr	r2, [pc, #480]	@ (80113a8 <HAL_SPI_Init+0x244>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d002      	beq.n	80111d2 <HAL_SPI_Init+0x6e>
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b08      	cmp	r3, #8
 80111d0:	d811      	bhi.n	80111f6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80111d6:	4a72      	ldr	r2, [pc, #456]	@ (80113a0 <HAL_SPI_Init+0x23c>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d009      	beq.n	80111f0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a70      	ldr	r2, [pc, #448]	@ (80113a4 <HAL_SPI_Init+0x240>)
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d004      	beq.n	80111f0 <HAL_SPI_Init+0x8c>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a6f      	ldr	r2, [pc, #444]	@ (80113a8 <HAL_SPI_Init+0x244>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d104      	bne.n	80111fa <HAL_SPI_Init+0x96>
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2b10      	cmp	r3, #16
 80111f4:	d901      	bls.n	80111fa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80111f6:	2301      	movs	r3, #1
 80111f8:	e0cd      	b.n	8011396 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7f1 fa3a 	bl	8002688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2202      	movs	r2, #2
 8011218:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f022 0201 	bic.w	r2, r2, #1
 801122a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8011236:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011240:	d119      	bne.n	8011276 <HAL_SPI_Init+0x112>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801124a:	d103      	bne.n	8011254 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011250:	2b00      	cmp	r3, #0
 8011252:	d008      	beq.n	8011266 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10c      	bne.n	8011276 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011264:	d107      	bne.n	8011276 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011274:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00f      	beq.n	80112a2 <HAL_SPI_Init+0x13e>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	2b06      	cmp	r3, #6
 8011288:	d90b      	bls.n	80112a2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	430a      	orrs	r2, r1
 801129e:	601a      	str	r2, [r3, #0]
 80112a0:	e007      	b.n	80112b2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80112b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	69da      	ldr	r2, [r3, #28]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112ba:	431a      	orrs	r2, r3
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	431a      	orrs	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112c4:	ea42 0103 	orr.w	r1, r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68da      	ldr	r2, [r3, #12]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112dc:	431a      	orrs	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e2:	431a      	orrs	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	699b      	ldr	r3, [r3, #24]
 80112e8:	431a      	orrs	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	431a      	orrs	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	431a      	orrs	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6a1b      	ldr	r3, [r3, #32]
 80112fa:	431a      	orrs	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	431a      	orrs	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011306:	431a      	orrs	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	431a      	orrs	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011312:	ea42 0103 	orr.w	r1, r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	430a      	orrs	r2, r1
 8011320:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d113      	bne.n	8011352 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801133c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011350:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f022 0201 	bic.w	r2, r2, #1
 8011360:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	430a      	orrs	r2, r1
 8011382:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2201      	movs	r2, #1
 8011390:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	40013000 	.word	0x40013000
 80113a4:	40003800 	.word	0x40003800
 80113a8:	40003c00 	.word	0x40003c00

080113ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b088      	sub	sp, #32
 80113b0:	af02      	add	r7, sp, #8
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	603b      	str	r3, [r7, #0]
 80113b8:	4613      	mov	r3, r2
 80113ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	3320      	adds	r3, #32
 80113c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113c4:	f7f6 fcba 	bl	8007d3c <HAL_GetTick>
 80113c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d001      	beq.n	80113da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80113d6:	2302      	movs	r3, #2
 80113d8:	e1d1      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80113da:	68bb      	ldr	r3, [r7, #8]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <HAL_SPI_Transmit+0x3a>
 80113e0:	88fb      	ldrh	r3, [r7, #6]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e1c9      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d101      	bne.n	80113f8 <HAL_SPI_Transmit+0x4c>
 80113f4:	2302      	movs	r3, #2
 80113f6:	e1c2      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2203      	movs	r2, #3
 8011404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2200      	movs	r2, #0
 801140c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	88fa      	ldrh	r2, [r7, #6]
 801141a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	88fa      	ldrh	r2, [r7, #6]
 8011422:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2200      	movs	r2, #0
 801142a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2200      	movs	r2, #0
 8011430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2200      	movs	r2, #0
 8011438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2200      	movs	r2, #0
 8011440:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2200      	movs	r2, #0
 8011446:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	689b      	ldr	r3, [r3, #8]
 801144c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011450:	d108      	bne.n	8011464 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011460:	601a      	str	r2, [r3, #0]
 8011462:	e009      	b.n	8011478 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011476:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	685a      	ldr	r2, [r3, #4]
 801147e:	4b96      	ldr	r3, [pc, #600]	@ (80116d8 <HAL_SPI_Transmit+0x32c>)
 8011480:	4013      	ands	r3, r2
 8011482:	88f9      	ldrh	r1, [r7, #6]
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	6812      	ldr	r2, [r2, #0]
 8011488:	430b      	orrs	r3, r1
 801148a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f042 0201 	orr.w	r2, r2, #1
 801149a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80114a4:	d107      	bne.n	80114b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	681a      	ldr	r2, [r3, #0]
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80114b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	2b0f      	cmp	r3, #15
 80114bc:	d947      	bls.n	801154e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80114be:	e03f      	b.n	8011540 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	695b      	ldr	r3, [r3, #20]
 80114c6:	f003 0302 	and.w	r3, r3, #2
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d114      	bne.n	80114f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	6812      	ldr	r2, [r2, #0]
 80114d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80114de:	1d1a      	adds	r2, r3, #4
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	3b01      	subs	r3, #1
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80114f6:	e023      	b.n	8011540 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80114f8:	f7f6 fc20 	bl	8007d3c <HAL_GetTick>
 80114fc:	4602      	mov	r2, r0
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	429a      	cmp	r2, r3
 8011506:	d803      	bhi.n	8011510 <HAL_SPI_Transmit+0x164>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150e:	d102      	bne.n	8011516 <HAL_SPI_Transmit+0x16a>
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d114      	bne.n	8011540 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f000 fc70 	bl	8011dfc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011522:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2201      	movs	r2, #1
 8011530:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2200      	movs	r2, #0
 8011538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801153c:	2303      	movs	r3, #3
 801153e:	e11e      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011546:	b29b      	uxth	r3, r3
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1b9      	bne.n	80114c0 <HAL_SPI_Transmit+0x114>
 801154c:	e0f1      	b.n	8011732 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	2b07      	cmp	r3, #7
 8011554:	f240 80e6 	bls.w	8011724 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011558:	e05d      	b.n	8011616 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	f003 0302 	and.w	r3, r3, #2
 8011564:	2b02      	cmp	r3, #2
 8011566:	d132      	bne.n	80115ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801156e:	b29b      	uxth	r3, r3
 8011570:	2b01      	cmp	r3, #1
 8011572:	d918      	bls.n	80115a6 <HAL_SPI_Transmit+0x1fa>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011578:	2b00      	cmp	r3, #0
 801157a:	d014      	beq.n	80115a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	6812      	ldr	r2, [r2, #0]
 8011586:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801158c:	1d1a      	adds	r2, r3, #4
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011598:	b29b      	uxth	r3, r3
 801159a:	3b02      	subs	r3, #2
 801159c:	b29a      	uxth	r2, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80115a4:	e037      	b.n	8011616 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115aa:	881a      	ldrh	r2, [r3, #0]
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80115b4:	1c9a      	adds	r2, r3, #2
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	3b01      	subs	r3, #1
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80115cc:	e023      	b.n	8011616 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115ce:	f7f6 fbb5 	bl	8007d3c <HAL_GetTick>
 80115d2:	4602      	mov	r2, r0
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	1ad3      	subs	r3, r2, r3
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d803      	bhi.n	80115e6 <HAL_SPI_Transmit+0x23a>
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e4:	d102      	bne.n	80115ec <HAL_SPI_Transmit+0x240>
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d114      	bne.n	8011616 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f000 fc05 	bl	8011dfc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80115f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2200      	movs	r2, #0
 801160e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011612:	2303      	movs	r3, #3
 8011614:	e0b3      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801161c:	b29b      	uxth	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	d19b      	bne.n	801155a <HAL_SPI_Transmit+0x1ae>
 8011622:	e086      	b.n	8011732 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	695b      	ldr	r3, [r3, #20]
 801162a:	f003 0302 	and.w	r3, r3, #2
 801162e:	2b02      	cmp	r3, #2
 8011630:	d154      	bne.n	80116dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011638:	b29b      	uxth	r3, r3
 801163a:	2b03      	cmp	r3, #3
 801163c:	d918      	bls.n	8011670 <HAL_SPI_Transmit+0x2c4>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011642:	2b40      	cmp	r3, #64	@ 0x40
 8011644:	d914      	bls.n	8011670 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	6812      	ldr	r2, [r2, #0]
 8011650:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011656:	1d1a      	adds	r2, r3, #4
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011662:	b29b      	uxth	r3, r3
 8011664:	3b04      	subs	r3, #4
 8011666:	b29a      	uxth	r2, r3
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801166e:	e059      	b.n	8011724 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011676:	b29b      	uxth	r3, r3
 8011678:	2b01      	cmp	r3, #1
 801167a:	d917      	bls.n	80116ac <HAL_SPI_Transmit+0x300>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011680:	2b00      	cmp	r3, #0
 8011682:	d013      	beq.n	80116ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011688:	881a      	ldrh	r2, [r3, #0]
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011692:	1c9a      	adds	r2, r3, #2
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801169e:	b29b      	uxth	r3, r3
 80116a0:	3b02      	subs	r3, #2
 80116a2:	b29a      	uxth	r2, r3
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80116aa:	e03b      	b.n	8011724 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	3320      	adds	r3, #32
 80116b6:	7812      	ldrb	r2, [r2, #0]
 80116b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	3b01      	subs	r3, #1
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80116d6:	e025      	b.n	8011724 <HAL_SPI_Transmit+0x378>
 80116d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116dc:	f7f6 fb2e 	bl	8007d3c <HAL_GetTick>
 80116e0:	4602      	mov	r2, r0
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d803      	bhi.n	80116f4 <HAL_SPI_Transmit+0x348>
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f2:	d102      	bne.n	80116fa <HAL_SPI_Transmit+0x34e>
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d114      	bne.n	8011724 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f000 fb7e 	bl	8011dfc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2201      	movs	r2, #1
 8011714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011720:	2303      	movs	r3, #3
 8011722:	e02c      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801172a:	b29b      	uxth	r3, r3
 801172c:	2b00      	cmp	r3, #0
 801172e:	f47f af79 	bne.w	8011624 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	9300      	str	r3, [sp, #0]
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	2200      	movs	r2, #0
 801173a:	2108      	movs	r1, #8
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f000 fbfd 	bl	8011f3c <SPI_WaitOnFlagUntilTimeout>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	d007      	beq.n	8011758 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801174e:	f043 0220 	orr.w	r2, r3, #32
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f000 fb4f 	bl	8011dfc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2201      	movs	r2, #1
 8011762:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2200      	movs	r2, #0
 801176a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011778:	2301      	movs	r3, #1
 801177a:	e000      	b.n	801177e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801177c:	2300      	movs	r3, #0
  }
}
 801177e:	4618      	mov	r0, r3
 8011780:	3718      	adds	r7, #24
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop

08011788 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b08e      	sub	sp, #56	@ 0x38
 801178c:	af02      	add	r7, sp, #8
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
 8011794:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	3320      	adds	r3, #32
 801179c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3330      	adds	r3, #48	@ 0x30
 80117a4:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117aa:	095b      	lsrs	r3, r3, #5
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	3301      	adds	r3, #1
 80117b0:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80117b2:	f7f6 fac3 	bl	8007d3c <HAL_GetTick>
 80117b6:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80117b8:	887b      	ldrh	r3, [r7, #2]
 80117ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80117bc:	887b      	ldrh	r3, [r7, #2]
 80117be:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d001      	beq.n	80117d0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80117cc:	2302      	movs	r3, #2
 80117ce:	e310      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d005      	beq.n	80117e2 <HAL_SPI_TransmitReceive+0x5a>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <HAL_SPI_TransmitReceive+0x5a>
 80117dc:	887b      	ldrh	r3, [r7, #2]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d101      	bne.n	80117e6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80117e2:	2301      	movs	r3, #1
 80117e4:	e305      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d101      	bne.n	80117f4 <HAL_SPI_TransmitReceive+0x6c>
 80117f0:	2302      	movs	r3, #2
 80117f2:	e2fe      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2201      	movs	r2, #1
 80117f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2205      	movs	r2, #5
 8011800:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2200      	movs	r2, #0
 8011808:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	887a      	ldrh	r2, [r7, #2]
 8011816:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	887a      	ldrh	r2, [r7, #2]
 801181e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	68ba      	ldr	r2, [r7, #8]
 8011826:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	887a      	ldrh	r2, [r7, #2]
 801182c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	887a      	ldrh	r2, [r7, #2]
 8011834:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2200      	movs	r2, #0
 801183c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2200      	movs	r2, #0
 8011842:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	68da      	ldr	r2, [r3, #12]
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8011852:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a70      	ldr	r2, [pc, #448]	@ (8011a1c <HAL_SPI_TransmitReceive+0x294>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d009      	beq.n	8011872 <HAL_SPI_TransmitReceive+0xea>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	4a6f      	ldr	r2, [pc, #444]	@ (8011a20 <HAL_SPI_TransmitReceive+0x298>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d004      	beq.n	8011872 <HAL_SPI_TransmitReceive+0xea>
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a6d      	ldr	r2, [pc, #436]	@ (8011a24 <HAL_SPI_TransmitReceive+0x29c>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d102      	bne.n	8011878 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8011872:	2310      	movs	r3, #16
 8011874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011876:	e001      	b.n	801187c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8011878:	2308      	movs	r3, #8
 801187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	4b69      	ldr	r3, [pc, #420]	@ (8011a28 <HAL_SPI_TransmitReceive+0x2a0>)
 8011884:	4013      	ands	r3, r2
 8011886:	8879      	ldrh	r1, [r7, #2]
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	6812      	ldr	r2, [r2, #0]
 801188c:	430b      	orrs	r3, r1
 801188e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	f042 0201 	orr.w	r2, r2, #1
 801189e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80118a8:	d107      	bne.n	80118ba <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80118b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	2b0f      	cmp	r3, #15
 80118c0:	f240 80a2 	bls.w	8011a08 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80118c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c6:	089b      	lsrs	r3, r3, #2
 80118c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80118ca:	e094      	b.n	80119f6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	695b      	ldr	r3, [r3, #20]
 80118d2:	f003 0302 	and.w	r3, r3, #2
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d120      	bne.n	801191c <HAL_SPI_TransmitReceive+0x194>
 80118da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d01d      	beq.n	801191c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80118e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80118e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80118e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d217      	bcs.n	801191c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	6812      	ldr	r2, [r2, #0]
 80118f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80118fc:	1d1a      	adds	r2, r3, #4
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011908:	b29b      	uxth	r3, r3
 801190a:	3b01      	subs	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801191a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011924:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011926:	2b00      	cmp	r3, #0
 8011928:	d065      	beq.n	80119f6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	f003 0301 	and.w	r3, r3, #1
 8011934:	2b01      	cmp	r3, #1
 8011936:	d118      	bne.n	801196a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011942:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011948:	1d1a      	adds	r2, r3, #4
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011954:	b29b      	uxth	r3, r3
 8011956:	3b01      	subs	r3, #1
 8011958:	b29a      	uxth	r2, r3
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011966:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011968:	e045      	b.n	80119f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801196a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801196c:	8bfb      	ldrh	r3, [r7, #30]
 801196e:	429a      	cmp	r2, r3
 8011970:	d21d      	bcs.n	80119ae <HAL_SPI_TransmitReceive+0x226>
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011978:	2b00      	cmp	r3, #0
 801197a:	d018      	beq.n	80119ae <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011984:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011986:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801198c:	1d1a      	adds	r2, r3, #4
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011998:	b29b      	uxth	r3, r3
 801199a:	3b01      	subs	r3, #1
 801199c:	b29a      	uxth	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80119aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80119ac:	e023      	b.n	80119f6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80119ae:	f7f6 f9c5 	bl	8007d3c <HAL_GetTick>
 80119b2:	4602      	mov	r2, r0
 80119b4:	69bb      	ldr	r3, [r7, #24]
 80119b6:	1ad3      	subs	r3, r2, r3
 80119b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d803      	bhi.n	80119c6 <HAL_SPI_TransmitReceive+0x23e>
 80119be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c4:	d102      	bne.n	80119cc <HAL_SPI_TransmitReceive+0x244>
 80119c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d114      	bne.n	80119f6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f000 fa15 	bl	8011dfc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80119d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2201      	movs	r2, #1
 80119e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80119f2:	2303      	movs	r3, #3
 80119f4:	e1fd      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80119f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	f47f af67 	bne.w	80118cc <HAL_SPI_TransmitReceive+0x144>
 80119fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f47f af63 	bne.w	80118cc <HAL_SPI_TransmitReceive+0x144>
 8011a06:	e1ce      	b.n	8011da6 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	2b07      	cmp	r3, #7
 8011a0e:	f240 81c2 	bls.w	8011d96 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8011a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a14:	085b      	lsrs	r3, r3, #1
 8011a16:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011a18:	e0c9      	b.n	8011bae <HAL_SPI_TransmitReceive+0x426>
 8011a1a:	bf00      	nop
 8011a1c:	40013000 	.word	0x40013000
 8011a20:	40003800 	.word	0x40003800
 8011a24:	40003c00 	.word	0x40003c00
 8011a28:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	695b      	ldr	r3, [r3, #20]
 8011a32:	f003 0302 	and.w	r3, r3, #2
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d11f      	bne.n	8011a7a <HAL_SPI_TransmitReceive+0x2f2>
 8011a3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d01c      	beq.n	8011a7a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011a40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011a42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d216      	bcs.n	8011a7a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a50:	881a      	ldrh	r2, [r3, #0]
 8011a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a54:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011a5a:	1c9a      	adds	r2, r3, #2
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a78:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	695b      	ldr	r3, [r3, #20]
 8011a80:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011a82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 8092 	beq.w	8011bae <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	695b      	ldr	r3, [r3, #20]
 8011a90:	f003 0301 	and.w	r3, r3, #1
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d118      	bne.n	8011aca <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a9c:	6a3a      	ldr	r2, [r7, #32]
 8011a9e:	8812      	ldrh	r2, [r2, #0]
 8011aa0:	b292      	uxth	r2, r2
 8011aa2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aa8:	1c9a      	adds	r2, r3, #2
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011ac6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011ac8:	e071      	b.n	8011bae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011aca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011acc:	8bfb      	ldrh	r3, [r7, #30]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d228      	bcs.n	8011b24 <HAL_SPI_TransmitReceive+0x39c>
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d023      	beq.n	8011b24 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ae0:	6a3a      	ldr	r2, [r7, #32]
 8011ae2:	8812      	ldrh	r2, [r2, #0]
 8011ae4:	b292      	uxth	r2, r2
 8011ae6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011aec:	1c9a      	adds	r2, r3, #2
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011af6:	6a3a      	ldr	r2, [r7, #32]
 8011af8:	8812      	ldrh	r2, [r2, #0]
 8011afa:	b292      	uxth	r2, r2
 8011afc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b02:	1c9a      	adds	r2, r3, #2
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	3b02      	subs	r3, #2
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b20:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b22:	e044      	b.n	8011bae <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8011b24:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d11d      	bne.n	8011b66 <HAL_SPI_TransmitReceive+0x3de>
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d018      	beq.n	8011b66 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b38:	6a3a      	ldr	r2, [r7, #32]
 8011b3a:	8812      	ldrh	r2, [r2, #0]
 8011b3c:	b292      	uxth	r2, r2
 8011b3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b44:	1c9a      	adds	r2, r3, #2
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	3b01      	subs	r3, #1
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011b62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011b64:	e023      	b.n	8011bae <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b66:	f7f6 f8e9 	bl	8007d3c <HAL_GetTick>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d803      	bhi.n	8011b7e <HAL_SPI_TransmitReceive+0x3f6>
 8011b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7c:	d102      	bne.n	8011b84 <HAL_SPI_TransmitReceive+0x3fc>
 8011b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d114      	bne.n	8011bae <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f000 f939 	bl	8011dfc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011baa:	2303      	movs	r3, #3
 8011bac:	e121      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011bae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	f47f af3b 	bne.w	8011a2c <HAL_SPI_TransmitReceive+0x2a4>
 8011bb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f47f af37 	bne.w	8011a2c <HAL_SPI_TransmitReceive+0x2a4>
 8011bbe:	e0f2      	b.n	8011da6 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	695b      	ldr	r3, [r3, #20]
 8011bc6:	f003 0302 	and.w	r3, r3, #2
 8011bca:	2b02      	cmp	r3, #2
 8011bcc:	d121      	bne.n	8011c12 <HAL_SPI_TransmitReceive+0x48a>
 8011bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d01e      	beq.n	8011c12 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8011bd4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011bd6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8011bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bda:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d218      	bcs.n	8011c12 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3320      	adds	r3, #32
 8011bea:	7812      	ldrb	r2, [r2, #0]
 8011bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011bf2:	1c5a      	adds	r2, r3, #1
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	3b01      	subs	r3, #1
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011c10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8011c1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 80ba 	beq.w	8011d96 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	f003 0301 	and.w	r3, r3, #1
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d11b      	bne.n	8011c68 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c3c:	7812      	ldrb	r2, [r2, #0]
 8011c3e:	b2d2      	uxtb	r2, r2
 8011c40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	3b01      	subs	r3, #1
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011c64:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011c66:	e096      	b.n	8011d96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8011c68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011c6a:	8bfb      	ldrh	r3, [r7, #30]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d24a      	bcs.n	8011d06 <HAL_SPI_TransmitReceive+0x57e>
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d045      	beq.n	8011d06 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c86:	7812      	ldrb	r2, [r2, #0]
 8011c88:	b2d2      	uxtb	r2, r2
 8011c8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c90:	1c5a      	adds	r2, r3, #1
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ca2:	7812      	ldrb	r2, [r2, #0]
 8011ca4:	b2d2      	uxtb	r2, r2
 8011ca6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cac:	1c5a      	adds	r2, r3, #1
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cbe:	7812      	ldrb	r2, [r2, #0]
 8011cc0:	b2d2      	uxtb	r2, r2
 8011cc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cc8:	1c5a      	adds	r2, r3, #1
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cda:	7812      	ldrb	r2, [r2, #0]
 8011cdc:	b2d2      	uxtb	r2, r2
 8011cde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	3b04      	subs	r3, #4
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011d04:	e047      	b.n	8011d96 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8011d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011d08:	2b03      	cmp	r3, #3
 8011d0a:	d820      	bhi.n	8011d4e <HAL_SPI_TransmitReceive+0x5c6>
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d01b      	beq.n	8011d4e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d22:	7812      	ldrb	r2, [r2, #0]
 8011d24:	b2d2      	uxtb	r2, r2
 8011d26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011d4c:	e023      	b.n	8011d96 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011d4e:	f7f5 fff5 	bl	8007d3c <HAL_GetTick>
 8011d52:	4602      	mov	r2, r0
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d803      	bhi.n	8011d66 <HAL_SPI_TransmitReceive+0x5de>
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d64:	d102      	bne.n	8011d6c <HAL_SPI_TransmitReceive+0x5e4>
 8011d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d114      	bne.n	8011d96 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f000 f845 	bl	8011dfc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2201      	movs	r2, #1
 8011d86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8011d92:	2303      	movs	r3, #3
 8011d94:	e02d      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011d96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f47f af11 	bne.w	8011bc0 <HAL_SPI_TransmitReceive+0x438>
 8011d9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	f47f af0d 	bne.w	8011bc0 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dac:	2200      	movs	r2, #0
 8011dae:	2108      	movs	r1, #8
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f000 f8c3 	bl	8011f3c <SPI_WaitOnFlagUntilTimeout>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d007      	beq.n	8011dcc <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011dc2:	f043 0220 	orr.w	r2, r3, #32
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f000 f815 	bl	8011dfc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d001      	beq.n	8011df0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e000      	b.n	8011df2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8011df0:	2300      	movs	r3, #0
  }
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3730      	adds	r7, #48	@ 0x30
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop

08011dfc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	695b      	ldr	r3, [r3, #20]
 8011e0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	699a      	ldr	r2, [r3, #24]
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f042 0208 	orr.w	r2, r2, #8
 8011e1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f042 0210 	orr.w	r2, r2, #16
 8011e2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f022 0201 	bic.w	r2, r2, #1
 8011e3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6919      	ldr	r1, [r3, #16]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	4b3c      	ldr	r3, [pc, #240]	@ (8011f38 <SPI_CloseTransfer+0x13c>)
 8011e48:	400b      	ands	r3, r1
 8011e4a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	689a      	ldr	r2, [r3, #8]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011e5a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	2b04      	cmp	r3, #4
 8011e66:	d014      	beq.n	8011e92 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f003 0320 	and.w	r3, r3, #32
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00f      	beq.n	8011e92 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	699a      	ldr	r2, [r3, #24]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f042 0220 	orr.w	r2, r2, #32
 8011e90:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b03      	cmp	r3, #3
 8011e9c:	d014      	beq.n	8011ec8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d00f      	beq.n	8011ec8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011eae:	f043 0204 	orr.w	r2, r3, #4
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	699a      	ldr	r2, [r3, #24]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ec6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00f      	beq.n	8011ef2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ed8:	f043 0201 	orr.w	r2, r3, #1
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	699a      	ldr	r2, [r3, #24]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ef0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d00f      	beq.n	8011f1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f02:	f043 0208 	orr.w	r2, r3, #8
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	699a      	ldr	r2, [r3, #24]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011f1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8011f2c:	bf00      	nop
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	fffffc90 	.word	0xfffffc90

08011f3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	603b      	str	r3, [r7, #0]
 8011f48:	4613      	mov	r3, r2
 8011f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011f4c:	e010      	b.n	8011f70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011f4e:	f7f5 fef5 	bl	8007d3c <HAL_GetTick>
 8011f52:	4602      	mov	r2, r0
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d803      	bhi.n	8011f66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f64:	d102      	bne.n	8011f6c <SPI_WaitOnFlagUntilTimeout+0x30>
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d101      	bne.n	8011f70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011f6c:	2303      	movs	r3, #3
 8011f6e:	e00f      	b.n	8011f90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	695a      	ldr	r2, [r3, #20]
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	4013      	ands	r3, r2
 8011f7a:	68ba      	ldr	r2, [r7, #8]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	bf0c      	ite	eq
 8011f80:	2301      	moveq	r3, #1
 8011f82:	2300      	movne	r3, #0
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	461a      	mov	r2, r3
 8011f88:	79fb      	ldrb	r3, [r7, #7]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d0df      	beq.n	8011f4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b085      	sub	sp, #20
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fa4:	095b      	lsrs	r3, r3, #5
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	3307      	adds	r3, #7
 8011fb6:	08db      	lsrs	r3, r3, #3
 8011fb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	fb02 f303 	mul.w	r3, r2, r3
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3714      	adds	r7, #20
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr

08011fce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d101      	bne.n	8011fe0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e049      	b.n	8012074 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f7f0 fc4f 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2202      	movs	r2, #2
 8011ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	3304      	adds	r3, #4
 801200a:	4619      	mov	r1, r3
 801200c:	4610      	mov	r0, r2
 801200e:	f001 f9d1 	bl	80133b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2201      	movs	r2, #1
 8012016:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2201      	movs	r2, #1
 801201e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2201      	movs	r2, #1
 8012026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2201      	movs	r2, #1
 801202e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2201      	movs	r2, #1
 8012036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2201      	movs	r2, #1
 801203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2201      	movs	r2, #1
 8012046:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2201      	movs	r2, #1
 801204e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2201      	movs	r2, #1
 8012056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2201      	movs	r2, #1
 801205e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2201      	movs	r2, #1
 8012066:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2201      	movs	r2, #1
 801206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b01      	cmp	r3, #1
 801208e:	d001      	beq.n	8012094 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012090:	2301      	movs	r3, #1
 8012092:	e056      	b.n	8012142 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2202      	movs	r2, #2
 8012098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	4a2b      	ldr	r2, [pc, #172]	@ (8012150 <HAL_TIM_Base_Start+0xd4>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d02c      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120ae:	d027      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	4a27      	ldr	r2, [pc, #156]	@ (8012154 <HAL_TIM_Base_Start+0xd8>)
 80120b6:	4293      	cmp	r3, r2
 80120b8:	d022      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	4a26      	ldr	r2, [pc, #152]	@ (8012158 <HAL_TIM_Base_Start+0xdc>)
 80120c0:	4293      	cmp	r3, r2
 80120c2:	d01d      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a24      	ldr	r2, [pc, #144]	@ (801215c <HAL_TIM_Base_Start+0xe0>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d018      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4a23      	ldr	r2, [pc, #140]	@ (8012160 <HAL_TIM_Base_Start+0xe4>)
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d013      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4a21      	ldr	r2, [pc, #132]	@ (8012164 <HAL_TIM_Base_Start+0xe8>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	d00e      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	4a20      	ldr	r2, [pc, #128]	@ (8012168 <HAL_TIM_Base_Start+0xec>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d009      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a1e      	ldr	r2, [pc, #120]	@ (801216c <HAL_TIM_Base_Start+0xf0>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d004      	beq.n	8012100 <HAL_TIM_Base_Start+0x84>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a1d      	ldr	r2, [pc, #116]	@ (8012170 <HAL_TIM_Base_Start+0xf4>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d115      	bne.n	801212c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	689a      	ldr	r2, [r3, #8]
 8012106:	4b1b      	ldr	r3, [pc, #108]	@ (8012174 <HAL_TIM_Base_Start+0xf8>)
 8012108:	4013      	ands	r3, r2
 801210a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b06      	cmp	r3, #6
 8012110:	d015      	beq.n	801213e <HAL_TIM_Base_Start+0xc2>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012118:	d011      	beq.n	801213e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f042 0201 	orr.w	r2, r2, #1
 8012128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801212a:	e008      	b.n	801213e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f042 0201 	orr.w	r2, r2, #1
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	e000      	b.n	8012140 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801213e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3714      	adds	r7, #20
 8012146:	46bd      	mov	sp, r7
 8012148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop
 8012150:	40010000 	.word	0x40010000
 8012154:	40000400 	.word	0x40000400
 8012158:	40000800 	.word	0x40000800
 801215c:	40000c00 	.word	0x40000c00
 8012160:	40010400 	.word	0x40010400
 8012164:	40001800 	.word	0x40001800
 8012168:	40014000 	.word	0x40014000
 801216c:	4000e000 	.word	0x4000e000
 8012170:	4000e400 	.word	0x4000e400
 8012174:	00010007 	.word	0x00010007

08012178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b01      	cmp	r3, #1
 801218a:	d001      	beq.n	8012190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801218c:	2301      	movs	r3, #1
 801218e:	e05e      	b.n	801224e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2202      	movs	r2, #2
 8012194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68da      	ldr	r2, [r3, #12]
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f042 0201 	orr.w	r2, r2, #1
 80121a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4a2b      	ldr	r2, [pc, #172]	@ (801225c <HAL_TIM_Base_Start_IT+0xe4>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d02c      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121ba:	d027      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4a27      	ldr	r2, [pc, #156]	@ (8012260 <HAL_TIM_Base_Start_IT+0xe8>)
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d022      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a26      	ldr	r2, [pc, #152]	@ (8012264 <HAL_TIM_Base_Start_IT+0xec>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d01d      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4a24      	ldr	r2, [pc, #144]	@ (8012268 <HAL_TIM_Base_Start_IT+0xf0>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d018      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4a23      	ldr	r2, [pc, #140]	@ (801226c <HAL_TIM_Base_Start_IT+0xf4>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d013      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4a21      	ldr	r2, [pc, #132]	@ (8012270 <HAL_TIM_Base_Start_IT+0xf8>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d00e      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4a20      	ldr	r2, [pc, #128]	@ (8012274 <HAL_TIM_Base_Start_IT+0xfc>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d009      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4a1e      	ldr	r2, [pc, #120]	@ (8012278 <HAL_TIM_Base_Start_IT+0x100>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d004      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x94>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4a1d      	ldr	r2, [pc, #116]	@ (801227c <HAL_TIM_Base_Start_IT+0x104>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d115      	bne.n	8012238 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689a      	ldr	r2, [r3, #8]
 8012212:	4b1b      	ldr	r3, [pc, #108]	@ (8012280 <HAL_TIM_Base_Start_IT+0x108>)
 8012214:	4013      	ands	r3, r2
 8012216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2b06      	cmp	r3, #6
 801221c:	d015      	beq.n	801224a <HAL_TIM_Base_Start_IT+0xd2>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012224:	d011      	beq.n	801224a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f042 0201 	orr.w	r2, r2, #1
 8012234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012236:	e008      	b.n	801224a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f042 0201 	orr.w	r2, r2, #1
 8012246:	601a      	str	r2, [r3, #0]
 8012248:	e000      	b.n	801224c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801224a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3714      	adds	r7, #20
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	40010000 	.word	0x40010000
 8012260:	40000400 	.word	0x40000400
 8012264:	40000800 	.word	0x40000800
 8012268:	40000c00 	.word	0x40000c00
 801226c:	40010400 	.word	0x40010400
 8012270:	40001800 	.word	0x40001800
 8012274:	40014000 	.word	0x40014000
 8012278:	4000e000 	.word	0x4000e000
 801227c:	4000e400 	.word	0x4000e400
 8012280:	00010007 	.word	0x00010007

08012284 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68da      	ldr	r2, [r3, #12]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f022 0201 	bic.w	r2, r2, #1
 801229a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	6a1a      	ldr	r2, [r3, #32]
 80122a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80122a6:	4013      	ands	r3, r2
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d10f      	bne.n	80122cc <HAL_TIM_Base_Stop_IT+0x48>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	6a1a      	ldr	r2, [r3, #32]
 80122b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80122b6:	4013      	ands	r3, r2
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d107      	bne.n	80122cc <HAL_TIM_Base_Stop_IT+0x48>
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f022 0201 	bic.w	r2, r2, #1
 80122ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80122d4:	2300      	movs	r3, #0
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b082      	sub	sp, #8
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d101      	bne.n	80122f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80122f0:	2301      	movs	r3, #1
 80122f2:	e049      	b.n	8012388 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d106      	bne.n	801230e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 f841 	bl	8012390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2202      	movs	r2, #2
 8012312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	3304      	adds	r3, #4
 801231e:	4619      	mov	r1, r3
 8012320:	4610      	mov	r0, r2
 8012322:	f001 f847 	bl	80133b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2201      	movs	r2, #1
 801232a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2201      	movs	r2, #1
 8012332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2201      	movs	r2, #1
 801233a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2201      	movs	r2, #1
 8012342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2201      	movs	r2, #1
 801234a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2201      	movs	r2, #1
 8012352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2201      	movs	r2, #1
 801235a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2201      	movs	r2, #1
 8012362:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2201      	movs	r2, #1
 801236a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2201      	movs	r2, #1
 8012372:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2201      	movs	r2, #1
 801237a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2201      	movs	r2, #1
 8012382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012398:	bf00      	nop
 801239a:	370c      	adds	r7, #12
 801239c:	46bd      	mov	sp, r7
 801239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a2:	4770      	bx	lr

080123a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d109      	bne.n	80123c8 <HAL_TIM_PWM_Start+0x24>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b01      	cmp	r3, #1
 80123be:	bf14      	ite	ne
 80123c0:	2301      	movne	r3, #1
 80123c2:	2300      	moveq	r3, #0
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	e03c      	b.n	8012442 <HAL_TIM_PWM_Start+0x9e>
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	2b04      	cmp	r3, #4
 80123cc:	d109      	bne.n	80123e2 <HAL_TIM_PWM_Start+0x3e>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80123d4:	b2db      	uxtb	r3, r3
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	bf14      	ite	ne
 80123da:	2301      	movne	r3, #1
 80123dc:	2300      	moveq	r3, #0
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	e02f      	b.n	8012442 <HAL_TIM_PWM_Start+0x9e>
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	2b08      	cmp	r3, #8
 80123e6:	d109      	bne.n	80123fc <HAL_TIM_PWM_Start+0x58>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	bf14      	ite	ne
 80123f4:	2301      	movne	r3, #1
 80123f6:	2300      	moveq	r3, #0
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	e022      	b.n	8012442 <HAL_TIM_PWM_Start+0x9e>
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	2b0c      	cmp	r3, #12
 8012400:	d109      	bne.n	8012416 <HAL_TIM_PWM_Start+0x72>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012408:	b2db      	uxtb	r3, r3
 801240a:	2b01      	cmp	r3, #1
 801240c:	bf14      	ite	ne
 801240e:	2301      	movne	r3, #1
 8012410:	2300      	moveq	r3, #0
 8012412:	b2db      	uxtb	r3, r3
 8012414:	e015      	b.n	8012442 <HAL_TIM_PWM_Start+0x9e>
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	2b10      	cmp	r3, #16
 801241a:	d109      	bne.n	8012430 <HAL_TIM_PWM_Start+0x8c>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012422:	b2db      	uxtb	r3, r3
 8012424:	2b01      	cmp	r3, #1
 8012426:	bf14      	ite	ne
 8012428:	2301      	movne	r3, #1
 801242a:	2300      	moveq	r3, #0
 801242c:	b2db      	uxtb	r3, r3
 801242e:	e008      	b.n	8012442 <HAL_TIM_PWM_Start+0x9e>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012436:	b2db      	uxtb	r3, r3
 8012438:	2b01      	cmp	r3, #1
 801243a:	bf14      	ite	ne
 801243c:	2301      	movne	r3, #1
 801243e:	2300      	moveq	r3, #0
 8012440:	b2db      	uxtb	r3, r3
 8012442:	2b00      	cmp	r3, #0
 8012444:	d001      	beq.n	801244a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012446:	2301      	movs	r3, #1
 8012448:	e0ab      	b.n	80125a2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d104      	bne.n	801245a <HAL_TIM_PWM_Start+0xb6>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2202      	movs	r2, #2
 8012454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012458:	e023      	b.n	80124a2 <HAL_TIM_PWM_Start+0xfe>
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2b04      	cmp	r3, #4
 801245e:	d104      	bne.n	801246a <HAL_TIM_PWM_Start+0xc6>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2202      	movs	r2, #2
 8012464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012468:	e01b      	b.n	80124a2 <HAL_TIM_PWM_Start+0xfe>
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	2b08      	cmp	r3, #8
 801246e:	d104      	bne.n	801247a <HAL_TIM_PWM_Start+0xd6>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2202      	movs	r2, #2
 8012474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012478:	e013      	b.n	80124a2 <HAL_TIM_PWM_Start+0xfe>
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	2b0c      	cmp	r3, #12
 801247e:	d104      	bne.n	801248a <HAL_TIM_PWM_Start+0xe6>
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2202      	movs	r2, #2
 8012484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012488:	e00b      	b.n	80124a2 <HAL_TIM_PWM_Start+0xfe>
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	2b10      	cmp	r3, #16
 801248e:	d104      	bne.n	801249a <HAL_TIM_PWM_Start+0xf6>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2202      	movs	r2, #2
 8012494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012498:	e003      	b.n	80124a2 <HAL_TIM_PWM_Start+0xfe>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2202      	movs	r2, #2
 801249e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2201      	movs	r2, #1
 80124a8:	6839      	ldr	r1, [r7, #0]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f001 fba8 	bl	8013c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	4a3d      	ldr	r2, [pc, #244]	@ (80125ac <HAL_TIM_PWM_Start+0x208>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d013      	beq.n	80124e2 <HAL_TIM_PWM_Start+0x13e>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a3c      	ldr	r2, [pc, #240]	@ (80125b0 <HAL_TIM_PWM_Start+0x20c>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d00e      	beq.n	80124e2 <HAL_TIM_PWM_Start+0x13e>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4a3a      	ldr	r2, [pc, #232]	@ (80125b4 <HAL_TIM_PWM_Start+0x210>)
 80124ca:	4293      	cmp	r3, r2
 80124cc:	d009      	beq.n	80124e2 <HAL_TIM_PWM_Start+0x13e>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4a39      	ldr	r2, [pc, #228]	@ (80125b8 <HAL_TIM_PWM_Start+0x214>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	d004      	beq.n	80124e2 <HAL_TIM_PWM_Start+0x13e>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a37      	ldr	r2, [pc, #220]	@ (80125bc <HAL_TIM_PWM_Start+0x218>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d101      	bne.n	80124e6 <HAL_TIM_PWM_Start+0x142>
 80124e2:	2301      	movs	r3, #1
 80124e4:	e000      	b.n	80124e8 <HAL_TIM_PWM_Start+0x144>
 80124e6:	2300      	movs	r3, #0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d007      	beq.n	80124fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80124fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	4a2a      	ldr	r2, [pc, #168]	@ (80125ac <HAL_TIM_PWM_Start+0x208>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d02c      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801250e:	d027      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a2a      	ldr	r2, [pc, #168]	@ (80125c0 <HAL_TIM_PWM_Start+0x21c>)
 8012516:	4293      	cmp	r3, r2
 8012518:	d022      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a29      	ldr	r2, [pc, #164]	@ (80125c4 <HAL_TIM_PWM_Start+0x220>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d01d      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	4a27      	ldr	r2, [pc, #156]	@ (80125c8 <HAL_TIM_PWM_Start+0x224>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d018      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	4a1f      	ldr	r2, [pc, #124]	@ (80125b0 <HAL_TIM_PWM_Start+0x20c>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d013      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a23      	ldr	r2, [pc, #140]	@ (80125cc <HAL_TIM_PWM_Start+0x228>)
 801253e:	4293      	cmp	r3, r2
 8012540:	d00e      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a1b      	ldr	r2, [pc, #108]	@ (80125b4 <HAL_TIM_PWM_Start+0x210>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d009      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a1f      	ldr	r2, [pc, #124]	@ (80125d0 <HAL_TIM_PWM_Start+0x22c>)
 8012552:	4293      	cmp	r3, r2
 8012554:	d004      	beq.n	8012560 <HAL_TIM_PWM_Start+0x1bc>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	4a1e      	ldr	r2, [pc, #120]	@ (80125d4 <HAL_TIM_PWM_Start+0x230>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d115      	bne.n	801258c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	689a      	ldr	r2, [r3, #8]
 8012566:	4b1c      	ldr	r3, [pc, #112]	@ (80125d8 <HAL_TIM_PWM_Start+0x234>)
 8012568:	4013      	ands	r3, r2
 801256a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b06      	cmp	r3, #6
 8012570:	d015      	beq.n	801259e <HAL_TIM_PWM_Start+0x1fa>
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012578:	d011      	beq.n	801259e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f042 0201 	orr.w	r2, r2, #1
 8012588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801258a:	e008      	b.n	801259e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f042 0201 	orr.w	r2, r2, #1
 801259a:	601a      	str	r2, [r3, #0]
 801259c:	e000      	b.n	80125a0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801259e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	40010000 	.word	0x40010000
 80125b0:	40010400 	.word	0x40010400
 80125b4:	40014000 	.word	0x40014000
 80125b8:	40014400 	.word	0x40014400
 80125bc:	40014800 	.word	0x40014800
 80125c0:	40000400 	.word	0x40000400
 80125c4:	40000800 	.word	0x40000800
 80125c8:	40000c00 	.word	0x40000c00
 80125cc:	40001800 	.word	0x40001800
 80125d0:	4000e000 	.word	0x4000e000
 80125d4:	4000e400 	.word	0x4000e400
 80125d8:	00010007 	.word	0x00010007

080125dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2200      	movs	r2, #0
 80125ec:	6839      	ldr	r1, [r7, #0]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f001 fb06 	bl	8013c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	4a3e      	ldr	r2, [pc, #248]	@ (80126f4 <HAL_TIM_PWM_Stop+0x118>)
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d013      	beq.n	8012626 <HAL_TIM_PWM_Stop+0x4a>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4a3d      	ldr	r2, [pc, #244]	@ (80126f8 <HAL_TIM_PWM_Stop+0x11c>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d00e      	beq.n	8012626 <HAL_TIM_PWM_Stop+0x4a>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a3b      	ldr	r2, [pc, #236]	@ (80126fc <HAL_TIM_PWM_Stop+0x120>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d009      	beq.n	8012626 <HAL_TIM_PWM_Stop+0x4a>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4a3a      	ldr	r2, [pc, #232]	@ (8012700 <HAL_TIM_PWM_Stop+0x124>)
 8012618:	4293      	cmp	r3, r2
 801261a:	d004      	beq.n	8012626 <HAL_TIM_PWM_Stop+0x4a>
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a38      	ldr	r2, [pc, #224]	@ (8012704 <HAL_TIM_PWM_Stop+0x128>)
 8012622:	4293      	cmp	r3, r2
 8012624:	d101      	bne.n	801262a <HAL_TIM_PWM_Stop+0x4e>
 8012626:	2301      	movs	r3, #1
 8012628:	e000      	b.n	801262c <HAL_TIM_PWM_Stop+0x50>
 801262a:	2300      	movs	r3, #0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d017      	beq.n	8012660 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	6a1a      	ldr	r2, [r3, #32]
 8012636:	f241 1311 	movw	r3, #4369	@ 0x1111
 801263a:	4013      	ands	r3, r2
 801263c:	2b00      	cmp	r3, #0
 801263e:	d10f      	bne.n	8012660 <HAL_TIM_PWM_Stop+0x84>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	6a1a      	ldr	r2, [r3, #32]
 8012646:	f240 4344 	movw	r3, #1092	@ 0x444
 801264a:	4013      	ands	r3, r2
 801264c:	2b00      	cmp	r3, #0
 801264e:	d107      	bne.n	8012660 <HAL_TIM_PWM_Stop+0x84>
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801265e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	6a1a      	ldr	r2, [r3, #32]
 8012666:	f241 1311 	movw	r3, #4369	@ 0x1111
 801266a:	4013      	ands	r3, r2
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10f      	bne.n	8012690 <HAL_TIM_PWM_Stop+0xb4>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6a1a      	ldr	r2, [r3, #32]
 8012676:	f240 4344 	movw	r3, #1092	@ 0x444
 801267a:	4013      	ands	r3, r2
 801267c:	2b00      	cmp	r3, #0
 801267e:	d107      	bne.n	8012690 <HAL_TIM_PWM_Stop+0xb4>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	681a      	ldr	r2, [r3, #0]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f022 0201 	bic.w	r2, r2, #1
 801268e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d104      	bne.n	80126a0 <HAL_TIM_PWM_Stop+0xc4>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2201      	movs	r2, #1
 801269a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801269e:	e023      	b.n	80126e8 <HAL_TIM_PWM_Stop+0x10c>
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2b04      	cmp	r3, #4
 80126a4:	d104      	bne.n	80126b0 <HAL_TIM_PWM_Stop+0xd4>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2201      	movs	r2, #1
 80126aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80126ae:	e01b      	b.n	80126e8 <HAL_TIM_PWM_Stop+0x10c>
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	2b08      	cmp	r3, #8
 80126b4:	d104      	bne.n	80126c0 <HAL_TIM_PWM_Stop+0xe4>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2201      	movs	r2, #1
 80126ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80126be:	e013      	b.n	80126e8 <HAL_TIM_PWM_Stop+0x10c>
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	2b0c      	cmp	r3, #12
 80126c4:	d104      	bne.n	80126d0 <HAL_TIM_PWM_Stop+0xf4>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2201      	movs	r2, #1
 80126ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80126ce:	e00b      	b.n	80126e8 <HAL_TIM_PWM_Stop+0x10c>
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	2b10      	cmp	r3, #16
 80126d4:	d104      	bne.n	80126e0 <HAL_TIM_PWM_Stop+0x104>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2201      	movs	r2, #1
 80126da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80126de:	e003      	b.n	80126e8 <HAL_TIM_PWM_Stop+0x10c>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3708      	adds	r7, #8
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	40010000 	.word	0x40010000
 80126f8:	40010400 	.word	0x40010400
 80126fc:	40014000 	.word	0x40014000
 8012700:	40014400 	.word	0x40014400
 8012704:	40014800 	.word	0x40014800

08012708 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d109      	bne.n	8012734 <HAL_TIM_PWM_Start_DMA+0x2c>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012726:	b2db      	uxtb	r3, r3
 8012728:	2b02      	cmp	r3, #2
 801272a:	bf0c      	ite	eq
 801272c:	2301      	moveq	r3, #1
 801272e:	2300      	movne	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	e03c      	b.n	80127ae <HAL_TIM_PWM_Start_DMA+0xa6>
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	2b04      	cmp	r3, #4
 8012738:	d109      	bne.n	801274e <HAL_TIM_PWM_Start_DMA+0x46>
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012740:	b2db      	uxtb	r3, r3
 8012742:	2b02      	cmp	r3, #2
 8012744:	bf0c      	ite	eq
 8012746:	2301      	moveq	r3, #1
 8012748:	2300      	movne	r3, #0
 801274a:	b2db      	uxtb	r3, r3
 801274c:	e02f      	b.n	80127ae <HAL_TIM_PWM_Start_DMA+0xa6>
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b08      	cmp	r3, #8
 8012752:	d109      	bne.n	8012768 <HAL_TIM_PWM_Start_DMA+0x60>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801275a:	b2db      	uxtb	r3, r3
 801275c:	2b02      	cmp	r3, #2
 801275e:	bf0c      	ite	eq
 8012760:	2301      	moveq	r3, #1
 8012762:	2300      	movne	r3, #0
 8012764:	b2db      	uxtb	r3, r3
 8012766:	e022      	b.n	80127ae <HAL_TIM_PWM_Start_DMA+0xa6>
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	2b0c      	cmp	r3, #12
 801276c:	d109      	bne.n	8012782 <HAL_TIM_PWM_Start_DMA+0x7a>
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012774:	b2db      	uxtb	r3, r3
 8012776:	2b02      	cmp	r3, #2
 8012778:	bf0c      	ite	eq
 801277a:	2301      	moveq	r3, #1
 801277c:	2300      	movne	r3, #0
 801277e:	b2db      	uxtb	r3, r3
 8012780:	e015      	b.n	80127ae <HAL_TIM_PWM_Start_DMA+0xa6>
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	2b10      	cmp	r3, #16
 8012786:	d109      	bne.n	801279c <HAL_TIM_PWM_Start_DMA+0x94>
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801278e:	b2db      	uxtb	r3, r3
 8012790:	2b02      	cmp	r3, #2
 8012792:	bf0c      	ite	eq
 8012794:	2301      	moveq	r3, #1
 8012796:	2300      	movne	r3, #0
 8012798:	b2db      	uxtb	r3, r3
 801279a:	e008      	b.n	80127ae <HAL_TIM_PWM_Start_DMA+0xa6>
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	2b02      	cmp	r3, #2
 80127a6:	bf0c      	ite	eq
 80127a8:	2301      	moveq	r3, #1
 80127aa:	2300      	movne	r3, #0
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d001      	beq.n	80127b6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80127b2:	2302      	movs	r3, #2
 80127b4:	e1ba      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d109      	bne.n	80127d0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	bf0c      	ite	eq
 80127c8:	2301      	moveq	r3, #1
 80127ca:	2300      	movne	r3, #0
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	e03c      	b.n	801284a <HAL_TIM_PWM_Start_DMA+0x142>
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2b04      	cmp	r3, #4
 80127d4:	d109      	bne.n	80127ea <HAL_TIM_PWM_Start_DMA+0xe2>
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	2b01      	cmp	r3, #1
 80127e0:	bf0c      	ite	eq
 80127e2:	2301      	moveq	r3, #1
 80127e4:	2300      	movne	r3, #0
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	e02f      	b.n	801284a <HAL_TIM_PWM_Start_DMA+0x142>
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	2b08      	cmp	r3, #8
 80127ee:	d109      	bne.n	8012804 <HAL_TIM_PWM_Start_DMA+0xfc>
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	bf0c      	ite	eq
 80127fc:	2301      	moveq	r3, #1
 80127fe:	2300      	movne	r3, #0
 8012800:	b2db      	uxtb	r3, r3
 8012802:	e022      	b.n	801284a <HAL_TIM_PWM_Start_DMA+0x142>
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2b0c      	cmp	r3, #12
 8012808:	d109      	bne.n	801281e <HAL_TIM_PWM_Start_DMA+0x116>
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b01      	cmp	r3, #1
 8012814:	bf0c      	ite	eq
 8012816:	2301      	moveq	r3, #1
 8012818:	2300      	movne	r3, #0
 801281a:	b2db      	uxtb	r3, r3
 801281c:	e015      	b.n	801284a <HAL_TIM_PWM_Start_DMA+0x142>
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	2b10      	cmp	r3, #16
 8012822:	d109      	bne.n	8012838 <HAL_TIM_PWM_Start_DMA+0x130>
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b01      	cmp	r3, #1
 801282e:	bf0c      	ite	eq
 8012830:	2301      	moveq	r3, #1
 8012832:	2300      	movne	r3, #0
 8012834:	b2db      	uxtb	r3, r3
 8012836:	e008      	b.n	801284a <HAL_TIM_PWM_Start_DMA+0x142>
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801283e:	b2db      	uxtb	r3, r3
 8012840:	2b01      	cmp	r3, #1
 8012842:	bf0c      	ite	eq
 8012844:	2301      	moveq	r3, #1
 8012846:	2300      	movne	r3, #0
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d034      	beq.n	80128b8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d002      	beq.n	801285a <HAL_TIM_PWM_Start_DMA+0x152>
 8012854:	887b      	ldrh	r3, [r7, #2]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d101      	bne.n	801285e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 801285a:	2301      	movs	r3, #1
 801285c:	e166      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d104      	bne.n	801286e <HAL_TIM_PWM_Start_DMA+0x166>
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	2202      	movs	r2, #2
 8012868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801286c:	e026      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	2b04      	cmp	r3, #4
 8012872:	d104      	bne.n	801287e <HAL_TIM_PWM_Start_DMA+0x176>
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	2202      	movs	r2, #2
 8012878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801287c:	e01e      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	2b08      	cmp	r3, #8
 8012882:	d104      	bne.n	801288e <HAL_TIM_PWM_Start_DMA+0x186>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2202      	movs	r2, #2
 8012888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801288c:	e016      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	2b0c      	cmp	r3, #12
 8012892:	d104      	bne.n	801289e <HAL_TIM_PWM_Start_DMA+0x196>
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	2202      	movs	r2, #2
 8012898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801289c:	e00e      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	2b10      	cmp	r3, #16
 80128a2:	d104      	bne.n	80128ae <HAL_TIM_PWM_Start_DMA+0x1a6>
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2202      	movs	r2, #2
 80128a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80128ac:	e006      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2202      	movs	r2, #2
 80128b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80128b6:	e001      	b.n	80128bc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80128b8:	2301      	movs	r3, #1
 80128ba:	e137      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	2b0c      	cmp	r3, #12
 80128c0:	f200 80ae 	bhi.w	8012a20 <HAL_TIM_PWM_Start_DMA+0x318>
 80128c4:	a201      	add	r2, pc, #4	@ (adr r2, 80128cc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80128c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128ca:	bf00      	nop
 80128cc:	08012901 	.word	0x08012901
 80128d0:	08012a21 	.word	0x08012a21
 80128d4:	08012a21 	.word	0x08012a21
 80128d8:	08012a21 	.word	0x08012a21
 80128dc:	08012949 	.word	0x08012949
 80128e0:	08012a21 	.word	0x08012a21
 80128e4:	08012a21 	.word	0x08012a21
 80128e8:	08012a21 	.word	0x08012a21
 80128ec:	08012991 	.word	0x08012991
 80128f0:	08012a21 	.word	0x08012a21
 80128f4:	08012a21 	.word	0x08012a21
 80128f8:	08012a21 	.word	0x08012a21
 80128fc:	080129d9 	.word	0x080129d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012904:	4a8b      	ldr	r2, [pc, #556]	@ (8012b34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012906:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801290c:	4a8a      	ldr	r2, [pc, #552]	@ (8012b38 <HAL_TIM_PWM_Start_DMA+0x430>)
 801290e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012914:	4a89      	ldr	r2, [pc, #548]	@ (8012b3c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012916:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801291c:	6879      	ldr	r1, [r7, #4]
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	3334      	adds	r3, #52	@ 0x34
 8012924:	461a      	mov	r2, r3
 8012926:	887b      	ldrh	r3, [r7, #2]
 8012928:	f7f7 fd44 	bl	800a3b4 <HAL_DMA_Start_IT>
 801292c:	4603      	mov	r3, r0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d001      	beq.n	8012936 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012932:	2301      	movs	r3, #1
 8012934:	e0fa      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68da      	ldr	r2, [r3, #12]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012944:	60da      	str	r2, [r3, #12]
      break;
 8012946:	e06e      	b.n	8012a26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801294c:	4a79      	ldr	r2, [pc, #484]	@ (8012b34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801294e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012954:	4a78      	ldr	r2, [pc, #480]	@ (8012b38 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012956:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801295c:	4a77      	ldr	r2, [pc, #476]	@ (8012b3c <HAL_TIM_PWM_Start_DMA+0x434>)
 801295e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8012964:	6879      	ldr	r1, [r7, #4]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	3338      	adds	r3, #56	@ 0x38
 801296c:	461a      	mov	r2, r3
 801296e:	887b      	ldrh	r3, [r7, #2]
 8012970:	f7f7 fd20 	bl	800a3b4 <HAL_DMA_Start_IT>
 8012974:	4603      	mov	r3, r0
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801297a:	2301      	movs	r3, #1
 801297c:	e0d6      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	68da      	ldr	r2, [r3, #12]
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801298c:	60da      	str	r2, [r3, #12]
      break;
 801298e:	e04a      	b.n	8012a26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012994:	4a67      	ldr	r2, [pc, #412]	@ (8012b34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012996:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299c:	4a66      	ldr	r2, [pc, #408]	@ (8012b38 <HAL_TIM_PWM_Start_DMA+0x430>)
 801299e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129a4:	4a65      	ldr	r2, [pc, #404]	@ (8012b3c <HAL_TIM_PWM_Start_DMA+0x434>)
 80129a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80129ac:	6879      	ldr	r1, [r7, #4]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	333c      	adds	r3, #60	@ 0x3c
 80129b4:	461a      	mov	r2, r3
 80129b6:	887b      	ldrh	r3, [r7, #2]
 80129b8:	f7f7 fcfc 	bl	800a3b4 <HAL_DMA_Start_IT>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d001      	beq.n	80129c6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80129c2:	2301      	movs	r3, #1
 80129c4:	e0b2      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	68da      	ldr	r2, [r3, #12]
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80129d4:	60da      	str	r2, [r3, #12]
      break;
 80129d6:	e026      	b.n	8012a26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129dc:	4a55      	ldr	r2, [pc, #340]	@ (8012b34 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80129de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129e4:	4a54      	ldr	r2, [pc, #336]	@ (8012b38 <HAL_TIM_PWM_Start_DMA+0x430>)
 80129e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129ec:	4a53      	ldr	r2, [pc, #332]	@ (8012b3c <HAL_TIM_PWM_Start_DMA+0x434>)
 80129ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80129f4:	6879      	ldr	r1, [r7, #4]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	3340      	adds	r3, #64	@ 0x40
 80129fc:	461a      	mov	r2, r3
 80129fe:	887b      	ldrh	r3, [r7, #2]
 8012a00:	f7f7 fcd8 	bl	800a3b4 <HAL_DMA_Start_IT>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d001      	beq.n	8012a0e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	e08e      	b.n	8012b2c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	68da      	ldr	r2, [r3, #12]
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012a1c:	60da      	str	r2, [r3, #12]
      break;
 8012a1e:	e002      	b.n	8012a26 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012a20:	2301      	movs	r3, #1
 8012a22:	75fb      	strb	r3, [r7, #23]
      break;
 8012a24:	bf00      	nop
  }

  if (status == HAL_OK)
 8012a26:	7dfb      	ldrb	r3, [r7, #23]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d17e      	bne.n	8012b2a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2201      	movs	r2, #1
 8012a32:	68b9      	ldr	r1, [r7, #8]
 8012a34:	4618      	mov	r0, r3
 8012a36:	f001 f8e3 	bl	8013c00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4a40      	ldr	r2, [pc, #256]	@ (8012b40 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d013      	beq.n	8012a6c <HAL_TIM_PWM_Start_DMA+0x364>
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a3e      	ldr	r2, [pc, #248]	@ (8012b44 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d00e      	beq.n	8012a6c <HAL_TIM_PWM_Start_DMA+0x364>
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	4a3d      	ldr	r2, [pc, #244]	@ (8012b48 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d009      	beq.n	8012a6c <HAL_TIM_PWM_Start_DMA+0x364>
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8012b4c <HAL_TIM_PWM_Start_DMA+0x444>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d004      	beq.n	8012a6c <HAL_TIM_PWM_Start_DMA+0x364>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a3a      	ldr	r2, [pc, #232]	@ (8012b50 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012a68:	4293      	cmp	r3, r2
 8012a6a:	d101      	bne.n	8012a70 <HAL_TIM_PWM_Start_DMA+0x368>
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	e000      	b.n	8012a72 <HAL_TIM_PWM_Start_DMA+0x36a>
 8012a70:	2300      	movs	r3, #0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d007      	beq.n	8012a86 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8012b40 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d02c      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a98:	d027      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8012b54 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d022      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8012b58 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	d01d      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8012b5c <HAL_TIM_PWM_Start_DMA+0x454>)
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d018      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4a21      	ldr	r2, [pc, #132]	@ (8012b44 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d013      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4a26      	ldr	r2, [pc, #152]	@ (8012b60 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	d00e      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8012b48 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	d009      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4a22      	ldr	r2, [pc, #136]	@ (8012b64 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d004      	beq.n	8012aea <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4a20      	ldr	r2, [pc, #128]	@ (8012b68 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d115      	bne.n	8012b16 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	689a      	ldr	r2, [r3, #8]
 8012af0:	4b1e      	ldr	r3, [pc, #120]	@ (8012b6c <HAL_TIM_PWM_Start_DMA+0x464>)
 8012af2:	4013      	ands	r3, r2
 8012af4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	2b06      	cmp	r3, #6
 8012afa:	d015      	beq.n	8012b28 <HAL_TIM_PWM_Start_DMA+0x420>
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b02:	d011      	beq.n	8012b28 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f042 0201 	orr.w	r2, r2, #1
 8012b12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b14:	e008      	b.n	8012b28 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f042 0201 	orr.w	r2, r2, #1
 8012b24:	601a      	str	r2, [r3, #0]
 8012b26:	e000      	b.n	8012b2a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b28:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	080132a3 	.word	0x080132a3
 8012b38:	0801334b 	.word	0x0801334b
 8012b3c:	08013211 	.word	0x08013211
 8012b40:	40010000 	.word	0x40010000
 8012b44:	40010400 	.word	0x40010400
 8012b48:	40014000 	.word	0x40014000
 8012b4c:	40014400 	.word	0x40014400
 8012b50:	40014800 	.word	0x40014800
 8012b54:	40000400 	.word	0x40000400
 8012b58:	40000800 	.word	0x40000800
 8012b5c:	40000c00 	.word	0x40000c00
 8012b60:	40001800 	.word	0x40001800
 8012b64:	4000e000 	.word	0x4000e000
 8012b68:	4000e400 	.word	0x4000e400
 8012b6c:	00010007 	.word	0x00010007

08012b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	691b      	ldr	r3, [r3, #16]
 8012b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	f003 0302 	and.w	r3, r3, #2
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d020      	beq.n	8012bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f003 0302 	and.w	r3, r3, #2
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d01b      	beq.n	8012bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f06f 0202 	mvn.w	r2, #2
 8012ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2201      	movs	r2, #1
 8012baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	699b      	ldr	r3, [r3, #24]
 8012bb2:	f003 0303 	and.w	r3, r3, #3
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d003      	beq.n	8012bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 faf6 	bl	80131ac <HAL_TIM_IC_CaptureCallback>
 8012bc0:	e005      	b.n	8012bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f000 fae8 	bl	8013198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 faf9 	bl	80131c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	f003 0304 	and.w	r3, r3, #4
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d020      	beq.n	8012c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	f003 0304 	and.w	r3, r3, #4
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d01b      	beq.n	8012c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f06f 0204 	mvn.w	r2, #4
 8012bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2202      	movs	r2, #2
 8012bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	699b      	ldr	r3, [r3, #24]
 8012bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d003      	beq.n	8012c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 fad0 	bl	80131ac <HAL_TIM_IC_CaptureCallback>
 8012c0c:	e005      	b.n	8012c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 fac2 	bl	8013198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 fad3 	bl	80131c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f003 0308 	and.w	r3, r3, #8
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d020      	beq.n	8012c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	f003 0308 	and.w	r3, r3, #8
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d01b      	beq.n	8012c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	f06f 0208 	mvn.w	r2, #8
 8012c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2204      	movs	r2, #4
 8012c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	69db      	ldr	r3, [r3, #28]
 8012c4a:	f003 0303 	and.w	r3, r3, #3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d003      	beq.n	8012c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 faaa 	bl	80131ac <HAL_TIM_IC_CaptureCallback>
 8012c58:	e005      	b.n	8012c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 fa9c 	bl	8013198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 faad 	bl	80131c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	f003 0310 	and.w	r3, r3, #16
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d020      	beq.n	8012cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	f003 0310 	and.w	r3, r3, #16
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d01b      	beq.n	8012cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f06f 0210 	mvn.w	r2, #16
 8012c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2208      	movs	r2, #8
 8012c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	69db      	ldr	r3, [r3, #28]
 8012c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d003      	beq.n	8012ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 fa84 	bl	80131ac <HAL_TIM_IC_CaptureCallback>
 8012ca4:	e005      	b.n	8012cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 fa76 	bl	8013198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 fa87 	bl	80131c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	f003 0301 	and.w	r3, r3, #1
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d00c      	beq.n	8012cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	f003 0301 	and.w	r3, r3, #1
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d007      	beq.n	8012cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f06f 0201 	mvn.w	r2, #1
 8012cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7ee fade 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d104      	bne.n	8012cf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00c      	beq.n	8012d0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d007      	beq.n	8012d0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8012d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f001 f847 	bl	8013d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00c      	beq.n	8012d2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d007      	beq.n	8012d2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8012d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f001 f83f 	bl	8013dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00c      	beq.n	8012d52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d007      	beq.n	8012d52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 fa4b 	bl	80131e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	f003 0320 	and.w	r3, r3, #32
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00c      	beq.n	8012d76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	f003 0320 	and.w	r3, r3, #32
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d007      	beq.n	8012d76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f06f 0220 	mvn.w	r2, #32
 8012d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f001 f807 	bl	8013d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012d76:	bf00      	nop
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
	...

08012d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d101      	bne.n	8012d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	e0ff      	b.n	8012f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2b14      	cmp	r3, #20
 8012daa:	f200 80f0 	bhi.w	8012f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012dae:	a201      	add	r2, pc, #4	@ (adr r2, 8012db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db4:	08012e09 	.word	0x08012e09
 8012db8:	08012f8f 	.word	0x08012f8f
 8012dbc:	08012f8f 	.word	0x08012f8f
 8012dc0:	08012f8f 	.word	0x08012f8f
 8012dc4:	08012e49 	.word	0x08012e49
 8012dc8:	08012f8f 	.word	0x08012f8f
 8012dcc:	08012f8f 	.word	0x08012f8f
 8012dd0:	08012f8f 	.word	0x08012f8f
 8012dd4:	08012e8b 	.word	0x08012e8b
 8012dd8:	08012f8f 	.word	0x08012f8f
 8012ddc:	08012f8f 	.word	0x08012f8f
 8012de0:	08012f8f 	.word	0x08012f8f
 8012de4:	08012ecb 	.word	0x08012ecb
 8012de8:	08012f8f 	.word	0x08012f8f
 8012dec:	08012f8f 	.word	0x08012f8f
 8012df0:	08012f8f 	.word	0x08012f8f
 8012df4:	08012f0d 	.word	0x08012f0d
 8012df8:	08012f8f 	.word	0x08012f8f
 8012dfc:	08012f8f 	.word	0x08012f8f
 8012e00:	08012f8f 	.word	0x08012f8f
 8012e04:	08012f4d 	.word	0x08012f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f000 fb82 	bl	8013518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	699a      	ldr	r2, [r3, #24]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f042 0208 	orr.w	r2, r2, #8
 8012e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	699a      	ldr	r2, [r3, #24]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f022 0204 	bic.w	r2, r2, #4
 8012e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	6999      	ldr	r1, [r3, #24]
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	691a      	ldr	r2, [r3, #16]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	430a      	orrs	r2, r1
 8012e44:	619a      	str	r2, [r3, #24]
      break;
 8012e46:	e0a5      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68b9      	ldr	r1, [r7, #8]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f000 fbf2 	bl	8013638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	699a      	ldr	r2, [r3, #24]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	699a      	ldr	r2, [r3, #24]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6999      	ldr	r1, [r3, #24]
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	691b      	ldr	r3, [r3, #16]
 8012e7e:	021a      	lsls	r2, r3, #8
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	430a      	orrs	r2, r1
 8012e86:	619a      	str	r2, [r3, #24]
      break;
 8012e88:	e084      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68b9      	ldr	r1, [r7, #8]
 8012e90:	4618      	mov	r0, r3
 8012e92:	f000 fc5b 	bl	801374c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	69da      	ldr	r2, [r3, #28]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	f042 0208 	orr.w	r2, r2, #8
 8012ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	69da      	ldr	r2, [r3, #28]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f022 0204 	bic.w	r2, r2, #4
 8012eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	69d9      	ldr	r1, [r3, #28]
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	691a      	ldr	r2, [r3, #16]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	430a      	orrs	r2, r1
 8012ec6:	61da      	str	r2, [r3, #28]
      break;
 8012ec8:	e064      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 fcc3 	bl	801385c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	69da      	ldr	r2, [r3, #28]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	69da      	ldr	r2, [r3, #28]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	69d9      	ldr	r1, [r3, #28]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	691b      	ldr	r3, [r3, #16]
 8012f00:	021a      	lsls	r2, r3, #8
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	430a      	orrs	r2, r1
 8012f08:	61da      	str	r2, [r3, #28]
      break;
 8012f0a:	e043      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68b9      	ldr	r1, [r7, #8]
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 fd0c 	bl	8013930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f042 0208 	orr.w	r2, r2, #8
 8012f26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	f022 0204 	bic.w	r2, r2, #4
 8012f36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	691a      	ldr	r2, [r3, #16]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	430a      	orrs	r2, r1
 8012f48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012f4a:	e023      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	68b9      	ldr	r1, [r7, #8]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f000 fd50 	bl	80139f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012f66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012f76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	021a      	lsls	r2, r3, #8
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	430a      	orrs	r2, r1
 8012f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012f8c:	e002      	b.n	8012f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	75fb      	strb	r3, [r7, #23]
      break;
 8012f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2200      	movs	r2, #0
 8012f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3718      	adds	r7, #24
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop

08012fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d101      	bne.n	8012fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8012fc0:	2302      	movs	r3, #2
 8012fc2:	e0dc      	b.n	801317e <HAL_TIM_ConfigClockSource+0x1d6>
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2202      	movs	r2, #2
 8012fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	689b      	ldr	r3, [r3, #8]
 8012fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	4b6a      	ldr	r3, [pc, #424]	@ (8013188 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012fe0:	4013      	ands	r3, r2
 8012fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012fe4:	68bb      	ldr	r3, [r7, #8]
 8012fe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	68ba      	ldr	r2, [r7, #8]
 8012ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a64      	ldr	r2, [pc, #400]	@ (801318c <HAL_TIM_ConfigClockSource+0x1e4>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	f000 80a9 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013000:	4a62      	ldr	r2, [pc, #392]	@ (801318c <HAL_TIM_ConfigClockSource+0x1e4>)
 8013002:	4293      	cmp	r3, r2
 8013004:	f200 80ae 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013008:	4a61      	ldr	r2, [pc, #388]	@ (8013190 <HAL_TIM_ConfigClockSource+0x1e8>)
 801300a:	4293      	cmp	r3, r2
 801300c:	f000 80a1 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013010:	4a5f      	ldr	r2, [pc, #380]	@ (8013190 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013012:	4293      	cmp	r3, r2
 8013014:	f200 80a6 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013018:	4a5e      	ldr	r2, [pc, #376]	@ (8013194 <HAL_TIM_ConfigClockSource+0x1ec>)
 801301a:	4293      	cmp	r3, r2
 801301c:	f000 8099 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013020:	4a5c      	ldr	r2, [pc, #368]	@ (8013194 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013022:	4293      	cmp	r3, r2
 8013024:	f200 809e 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801302c:	f000 8091 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8013034:	f200 8096 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801303c:	f000 8089 	beq.w	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013044:	f200 808e 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801304c:	d03e      	beq.n	80130cc <HAL_TIM_ConfigClockSource+0x124>
 801304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013052:	f200 8087 	bhi.w	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801305a:	f000 8086 	beq.w	801316a <HAL_TIM_ConfigClockSource+0x1c2>
 801305e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013062:	d87f      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013064:	2b70      	cmp	r3, #112	@ 0x70
 8013066:	d01a      	beq.n	801309e <HAL_TIM_ConfigClockSource+0xf6>
 8013068:	2b70      	cmp	r3, #112	@ 0x70
 801306a:	d87b      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801306c:	2b60      	cmp	r3, #96	@ 0x60
 801306e:	d050      	beq.n	8013112 <HAL_TIM_ConfigClockSource+0x16a>
 8013070:	2b60      	cmp	r3, #96	@ 0x60
 8013072:	d877      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013074:	2b50      	cmp	r3, #80	@ 0x50
 8013076:	d03c      	beq.n	80130f2 <HAL_TIM_ConfigClockSource+0x14a>
 8013078:	2b50      	cmp	r3, #80	@ 0x50
 801307a:	d873      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801307c:	2b40      	cmp	r3, #64	@ 0x40
 801307e:	d058      	beq.n	8013132 <HAL_TIM_ConfigClockSource+0x18a>
 8013080:	2b40      	cmp	r3, #64	@ 0x40
 8013082:	d86f      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013084:	2b30      	cmp	r3, #48	@ 0x30
 8013086:	d064      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013088:	2b30      	cmp	r3, #48	@ 0x30
 801308a:	d86b      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 801308c:	2b20      	cmp	r3, #32
 801308e:	d060      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013090:	2b20      	cmp	r3, #32
 8013092:	d867      	bhi.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
 8013094:	2b00      	cmp	r3, #0
 8013096:	d05c      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 8013098:	2b10      	cmp	r3, #16
 801309a:	d05a      	beq.n	8013152 <HAL_TIM_ConfigClockSource+0x1aa>
 801309c:	e062      	b.n	8013164 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80130ae:	f000 fd87 	bl	8013bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	689b      	ldr	r3, [r3, #8]
 80130b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80130c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	68ba      	ldr	r2, [r7, #8]
 80130c8:	609a      	str	r2, [r3, #8]
      break;
 80130ca:	e04f      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80130dc:	f000 fd70 	bl	8013bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	689a      	ldr	r2, [r3, #8]
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80130ee:	609a      	str	r2, [r3, #8]
      break;
 80130f0:	e03c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80130fe:	461a      	mov	r2, r3
 8013100:	f000 fce0 	bl	8013ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2150      	movs	r1, #80	@ 0x50
 801310a:	4618      	mov	r0, r3
 801310c:	f000 fd3a 	bl	8013b84 <TIM_ITRx_SetConfig>
      break;
 8013110:	e02c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801311e:	461a      	mov	r2, r3
 8013120:	f000 fcff 	bl	8013b22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2160      	movs	r1, #96	@ 0x60
 801312a:	4618      	mov	r0, r3
 801312c:	f000 fd2a 	bl	8013b84 <TIM_ITRx_SetConfig>
      break;
 8013130:	e01c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801313e:	461a      	mov	r2, r3
 8013140:	f000 fcc0 	bl	8013ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2140      	movs	r1, #64	@ 0x40
 801314a:	4618      	mov	r0, r3
 801314c:	f000 fd1a 	bl	8013b84 <TIM_ITRx_SetConfig>
      break;
 8013150:	e00c      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4619      	mov	r1, r3
 801315c:	4610      	mov	r0, r2
 801315e:	f000 fd11 	bl	8013b84 <TIM_ITRx_SetConfig>
      break;
 8013162:	e003      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013164:	2301      	movs	r3, #1
 8013166:	73fb      	strb	r3, [r7, #15]
      break;
 8013168:	e000      	b.n	801316c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801316a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2201      	movs	r2, #1
 8013170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2200      	movs	r2, #0
 8013178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801317c:	7bfb      	ldrb	r3, [r7, #15]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	ffceff88 	.word	0xffceff88
 801318c:	00100040 	.word	0x00100040
 8013190:	00100030 	.word	0x00100030
 8013194:	00100020 	.word	0x00100020

08013198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80131a0:	bf00      	nop
 80131a2:	370c      	adds	r7, #12
 80131a4:	46bd      	mov	sp, r7
 80131a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131aa:	4770      	bx	lr

080131ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80131b4:	bf00      	nop
 80131b6:	370c      	adds	r7, #12
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr

080131c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80131c8:	bf00      	nop
 80131ca:	370c      	adds	r7, #12
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80131dc:	bf00      	nop
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80131e8:	b480      	push	{r7}
 80131ea:	b083      	sub	sp, #12
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80131f0:	bf00      	nop
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8013204:	bf00      	nop
 8013206:	370c      	adds	r7, #12
 8013208:	46bd      	mov	sp, r7
 801320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320e:	4770      	bx	lr

08013210 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801321c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	429a      	cmp	r2, r3
 8013226:	d107      	bne.n	8013238 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2201      	movs	r2, #1
 801322c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2201      	movs	r2, #1
 8013232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013236:	e02a      	b.n	801328e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	429a      	cmp	r2, r3
 8013240:	d107      	bne.n	8013252 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2202      	movs	r2, #2
 8013246:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	2201      	movs	r2, #1
 801324c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8013250:	e01d      	b.n	801328e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	429a      	cmp	r2, r3
 801325a:	d107      	bne.n	801326c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2204      	movs	r2, #4
 8013260:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2201      	movs	r2, #1
 8013266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801326a:	e010      	b.n	801328e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	429a      	cmp	r2, r3
 8013274:	d107      	bne.n	8013286 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2208      	movs	r2, #8
 801327a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2201      	movs	r2, #1
 8013280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013284:	e003      	b.n	801328e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2201      	movs	r2, #1
 801328a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801328e:	68f8      	ldr	r0, [r7, #12]
 8013290:	f7ff ffb4 	bl	80131fc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	771a      	strb	r2, [r3, #28]
}
 801329a:	bf00      	nop
 801329c:	3710      	adds	r7, #16
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b084      	sub	sp, #16
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d10b      	bne.n	80132d2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2201      	movs	r2, #1
 80132be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	69db      	ldr	r3, [r3, #28]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d136      	bne.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2201      	movs	r2, #1
 80132cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80132d0:	e031      	b.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d10b      	bne.n	80132f4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	2202      	movs	r2, #2
 80132e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	69db      	ldr	r3, [r3, #28]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d125      	bne.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2201      	movs	r2, #1
 80132ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80132f2:	e020      	b.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132f8:	687a      	ldr	r2, [r7, #4]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d10b      	bne.n	8013316 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2204      	movs	r2, #4
 8013302:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	69db      	ldr	r3, [r3, #28]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d114      	bne.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2201      	movs	r2, #1
 8013310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013314:	e00f      	b.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801331a:	687a      	ldr	r2, [r7, #4]
 801331c:	429a      	cmp	r2, r3
 801331e:	d10a      	bne.n	8013336 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2208      	movs	r2, #8
 8013324:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	69db      	ldr	r3, [r3, #28]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2201      	movs	r2, #1
 8013332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013336:	68f8      	ldr	r0, [r7, #12]
 8013338:	f7ff ff42 	bl	80131c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2200      	movs	r2, #0
 8013340:	771a      	strb	r2, [r3, #28]
}
 8013342:	bf00      	nop
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}

0801334a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801334a:	b580      	push	{r7, lr}
 801334c:	b084      	sub	sp, #16
 801334e:	af00      	add	r7, sp, #0
 8013350:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013356:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	429a      	cmp	r2, r3
 8013360:	d103      	bne.n	801336a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2201      	movs	r2, #1
 8013366:	771a      	strb	r2, [r3, #28]
 8013368:	e019      	b.n	801339e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	429a      	cmp	r2, r3
 8013372:	d103      	bne.n	801337c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2202      	movs	r2, #2
 8013378:	771a      	strb	r2, [r3, #28]
 801337a:	e010      	b.n	801339e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	429a      	cmp	r2, r3
 8013384:	d103      	bne.n	801338e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2204      	movs	r2, #4
 801338a:	771a      	strb	r2, [r3, #28]
 801338c:	e007      	b.n	801339e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	429a      	cmp	r2, r3
 8013396:	d102      	bne.n	801339e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2208      	movs	r2, #8
 801339c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f7ff ff18 	bl	80131d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2200      	movs	r2, #0
 80133a8:	771a      	strb	r2, [r3, #28]
}
 80133aa:	bf00      	nop
 80133ac:	3710      	adds	r7, #16
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
	...

080133b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	4a4a      	ldr	r2, [pc, #296]	@ (80134f0 <TIM_Base_SetConfig+0x13c>)
 80133c8:	4293      	cmp	r3, r2
 80133ca:	d013      	beq.n	80133f4 <TIM_Base_SetConfig+0x40>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133d2:	d00f      	beq.n	80133f4 <TIM_Base_SetConfig+0x40>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	4a47      	ldr	r2, [pc, #284]	@ (80134f4 <TIM_Base_SetConfig+0x140>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d00b      	beq.n	80133f4 <TIM_Base_SetConfig+0x40>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	4a46      	ldr	r2, [pc, #280]	@ (80134f8 <TIM_Base_SetConfig+0x144>)
 80133e0:	4293      	cmp	r3, r2
 80133e2:	d007      	beq.n	80133f4 <TIM_Base_SetConfig+0x40>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	4a45      	ldr	r2, [pc, #276]	@ (80134fc <TIM_Base_SetConfig+0x148>)
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d003      	beq.n	80133f4 <TIM_Base_SetConfig+0x40>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	4a44      	ldr	r2, [pc, #272]	@ (8013500 <TIM_Base_SetConfig+0x14c>)
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d108      	bne.n	8013406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80133fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	685b      	ldr	r3, [r3, #4]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	4313      	orrs	r3, r2
 8013404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4a39      	ldr	r2, [pc, #228]	@ (80134f0 <TIM_Base_SetConfig+0x13c>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d027      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013414:	d023      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4a36      	ldr	r2, [pc, #216]	@ (80134f4 <TIM_Base_SetConfig+0x140>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d01f      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4a35      	ldr	r2, [pc, #212]	@ (80134f8 <TIM_Base_SetConfig+0x144>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d01b      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	4a34      	ldr	r2, [pc, #208]	@ (80134fc <TIM_Base_SetConfig+0x148>)
 801342a:	4293      	cmp	r3, r2
 801342c:	d017      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	4a33      	ldr	r2, [pc, #204]	@ (8013500 <TIM_Base_SetConfig+0x14c>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d013      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	4a32      	ldr	r2, [pc, #200]	@ (8013504 <TIM_Base_SetConfig+0x150>)
 801343a:	4293      	cmp	r3, r2
 801343c:	d00f      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	4a31      	ldr	r2, [pc, #196]	@ (8013508 <TIM_Base_SetConfig+0x154>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d00b      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	4a30      	ldr	r2, [pc, #192]	@ (801350c <TIM_Base_SetConfig+0x158>)
 801344a:	4293      	cmp	r3, r2
 801344c:	d007      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	4a2f      	ldr	r2, [pc, #188]	@ (8013510 <TIM_Base_SetConfig+0x15c>)
 8013452:	4293      	cmp	r3, r2
 8013454:	d003      	beq.n	801345e <TIM_Base_SetConfig+0xaa>
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	4a2e      	ldr	r2, [pc, #184]	@ (8013514 <TIM_Base_SetConfig+0x160>)
 801345a:	4293      	cmp	r3, r2
 801345c:	d108      	bne.n	8013470 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	4313      	orrs	r3, r2
 801346e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	695b      	ldr	r3, [r3, #20]
 801347a:	4313      	orrs	r3, r2
 801347c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	68fa      	ldr	r2, [r7, #12]
 8013482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	689a      	ldr	r2, [r3, #8]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	4a16      	ldr	r2, [pc, #88]	@ (80134f0 <TIM_Base_SetConfig+0x13c>)
 8013498:	4293      	cmp	r3, r2
 801349a:	d00f      	beq.n	80134bc <TIM_Base_SetConfig+0x108>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	4a18      	ldr	r2, [pc, #96]	@ (8013500 <TIM_Base_SetConfig+0x14c>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d00b      	beq.n	80134bc <TIM_Base_SetConfig+0x108>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	4a17      	ldr	r2, [pc, #92]	@ (8013504 <TIM_Base_SetConfig+0x150>)
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d007      	beq.n	80134bc <TIM_Base_SetConfig+0x108>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	4a16      	ldr	r2, [pc, #88]	@ (8013508 <TIM_Base_SetConfig+0x154>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d003      	beq.n	80134bc <TIM_Base_SetConfig+0x108>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	4a15      	ldr	r2, [pc, #84]	@ (801350c <TIM_Base_SetConfig+0x158>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d103      	bne.n	80134c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	691a      	ldr	r2, [r3, #16]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2201      	movs	r2, #1
 80134c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	691b      	ldr	r3, [r3, #16]
 80134ce:	f003 0301 	and.w	r3, r3, #1
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d105      	bne.n	80134e2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	691b      	ldr	r3, [r3, #16]
 80134da:	f023 0201 	bic.w	r2, r3, #1
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	611a      	str	r2, [r3, #16]
  }
}
 80134e2:	bf00      	nop
 80134e4:	3714      	adds	r7, #20
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	40010000 	.word	0x40010000
 80134f4:	40000400 	.word	0x40000400
 80134f8:	40000800 	.word	0x40000800
 80134fc:	40000c00 	.word	0x40000c00
 8013500:	40010400 	.word	0x40010400
 8013504:	40014000 	.word	0x40014000
 8013508:	40014400 	.word	0x40014400
 801350c:	40014800 	.word	0x40014800
 8013510:	4000e000 	.word	0x4000e000
 8013514:	4000e400 	.word	0x4000e400

08013518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013518:	b480      	push	{r7}
 801351a:	b087      	sub	sp, #28
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a1b      	ldr	r3, [r3, #32]
 8013526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6a1b      	ldr	r3, [r3, #32]
 801352c:	f023 0201 	bic.w	r2, r3, #1
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	699b      	ldr	r3, [r3, #24]
 801353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013540:	68fa      	ldr	r2, [r7, #12]
 8013542:	4b37      	ldr	r3, [pc, #220]	@ (8013620 <TIM_OC1_SetConfig+0x108>)
 8013544:	4013      	ands	r3, r2
 8013546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	f023 0303 	bic.w	r3, r3, #3
 801354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	4313      	orrs	r3, r2
 8013558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	f023 0302 	bic.w	r3, r3, #2
 8013560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	689b      	ldr	r3, [r3, #8]
 8013566:	697a      	ldr	r2, [r7, #20]
 8013568:	4313      	orrs	r3, r2
 801356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a2d      	ldr	r2, [pc, #180]	@ (8013624 <TIM_OC1_SetConfig+0x10c>)
 8013570:	4293      	cmp	r3, r2
 8013572:	d00f      	beq.n	8013594 <TIM_OC1_SetConfig+0x7c>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4a2c      	ldr	r2, [pc, #176]	@ (8013628 <TIM_OC1_SetConfig+0x110>)
 8013578:	4293      	cmp	r3, r2
 801357a:	d00b      	beq.n	8013594 <TIM_OC1_SetConfig+0x7c>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	4a2b      	ldr	r2, [pc, #172]	@ (801362c <TIM_OC1_SetConfig+0x114>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d007      	beq.n	8013594 <TIM_OC1_SetConfig+0x7c>
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	4a2a      	ldr	r2, [pc, #168]	@ (8013630 <TIM_OC1_SetConfig+0x118>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d003      	beq.n	8013594 <TIM_OC1_SetConfig+0x7c>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4a29      	ldr	r2, [pc, #164]	@ (8013634 <TIM_OC1_SetConfig+0x11c>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d10c      	bne.n	80135ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	f023 0308 	bic.w	r3, r3, #8
 801359a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	697a      	ldr	r2, [r7, #20]
 80135a2:	4313      	orrs	r3, r2
 80135a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	f023 0304 	bic.w	r3, r3, #4
 80135ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	4a1c      	ldr	r2, [pc, #112]	@ (8013624 <TIM_OC1_SetConfig+0x10c>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d00f      	beq.n	80135d6 <TIM_OC1_SetConfig+0xbe>
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	4a1b      	ldr	r2, [pc, #108]	@ (8013628 <TIM_OC1_SetConfig+0x110>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d00b      	beq.n	80135d6 <TIM_OC1_SetConfig+0xbe>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4a1a      	ldr	r2, [pc, #104]	@ (801362c <TIM_OC1_SetConfig+0x114>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d007      	beq.n	80135d6 <TIM_OC1_SetConfig+0xbe>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	4a19      	ldr	r2, [pc, #100]	@ (8013630 <TIM_OC1_SetConfig+0x118>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d003      	beq.n	80135d6 <TIM_OC1_SetConfig+0xbe>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	4a18      	ldr	r2, [pc, #96]	@ (8013634 <TIM_OC1_SetConfig+0x11c>)
 80135d2:	4293      	cmp	r3, r2
 80135d4:	d111      	bne.n	80135fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80135dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80135e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	695b      	ldr	r3, [r3, #20]
 80135ea:	693a      	ldr	r2, [r7, #16]
 80135ec:	4313      	orrs	r3, r2
 80135ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	699b      	ldr	r3, [r3, #24]
 80135f4:	693a      	ldr	r2, [r7, #16]
 80135f6:	4313      	orrs	r3, r2
 80135f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	693a      	ldr	r2, [r7, #16]
 80135fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	685a      	ldr	r2, [r3, #4]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	697a      	ldr	r2, [r7, #20]
 8013612:	621a      	str	r2, [r3, #32]
}
 8013614:	bf00      	nop
 8013616:	371c      	adds	r7, #28
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr
 8013620:	fffeff8f 	.word	0xfffeff8f
 8013624:	40010000 	.word	0x40010000
 8013628:	40010400 	.word	0x40010400
 801362c:	40014000 	.word	0x40014000
 8013630:	40014400 	.word	0x40014400
 8013634:	40014800 	.word	0x40014800

08013638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013638:	b480      	push	{r7}
 801363a:	b087      	sub	sp, #28
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6a1b      	ldr	r3, [r3, #32]
 8013646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6a1b      	ldr	r3, [r3, #32]
 801364c:	f023 0210 	bic.w	r2, r3, #16
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	699b      	ldr	r3, [r3, #24]
 801365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	4b34      	ldr	r3, [pc, #208]	@ (8013734 <TIM_OC2_SetConfig+0xfc>)
 8013664:	4013      	ands	r3, r2
 8013666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801366e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	021b      	lsls	r3, r3, #8
 8013676:	68fa      	ldr	r2, [r7, #12]
 8013678:	4313      	orrs	r3, r2
 801367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	f023 0320 	bic.w	r3, r3, #32
 8013682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	011b      	lsls	r3, r3, #4
 801368a:	697a      	ldr	r2, [r7, #20]
 801368c:	4313      	orrs	r3, r2
 801368e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	4a29      	ldr	r2, [pc, #164]	@ (8013738 <TIM_OC2_SetConfig+0x100>)
 8013694:	4293      	cmp	r3, r2
 8013696:	d003      	beq.n	80136a0 <TIM_OC2_SetConfig+0x68>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4a28      	ldr	r2, [pc, #160]	@ (801373c <TIM_OC2_SetConfig+0x104>)
 801369c:	4293      	cmp	r3, r2
 801369e:	d10d      	bne.n	80136bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80136a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	011b      	lsls	r3, r3, #4
 80136ae:	697a      	ldr	r2, [r7, #20]
 80136b0:	4313      	orrs	r3, r2
 80136b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80136ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	4a1e      	ldr	r2, [pc, #120]	@ (8013738 <TIM_OC2_SetConfig+0x100>)
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d00f      	beq.n	80136e4 <TIM_OC2_SetConfig+0xac>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4a1d      	ldr	r2, [pc, #116]	@ (801373c <TIM_OC2_SetConfig+0x104>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d00b      	beq.n	80136e4 <TIM_OC2_SetConfig+0xac>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4a1c      	ldr	r2, [pc, #112]	@ (8013740 <TIM_OC2_SetConfig+0x108>)
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d007      	beq.n	80136e4 <TIM_OC2_SetConfig+0xac>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4a1b      	ldr	r2, [pc, #108]	@ (8013744 <TIM_OC2_SetConfig+0x10c>)
 80136d8:	4293      	cmp	r3, r2
 80136da:	d003      	beq.n	80136e4 <TIM_OC2_SetConfig+0xac>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	4a1a      	ldr	r2, [pc, #104]	@ (8013748 <TIM_OC2_SetConfig+0x110>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d113      	bne.n	801370c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80136ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80136f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	695b      	ldr	r3, [r3, #20]
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	693a      	ldr	r2, [r7, #16]
 80136fc:	4313      	orrs	r3, r2
 80136fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	699b      	ldr	r3, [r3, #24]
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	693a      	ldr	r2, [r7, #16]
 8013708:	4313      	orrs	r3, r2
 801370a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	685a      	ldr	r2, [r3, #4]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	697a      	ldr	r2, [r7, #20]
 8013724:	621a      	str	r2, [r3, #32]
}
 8013726:	bf00      	nop
 8013728:	371c      	adds	r7, #28
 801372a:	46bd      	mov	sp, r7
 801372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013730:	4770      	bx	lr
 8013732:	bf00      	nop
 8013734:	feff8fff 	.word	0xfeff8fff
 8013738:	40010000 	.word	0x40010000
 801373c:	40010400 	.word	0x40010400
 8013740:	40014000 	.word	0x40014000
 8013744:	40014400 	.word	0x40014400
 8013748:	40014800 	.word	0x40014800

0801374c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801374c:	b480      	push	{r7}
 801374e:	b087      	sub	sp, #28
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6a1b      	ldr	r3, [r3, #32]
 801375a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a1b      	ldr	r3, [r3, #32]
 8013760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	69db      	ldr	r3, [r3, #28]
 8013772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	4b33      	ldr	r3, [pc, #204]	@ (8013844 <TIM_OC3_SetConfig+0xf8>)
 8013778:	4013      	ands	r3, r2
 801377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f023 0303 	bic.w	r3, r3, #3
 8013782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	68fa      	ldr	r2, [r7, #12]
 801378a:	4313      	orrs	r3, r2
 801378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	021b      	lsls	r3, r3, #8
 801379c:	697a      	ldr	r2, [r7, #20]
 801379e:	4313      	orrs	r3, r2
 80137a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4a28      	ldr	r2, [pc, #160]	@ (8013848 <TIM_OC3_SetConfig+0xfc>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d003      	beq.n	80137b2 <TIM_OC3_SetConfig+0x66>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a27      	ldr	r2, [pc, #156]	@ (801384c <TIM_OC3_SetConfig+0x100>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d10d      	bne.n	80137ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80137b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	021b      	lsls	r3, r3, #8
 80137c0:	697a      	ldr	r2, [r7, #20]
 80137c2:	4313      	orrs	r3, r2
 80137c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80137cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013848 <TIM_OC3_SetConfig+0xfc>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d00f      	beq.n	80137f6 <TIM_OC3_SetConfig+0xaa>
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4a1c      	ldr	r2, [pc, #112]	@ (801384c <TIM_OC3_SetConfig+0x100>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d00b      	beq.n	80137f6 <TIM_OC3_SetConfig+0xaa>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	4a1b      	ldr	r2, [pc, #108]	@ (8013850 <TIM_OC3_SetConfig+0x104>)
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d007      	beq.n	80137f6 <TIM_OC3_SetConfig+0xaa>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4a1a      	ldr	r2, [pc, #104]	@ (8013854 <TIM_OC3_SetConfig+0x108>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d003      	beq.n	80137f6 <TIM_OC3_SetConfig+0xaa>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4a19      	ldr	r2, [pc, #100]	@ (8013858 <TIM_OC3_SetConfig+0x10c>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d113      	bne.n	801381e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80137fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	011b      	lsls	r3, r3, #4
 801380c:	693a      	ldr	r2, [r7, #16]
 801380e:	4313      	orrs	r3, r2
 8013810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	699b      	ldr	r3, [r3, #24]
 8013816:	011b      	lsls	r3, r3, #4
 8013818:	693a      	ldr	r2, [r7, #16]
 801381a:	4313      	orrs	r3, r2
 801381c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	693a      	ldr	r2, [r7, #16]
 8013822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	68fa      	ldr	r2, [r7, #12]
 8013828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	685a      	ldr	r2, [r3, #4]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	697a      	ldr	r2, [r7, #20]
 8013836:	621a      	str	r2, [r3, #32]
}
 8013838:	bf00      	nop
 801383a:	371c      	adds	r7, #28
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr
 8013844:	fffeff8f 	.word	0xfffeff8f
 8013848:	40010000 	.word	0x40010000
 801384c:	40010400 	.word	0x40010400
 8013850:	40014000 	.word	0x40014000
 8013854:	40014400 	.word	0x40014400
 8013858:	40014800 	.word	0x40014800

0801385c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801385c:	b480      	push	{r7}
 801385e:	b087      	sub	sp, #28
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a1b      	ldr	r3, [r3, #32]
 801386a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6a1b      	ldr	r3, [r3, #32]
 8013870:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	69db      	ldr	r3, [r3, #28]
 8013882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013884:	68fa      	ldr	r2, [r7, #12]
 8013886:	4b24      	ldr	r3, [pc, #144]	@ (8013918 <TIM_OC4_SetConfig+0xbc>)
 8013888:	4013      	ands	r3, r2
 801388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	021b      	lsls	r3, r3, #8
 801389a:	68fa      	ldr	r2, [r7, #12]
 801389c:	4313      	orrs	r3, r2
 801389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80138a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	689b      	ldr	r3, [r3, #8]
 80138ac:	031b      	lsls	r3, r3, #12
 80138ae:	693a      	ldr	r2, [r7, #16]
 80138b0:	4313      	orrs	r3, r2
 80138b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	4a19      	ldr	r2, [pc, #100]	@ (801391c <TIM_OC4_SetConfig+0xc0>)
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d00f      	beq.n	80138dc <TIM_OC4_SetConfig+0x80>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	4a18      	ldr	r2, [pc, #96]	@ (8013920 <TIM_OC4_SetConfig+0xc4>)
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d00b      	beq.n	80138dc <TIM_OC4_SetConfig+0x80>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4a17      	ldr	r2, [pc, #92]	@ (8013924 <TIM_OC4_SetConfig+0xc8>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d007      	beq.n	80138dc <TIM_OC4_SetConfig+0x80>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a16      	ldr	r2, [pc, #88]	@ (8013928 <TIM_OC4_SetConfig+0xcc>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d003      	beq.n	80138dc <TIM_OC4_SetConfig+0x80>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4a15      	ldr	r2, [pc, #84]	@ (801392c <TIM_OC4_SetConfig+0xd0>)
 80138d8:	4293      	cmp	r3, r2
 80138da:	d109      	bne.n	80138f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80138e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	695b      	ldr	r3, [r3, #20]
 80138e8:	019b      	lsls	r3, r3, #6
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	4313      	orrs	r3, r2
 80138ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	697a      	ldr	r2, [r7, #20]
 80138f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	685a      	ldr	r2, [r3, #4]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	693a      	ldr	r2, [r7, #16]
 8013908:	621a      	str	r2, [r3, #32]
}
 801390a:	bf00      	nop
 801390c:	371c      	adds	r7, #28
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	feff8fff 	.word	0xfeff8fff
 801391c:	40010000 	.word	0x40010000
 8013920:	40010400 	.word	0x40010400
 8013924:	40014000 	.word	0x40014000
 8013928:	40014400 	.word	0x40014400
 801392c:	40014800 	.word	0x40014800

08013930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013930:	b480      	push	{r7}
 8013932:	b087      	sub	sp, #28
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6a1b      	ldr	r3, [r3, #32]
 8013944:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	4b21      	ldr	r3, [pc, #132]	@ (80139e0 <TIM_OC5_SetConfig+0xb0>)
 801395c:	4013      	ands	r3, r2
 801395e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	68fa      	ldr	r2, [r7, #12]
 8013966:	4313      	orrs	r3, r2
 8013968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	689b      	ldr	r3, [r3, #8]
 8013976:	041b      	lsls	r3, r3, #16
 8013978:	693a      	ldr	r2, [r7, #16]
 801397a:	4313      	orrs	r3, r2
 801397c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a18      	ldr	r2, [pc, #96]	@ (80139e4 <TIM_OC5_SetConfig+0xb4>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d00f      	beq.n	80139a6 <TIM_OC5_SetConfig+0x76>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a17      	ldr	r2, [pc, #92]	@ (80139e8 <TIM_OC5_SetConfig+0xb8>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d00b      	beq.n	80139a6 <TIM_OC5_SetConfig+0x76>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a16      	ldr	r2, [pc, #88]	@ (80139ec <TIM_OC5_SetConfig+0xbc>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d007      	beq.n	80139a6 <TIM_OC5_SetConfig+0x76>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4a15      	ldr	r2, [pc, #84]	@ (80139f0 <TIM_OC5_SetConfig+0xc0>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d003      	beq.n	80139a6 <TIM_OC5_SetConfig+0x76>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	4a14      	ldr	r2, [pc, #80]	@ (80139f4 <TIM_OC5_SetConfig+0xc4>)
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d109      	bne.n	80139ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80139ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	021b      	lsls	r3, r3, #8
 80139b4:	697a      	ldr	r2, [r7, #20]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	697a      	ldr	r2, [r7, #20]
 80139be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	685a      	ldr	r2, [r3, #4]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	693a      	ldr	r2, [r7, #16]
 80139d2:	621a      	str	r2, [r3, #32]
}
 80139d4:	bf00      	nop
 80139d6:	371c      	adds	r7, #28
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	fffeff8f 	.word	0xfffeff8f
 80139e4:	40010000 	.word	0x40010000
 80139e8:	40010400 	.word	0x40010400
 80139ec:	40014000 	.word	0x40014000
 80139f0:	40014400 	.word	0x40014400
 80139f4:	40014800 	.word	0x40014800

080139f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b087      	sub	sp, #28
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6a1b      	ldr	r3, [r3, #32]
 8013a0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013a20:	68fa      	ldr	r2, [r7, #12]
 8013a22:	4b22      	ldr	r3, [pc, #136]	@ (8013aac <TIM_OC6_SetConfig+0xb4>)
 8013a24:	4013      	ands	r3, r2
 8013a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	021b      	lsls	r3, r3, #8
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	051b      	lsls	r3, r3, #20
 8013a42:	693a      	ldr	r2, [r7, #16]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	4a19      	ldr	r2, [pc, #100]	@ (8013ab0 <TIM_OC6_SetConfig+0xb8>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d00f      	beq.n	8013a70 <TIM_OC6_SetConfig+0x78>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4a18      	ldr	r2, [pc, #96]	@ (8013ab4 <TIM_OC6_SetConfig+0xbc>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d00b      	beq.n	8013a70 <TIM_OC6_SetConfig+0x78>
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	4a17      	ldr	r2, [pc, #92]	@ (8013ab8 <TIM_OC6_SetConfig+0xc0>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d007      	beq.n	8013a70 <TIM_OC6_SetConfig+0x78>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4a16      	ldr	r2, [pc, #88]	@ (8013abc <TIM_OC6_SetConfig+0xc4>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d003      	beq.n	8013a70 <TIM_OC6_SetConfig+0x78>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	4a15      	ldr	r2, [pc, #84]	@ (8013ac0 <TIM_OC6_SetConfig+0xc8>)
 8013a6c:	4293      	cmp	r3, r2
 8013a6e:	d109      	bne.n	8013a84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	695b      	ldr	r3, [r3, #20]
 8013a7c:	029b      	lsls	r3, r3, #10
 8013a7e:	697a      	ldr	r2, [r7, #20]
 8013a80:	4313      	orrs	r3, r2
 8013a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	685a      	ldr	r2, [r3, #4]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	693a      	ldr	r2, [r7, #16]
 8013a9c:	621a      	str	r2, [r3, #32]
}
 8013a9e:	bf00      	nop
 8013aa0:	371c      	adds	r7, #28
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	feff8fff 	.word	0xfeff8fff
 8013ab0:	40010000 	.word	0x40010000
 8013ab4:	40010400 	.word	0x40010400
 8013ab8:	40014000 	.word	0x40014000
 8013abc:	40014400 	.word	0x40014400
 8013ac0:	40014800 	.word	0x40014800

08013ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b087      	sub	sp, #28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6a1b      	ldr	r3, [r3, #32]
 8013ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	6a1b      	ldr	r3, [r3, #32]
 8013ada:	f023 0201 	bic.w	r2, r3, #1
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	011b      	lsls	r3, r3, #4
 8013af4:	693a      	ldr	r2, [r7, #16]
 8013af6:	4313      	orrs	r3, r2
 8013af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	f023 030a 	bic.w	r3, r3, #10
 8013b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013b02:	697a      	ldr	r2, [r7, #20]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	4313      	orrs	r3, r2
 8013b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	693a      	ldr	r2, [r7, #16]
 8013b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	697a      	ldr	r2, [r7, #20]
 8013b14:	621a      	str	r2, [r3, #32]
}
 8013b16:	bf00      	nop
 8013b18:	371c      	adds	r7, #28
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr

08013b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b22:	b480      	push	{r7}
 8013b24:	b087      	sub	sp, #28
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	60f8      	str	r0, [r7, #12]
 8013b2a:	60b9      	str	r1, [r7, #8]
 8013b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6a1b      	ldr	r3, [r3, #32]
 8013b32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6a1b      	ldr	r3, [r3, #32]
 8013b38:	f023 0210 	bic.w	r2, r3, #16
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	031b      	lsls	r3, r3, #12
 8013b52:	693a      	ldr	r2, [r7, #16]
 8013b54:	4313      	orrs	r3, r2
 8013b56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013b5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	011b      	lsls	r3, r3, #4
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	4313      	orrs	r3, r2
 8013b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	693a      	ldr	r2, [r7, #16]
 8013b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	697a      	ldr	r2, [r7, #20]
 8013b74:	621a      	str	r2, [r3, #32]
}
 8013b76:	bf00      	nop
 8013b78:	371c      	adds	r7, #28
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr
	...

08013b84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b84:	b480      	push	{r7}
 8013b86:	b085      	sub	sp, #20
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	4b09      	ldr	r3, [pc, #36]	@ (8013bbc <TIM_ITRx_SetConfig+0x38>)
 8013b98:	4013      	ands	r3, r2
 8013b9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013b9c:	683a      	ldr	r2, [r7, #0]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	4313      	orrs	r3, r2
 8013ba2:	f043 0307 	orr.w	r3, r3, #7
 8013ba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	609a      	str	r2, [r3, #8]
}
 8013bae:	bf00      	nop
 8013bb0:	3714      	adds	r7, #20
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb8:	4770      	bx	lr
 8013bba:	bf00      	nop
 8013bbc:	ffcfff8f 	.word	0xffcfff8f

08013bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b087      	sub	sp, #28
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
 8013bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	689b      	ldr	r3, [r3, #8]
 8013bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	021a      	lsls	r2, r3, #8
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	431a      	orrs	r2, r3
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	4313      	orrs	r3, r2
 8013be8:	697a      	ldr	r2, [r7, #20]
 8013bea:	4313      	orrs	r3, r2
 8013bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	697a      	ldr	r2, [r7, #20]
 8013bf2:	609a      	str	r2, [r3, #8]
}
 8013bf4:	bf00      	nop
 8013bf6:	371c      	adds	r7, #28
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b087      	sub	sp, #28
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	f003 031f 	and.w	r3, r3, #31
 8013c12:	2201      	movs	r2, #1
 8013c14:	fa02 f303 	lsl.w	r3, r2, r3
 8013c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	6a1a      	ldr	r2, [r3, #32]
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	43db      	mvns	r3, r3
 8013c22:	401a      	ands	r2, r3
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6a1a      	ldr	r2, [r3, #32]
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	f003 031f 	and.w	r3, r3, #31
 8013c32:	6879      	ldr	r1, [r7, #4]
 8013c34:	fa01 f303 	lsl.w	r3, r1, r3
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	621a      	str	r2, [r3, #32]
}
 8013c3e:	bf00      	nop
 8013c40:	371c      	adds	r7, #28
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr
	...

08013c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d101      	bne.n	8013c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013c60:	2302      	movs	r3, #2
 8013c62:	e077      	b.n	8013d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2201      	movs	r2, #1
 8013c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2202      	movs	r2, #2
 8013c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	685b      	ldr	r3, [r3, #4]
 8013c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	689b      	ldr	r3, [r3, #8]
 8013c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	4a35      	ldr	r2, [pc, #212]	@ (8013d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013c8a:	4293      	cmp	r3, r2
 8013c8c:	d004      	beq.n	8013c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4a34      	ldr	r2, [pc, #208]	@ (8013d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013c94:	4293      	cmp	r3, r2
 8013c96:	d108      	bne.n	8013caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	68fa      	ldr	r2, [r7, #12]
 8013cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4a25      	ldr	r2, [pc, #148]	@ (8013d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013cca:	4293      	cmp	r3, r2
 8013ccc:	d02c      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013cd6:	d027      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4a22      	ldr	r2, [pc, #136]	@ (8013d68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d022      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4a21      	ldr	r2, [pc, #132]	@ (8013d6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d01d      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8013d70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d018      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8013d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d013      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	4a1b      	ldr	r2, [pc, #108]	@ (8013d74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d00e      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8013d78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d009      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a18      	ldr	r2, [pc, #96]	@ (8013d7c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d004      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4a17      	ldr	r2, [pc, #92]	@ (8013d80 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d10c      	bne.n	8013d42 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	4313      	orrs	r3, r2
 8013d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2201      	movs	r2, #1
 8013d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3714      	adds	r7, #20
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5e:	4770      	bx	lr
 8013d60:	40010000 	.word	0x40010000
 8013d64:	40010400 	.word	0x40010400
 8013d68:	40000400 	.word	0x40000400
 8013d6c:	40000800 	.word	0x40000800
 8013d70:	40000c00 	.word	0x40000c00
 8013d74:	40001800 	.word	0x40001800
 8013d78:	40014000 	.word	0x40014000
 8013d7c:	4000e000 	.word	0x4000e000
 8013d80:	4000e400 	.word	0x4000e400

08013d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b083      	sub	sp, #12
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013d8c:	bf00      	nop
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013da0:	bf00      	nop
 8013da2:	370c      	adds	r7, #12
 8013da4:	46bd      	mov	sp, r7
 8013da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013daa:	4770      	bx	lr

08013dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b083      	sub	sp, #12
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013db4:	bf00      	nop
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d101      	bne.n	8013dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	e042      	b.n	8013e58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d106      	bne.n	8013dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f7ee fe5b 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2224      	movs	r2, #36	@ 0x24
 8013dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	f022 0201 	bic.w	r2, r2, #1
 8013e00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d002      	beq.n	8013e10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 fe94 	bl	8014b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 f825 	bl	8013e60 <UART_SetConfig>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	d101      	bne.n	8013e20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	e01b      	b.n	8013e58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	685a      	ldr	r2, [r3, #4]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	689a      	ldr	r2, [r3, #8]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f042 0201 	orr.w	r2, r2, #1
 8013e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f000 ff13 	bl	8014c7c <UART_CheckIdleState>
 8013e56:	4603      	mov	r3, r0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3708      	adds	r7, #8
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013e64:	b092      	sub	sp, #72	@ 0x48
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	689a      	ldr	r2, [r3, #8]
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	691b      	ldr	r3, [r3, #16]
 8013e78:	431a      	orrs	r2, r3
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	695b      	ldr	r3, [r3, #20]
 8013e7e:	431a      	orrs	r2, r3
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	69db      	ldr	r3, [r3, #28]
 8013e84:	4313      	orrs	r3, r2
 8013e86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	4bbe      	ldr	r3, [pc, #760]	@ (8014188 <UART_SetConfig+0x328>)
 8013e90:	4013      	ands	r3, r2
 8013e92:	697a      	ldr	r2, [r7, #20]
 8013e94:	6812      	ldr	r2, [r2, #0]
 8013e96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013e98:	430b      	orrs	r3, r1
 8013e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	68da      	ldr	r2, [r3, #12]
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	430a      	orrs	r2, r1
 8013eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4ab3      	ldr	r2, [pc, #716]	@ (801418c <UART_SetConfig+0x32c>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d004      	beq.n	8013ecc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	6a1b      	ldr	r3, [r3, #32]
 8013ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013ecc:	697b      	ldr	r3, [r7, #20]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	689a      	ldr	r2, [r3, #8]
 8013ed2:	4baf      	ldr	r3, [pc, #700]	@ (8014190 <UART_SetConfig+0x330>)
 8013ed4:	4013      	ands	r3, r2
 8013ed6:	697a      	ldr	r2, [r7, #20]
 8013ed8:	6812      	ldr	r2, [r2, #0]
 8013eda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013edc:	430b      	orrs	r3, r1
 8013ede:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ee6:	f023 010f 	bic.w	r1, r3, #15
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	430a      	orrs	r2, r1
 8013ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4aa6      	ldr	r2, [pc, #664]	@ (8014194 <UART_SetConfig+0x334>)
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d177      	bne.n	8013ff0 <UART_SetConfig+0x190>
 8013f00:	4ba5      	ldr	r3, [pc, #660]	@ (8014198 <UART_SetConfig+0x338>)
 8013f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013f08:	2b28      	cmp	r3, #40	@ 0x28
 8013f0a:	d86d      	bhi.n	8013fe8 <UART_SetConfig+0x188>
 8013f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8013f14 <UART_SetConfig+0xb4>)
 8013f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f12:	bf00      	nop
 8013f14:	08013fb9 	.word	0x08013fb9
 8013f18:	08013fe9 	.word	0x08013fe9
 8013f1c:	08013fe9 	.word	0x08013fe9
 8013f20:	08013fe9 	.word	0x08013fe9
 8013f24:	08013fe9 	.word	0x08013fe9
 8013f28:	08013fe9 	.word	0x08013fe9
 8013f2c:	08013fe9 	.word	0x08013fe9
 8013f30:	08013fe9 	.word	0x08013fe9
 8013f34:	08013fc1 	.word	0x08013fc1
 8013f38:	08013fe9 	.word	0x08013fe9
 8013f3c:	08013fe9 	.word	0x08013fe9
 8013f40:	08013fe9 	.word	0x08013fe9
 8013f44:	08013fe9 	.word	0x08013fe9
 8013f48:	08013fe9 	.word	0x08013fe9
 8013f4c:	08013fe9 	.word	0x08013fe9
 8013f50:	08013fe9 	.word	0x08013fe9
 8013f54:	08013fc9 	.word	0x08013fc9
 8013f58:	08013fe9 	.word	0x08013fe9
 8013f5c:	08013fe9 	.word	0x08013fe9
 8013f60:	08013fe9 	.word	0x08013fe9
 8013f64:	08013fe9 	.word	0x08013fe9
 8013f68:	08013fe9 	.word	0x08013fe9
 8013f6c:	08013fe9 	.word	0x08013fe9
 8013f70:	08013fe9 	.word	0x08013fe9
 8013f74:	08013fd1 	.word	0x08013fd1
 8013f78:	08013fe9 	.word	0x08013fe9
 8013f7c:	08013fe9 	.word	0x08013fe9
 8013f80:	08013fe9 	.word	0x08013fe9
 8013f84:	08013fe9 	.word	0x08013fe9
 8013f88:	08013fe9 	.word	0x08013fe9
 8013f8c:	08013fe9 	.word	0x08013fe9
 8013f90:	08013fe9 	.word	0x08013fe9
 8013f94:	08013fd9 	.word	0x08013fd9
 8013f98:	08013fe9 	.word	0x08013fe9
 8013f9c:	08013fe9 	.word	0x08013fe9
 8013fa0:	08013fe9 	.word	0x08013fe9
 8013fa4:	08013fe9 	.word	0x08013fe9
 8013fa8:	08013fe9 	.word	0x08013fe9
 8013fac:	08013fe9 	.word	0x08013fe9
 8013fb0:	08013fe9 	.word	0x08013fe9
 8013fb4:	08013fe1 	.word	0x08013fe1
 8013fb8:	2301      	movs	r3, #1
 8013fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fbe:	e326      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fc0:	2304      	movs	r3, #4
 8013fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fc6:	e322      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fc8:	2308      	movs	r3, #8
 8013fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fce:	e31e      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fd0:	2310      	movs	r3, #16
 8013fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fd6:	e31a      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fd8:	2320      	movs	r3, #32
 8013fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fde:	e316      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fe0:	2340      	movs	r3, #64	@ 0x40
 8013fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fe6:	e312      	b.n	801460e <UART_SetConfig+0x7ae>
 8013fe8:	2380      	movs	r3, #128	@ 0x80
 8013fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013fee:	e30e      	b.n	801460e <UART_SetConfig+0x7ae>
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	4a69      	ldr	r2, [pc, #420]	@ (801419c <UART_SetConfig+0x33c>)
 8013ff6:	4293      	cmp	r3, r2
 8013ff8:	d130      	bne.n	801405c <UART_SetConfig+0x1fc>
 8013ffa:	4b67      	ldr	r3, [pc, #412]	@ (8014198 <UART_SetConfig+0x338>)
 8013ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ffe:	f003 0307 	and.w	r3, r3, #7
 8014002:	2b05      	cmp	r3, #5
 8014004:	d826      	bhi.n	8014054 <UART_SetConfig+0x1f4>
 8014006:	a201      	add	r2, pc, #4	@ (adr r2, 801400c <UART_SetConfig+0x1ac>)
 8014008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801400c:	08014025 	.word	0x08014025
 8014010:	0801402d 	.word	0x0801402d
 8014014:	08014035 	.word	0x08014035
 8014018:	0801403d 	.word	0x0801403d
 801401c:	08014045 	.word	0x08014045
 8014020:	0801404d 	.word	0x0801404d
 8014024:	2300      	movs	r3, #0
 8014026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801402a:	e2f0      	b.n	801460e <UART_SetConfig+0x7ae>
 801402c:	2304      	movs	r3, #4
 801402e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014032:	e2ec      	b.n	801460e <UART_SetConfig+0x7ae>
 8014034:	2308      	movs	r3, #8
 8014036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801403a:	e2e8      	b.n	801460e <UART_SetConfig+0x7ae>
 801403c:	2310      	movs	r3, #16
 801403e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014042:	e2e4      	b.n	801460e <UART_SetConfig+0x7ae>
 8014044:	2320      	movs	r3, #32
 8014046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801404a:	e2e0      	b.n	801460e <UART_SetConfig+0x7ae>
 801404c:	2340      	movs	r3, #64	@ 0x40
 801404e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014052:	e2dc      	b.n	801460e <UART_SetConfig+0x7ae>
 8014054:	2380      	movs	r3, #128	@ 0x80
 8014056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801405a:	e2d8      	b.n	801460e <UART_SetConfig+0x7ae>
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a4f      	ldr	r2, [pc, #316]	@ (80141a0 <UART_SetConfig+0x340>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d130      	bne.n	80140c8 <UART_SetConfig+0x268>
 8014066:	4b4c      	ldr	r3, [pc, #304]	@ (8014198 <UART_SetConfig+0x338>)
 8014068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801406a:	f003 0307 	and.w	r3, r3, #7
 801406e:	2b05      	cmp	r3, #5
 8014070:	d826      	bhi.n	80140c0 <UART_SetConfig+0x260>
 8014072:	a201      	add	r2, pc, #4	@ (adr r2, 8014078 <UART_SetConfig+0x218>)
 8014074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014078:	08014091 	.word	0x08014091
 801407c:	08014099 	.word	0x08014099
 8014080:	080140a1 	.word	0x080140a1
 8014084:	080140a9 	.word	0x080140a9
 8014088:	080140b1 	.word	0x080140b1
 801408c:	080140b9 	.word	0x080140b9
 8014090:	2300      	movs	r3, #0
 8014092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014096:	e2ba      	b.n	801460e <UART_SetConfig+0x7ae>
 8014098:	2304      	movs	r3, #4
 801409a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801409e:	e2b6      	b.n	801460e <UART_SetConfig+0x7ae>
 80140a0:	2308      	movs	r3, #8
 80140a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140a6:	e2b2      	b.n	801460e <UART_SetConfig+0x7ae>
 80140a8:	2310      	movs	r3, #16
 80140aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140ae:	e2ae      	b.n	801460e <UART_SetConfig+0x7ae>
 80140b0:	2320      	movs	r3, #32
 80140b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140b6:	e2aa      	b.n	801460e <UART_SetConfig+0x7ae>
 80140b8:	2340      	movs	r3, #64	@ 0x40
 80140ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140be:	e2a6      	b.n	801460e <UART_SetConfig+0x7ae>
 80140c0:	2380      	movs	r3, #128	@ 0x80
 80140c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80140c6:	e2a2      	b.n	801460e <UART_SetConfig+0x7ae>
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a35      	ldr	r2, [pc, #212]	@ (80141a4 <UART_SetConfig+0x344>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d130      	bne.n	8014134 <UART_SetConfig+0x2d4>
 80140d2:	4b31      	ldr	r3, [pc, #196]	@ (8014198 <UART_SetConfig+0x338>)
 80140d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140d6:	f003 0307 	and.w	r3, r3, #7
 80140da:	2b05      	cmp	r3, #5
 80140dc:	d826      	bhi.n	801412c <UART_SetConfig+0x2cc>
 80140de:	a201      	add	r2, pc, #4	@ (adr r2, 80140e4 <UART_SetConfig+0x284>)
 80140e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140e4:	080140fd 	.word	0x080140fd
 80140e8:	08014105 	.word	0x08014105
 80140ec:	0801410d 	.word	0x0801410d
 80140f0:	08014115 	.word	0x08014115
 80140f4:	0801411d 	.word	0x0801411d
 80140f8:	08014125 	.word	0x08014125
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014102:	e284      	b.n	801460e <UART_SetConfig+0x7ae>
 8014104:	2304      	movs	r3, #4
 8014106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801410a:	e280      	b.n	801460e <UART_SetConfig+0x7ae>
 801410c:	2308      	movs	r3, #8
 801410e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014112:	e27c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014114:	2310      	movs	r3, #16
 8014116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801411a:	e278      	b.n	801460e <UART_SetConfig+0x7ae>
 801411c:	2320      	movs	r3, #32
 801411e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014122:	e274      	b.n	801460e <UART_SetConfig+0x7ae>
 8014124:	2340      	movs	r3, #64	@ 0x40
 8014126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801412a:	e270      	b.n	801460e <UART_SetConfig+0x7ae>
 801412c:	2380      	movs	r3, #128	@ 0x80
 801412e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014132:	e26c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a1b      	ldr	r2, [pc, #108]	@ (80141a8 <UART_SetConfig+0x348>)
 801413a:	4293      	cmp	r3, r2
 801413c:	d142      	bne.n	80141c4 <UART_SetConfig+0x364>
 801413e:	4b16      	ldr	r3, [pc, #88]	@ (8014198 <UART_SetConfig+0x338>)
 8014140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014142:	f003 0307 	and.w	r3, r3, #7
 8014146:	2b05      	cmp	r3, #5
 8014148:	d838      	bhi.n	80141bc <UART_SetConfig+0x35c>
 801414a:	a201      	add	r2, pc, #4	@ (adr r2, 8014150 <UART_SetConfig+0x2f0>)
 801414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014150:	08014169 	.word	0x08014169
 8014154:	08014171 	.word	0x08014171
 8014158:	08014179 	.word	0x08014179
 801415c:	08014181 	.word	0x08014181
 8014160:	080141ad 	.word	0x080141ad
 8014164:	080141b5 	.word	0x080141b5
 8014168:	2300      	movs	r3, #0
 801416a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801416e:	e24e      	b.n	801460e <UART_SetConfig+0x7ae>
 8014170:	2304      	movs	r3, #4
 8014172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014176:	e24a      	b.n	801460e <UART_SetConfig+0x7ae>
 8014178:	2308      	movs	r3, #8
 801417a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801417e:	e246      	b.n	801460e <UART_SetConfig+0x7ae>
 8014180:	2310      	movs	r3, #16
 8014182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014186:	e242      	b.n	801460e <UART_SetConfig+0x7ae>
 8014188:	cfff69f3 	.word	0xcfff69f3
 801418c:	58000c00 	.word	0x58000c00
 8014190:	11fff4ff 	.word	0x11fff4ff
 8014194:	40011000 	.word	0x40011000
 8014198:	58024400 	.word	0x58024400
 801419c:	40004400 	.word	0x40004400
 80141a0:	40004800 	.word	0x40004800
 80141a4:	40004c00 	.word	0x40004c00
 80141a8:	40005000 	.word	0x40005000
 80141ac:	2320      	movs	r3, #32
 80141ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141b2:	e22c      	b.n	801460e <UART_SetConfig+0x7ae>
 80141b4:	2340      	movs	r3, #64	@ 0x40
 80141b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141ba:	e228      	b.n	801460e <UART_SetConfig+0x7ae>
 80141bc:	2380      	movs	r3, #128	@ 0x80
 80141be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80141c2:	e224      	b.n	801460e <UART_SetConfig+0x7ae>
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4ab1      	ldr	r2, [pc, #708]	@ (8014490 <UART_SetConfig+0x630>)
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d176      	bne.n	80142bc <UART_SetConfig+0x45c>
 80141ce:	4bb1      	ldr	r3, [pc, #708]	@ (8014494 <UART_SetConfig+0x634>)
 80141d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80141d6:	2b28      	cmp	r3, #40	@ 0x28
 80141d8:	d86c      	bhi.n	80142b4 <UART_SetConfig+0x454>
 80141da:	a201      	add	r2, pc, #4	@ (adr r2, 80141e0 <UART_SetConfig+0x380>)
 80141dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e0:	08014285 	.word	0x08014285
 80141e4:	080142b5 	.word	0x080142b5
 80141e8:	080142b5 	.word	0x080142b5
 80141ec:	080142b5 	.word	0x080142b5
 80141f0:	080142b5 	.word	0x080142b5
 80141f4:	080142b5 	.word	0x080142b5
 80141f8:	080142b5 	.word	0x080142b5
 80141fc:	080142b5 	.word	0x080142b5
 8014200:	0801428d 	.word	0x0801428d
 8014204:	080142b5 	.word	0x080142b5
 8014208:	080142b5 	.word	0x080142b5
 801420c:	080142b5 	.word	0x080142b5
 8014210:	080142b5 	.word	0x080142b5
 8014214:	080142b5 	.word	0x080142b5
 8014218:	080142b5 	.word	0x080142b5
 801421c:	080142b5 	.word	0x080142b5
 8014220:	08014295 	.word	0x08014295
 8014224:	080142b5 	.word	0x080142b5
 8014228:	080142b5 	.word	0x080142b5
 801422c:	080142b5 	.word	0x080142b5
 8014230:	080142b5 	.word	0x080142b5
 8014234:	080142b5 	.word	0x080142b5
 8014238:	080142b5 	.word	0x080142b5
 801423c:	080142b5 	.word	0x080142b5
 8014240:	0801429d 	.word	0x0801429d
 8014244:	080142b5 	.word	0x080142b5
 8014248:	080142b5 	.word	0x080142b5
 801424c:	080142b5 	.word	0x080142b5
 8014250:	080142b5 	.word	0x080142b5
 8014254:	080142b5 	.word	0x080142b5
 8014258:	080142b5 	.word	0x080142b5
 801425c:	080142b5 	.word	0x080142b5
 8014260:	080142a5 	.word	0x080142a5
 8014264:	080142b5 	.word	0x080142b5
 8014268:	080142b5 	.word	0x080142b5
 801426c:	080142b5 	.word	0x080142b5
 8014270:	080142b5 	.word	0x080142b5
 8014274:	080142b5 	.word	0x080142b5
 8014278:	080142b5 	.word	0x080142b5
 801427c:	080142b5 	.word	0x080142b5
 8014280:	080142ad 	.word	0x080142ad
 8014284:	2301      	movs	r3, #1
 8014286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801428a:	e1c0      	b.n	801460e <UART_SetConfig+0x7ae>
 801428c:	2304      	movs	r3, #4
 801428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014292:	e1bc      	b.n	801460e <UART_SetConfig+0x7ae>
 8014294:	2308      	movs	r3, #8
 8014296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801429a:	e1b8      	b.n	801460e <UART_SetConfig+0x7ae>
 801429c:	2310      	movs	r3, #16
 801429e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142a2:	e1b4      	b.n	801460e <UART_SetConfig+0x7ae>
 80142a4:	2320      	movs	r3, #32
 80142a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142aa:	e1b0      	b.n	801460e <UART_SetConfig+0x7ae>
 80142ac:	2340      	movs	r3, #64	@ 0x40
 80142ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142b2:	e1ac      	b.n	801460e <UART_SetConfig+0x7ae>
 80142b4:	2380      	movs	r3, #128	@ 0x80
 80142b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142ba:	e1a8      	b.n	801460e <UART_SetConfig+0x7ae>
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a75      	ldr	r2, [pc, #468]	@ (8014498 <UART_SetConfig+0x638>)
 80142c2:	4293      	cmp	r3, r2
 80142c4:	d130      	bne.n	8014328 <UART_SetConfig+0x4c8>
 80142c6:	4b73      	ldr	r3, [pc, #460]	@ (8014494 <UART_SetConfig+0x634>)
 80142c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142ca:	f003 0307 	and.w	r3, r3, #7
 80142ce:	2b05      	cmp	r3, #5
 80142d0:	d826      	bhi.n	8014320 <UART_SetConfig+0x4c0>
 80142d2:	a201      	add	r2, pc, #4	@ (adr r2, 80142d8 <UART_SetConfig+0x478>)
 80142d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142d8:	080142f1 	.word	0x080142f1
 80142dc:	080142f9 	.word	0x080142f9
 80142e0:	08014301 	.word	0x08014301
 80142e4:	08014309 	.word	0x08014309
 80142e8:	08014311 	.word	0x08014311
 80142ec:	08014319 	.word	0x08014319
 80142f0:	2300      	movs	r3, #0
 80142f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142f6:	e18a      	b.n	801460e <UART_SetConfig+0x7ae>
 80142f8:	2304      	movs	r3, #4
 80142fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80142fe:	e186      	b.n	801460e <UART_SetConfig+0x7ae>
 8014300:	2308      	movs	r3, #8
 8014302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014306:	e182      	b.n	801460e <UART_SetConfig+0x7ae>
 8014308:	2310      	movs	r3, #16
 801430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801430e:	e17e      	b.n	801460e <UART_SetConfig+0x7ae>
 8014310:	2320      	movs	r3, #32
 8014312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014316:	e17a      	b.n	801460e <UART_SetConfig+0x7ae>
 8014318:	2340      	movs	r3, #64	@ 0x40
 801431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801431e:	e176      	b.n	801460e <UART_SetConfig+0x7ae>
 8014320:	2380      	movs	r3, #128	@ 0x80
 8014322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014326:	e172      	b.n	801460e <UART_SetConfig+0x7ae>
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4a5b      	ldr	r2, [pc, #364]	@ (801449c <UART_SetConfig+0x63c>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d130      	bne.n	8014394 <UART_SetConfig+0x534>
 8014332:	4b58      	ldr	r3, [pc, #352]	@ (8014494 <UART_SetConfig+0x634>)
 8014334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014336:	f003 0307 	and.w	r3, r3, #7
 801433a:	2b05      	cmp	r3, #5
 801433c:	d826      	bhi.n	801438c <UART_SetConfig+0x52c>
 801433e:	a201      	add	r2, pc, #4	@ (adr r2, 8014344 <UART_SetConfig+0x4e4>)
 8014340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014344:	0801435d 	.word	0x0801435d
 8014348:	08014365 	.word	0x08014365
 801434c:	0801436d 	.word	0x0801436d
 8014350:	08014375 	.word	0x08014375
 8014354:	0801437d 	.word	0x0801437d
 8014358:	08014385 	.word	0x08014385
 801435c:	2300      	movs	r3, #0
 801435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014362:	e154      	b.n	801460e <UART_SetConfig+0x7ae>
 8014364:	2304      	movs	r3, #4
 8014366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801436a:	e150      	b.n	801460e <UART_SetConfig+0x7ae>
 801436c:	2308      	movs	r3, #8
 801436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014372:	e14c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014374:	2310      	movs	r3, #16
 8014376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801437a:	e148      	b.n	801460e <UART_SetConfig+0x7ae>
 801437c:	2320      	movs	r3, #32
 801437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014382:	e144      	b.n	801460e <UART_SetConfig+0x7ae>
 8014384:	2340      	movs	r3, #64	@ 0x40
 8014386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801438a:	e140      	b.n	801460e <UART_SetConfig+0x7ae>
 801438c:	2380      	movs	r3, #128	@ 0x80
 801438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014392:	e13c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4a41      	ldr	r2, [pc, #260]	@ (80144a0 <UART_SetConfig+0x640>)
 801439a:	4293      	cmp	r3, r2
 801439c:	f040 8082 	bne.w	80144a4 <UART_SetConfig+0x644>
 80143a0:	4b3c      	ldr	r3, [pc, #240]	@ (8014494 <UART_SetConfig+0x634>)
 80143a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80143a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80143a8:	2b28      	cmp	r3, #40	@ 0x28
 80143aa:	d86d      	bhi.n	8014488 <UART_SetConfig+0x628>
 80143ac:	a201      	add	r2, pc, #4	@ (adr r2, 80143b4 <UART_SetConfig+0x554>)
 80143ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143b2:	bf00      	nop
 80143b4:	08014459 	.word	0x08014459
 80143b8:	08014489 	.word	0x08014489
 80143bc:	08014489 	.word	0x08014489
 80143c0:	08014489 	.word	0x08014489
 80143c4:	08014489 	.word	0x08014489
 80143c8:	08014489 	.word	0x08014489
 80143cc:	08014489 	.word	0x08014489
 80143d0:	08014489 	.word	0x08014489
 80143d4:	08014461 	.word	0x08014461
 80143d8:	08014489 	.word	0x08014489
 80143dc:	08014489 	.word	0x08014489
 80143e0:	08014489 	.word	0x08014489
 80143e4:	08014489 	.word	0x08014489
 80143e8:	08014489 	.word	0x08014489
 80143ec:	08014489 	.word	0x08014489
 80143f0:	08014489 	.word	0x08014489
 80143f4:	08014469 	.word	0x08014469
 80143f8:	08014489 	.word	0x08014489
 80143fc:	08014489 	.word	0x08014489
 8014400:	08014489 	.word	0x08014489
 8014404:	08014489 	.word	0x08014489
 8014408:	08014489 	.word	0x08014489
 801440c:	08014489 	.word	0x08014489
 8014410:	08014489 	.word	0x08014489
 8014414:	08014471 	.word	0x08014471
 8014418:	08014489 	.word	0x08014489
 801441c:	08014489 	.word	0x08014489
 8014420:	08014489 	.word	0x08014489
 8014424:	08014489 	.word	0x08014489
 8014428:	08014489 	.word	0x08014489
 801442c:	08014489 	.word	0x08014489
 8014430:	08014489 	.word	0x08014489
 8014434:	08014479 	.word	0x08014479
 8014438:	08014489 	.word	0x08014489
 801443c:	08014489 	.word	0x08014489
 8014440:	08014489 	.word	0x08014489
 8014444:	08014489 	.word	0x08014489
 8014448:	08014489 	.word	0x08014489
 801444c:	08014489 	.word	0x08014489
 8014450:	08014489 	.word	0x08014489
 8014454:	08014481 	.word	0x08014481
 8014458:	2301      	movs	r3, #1
 801445a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801445e:	e0d6      	b.n	801460e <UART_SetConfig+0x7ae>
 8014460:	2304      	movs	r3, #4
 8014462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014466:	e0d2      	b.n	801460e <UART_SetConfig+0x7ae>
 8014468:	2308      	movs	r3, #8
 801446a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801446e:	e0ce      	b.n	801460e <UART_SetConfig+0x7ae>
 8014470:	2310      	movs	r3, #16
 8014472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014476:	e0ca      	b.n	801460e <UART_SetConfig+0x7ae>
 8014478:	2320      	movs	r3, #32
 801447a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801447e:	e0c6      	b.n	801460e <UART_SetConfig+0x7ae>
 8014480:	2340      	movs	r3, #64	@ 0x40
 8014482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014486:	e0c2      	b.n	801460e <UART_SetConfig+0x7ae>
 8014488:	2380      	movs	r3, #128	@ 0x80
 801448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801448e:	e0be      	b.n	801460e <UART_SetConfig+0x7ae>
 8014490:	40011400 	.word	0x40011400
 8014494:	58024400 	.word	0x58024400
 8014498:	40007800 	.word	0x40007800
 801449c:	40007c00 	.word	0x40007c00
 80144a0:	40011800 	.word	0x40011800
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4aad      	ldr	r2, [pc, #692]	@ (8014760 <UART_SetConfig+0x900>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d176      	bne.n	801459c <UART_SetConfig+0x73c>
 80144ae:	4bad      	ldr	r3, [pc, #692]	@ (8014764 <UART_SetConfig+0x904>)
 80144b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80144b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80144b6:	2b28      	cmp	r3, #40	@ 0x28
 80144b8:	d86c      	bhi.n	8014594 <UART_SetConfig+0x734>
 80144ba:	a201      	add	r2, pc, #4	@ (adr r2, 80144c0 <UART_SetConfig+0x660>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	08014565 	.word	0x08014565
 80144c4:	08014595 	.word	0x08014595
 80144c8:	08014595 	.word	0x08014595
 80144cc:	08014595 	.word	0x08014595
 80144d0:	08014595 	.word	0x08014595
 80144d4:	08014595 	.word	0x08014595
 80144d8:	08014595 	.word	0x08014595
 80144dc:	08014595 	.word	0x08014595
 80144e0:	0801456d 	.word	0x0801456d
 80144e4:	08014595 	.word	0x08014595
 80144e8:	08014595 	.word	0x08014595
 80144ec:	08014595 	.word	0x08014595
 80144f0:	08014595 	.word	0x08014595
 80144f4:	08014595 	.word	0x08014595
 80144f8:	08014595 	.word	0x08014595
 80144fc:	08014595 	.word	0x08014595
 8014500:	08014575 	.word	0x08014575
 8014504:	08014595 	.word	0x08014595
 8014508:	08014595 	.word	0x08014595
 801450c:	08014595 	.word	0x08014595
 8014510:	08014595 	.word	0x08014595
 8014514:	08014595 	.word	0x08014595
 8014518:	08014595 	.word	0x08014595
 801451c:	08014595 	.word	0x08014595
 8014520:	0801457d 	.word	0x0801457d
 8014524:	08014595 	.word	0x08014595
 8014528:	08014595 	.word	0x08014595
 801452c:	08014595 	.word	0x08014595
 8014530:	08014595 	.word	0x08014595
 8014534:	08014595 	.word	0x08014595
 8014538:	08014595 	.word	0x08014595
 801453c:	08014595 	.word	0x08014595
 8014540:	08014585 	.word	0x08014585
 8014544:	08014595 	.word	0x08014595
 8014548:	08014595 	.word	0x08014595
 801454c:	08014595 	.word	0x08014595
 8014550:	08014595 	.word	0x08014595
 8014554:	08014595 	.word	0x08014595
 8014558:	08014595 	.word	0x08014595
 801455c:	08014595 	.word	0x08014595
 8014560:	0801458d 	.word	0x0801458d
 8014564:	2301      	movs	r3, #1
 8014566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801456a:	e050      	b.n	801460e <UART_SetConfig+0x7ae>
 801456c:	2304      	movs	r3, #4
 801456e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014572:	e04c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014574:	2308      	movs	r3, #8
 8014576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801457a:	e048      	b.n	801460e <UART_SetConfig+0x7ae>
 801457c:	2310      	movs	r3, #16
 801457e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014582:	e044      	b.n	801460e <UART_SetConfig+0x7ae>
 8014584:	2320      	movs	r3, #32
 8014586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801458a:	e040      	b.n	801460e <UART_SetConfig+0x7ae>
 801458c:	2340      	movs	r3, #64	@ 0x40
 801458e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014592:	e03c      	b.n	801460e <UART_SetConfig+0x7ae>
 8014594:	2380      	movs	r3, #128	@ 0x80
 8014596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801459a:	e038      	b.n	801460e <UART_SetConfig+0x7ae>
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4a71      	ldr	r2, [pc, #452]	@ (8014768 <UART_SetConfig+0x908>)
 80145a2:	4293      	cmp	r3, r2
 80145a4:	d130      	bne.n	8014608 <UART_SetConfig+0x7a8>
 80145a6:	4b6f      	ldr	r3, [pc, #444]	@ (8014764 <UART_SetConfig+0x904>)
 80145a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80145aa:	f003 0307 	and.w	r3, r3, #7
 80145ae:	2b05      	cmp	r3, #5
 80145b0:	d826      	bhi.n	8014600 <UART_SetConfig+0x7a0>
 80145b2:	a201      	add	r2, pc, #4	@ (adr r2, 80145b8 <UART_SetConfig+0x758>)
 80145b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b8:	080145d1 	.word	0x080145d1
 80145bc:	080145d9 	.word	0x080145d9
 80145c0:	080145e1 	.word	0x080145e1
 80145c4:	080145e9 	.word	0x080145e9
 80145c8:	080145f1 	.word	0x080145f1
 80145cc:	080145f9 	.word	0x080145f9
 80145d0:	2302      	movs	r3, #2
 80145d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145d6:	e01a      	b.n	801460e <UART_SetConfig+0x7ae>
 80145d8:	2304      	movs	r3, #4
 80145da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145de:	e016      	b.n	801460e <UART_SetConfig+0x7ae>
 80145e0:	2308      	movs	r3, #8
 80145e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145e6:	e012      	b.n	801460e <UART_SetConfig+0x7ae>
 80145e8:	2310      	movs	r3, #16
 80145ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145ee:	e00e      	b.n	801460e <UART_SetConfig+0x7ae>
 80145f0:	2320      	movs	r3, #32
 80145f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145f6:	e00a      	b.n	801460e <UART_SetConfig+0x7ae>
 80145f8:	2340      	movs	r3, #64	@ 0x40
 80145fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80145fe:	e006      	b.n	801460e <UART_SetConfig+0x7ae>
 8014600:	2380      	movs	r3, #128	@ 0x80
 8014602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014606:	e002      	b.n	801460e <UART_SetConfig+0x7ae>
 8014608:	2380      	movs	r3, #128	@ 0x80
 801460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	4a55      	ldr	r2, [pc, #340]	@ (8014768 <UART_SetConfig+0x908>)
 8014614:	4293      	cmp	r3, r2
 8014616:	f040 80f8 	bne.w	801480a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801461a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801461e:	2b20      	cmp	r3, #32
 8014620:	dc46      	bgt.n	80146b0 <UART_SetConfig+0x850>
 8014622:	2b02      	cmp	r3, #2
 8014624:	db75      	blt.n	8014712 <UART_SetConfig+0x8b2>
 8014626:	3b02      	subs	r3, #2
 8014628:	2b1e      	cmp	r3, #30
 801462a:	d872      	bhi.n	8014712 <UART_SetConfig+0x8b2>
 801462c:	a201      	add	r2, pc, #4	@ (adr r2, 8014634 <UART_SetConfig+0x7d4>)
 801462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014632:	bf00      	nop
 8014634:	080146b7 	.word	0x080146b7
 8014638:	08014713 	.word	0x08014713
 801463c:	080146bf 	.word	0x080146bf
 8014640:	08014713 	.word	0x08014713
 8014644:	08014713 	.word	0x08014713
 8014648:	08014713 	.word	0x08014713
 801464c:	080146cf 	.word	0x080146cf
 8014650:	08014713 	.word	0x08014713
 8014654:	08014713 	.word	0x08014713
 8014658:	08014713 	.word	0x08014713
 801465c:	08014713 	.word	0x08014713
 8014660:	08014713 	.word	0x08014713
 8014664:	08014713 	.word	0x08014713
 8014668:	08014713 	.word	0x08014713
 801466c:	080146df 	.word	0x080146df
 8014670:	08014713 	.word	0x08014713
 8014674:	08014713 	.word	0x08014713
 8014678:	08014713 	.word	0x08014713
 801467c:	08014713 	.word	0x08014713
 8014680:	08014713 	.word	0x08014713
 8014684:	08014713 	.word	0x08014713
 8014688:	08014713 	.word	0x08014713
 801468c:	08014713 	.word	0x08014713
 8014690:	08014713 	.word	0x08014713
 8014694:	08014713 	.word	0x08014713
 8014698:	08014713 	.word	0x08014713
 801469c:	08014713 	.word	0x08014713
 80146a0:	08014713 	.word	0x08014713
 80146a4:	08014713 	.word	0x08014713
 80146a8:	08014713 	.word	0x08014713
 80146ac:	08014705 	.word	0x08014705
 80146b0:	2b40      	cmp	r3, #64	@ 0x40
 80146b2:	d02a      	beq.n	801470a <UART_SetConfig+0x8aa>
 80146b4:	e02d      	b.n	8014712 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80146b6:	f7fb ffe1 	bl	801067c <HAL_RCCEx_GetD3PCLK1Freq>
 80146ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80146bc:	e02f      	b.n	801471e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80146be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7fb fff0 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80146c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80146cc:	e027      	b.n	801471e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80146ce:	f107 0318 	add.w	r3, r7, #24
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fc f93c 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80146dc:	e01f      	b.n	801471e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80146de:	4b21      	ldr	r3, [pc, #132]	@ (8014764 <UART_SetConfig+0x904>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	f003 0320 	and.w	r3, r3, #32
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d009      	beq.n	80146fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80146ea:	4b1e      	ldr	r3, [pc, #120]	@ (8014764 <UART_SetConfig+0x904>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	08db      	lsrs	r3, r3, #3
 80146f0:	f003 0303 	and.w	r3, r3, #3
 80146f4:	4a1d      	ldr	r2, [pc, #116]	@ (801476c <UART_SetConfig+0x90c>)
 80146f6:	fa22 f303 	lsr.w	r3, r2, r3
 80146fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80146fc:	e00f      	b.n	801471e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80146fe:	4b1b      	ldr	r3, [pc, #108]	@ (801476c <UART_SetConfig+0x90c>)
 8014700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014702:	e00c      	b.n	801471e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014704:	4b1a      	ldr	r3, [pc, #104]	@ (8014770 <UART_SetConfig+0x910>)
 8014706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014708:	e009      	b.n	801471e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801470a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801470e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014710:	e005      	b.n	801471e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014712:	2300      	movs	r3, #0
 8014714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014716:	2301      	movs	r3, #1
 8014718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801471c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801471e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014720:	2b00      	cmp	r3, #0
 8014722:	f000 81ee 	beq.w	8014b02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801472a:	4a12      	ldr	r2, [pc, #72]	@ (8014774 <UART_SetConfig+0x914>)
 801472c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014730:	461a      	mov	r2, r3
 8014732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014734:	fbb3 f3f2 	udiv	r3, r3, r2
 8014738:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	685a      	ldr	r2, [r3, #4]
 801473e:	4613      	mov	r3, r2
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	4413      	add	r3, r2
 8014744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014746:	429a      	cmp	r2, r3
 8014748:	d305      	bcc.n	8014756 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014752:	429a      	cmp	r2, r3
 8014754:	d910      	bls.n	8014778 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8014756:	2301      	movs	r3, #1
 8014758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801475c:	e1d1      	b.n	8014b02 <UART_SetConfig+0xca2>
 801475e:	bf00      	nop
 8014760:	40011c00 	.word	0x40011c00
 8014764:	58024400 	.word	0x58024400
 8014768:	58000c00 	.word	0x58000c00
 801476c:	03d09000 	.word	0x03d09000
 8014770:	003d0900 	.word	0x003d0900
 8014774:	0801ee14 	.word	0x0801ee14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801477a:	2200      	movs	r2, #0
 801477c:	60bb      	str	r3, [r7, #8]
 801477e:	60fa      	str	r2, [r7, #12]
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014784:	4ac0      	ldr	r2, [pc, #768]	@ (8014a88 <UART_SetConfig+0xc28>)
 8014786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801478a:	b29b      	uxth	r3, r3
 801478c:	2200      	movs	r2, #0
 801478e:	603b      	str	r3, [r7, #0]
 8014790:	607a      	str	r2, [r7, #4]
 8014792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801479a:	f7eb ffdd 	bl	8000758 <__aeabi_uldivmod>
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	4610      	mov	r0, r2
 80147a4:	4619      	mov	r1, r3
 80147a6:	f04f 0200 	mov.w	r2, #0
 80147aa:	f04f 0300 	mov.w	r3, #0
 80147ae:	020b      	lsls	r3, r1, #8
 80147b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80147b4:	0202      	lsls	r2, r0, #8
 80147b6:	6979      	ldr	r1, [r7, #20]
 80147b8:	6849      	ldr	r1, [r1, #4]
 80147ba:	0849      	lsrs	r1, r1, #1
 80147bc:	2000      	movs	r0, #0
 80147be:	460c      	mov	r4, r1
 80147c0:	4605      	mov	r5, r0
 80147c2:	eb12 0804 	adds.w	r8, r2, r4
 80147c6:	eb43 0905 	adc.w	r9, r3, r5
 80147ca:	697b      	ldr	r3, [r7, #20]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	2200      	movs	r2, #0
 80147d0:	469a      	mov	sl, r3
 80147d2:	4693      	mov	fp, r2
 80147d4:	4652      	mov	r2, sl
 80147d6:	465b      	mov	r3, fp
 80147d8:	4640      	mov	r0, r8
 80147da:	4649      	mov	r1, r9
 80147dc:	f7eb ffbc 	bl	8000758 <__aeabi_uldivmod>
 80147e0:	4602      	mov	r2, r0
 80147e2:	460b      	mov	r3, r1
 80147e4:	4613      	mov	r3, r2
 80147e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80147e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80147ee:	d308      	bcc.n	8014802 <UART_SetConfig+0x9a2>
 80147f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80147f6:	d204      	bcs.n	8014802 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147fe:	60da      	str	r2, [r3, #12]
 8014800:	e17f      	b.n	8014b02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8014802:	2301      	movs	r3, #1
 8014804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014808:	e17b      	b.n	8014b02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	69db      	ldr	r3, [r3, #28]
 801480e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014812:	f040 80bd 	bne.w	8014990 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8014816:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801481a:	2b20      	cmp	r3, #32
 801481c:	dc48      	bgt.n	80148b0 <UART_SetConfig+0xa50>
 801481e:	2b00      	cmp	r3, #0
 8014820:	db7b      	blt.n	801491a <UART_SetConfig+0xaba>
 8014822:	2b20      	cmp	r3, #32
 8014824:	d879      	bhi.n	801491a <UART_SetConfig+0xaba>
 8014826:	a201      	add	r2, pc, #4	@ (adr r2, 801482c <UART_SetConfig+0x9cc>)
 8014828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801482c:	080148b7 	.word	0x080148b7
 8014830:	080148bf 	.word	0x080148bf
 8014834:	0801491b 	.word	0x0801491b
 8014838:	0801491b 	.word	0x0801491b
 801483c:	080148c7 	.word	0x080148c7
 8014840:	0801491b 	.word	0x0801491b
 8014844:	0801491b 	.word	0x0801491b
 8014848:	0801491b 	.word	0x0801491b
 801484c:	080148d7 	.word	0x080148d7
 8014850:	0801491b 	.word	0x0801491b
 8014854:	0801491b 	.word	0x0801491b
 8014858:	0801491b 	.word	0x0801491b
 801485c:	0801491b 	.word	0x0801491b
 8014860:	0801491b 	.word	0x0801491b
 8014864:	0801491b 	.word	0x0801491b
 8014868:	0801491b 	.word	0x0801491b
 801486c:	080148e7 	.word	0x080148e7
 8014870:	0801491b 	.word	0x0801491b
 8014874:	0801491b 	.word	0x0801491b
 8014878:	0801491b 	.word	0x0801491b
 801487c:	0801491b 	.word	0x0801491b
 8014880:	0801491b 	.word	0x0801491b
 8014884:	0801491b 	.word	0x0801491b
 8014888:	0801491b 	.word	0x0801491b
 801488c:	0801491b 	.word	0x0801491b
 8014890:	0801491b 	.word	0x0801491b
 8014894:	0801491b 	.word	0x0801491b
 8014898:	0801491b 	.word	0x0801491b
 801489c:	0801491b 	.word	0x0801491b
 80148a0:	0801491b 	.word	0x0801491b
 80148a4:	0801491b 	.word	0x0801491b
 80148a8:	0801491b 	.word	0x0801491b
 80148ac:	0801490d 	.word	0x0801490d
 80148b0:	2b40      	cmp	r3, #64	@ 0x40
 80148b2:	d02e      	beq.n	8014912 <UART_SetConfig+0xab2>
 80148b4:	e031      	b.n	801491a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80148b6:	f7fa f843 	bl	800e940 <HAL_RCC_GetPCLK1Freq>
 80148ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80148bc:	e033      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80148be:	f7fa f855 	bl	800e96c <HAL_RCC_GetPCLK2Freq>
 80148c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80148c4:	e02f      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80148c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7fb feec 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80148d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148d4:	e027      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80148d6:	f107 0318 	add.w	r3, r7, #24
 80148da:	4618      	mov	r0, r3
 80148dc:	f7fc f838 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80148e4:	e01f      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80148e6:	4b69      	ldr	r3, [pc, #420]	@ (8014a8c <UART_SetConfig+0xc2c>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f003 0320 	and.w	r3, r3, #32
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d009      	beq.n	8014906 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80148f2:	4b66      	ldr	r3, [pc, #408]	@ (8014a8c <UART_SetConfig+0xc2c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	08db      	lsrs	r3, r3, #3
 80148f8:	f003 0303 	and.w	r3, r3, #3
 80148fc:	4a64      	ldr	r2, [pc, #400]	@ (8014a90 <UART_SetConfig+0xc30>)
 80148fe:	fa22 f303 	lsr.w	r3, r2, r3
 8014902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014904:	e00f      	b.n	8014926 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8014906:	4b62      	ldr	r3, [pc, #392]	@ (8014a90 <UART_SetConfig+0xc30>)
 8014908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801490a:	e00c      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801490c:	4b61      	ldr	r3, [pc, #388]	@ (8014a94 <UART_SetConfig+0xc34>)
 801490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014910:	e009      	b.n	8014926 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014918:	e005      	b.n	8014926 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801491a:	2300      	movs	r3, #0
 801491c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 80ea 	beq.w	8014b02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014932:	4a55      	ldr	r2, [pc, #340]	@ (8014a88 <UART_SetConfig+0xc28>)
 8014934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014938:	461a      	mov	r2, r3
 801493a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801493c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014940:	005a      	lsls	r2, r3, #1
 8014942:	697b      	ldr	r3, [r7, #20]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	085b      	lsrs	r3, r3, #1
 8014948:	441a      	add	r2, r3
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014952:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014956:	2b0f      	cmp	r3, #15
 8014958:	d916      	bls.n	8014988 <UART_SetConfig+0xb28>
 801495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014960:	d212      	bcs.n	8014988 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014964:	b29b      	uxth	r3, r3
 8014966:	f023 030f 	bic.w	r3, r3, #15
 801496a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801496e:	085b      	lsrs	r3, r3, #1
 8014970:	b29b      	uxth	r3, r3
 8014972:	f003 0307 	and.w	r3, r3, #7
 8014976:	b29a      	uxth	r2, r3
 8014978:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801497a:	4313      	orrs	r3, r2
 801497c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014984:	60da      	str	r2, [r3, #12]
 8014986:	e0bc      	b.n	8014b02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014988:	2301      	movs	r3, #1
 801498a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801498e:	e0b8      	b.n	8014b02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014990:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014994:	2b20      	cmp	r3, #32
 8014996:	dc4b      	bgt.n	8014a30 <UART_SetConfig+0xbd0>
 8014998:	2b00      	cmp	r3, #0
 801499a:	f2c0 8087 	blt.w	8014aac <UART_SetConfig+0xc4c>
 801499e:	2b20      	cmp	r3, #32
 80149a0:	f200 8084 	bhi.w	8014aac <UART_SetConfig+0xc4c>
 80149a4:	a201      	add	r2, pc, #4	@ (adr r2, 80149ac <UART_SetConfig+0xb4c>)
 80149a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149aa:	bf00      	nop
 80149ac:	08014a37 	.word	0x08014a37
 80149b0:	08014a3f 	.word	0x08014a3f
 80149b4:	08014aad 	.word	0x08014aad
 80149b8:	08014aad 	.word	0x08014aad
 80149bc:	08014a47 	.word	0x08014a47
 80149c0:	08014aad 	.word	0x08014aad
 80149c4:	08014aad 	.word	0x08014aad
 80149c8:	08014aad 	.word	0x08014aad
 80149cc:	08014a57 	.word	0x08014a57
 80149d0:	08014aad 	.word	0x08014aad
 80149d4:	08014aad 	.word	0x08014aad
 80149d8:	08014aad 	.word	0x08014aad
 80149dc:	08014aad 	.word	0x08014aad
 80149e0:	08014aad 	.word	0x08014aad
 80149e4:	08014aad 	.word	0x08014aad
 80149e8:	08014aad 	.word	0x08014aad
 80149ec:	08014a67 	.word	0x08014a67
 80149f0:	08014aad 	.word	0x08014aad
 80149f4:	08014aad 	.word	0x08014aad
 80149f8:	08014aad 	.word	0x08014aad
 80149fc:	08014aad 	.word	0x08014aad
 8014a00:	08014aad 	.word	0x08014aad
 8014a04:	08014aad 	.word	0x08014aad
 8014a08:	08014aad 	.word	0x08014aad
 8014a0c:	08014aad 	.word	0x08014aad
 8014a10:	08014aad 	.word	0x08014aad
 8014a14:	08014aad 	.word	0x08014aad
 8014a18:	08014aad 	.word	0x08014aad
 8014a1c:	08014aad 	.word	0x08014aad
 8014a20:	08014aad 	.word	0x08014aad
 8014a24:	08014aad 	.word	0x08014aad
 8014a28:	08014aad 	.word	0x08014aad
 8014a2c:	08014a9f 	.word	0x08014a9f
 8014a30:	2b40      	cmp	r3, #64	@ 0x40
 8014a32:	d037      	beq.n	8014aa4 <UART_SetConfig+0xc44>
 8014a34:	e03a      	b.n	8014aac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014a36:	f7f9 ff83 	bl	800e940 <HAL_RCC_GetPCLK1Freq>
 8014a3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014a3c:	e03c      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014a3e:	f7f9 ff95 	bl	800e96c <HAL_RCC_GetPCLK2Freq>
 8014a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014a44:	e038      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7fb fe2c 	bl	80106a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a54:	e030      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014a56:	f107 0318 	add.w	r3, r7, #24
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fb ff78 	bl	8010950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a64:	e028      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014a66:	4b09      	ldr	r3, [pc, #36]	@ (8014a8c <UART_SetConfig+0xc2c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	f003 0320 	and.w	r3, r3, #32
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d012      	beq.n	8014a98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014a72:	4b06      	ldr	r3, [pc, #24]	@ (8014a8c <UART_SetConfig+0xc2c>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	08db      	lsrs	r3, r3, #3
 8014a78:	f003 0303 	and.w	r3, r3, #3
 8014a7c:	4a04      	ldr	r2, [pc, #16]	@ (8014a90 <UART_SetConfig+0xc30>)
 8014a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8014a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014a84:	e018      	b.n	8014ab8 <UART_SetConfig+0xc58>
 8014a86:	bf00      	nop
 8014a88:	0801ee14 	.word	0x0801ee14
 8014a8c:	58024400 	.word	0x58024400
 8014a90:	03d09000 	.word	0x03d09000
 8014a94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014a98:	4b24      	ldr	r3, [pc, #144]	@ (8014b2c <UART_SetConfig+0xccc>)
 8014a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014a9c:	e00c      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014a9e:	4b24      	ldr	r3, [pc, #144]	@ (8014b30 <UART_SetConfig+0xcd0>)
 8014aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014aa2:	e009      	b.n	8014ab8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014aaa:	e005      	b.n	8014ab8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014aac:	2300      	movs	r3, #0
 8014aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8014ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d021      	beq.n	8014b02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8014b34 <UART_SetConfig+0xcd4>)
 8014ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	085b      	lsrs	r3, r3, #1
 8014ad6:	441a      	add	r2, r3
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae4:	2b0f      	cmp	r3, #15
 8014ae6:	d909      	bls.n	8014afc <UART_SetConfig+0xc9c>
 8014ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014aee:	d205      	bcs.n	8014afc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af2:	b29a      	uxth	r2, r3
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	60da      	str	r2, [r3, #12]
 8014afa:	e002      	b.n	8014b02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014afc:	2301      	movs	r3, #1
 8014afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	2201      	movs	r2, #1
 8014b06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	2201      	movs	r2, #1
 8014b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	2200      	movs	r2, #0
 8014b16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8014b1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3748      	adds	r7, #72	@ 0x48
 8014b26:	46bd      	mov	sp, r7
 8014b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014b2c:	03d09000 	.word	0x03d09000
 8014b30:	003d0900 	.word	0x003d0900
 8014b34:	0801ee14 	.word	0x0801ee14

08014b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b44:	f003 0308 	and.w	r3, r3, #8
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00a      	beq.n	8014b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	430a      	orrs	r2, r1
 8014b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b66:	f003 0301 	and.w	r3, r3, #1
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00a      	beq.n	8014b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	430a      	orrs	r2, r1
 8014b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b88:	f003 0302 	and.w	r3, r3, #2
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d00a      	beq.n	8014ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	430a      	orrs	r2, r1
 8014ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014baa:	f003 0304 	and.w	r3, r3, #4
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00a      	beq.n	8014bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	430a      	orrs	r2, r1
 8014bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bcc:	f003 0310 	and.w	r3, r3, #16
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00a      	beq.n	8014bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	689b      	ldr	r3, [r3, #8]
 8014bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	430a      	orrs	r2, r1
 8014be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bee:	f003 0320 	and.w	r3, r3, #32
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d00a      	beq.n	8014c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	689b      	ldr	r3, [r3, #8]
 8014bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	430a      	orrs	r2, r1
 8014c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d01a      	beq.n	8014c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	430a      	orrs	r2, r1
 8014c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014c36:	d10a      	bne.n	8014c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	430a      	orrs	r2, r1
 8014c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00a      	beq.n	8014c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	430a      	orrs	r2, r1
 8014c6e:	605a      	str	r2, [r3, #4]
  }
}
 8014c70:	bf00      	nop
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b098      	sub	sp, #96	@ 0x60
 8014c80:	af02      	add	r7, sp, #8
 8014c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2200      	movs	r2, #0
 8014c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014c8c:	f7f3 f856 	bl	8007d3c <HAL_GetTick>
 8014c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f003 0308 	and.w	r3, r3, #8
 8014c9c:	2b08      	cmp	r3, #8
 8014c9e:	d12f      	bne.n	8014d00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ca8:	2200      	movs	r2, #0
 8014caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f000 f88e 	bl	8014dd0 <UART_WaitOnFlagUntilTimeout>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d022      	beq.n	8014d00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc2:	e853 3f00 	ldrex	r3, [r3]
 8014cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	461a      	mov	r2, r3
 8014cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014cda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ce0:	e841 2300 	strex	r3, r2, [r1]
 8014ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d1e6      	bne.n	8014cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2220      	movs	r2, #32
 8014cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014cfc:	2303      	movs	r3, #3
 8014cfe:	e063      	b.n	8014dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	f003 0304 	and.w	r3, r3, #4
 8014d0a:	2b04      	cmp	r3, #4
 8014d0c:	d149      	bne.n	8014da2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014d0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014d12:	9300      	str	r3, [sp, #0]
 8014d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014d16:	2200      	movs	r2, #0
 8014d18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f000 f857 	bl	8014dd0 <UART_WaitOnFlagUntilTimeout>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d03c      	beq.n	8014da2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d30:	e853 3f00 	ldrex	r3, [r3]
 8014d34:	623b      	str	r3, [r7, #32]
   return(result);
 8014d36:	6a3b      	ldr	r3, [r7, #32]
 8014d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	461a      	mov	r2, r3
 8014d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8014d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d4e:	e841 2300 	strex	r3, r2, [r1]
 8014d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1e6      	bne.n	8014d28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	3308      	adds	r3, #8
 8014d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	e853 3f00 	ldrex	r3, [r3]
 8014d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f023 0301 	bic.w	r3, r3, #1
 8014d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	3308      	adds	r3, #8
 8014d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d7a:	61fa      	str	r2, [r7, #28]
 8014d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d7e:	69b9      	ldr	r1, [r7, #24]
 8014d80:	69fa      	ldr	r2, [r7, #28]
 8014d82:	e841 2300 	strex	r3, r2, [r1]
 8014d86:	617b      	str	r3, [r7, #20]
   return(result);
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d1e5      	bne.n	8014d5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2220      	movs	r2, #32
 8014d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014d9e:	2303      	movs	r3, #3
 8014da0:	e012      	b.n	8014dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2220      	movs	r2, #32
 8014da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2220      	movs	r2, #32
 8014dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2200      	movs	r2, #0
 8014db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014dc6:	2300      	movs	r3, #0
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3758      	adds	r7, #88	@ 0x58
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	603b      	str	r3, [r7, #0]
 8014ddc:	4613      	mov	r3, r2
 8014dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014de0:	e04f      	b.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de8:	d04b      	beq.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014dea:	f7f2 ffa7 	bl	8007d3c <HAL_GetTick>
 8014dee:	4602      	mov	r2, r0
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	1ad3      	subs	r3, r2, r3
 8014df4:	69ba      	ldr	r2, [r7, #24]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d302      	bcc.n	8014e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d101      	bne.n	8014e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014e00:	2303      	movs	r3, #3
 8014e02:	e04e      	b.n	8014ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f003 0304 	and.w	r3, r3, #4
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d037      	beq.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	2b80      	cmp	r3, #128	@ 0x80
 8014e16:	d034      	beq.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2b40      	cmp	r3, #64	@ 0x40
 8014e1c:	d031      	beq.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	69db      	ldr	r3, [r3, #28]
 8014e24:	f003 0308 	and.w	r3, r3, #8
 8014e28:	2b08      	cmp	r3, #8
 8014e2a:	d110      	bne.n	8014e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2208      	movs	r2, #8
 8014e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	f000 f839 	bl	8014eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2208      	movs	r2, #8
 8014e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2200      	movs	r2, #0
 8014e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e029      	b.n	8014ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	69db      	ldr	r3, [r3, #28]
 8014e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014e5c:	d111      	bne.n	8014e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f000 f81f 	bl	8014eac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2220      	movs	r2, #32
 8014e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014e7e:	2303      	movs	r3, #3
 8014e80:	e00f      	b.n	8014ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	69da      	ldr	r2, [r3, #28]
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	68ba      	ldr	r2, [r7, #8]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	bf0c      	ite	eq
 8014e92:	2301      	moveq	r3, #1
 8014e94:	2300      	movne	r3, #0
 8014e96:	b2db      	uxtb	r3, r3
 8014e98:	461a      	mov	r2, r3
 8014e9a:	79fb      	ldrb	r3, [r7, #7]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d0a0      	beq.n	8014de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014ea0:	2300      	movs	r3, #0
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
	...

08014eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014eac:	b480      	push	{r7}
 8014eae:	b095      	sub	sp, #84	@ 0x54
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ebc:	e853 3f00 	ldrex	r3, [r3]
 8014ec0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	461a      	mov	r2, r3
 8014ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ed2:	643b      	str	r3, [r7, #64]	@ 0x40
 8014ed4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ed6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014ed8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014eda:	e841 2300 	strex	r3, r2, [r1]
 8014ede:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1e6      	bne.n	8014eb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	3308      	adds	r3, #8
 8014eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eee:	6a3b      	ldr	r3, [r7, #32]
 8014ef0:	e853 3f00 	ldrex	r3, [r3]
 8014ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ef6:	69fa      	ldr	r2, [r7, #28]
 8014ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8014f74 <UART_EndRxTransfer+0xc8>)
 8014efa:	4013      	ands	r3, r2
 8014efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	3308      	adds	r3, #8
 8014f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f0e:	e841 2300 	strex	r3, r2, [r1]
 8014f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1e5      	bne.n	8014ee6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d118      	bne.n	8014f54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	e853 3f00 	ldrex	r3, [r3]
 8014f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	f023 0310 	bic.w	r3, r3, #16
 8014f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f40:	61bb      	str	r3, [r7, #24]
 8014f42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f44:	6979      	ldr	r1, [r7, #20]
 8014f46:	69ba      	ldr	r2, [r7, #24]
 8014f48:	e841 2300 	strex	r3, r2, [r1]
 8014f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d1e6      	bne.n	8014f22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2220      	movs	r2, #32
 8014f58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8014f68:	bf00      	nop
 8014f6a:	3754      	adds	r7, #84	@ 0x54
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f72:	4770      	bx	lr
 8014f74:	effffffe 	.word	0xeffffffe

08014f78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d101      	bne.n	8014f8e <HAL_UARTEx_DisableFifoMode+0x16>
 8014f8a:	2302      	movs	r3, #2
 8014f8c:	e027      	b.n	8014fde <HAL_UARTEx_DisableFifoMode+0x66>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2201      	movs	r2, #1
 8014f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2224      	movs	r2, #36	@ 0x24
 8014f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f022 0201 	bic.w	r2, r2, #1
 8014fb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8014fbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2220      	movs	r2, #32
 8014fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3714      	adds	r7, #20
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe8:	4770      	bx	lr

08014fea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014fea:	b580      	push	{r7, lr}
 8014fec:	b084      	sub	sp, #16
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
 8014ff2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d101      	bne.n	8015002 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014ffe:	2302      	movs	r3, #2
 8015000:	e02d      	b.n	801505e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2201      	movs	r2, #1
 8015006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2224      	movs	r2, #36	@ 0x24
 801500e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	f022 0201 	bic.w	r2, r2, #1
 8015028:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	689b      	ldr	r3, [r3, #8]
 8015030:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	683a      	ldr	r2, [r7, #0]
 801503a:	430a      	orrs	r2, r1
 801503c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f000 f850 	bl	80150e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	68fa      	ldr	r2, [r7, #12]
 801504a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2220      	movs	r2, #32
 8015050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	2200      	movs	r2, #0
 8015058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801505c:	2300      	movs	r3, #0
}
 801505e:	4618      	mov	r0, r3
 8015060:	3710      	adds	r7, #16
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015066:	b580      	push	{r7, lr}
 8015068:	b084      	sub	sp, #16
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
 801506e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015076:	2b01      	cmp	r3, #1
 8015078:	d101      	bne.n	801507e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801507a:	2302      	movs	r3, #2
 801507c:	e02d      	b.n	80150da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2201      	movs	r2, #1
 8015082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2224      	movs	r2, #36	@ 0x24
 801508a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f022 0201 	bic.w	r2, r2, #1
 80150a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	683a      	ldr	r2, [r7, #0]
 80150b6:	430a      	orrs	r2, r1
 80150b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	f000 f812 	bl	80150e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	68fa      	ldr	r2, [r7, #12]
 80150c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2220      	movs	r2, #32
 80150cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2200      	movs	r2, #0
 80150d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80150d8:	2300      	movs	r3, #0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3710      	adds	r7, #16
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
	...

080150e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80150e4:	b480      	push	{r7}
 80150e6:	b085      	sub	sp, #20
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d108      	bne.n	8015106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2201      	movs	r2, #1
 80150f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2201      	movs	r2, #1
 8015100:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015104:	e031      	b.n	801516a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015106:	2310      	movs	r3, #16
 8015108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801510a:	2310      	movs	r3, #16
 801510c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	689b      	ldr	r3, [r3, #8]
 8015114:	0e5b      	lsrs	r3, r3, #25
 8015116:	b2db      	uxtb	r3, r3
 8015118:	f003 0307 	and.w	r3, r3, #7
 801511c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	689b      	ldr	r3, [r3, #8]
 8015124:	0f5b      	lsrs	r3, r3, #29
 8015126:	b2db      	uxtb	r3, r3
 8015128:	f003 0307 	and.w	r3, r3, #7
 801512c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801512e:	7bbb      	ldrb	r3, [r7, #14]
 8015130:	7b3a      	ldrb	r2, [r7, #12]
 8015132:	4911      	ldr	r1, [pc, #68]	@ (8015178 <UARTEx_SetNbDataToProcess+0x94>)
 8015134:	5c8a      	ldrb	r2, [r1, r2]
 8015136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801513a:	7b3a      	ldrb	r2, [r7, #12]
 801513c:	490f      	ldr	r1, [pc, #60]	@ (801517c <UARTEx_SetNbDataToProcess+0x98>)
 801513e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015140:	fb93 f3f2 	sdiv	r3, r3, r2
 8015144:	b29a      	uxth	r2, r3
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801514c:	7bfb      	ldrb	r3, [r7, #15]
 801514e:	7b7a      	ldrb	r2, [r7, #13]
 8015150:	4909      	ldr	r1, [pc, #36]	@ (8015178 <UARTEx_SetNbDataToProcess+0x94>)
 8015152:	5c8a      	ldrb	r2, [r1, r2]
 8015154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015158:	7b7a      	ldrb	r2, [r7, #13]
 801515a:	4908      	ldr	r1, [pc, #32]	@ (801517c <UARTEx_SetNbDataToProcess+0x98>)
 801515c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801515e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015162:	b29a      	uxth	r2, r3
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801516a:	bf00      	nop
 801516c:	3714      	adds	r7, #20
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	0801ee2c 	.word	0x0801ee2c
 801517c:	0801ee34 	.word	0x0801ee34

08015180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015180:	b084      	sub	sp, #16
 8015182:	b580      	push	{r7, lr}
 8015184:	b084      	sub	sp, #16
 8015186:	af00      	add	r7, sp, #0
 8015188:	6078      	str	r0, [r7, #4]
 801518a:	f107 001c 	add.w	r0, r7, #28
 801518e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015192:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015196:	2b01      	cmp	r3, #1
 8015198:	d121      	bne.n	80151de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801519e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	68da      	ldr	r2, [r3, #12]
 80151aa:	4b2c      	ldr	r3, [pc, #176]	@ (801525c <USB_CoreInit+0xdc>)
 80151ac:	4013      	ands	r3, r2
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	68db      	ldr	r3, [r3, #12]
 80151b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80151be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80151c2:	2b01      	cmp	r3, #1
 80151c4:	d105      	bne.n	80151d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f001 faf6 	bl	80167c4 <USB_CoreReset>
 80151d8:	4603      	mov	r3, r0
 80151da:	73fb      	strb	r3, [r7, #15]
 80151dc:	e01b      	b.n	8015216 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f001 faea 	bl	80167c4 <USB_CoreReset>
 80151f0:	4603      	mov	r3, r0
 80151f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80151f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d106      	bne.n	801520a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015200:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	639a      	str	r2, [r3, #56]	@ 0x38
 8015208:	e005      	b.n	8015216 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801520e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015216:	7fbb      	ldrb	r3, [r7, #30]
 8015218:	2b01      	cmp	r3, #1
 801521a:	d116      	bne.n	801524a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015220:	b29a      	uxth	r2, r3
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801522a:	4b0d      	ldr	r3, [pc, #52]	@ (8015260 <USB_CoreInit+0xe0>)
 801522c:	4313      	orrs	r3, r2
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	689b      	ldr	r3, [r3, #8]
 8015236:	f043 0206 	orr.w	r2, r3, #6
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	f043 0220 	orr.w	r2, r3, #32
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801524a:	7bfb      	ldrb	r3, [r7, #15]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015256:	b004      	add	sp, #16
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop
 801525c:	ffbdffbf 	.word	0xffbdffbf
 8015260:	03ee0000 	.word	0x03ee0000

08015264 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015264:	b480      	push	{r7}
 8015266:	b087      	sub	sp, #28
 8015268:	af00      	add	r7, sp, #0
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	4613      	mov	r3, r2
 8015270:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015272:	79fb      	ldrb	r3, [r7, #7]
 8015274:	2b02      	cmp	r3, #2
 8015276:	d165      	bne.n	8015344 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	4a41      	ldr	r2, [pc, #260]	@ (8015380 <USB_SetTurnaroundTime+0x11c>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d906      	bls.n	801528e <USB_SetTurnaroundTime+0x2a>
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	4a40      	ldr	r2, [pc, #256]	@ (8015384 <USB_SetTurnaroundTime+0x120>)
 8015284:	4293      	cmp	r3, r2
 8015286:	d202      	bcs.n	801528e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015288:	230f      	movs	r3, #15
 801528a:	617b      	str	r3, [r7, #20]
 801528c:	e062      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	4a3c      	ldr	r2, [pc, #240]	@ (8015384 <USB_SetTurnaroundTime+0x120>)
 8015292:	4293      	cmp	r3, r2
 8015294:	d306      	bcc.n	80152a4 <USB_SetTurnaroundTime+0x40>
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	4a3b      	ldr	r2, [pc, #236]	@ (8015388 <USB_SetTurnaroundTime+0x124>)
 801529a:	4293      	cmp	r3, r2
 801529c:	d202      	bcs.n	80152a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801529e:	230e      	movs	r3, #14
 80152a0:	617b      	str	r3, [r7, #20]
 80152a2:	e057      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	4a38      	ldr	r2, [pc, #224]	@ (8015388 <USB_SetTurnaroundTime+0x124>)
 80152a8:	4293      	cmp	r3, r2
 80152aa:	d306      	bcc.n	80152ba <USB_SetTurnaroundTime+0x56>
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	4a37      	ldr	r2, [pc, #220]	@ (801538c <USB_SetTurnaroundTime+0x128>)
 80152b0:	4293      	cmp	r3, r2
 80152b2:	d202      	bcs.n	80152ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80152b4:	230d      	movs	r3, #13
 80152b6:	617b      	str	r3, [r7, #20]
 80152b8:	e04c      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	4a33      	ldr	r2, [pc, #204]	@ (801538c <USB_SetTurnaroundTime+0x128>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d306      	bcc.n	80152d0 <USB_SetTurnaroundTime+0x6c>
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	4a32      	ldr	r2, [pc, #200]	@ (8015390 <USB_SetTurnaroundTime+0x12c>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d802      	bhi.n	80152d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80152ca:	230c      	movs	r3, #12
 80152cc:	617b      	str	r3, [r7, #20]
 80152ce:	e041      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	4a2f      	ldr	r2, [pc, #188]	@ (8015390 <USB_SetTurnaroundTime+0x12c>)
 80152d4:	4293      	cmp	r3, r2
 80152d6:	d906      	bls.n	80152e6 <USB_SetTurnaroundTime+0x82>
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	4a2e      	ldr	r2, [pc, #184]	@ (8015394 <USB_SetTurnaroundTime+0x130>)
 80152dc:	4293      	cmp	r3, r2
 80152de:	d802      	bhi.n	80152e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80152e0:	230b      	movs	r3, #11
 80152e2:	617b      	str	r3, [r7, #20]
 80152e4:	e036      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	4a2a      	ldr	r2, [pc, #168]	@ (8015394 <USB_SetTurnaroundTime+0x130>)
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d906      	bls.n	80152fc <USB_SetTurnaroundTime+0x98>
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	4a29      	ldr	r2, [pc, #164]	@ (8015398 <USB_SetTurnaroundTime+0x134>)
 80152f2:	4293      	cmp	r3, r2
 80152f4:	d802      	bhi.n	80152fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80152f6:	230a      	movs	r3, #10
 80152f8:	617b      	str	r3, [r7, #20]
 80152fa:	e02b      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	4a26      	ldr	r2, [pc, #152]	@ (8015398 <USB_SetTurnaroundTime+0x134>)
 8015300:	4293      	cmp	r3, r2
 8015302:	d906      	bls.n	8015312 <USB_SetTurnaroundTime+0xae>
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	4a25      	ldr	r2, [pc, #148]	@ (801539c <USB_SetTurnaroundTime+0x138>)
 8015308:	4293      	cmp	r3, r2
 801530a:	d202      	bcs.n	8015312 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801530c:	2309      	movs	r3, #9
 801530e:	617b      	str	r3, [r7, #20]
 8015310:	e020      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	4a21      	ldr	r2, [pc, #132]	@ (801539c <USB_SetTurnaroundTime+0x138>)
 8015316:	4293      	cmp	r3, r2
 8015318:	d306      	bcc.n	8015328 <USB_SetTurnaroundTime+0xc4>
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	4a20      	ldr	r2, [pc, #128]	@ (80153a0 <USB_SetTurnaroundTime+0x13c>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d802      	bhi.n	8015328 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015322:	2308      	movs	r3, #8
 8015324:	617b      	str	r3, [r7, #20]
 8015326:	e015      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	4a1d      	ldr	r2, [pc, #116]	@ (80153a0 <USB_SetTurnaroundTime+0x13c>)
 801532c:	4293      	cmp	r3, r2
 801532e:	d906      	bls.n	801533e <USB_SetTurnaroundTime+0xda>
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	4a1c      	ldr	r2, [pc, #112]	@ (80153a4 <USB_SetTurnaroundTime+0x140>)
 8015334:	4293      	cmp	r3, r2
 8015336:	d202      	bcs.n	801533e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015338:	2307      	movs	r3, #7
 801533a:	617b      	str	r3, [r7, #20]
 801533c:	e00a      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801533e:	2306      	movs	r3, #6
 8015340:	617b      	str	r3, [r7, #20]
 8015342:	e007      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015344:	79fb      	ldrb	r3, [r7, #7]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d102      	bne.n	8015350 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801534a:	2309      	movs	r3, #9
 801534c:	617b      	str	r3, [r7, #20]
 801534e:	e001      	b.n	8015354 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015350:	2309      	movs	r3, #9
 8015352:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	68db      	ldr	r3, [r3, #12]
 8015358:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	68da      	ldr	r2, [r3, #12]
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	029b      	lsls	r3, r3, #10
 8015368:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801536c:	431a      	orrs	r2, r3
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015372:	2300      	movs	r3, #0
}
 8015374:	4618      	mov	r0, r3
 8015376:	371c      	adds	r7, #28
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr
 8015380:	00d8acbf 	.word	0x00d8acbf
 8015384:	00e4e1c0 	.word	0x00e4e1c0
 8015388:	00f42400 	.word	0x00f42400
 801538c:	01067380 	.word	0x01067380
 8015390:	011a499f 	.word	0x011a499f
 8015394:	01312cff 	.word	0x01312cff
 8015398:	014ca43f 	.word	0x014ca43f
 801539c:	016e3600 	.word	0x016e3600
 80153a0:	01a6ab1f 	.word	0x01a6ab1f
 80153a4:	01e84800 	.word	0x01e84800

080153a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	689b      	ldr	r3, [r3, #8]
 80153b4:	f043 0201 	orr.w	r2, r3, #1
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	4618      	mov	r0, r3
 80153c0:	370c      	adds	r7, #12
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80153ca:	b480      	push	{r7}
 80153cc:	b083      	sub	sp, #12
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	689b      	ldr	r3, [r3, #8]
 80153d6:	f023 0201 	bic.w	r2, r3, #1
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80153de:	2300      	movs	r3, #0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	460b      	mov	r3, r1
 80153f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80153f8:	2300      	movs	r3, #0
 80153fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015408:	78fb      	ldrb	r3, [r7, #3]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d115      	bne.n	801543a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801541a:	200a      	movs	r0, #10
 801541c:	f7f2 fc9a 	bl	8007d54 <HAL_Delay>
      ms += 10U;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	330a      	adds	r3, #10
 8015424:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f001 f93b 	bl	80166a2 <USB_GetMode>
 801542c:	4603      	mov	r3, r0
 801542e:	2b01      	cmp	r3, #1
 8015430:	d01e      	beq.n	8015470 <USB_SetCurrentMode+0x84>
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2bc7      	cmp	r3, #199	@ 0xc7
 8015436:	d9f0      	bls.n	801541a <USB_SetCurrentMode+0x2e>
 8015438:	e01a      	b.n	8015470 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801543a:	78fb      	ldrb	r3, [r7, #3]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d115      	bne.n	801546c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801544c:	200a      	movs	r0, #10
 801544e:	f7f2 fc81 	bl	8007d54 <HAL_Delay>
      ms += 10U;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	330a      	adds	r3, #10
 8015456:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f001 f922 	bl	80166a2 <USB_GetMode>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	d005      	beq.n	8015470 <USB_SetCurrentMode+0x84>
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2bc7      	cmp	r3, #199	@ 0xc7
 8015468:	d9f0      	bls.n	801544c <USB_SetCurrentMode+0x60>
 801546a:	e001      	b.n	8015470 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801546c:	2301      	movs	r3, #1
 801546e:	e005      	b.n	801547c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2bc8      	cmp	r3, #200	@ 0xc8
 8015474:	d101      	bne.n	801547a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015476:	2301      	movs	r3, #1
 8015478:	e000      	b.n	801547c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801547a:	2300      	movs	r3, #0
}
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015484:	b084      	sub	sp, #16
 8015486:	b580      	push	{r7, lr}
 8015488:	b086      	sub	sp, #24
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
 801548e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015496:	2300      	movs	r3, #0
 8015498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801549e:	2300      	movs	r3, #0
 80154a0:	613b      	str	r3, [r7, #16]
 80154a2:	e009      	b.n	80154b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	3340      	adds	r3, #64	@ 0x40
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	4413      	add	r3, r2
 80154ae:	2200      	movs	r2, #0
 80154b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80154b2:	693b      	ldr	r3, [r7, #16]
 80154b4:	3301      	adds	r3, #1
 80154b6:	613b      	str	r3, [r7, #16]
 80154b8:	693b      	ldr	r3, [r7, #16]
 80154ba:	2b0e      	cmp	r3, #14
 80154bc:	d9f2      	bls.n	80154a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80154be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d11c      	bne.n	8015500 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	68fa      	ldr	r2, [r7, #12]
 80154d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80154d4:	f043 0302 	orr.w	r3, r3, #2
 80154d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	e005      	b.n	801550c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015504:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015512:	461a      	mov	r2, r3
 8015514:	2300      	movs	r3, #0
 8015516:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015518:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801551c:	2b01      	cmp	r3, #1
 801551e:	d10d      	bne.n	801553c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015524:	2b00      	cmp	r3, #0
 8015526:	d104      	bne.n	8015532 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015528:	2100      	movs	r1, #0
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f000 f968 	bl	8015800 <USB_SetDevSpeed>
 8015530:	e008      	b.n	8015544 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015532:	2101      	movs	r1, #1
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f000 f963 	bl	8015800 <USB_SetDevSpeed>
 801553a:	e003      	b.n	8015544 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801553c:	2103      	movs	r1, #3
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	f000 f95e 	bl	8015800 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015544:	2110      	movs	r1, #16
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f000 f8fa 	bl	8015740 <USB_FlushTxFifo>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d001      	beq.n	8015556 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8015552:	2301      	movs	r3, #1
 8015554:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 f924 	bl	80157a4 <USB_FlushRxFifo>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8015562:	2301      	movs	r3, #1
 8015564:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801556c:	461a      	mov	r2, r3
 801556e:	2300      	movs	r3, #0
 8015570:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015578:	461a      	mov	r2, r3
 801557a:	2300      	movs	r3, #0
 801557c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015584:	461a      	mov	r2, r3
 8015586:	2300      	movs	r3, #0
 8015588:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801558a:	2300      	movs	r3, #0
 801558c:	613b      	str	r3, [r7, #16]
 801558e:	e043      	b.n	8015618 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	015a      	lsls	r2, r3, #5
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	4413      	add	r3, r2
 8015598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80155a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80155a6:	d118      	bne.n	80155da <USB_DevInit+0x156>
    {
      if (i == 0U)
 80155a8:	693b      	ldr	r3, [r7, #16]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d10a      	bne.n	80155c4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	015a      	lsls	r2, r3, #5
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	4413      	add	r3, r2
 80155b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155ba:	461a      	mov	r2, r3
 80155bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80155c0:	6013      	str	r3, [r2, #0]
 80155c2:	e013      	b.n	80155ec <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	015a      	lsls	r2, r3, #5
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	4413      	add	r3, r2
 80155cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155d0:	461a      	mov	r2, r3
 80155d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80155d6:	6013      	str	r3, [r2, #0]
 80155d8:	e008      	b.n	80155ec <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	015a      	lsls	r2, r3, #5
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	4413      	add	r3, r2
 80155e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155e6:	461a      	mov	r2, r3
 80155e8:	2300      	movs	r3, #0
 80155ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80155ec:	693b      	ldr	r3, [r7, #16]
 80155ee:	015a      	lsls	r2, r3, #5
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	4413      	add	r3, r2
 80155f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80155f8:	461a      	mov	r2, r3
 80155fa:	2300      	movs	r3, #0
 80155fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	015a      	lsls	r2, r3, #5
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	4413      	add	r3, r2
 8015606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801560a:	461a      	mov	r2, r3
 801560c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8015610:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	3301      	adds	r3, #1
 8015616:	613b      	str	r3, [r7, #16]
 8015618:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801561c:	461a      	mov	r2, r3
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	4293      	cmp	r3, r2
 8015622:	d3b5      	bcc.n	8015590 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015624:	2300      	movs	r3, #0
 8015626:	613b      	str	r3, [r7, #16]
 8015628:	e043      	b.n	80156b2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	015a      	lsls	r2, r3, #5
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	4413      	add	r3, r2
 8015632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801563c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015640:	d118      	bne.n	8015674 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8015642:	693b      	ldr	r3, [r7, #16]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d10a      	bne.n	801565e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	015a      	lsls	r2, r3, #5
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	4413      	add	r3, r2
 8015650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015654:	461a      	mov	r2, r3
 8015656:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801565a:	6013      	str	r3, [r2, #0]
 801565c:	e013      	b.n	8015686 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	015a      	lsls	r2, r3, #5
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	4413      	add	r3, r2
 8015666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801566a:	461a      	mov	r2, r3
 801566c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8015670:	6013      	str	r3, [r2, #0]
 8015672:	e008      	b.n	8015686 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	015a      	lsls	r2, r3, #5
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	4413      	add	r3, r2
 801567c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015680:	461a      	mov	r2, r3
 8015682:	2300      	movs	r3, #0
 8015684:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	015a      	lsls	r2, r3, #5
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	4413      	add	r3, r2
 801568e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015692:	461a      	mov	r2, r3
 8015694:	2300      	movs	r3, #0
 8015696:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	015a      	lsls	r2, r3, #5
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	4413      	add	r3, r2
 80156a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156a4:	461a      	mov	r2, r3
 80156a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80156aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	3301      	adds	r3, #1
 80156b0:	613b      	str	r3, [r7, #16]
 80156b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80156b6:	461a      	mov	r2, r3
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	4293      	cmp	r3, r2
 80156bc:	d3b5      	bcc.n	801562a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156c4:	691b      	ldr	r3, [r3, #16]
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80156cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80156d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2200      	movs	r2, #0
 80156d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80156de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80156e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d105      	bne.n	80156f4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	699b      	ldr	r3, [r3, #24]
 80156ec:	f043 0210 	orr.w	r2, r3, #16
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	699a      	ldr	r2, [r3, #24]
 80156f8:	4b0f      	ldr	r3, [pc, #60]	@ (8015738 <USB_DevInit+0x2b4>)
 80156fa:	4313      	orrs	r3, r2
 80156fc:	687a      	ldr	r2, [r7, #4]
 80156fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015700:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8015704:	2b00      	cmp	r3, #0
 8015706:	d005      	beq.n	8015714 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	699b      	ldr	r3, [r3, #24]
 801570c:	f043 0208 	orr.w	r2, r3, #8
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015714:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015718:	2b01      	cmp	r3, #1
 801571a:	d105      	bne.n	8015728 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	699a      	ldr	r2, [r3, #24]
 8015720:	4b06      	ldr	r3, [pc, #24]	@ (801573c <USB_DevInit+0x2b8>)
 8015722:	4313      	orrs	r3, r2
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015728:	7dfb      	ldrb	r3, [r7, #23]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015734:	b004      	add	sp, #16
 8015736:	4770      	bx	lr
 8015738:	803c3800 	.word	0x803c3800
 801573c:	40000004 	.word	0x40000004

08015740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015740:	b480      	push	{r7}
 8015742:	b085      	sub	sp, #20
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801574a:	2300      	movs	r3, #0
 801574c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	3301      	adds	r3, #1
 8015752:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801575a:	d901      	bls.n	8015760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801575c:	2303      	movs	r3, #3
 801575e:	e01b      	b.n	8015798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	691b      	ldr	r3, [r3, #16]
 8015764:	2b00      	cmp	r3, #0
 8015766:	daf2      	bge.n	801574e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015768:	2300      	movs	r3, #0
 801576a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	019b      	lsls	r3, r3, #6
 8015770:	f043 0220 	orr.w	r2, r3, #32
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	3301      	adds	r3, #1
 801577c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015784:	d901      	bls.n	801578a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8015786:	2303      	movs	r3, #3
 8015788:	e006      	b.n	8015798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	f003 0320 	and.w	r3, r3, #32
 8015792:	2b20      	cmp	r3, #32
 8015794:	d0f0      	beq.n	8015778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3714      	adds	r7, #20
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr

080157a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b085      	sub	sp, #20
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80157ac:	2300      	movs	r3, #0
 80157ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	3301      	adds	r3, #1
 80157b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80157bc:	d901      	bls.n	80157c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80157be:	2303      	movs	r3, #3
 80157c0:	e018      	b.n	80157f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	daf2      	bge.n	80157b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80157ca:	2300      	movs	r3, #0
 80157cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2210      	movs	r2, #16
 80157d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	3301      	adds	r3, #1
 80157d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80157e0:	d901      	bls.n	80157e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80157e2:	2303      	movs	r3, #3
 80157e4:	e006      	b.n	80157f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	691b      	ldr	r3, [r3, #16]
 80157ea:	f003 0310 	and.w	r3, r3, #16
 80157ee:	2b10      	cmp	r3, #16
 80157f0:	d0f0      	beq.n	80157d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80157f2:	2300      	movs	r3, #0
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3714      	adds	r7, #20
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr

08015800 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015800:	b480      	push	{r7}
 8015802:	b085      	sub	sp, #20
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	460b      	mov	r3, r1
 801580a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	78fb      	ldrb	r3, [r7, #3]
 801581a:	68f9      	ldr	r1, [r7, #12]
 801581c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015820:	4313      	orrs	r3, r2
 8015822:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015824:	2300      	movs	r3, #0
}
 8015826:	4618      	mov	r0, r3
 8015828:	3714      	adds	r7, #20
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr

08015832 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8015832:	b480      	push	{r7}
 8015834:	b087      	sub	sp, #28
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801583e:	693b      	ldr	r3, [r7, #16]
 8015840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	f003 0306 	and.w	r3, r3, #6
 801584a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d102      	bne.n	8015858 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015852:	2300      	movs	r3, #0
 8015854:	75fb      	strb	r3, [r7, #23]
 8015856:	e00a      	b.n	801586e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	2b02      	cmp	r3, #2
 801585c:	d002      	beq.n	8015864 <USB_GetDevSpeed+0x32>
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	2b06      	cmp	r3, #6
 8015862:	d102      	bne.n	801586a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015864:	2302      	movs	r3, #2
 8015866:	75fb      	strb	r3, [r7, #23]
 8015868:	e001      	b.n	801586e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801586a:	230f      	movs	r3, #15
 801586c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015870:	4618      	mov	r0, r3
 8015872:	371c      	adds	r7, #28
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801588a:	683b      	ldr	r3, [r7, #0]
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	785b      	ldrb	r3, [r3, #1]
 8015894:	2b01      	cmp	r3, #1
 8015896:	d139      	bne.n	801590c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801589e:	69da      	ldr	r2, [r3, #28]
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	f003 030f 	and.w	r3, r3, #15
 80158a8:	2101      	movs	r1, #1
 80158aa:	fa01 f303 	lsl.w	r3, r1, r3
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	68f9      	ldr	r1, [r7, #12]
 80158b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80158b6:	4313      	orrs	r3, r2
 80158b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	015a      	lsls	r2, r3, #5
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	4413      	add	r3, r2
 80158c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d153      	bne.n	8015978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	015a      	lsls	r2, r3, #5
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	4413      	add	r3, r2
 80158d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	689b      	ldr	r3, [r3, #8]
 80158e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	791b      	ldrb	r3, [r3, #4]
 80158ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80158ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80158ee:	68bb      	ldr	r3, [r7, #8]
 80158f0:	059b      	lsls	r3, r3, #22
 80158f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80158f4:	431a      	orrs	r2, r3
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	0159      	lsls	r1, r3, #5
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	440b      	add	r3, r1
 80158fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015902:	4619      	mov	r1, r3
 8015904:	4b20      	ldr	r3, [pc, #128]	@ (8015988 <USB_ActivateEndpoint+0x10c>)
 8015906:	4313      	orrs	r3, r2
 8015908:	600b      	str	r3, [r1, #0]
 801590a:	e035      	b.n	8015978 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015912:	69da      	ldr	r2, [r3, #28]
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	f003 030f 	and.w	r3, r3, #15
 801591c:	2101      	movs	r1, #1
 801591e:	fa01 f303 	lsl.w	r3, r1, r3
 8015922:	041b      	lsls	r3, r3, #16
 8015924:	68f9      	ldr	r1, [r7, #12]
 8015926:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801592a:	4313      	orrs	r3, r2
 801592c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	015a      	lsls	r2, r3, #5
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	4413      	add	r3, r2
 8015936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015940:	2b00      	cmp	r3, #0
 8015942:	d119      	bne.n	8015978 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	015a      	lsls	r2, r3, #5
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	4413      	add	r3, r2
 801594c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	689b      	ldr	r3, [r3, #8]
 8015956:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	791b      	ldrb	r3, [r3, #4]
 801595e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015960:	430b      	orrs	r3, r1
 8015962:	431a      	orrs	r2, r3
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	0159      	lsls	r1, r3, #5
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	440b      	add	r3, r1
 801596c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015970:	4619      	mov	r1, r3
 8015972:	4b05      	ldr	r3, [pc, #20]	@ (8015988 <USB_ActivateEndpoint+0x10c>)
 8015974:	4313      	orrs	r3, r2
 8015976:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015978:	2300      	movs	r3, #0
}
 801597a:	4618      	mov	r0, r3
 801597c:	3714      	adds	r7, #20
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop
 8015988:	10008000 	.word	0x10008000

0801598c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801598c:	b480      	push	{r7}
 801598e:	b085      	sub	sp, #20
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	785b      	ldrb	r3, [r3, #1]
 80159a4:	2b01      	cmp	r3, #1
 80159a6:	d161      	bne.n	8015a6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	015a      	lsls	r2, r3, #5
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	4413      	add	r3, r2
 80159b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80159ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80159be:	d11f      	bne.n	8015a00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	015a      	lsls	r2, r3, #5
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	4413      	add	r3, r2
 80159c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	0151      	lsls	r1, r2, #5
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	440a      	add	r2, r1
 80159d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80159da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80159de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	015a      	lsls	r2, r3, #5
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	4413      	add	r3, r2
 80159e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	68ba      	ldr	r2, [r7, #8]
 80159f0:	0151      	lsls	r1, r2, #5
 80159f2:	68fa      	ldr	r2, [r7, #12]
 80159f4:	440a      	add	r2, r1
 80159f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80159fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80159fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f003 030f 	and.w	r3, r3, #15
 8015a10:	2101      	movs	r1, #1
 8015a12:	fa01 f303 	lsl.w	r3, r1, r3
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	43db      	mvns	r3, r3
 8015a1a:	68f9      	ldr	r1, [r7, #12]
 8015a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015a20:	4013      	ands	r3, r2
 8015a22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015a2a:	69da      	ldr	r2, [r3, #28]
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	f003 030f 	and.w	r3, r3, #15
 8015a34:	2101      	movs	r1, #1
 8015a36:	fa01 f303 	lsl.w	r3, r1, r3
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	43db      	mvns	r3, r3
 8015a3e:	68f9      	ldr	r1, [r7, #12]
 8015a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015a44:	4013      	ands	r3, r2
 8015a46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	015a      	lsls	r2, r3, #5
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	4413      	add	r3, r2
 8015a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a54:	681a      	ldr	r2, [r3, #0]
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	0159      	lsls	r1, r3, #5
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	440b      	add	r3, r1
 8015a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015a62:	4619      	mov	r1, r3
 8015a64:	4b35      	ldr	r3, [pc, #212]	@ (8015b3c <USB_DeactivateEndpoint+0x1b0>)
 8015a66:	4013      	ands	r3, r2
 8015a68:	600b      	str	r3, [r1, #0]
 8015a6a:	e060      	b.n	8015b2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	015a      	lsls	r2, r3, #5
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	4413      	add	r3, r2
 8015a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015a82:	d11f      	bne.n	8015ac4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	015a      	lsls	r2, r3, #5
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	4413      	add	r3, r2
 8015a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	68ba      	ldr	r2, [r7, #8]
 8015a94:	0151      	lsls	r1, r2, #5
 8015a96:	68fa      	ldr	r2, [r7, #12]
 8015a98:	440a      	add	r2, r1
 8015a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015aa2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	015a      	lsls	r2, r3, #5
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	4413      	add	r3, r2
 8015aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	0151      	lsls	r1, r2, #5
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	440a      	add	r2, r1
 8015aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015abe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015aca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	f003 030f 	and.w	r3, r3, #15
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8015ada:	041b      	lsls	r3, r3, #16
 8015adc:	43db      	mvns	r3, r3
 8015ade:	68f9      	ldr	r1, [r7, #12]
 8015ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015aee:	69da      	ldr	r2, [r3, #28]
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	f003 030f 	and.w	r3, r3, #15
 8015af8:	2101      	movs	r1, #1
 8015afa:	fa01 f303 	lsl.w	r3, r1, r3
 8015afe:	041b      	lsls	r3, r3, #16
 8015b00:	43db      	mvns	r3, r3
 8015b02:	68f9      	ldr	r1, [r7, #12]
 8015b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015b08:	4013      	ands	r3, r2
 8015b0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	015a      	lsls	r2, r3, #5
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	4413      	add	r3, r2
 8015b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	0159      	lsls	r1, r3, #5
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	440b      	add	r3, r1
 8015b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015b26:	4619      	mov	r1, r3
 8015b28:	4b05      	ldr	r3, [pc, #20]	@ (8015b40 <USB_DeactivateEndpoint+0x1b4>)
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3714      	adds	r7, #20
 8015b34:	46bd      	mov	sp, r7
 8015b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3a:	4770      	bx	lr
 8015b3c:	ec337800 	.word	0xec337800
 8015b40:	eff37800 	.word	0xeff37800

08015b44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b08a      	sub	sp, #40	@ 0x28
 8015b48:	af02      	add	r7, sp, #8
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	60b9      	str	r1, [r7, #8]
 8015b4e:	4613      	mov	r3, r2
 8015b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	785b      	ldrb	r3, [r3, #1]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	f040 8181 	bne.w	8015e68 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	691b      	ldr	r3, [r3, #16]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d132      	bne.n	8015bd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	015a      	lsls	r2, r3, #5
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	4413      	add	r3, r2
 8015b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b7a:	691a      	ldr	r2, [r3, #16]
 8015b7c:	69bb      	ldr	r3, [r7, #24]
 8015b7e:	0159      	lsls	r1, r3, #5
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	440b      	add	r3, r1
 8015b84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b88:	4619      	mov	r1, r3
 8015b8a:	4ba5      	ldr	r3, [pc, #660]	@ (8015e20 <USB_EPStartXfer+0x2dc>)
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015b90:	69bb      	ldr	r3, [r7, #24]
 8015b92:	015a      	lsls	r2, r3, #5
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	4413      	add	r3, r2
 8015b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015b9c:	691b      	ldr	r3, [r3, #16]
 8015b9e:	69ba      	ldr	r2, [r7, #24]
 8015ba0:	0151      	lsls	r1, r2, #5
 8015ba2:	69fa      	ldr	r2, [r7, #28]
 8015ba4:	440a      	add	r2, r1
 8015ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015baa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015bb0:	69bb      	ldr	r3, [r7, #24]
 8015bb2:	015a      	lsls	r2, r3, #5
 8015bb4:	69fb      	ldr	r3, [r7, #28]
 8015bb6:	4413      	add	r3, r2
 8015bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015bbc:	691a      	ldr	r2, [r3, #16]
 8015bbe:	69bb      	ldr	r3, [r7, #24]
 8015bc0:	0159      	lsls	r1, r3, #5
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	440b      	add	r3, r1
 8015bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015bca:	4619      	mov	r1, r3
 8015bcc:	4b95      	ldr	r3, [pc, #596]	@ (8015e24 <USB_EPStartXfer+0x2e0>)
 8015bce:	4013      	ands	r3, r2
 8015bd0:	610b      	str	r3, [r1, #16]
 8015bd2:	e092      	b.n	8015cfa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	015a      	lsls	r2, r3, #5
 8015bd8:	69fb      	ldr	r3, [r7, #28]
 8015bda:	4413      	add	r3, r2
 8015bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015be0:	691a      	ldr	r2, [r3, #16]
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	0159      	lsls	r1, r3, #5
 8015be6:	69fb      	ldr	r3, [r7, #28]
 8015be8:	440b      	add	r3, r1
 8015bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015bee:	4619      	mov	r1, r3
 8015bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8015e24 <USB_EPStartXfer+0x2e0>)
 8015bf2:	4013      	ands	r3, r2
 8015bf4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015bf6:	69bb      	ldr	r3, [r7, #24]
 8015bf8:	015a      	lsls	r2, r3, #5
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	4413      	add	r3, r2
 8015bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c02:	691a      	ldr	r2, [r3, #16]
 8015c04:	69bb      	ldr	r3, [r7, #24]
 8015c06:	0159      	lsls	r1, r3, #5
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	440b      	add	r3, r1
 8015c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c10:	4619      	mov	r1, r3
 8015c12:	4b83      	ldr	r3, [pc, #524]	@ (8015e20 <USB_EPStartXfer+0x2dc>)
 8015c14:	4013      	ands	r3, r2
 8015c16:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8015c18:	69bb      	ldr	r3, [r7, #24]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d11a      	bne.n	8015c54 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015c1e:	68bb      	ldr	r3, [r7, #8]
 8015c20:	691a      	ldr	r2, [r3, #16]
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d903      	bls.n	8015c32 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	689a      	ldr	r2, [r3, #8]
 8015c2e:	68bb      	ldr	r3, [r7, #8]
 8015c30:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	015a      	lsls	r2, r3, #5
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	4413      	add	r3, r2
 8015c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c3e:	691b      	ldr	r3, [r3, #16]
 8015c40:	69ba      	ldr	r2, [r7, #24]
 8015c42:	0151      	lsls	r1, r2, #5
 8015c44:	69fa      	ldr	r2, [r7, #28]
 8015c46:	440a      	add	r2, r1
 8015c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015c4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015c50:	6113      	str	r3, [r2, #16]
 8015c52:	e01b      	b.n	8015c8c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	015a      	lsls	r2, r3, #5
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	4413      	add	r3, r2
 8015c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c60:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	6919      	ldr	r1, [r3, #16]
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	440b      	add	r3, r1
 8015c6c:	1e59      	subs	r1, r3, #1
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8015c76:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015c78:	4b6b      	ldr	r3, [pc, #428]	@ (8015e28 <USB_EPStartXfer+0x2e4>)
 8015c7a:	400b      	ands	r3, r1
 8015c7c:	69b9      	ldr	r1, [r7, #24]
 8015c7e:	0148      	lsls	r0, r1, #5
 8015c80:	69f9      	ldr	r1, [r7, #28]
 8015c82:	4401      	add	r1, r0
 8015c84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015c88:	4313      	orrs	r3, r2
 8015c8a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	015a      	lsls	r2, r3, #5
 8015c90:	69fb      	ldr	r3, [r7, #28]
 8015c92:	4413      	add	r3, r2
 8015c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015c98:	691a      	ldr	r2, [r3, #16]
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	691b      	ldr	r3, [r3, #16]
 8015c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015ca2:	69b9      	ldr	r1, [r7, #24]
 8015ca4:	0148      	lsls	r0, r1, #5
 8015ca6:	69f9      	ldr	r1, [r7, #28]
 8015ca8:	4401      	add	r1, r0
 8015caa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8015cae:	4313      	orrs	r3, r2
 8015cb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	791b      	ldrb	r3, [r3, #4]
 8015cb6:	2b01      	cmp	r3, #1
 8015cb8:	d11f      	bne.n	8015cfa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015cba:	69bb      	ldr	r3, [r7, #24]
 8015cbc:	015a      	lsls	r2, r3, #5
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015cc6:	691b      	ldr	r3, [r3, #16]
 8015cc8:	69ba      	ldr	r2, [r7, #24]
 8015cca:	0151      	lsls	r1, r2, #5
 8015ccc:	69fa      	ldr	r2, [r7, #28]
 8015cce:	440a      	add	r2, r1
 8015cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015cd4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8015cd8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	015a      	lsls	r2, r3, #5
 8015cde:	69fb      	ldr	r3, [r7, #28]
 8015ce0:	4413      	add	r3, r2
 8015ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015ce6:	691b      	ldr	r3, [r3, #16]
 8015ce8:	69ba      	ldr	r2, [r7, #24]
 8015cea:	0151      	lsls	r1, r2, #5
 8015cec:	69fa      	ldr	r2, [r7, #28]
 8015cee:	440a      	add	r2, r1
 8015cf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015cf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015cf8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015cfa:	79fb      	ldrb	r3, [r7, #7]
 8015cfc:	2b01      	cmp	r3, #1
 8015cfe:	d14b      	bne.n	8015d98 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	69db      	ldr	r3, [r3, #28]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d009      	beq.n	8015d1c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	015a      	lsls	r2, r3, #5
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	4413      	add	r3, r2
 8015d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d14:	461a      	mov	r2, r3
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	69db      	ldr	r3, [r3, #28]
 8015d1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	791b      	ldrb	r3, [r3, #4]
 8015d20:	2b01      	cmp	r3, #1
 8015d22:	d128      	bne.n	8015d76 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d110      	bne.n	8015d56 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015d34:	69bb      	ldr	r3, [r7, #24]
 8015d36:	015a      	lsls	r2, r3, #5
 8015d38:	69fb      	ldr	r3, [r7, #28]
 8015d3a:	4413      	add	r3, r2
 8015d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	69ba      	ldr	r2, [r7, #24]
 8015d44:	0151      	lsls	r1, r2, #5
 8015d46:	69fa      	ldr	r2, [r7, #28]
 8015d48:	440a      	add	r2, r1
 8015d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015d52:	6013      	str	r3, [r2, #0]
 8015d54:	e00f      	b.n	8015d76 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015d56:	69bb      	ldr	r3, [r7, #24]
 8015d58:	015a      	lsls	r2, r3, #5
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	69ba      	ldr	r2, [r7, #24]
 8015d66:	0151      	lsls	r1, r2, #5
 8015d68:	69fa      	ldr	r2, [r7, #28]
 8015d6a:	440a      	add	r2, r1
 8015d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015d74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015d76:	69bb      	ldr	r3, [r7, #24]
 8015d78:	015a      	lsls	r2, r3, #5
 8015d7a:	69fb      	ldr	r3, [r7, #28]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	69ba      	ldr	r2, [r7, #24]
 8015d86:	0151      	lsls	r1, r2, #5
 8015d88:	69fa      	ldr	r2, [r7, #28]
 8015d8a:	440a      	add	r2, r1
 8015d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015d90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015d94:	6013      	str	r3, [r2, #0]
 8015d96:	e16a      	b.n	801606e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	015a      	lsls	r2, r3, #5
 8015d9c:	69fb      	ldr	r3, [r7, #28]
 8015d9e:	4413      	add	r3, r2
 8015da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	69ba      	ldr	r2, [r7, #24]
 8015da8:	0151      	lsls	r1, r2, #5
 8015daa:	69fa      	ldr	r2, [r7, #28]
 8015dac:	440a      	add	r2, r1
 8015dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015db2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015db6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	791b      	ldrb	r3, [r3, #4]
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d015      	beq.n	8015dec <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	691b      	ldr	r3, [r3, #16]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	f000 8152 	beq.w	801606e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	781b      	ldrb	r3, [r3, #0]
 8015dd6:	f003 030f 	and.w	r3, r3, #15
 8015dda:	2101      	movs	r1, #1
 8015ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8015de0:	69f9      	ldr	r1, [r7, #28]
 8015de2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015de6:	4313      	orrs	r3, r2
 8015de8:	634b      	str	r3, [r1, #52]	@ 0x34
 8015dea:	e140      	b.n	801606e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d117      	bne.n	8015e2c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	015a      	lsls	r2, r3, #5
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	4413      	add	r3, r2
 8015e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	69ba      	ldr	r2, [r7, #24]
 8015e0c:	0151      	lsls	r1, r2, #5
 8015e0e:	69fa      	ldr	r2, [r7, #28]
 8015e10:	440a      	add	r2, r1
 8015e12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015e1a:	6013      	str	r3, [r2, #0]
 8015e1c:	e016      	b.n	8015e4c <USB_EPStartXfer+0x308>
 8015e1e:	bf00      	nop
 8015e20:	e007ffff 	.word	0xe007ffff
 8015e24:	fff80000 	.word	0xfff80000
 8015e28:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015e2c:	69bb      	ldr	r3, [r7, #24]
 8015e2e:	015a      	lsls	r2, r3, #5
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	4413      	add	r3, r2
 8015e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	69ba      	ldr	r2, [r7, #24]
 8015e3c:	0151      	lsls	r1, r2, #5
 8015e3e:	69fa      	ldr	r2, [r7, #28]
 8015e40:	440a      	add	r2, r1
 8015e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015e4a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	68d9      	ldr	r1, [r3, #12]
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	781a      	ldrb	r2, [r3, #0]
 8015e54:	68bb      	ldr	r3, [r7, #8]
 8015e56:	691b      	ldr	r3, [r3, #16]
 8015e58:	b298      	uxth	r0, r3
 8015e5a:	79fb      	ldrb	r3, [r7, #7]
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	4603      	mov	r3, r0
 8015e60:	68f8      	ldr	r0, [r7, #12]
 8015e62:	f000 f9b9 	bl	80161d8 <USB_WritePacket>
 8015e66:	e102      	b.n	801606e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015e68:	69bb      	ldr	r3, [r7, #24]
 8015e6a:	015a      	lsls	r2, r3, #5
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	4413      	add	r3, r2
 8015e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e74:	691a      	ldr	r2, [r3, #16]
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	0159      	lsls	r1, r3, #5
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	440b      	add	r3, r1
 8015e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e82:	4619      	mov	r1, r3
 8015e84:	4b7c      	ldr	r3, [pc, #496]	@ (8016078 <USB_EPStartXfer+0x534>)
 8015e86:	4013      	ands	r3, r2
 8015e88:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015e8a:	69bb      	ldr	r3, [r7, #24]
 8015e8c:	015a      	lsls	r2, r3, #5
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	4413      	add	r3, r2
 8015e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015e96:	691a      	ldr	r2, [r3, #16]
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	0159      	lsls	r1, r3, #5
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	440b      	add	r3, r1
 8015ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	4b75      	ldr	r3, [pc, #468]	@ (801607c <USB_EPStartXfer+0x538>)
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d12f      	bne.n	8015f12 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	691b      	ldr	r3, [r3, #16]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d003      	beq.n	8015ec2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	689a      	ldr	r2, [r3, #8]
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	689a      	ldr	r2, [r3, #8]
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	015a      	lsls	r2, r3, #5
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	4413      	add	r3, r2
 8015ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ed6:	691a      	ldr	r2, [r3, #16]
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	6a1b      	ldr	r3, [r3, #32]
 8015edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015ee0:	69b9      	ldr	r1, [r7, #24]
 8015ee2:	0148      	lsls	r0, r1, #5
 8015ee4:	69f9      	ldr	r1, [r7, #28]
 8015ee6:	4401      	add	r1, r0
 8015ee8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015eec:	4313      	orrs	r3, r2
 8015eee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	015a      	lsls	r2, r3, #5
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	4413      	add	r3, r2
 8015ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015efc:	691b      	ldr	r3, [r3, #16]
 8015efe:	69ba      	ldr	r2, [r7, #24]
 8015f00:	0151      	lsls	r1, r2, #5
 8015f02:	69fa      	ldr	r2, [r7, #28]
 8015f04:	440a      	add	r2, r1
 8015f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015f0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015f0e:	6113      	str	r3, [r2, #16]
 8015f10:	e05f      	b.n	8015fd2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	691b      	ldr	r3, [r3, #16]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d123      	bne.n	8015f62 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015f1a:	69bb      	ldr	r3, [r7, #24]
 8015f1c:	015a      	lsls	r2, r3, #5
 8015f1e:	69fb      	ldr	r3, [r7, #28]
 8015f20:	4413      	add	r3, r2
 8015f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f26:	691a      	ldr	r2, [r3, #16]
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	689b      	ldr	r3, [r3, #8]
 8015f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015f30:	69b9      	ldr	r1, [r7, #24]
 8015f32:	0148      	lsls	r0, r1, #5
 8015f34:	69f9      	ldr	r1, [r7, #28]
 8015f36:	4401      	add	r1, r0
 8015f38:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015f3c:	4313      	orrs	r3, r2
 8015f3e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	015a      	lsls	r2, r3, #5
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	4413      	add	r3, r2
 8015f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f4c:	691b      	ldr	r3, [r3, #16]
 8015f4e:	69ba      	ldr	r2, [r7, #24]
 8015f50:	0151      	lsls	r1, r2, #5
 8015f52:	69fa      	ldr	r2, [r7, #28]
 8015f54:	440a      	add	r2, r1
 8015f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015f5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015f5e:	6113      	str	r3, [r2, #16]
 8015f60:	e037      	b.n	8015fd2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	691a      	ldr	r2, [r3, #16]
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	689b      	ldr	r3, [r3, #8]
 8015f6a:	4413      	add	r3, r2
 8015f6c:	1e5a      	subs	r2, r3, #1
 8015f6e:	68bb      	ldr	r3, [r7, #8]
 8015f70:	689b      	ldr	r3, [r3, #8]
 8015f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f76:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	689b      	ldr	r3, [r3, #8]
 8015f7c:	8afa      	ldrh	r2, [r7, #22]
 8015f7e:	fb03 f202 	mul.w	r2, r3, r2
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	015a      	lsls	r2, r3, #5
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015f92:	691a      	ldr	r2, [r3, #16]
 8015f94:	8afb      	ldrh	r3, [r7, #22]
 8015f96:	04d9      	lsls	r1, r3, #19
 8015f98:	4b39      	ldr	r3, [pc, #228]	@ (8016080 <USB_EPStartXfer+0x53c>)
 8015f9a:	400b      	ands	r3, r1
 8015f9c:	69b9      	ldr	r1, [r7, #24]
 8015f9e:	0148      	lsls	r0, r1, #5
 8015fa0:	69f9      	ldr	r1, [r7, #28]
 8015fa2:	4401      	add	r1, r0
 8015fa4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015fa8:	4313      	orrs	r3, r2
 8015faa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	015a      	lsls	r2, r3, #5
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015fb8:	691a      	ldr	r2, [r3, #16]
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	6a1b      	ldr	r3, [r3, #32]
 8015fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015fc2:	69b9      	ldr	r1, [r7, #24]
 8015fc4:	0148      	lsls	r0, r1, #5
 8015fc6:	69f9      	ldr	r1, [r7, #28]
 8015fc8:	4401      	add	r1, r0
 8015fca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015fce:	4313      	orrs	r3, r2
 8015fd0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8015fd2:	79fb      	ldrb	r3, [r7, #7]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d10d      	bne.n	8015ff4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	68db      	ldr	r3, [r3, #12]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d009      	beq.n	8015ff4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	68d9      	ldr	r1, [r3, #12]
 8015fe4:	69bb      	ldr	r3, [r7, #24]
 8015fe6:	015a      	lsls	r2, r3, #5
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	4413      	add	r3, r2
 8015fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015ff0:	460a      	mov	r2, r1
 8015ff2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	791b      	ldrb	r3, [r3, #4]
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	d128      	bne.n	801604e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015ffc:	69fb      	ldr	r3, [r7, #28]
 8015ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016008:	2b00      	cmp	r3, #0
 801600a:	d110      	bne.n	801602e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	015a      	lsls	r2, r3, #5
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	4413      	add	r3, r2
 8016014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	69ba      	ldr	r2, [r7, #24]
 801601c:	0151      	lsls	r1, r2, #5
 801601e:	69fa      	ldr	r2, [r7, #28]
 8016020:	440a      	add	r2, r1
 8016022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016026:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801602a:	6013      	str	r3, [r2, #0]
 801602c:	e00f      	b.n	801604e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	015a      	lsls	r2, r3, #5
 8016032:	69fb      	ldr	r3, [r7, #28]
 8016034:	4413      	add	r3, r2
 8016036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	69ba      	ldr	r2, [r7, #24]
 801603e:	0151      	lsls	r1, r2, #5
 8016040:	69fa      	ldr	r2, [r7, #28]
 8016042:	440a      	add	r2, r1
 8016044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801604c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801604e:	69bb      	ldr	r3, [r7, #24]
 8016050:	015a      	lsls	r2, r3, #5
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	4413      	add	r3, r2
 8016056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	69ba      	ldr	r2, [r7, #24]
 801605e:	0151      	lsls	r1, r2, #5
 8016060:	69fa      	ldr	r2, [r7, #28]
 8016062:	440a      	add	r2, r1
 8016064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016068:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801606c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801606e:	2300      	movs	r3, #0
}
 8016070:	4618      	mov	r0, r3
 8016072:	3720      	adds	r7, #32
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	fff80000 	.word	0xfff80000
 801607c:	e007ffff 	.word	0xe007ffff
 8016080:	1ff80000 	.word	0x1ff80000

08016084 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016084:	b480      	push	{r7}
 8016086:	b087      	sub	sp, #28
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801608e:	2300      	movs	r3, #0
 8016090:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016092:	2300      	movs	r3, #0
 8016094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	785b      	ldrb	r3, [r3, #1]
 801609e:	2b01      	cmp	r3, #1
 80160a0:	d14a      	bne.n	8016138 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	015a      	lsls	r2, r3, #5
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	4413      	add	r3, r2
 80160ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80160b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80160ba:	f040 8086 	bne.w	80161ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	015a      	lsls	r2, r3, #5
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	4413      	add	r3, r2
 80160c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	683a      	ldr	r2, [r7, #0]
 80160d0:	7812      	ldrb	r2, [r2, #0]
 80160d2:	0151      	lsls	r1, r2, #5
 80160d4:	693a      	ldr	r2, [r7, #16]
 80160d6:	440a      	add	r2, r1
 80160d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80160dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80160e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	781b      	ldrb	r3, [r3, #0]
 80160e6:	015a      	lsls	r2, r3, #5
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	4413      	add	r3, r2
 80160ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	683a      	ldr	r2, [r7, #0]
 80160f4:	7812      	ldrb	r2, [r2, #0]
 80160f6:	0151      	lsls	r1, r2, #5
 80160f8:	693a      	ldr	r2, [r7, #16]
 80160fa:	440a      	add	r2, r1
 80160fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016100:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	3301      	adds	r3, #1
 801610a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016112:	4293      	cmp	r3, r2
 8016114:	d902      	bls.n	801611c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8016116:	2301      	movs	r3, #1
 8016118:	75fb      	strb	r3, [r7, #23]
          break;
 801611a:	e056      	b.n	80161ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	015a      	lsls	r2, r3, #5
 8016122:	693b      	ldr	r3, [r7, #16]
 8016124:	4413      	add	r3, r2
 8016126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016134:	d0e7      	beq.n	8016106 <USB_EPStopXfer+0x82>
 8016136:	e048      	b.n	80161ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	015a      	lsls	r2, r3, #5
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	4413      	add	r3, r2
 8016142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801614c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016150:	d13b      	bne.n	80161ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	015a      	lsls	r2, r3, #5
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	4413      	add	r3, r2
 801615c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	683a      	ldr	r2, [r7, #0]
 8016164:	7812      	ldrb	r2, [r2, #0]
 8016166:	0151      	lsls	r1, r2, #5
 8016168:	693a      	ldr	r2, [r7, #16]
 801616a:	440a      	add	r2, r1
 801616c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016170:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016174:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	015a      	lsls	r2, r3, #5
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	4413      	add	r3, r2
 8016180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	683a      	ldr	r2, [r7, #0]
 8016188:	7812      	ldrb	r2, [r2, #0]
 801618a:	0151      	lsls	r1, r2, #5
 801618c:	693a      	ldr	r2, [r7, #16]
 801618e:	440a      	add	r2, r1
 8016190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016198:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	3301      	adds	r3, #1
 801619e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80161a6:	4293      	cmp	r3, r2
 80161a8:	d902      	bls.n	80161b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80161aa:	2301      	movs	r3, #1
 80161ac:	75fb      	strb	r3, [r7, #23]
          break;
 80161ae:	e00c      	b.n	80161ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	015a      	lsls	r2, r3, #5
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	4413      	add	r3, r2
 80161ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80161c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80161c8:	d0e7      	beq.n	801619a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80161ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	371c      	adds	r7, #28
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80161d8:	b480      	push	{r7}
 80161da:	b089      	sub	sp, #36	@ 0x24
 80161dc:	af00      	add	r7, sp, #0
 80161de:	60f8      	str	r0, [r7, #12]
 80161e0:	60b9      	str	r1, [r7, #8]
 80161e2:	4611      	mov	r1, r2
 80161e4:	461a      	mov	r2, r3
 80161e6:	460b      	mov	r3, r1
 80161e8:	71fb      	strb	r3, [r7, #7]
 80161ea:	4613      	mov	r3, r2
 80161ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80161f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d123      	bne.n	8016246 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80161fe:	88bb      	ldrh	r3, [r7, #4]
 8016200:	3303      	adds	r3, #3
 8016202:	089b      	lsrs	r3, r3, #2
 8016204:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8016206:	2300      	movs	r3, #0
 8016208:	61bb      	str	r3, [r7, #24]
 801620a:	e018      	b.n	801623e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801620c:	79fb      	ldrb	r3, [r7, #7]
 801620e:	031a      	lsls	r2, r3, #12
 8016210:	697b      	ldr	r3, [r7, #20]
 8016212:	4413      	add	r3, r2
 8016214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016218:	461a      	mov	r2, r3
 801621a:	69fb      	ldr	r3, [r7, #28]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8016220:	69fb      	ldr	r3, [r7, #28]
 8016222:	3301      	adds	r3, #1
 8016224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016226:	69fb      	ldr	r3, [r7, #28]
 8016228:	3301      	adds	r3, #1
 801622a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	3301      	adds	r3, #1
 8016230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016232:	69fb      	ldr	r3, [r7, #28]
 8016234:	3301      	adds	r3, #1
 8016236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	3301      	adds	r3, #1
 801623c:	61bb      	str	r3, [r7, #24]
 801623e:	69ba      	ldr	r2, [r7, #24]
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	429a      	cmp	r2, r3
 8016244:	d3e2      	bcc.n	801620c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8016246:	2300      	movs	r3, #0
}
 8016248:	4618      	mov	r0, r3
 801624a:	3724      	adds	r7, #36	@ 0x24
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016254:	b480      	push	{r7}
 8016256:	b08b      	sub	sp, #44	@ 0x2c
 8016258:	af00      	add	r7, sp, #0
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	4613      	mov	r3, r2
 8016260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801626a:	88fb      	ldrh	r3, [r7, #6]
 801626c:	089b      	lsrs	r3, r3, #2
 801626e:	b29b      	uxth	r3, r3
 8016270:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016272:	88fb      	ldrh	r3, [r7, #6]
 8016274:	f003 0303 	and.w	r3, r3, #3
 8016278:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801627a:	2300      	movs	r3, #0
 801627c:	623b      	str	r3, [r7, #32]
 801627e:	e014      	b.n	80162aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016286:	681a      	ldr	r2, [r3, #0]
 8016288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801628a:	601a      	str	r2, [r3, #0]
    pDest++;
 801628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801628e:	3301      	adds	r3, #1
 8016290:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016294:	3301      	adds	r3, #1
 8016296:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801629a:	3301      	adds	r3, #1
 801629c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162a0:	3301      	adds	r3, #1
 80162a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80162a4:	6a3b      	ldr	r3, [r7, #32]
 80162a6:	3301      	adds	r3, #1
 80162a8:	623b      	str	r3, [r7, #32]
 80162aa:	6a3a      	ldr	r2, [r7, #32]
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	429a      	cmp	r2, r3
 80162b0:	d3e6      	bcc.n	8016280 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80162b2:	8bfb      	ldrh	r3, [r7, #30]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d01e      	beq.n	80162f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80162b8:	2300      	movs	r3, #0
 80162ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80162c2:	461a      	mov	r2, r3
 80162c4:	f107 0310 	add.w	r3, r7, #16
 80162c8:	6812      	ldr	r2, [r2, #0]
 80162ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80162cc:	693a      	ldr	r2, [r7, #16]
 80162ce:	6a3b      	ldr	r3, [r7, #32]
 80162d0:	b2db      	uxtb	r3, r3
 80162d2:	00db      	lsls	r3, r3, #3
 80162d4:	fa22 f303 	lsr.w	r3, r2, r3
 80162d8:	b2da      	uxtb	r2, r3
 80162da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162dc:	701a      	strb	r2, [r3, #0]
      i++;
 80162de:	6a3b      	ldr	r3, [r7, #32]
 80162e0:	3301      	adds	r3, #1
 80162e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80162e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e6:	3301      	adds	r3, #1
 80162e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80162ea:	8bfb      	ldrh	r3, [r7, #30]
 80162ec:	3b01      	subs	r3, #1
 80162ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80162f0:	8bfb      	ldrh	r3, [r7, #30]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1ea      	bne.n	80162cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80162f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	372c      	adds	r7, #44	@ 0x2c
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016304:	b480      	push	{r7}
 8016306:	b085      	sub	sp, #20
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	785b      	ldrb	r3, [r3, #1]
 801631c:	2b01      	cmp	r3, #1
 801631e:	d12c      	bne.n	801637a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	015a      	lsls	r2, r3, #5
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	4413      	add	r3, r2
 8016328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	db12      	blt.n	8016358 <USB_EPSetStall+0x54>
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00f      	beq.n	8016358 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	015a      	lsls	r2, r3, #5
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	4413      	add	r3, r2
 8016340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	0151      	lsls	r1, r2, #5
 801634a:	68fa      	ldr	r2, [r7, #12]
 801634c:	440a      	add	r2, r1
 801634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016352:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016356:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	015a      	lsls	r2, r3, #5
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	4413      	add	r3, r2
 8016360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	68ba      	ldr	r2, [r7, #8]
 8016368:	0151      	lsls	r1, r2, #5
 801636a:	68fa      	ldr	r2, [r7, #12]
 801636c:	440a      	add	r2, r1
 801636e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016372:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016376:	6013      	str	r3, [r2, #0]
 8016378:	e02b      	b.n	80163d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	015a      	lsls	r2, r3, #5
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	4413      	add	r3, r2
 8016382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	db12      	blt.n	80163b2 <USB_EPSetStall+0xae>
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d00f      	beq.n	80163b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	015a      	lsls	r2, r3, #5
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	4413      	add	r3, r2
 801639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	68ba      	ldr	r2, [r7, #8]
 80163a2:	0151      	lsls	r1, r2, #5
 80163a4:	68fa      	ldr	r2, [r7, #12]
 80163a6:	440a      	add	r2, r1
 80163a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80163ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80163b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80163b2:	68bb      	ldr	r3, [r7, #8]
 80163b4:	015a      	lsls	r2, r3, #5
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	4413      	add	r3, r2
 80163ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	0151      	lsls	r1, r2, #5
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	440a      	add	r2, r1
 80163c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80163cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80163d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80163d2:	2300      	movs	r3, #0
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3714      	adds	r7, #20
 80163d8:	46bd      	mov	sp, r7
 80163da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163de:	4770      	bx	lr

080163e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80163e0:	b480      	push	{r7}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	785b      	ldrb	r3, [r3, #1]
 80163f8:	2b01      	cmp	r3, #1
 80163fa:	d128      	bne.n	801644e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	015a      	lsls	r2, r3, #5
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	4413      	add	r3, r2
 8016404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	68ba      	ldr	r2, [r7, #8]
 801640c:	0151      	lsls	r1, r2, #5
 801640e:	68fa      	ldr	r2, [r7, #12]
 8016410:	440a      	add	r2, r1
 8016412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016416:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801641a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	791b      	ldrb	r3, [r3, #4]
 8016420:	2b03      	cmp	r3, #3
 8016422:	d003      	beq.n	801642c <USB_EPClearStall+0x4c>
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	791b      	ldrb	r3, [r3, #4]
 8016428:	2b02      	cmp	r3, #2
 801642a:	d138      	bne.n	801649e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	015a      	lsls	r2, r3, #5
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	4413      	add	r3, r2
 8016434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	68ba      	ldr	r2, [r7, #8]
 801643c:	0151      	lsls	r1, r2, #5
 801643e:	68fa      	ldr	r2, [r7, #12]
 8016440:	440a      	add	r2, r1
 8016442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801644a:	6013      	str	r3, [r2, #0]
 801644c:	e027      	b.n	801649e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	015a      	lsls	r2, r3, #5
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	4413      	add	r3, r2
 8016456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	0151      	lsls	r1, r2, #5
 8016460:	68fa      	ldr	r2, [r7, #12]
 8016462:	440a      	add	r2, r1
 8016464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016468:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801646c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	791b      	ldrb	r3, [r3, #4]
 8016472:	2b03      	cmp	r3, #3
 8016474:	d003      	beq.n	801647e <USB_EPClearStall+0x9e>
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	791b      	ldrb	r3, [r3, #4]
 801647a:	2b02      	cmp	r3, #2
 801647c:	d10f      	bne.n	801649e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	015a      	lsls	r2, r3, #5
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	4413      	add	r3, r2
 8016486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68ba      	ldr	r2, [r7, #8]
 801648e:	0151      	lsls	r1, r2, #5
 8016490:	68fa      	ldr	r2, [r7, #12]
 8016492:	440a      	add	r2, r1
 8016494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801649c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801649e:	2300      	movs	r3, #0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3714      	adds	r7, #20
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr

080164ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80164ac:	b480      	push	{r7}
 80164ae:	b085      	sub	sp, #20
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
 80164b4:	460b      	mov	r3, r1
 80164b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	68fa      	ldr	r2, [r7, #12]
 80164c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80164ca:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80164ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	78fb      	ldrb	r3, [r7, #3]
 80164da:	011b      	lsls	r3, r3, #4
 80164dc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80164e0:	68f9      	ldr	r1, [r7, #12]
 80164e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80164e6:	4313      	orrs	r3, r2
 80164e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80164ea:	2300      	movs	r3, #0
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3714      	adds	r7, #20
 80164f0:	46bd      	mov	sp, r7
 80164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f6:	4770      	bx	lr

080164f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b085      	sub	sp, #20
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	68fa      	ldr	r2, [r7, #12]
 801650e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016512:	f023 0303 	bic.w	r3, r3, #3
 8016516:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801651e:	685b      	ldr	r3, [r3, #4]
 8016520:	68fa      	ldr	r2, [r7, #12]
 8016522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016526:	f023 0302 	bic.w	r3, r3, #2
 801652a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801652c:	2300      	movs	r3, #0
}
 801652e:	4618      	mov	r0, r3
 8016530:	3714      	adds	r7, #20
 8016532:	46bd      	mov	sp, r7
 8016534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016538:	4770      	bx	lr

0801653a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801653a:	b480      	push	{r7}
 801653c:	b085      	sub	sp, #20
 801653e:	af00      	add	r7, sp, #0
 8016540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	68fa      	ldr	r2, [r7, #12]
 8016550:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016554:	f023 0303 	bic.w	r3, r3, #3
 8016558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	68fa      	ldr	r2, [r7, #12]
 8016564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016568:	f043 0302 	orr.w	r3, r3, #2
 801656c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801656e:	2300      	movs	r3, #0
}
 8016570:	4618      	mov	r0, r3
 8016572:	3714      	adds	r7, #20
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr

0801657c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	695b      	ldr	r3, [r3, #20]
 8016588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	699b      	ldr	r3, [r3, #24]
 801658e:	68fa      	ldr	r2, [r7, #12]
 8016590:	4013      	ands	r3, r2
 8016592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016594:	68fb      	ldr	r3, [r7, #12]
}
 8016596:	4618      	mov	r0, r3
 8016598:	3714      	adds	r7, #20
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr

080165a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80165a2:	b480      	push	{r7}
 80165a4:	b085      	sub	sp, #20
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165b4:	699b      	ldr	r3, [r3, #24]
 80165b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165be:	69db      	ldr	r3, [r3, #28]
 80165c0:	68ba      	ldr	r2, [r7, #8]
 80165c2:	4013      	ands	r3, r2
 80165c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	0c1b      	lsrs	r3, r3, #16
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3714      	adds	r7, #20
 80165ce:	46bd      	mov	sp, r7
 80165d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d4:	4770      	bx	lr

080165d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80165d6:	b480      	push	{r7}
 80165d8:	b085      	sub	sp, #20
 80165da:	af00      	add	r7, sp, #0
 80165dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165e8:	699b      	ldr	r3, [r3, #24]
 80165ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165f2:	69db      	ldr	r3, [r3, #28]
 80165f4:	68ba      	ldr	r2, [r7, #8]
 80165f6:	4013      	ands	r3, r2
 80165f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	b29b      	uxth	r3, r3
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3714      	adds	r7, #20
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr

0801660a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801660a:	b480      	push	{r7}
 801660c:	b085      	sub	sp, #20
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801661a:	78fb      	ldrb	r3, [r7, #3]
 801661c:	015a      	lsls	r2, r3, #5
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	4413      	add	r3, r2
 8016622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016626:	689b      	ldr	r3, [r3, #8]
 8016628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016630:	695b      	ldr	r3, [r3, #20]
 8016632:	68ba      	ldr	r2, [r7, #8]
 8016634:	4013      	ands	r3, r2
 8016636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016638:	68bb      	ldr	r3, [r7, #8]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3714      	adds	r7, #20
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr

08016646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016646:	b480      	push	{r7}
 8016648:	b087      	sub	sp, #28
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
 801664e:	460b      	mov	r3, r1
 8016650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016656:	697b      	ldr	r3, [r7, #20]
 8016658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801665c:	691b      	ldr	r3, [r3, #16]
 801665e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016660:	697b      	ldr	r3, [r7, #20]
 8016662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801666a:	78fb      	ldrb	r3, [r7, #3]
 801666c:	f003 030f 	and.w	r3, r3, #15
 8016670:	68fa      	ldr	r2, [r7, #12]
 8016672:	fa22 f303 	lsr.w	r3, r2, r3
 8016676:	01db      	lsls	r3, r3, #7
 8016678:	b2db      	uxtb	r3, r3
 801667a:	693a      	ldr	r2, [r7, #16]
 801667c:	4313      	orrs	r3, r2
 801667e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016680:	78fb      	ldrb	r3, [r7, #3]
 8016682:	015a      	lsls	r2, r3, #5
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	4413      	add	r3, r2
 8016688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801668c:	689b      	ldr	r3, [r3, #8]
 801668e:	693a      	ldr	r2, [r7, #16]
 8016690:	4013      	ands	r3, r2
 8016692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016694:	68bb      	ldr	r3, [r7, #8]
}
 8016696:	4618      	mov	r0, r3
 8016698:	371c      	adds	r7, #28
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr

080166a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	695b      	ldr	r3, [r3, #20]
 80166ae:	f003 0301 	and.w	r3, r3, #1
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
	...

080166c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80166c0:	b480      	push	{r7}
 80166c2:	b085      	sub	sp, #20
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166d2:	681a      	ldr	r2, [r3, #0]
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166da:	4619      	mov	r1, r3
 80166dc:	4b09      	ldr	r3, [pc, #36]	@ (8016704 <USB_ActivateSetup+0x44>)
 80166de:	4013      	ands	r3, r2
 80166e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	68fa      	ldr	r2, [r7, #12]
 80166ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80166f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80166f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3714      	adds	r7, #20
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	fffff800 	.word	0xfffff800

08016708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8016708:	b480      	push	{r7}
 801670a:	b087      	sub	sp, #28
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	460b      	mov	r3, r1
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	333c      	adds	r3, #60	@ 0x3c
 801671e:	3304      	adds	r3, #4
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016724:	693b      	ldr	r3, [r7, #16]
 8016726:	4a26      	ldr	r2, [pc, #152]	@ (80167c0 <USB_EP0_OutStart+0xb8>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d90a      	bls.n	8016742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801673c:	d101      	bne.n	8016742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801673e:	2300      	movs	r3, #0
 8016740:	e037      	b.n	80167b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016748:	461a      	mov	r2, r3
 801674a:	2300      	movs	r3, #0
 801674c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801674e:	697b      	ldr	r3, [r7, #20]
 8016750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016754:	691b      	ldr	r3, [r3, #16]
 8016756:	697a      	ldr	r2, [r7, #20]
 8016758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801675c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016768:	691b      	ldr	r3, [r3, #16]
 801676a:	697a      	ldr	r2, [r7, #20]
 801676c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016770:	f043 0318 	orr.w	r3, r3, #24
 8016774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	697a      	ldr	r2, [r7, #20]
 8016780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016784:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8016788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801678a:	7afb      	ldrb	r3, [r7, #11]
 801678c:	2b01      	cmp	r3, #1
 801678e:	d10f      	bne.n	80167b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016796:	461a      	mov	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	697a      	ldr	r2, [r7, #20]
 80167a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80167aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80167ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80167b0:	2300      	movs	r3, #0
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	371c      	adds	r7, #28
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	4f54300a 	.word	0x4f54300a

080167c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80167cc:	2300      	movs	r3, #0
 80167ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	3301      	adds	r3, #1
 80167d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80167dc:	d901      	bls.n	80167e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80167de:	2303      	movs	r3, #3
 80167e0:	e01b      	b.n	801681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	691b      	ldr	r3, [r3, #16]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	daf2      	bge.n	80167d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80167ea:	2300      	movs	r3, #0
 80167ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	f043 0201 	orr.w	r2, r3, #1
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	3301      	adds	r3, #1
 80167fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016806:	d901      	bls.n	801680c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016808:	2303      	movs	r3, #3
 801680a:	e006      	b.n	801681a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	691b      	ldr	r3, [r3, #16]
 8016810:	f003 0301 	and.w	r3, r3, #1
 8016814:	2b01      	cmp	r3, #1
 8016816:	d0f0      	beq.n	80167fa <USB_CoreReset+0x36>

  return HAL_OK;
 8016818:	2300      	movs	r3, #0
}
 801681a:	4618      	mov	r0, r3
 801681c:	3714      	adds	r7, #20
 801681e:	46bd      	mov	sp, r7
 8016820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016824:	4770      	bx	lr
	...

08016828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b084      	sub	sp, #16
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
 8016830:	460b      	mov	r3, r1
 8016832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016834:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8016838:	f002 fcca 	bl	80191d0 <USBD_static_malloc>
 801683c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d109      	bne.n	8016858 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	32b0      	adds	r2, #176	@ 0xb0
 801684e:	2100      	movs	r1, #0
 8016850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8016854:	2302      	movs	r3, #2
 8016856:	e0d4      	b.n	8016a02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8016858:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801685c:	2100      	movs	r1, #0
 801685e:	68f8      	ldr	r0, [r7, #12]
 8016860:	f004 f89f 	bl	801a9a2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	32b0      	adds	r2, #176	@ 0xb0
 801686e:	68f9      	ldr	r1, [r7, #12]
 8016870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	32b0      	adds	r2, #176	@ 0xb0
 801687e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	7c1b      	ldrb	r3, [r3, #16]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d138      	bne.n	8016902 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016890:	4b5e      	ldr	r3, [pc, #376]	@ (8016a0c <USBD_CDC_Init+0x1e4>)
 8016892:	7819      	ldrb	r1, [r3, #0]
 8016894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016898:	2202      	movs	r2, #2
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f002 fb75 	bl	8018f8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80168a0:	4b5a      	ldr	r3, [pc, #360]	@ (8016a0c <USBD_CDC_Init+0x1e4>)
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	f003 020f 	and.w	r2, r3, #15
 80168a8:	6879      	ldr	r1, [r7, #4]
 80168aa:	4613      	mov	r3, r2
 80168ac:	009b      	lsls	r3, r3, #2
 80168ae:	4413      	add	r3, r2
 80168b0:	009b      	lsls	r3, r3, #2
 80168b2:	440b      	add	r3, r1
 80168b4:	3324      	adds	r3, #36	@ 0x24
 80168b6:	2201      	movs	r2, #1
 80168b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80168ba:	4b55      	ldr	r3, [pc, #340]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 80168bc:	7819      	ldrb	r1, [r3, #0]
 80168be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80168c2:	2202      	movs	r2, #2
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f002 fb60 	bl	8018f8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80168ca:	4b51      	ldr	r3, [pc, #324]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	f003 020f 	and.w	r2, r3, #15
 80168d2:	6879      	ldr	r1, [r7, #4]
 80168d4:	4613      	mov	r3, r2
 80168d6:	009b      	lsls	r3, r3, #2
 80168d8:	4413      	add	r3, r2
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	440b      	add	r3, r1
 80168de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80168e2:	2201      	movs	r2, #1
 80168e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80168e6:	4b4b      	ldr	r3, [pc, #300]	@ (8016a14 <USBD_CDC_Init+0x1ec>)
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	f003 020f 	and.w	r2, r3, #15
 80168ee:	6879      	ldr	r1, [r7, #4]
 80168f0:	4613      	mov	r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	4413      	add	r3, r2
 80168f6:	009b      	lsls	r3, r3, #2
 80168f8:	440b      	add	r3, r1
 80168fa:	3326      	adds	r3, #38	@ 0x26
 80168fc:	2210      	movs	r2, #16
 80168fe:	801a      	strh	r2, [r3, #0]
 8016900:	e035      	b.n	801696e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016902:	4b42      	ldr	r3, [pc, #264]	@ (8016a0c <USBD_CDC_Init+0x1e4>)
 8016904:	7819      	ldrb	r1, [r3, #0]
 8016906:	2340      	movs	r3, #64	@ 0x40
 8016908:	2202      	movs	r2, #2
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f002 fb3d 	bl	8018f8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016910:	4b3e      	ldr	r3, [pc, #248]	@ (8016a0c <USBD_CDC_Init+0x1e4>)
 8016912:	781b      	ldrb	r3, [r3, #0]
 8016914:	f003 020f 	and.w	r2, r3, #15
 8016918:	6879      	ldr	r1, [r7, #4]
 801691a:	4613      	mov	r3, r2
 801691c:	009b      	lsls	r3, r3, #2
 801691e:	4413      	add	r3, r2
 8016920:	009b      	lsls	r3, r3, #2
 8016922:	440b      	add	r3, r1
 8016924:	3324      	adds	r3, #36	@ 0x24
 8016926:	2201      	movs	r2, #1
 8016928:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801692a:	4b39      	ldr	r3, [pc, #228]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 801692c:	7819      	ldrb	r1, [r3, #0]
 801692e:	2340      	movs	r3, #64	@ 0x40
 8016930:	2202      	movs	r2, #2
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f002 fb29 	bl	8018f8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016938:	4b35      	ldr	r3, [pc, #212]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	f003 020f 	and.w	r2, r3, #15
 8016940:	6879      	ldr	r1, [r7, #4]
 8016942:	4613      	mov	r3, r2
 8016944:	009b      	lsls	r3, r3, #2
 8016946:	4413      	add	r3, r2
 8016948:	009b      	lsls	r3, r3, #2
 801694a:	440b      	add	r3, r1
 801694c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016950:	2201      	movs	r2, #1
 8016952:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016954:	4b2f      	ldr	r3, [pc, #188]	@ (8016a14 <USBD_CDC_Init+0x1ec>)
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	f003 020f 	and.w	r2, r3, #15
 801695c:	6879      	ldr	r1, [r7, #4]
 801695e:	4613      	mov	r3, r2
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	4413      	add	r3, r2
 8016964:	009b      	lsls	r3, r3, #2
 8016966:	440b      	add	r3, r1
 8016968:	3326      	adds	r3, #38	@ 0x26
 801696a:	2210      	movs	r2, #16
 801696c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801696e:	4b29      	ldr	r3, [pc, #164]	@ (8016a14 <USBD_CDC_Init+0x1ec>)
 8016970:	7819      	ldrb	r1, [r3, #0]
 8016972:	2308      	movs	r3, #8
 8016974:	2203      	movs	r2, #3
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f002 fb07 	bl	8018f8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801697c:	4b25      	ldr	r3, [pc, #148]	@ (8016a14 <USBD_CDC_Init+0x1ec>)
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	f003 020f 	and.w	r2, r3, #15
 8016984:	6879      	ldr	r1, [r7, #4]
 8016986:	4613      	mov	r3, r2
 8016988:	009b      	lsls	r3, r3, #2
 801698a:	4413      	add	r3, r2
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	440b      	add	r3, r1
 8016990:	3324      	adds	r3, #36	@ 0x24
 8016992:	2201      	movs	r2, #1
 8016994:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2200      	movs	r2, #0
 801699a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	33b0      	adds	r3, #176	@ 0xb0
 80169a8:	009b      	lsls	r3, r3, #2
 80169aa:	4413      	add	r3, r2
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	2200      	movs	r2, #0
 80169b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2200      	movs	r2, #0
 80169be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d101      	bne.n	80169d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80169cc:	2302      	movs	r3, #2
 80169ce:	e018      	b.n	8016a02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	7c1b      	ldrb	r3, [r3, #16]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d10a      	bne.n	80169ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80169d8:	4b0d      	ldr	r3, [pc, #52]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 80169da:	7819      	ldrb	r1, [r3, #0]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80169e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f002 fbbe 	bl	8019168 <USBD_LL_PrepareReceive>
 80169ec:	e008      	b.n	8016a00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80169ee:	4b08      	ldr	r3, [pc, #32]	@ (8016a10 <USBD_CDC_Init+0x1e8>)
 80169f0:	7819      	ldrb	r1, [r3, #0]
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80169f8:	2340      	movs	r3, #64	@ 0x40
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f002 fbb4 	bl	8019168 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3710      	adds	r7, #16
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	240000c7 	.word	0x240000c7
 8016a10:	240000c8 	.word	0x240000c8
 8016a14:	240000c9 	.word	0x240000c9

08016a18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b082      	sub	sp, #8
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	460b      	mov	r3, r1
 8016a22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016a24:	4b3a      	ldr	r3, [pc, #232]	@ (8016b10 <USBD_CDC_DeInit+0xf8>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	4619      	mov	r1, r3
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f002 fad3 	bl	8018fd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016a30:	4b37      	ldr	r3, [pc, #220]	@ (8016b10 <USBD_CDC_DeInit+0xf8>)
 8016a32:	781b      	ldrb	r3, [r3, #0]
 8016a34:	f003 020f 	and.w	r2, r3, #15
 8016a38:	6879      	ldr	r1, [r7, #4]
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	4413      	add	r3, r2
 8016a40:	009b      	lsls	r3, r3, #2
 8016a42:	440b      	add	r3, r1
 8016a44:	3324      	adds	r3, #36	@ 0x24
 8016a46:	2200      	movs	r2, #0
 8016a48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8016a4a:	4b32      	ldr	r3, [pc, #200]	@ (8016b14 <USBD_CDC_DeInit+0xfc>)
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	4619      	mov	r1, r3
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f002 fac0 	bl	8018fd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8016a56:	4b2f      	ldr	r3, [pc, #188]	@ (8016b14 <USBD_CDC_DeInit+0xfc>)
 8016a58:	781b      	ldrb	r3, [r3, #0]
 8016a5a:	f003 020f 	and.w	r2, r3, #15
 8016a5e:	6879      	ldr	r1, [r7, #4]
 8016a60:	4613      	mov	r3, r2
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	4413      	add	r3, r2
 8016a66:	009b      	lsls	r3, r3, #2
 8016a68:	440b      	add	r3, r1
 8016a6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016a6e:	2200      	movs	r2, #0
 8016a70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8016a72:	4b29      	ldr	r3, [pc, #164]	@ (8016b18 <USBD_CDC_DeInit+0x100>)
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	4619      	mov	r1, r3
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f002 faac 	bl	8018fd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8016a7e:	4b26      	ldr	r3, [pc, #152]	@ (8016b18 <USBD_CDC_DeInit+0x100>)
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	f003 020f 	and.w	r2, r3, #15
 8016a86:	6879      	ldr	r1, [r7, #4]
 8016a88:	4613      	mov	r3, r2
 8016a8a:	009b      	lsls	r3, r3, #2
 8016a8c:	4413      	add	r3, r2
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	440b      	add	r3, r1
 8016a92:	3324      	adds	r3, #36	@ 0x24
 8016a94:	2200      	movs	r2, #0
 8016a96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8016a98:	4b1f      	ldr	r3, [pc, #124]	@ (8016b18 <USBD_CDC_DeInit+0x100>)
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	f003 020f 	and.w	r2, r3, #15
 8016aa0:	6879      	ldr	r1, [r7, #4]
 8016aa2:	4613      	mov	r3, r2
 8016aa4:	009b      	lsls	r3, r3, #2
 8016aa6:	4413      	add	r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	440b      	add	r3, r1
 8016aac:	3326      	adds	r3, #38	@ 0x26
 8016aae:	2200      	movs	r2, #0
 8016ab0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	32b0      	adds	r2, #176	@ 0xb0
 8016abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d01f      	beq.n	8016b04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016aca:	687a      	ldr	r2, [r7, #4]
 8016acc:	33b0      	adds	r3, #176	@ 0xb0
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	4413      	add	r3, r2
 8016ad2:	685b      	ldr	r3, [r3, #4]
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	32b0      	adds	r2, #176	@ 0xb0
 8016ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f002 fb80 	bl	80191ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	32b0      	adds	r2, #176	@ 0xb0
 8016af6:	2100      	movs	r1, #0
 8016af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2200      	movs	r2, #0
 8016b00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016b04:	2300      	movs	r3, #0
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3708      	adds	r7, #8
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	240000c7 	.word	0x240000c7
 8016b14:	240000c8 	.word	0x240000c8
 8016b18:	240000c9 	.word	0x240000c9

08016b1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b086      	sub	sp, #24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	32b0      	adds	r2, #176	@ 0xb0
 8016b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016b36:	2300      	movs	r3, #0
 8016b38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d101      	bne.n	8016b4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016b48:	2303      	movs	r3, #3
 8016b4a:	e0bf      	b.n	8016ccc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d050      	beq.n	8016bfa <USBD_CDC_Setup+0xde>
 8016b58:	2b20      	cmp	r3, #32
 8016b5a:	f040 80af 	bne.w	8016cbc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	88db      	ldrh	r3, [r3, #6]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d03a      	beq.n	8016bdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	781b      	ldrb	r3, [r3, #0]
 8016b6a:	b25b      	sxtb	r3, r3
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	da1b      	bge.n	8016ba8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016b76:	687a      	ldr	r2, [r7, #4]
 8016b78:	33b0      	adds	r3, #176	@ 0xb0
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	4413      	add	r3, r2
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	689b      	ldr	r3, [r3, #8]
 8016b82:	683a      	ldr	r2, [r7, #0]
 8016b84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8016b86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016b88:	683a      	ldr	r2, [r7, #0]
 8016b8a:	88d2      	ldrh	r2, [r2, #6]
 8016b8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016b8e:	683b      	ldr	r3, [r7, #0]
 8016b90:	88db      	ldrh	r3, [r3, #6]
 8016b92:	2b07      	cmp	r3, #7
 8016b94:	bf28      	it	cs
 8016b96:	2307      	movcs	r3, #7
 8016b98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	89fa      	ldrh	r2, [r7, #14]
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f001 fdbd 	bl	8018720 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016ba6:	e090      	b.n	8016cca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	785a      	ldrb	r2, [r3, #1]
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	88db      	ldrh	r3, [r3, #6]
 8016bb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8016bb8:	d803      	bhi.n	8016bc2 <USBD_CDC_Setup+0xa6>
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	88db      	ldrh	r3, [r3, #6]
 8016bbe:	b2da      	uxtb	r2, r3
 8016bc0:	e000      	b.n	8016bc4 <USBD_CDC_Setup+0xa8>
 8016bc2:	2240      	movs	r2, #64	@ 0x40
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016bca:	6939      	ldr	r1, [r7, #16]
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f001 fdcf 	bl	8018778 <USBD_CtlPrepareRx>
      break;
 8016bda:	e076      	b.n	8016cca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	33b0      	adds	r3, #176	@ 0xb0
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4413      	add	r3, r2
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	689b      	ldr	r3, [r3, #8]
 8016bee:	683a      	ldr	r2, [r7, #0]
 8016bf0:	7850      	ldrb	r0, [r2, #1]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	4798      	blx	r3
      break;
 8016bf8:	e067      	b.n	8016cca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	785b      	ldrb	r3, [r3, #1]
 8016bfe:	2b0b      	cmp	r3, #11
 8016c00:	d851      	bhi.n	8016ca6 <USBD_CDC_Setup+0x18a>
 8016c02:	a201      	add	r2, pc, #4	@ (adr r2, 8016c08 <USBD_CDC_Setup+0xec>)
 8016c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c08:	08016c39 	.word	0x08016c39
 8016c0c:	08016cb5 	.word	0x08016cb5
 8016c10:	08016ca7 	.word	0x08016ca7
 8016c14:	08016ca7 	.word	0x08016ca7
 8016c18:	08016ca7 	.word	0x08016ca7
 8016c1c:	08016ca7 	.word	0x08016ca7
 8016c20:	08016ca7 	.word	0x08016ca7
 8016c24:	08016ca7 	.word	0x08016ca7
 8016c28:	08016ca7 	.word	0x08016ca7
 8016c2c:	08016ca7 	.word	0x08016ca7
 8016c30:	08016c63 	.word	0x08016c63
 8016c34:	08016c8d 	.word	0x08016c8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c3e:	b2db      	uxtb	r3, r3
 8016c40:	2b03      	cmp	r3, #3
 8016c42:	d107      	bne.n	8016c54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016c44:	f107 030a 	add.w	r3, r7, #10
 8016c48:	2202      	movs	r2, #2
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f001 fd67 	bl	8018720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016c52:	e032      	b.n	8016cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016c54:	6839      	ldr	r1, [r7, #0]
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f001 fce5 	bl	8018626 <USBD_CtlError>
            ret = USBD_FAIL;
 8016c5c:	2303      	movs	r3, #3
 8016c5e:	75fb      	strb	r3, [r7, #23]
          break;
 8016c60:	e02b      	b.n	8016cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c68:	b2db      	uxtb	r3, r3
 8016c6a:	2b03      	cmp	r3, #3
 8016c6c:	d107      	bne.n	8016c7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016c6e:	f107 030d 	add.w	r3, r7, #13
 8016c72:	2201      	movs	r2, #1
 8016c74:	4619      	mov	r1, r3
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f001 fd52 	bl	8018720 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016c7c:	e01d      	b.n	8016cba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f001 fcd0 	bl	8018626 <USBD_CtlError>
            ret = USBD_FAIL;
 8016c86:	2303      	movs	r3, #3
 8016c88:	75fb      	strb	r3, [r7, #23]
          break;
 8016c8a:	e016      	b.n	8016cba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c92:	b2db      	uxtb	r3, r3
 8016c94:	2b03      	cmp	r3, #3
 8016c96:	d00f      	beq.n	8016cb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016c98:	6839      	ldr	r1, [r7, #0]
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f001 fcc3 	bl	8018626 <USBD_CtlError>
            ret = USBD_FAIL;
 8016ca0:	2303      	movs	r3, #3
 8016ca2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016ca4:	e008      	b.n	8016cb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016ca6:	6839      	ldr	r1, [r7, #0]
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f001 fcbc 	bl	8018626 <USBD_CtlError>
          ret = USBD_FAIL;
 8016cae:	2303      	movs	r3, #3
 8016cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8016cb2:	e002      	b.n	8016cba <USBD_CDC_Setup+0x19e>
          break;
 8016cb4:	bf00      	nop
 8016cb6:	e008      	b.n	8016cca <USBD_CDC_Setup+0x1ae>
          break;
 8016cb8:	bf00      	nop
      }
      break;
 8016cba:	e006      	b.n	8016cca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016cbc:	6839      	ldr	r1, [r7, #0]
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f001 fcb1 	bl	8018626 <USBD_CtlError>
      ret = USBD_FAIL;
 8016cc4:	2303      	movs	r3, #3
 8016cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8016cc8:	bf00      	nop
  }

  return (uint8_t)ret;
 8016cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	3718      	adds	r7, #24
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	bd80      	pop	{r7, pc}

08016cd4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b084      	sub	sp, #16
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
 8016cdc:	460b      	mov	r3, r1
 8016cde:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	32b0      	adds	r2, #176	@ 0xb0
 8016cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d101      	bne.n	8016cfe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016cfa:	2303      	movs	r3, #3
 8016cfc:	e065      	b.n	8016dca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	32b0      	adds	r2, #176	@ 0xb0
 8016d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016d0e:	78fb      	ldrb	r3, [r7, #3]
 8016d10:	f003 020f 	and.w	r2, r3, #15
 8016d14:	6879      	ldr	r1, [r7, #4]
 8016d16:	4613      	mov	r3, r2
 8016d18:	009b      	lsls	r3, r3, #2
 8016d1a:	4413      	add	r3, r2
 8016d1c:	009b      	lsls	r3, r3, #2
 8016d1e:	440b      	add	r3, r1
 8016d20:	3318      	adds	r3, #24
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d02f      	beq.n	8016d88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016d28:	78fb      	ldrb	r3, [r7, #3]
 8016d2a:	f003 020f 	and.w	r2, r3, #15
 8016d2e:	6879      	ldr	r1, [r7, #4]
 8016d30:	4613      	mov	r3, r2
 8016d32:	009b      	lsls	r3, r3, #2
 8016d34:	4413      	add	r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	440b      	add	r3, r1
 8016d3a:	3318      	adds	r3, #24
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	78fb      	ldrb	r3, [r7, #3]
 8016d40:	f003 010f 	and.w	r1, r3, #15
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	460b      	mov	r3, r1
 8016d48:	00db      	lsls	r3, r3, #3
 8016d4a:	440b      	add	r3, r1
 8016d4c:	009b      	lsls	r3, r3, #2
 8016d4e:	4403      	add	r3, r0
 8016d50:	331c      	adds	r3, #28
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	fbb2 f1f3 	udiv	r1, r2, r3
 8016d58:	fb01 f303 	mul.w	r3, r1, r3
 8016d5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d112      	bne.n	8016d88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8016d62:	78fb      	ldrb	r3, [r7, #3]
 8016d64:	f003 020f 	and.w	r2, r3, #15
 8016d68:	6879      	ldr	r1, [r7, #4]
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	009b      	lsls	r3, r3, #2
 8016d6e:	4413      	add	r3, r2
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	440b      	add	r3, r1
 8016d74:	3318      	adds	r3, #24
 8016d76:	2200      	movs	r2, #0
 8016d78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016d7a:	78f9      	ldrb	r1, [r7, #3]
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	2200      	movs	r2, #0
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f002 f9d0 	bl	8019126 <USBD_LL_Transmit>
 8016d86:	e01f      	b.n	8016dc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	33b0      	adds	r3, #176	@ 0xb0
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	4413      	add	r3, r2
 8016d9e:	685b      	ldr	r3, [r3, #4]
 8016da0:	691b      	ldr	r3, [r3, #16]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d010      	beq.n	8016dc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	33b0      	adds	r3, #176	@ 0xb0
 8016db0:	009b      	lsls	r3, r3, #2
 8016db2:	4413      	add	r3, r2
 8016db4:	685b      	ldr	r3, [r3, #4]
 8016db6:	691b      	ldr	r3, [r3, #16]
 8016db8:	68ba      	ldr	r2, [r7, #8]
 8016dba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016dbe:	68ba      	ldr	r2, [r7, #8]
 8016dc0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016dc4:	78fa      	ldrb	r2, [r7, #3]
 8016dc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016dc8:	2300      	movs	r3, #0
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3710      	adds	r7, #16
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}

08016dd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016dd2:	b580      	push	{r7, lr}
 8016dd4:	b084      	sub	sp, #16
 8016dd6:	af00      	add	r7, sp, #0
 8016dd8:	6078      	str	r0, [r7, #4]
 8016dda:	460b      	mov	r3, r1
 8016ddc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	32b0      	adds	r2, #176	@ 0xb0
 8016de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	32b0      	adds	r2, #176	@ 0xb0
 8016df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d101      	bne.n	8016e04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016e00:	2303      	movs	r3, #3
 8016e02:	e01a      	b.n	8016e3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016e04:	78fb      	ldrb	r3, [r7, #3]
 8016e06:	4619      	mov	r1, r3
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f002 f9ce 	bl	80191aa <USBD_LL_GetRxDataSize>
 8016e0e:	4602      	mov	r2, r0
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	33b0      	adds	r3, #176	@ 0xb0
 8016e20:	009b      	lsls	r3, r3, #2
 8016e22:	4413      	add	r3, r2
 8016e24:	685b      	ldr	r3, [r3, #4]
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016e2e:	68fa      	ldr	r2, [r7, #12]
 8016e30:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016e34:	4611      	mov	r1, r2
 8016e36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016e38:	2300      	movs	r3, #0
}
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	3710      	adds	r7, #16
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	bd80      	pop	{r7, pc}

08016e42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016e42:	b580      	push	{r7, lr}
 8016e44:	b084      	sub	sp, #16
 8016e46:	af00      	add	r7, sp, #0
 8016e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	32b0      	adds	r2, #176	@ 0xb0
 8016e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d101      	bne.n	8016e64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016e60:	2303      	movs	r3, #3
 8016e62:	e024      	b.n	8016eae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e6a:	687a      	ldr	r2, [r7, #4]
 8016e6c:	33b0      	adds	r3, #176	@ 0xb0
 8016e6e:	009b      	lsls	r3, r3, #2
 8016e70:	4413      	add	r3, r2
 8016e72:	685b      	ldr	r3, [r3, #4]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d019      	beq.n	8016eac <USBD_CDC_EP0_RxReady+0x6a>
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016e7e:	2bff      	cmp	r3, #255	@ 0xff
 8016e80:	d014      	beq.n	8016eac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e88:	687a      	ldr	r2, [r7, #4]
 8016e8a:	33b0      	adds	r3, #176	@ 0xb0
 8016e8c:	009b      	lsls	r3, r3, #2
 8016e8e:	4413      	add	r3, r2
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	68fa      	ldr	r2, [r7, #12]
 8016e96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016e9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016e9c:	68fa      	ldr	r2, [r7, #12]
 8016e9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016ea2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	22ff      	movs	r2, #255	@ 0xff
 8016ea8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016eac:	2300      	movs	r3, #0
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3710      	adds	r7, #16
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
	...

08016eb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b086      	sub	sp, #24
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016ec0:	2182      	movs	r1, #130	@ 0x82
 8016ec2:	4818      	ldr	r0, [pc, #96]	@ (8016f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016ec4:	f000 fd4f 	bl	8017966 <USBD_GetEpDesc>
 8016ec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016eca:	2101      	movs	r1, #1
 8016ecc:	4815      	ldr	r0, [pc, #84]	@ (8016f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016ece:	f000 fd4a 	bl	8017966 <USBD_GetEpDesc>
 8016ed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016ed4:	2181      	movs	r1, #129	@ 0x81
 8016ed6:	4813      	ldr	r0, [pc, #76]	@ (8016f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016ed8:	f000 fd45 	bl	8017966 <USBD_GetEpDesc>
 8016edc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d002      	beq.n	8016eea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	2210      	movs	r2, #16
 8016ee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d006      	beq.n	8016efe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016ef8:	711a      	strb	r2, [r3, #4]
 8016efa:	2200      	movs	r2, #0
 8016efc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d006      	beq.n	8016f12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2200      	movs	r2, #0
 8016f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016f0c:	711a      	strb	r2, [r3, #4]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2243      	movs	r2, #67	@ 0x43
 8016f16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016f18:	4b02      	ldr	r3, [pc, #8]	@ (8016f24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3718      	adds	r7, #24
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	24000084 	.word	0x24000084

08016f28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b086      	sub	sp, #24
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016f30:	2182      	movs	r1, #130	@ 0x82
 8016f32:	4818      	ldr	r0, [pc, #96]	@ (8016f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016f34:	f000 fd17 	bl	8017966 <USBD_GetEpDesc>
 8016f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016f3a:	2101      	movs	r1, #1
 8016f3c:	4815      	ldr	r0, [pc, #84]	@ (8016f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016f3e:	f000 fd12 	bl	8017966 <USBD_GetEpDesc>
 8016f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016f44:	2181      	movs	r1, #129	@ 0x81
 8016f46:	4813      	ldr	r0, [pc, #76]	@ (8016f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016f48:	f000 fd0d 	bl	8017966 <USBD_GetEpDesc>
 8016f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016f4e:	697b      	ldr	r3, [r7, #20]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d002      	beq.n	8016f5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	2210      	movs	r2, #16
 8016f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d006      	beq.n	8016f6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	2200      	movs	r2, #0
 8016f64:	711a      	strb	r2, [r3, #4]
 8016f66:	2200      	movs	r2, #0
 8016f68:	f042 0202 	orr.w	r2, r2, #2
 8016f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d006      	beq.n	8016f82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	2200      	movs	r2, #0
 8016f78:	711a      	strb	r2, [r3, #4]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	f042 0202 	orr.w	r2, r2, #2
 8016f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2243      	movs	r2, #67	@ 0x43
 8016f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016f88:	4b02      	ldr	r3, [pc, #8]	@ (8016f94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3718      	adds	r7, #24
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	24000084 	.word	0x24000084

08016f98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016fa0:	2182      	movs	r1, #130	@ 0x82
 8016fa2:	4818      	ldr	r0, [pc, #96]	@ (8017004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016fa4:	f000 fcdf 	bl	8017966 <USBD_GetEpDesc>
 8016fa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016faa:	2101      	movs	r1, #1
 8016fac:	4815      	ldr	r0, [pc, #84]	@ (8017004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016fae:	f000 fcda 	bl	8017966 <USBD_GetEpDesc>
 8016fb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016fb4:	2181      	movs	r1, #129	@ 0x81
 8016fb6:	4813      	ldr	r0, [pc, #76]	@ (8017004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016fb8:	f000 fcd5 	bl	8017966 <USBD_GetEpDesc>
 8016fbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d002      	beq.n	8016fca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	2210      	movs	r2, #16
 8016fc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d006      	beq.n	8016fde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016fd8:	711a      	strb	r2, [r3, #4]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d006      	beq.n	8016ff2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016fec:	711a      	strb	r2, [r3, #4]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2243      	movs	r2, #67	@ 0x43
 8016ff6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016ff8:	4b02      	ldr	r3, [pc, #8]	@ (8017004 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3718      	adds	r7, #24
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
 8017002:	bf00      	nop
 8017004:	24000084 	.word	0x24000084

08017008 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	220a      	movs	r2, #10
 8017014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8017016:	4b03      	ldr	r3, [pc, #12]	@ (8017024 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8017018:	4618      	mov	r0, r3
 801701a:	370c      	adds	r7, #12
 801701c:	46bd      	mov	sp, r7
 801701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017022:	4770      	bx	lr
 8017024:	24000040 	.word	0x24000040

08017028 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017028:	b480      	push	{r7}
 801702a:	b083      	sub	sp, #12
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d101      	bne.n	801703c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017038:	2303      	movs	r3, #3
 801703a:	e009      	b.n	8017050 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017042:	687a      	ldr	r2, [r7, #4]
 8017044:	33b0      	adds	r3, #176	@ 0xb0
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	4413      	add	r3, r2
 801704a:	683a      	ldr	r2, [r7, #0]
 801704c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	370c      	adds	r7, #12
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr

0801705c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801705c:	b480      	push	{r7}
 801705e:	b087      	sub	sp, #28
 8017060:	af00      	add	r7, sp, #0
 8017062:	60f8      	str	r0, [r7, #12]
 8017064:	60b9      	str	r1, [r7, #8]
 8017066:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	32b0      	adds	r2, #176	@ 0xb0
 8017072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017076:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d101      	bne.n	8017082 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801707e:	2303      	movs	r3, #3
 8017080:	e008      	b.n	8017094 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	68ba      	ldr	r2, [r7, #8]
 8017086:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	687a      	ldr	r2, [r7, #4]
 801708e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8017092:	2300      	movs	r3, #0
}
 8017094:	4618      	mov	r0, r3
 8017096:	371c      	adds	r7, #28
 8017098:	46bd      	mov	sp, r7
 801709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709e:	4770      	bx	lr

080170a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b085      	sub	sp, #20
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
 80170a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	32b0      	adds	r2, #176	@ 0xb0
 80170b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d101      	bne.n	80170c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80170c0:	2303      	movs	r3, #3
 80170c2:	e004      	b.n	80170ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	683a      	ldr	r2, [r7, #0]
 80170c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80170cc:	2300      	movs	r3, #0
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3714      	adds	r7, #20
 80170d2:	46bd      	mov	sp, r7
 80170d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d8:	4770      	bx	lr
	...

080170dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b084      	sub	sp, #16
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	32b0      	adds	r2, #176	@ 0xb0
 80170ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80170f4:	2301      	movs	r3, #1
 80170f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d101      	bne.n	8017102 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80170fe:	2303      	movs	r3, #3
 8017100:	e025      	b.n	801714e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017108:	2b00      	cmp	r3, #0
 801710a:	d11f      	bne.n	801714c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	2201      	movs	r2, #1
 8017110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8017114:	4b10      	ldr	r3, [pc, #64]	@ (8017158 <USBD_CDC_TransmitPacket+0x7c>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	f003 020f 	and.w	r2, r3, #15
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	4613      	mov	r3, r2
 8017126:	009b      	lsls	r3, r3, #2
 8017128:	4413      	add	r3, r2
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	4403      	add	r3, r0
 801712e:	3318      	adds	r3, #24
 8017130:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8017132:	4b09      	ldr	r3, [pc, #36]	@ (8017158 <USBD_CDC_TransmitPacket+0x7c>)
 8017134:	7819      	ldrb	r1, [r3, #0]
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f001 ffef 	bl	8019126 <USBD_LL_Transmit>

    ret = USBD_OK;
 8017148:	2300      	movs	r3, #0
 801714a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801714c:	7bfb      	ldrb	r3, [r7, #15]
}
 801714e:	4618      	mov	r0, r3
 8017150:	3710      	adds	r7, #16
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	240000c7 	.word	0x240000c7

0801715c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	32b0      	adds	r2, #176	@ 0xb0
 801716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017172:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	32b0      	adds	r2, #176	@ 0xb0
 801717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d101      	bne.n	801718a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8017186:	2303      	movs	r3, #3
 8017188:	e018      	b.n	80171bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	7c1b      	ldrb	r3, [r3, #16]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d10a      	bne.n	80171a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017192:	4b0c      	ldr	r3, [pc, #48]	@ (80171c4 <USBD_CDC_ReceivePacket+0x68>)
 8017194:	7819      	ldrb	r1, [r3, #0]
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801719c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f001 ffe1 	bl	8019168 <USBD_LL_PrepareReceive>
 80171a6:	e008      	b.n	80171ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80171a8:	4b06      	ldr	r3, [pc, #24]	@ (80171c4 <USBD_CDC_ReceivePacket+0x68>)
 80171aa:	7819      	ldrb	r1, [r3, #0]
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80171b2:	2340      	movs	r3, #64	@ 0x40
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f001 ffd7 	bl	8019168 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80171ba:	2300      	movs	r3, #0
}
 80171bc:	4618      	mov	r0, r3
 80171be:	3710      	adds	r7, #16
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	240000c8 	.word	0x240000c8

080171c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	4613      	mov	r3, r2
 80171d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d101      	bne.n	80171e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80171dc:	2303      	movs	r3, #3
 80171de:	e01f      	b.n	8017220 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2200      	movs	r2, #0
 80171ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2200      	movs	r2, #0
 80171f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d003      	beq.n	8017206 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	68ba      	ldr	r2, [r7, #8]
 8017202:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	2201      	movs	r2, #1
 801720a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	79fa      	ldrb	r2, [r7, #7]
 8017212:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017214:	68f8      	ldr	r0, [r7, #12]
 8017216:	f001 fe4b 	bl	8018eb0 <USBD_LL_Init>
 801721a:	4603      	mov	r3, r0
 801721c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017220:	4618      	mov	r0, r3
 8017222:	3718      	adds	r7, #24
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b084      	sub	sp, #16
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017232:	2300      	movs	r3, #0
 8017234:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d101      	bne.n	8017240 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801723c:	2303      	movs	r3, #3
 801723e:	e025      	b.n	801728c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	683a      	ldr	r2, [r7, #0]
 8017244:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	32ae      	adds	r2, #174	@ 0xae
 8017252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017258:	2b00      	cmp	r3, #0
 801725a:	d00f      	beq.n	801727c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	32ae      	adds	r2, #174	@ 0xae
 8017266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801726c:	f107 020e 	add.w	r2, r7, #14
 8017270:	4610      	mov	r0, r2
 8017272:	4798      	blx	r3
 8017274:	4602      	mov	r2, r0
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017282:	1c5a      	adds	r2, r3, #1
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801728a:	2300      	movs	r3, #0
}
 801728c:	4618      	mov	r0, r3
 801728e:	3710      	adds	r7, #16
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f001 fe59 	bl	8018f54 <USBD_LL_Start>
 80172a2:	4603      	mov	r3, r0
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3708      	adds	r7, #8
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b083      	sub	sp, #12
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80172b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	370c      	adds	r7, #12
 80172ba:	46bd      	mov	sp, r7
 80172bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c0:	4770      	bx	lr

080172c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80172c2:	b580      	push	{r7, lr}
 80172c4:	b084      	sub	sp, #16
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	6078      	str	r0, [r7, #4]
 80172ca:	460b      	mov	r3, r1
 80172cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80172ce:	2300      	movs	r3, #0
 80172d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d009      	beq.n	80172f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	78fa      	ldrb	r2, [r7, #3]
 80172e6:	4611      	mov	r1, r2
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	4798      	blx	r3
 80172ec:	4603      	mov	r3, r0
 80172ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80172f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80172f2:	4618      	mov	r0, r3
 80172f4:	3710      	adds	r7, #16
 80172f6:	46bd      	mov	sp, r7
 80172f8:	bd80      	pop	{r7, pc}

080172fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b084      	sub	sp, #16
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
 8017302:	460b      	mov	r3, r1
 8017304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017306:	2300      	movs	r3, #0
 8017308:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	78fa      	ldrb	r2, [r7, #3]
 8017314:	4611      	mov	r1, r2
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	4798      	blx	r3
 801731a:	4603      	mov	r3, r0
 801731c:	2b00      	cmp	r3, #0
 801731e:	d001      	beq.n	8017324 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017320:	2303      	movs	r3, #3
 8017322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017324:	7bfb      	ldrb	r3, [r7, #15]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3710      	adds	r7, #16
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}

0801732e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801732e:	b580      	push	{r7, lr}
 8017330:	b084      	sub	sp, #16
 8017332:	af00      	add	r7, sp, #0
 8017334:	6078      	str	r0, [r7, #4]
 8017336:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801733e:	6839      	ldr	r1, [r7, #0]
 8017340:	4618      	mov	r0, r3
 8017342:	f001 f936 	bl	80185b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2201      	movs	r2, #1
 801734a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017354:	461a      	mov	r2, r3
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017362:	f003 031f 	and.w	r3, r3, #31
 8017366:	2b02      	cmp	r3, #2
 8017368:	d01a      	beq.n	80173a0 <USBD_LL_SetupStage+0x72>
 801736a:	2b02      	cmp	r3, #2
 801736c:	d822      	bhi.n	80173b4 <USBD_LL_SetupStage+0x86>
 801736e:	2b00      	cmp	r3, #0
 8017370:	d002      	beq.n	8017378 <USBD_LL_SetupStage+0x4a>
 8017372:	2b01      	cmp	r3, #1
 8017374:	d00a      	beq.n	801738c <USBD_LL_SetupStage+0x5e>
 8017376:	e01d      	b.n	80173b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801737e:	4619      	mov	r1, r3
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f000 fb63 	bl	8017a4c <USBD_StdDevReq>
 8017386:	4603      	mov	r3, r0
 8017388:	73fb      	strb	r3, [r7, #15]
      break;
 801738a:	e020      	b.n	80173ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017392:	4619      	mov	r1, r3
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f000 fbcb 	bl	8017b30 <USBD_StdItfReq>
 801739a:	4603      	mov	r3, r0
 801739c:	73fb      	strb	r3, [r7, #15]
      break;
 801739e:	e016      	b.n	80173ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80173a6:	4619      	mov	r1, r3
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f000 fc2d 	bl	8017c08 <USBD_StdEPReq>
 80173ae:	4603      	mov	r3, r0
 80173b0:	73fb      	strb	r3, [r7, #15]
      break;
 80173b2:	e00c      	b.n	80173ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80173ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80173be:	b2db      	uxtb	r3, r3
 80173c0:	4619      	mov	r1, r3
 80173c2:	6878      	ldr	r0, [r7, #4]
 80173c4:	f001 fe26 	bl	8019014 <USBD_LL_StallEP>
 80173c8:	4603      	mov	r3, r0
 80173ca:	73fb      	strb	r3, [r7, #15]
      break;
 80173cc:	bf00      	nop
  }

  return ret;
 80173ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	3710      	adds	r7, #16
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}

080173d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b086      	sub	sp, #24
 80173dc:	af00      	add	r7, sp, #0
 80173de:	60f8      	str	r0, [r7, #12]
 80173e0:	460b      	mov	r3, r1
 80173e2:	607a      	str	r2, [r7, #4]
 80173e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80173e6:	2300      	movs	r3, #0
 80173e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80173ea:	7afb      	ldrb	r3, [r7, #11]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d16e      	bne.n	80174ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80173f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80173fe:	2b03      	cmp	r3, #3
 8017400:	f040 8098 	bne.w	8017534 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017404:	693b      	ldr	r3, [r7, #16]
 8017406:	689a      	ldr	r2, [r3, #8]
 8017408:	693b      	ldr	r3, [r7, #16]
 801740a:	68db      	ldr	r3, [r3, #12]
 801740c:	429a      	cmp	r2, r3
 801740e:	d913      	bls.n	8017438 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	689a      	ldr	r2, [r3, #8]
 8017414:	693b      	ldr	r3, [r7, #16]
 8017416:	68db      	ldr	r3, [r3, #12]
 8017418:	1ad2      	subs	r2, r2, r3
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	68da      	ldr	r2, [r3, #12]
 8017422:	693b      	ldr	r3, [r7, #16]
 8017424:	689b      	ldr	r3, [r3, #8]
 8017426:	4293      	cmp	r3, r2
 8017428:	bf28      	it	cs
 801742a:	4613      	movcs	r3, r2
 801742c:	461a      	mov	r2, r3
 801742e:	6879      	ldr	r1, [r7, #4]
 8017430:	68f8      	ldr	r0, [r7, #12]
 8017432:	f001 f9be 	bl	80187b2 <USBD_CtlContinueRx>
 8017436:	e07d      	b.n	8017534 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801743e:	f003 031f 	and.w	r3, r3, #31
 8017442:	2b02      	cmp	r3, #2
 8017444:	d014      	beq.n	8017470 <USBD_LL_DataOutStage+0x98>
 8017446:	2b02      	cmp	r3, #2
 8017448:	d81d      	bhi.n	8017486 <USBD_LL_DataOutStage+0xae>
 801744a:	2b00      	cmp	r3, #0
 801744c:	d002      	beq.n	8017454 <USBD_LL_DataOutStage+0x7c>
 801744e:	2b01      	cmp	r3, #1
 8017450:	d003      	beq.n	801745a <USBD_LL_DataOutStage+0x82>
 8017452:	e018      	b.n	8017486 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017454:	2300      	movs	r3, #0
 8017456:	75bb      	strb	r3, [r7, #22]
            break;
 8017458:	e018      	b.n	801748c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017460:	b2db      	uxtb	r3, r3
 8017462:	4619      	mov	r1, r3
 8017464:	68f8      	ldr	r0, [r7, #12]
 8017466:	f000 fa64 	bl	8017932 <USBD_CoreFindIF>
 801746a:	4603      	mov	r3, r0
 801746c:	75bb      	strb	r3, [r7, #22]
            break;
 801746e:	e00d      	b.n	801748c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017476:	b2db      	uxtb	r3, r3
 8017478:	4619      	mov	r1, r3
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f000 fa66 	bl	801794c <USBD_CoreFindEP>
 8017480:	4603      	mov	r3, r0
 8017482:	75bb      	strb	r3, [r7, #22]
            break;
 8017484:	e002      	b.n	801748c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017486:	2300      	movs	r3, #0
 8017488:	75bb      	strb	r3, [r7, #22]
            break;
 801748a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801748c:	7dbb      	ldrb	r3, [r7, #22]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d119      	bne.n	80174c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017498:	b2db      	uxtb	r3, r3
 801749a:	2b03      	cmp	r3, #3
 801749c:	d113      	bne.n	80174c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801749e:	7dba      	ldrb	r2, [r7, #22]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	32ae      	adds	r2, #174	@ 0xae
 80174a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174a8:	691b      	ldr	r3, [r3, #16]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d00b      	beq.n	80174c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80174ae:	7dba      	ldrb	r2, [r7, #22]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80174b6:	7dba      	ldrb	r2, [r7, #22]
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	32ae      	adds	r2, #174	@ 0xae
 80174bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174c0:	691b      	ldr	r3, [r3, #16]
 80174c2:	68f8      	ldr	r0, [r7, #12]
 80174c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	f001 f984 	bl	80187d4 <USBD_CtlSendStatus>
 80174cc:	e032      	b.n	8017534 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80174ce:	7afb      	ldrb	r3, [r7, #11]
 80174d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	4619      	mov	r1, r3
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	f000 fa37 	bl	801794c <USBD_CoreFindEP>
 80174de:	4603      	mov	r3, r0
 80174e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80174e2:	7dbb      	ldrb	r3, [r7, #22]
 80174e4:	2bff      	cmp	r3, #255	@ 0xff
 80174e6:	d025      	beq.n	8017534 <USBD_LL_DataOutStage+0x15c>
 80174e8:	7dbb      	ldrb	r3, [r7, #22]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d122      	bne.n	8017534 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80174f4:	b2db      	uxtb	r3, r3
 80174f6:	2b03      	cmp	r3, #3
 80174f8:	d117      	bne.n	801752a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80174fa:	7dba      	ldrb	r2, [r7, #22]
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	32ae      	adds	r2, #174	@ 0xae
 8017500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017504:	699b      	ldr	r3, [r3, #24]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d00f      	beq.n	801752a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801750a:	7dba      	ldrb	r2, [r7, #22]
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017512:	7dba      	ldrb	r2, [r7, #22]
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	32ae      	adds	r2, #174	@ 0xae
 8017518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801751c:	699b      	ldr	r3, [r3, #24]
 801751e:	7afa      	ldrb	r2, [r7, #11]
 8017520:	4611      	mov	r1, r2
 8017522:	68f8      	ldr	r0, [r7, #12]
 8017524:	4798      	blx	r3
 8017526:	4603      	mov	r3, r0
 8017528:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801752a:	7dfb      	ldrb	r3, [r7, #23]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d001      	beq.n	8017534 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017530:	7dfb      	ldrb	r3, [r7, #23]
 8017532:	e000      	b.n	8017536 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017534:	2300      	movs	r3, #0
}
 8017536:	4618      	mov	r0, r3
 8017538:	3718      	adds	r7, #24
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b086      	sub	sp, #24
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	460b      	mov	r3, r1
 8017548:	607a      	str	r2, [r7, #4]
 801754a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801754c:	7afb      	ldrb	r3, [r7, #11]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d16f      	bne.n	8017632 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	3314      	adds	r3, #20
 8017556:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801755e:	2b02      	cmp	r3, #2
 8017560:	d15a      	bne.n	8017618 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	689a      	ldr	r2, [r3, #8]
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	429a      	cmp	r2, r3
 801756c:	d914      	bls.n	8017598 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	689a      	ldr	r2, [r3, #8]
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	1ad2      	subs	r2, r2, r3
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801757c:	693b      	ldr	r3, [r7, #16]
 801757e:	689b      	ldr	r3, [r3, #8]
 8017580:	461a      	mov	r2, r3
 8017582:	6879      	ldr	r1, [r7, #4]
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f001 f8e6 	bl	8018756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801758a:	2300      	movs	r3, #0
 801758c:	2200      	movs	r2, #0
 801758e:	2100      	movs	r1, #0
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f001 fde9 	bl	8019168 <USBD_LL_PrepareReceive>
 8017596:	e03f      	b.n	8017618 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	68da      	ldr	r2, [r3, #12]
 801759c:	693b      	ldr	r3, [r7, #16]
 801759e:	689b      	ldr	r3, [r3, #8]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d11c      	bne.n	80175de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80175a4:	693b      	ldr	r3, [r7, #16]
 80175a6:	685a      	ldr	r2, [r3, #4]
 80175a8:	693b      	ldr	r3, [r7, #16]
 80175aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80175ac:	429a      	cmp	r2, r3
 80175ae:	d316      	bcc.n	80175de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	685a      	ldr	r2, [r3, #4]
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d20f      	bcs.n	80175de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80175be:	2200      	movs	r2, #0
 80175c0:	2100      	movs	r1, #0
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	f001 f8c7 	bl	8018756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	2200      	movs	r2, #0
 80175cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80175d0:	2300      	movs	r3, #0
 80175d2:	2200      	movs	r2, #0
 80175d4:	2100      	movs	r1, #0
 80175d6:	68f8      	ldr	r0, [r7, #12]
 80175d8:	f001 fdc6 	bl	8019168 <USBD_LL_PrepareReceive>
 80175dc:	e01c      	b.n	8017618 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	2b03      	cmp	r3, #3
 80175e8:	d10f      	bne.n	801760a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80175f0:	68db      	ldr	r3, [r3, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d009      	beq.n	801760a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	2200      	movs	r2, #0
 80175fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017604:	68db      	ldr	r3, [r3, #12]
 8017606:	68f8      	ldr	r0, [r7, #12]
 8017608:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801760a:	2180      	movs	r1, #128	@ 0x80
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f001 fd01 	bl	8019014 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017612:	68f8      	ldr	r0, [r7, #12]
 8017614:	f001 f8f1 	bl	80187fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801761e:	2b00      	cmp	r3, #0
 8017620:	d03a      	beq.n	8017698 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	f7ff fe42 	bl	80172ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2200      	movs	r2, #0
 801762c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017630:	e032      	b.n	8017698 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017632:	7afb      	ldrb	r3, [r7, #11]
 8017634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017638:	b2db      	uxtb	r3, r3
 801763a:	4619      	mov	r1, r3
 801763c:	68f8      	ldr	r0, [r7, #12]
 801763e:	f000 f985 	bl	801794c <USBD_CoreFindEP>
 8017642:	4603      	mov	r3, r0
 8017644:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017646:	7dfb      	ldrb	r3, [r7, #23]
 8017648:	2bff      	cmp	r3, #255	@ 0xff
 801764a:	d025      	beq.n	8017698 <USBD_LL_DataInStage+0x15a>
 801764c:	7dfb      	ldrb	r3, [r7, #23]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d122      	bne.n	8017698 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017658:	b2db      	uxtb	r3, r3
 801765a:	2b03      	cmp	r3, #3
 801765c:	d11c      	bne.n	8017698 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801765e:	7dfa      	ldrb	r2, [r7, #23]
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	32ae      	adds	r2, #174	@ 0xae
 8017664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017668:	695b      	ldr	r3, [r3, #20]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d014      	beq.n	8017698 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801766e:	7dfa      	ldrb	r2, [r7, #23]
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8017676:	7dfa      	ldrb	r2, [r7, #23]
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	32ae      	adds	r2, #174	@ 0xae
 801767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017680:	695b      	ldr	r3, [r3, #20]
 8017682:	7afa      	ldrb	r2, [r7, #11]
 8017684:	4611      	mov	r1, r2
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	4798      	blx	r3
 801768a:	4603      	mov	r3, r0
 801768c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801768e:	7dbb      	ldrb	r3, [r7, #22]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d001      	beq.n	8017698 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017694:	7dbb      	ldrb	r3, [r7, #22]
 8017696:	e000      	b.n	801769a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8017698:	2300      	movs	r3, #0
}
 801769a:	4618      	mov	r0, r3
 801769c:	3718      	adds	r7, #24
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}

080176a2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80176a2:	b580      	push	{r7, lr}
 80176a4:	b084      	sub	sp, #16
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80176aa:	2300      	movs	r3, #0
 80176ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	2201      	movs	r2, #1
 80176b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2200      	movs	r2, #0
 80176ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	2200      	movs	r2, #0
 80176c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2200      	movs	r2, #0
 80176c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2200      	movs	r2, #0
 80176d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d014      	beq.n	8017708 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176e4:	685b      	ldr	r3, [r3, #4]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d00e      	beq.n	8017708 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	6852      	ldr	r2, [r2, #4]
 80176f6:	b2d2      	uxtb	r2, r2
 80176f8:	4611      	mov	r1, r2
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	4798      	blx	r3
 80176fe:	4603      	mov	r3, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d001      	beq.n	8017708 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8017704:	2303      	movs	r3, #3
 8017706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017708:	2340      	movs	r3, #64	@ 0x40
 801770a:	2200      	movs	r2, #0
 801770c:	2100      	movs	r1, #0
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f001 fc3b 	bl	8018f8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2201      	movs	r2, #1
 8017718:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2240      	movs	r2, #64	@ 0x40
 8017720:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017724:	2340      	movs	r3, #64	@ 0x40
 8017726:	2200      	movs	r2, #0
 8017728:	2180      	movs	r1, #128	@ 0x80
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f001 fc2d 	bl	8018f8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2201      	movs	r2, #1
 8017734:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2240      	movs	r2, #64	@ 0x40
 801773a:	621a      	str	r2, [r3, #32]

  return ret;
 801773c:	7bfb      	ldrb	r3, [r7, #15]
}
 801773e:	4618      	mov	r0, r3
 8017740:	3710      	adds	r7, #16
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}

08017746 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017746:	b480      	push	{r7}
 8017748:	b083      	sub	sp, #12
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
 801774e:	460b      	mov	r3, r1
 8017750:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	78fa      	ldrb	r2, [r7, #3]
 8017756:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	370c      	adds	r7, #12
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr

08017766 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017766:	b480      	push	{r7}
 8017768:	b083      	sub	sp, #12
 801776a:	af00      	add	r7, sp, #0
 801776c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017774:	b2db      	uxtb	r3, r3
 8017776:	2b04      	cmp	r3, #4
 8017778:	d006      	beq.n	8017788 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017780:	b2da      	uxtb	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	2204      	movs	r2, #4
 801778c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8017790:	2300      	movs	r3, #0
}
 8017792:	4618      	mov	r0, r3
 8017794:	370c      	adds	r7, #12
 8017796:	46bd      	mov	sp, r7
 8017798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779c:	4770      	bx	lr

0801779e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801779e:	b480      	push	{r7}
 80177a0:	b083      	sub	sp, #12
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	2b04      	cmp	r3, #4
 80177b0:	d106      	bne.n	80177c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80177b8:	b2da      	uxtb	r2, r3
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80177c0:	2300      	movs	r3, #0
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	370c      	adds	r7, #12
 80177c6:	46bd      	mov	sp, r7
 80177c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177cc:	4770      	bx	lr

080177ce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80177ce:	b580      	push	{r7, lr}
 80177d0:	b082      	sub	sp, #8
 80177d2:	af00      	add	r7, sp, #0
 80177d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b03      	cmp	r3, #3
 80177e0:	d110      	bne.n	8017804 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d00b      	beq.n	8017804 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177f2:	69db      	ldr	r3, [r3, #28]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d005      	beq.n	8017804 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177fe:	69db      	ldr	r3, [r3, #28]
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8017804:	2300      	movs	r3, #0
}
 8017806:	4618      	mov	r0, r3
 8017808:	3708      	adds	r7, #8
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}

0801780e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801780e:	b580      	push	{r7, lr}
 8017810:	b082      	sub	sp, #8
 8017812:	af00      	add	r7, sp, #0
 8017814:	6078      	str	r0, [r7, #4]
 8017816:	460b      	mov	r3, r1
 8017818:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	32ae      	adds	r2, #174	@ 0xae
 8017824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d101      	bne.n	8017830 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801782c:	2303      	movs	r3, #3
 801782e:	e01c      	b.n	801786a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017836:	b2db      	uxtb	r3, r3
 8017838:	2b03      	cmp	r3, #3
 801783a:	d115      	bne.n	8017868 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	32ae      	adds	r2, #174	@ 0xae
 8017846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801784a:	6a1b      	ldr	r3, [r3, #32]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d00b      	beq.n	8017868 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	32ae      	adds	r2, #174	@ 0xae
 801785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801785e:	6a1b      	ldr	r3, [r3, #32]
 8017860:	78fa      	ldrb	r2, [r7, #3]
 8017862:	4611      	mov	r1, r2
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017868:	2300      	movs	r3, #0
}
 801786a:	4618      	mov	r0, r3
 801786c:	3708      	adds	r7, #8
 801786e:	46bd      	mov	sp, r7
 8017870:	bd80      	pop	{r7, pc}

08017872 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017872:	b580      	push	{r7, lr}
 8017874:	b082      	sub	sp, #8
 8017876:	af00      	add	r7, sp, #0
 8017878:	6078      	str	r0, [r7, #4]
 801787a:	460b      	mov	r3, r1
 801787c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	32ae      	adds	r2, #174	@ 0xae
 8017888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d101      	bne.n	8017894 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8017890:	2303      	movs	r3, #3
 8017892:	e01c      	b.n	80178ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801789a:	b2db      	uxtb	r3, r3
 801789c:	2b03      	cmp	r3, #3
 801789e:	d115      	bne.n	80178cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	32ae      	adds	r2, #174	@ 0xae
 80178aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d00b      	beq.n	80178cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	32ae      	adds	r2, #174	@ 0xae
 80178be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80178c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178c4:	78fa      	ldrb	r2, [r7, #3]
 80178c6:	4611      	mov	r1, r2
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80178cc:	2300      	movs	r3, #0
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3708      	adds	r7, #8
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80178d6:	b480      	push	{r7}
 80178d8:	b083      	sub	sp, #12
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80178de:	2300      	movs	r3, #0
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	370c      	adds	r7, #12
 80178e4:	46bd      	mov	sp, r7
 80178e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ea:	4770      	bx	lr

080178ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80178f4:	2300      	movs	r3, #0
 80178f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2201      	movs	r2, #1
 80178fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017906:	2b00      	cmp	r3, #0
 8017908:	d00e      	beq.n	8017928 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	6852      	ldr	r2, [r2, #4]
 8017916:	b2d2      	uxtb	r2, r2
 8017918:	4611      	mov	r1, r2
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	4798      	blx	r3
 801791e:	4603      	mov	r3, r0
 8017920:	2b00      	cmp	r3, #0
 8017922:	d001      	beq.n	8017928 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8017924:	2303      	movs	r3, #3
 8017926:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017928:	7bfb      	ldrb	r3, [r7, #15]
}
 801792a:	4618      	mov	r0, r3
 801792c:	3710      	adds	r7, #16
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017932:	b480      	push	{r7}
 8017934:	b083      	sub	sp, #12
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
 801793a:	460b      	mov	r3, r1
 801793c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801793e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017940:	4618      	mov	r0, r3
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr

0801794c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801794c:	b480      	push	{r7}
 801794e:	b083      	sub	sp, #12
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017958:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801795a:	4618      	mov	r0, r3
 801795c:	370c      	adds	r7, #12
 801795e:	46bd      	mov	sp, r7
 8017960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017964:	4770      	bx	lr

08017966 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8017966:	b580      	push	{r7, lr}
 8017968:	b086      	sub	sp, #24
 801796a:	af00      	add	r7, sp, #0
 801796c:	6078      	str	r0, [r7, #4]
 801796e:	460b      	mov	r3, r1
 8017970:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801797a:	2300      	movs	r3, #0
 801797c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	885b      	ldrh	r3, [r3, #2]
 8017982:	b29b      	uxth	r3, r3
 8017984:	68fa      	ldr	r2, [r7, #12]
 8017986:	7812      	ldrb	r2, [r2, #0]
 8017988:	4293      	cmp	r3, r2
 801798a:	d91f      	bls.n	80179cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017992:	e013      	b.n	80179bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017994:	f107 030a 	add.w	r3, r7, #10
 8017998:	4619      	mov	r1, r3
 801799a:	6978      	ldr	r0, [r7, #20]
 801799c:	f000 f81b 	bl	80179d6 <USBD_GetNextDesc>
 80179a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	785b      	ldrb	r3, [r3, #1]
 80179a6:	2b05      	cmp	r3, #5
 80179a8:	d108      	bne.n	80179bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	789b      	ldrb	r3, [r3, #2]
 80179b2:	78fa      	ldrb	r2, [r7, #3]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d008      	beq.n	80179ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80179b8:	2300      	movs	r3, #0
 80179ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	885b      	ldrh	r3, [r3, #2]
 80179c0:	b29a      	uxth	r2, r3
 80179c2:	897b      	ldrh	r3, [r7, #10]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d8e5      	bhi.n	8017994 <USBD_GetEpDesc+0x2e>
 80179c8:	e000      	b.n	80179cc <USBD_GetEpDesc+0x66>
          break;
 80179ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80179cc:	693b      	ldr	r3, [r7, #16]
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3718      	adds	r7, #24
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}

080179d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80179d6:	b480      	push	{r7}
 80179d8:	b085      	sub	sp, #20
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
 80179de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	68fa      	ldr	r2, [r7, #12]
 80179ea:	7812      	ldrb	r2, [r2, #0]
 80179ec:	4413      	add	r3, r2
 80179ee:	b29a      	uxth	r2, r3
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	781b      	ldrb	r3, [r3, #0]
 80179f8:	461a      	mov	r2, r3
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	4413      	add	r3, r2
 80179fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8017a00:	68fb      	ldr	r3, [r7, #12]
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3714      	adds	r7, #20
 8017a06:	46bd      	mov	sp, r7
 8017a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0c:	4770      	bx	lr

08017a0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017a0e:	b480      	push	{r7}
 8017a10:	b087      	sub	sp, #28
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017a20:	697b      	ldr	r3, [r7, #20]
 8017a22:	3301      	adds	r3, #1
 8017a24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017a26:	697b      	ldr	r3, [r7, #20]
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017a2c:	8a3b      	ldrh	r3, [r7, #16]
 8017a2e:	021b      	lsls	r3, r3, #8
 8017a30:	b21a      	sxth	r2, r3
 8017a32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017a36:	4313      	orrs	r3, r2
 8017a38:	b21b      	sxth	r3, r3
 8017a3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr
	...

08017a4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b084      	sub	sp, #16
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017a56:	2300      	movs	r3, #0
 8017a58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017a62:	2b40      	cmp	r3, #64	@ 0x40
 8017a64:	d005      	beq.n	8017a72 <USBD_StdDevReq+0x26>
 8017a66:	2b40      	cmp	r3, #64	@ 0x40
 8017a68:	d857      	bhi.n	8017b1a <USBD_StdDevReq+0xce>
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00f      	beq.n	8017a8e <USBD_StdDevReq+0x42>
 8017a6e:	2b20      	cmp	r3, #32
 8017a70:	d153      	bne.n	8017b1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	32ae      	adds	r2, #174	@ 0xae
 8017a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	6839      	ldr	r1, [r7, #0]
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	4798      	blx	r3
 8017a88:	4603      	mov	r3, r0
 8017a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8017a8c:	e04a      	b.n	8017b24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017a8e:	683b      	ldr	r3, [r7, #0]
 8017a90:	785b      	ldrb	r3, [r3, #1]
 8017a92:	2b09      	cmp	r3, #9
 8017a94:	d83b      	bhi.n	8017b0e <USBD_StdDevReq+0xc2>
 8017a96:	a201      	add	r2, pc, #4	@ (adr r2, 8017a9c <USBD_StdDevReq+0x50>)
 8017a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a9c:	08017af1 	.word	0x08017af1
 8017aa0:	08017b05 	.word	0x08017b05
 8017aa4:	08017b0f 	.word	0x08017b0f
 8017aa8:	08017afb 	.word	0x08017afb
 8017aac:	08017b0f 	.word	0x08017b0f
 8017ab0:	08017acf 	.word	0x08017acf
 8017ab4:	08017ac5 	.word	0x08017ac5
 8017ab8:	08017b0f 	.word	0x08017b0f
 8017abc:	08017ae7 	.word	0x08017ae7
 8017ac0:	08017ad9 	.word	0x08017ad9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017ac4:	6839      	ldr	r1, [r7, #0]
 8017ac6:	6878      	ldr	r0, [r7, #4]
 8017ac8:	f000 fa3c 	bl	8017f44 <USBD_GetDescriptor>
          break;
 8017acc:	e024      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017ace:	6839      	ldr	r1, [r7, #0]
 8017ad0:	6878      	ldr	r0, [r7, #4]
 8017ad2:	f000 fbcb 	bl	801826c <USBD_SetAddress>
          break;
 8017ad6:	e01f      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017ad8:	6839      	ldr	r1, [r7, #0]
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f000 fc0a 	bl	80182f4 <USBD_SetConfig>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73fb      	strb	r3, [r7, #15]
          break;
 8017ae4:	e018      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017ae6:	6839      	ldr	r1, [r7, #0]
 8017ae8:	6878      	ldr	r0, [r7, #4]
 8017aea:	f000 fcad 	bl	8018448 <USBD_GetConfig>
          break;
 8017aee:	e013      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017af0:	6839      	ldr	r1, [r7, #0]
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	f000 fcde 	bl	80184b4 <USBD_GetStatus>
          break;
 8017af8:	e00e      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017afa:	6839      	ldr	r1, [r7, #0]
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f000 fd0d 	bl	801851c <USBD_SetFeature>
          break;
 8017b02:	e009      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017b04:	6839      	ldr	r1, [r7, #0]
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 fd31 	bl	801856e <USBD_ClrFeature>
          break;
 8017b0c:	e004      	b.n	8017b18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8017b0e:	6839      	ldr	r1, [r7, #0]
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f000 fd88 	bl	8018626 <USBD_CtlError>
          break;
 8017b16:	bf00      	nop
      }
      break;
 8017b18:	e004      	b.n	8017b24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8017b1a:	6839      	ldr	r1, [r7, #0]
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f000 fd82 	bl	8018626 <USBD_CtlError>
      break;
 8017b22:	bf00      	nop
  }

  return ret;
 8017b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop

08017b30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017b3e:	683b      	ldr	r3, [r7, #0]
 8017b40:	781b      	ldrb	r3, [r3, #0]
 8017b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017b46:	2b40      	cmp	r3, #64	@ 0x40
 8017b48:	d005      	beq.n	8017b56 <USBD_StdItfReq+0x26>
 8017b4a:	2b40      	cmp	r3, #64	@ 0x40
 8017b4c:	d852      	bhi.n	8017bf4 <USBD_StdItfReq+0xc4>
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d001      	beq.n	8017b56 <USBD_StdItfReq+0x26>
 8017b52:	2b20      	cmp	r3, #32
 8017b54:	d14e      	bne.n	8017bf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	3b01      	subs	r3, #1
 8017b60:	2b02      	cmp	r3, #2
 8017b62:	d840      	bhi.n	8017be6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	889b      	ldrh	r3, [r3, #4]
 8017b68:	b2db      	uxtb	r3, r3
 8017b6a:	2b01      	cmp	r3, #1
 8017b6c:	d836      	bhi.n	8017bdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	889b      	ldrh	r3, [r3, #4]
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	4619      	mov	r1, r3
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f7ff fedb 	bl	8017932 <USBD_CoreFindIF>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017b80:	7bbb      	ldrb	r3, [r7, #14]
 8017b82:	2bff      	cmp	r3, #255	@ 0xff
 8017b84:	d01d      	beq.n	8017bc2 <USBD_StdItfReq+0x92>
 8017b86:	7bbb      	ldrb	r3, [r7, #14]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d11a      	bne.n	8017bc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017b8c:	7bba      	ldrb	r2, [r7, #14]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	32ae      	adds	r2, #174	@ 0xae
 8017b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b96:	689b      	ldr	r3, [r3, #8]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d00f      	beq.n	8017bbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017b9c:	7bba      	ldrb	r2, [r7, #14]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017ba4:	7bba      	ldrb	r2, [r7, #14]
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	32ae      	adds	r2, #174	@ 0xae
 8017baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bae:	689b      	ldr	r3, [r3, #8]
 8017bb0:	6839      	ldr	r1, [r7, #0]
 8017bb2:	6878      	ldr	r0, [r7, #4]
 8017bb4:	4798      	blx	r3
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017bba:	e004      	b.n	8017bc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017bbc:	2303      	movs	r3, #3
 8017bbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017bc0:	e001      	b.n	8017bc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8017bc2:	2303      	movs	r3, #3
 8017bc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	88db      	ldrh	r3, [r3, #6]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d110      	bne.n	8017bf0 <USBD_StdItfReq+0xc0>
 8017bce:	7bfb      	ldrb	r3, [r7, #15]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d10d      	bne.n	8017bf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	f000 fdfd 	bl	80187d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017bda:	e009      	b.n	8017bf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017bdc:	6839      	ldr	r1, [r7, #0]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f000 fd21 	bl	8018626 <USBD_CtlError>
          break;
 8017be4:	e004      	b.n	8017bf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017be6:	6839      	ldr	r1, [r7, #0]
 8017be8:	6878      	ldr	r0, [r7, #4]
 8017bea:	f000 fd1c 	bl	8018626 <USBD_CtlError>
          break;
 8017bee:	e000      	b.n	8017bf2 <USBD_StdItfReq+0xc2>
          break;
 8017bf0:	bf00      	nop
      }
      break;
 8017bf2:	e004      	b.n	8017bfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8017bf4:	6839      	ldr	r1, [r7, #0]
 8017bf6:	6878      	ldr	r0, [r7, #4]
 8017bf8:	f000 fd15 	bl	8018626 <USBD_CtlError>
      break;
 8017bfc:	bf00      	nop
  }

  return ret;
 8017bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3710      	adds	r7, #16
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b084      	sub	sp, #16
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	889b      	ldrh	r3, [r3, #4]
 8017c1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	781b      	ldrb	r3, [r3, #0]
 8017c20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017c24:	2b40      	cmp	r3, #64	@ 0x40
 8017c26:	d007      	beq.n	8017c38 <USBD_StdEPReq+0x30>
 8017c28:	2b40      	cmp	r3, #64	@ 0x40
 8017c2a:	f200 817f 	bhi.w	8017f2c <USBD_StdEPReq+0x324>
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d02a      	beq.n	8017c88 <USBD_StdEPReq+0x80>
 8017c32:	2b20      	cmp	r3, #32
 8017c34:	f040 817a 	bne.w	8017f2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017c38:	7bbb      	ldrb	r3, [r7, #14]
 8017c3a:	4619      	mov	r1, r3
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f7ff fe85 	bl	801794c <USBD_CoreFindEP>
 8017c42:	4603      	mov	r3, r0
 8017c44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017c46:	7b7b      	ldrb	r3, [r7, #13]
 8017c48:	2bff      	cmp	r3, #255	@ 0xff
 8017c4a:	f000 8174 	beq.w	8017f36 <USBD_StdEPReq+0x32e>
 8017c4e:	7b7b      	ldrb	r3, [r7, #13]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f040 8170 	bne.w	8017f36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8017c56:	7b7a      	ldrb	r2, [r7, #13]
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017c5e:	7b7a      	ldrb	r2, [r7, #13]
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	32ae      	adds	r2, #174	@ 0xae
 8017c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c68:	689b      	ldr	r3, [r3, #8]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f000 8163 	beq.w	8017f36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017c70:	7b7a      	ldrb	r2, [r7, #13]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	32ae      	adds	r2, #174	@ 0xae
 8017c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c7a:	689b      	ldr	r3, [r3, #8]
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	4798      	blx	r3
 8017c82:	4603      	mov	r3, r0
 8017c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017c86:	e156      	b.n	8017f36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	785b      	ldrb	r3, [r3, #1]
 8017c8c:	2b03      	cmp	r3, #3
 8017c8e:	d008      	beq.n	8017ca2 <USBD_StdEPReq+0x9a>
 8017c90:	2b03      	cmp	r3, #3
 8017c92:	f300 8145 	bgt.w	8017f20 <USBD_StdEPReq+0x318>
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	f000 809b 	beq.w	8017dd2 <USBD_StdEPReq+0x1ca>
 8017c9c:	2b01      	cmp	r3, #1
 8017c9e:	d03c      	beq.n	8017d1a <USBD_StdEPReq+0x112>
 8017ca0:	e13e      	b.n	8017f20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ca8:	b2db      	uxtb	r3, r3
 8017caa:	2b02      	cmp	r3, #2
 8017cac:	d002      	beq.n	8017cb4 <USBD_StdEPReq+0xac>
 8017cae:	2b03      	cmp	r3, #3
 8017cb0:	d016      	beq.n	8017ce0 <USBD_StdEPReq+0xd8>
 8017cb2:	e02c      	b.n	8017d0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017cb4:	7bbb      	ldrb	r3, [r7, #14]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d00d      	beq.n	8017cd6 <USBD_StdEPReq+0xce>
 8017cba:	7bbb      	ldrb	r3, [r7, #14]
 8017cbc:	2b80      	cmp	r3, #128	@ 0x80
 8017cbe:	d00a      	beq.n	8017cd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017cc0:	7bbb      	ldrb	r3, [r7, #14]
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	6878      	ldr	r0, [r7, #4]
 8017cc6:	f001 f9a5 	bl	8019014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017cca:	2180      	movs	r1, #128	@ 0x80
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	f001 f9a1 	bl	8019014 <USBD_LL_StallEP>
 8017cd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017cd4:	e020      	b.n	8017d18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017cd6:	6839      	ldr	r1, [r7, #0]
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f000 fca4 	bl	8018626 <USBD_CtlError>
              break;
 8017cde:	e01b      	b.n	8017d18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	885b      	ldrh	r3, [r3, #2]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d10e      	bne.n	8017d06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017ce8:	7bbb      	ldrb	r3, [r7, #14]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d00b      	beq.n	8017d06 <USBD_StdEPReq+0xfe>
 8017cee:	7bbb      	ldrb	r3, [r7, #14]
 8017cf0:	2b80      	cmp	r3, #128	@ 0x80
 8017cf2:	d008      	beq.n	8017d06 <USBD_StdEPReq+0xfe>
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	88db      	ldrh	r3, [r3, #6]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d104      	bne.n	8017d06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017cfc:	7bbb      	ldrb	r3, [r7, #14]
 8017cfe:	4619      	mov	r1, r3
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f001 f987 	bl	8019014 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017d06:	6878      	ldr	r0, [r7, #4]
 8017d08:	f000 fd64 	bl	80187d4 <USBD_CtlSendStatus>

              break;
 8017d0c:	e004      	b.n	8017d18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017d0e:	6839      	ldr	r1, [r7, #0]
 8017d10:	6878      	ldr	r0, [r7, #4]
 8017d12:	f000 fc88 	bl	8018626 <USBD_CtlError>
              break;
 8017d16:	bf00      	nop
          }
          break;
 8017d18:	e107      	b.n	8017f2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017d20:	b2db      	uxtb	r3, r3
 8017d22:	2b02      	cmp	r3, #2
 8017d24:	d002      	beq.n	8017d2c <USBD_StdEPReq+0x124>
 8017d26:	2b03      	cmp	r3, #3
 8017d28:	d016      	beq.n	8017d58 <USBD_StdEPReq+0x150>
 8017d2a:	e04b      	b.n	8017dc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017d2c:	7bbb      	ldrb	r3, [r7, #14]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d00d      	beq.n	8017d4e <USBD_StdEPReq+0x146>
 8017d32:	7bbb      	ldrb	r3, [r7, #14]
 8017d34:	2b80      	cmp	r3, #128	@ 0x80
 8017d36:	d00a      	beq.n	8017d4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017d38:	7bbb      	ldrb	r3, [r7, #14]
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f001 f969 	bl	8019014 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017d42:	2180      	movs	r1, #128	@ 0x80
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f001 f965 	bl	8019014 <USBD_LL_StallEP>
 8017d4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017d4c:	e040      	b.n	8017dd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f000 fc68 	bl	8018626 <USBD_CtlError>
              break;
 8017d56:	e03b      	b.n	8017dd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017d58:	683b      	ldr	r3, [r7, #0]
 8017d5a:	885b      	ldrh	r3, [r3, #2]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d136      	bne.n	8017dce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017d60:	7bbb      	ldrb	r3, [r7, #14]
 8017d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d004      	beq.n	8017d74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017d6a:	7bbb      	ldrb	r3, [r7, #14]
 8017d6c:	4619      	mov	r1, r3
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f001 f96f 	bl	8019052 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f000 fd2d 	bl	80187d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017d7a:	7bbb      	ldrb	r3, [r7, #14]
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f7ff fde4 	bl	801794c <USBD_CoreFindEP>
 8017d84:	4603      	mov	r3, r0
 8017d86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017d88:	7b7b      	ldrb	r3, [r7, #13]
 8017d8a:	2bff      	cmp	r3, #255	@ 0xff
 8017d8c:	d01f      	beq.n	8017dce <USBD_StdEPReq+0x1c6>
 8017d8e:	7b7b      	ldrb	r3, [r7, #13]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d11c      	bne.n	8017dce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017d94:	7b7a      	ldrb	r2, [r7, #13]
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017d9c:	7b7a      	ldrb	r2, [r7, #13]
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	32ae      	adds	r2, #174	@ 0xae
 8017da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017da6:	689b      	ldr	r3, [r3, #8]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d010      	beq.n	8017dce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017dac:	7b7a      	ldrb	r2, [r7, #13]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	32ae      	adds	r2, #174	@ 0xae
 8017db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017db6:	689b      	ldr	r3, [r3, #8]
 8017db8:	6839      	ldr	r1, [r7, #0]
 8017dba:	6878      	ldr	r0, [r7, #4]
 8017dbc:	4798      	blx	r3
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8017dc2:	e004      	b.n	8017dce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017dc4:	6839      	ldr	r1, [r7, #0]
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f000 fc2d 	bl	8018626 <USBD_CtlError>
              break;
 8017dcc:	e000      	b.n	8017dd0 <USBD_StdEPReq+0x1c8>
              break;
 8017dce:	bf00      	nop
          }
          break;
 8017dd0:	e0ab      	b.n	8017f2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	2b02      	cmp	r3, #2
 8017ddc:	d002      	beq.n	8017de4 <USBD_StdEPReq+0x1dc>
 8017dde:	2b03      	cmp	r3, #3
 8017de0:	d032      	beq.n	8017e48 <USBD_StdEPReq+0x240>
 8017de2:	e097      	b.n	8017f14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017de4:	7bbb      	ldrb	r3, [r7, #14]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d007      	beq.n	8017dfa <USBD_StdEPReq+0x1f2>
 8017dea:	7bbb      	ldrb	r3, [r7, #14]
 8017dec:	2b80      	cmp	r3, #128	@ 0x80
 8017dee:	d004      	beq.n	8017dfa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017df0:	6839      	ldr	r1, [r7, #0]
 8017df2:	6878      	ldr	r0, [r7, #4]
 8017df4:	f000 fc17 	bl	8018626 <USBD_CtlError>
                break;
 8017df8:	e091      	b.n	8017f1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	da0b      	bge.n	8017e1a <USBD_StdEPReq+0x212>
 8017e02:	7bbb      	ldrb	r3, [r7, #14]
 8017e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017e08:	4613      	mov	r3, r2
 8017e0a:	009b      	lsls	r3, r3, #2
 8017e0c:	4413      	add	r3, r2
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	3310      	adds	r3, #16
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	4413      	add	r3, r2
 8017e16:	3304      	adds	r3, #4
 8017e18:	e00b      	b.n	8017e32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017e1a:	7bbb      	ldrb	r3, [r7, #14]
 8017e1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e20:	4613      	mov	r3, r2
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	4413      	add	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	4413      	add	r3, r2
 8017e30:	3304      	adds	r3, #4
 8017e32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	2200      	movs	r2, #0
 8017e38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	2202      	movs	r2, #2
 8017e3e:	4619      	mov	r1, r3
 8017e40:	6878      	ldr	r0, [r7, #4]
 8017e42:	f000 fc6d 	bl	8018720 <USBD_CtlSendData>
              break;
 8017e46:	e06a      	b.n	8017f1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	da11      	bge.n	8017e74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017e50:	7bbb      	ldrb	r3, [r7, #14]
 8017e52:	f003 020f 	and.w	r2, r3, #15
 8017e56:	6879      	ldr	r1, [r7, #4]
 8017e58:	4613      	mov	r3, r2
 8017e5a:	009b      	lsls	r3, r3, #2
 8017e5c:	4413      	add	r3, r2
 8017e5e:	009b      	lsls	r3, r3, #2
 8017e60:	440b      	add	r3, r1
 8017e62:	3324      	adds	r3, #36	@ 0x24
 8017e64:	881b      	ldrh	r3, [r3, #0]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d117      	bne.n	8017e9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017e6a:	6839      	ldr	r1, [r7, #0]
 8017e6c:	6878      	ldr	r0, [r7, #4]
 8017e6e:	f000 fbda 	bl	8018626 <USBD_CtlError>
                  break;
 8017e72:	e054      	b.n	8017f1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017e74:	7bbb      	ldrb	r3, [r7, #14]
 8017e76:	f003 020f 	and.w	r2, r3, #15
 8017e7a:	6879      	ldr	r1, [r7, #4]
 8017e7c:	4613      	mov	r3, r2
 8017e7e:	009b      	lsls	r3, r3, #2
 8017e80:	4413      	add	r3, r2
 8017e82:	009b      	lsls	r3, r3, #2
 8017e84:	440b      	add	r3, r1
 8017e86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e8a:	881b      	ldrh	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d104      	bne.n	8017e9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017e90:	6839      	ldr	r1, [r7, #0]
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f000 fbc7 	bl	8018626 <USBD_CtlError>
                  break;
 8017e98:	e041      	b.n	8017f1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	da0b      	bge.n	8017eba <USBD_StdEPReq+0x2b2>
 8017ea2:	7bbb      	ldrb	r3, [r7, #14]
 8017ea4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	009b      	lsls	r3, r3, #2
 8017eac:	4413      	add	r3, r2
 8017eae:	009b      	lsls	r3, r3, #2
 8017eb0:	3310      	adds	r3, #16
 8017eb2:	687a      	ldr	r2, [r7, #4]
 8017eb4:	4413      	add	r3, r2
 8017eb6:	3304      	adds	r3, #4
 8017eb8:	e00b      	b.n	8017ed2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017eba:	7bbb      	ldrb	r3, [r7, #14]
 8017ebc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	009b      	lsls	r3, r3, #2
 8017ec4:	4413      	add	r3, r2
 8017ec6:	009b      	lsls	r3, r3, #2
 8017ec8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	4413      	add	r3, r2
 8017ed0:	3304      	adds	r3, #4
 8017ed2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017ed4:	7bbb      	ldrb	r3, [r7, #14]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d002      	beq.n	8017ee0 <USBD_StdEPReq+0x2d8>
 8017eda:	7bbb      	ldrb	r3, [r7, #14]
 8017edc:	2b80      	cmp	r3, #128	@ 0x80
 8017ede:	d103      	bne.n	8017ee8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	601a      	str	r2, [r3, #0]
 8017ee6:	e00e      	b.n	8017f06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017ee8:	7bbb      	ldrb	r3, [r7, #14]
 8017eea:	4619      	mov	r1, r3
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f001 f8cf 	bl	8019090 <USBD_LL_IsStallEP>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d003      	beq.n	8017f00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	2201      	movs	r2, #1
 8017efc:	601a      	str	r2, [r3, #0]
 8017efe:	e002      	b.n	8017f06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	2200      	movs	r2, #0
 8017f04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	2202      	movs	r2, #2
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f000 fc07 	bl	8018720 <USBD_CtlSendData>
              break;
 8017f12:	e004      	b.n	8017f1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017f14:	6839      	ldr	r1, [r7, #0]
 8017f16:	6878      	ldr	r0, [r7, #4]
 8017f18:	f000 fb85 	bl	8018626 <USBD_CtlError>
              break;
 8017f1c:	bf00      	nop
          }
          break;
 8017f1e:	e004      	b.n	8017f2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017f20:	6839      	ldr	r1, [r7, #0]
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f000 fb7f 	bl	8018626 <USBD_CtlError>
          break;
 8017f28:	bf00      	nop
      }
      break;
 8017f2a:	e005      	b.n	8017f38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017f2c:	6839      	ldr	r1, [r7, #0]
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f000 fb79 	bl	8018626 <USBD_CtlError>
      break;
 8017f34:	e000      	b.n	8017f38 <USBD_StdEPReq+0x330>
      break;
 8017f36:	bf00      	nop
  }

  return ret;
 8017f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3710      	adds	r7, #16
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
	...

08017f44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017f52:	2300      	movs	r3, #0
 8017f54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017f56:	2300      	movs	r3, #0
 8017f58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017f5a:	683b      	ldr	r3, [r7, #0]
 8017f5c:	885b      	ldrh	r3, [r3, #2]
 8017f5e:	0a1b      	lsrs	r3, r3, #8
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	3b01      	subs	r3, #1
 8017f64:	2b0e      	cmp	r3, #14
 8017f66:	f200 8152 	bhi.w	801820e <USBD_GetDescriptor+0x2ca>
 8017f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8017f70 <USBD_GetDescriptor+0x2c>)
 8017f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f70:	08017fe1 	.word	0x08017fe1
 8017f74:	08017ff9 	.word	0x08017ff9
 8017f78:	08018039 	.word	0x08018039
 8017f7c:	0801820f 	.word	0x0801820f
 8017f80:	0801820f 	.word	0x0801820f
 8017f84:	080181af 	.word	0x080181af
 8017f88:	080181db 	.word	0x080181db
 8017f8c:	0801820f 	.word	0x0801820f
 8017f90:	0801820f 	.word	0x0801820f
 8017f94:	0801820f 	.word	0x0801820f
 8017f98:	0801820f 	.word	0x0801820f
 8017f9c:	0801820f 	.word	0x0801820f
 8017fa0:	0801820f 	.word	0x0801820f
 8017fa4:	0801820f 	.word	0x0801820f
 8017fa8:	08017fad 	.word	0x08017fad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fb2:	69db      	ldr	r3, [r3, #28]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d00b      	beq.n	8017fd0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fbe:	69db      	ldr	r3, [r3, #28]
 8017fc0:	687a      	ldr	r2, [r7, #4]
 8017fc2:	7c12      	ldrb	r2, [r2, #16]
 8017fc4:	f107 0108 	add.w	r1, r7, #8
 8017fc8:	4610      	mov	r0, r2
 8017fca:	4798      	blx	r3
 8017fcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017fce:	e126      	b.n	801821e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017fd0:	6839      	ldr	r1, [r7, #0]
 8017fd2:	6878      	ldr	r0, [r7, #4]
 8017fd4:	f000 fb27 	bl	8018626 <USBD_CtlError>
        err++;
 8017fd8:	7afb      	ldrb	r3, [r7, #11]
 8017fda:	3301      	adds	r3, #1
 8017fdc:	72fb      	strb	r3, [r7, #11]
      break;
 8017fde:	e11e      	b.n	801821e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	687a      	ldr	r2, [r7, #4]
 8017fea:	7c12      	ldrb	r2, [r2, #16]
 8017fec:	f107 0108 	add.w	r1, r7, #8
 8017ff0:	4610      	mov	r0, r2
 8017ff2:	4798      	blx	r3
 8017ff4:	60f8      	str	r0, [r7, #12]
      break;
 8017ff6:	e112      	b.n	801821e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	7c1b      	ldrb	r3, [r3, #16]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d10d      	bne.n	801801c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018008:	f107 0208 	add.w	r2, r7, #8
 801800c:	4610      	mov	r0, r2
 801800e:	4798      	blx	r3
 8018010:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	3301      	adds	r3, #1
 8018016:	2202      	movs	r2, #2
 8018018:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801801a:	e100      	b.n	801821e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018024:	f107 0208 	add.w	r2, r7, #8
 8018028:	4610      	mov	r0, r2
 801802a:	4798      	blx	r3
 801802c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	3301      	adds	r3, #1
 8018032:	2202      	movs	r2, #2
 8018034:	701a      	strb	r2, [r3, #0]
      break;
 8018036:	e0f2      	b.n	801821e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	885b      	ldrh	r3, [r3, #2]
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b05      	cmp	r3, #5
 8018040:	f200 80ac 	bhi.w	801819c <USBD_GetDescriptor+0x258>
 8018044:	a201      	add	r2, pc, #4	@ (adr r2, 801804c <USBD_GetDescriptor+0x108>)
 8018046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801804a:	bf00      	nop
 801804c:	08018065 	.word	0x08018065
 8018050:	08018099 	.word	0x08018099
 8018054:	080180cd 	.word	0x080180cd
 8018058:	08018101 	.word	0x08018101
 801805c:	08018135 	.word	0x08018135
 8018060:	08018169 	.word	0x08018169
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d00b      	beq.n	8018088 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	687a      	ldr	r2, [r7, #4]
 801807a:	7c12      	ldrb	r2, [r2, #16]
 801807c:	f107 0108 	add.w	r1, r7, #8
 8018080:	4610      	mov	r0, r2
 8018082:	4798      	blx	r3
 8018084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018086:	e091      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018088:	6839      	ldr	r1, [r7, #0]
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f000 facb 	bl	8018626 <USBD_CtlError>
            err++;
 8018090:	7afb      	ldrb	r3, [r7, #11]
 8018092:	3301      	adds	r3, #1
 8018094:	72fb      	strb	r3, [r7, #11]
          break;
 8018096:	e089      	b.n	80181ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801809e:	689b      	ldr	r3, [r3, #8]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d00b      	beq.n	80180bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80180aa:	689b      	ldr	r3, [r3, #8]
 80180ac:	687a      	ldr	r2, [r7, #4]
 80180ae:	7c12      	ldrb	r2, [r2, #16]
 80180b0:	f107 0108 	add.w	r1, r7, #8
 80180b4:	4610      	mov	r0, r2
 80180b6:	4798      	blx	r3
 80180b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80180ba:	e077      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80180bc:	6839      	ldr	r1, [r7, #0]
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f000 fab1 	bl	8018626 <USBD_CtlError>
            err++;
 80180c4:	7afb      	ldrb	r3, [r7, #11]
 80180c6:	3301      	adds	r3, #1
 80180c8:	72fb      	strb	r3, [r7, #11]
          break;
 80180ca:	e06f      	b.n	80181ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80180d2:	68db      	ldr	r3, [r3, #12]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d00b      	beq.n	80180f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80180de:	68db      	ldr	r3, [r3, #12]
 80180e0:	687a      	ldr	r2, [r7, #4]
 80180e2:	7c12      	ldrb	r2, [r2, #16]
 80180e4:	f107 0108 	add.w	r1, r7, #8
 80180e8:	4610      	mov	r0, r2
 80180ea:	4798      	blx	r3
 80180ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80180ee:	e05d      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80180f0:	6839      	ldr	r1, [r7, #0]
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f000 fa97 	bl	8018626 <USBD_CtlError>
            err++;
 80180f8:	7afb      	ldrb	r3, [r7, #11]
 80180fa:	3301      	adds	r3, #1
 80180fc:	72fb      	strb	r3, [r7, #11]
          break;
 80180fe:	e055      	b.n	80181ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018106:	691b      	ldr	r3, [r3, #16]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d00b      	beq.n	8018124 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018112:	691b      	ldr	r3, [r3, #16]
 8018114:	687a      	ldr	r2, [r7, #4]
 8018116:	7c12      	ldrb	r2, [r2, #16]
 8018118:	f107 0108 	add.w	r1, r7, #8
 801811c:	4610      	mov	r0, r2
 801811e:	4798      	blx	r3
 8018120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018122:	e043      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018124:	6839      	ldr	r1, [r7, #0]
 8018126:	6878      	ldr	r0, [r7, #4]
 8018128:	f000 fa7d 	bl	8018626 <USBD_CtlError>
            err++;
 801812c:	7afb      	ldrb	r3, [r7, #11]
 801812e:	3301      	adds	r3, #1
 8018130:	72fb      	strb	r3, [r7, #11]
          break;
 8018132:	e03b      	b.n	80181ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801813a:	695b      	ldr	r3, [r3, #20]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d00b      	beq.n	8018158 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018146:	695b      	ldr	r3, [r3, #20]
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	7c12      	ldrb	r2, [r2, #16]
 801814c:	f107 0108 	add.w	r1, r7, #8
 8018150:	4610      	mov	r0, r2
 8018152:	4798      	blx	r3
 8018154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018156:	e029      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018158:	6839      	ldr	r1, [r7, #0]
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f000 fa63 	bl	8018626 <USBD_CtlError>
            err++;
 8018160:	7afb      	ldrb	r3, [r7, #11]
 8018162:	3301      	adds	r3, #1
 8018164:	72fb      	strb	r3, [r7, #11]
          break;
 8018166:	e021      	b.n	80181ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801816e:	699b      	ldr	r3, [r3, #24]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d00b      	beq.n	801818c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801817a:	699b      	ldr	r3, [r3, #24]
 801817c:	687a      	ldr	r2, [r7, #4]
 801817e:	7c12      	ldrb	r2, [r2, #16]
 8018180:	f107 0108 	add.w	r1, r7, #8
 8018184:	4610      	mov	r0, r2
 8018186:	4798      	blx	r3
 8018188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801818a:	e00f      	b.n	80181ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801818c:	6839      	ldr	r1, [r7, #0]
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f000 fa49 	bl	8018626 <USBD_CtlError>
            err++;
 8018194:	7afb      	ldrb	r3, [r7, #11]
 8018196:	3301      	adds	r3, #1
 8018198:	72fb      	strb	r3, [r7, #11]
          break;
 801819a:	e007      	b.n	80181ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f000 fa41 	bl	8018626 <USBD_CtlError>
          err++;
 80181a4:	7afb      	ldrb	r3, [r7, #11]
 80181a6:	3301      	adds	r3, #1
 80181a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80181aa:	bf00      	nop
      }
      break;
 80181ac:	e037      	b.n	801821e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	7c1b      	ldrb	r3, [r3, #16]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d109      	bne.n	80181ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181be:	f107 0208 	add.w	r2, r7, #8
 80181c2:	4610      	mov	r0, r2
 80181c4:	4798      	blx	r3
 80181c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80181c8:	e029      	b.n	801821e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80181ca:	6839      	ldr	r1, [r7, #0]
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f000 fa2a 	bl	8018626 <USBD_CtlError>
        err++;
 80181d2:	7afb      	ldrb	r3, [r7, #11]
 80181d4:	3301      	adds	r3, #1
 80181d6:	72fb      	strb	r3, [r7, #11]
      break;
 80181d8:	e021      	b.n	801821e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	7c1b      	ldrb	r3, [r3, #16]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d10d      	bne.n	80181fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181ea:	f107 0208 	add.w	r2, r7, #8
 80181ee:	4610      	mov	r0, r2
 80181f0:	4798      	blx	r3
 80181f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	3301      	adds	r3, #1
 80181f8:	2207      	movs	r2, #7
 80181fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80181fc:	e00f      	b.n	801821e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80181fe:	6839      	ldr	r1, [r7, #0]
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f000 fa10 	bl	8018626 <USBD_CtlError>
        err++;
 8018206:	7afb      	ldrb	r3, [r7, #11]
 8018208:	3301      	adds	r3, #1
 801820a:	72fb      	strb	r3, [r7, #11]
      break;
 801820c:	e007      	b.n	801821e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801820e:	6839      	ldr	r1, [r7, #0]
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f000 fa08 	bl	8018626 <USBD_CtlError>
      err++;
 8018216:	7afb      	ldrb	r3, [r7, #11]
 8018218:	3301      	adds	r3, #1
 801821a:	72fb      	strb	r3, [r7, #11]
      break;
 801821c:	bf00      	nop
  }

  if (err != 0U)
 801821e:	7afb      	ldrb	r3, [r7, #11]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d11e      	bne.n	8018262 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	88db      	ldrh	r3, [r3, #6]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d016      	beq.n	801825a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801822c:	893b      	ldrh	r3, [r7, #8]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d00e      	beq.n	8018250 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	88da      	ldrh	r2, [r3, #6]
 8018236:	893b      	ldrh	r3, [r7, #8]
 8018238:	4293      	cmp	r3, r2
 801823a:	bf28      	it	cs
 801823c:	4613      	movcs	r3, r2
 801823e:	b29b      	uxth	r3, r3
 8018240:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018242:	893b      	ldrh	r3, [r7, #8]
 8018244:	461a      	mov	r2, r3
 8018246:	68f9      	ldr	r1, [r7, #12]
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f000 fa69 	bl	8018720 <USBD_CtlSendData>
 801824e:	e009      	b.n	8018264 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018250:	6839      	ldr	r1, [r7, #0]
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f000 f9e7 	bl	8018626 <USBD_CtlError>
 8018258:	e004      	b.n	8018264 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801825a:	6878      	ldr	r0, [r7, #4]
 801825c:	f000 faba 	bl	80187d4 <USBD_CtlSendStatus>
 8018260:	e000      	b.n	8018264 <USBD_GetDescriptor+0x320>
    return;
 8018262:	bf00      	nop
  }
}
 8018264:	3710      	adds	r7, #16
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
 801826a:	bf00      	nop

0801826c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	889b      	ldrh	r3, [r3, #4]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d131      	bne.n	80182e2 <USBD_SetAddress+0x76>
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	88db      	ldrh	r3, [r3, #6]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d12d      	bne.n	80182e2 <USBD_SetAddress+0x76>
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	885b      	ldrh	r3, [r3, #2]
 801828a:	2b7f      	cmp	r3, #127	@ 0x7f
 801828c:	d829      	bhi.n	80182e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	885b      	ldrh	r3, [r3, #2]
 8018292:	b2db      	uxtb	r3, r3
 8018294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018298:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80182a0:	b2db      	uxtb	r3, r3
 80182a2:	2b03      	cmp	r3, #3
 80182a4:	d104      	bne.n	80182b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80182a6:	6839      	ldr	r1, [r7, #0]
 80182a8:	6878      	ldr	r0, [r7, #4]
 80182aa:	f000 f9bc 	bl	8018626 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182ae:	e01d      	b.n	80182ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	7bfa      	ldrb	r2, [r7, #15]
 80182b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80182b8:	7bfb      	ldrb	r3, [r7, #15]
 80182ba:	4619      	mov	r1, r3
 80182bc:	6878      	ldr	r0, [r7, #4]
 80182be:	f000 ff13 	bl	80190e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f000 fa86 	bl	80187d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80182c8:	7bfb      	ldrb	r3, [r7, #15]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d004      	beq.n	80182d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2202      	movs	r2, #2
 80182d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182d6:	e009      	b.n	80182ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	2201      	movs	r2, #1
 80182dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182e0:	e004      	b.n	80182ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80182e2:	6839      	ldr	r1, [r7, #0]
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f000 f99e 	bl	8018626 <USBD_CtlError>
  }
}
 80182ea:	bf00      	nop
 80182ec:	bf00      	nop
 80182ee:	3710      	adds	r7, #16
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}

080182f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b084      	sub	sp, #16
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
 80182fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80182fe:	2300      	movs	r3, #0
 8018300:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018302:	683b      	ldr	r3, [r7, #0]
 8018304:	885b      	ldrh	r3, [r3, #2]
 8018306:	b2da      	uxtb	r2, r3
 8018308:	4b4e      	ldr	r3, [pc, #312]	@ (8018444 <USBD_SetConfig+0x150>)
 801830a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801830c:	4b4d      	ldr	r3, [pc, #308]	@ (8018444 <USBD_SetConfig+0x150>)
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	2b01      	cmp	r3, #1
 8018312:	d905      	bls.n	8018320 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018314:	6839      	ldr	r1, [r7, #0]
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f000 f985 	bl	8018626 <USBD_CtlError>
    return USBD_FAIL;
 801831c:	2303      	movs	r3, #3
 801831e:	e08c      	b.n	801843a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018326:	b2db      	uxtb	r3, r3
 8018328:	2b02      	cmp	r3, #2
 801832a:	d002      	beq.n	8018332 <USBD_SetConfig+0x3e>
 801832c:	2b03      	cmp	r3, #3
 801832e:	d029      	beq.n	8018384 <USBD_SetConfig+0x90>
 8018330:	e075      	b.n	801841e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018332:	4b44      	ldr	r3, [pc, #272]	@ (8018444 <USBD_SetConfig+0x150>)
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d020      	beq.n	801837c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801833a:	4b42      	ldr	r3, [pc, #264]	@ (8018444 <USBD_SetConfig+0x150>)
 801833c:	781b      	ldrb	r3, [r3, #0]
 801833e:	461a      	mov	r2, r3
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018344:	4b3f      	ldr	r3, [pc, #252]	@ (8018444 <USBD_SetConfig+0x150>)
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	4619      	mov	r1, r3
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7fe ffb9 	bl	80172c2 <USBD_SetClassConfig>
 8018350:	4603      	mov	r3, r0
 8018352:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018354:	7bfb      	ldrb	r3, [r7, #15]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d008      	beq.n	801836c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801835a:	6839      	ldr	r1, [r7, #0]
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f000 f962 	bl	8018626 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2202      	movs	r2, #2
 8018366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801836a:	e065      	b.n	8018438 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f000 fa31 	bl	80187d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2203      	movs	r2, #3
 8018376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801837a:	e05d      	b.n	8018438 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801837c:	6878      	ldr	r0, [r7, #4]
 801837e:	f000 fa29 	bl	80187d4 <USBD_CtlSendStatus>
      break;
 8018382:	e059      	b.n	8018438 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018384:	4b2f      	ldr	r3, [pc, #188]	@ (8018444 <USBD_SetConfig+0x150>)
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d112      	bne.n	80183b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2202      	movs	r2, #2
 8018390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018394:	4b2b      	ldr	r3, [pc, #172]	@ (8018444 <USBD_SetConfig+0x150>)
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	461a      	mov	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801839e:	4b29      	ldr	r3, [pc, #164]	@ (8018444 <USBD_SetConfig+0x150>)
 80183a0:	781b      	ldrb	r3, [r3, #0]
 80183a2:	4619      	mov	r1, r3
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f7fe ffa8 	bl	80172fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80183aa:	6878      	ldr	r0, [r7, #4]
 80183ac:	f000 fa12 	bl	80187d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80183b0:	e042      	b.n	8018438 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80183b2:	4b24      	ldr	r3, [pc, #144]	@ (8018444 <USBD_SetConfig+0x150>)
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	461a      	mov	r2, r3
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	685b      	ldr	r3, [r3, #4]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d02a      	beq.n	8018416 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	685b      	ldr	r3, [r3, #4]
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	4619      	mov	r1, r3
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	f7fe ff96 	bl	80172fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80183ce:	4b1d      	ldr	r3, [pc, #116]	@ (8018444 <USBD_SetConfig+0x150>)
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	461a      	mov	r2, r3
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80183d8:	4b1a      	ldr	r3, [pc, #104]	@ (8018444 <USBD_SetConfig+0x150>)
 80183da:	781b      	ldrb	r3, [r3, #0]
 80183dc:	4619      	mov	r1, r3
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7fe ff6f 	bl	80172c2 <USBD_SetClassConfig>
 80183e4:	4603      	mov	r3, r0
 80183e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80183e8:	7bfb      	ldrb	r3, [r7, #15]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d00f      	beq.n	801840e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80183ee:	6839      	ldr	r1, [r7, #0]
 80183f0:	6878      	ldr	r0, [r7, #4]
 80183f2:	f000 f918 	bl	8018626 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	685b      	ldr	r3, [r3, #4]
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	4619      	mov	r1, r3
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f7fe ff7b 	bl	80172fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2202      	movs	r2, #2
 8018408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801840c:	e014      	b.n	8018438 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f000 f9e0 	bl	80187d4 <USBD_CtlSendStatus>
      break;
 8018414:	e010      	b.n	8018438 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	f000 f9dc 	bl	80187d4 <USBD_CtlSendStatus>
      break;
 801841c:	e00c      	b.n	8018438 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801841e:	6839      	ldr	r1, [r7, #0]
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f000 f900 	bl	8018626 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018426:	4b07      	ldr	r3, [pc, #28]	@ (8018444 <USBD_SetConfig+0x150>)
 8018428:	781b      	ldrb	r3, [r3, #0]
 801842a:	4619      	mov	r1, r3
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f7fe ff64 	bl	80172fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018432:	2303      	movs	r3, #3
 8018434:	73fb      	strb	r3, [r7, #15]
      break;
 8018436:	bf00      	nop
  }

  return ret;
 8018438:	7bfb      	ldrb	r3, [r7, #15]
}
 801843a:	4618      	mov	r0, r3
 801843c:	3710      	adds	r7, #16
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
 8018442:	bf00      	nop
 8018444:	24014510 	.word	0x24014510

08018448 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	88db      	ldrh	r3, [r3, #6]
 8018456:	2b01      	cmp	r3, #1
 8018458:	d004      	beq.n	8018464 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801845a:	6839      	ldr	r1, [r7, #0]
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f000 f8e2 	bl	8018626 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018462:	e023      	b.n	80184ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801846a:	b2db      	uxtb	r3, r3
 801846c:	2b02      	cmp	r3, #2
 801846e:	dc02      	bgt.n	8018476 <USBD_GetConfig+0x2e>
 8018470:	2b00      	cmp	r3, #0
 8018472:	dc03      	bgt.n	801847c <USBD_GetConfig+0x34>
 8018474:	e015      	b.n	80184a2 <USBD_GetConfig+0x5a>
 8018476:	2b03      	cmp	r3, #3
 8018478:	d00b      	beq.n	8018492 <USBD_GetConfig+0x4a>
 801847a:	e012      	b.n	80184a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2200      	movs	r2, #0
 8018480:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	3308      	adds	r3, #8
 8018486:	2201      	movs	r2, #1
 8018488:	4619      	mov	r1, r3
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f000 f948 	bl	8018720 <USBD_CtlSendData>
        break;
 8018490:	e00c      	b.n	80184ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	3304      	adds	r3, #4
 8018496:	2201      	movs	r2, #1
 8018498:	4619      	mov	r1, r3
 801849a:	6878      	ldr	r0, [r7, #4]
 801849c:	f000 f940 	bl	8018720 <USBD_CtlSendData>
        break;
 80184a0:	e004      	b.n	80184ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80184a2:	6839      	ldr	r1, [r7, #0]
 80184a4:	6878      	ldr	r0, [r7, #4]
 80184a6:	f000 f8be 	bl	8018626 <USBD_CtlError>
        break;
 80184aa:	bf00      	nop
}
 80184ac:	bf00      	nop
 80184ae:	3708      	adds	r7, #8
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}

080184b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
 80184bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	3b01      	subs	r3, #1
 80184c8:	2b02      	cmp	r3, #2
 80184ca:	d81e      	bhi.n	801850a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	88db      	ldrh	r3, [r3, #6]
 80184d0:	2b02      	cmp	r3, #2
 80184d2:	d004      	beq.n	80184de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80184d4:	6839      	ldr	r1, [r7, #0]
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f000 f8a5 	bl	8018626 <USBD_CtlError>
        break;
 80184dc:	e01a      	b.n	8018514 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2201      	movs	r2, #1
 80184e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d005      	beq.n	80184fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	68db      	ldr	r3, [r3, #12]
 80184f2:	f043 0202 	orr.w	r2, r3, #2
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	330c      	adds	r3, #12
 80184fe:	2202      	movs	r2, #2
 8018500:	4619      	mov	r1, r3
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f000 f90c 	bl	8018720 <USBD_CtlSendData>
      break;
 8018508:	e004      	b.n	8018514 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801850a:	6839      	ldr	r1, [r7, #0]
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f000 f88a 	bl	8018626 <USBD_CtlError>
      break;
 8018512:	bf00      	nop
  }
}
 8018514:	bf00      	nop
 8018516:	3708      	adds	r7, #8
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}

0801851c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b082      	sub	sp, #8
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	885b      	ldrh	r3, [r3, #2]
 801852a:	2b01      	cmp	r3, #1
 801852c:	d107      	bne.n	801853e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2201      	movs	r2, #1
 8018532:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f000 f94c 	bl	80187d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801853c:	e013      	b.n	8018566 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	885b      	ldrh	r3, [r3, #2]
 8018542:	2b02      	cmp	r3, #2
 8018544:	d10b      	bne.n	801855e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	889b      	ldrh	r3, [r3, #4]
 801854a:	0a1b      	lsrs	r3, r3, #8
 801854c:	b29b      	uxth	r3, r3
 801854e:	b2da      	uxtb	r2, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f000 f93c 	bl	80187d4 <USBD_CtlSendStatus>
}
 801855c:	e003      	b.n	8018566 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801855e:	6839      	ldr	r1, [r7, #0]
 8018560:	6878      	ldr	r0, [r7, #4]
 8018562:	f000 f860 	bl	8018626 <USBD_CtlError>
}
 8018566:	bf00      	nop
 8018568:	3708      	adds	r7, #8
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}

0801856e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801856e:	b580      	push	{r7, lr}
 8018570:	b082      	sub	sp, #8
 8018572:	af00      	add	r7, sp, #0
 8018574:	6078      	str	r0, [r7, #4]
 8018576:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801857e:	b2db      	uxtb	r3, r3
 8018580:	3b01      	subs	r3, #1
 8018582:	2b02      	cmp	r3, #2
 8018584:	d80b      	bhi.n	801859e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	885b      	ldrh	r3, [r3, #2]
 801858a:	2b01      	cmp	r3, #1
 801858c:	d10c      	bne.n	80185a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	2200      	movs	r2, #0
 8018592:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f000 f91c 	bl	80187d4 <USBD_CtlSendStatus>
      }
      break;
 801859c:	e004      	b.n	80185a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801859e:	6839      	ldr	r1, [r7, #0]
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f000 f840 	bl	8018626 <USBD_CtlError>
      break;
 80185a6:	e000      	b.n	80185aa <USBD_ClrFeature+0x3c>
      break;
 80185a8:	bf00      	nop
  }
}
 80185aa:	bf00      	nop
 80185ac:	3708      	adds	r7, #8
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}

080185b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80185b2:	b580      	push	{r7, lr}
 80185b4:	b084      	sub	sp, #16
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
 80185ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	781a      	ldrb	r2, [r3, #0]
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	3301      	adds	r3, #1
 80185cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	781a      	ldrb	r2, [r3, #0]
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	3301      	adds	r3, #1
 80185da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80185dc:	68f8      	ldr	r0, [r7, #12]
 80185de:	f7ff fa16 	bl	8017a0e <SWAPBYTE>
 80185e2:	4603      	mov	r3, r0
 80185e4:	461a      	mov	r2, r3
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	3301      	adds	r3, #1
 80185ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	3301      	adds	r3, #1
 80185f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80185f6:	68f8      	ldr	r0, [r7, #12]
 80185f8:	f7ff fa09 	bl	8017a0e <SWAPBYTE>
 80185fc:	4603      	mov	r3, r0
 80185fe:	461a      	mov	r2, r3
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	3301      	adds	r3, #1
 8018608:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	3301      	adds	r3, #1
 801860e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018610:	68f8      	ldr	r0, [r7, #12]
 8018612:	f7ff f9fc 	bl	8017a0e <SWAPBYTE>
 8018616:	4603      	mov	r3, r0
 8018618:	461a      	mov	r2, r3
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	80da      	strh	r2, [r3, #6]
}
 801861e:	bf00      	nop
 8018620:	3710      	adds	r7, #16
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}

08018626 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018626:	b580      	push	{r7, lr}
 8018628:	b082      	sub	sp, #8
 801862a:	af00      	add	r7, sp, #0
 801862c:	6078      	str	r0, [r7, #4]
 801862e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018630:	2180      	movs	r1, #128	@ 0x80
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f000 fcee 	bl	8019014 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018638:	2100      	movs	r1, #0
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f000 fcea 	bl	8019014 <USBD_LL_StallEP>
}
 8018640:	bf00      	nop
 8018642:	3708      	adds	r7, #8
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}

08018648 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b086      	sub	sp, #24
 801864c:	af00      	add	r7, sp, #0
 801864e:	60f8      	str	r0, [r7, #12]
 8018650:	60b9      	str	r1, [r7, #8]
 8018652:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018654:	2300      	movs	r3, #0
 8018656:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d042      	beq.n	80186e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8018662:	6938      	ldr	r0, [r7, #16]
 8018664:	f000 f842 	bl	80186ec <USBD_GetLen>
 8018668:	4603      	mov	r3, r0
 801866a:	3301      	adds	r3, #1
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018672:	d808      	bhi.n	8018686 <USBD_GetString+0x3e>
 8018674:	6938      	ldr	r0, [r7, #16]
 8018676:	f000 f839 	bl	80186ec <USBD_GetLen>
 801867a:	4603      	mov	r3, r0
 801867c:	3301      	adds	r3, #1
 801867e:	b29b      	uxth	r3, r3
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	b29a      	uxth	r2, r3
 8018684:	e001      	b.n	801868a <USBD_GetString+0x42>
 8018686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801868e:	7dfb      	ldrb	r3, [r7, #23]
 8018690:	68ba      	ldr	r2, [r7, #8]
 8018692:	4413      	add	r3, r2
 8018694:	687a      	ldr	r2, [r7, #4]
 8018696:	7812      	ldrb	r2, [r2, #0]
 8018698:	701a      	strb	r2, [r3, #0]
  idx++;
 801869a:	7dfb      	ldrb	r3, [r7, #23]
 801869c:	3301      	adds	r3, #1
 801869e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80186a0:	7dfb      	ldrb	r3, [r7, #23]
 80186a2:	68ba      	ldr	r2, [r7, #8]
 80186a4:	4413      	add	r3, r2
 80186a6:	2203      	movs	r2, #3
 80186a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80186aa:	7dfb      	ldrb	r3, [r7, #23]
 80186ac:	3301      	adds	r3, #1
 80186ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80186b0:	e013      	b.n	80186da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80186b2:	7dfb      	ldrb	r3, [r7, #23]
 80186b4:	68ba      	ldr	r2, [r7, #8]
 80186b6:	4413      	add	r3, r2
 80186b8:	693a      	ldr	r2, [r7, #16]
 80186ba:	7812      	ldrb	r2, [r2, #0]
 80186bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	3301      	adds	r3, #1
 80186c2:	613b      	str	r3, [r7, #16]
    idx++;
 80186c4:	7dfb      	ldrb	r3, [r7, #23]
 80186c6:	3301      	adds	r3, #1
 80186c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80186ca:	7dfb      	ldrb	r3, [r7, #23]
 80186cc:	68ba      	ldr	r2, [r7, #8]
 80186ce:	4413      	add	r3, r2
 80186d0:	2200      	movs	r2, #0
 80186d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80186d4:	7dfb      	ldrb	r3, [r7, #23]
 80186d6:	3301      	adds	r3, #1
 80186d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d1e7      	bne.n	80186b2 <USBD_GetString+0x6a>
 80186e2:	e000      	b.n	80186e6 <USBD_GetString+0x9e>
    return;
 80186e4:	bf00      	nop
  }
}
 80186e6:	3718      	adds	r7, #24
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}

080186ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80186ec:	b480      	push	{r7}
 80186ee:	b085      	sub	sp, #20
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80186f4:	2300      	movs	r3, #0
 80186f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80186fc:	e005      	b.n	801870a <USBD_GetLen+0x1e>
  {
    len++;
 80186fe:	7bfb      	ldrb	r3, [r7, #15]
 8018700:	3301      	adds	r3, #1
 8018702:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	3301      	adds	r3, #1
 8018708:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d1f5      	bne.n	80186fe <USBD_GetLen+0x12>
  }

  return len;
 8018712:	7bfb      	ldrb	r3, [r7, #15]
}
 8018714:	4618      	mov	r0, r3
 8018716:	3714      	adds	r7, #20
 8018718:	46bd      	mov	sp, r7
 801871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871e:	4770      	bx	lr

08018720 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b084      	sub	sp, #16
 8018724:	af00      	add	r7, sp, #0
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2202      	movs	r2, #2
 8018730:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	687a      	ldr	r2, [r7, #4]
 801873e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	68ba      	ldr	r2, [r7, #8]
 8018744:	2100      	movs	r1, #0
 8018746:	68f8      	ldr	r0, [r7, #12]
 8018748:	f000 fced 	bl	8019126 <USBD_LL_Transmit>

  return USBD_OK;
 801874c:	2300      	movs	r3, #0
}
 801874e:	4618      	mov	r0, r3
 8018750:	3710      	adds	r7, #16
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b084      	sub	sp, #16
 801875a:	af00      	add	r7, sp, #0
 801875c:	60f8      	str	r0, [r7, #12]
 801875e:	60b9      	str	r1, [r7, #8]
 8018760:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	68ba      	ldr	r2, [r7, #8]
 8018766:	2100      	movs	r1, #0
 8018768:	68f8      	ldr	r0, [r7, #12]
 801876a:	f000 fcdc 	bl	8019126 <USBD_LL_Transmit>

  return USBD_OK;
 801876e:	2300      	movs	r3, #0
}
 8018770:	4618      	mov	r0, r3
 8018772:	3710      	adds	r7, #16
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}

08018778 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	60b9      	str	r1, [r7, #8]
 8018782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2203      	movs	r2, #3
 8018788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	687a      	ldr	r2, [r7, #4]
 8018798:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	68ba      	ldr	r2, [r7, #8]
 80187a0:	2100      	movs	r1, #0
 80187a2:	68f8      	ldr	r0, [r7, #12]
 80187a4:	f000 fce0 	bl	8019168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80187a8:	2300      	movs	r3, #0
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3710      	adds	r7, #16
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}

080187b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80187b2:	b580      	push	{r7, lr}
 80187b4:	b084      	sub	sp, #16
 80187b6:	af00      	add	r7, sp, #0
 80187b8:	60f8      	str	r0, [r7, #12]
 80187ba:	60b9      	str	r1, [r7, #8]
 80187bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	68ba      	ldr	r2, [r7, #8]
 80187c2:	2100      	movs	r1, #0
 80187c4:	68f8      	ldr	r0, [r7, #12]
 80187c6:	f000 fccf 	bl	8019168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80187ca:	2300      	movs	r3, #0
}
 80187cc:	4618      	mov	r0, r3
 80187ce:	3710      	adds	r7, #16
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}

080187d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2204      	movs	r2, #4
 80187e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80187e4:	2300      	movs	r3, #0
 80187e6:	2200      	movs	r2, #0
 80187e8:	2100      	movs	r1, #0
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f000 fc9b 	bl	8019126 <USBD_LL_Transmit>

  return USBD_OK;
 80187f0:	2300      	movs	r3, #0
}
 80187f2:	4618      	mov	r0, r3
 80187f4:	3708      	adds	r7, #8
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}

080187fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80187fa:	b580      	push	{r7, lr}
 80187fc:	b082      	sub	sp, #8
 80187fe:	af00      	add	r7, sp, #0
 8018800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2205      	movs	r2, #5
 8018806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801880a:	2300      	movs	r3, #0
 801880c:	2200      	movs	r2, #0
 801880e:	2100      	movs	r1, #0
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f000 fca9 	bl	8019168 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018816:	2300      	movs	r3, #0
}
 8018818:	4618      	mov	r0, r3
 801881a:	3708      	adds	r7, #8
 801881c:	46bd      	mov	sp, r7
 801881e:	bd80      	pop	{r7, pc}

08018820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8018824:	2201      	movs	r2, #1
 8018826:	4913      	ldr	r1, [pc, #76]	@ (8018874 <MX_USB_DEVICE_Init+0x54>)
 8018828:	4813      	ldr	r0, [pc, #76]	@ (8018878 <MX_USB_DEVICE_Init+0x58>)
 801882a:	f7fe fccd 	bl	80171c8 <USBD_Init>
 801882e:	4603      	mov	r3, r0
 8018830:	2b00      	cmp	r3, #0
 8018832:	d001      	beq.n	8018838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018834:	f7e9 fcbe 	bl	80021b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8018838:	4910      	ldr	r1, [pc, #64]	@ (801887c <MX_USB_DEVICE_Init+0x5c>)
 801883a:	480f      	ldr	r0, [pc, #60]	@ (8018878 <MX_USB_DEVICE_Init+0x58>)
 801883c:	f7fe fcf4 	bl	8017228 <USBD_RegisterClass>
 8018840:	4603      	mov	r3, r0
 8018842:	2b00      	cmp	r3, #0
 8018844:	d001      	beq.n	801884a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018846:	f7e9 fcb5 	bl	80021b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801884a:	490d      	ldr	r1, [pc, #52]	@ (8018880 <MX_USB_DEVICE_Init+0x60>)
 801884c:	480a      	ldr	r0, [pc, #40]	@ (8018878 <MX_USB_DEVICE_Init+0x58>)
 801884e:	f7fe fbeb 	bl	8017028 <USBD_CDC_RegisterInterface>
 8018852:	4603      	mov	r3, r0
 8018854:	2b00      	cmp	r3, #0
 8018856:	d001      	beq.n	801885c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018858:	f7e9 fcac 	bl	80021b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801885c:	4806      	ldr	r0, [pc, #24]	@ (8018878 <MX_USB_DEVICE_Init+0x58>)
 801885e:	f7fe fd19 	bl	8017294 <USBD_Start>
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d001      	beq.n	801886c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018868:	f7e9 fca4 	bl	80021b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801886c:	f7f5 f91e 	bl	800daac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018870:	bf00      	nop
 8018872:	bd80      	pop	{r7, pc}
 8018874:	240000e0 	.word	0x240000e0
 8018878:	24014514 	.word	0x24014514
 801887c:	2400004c 	.word	0x2400004c
 8018880:	240000cc 	.word	0x240000cc

08018884 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8018888:	2200      	movs	r2, #0
 801888a:	4905      	ldr	r1, [pc, #20]	@ (80188a0 <CDC_Init_HS+0x1c>)
 801888c:	4805      	ldr	r0, [pc, #20]	@ (80188a4 <CDC_Init_HS+0x20>)
 801888e:	f7fe fbe5 	bl	801705c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8018892:	4905      	ldr	r1, [pc, #20]	@ (80188a8 <CDC_Init_HS+0x24>)
 8018894:	4803      	ldr	r0, [pc, #12]	@ (80188a4 <CDC_Init_HS+0x20>)
 8018896:	f7fe fc03 	bl	80170a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801889a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801889c:	4618      	mov	r0, r3
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	2401c7f0 	.word	0x2401c7f0
 80188a4:	24014514 	.word	0x24014514
 80188a8:	240147f0 	.word	0x240147f0

080188ac <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80188ac:	b480      	push	{r7}
 80188ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80188b0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	46bd      	mov	sp, r7
 80188b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ba:	4770      	bx	lr

080188bc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	4603      	mov	r3, r0
 80188c4:	6039      	str	r1, [r7, #0]
 80188c6:	71fb      	strb	r3, [r7, #7]
 80188c8:	4613      	mov	r3, r2
 80188ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80188cc:	79fb      	ldrb	r3, [r7, #7]
 80188ce:	2b23      	cmp	r3, #35	@ 0x23
 80188d0:	d84a      	bhi.n	8018968 <CDC_Control_HS+0xac>
 80188d2:	a201      	add	r2, pc, #4	@ (adr r2, 80188d8 <CDC_Control_HS+0x1c>)
 80188d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188d8:	08018969 	.word	0x08018969
 80188dc:	08018969 	.word	0x08018969
 80188e0:	08018969 	.word	0x08018969
 80188e4:	08018969 	.word	0x08018969
 80188e8:	08018969 	.word	0x08018969
 80188ec:	08018969 	.word	0x08018969
 80188f0:	08018969 	.word	0x08018969
 80188f4:	08018969 	.word	0x08018969
 80188f8:	08018969 	.word	0x08018969
 80188fc:	08018969 	.word	0x08018969
 8018900:	08018969 	.word	0x08018969
 8018904:	08018969 	.word	0x08018969
 8018908:	08018969 	.word	0x08018969
 801890c:	08018969 	.word	0x08018969
 8018910:	08018969 	.word	0x08018969
 8018914:	08018969 	.word	0x08018969
 8018918:	08018969 	.word	0x08018969
 801891c:	08018969 	.word	0x08018969
 8018920:	08018969 	.word	0x08018969
 8018924:	08018969 	.word	0x08018969
 8018928:	08018969 	.word	0x08018969
 801892c:	08018969 	.word	0x08018969
 8018930:	08018969 	.word	0x08018969
 8018934:	08018969 	.word	0x08018969
 8018938:	08018969 	.word	0x08018969
 801893c:	08018969 	.word	0x08018969
 8018940:	08018969 	.word	0x08018969
 8018944:	08018969 	.word	0x08018969
 8018948:	08018969 	.word	0x08018969
 801894c:	08018969 	.word	0x08018969
 8018950:	08018969 	.word	0x08018969
 8018954:	08018969 	.word	0x08018969
 8018958:	08018969 	.word	0x08018969
 801895c:	08018969 	.word	0x08018969
 8018960:	08018969 	.word	0x08018969
 8018964:	08018969 	.word	0x08018969
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018968:	bf00      	nop
  }

  return (USBD_OK);
 801896a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801896c:	4618      	mov	r0, r3
 801896e:	370c      	adds	r7, #12
 8018970:	46bd      	mov	sp, r7
 8018972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018976:	4770      	bx	lr

08018978 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b082      	sub	sp, #8
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8018982:	6879      	ldr	r1, [r7, #4]
 8018984:	4808      	ldr	r0, [pc, #32]	@ (80189a8 <CDC_Receive_HS+0x30>)
 8018986:	f7fe fb8b 	bl	80170a0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801898a:	4807      	ldr	r0, [pc, #28]	@ (80189a8 <CDC_Receive_HS+0x30>)
 801898c:	f7fe fbe6 	bl	801715c <USBD_CDC_ReceivePacket>

	VibeCheckShell_PutInput(&vc.shell, (char*)Buf, *Len);
 8018990:	683b      	ldr	r3, [r7, #0]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	461a      	mov	r2, r3
 8018996:	6879      	ldr	r1, [r7, #4]
 8018998:	4804      	ldr	r0, [pc, #16]	@ (80189ac <CDC_Receive_HS+0x34>)
 801899a:	f7ed fc11 	bl	80061c0 <VibeCheckShell_PutInput>

	return (USBD_OK);
 801899e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3708      	adds	r7, #8
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	24014514 	.word	0x24014514
 80189ac:	240009b8 	.word	0x240009b8

080189b0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	b084      	sub	sp, #16
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
 80189b8:	460b      	mov	r3, r1
 80189ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80189bc:	2300      	movs	r3, #0
 80189be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80189c0:	4b0d      	ldr	r3, [pc, #52]	@ (80189f8 <CDC_Transmit_HS+0x48>)
 80189c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80189c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d001      	beq.n	80189d6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80189d2:	2301      	movs	r3, #1
 80189d4:	e00b      	b.n	80189ee <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80189d6:	887b      	ldrh	r3, [r7, #2]
 80189d8:	461a      	mov	r2, r3
 80189da:	6879      	ldr	r1, [r7, #4]
 80189dc:	4806      	ldr	r0, [pc, #24]	@ (80189f8 <CDC_Transmit_HS+0x48>)
 80189de:	f7fe fb3d 	bl	801705c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80189e2:	4805      	ldr	r0, [pc, #20]	@ (80189f8 <CDC_Transmit_HS+0x48>)
 80189e4:	f7fe fb7a 	bl	80170dc <USBD_CDC_TransmitPacket>
 80189e8:	4603      	mov	r3, r0
 80189ea:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 12 */
  return result;
 80189ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3710      	adds	r7, #16
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	24014514 	.word	0x24014514

080189fc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b087      	sub	sp, #28
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	60f8      	str	r0, [r7, #12]
 8018a04:	60b9      	str	r1, [r7, #8]
 8018a06:	4613      	mov	r3, r2
 8018a08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	371c      	adds	r7, #28
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
	...

08018a20 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b083      	sub	sp, #12
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	4603      	mov	r3, r0
 8018a28:	6039      	str	r1, [r7, #0]
 8018a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018a2c:	683b      	ldr	r3, [r7, #0]
 8018a2e:	2212      	movs	r2, #18
 8018a30:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8018a32:	4b03      	ldr	r3, [pc, #12]	@ (8018a40 <USBD_HS_DeviceDescriptor+0x20>)
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	370c      	adds	r7, #12
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3e:	4770      	bx	lr
 8018a40:	24000100 	.word	0x24000100

08018a44 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a44:	b480      	push	{r7}
 8018a46:	b083      	sub	sp, #12
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	6039      	str	r1, [r7, #0]
 8018a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a50:	683b      	ldr	r3, [r7, #0]
 8018a52:	2204      	movs	r2, #4
 8018a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a56:	4b03      	ldr	r3, [pc, #12]	@ (8018a64 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018a58:	4618      	mov	r0, r3
 8018a5a:	370c      	adds	r7, #12
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a62:	4770      	bx	lr
 8018a64:	24000114 	.word	0x24000114

08018a68 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	4603      	mov	r3, r0
 8018a70:	6039      	str	r1, [r7, #0]
 8018a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a74:	79fb      	ldrb	r3, [r7, #7]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d105      	bne.n	8018a86 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018a7a:	683a      	ldr	r2, [r7, #0]
 8018a7c:	4907      	ldr	r1, [pc, #28]	@ (8018a9c <USBD_HS_ProductStrDescriptor+0x34>)
 8018a7e:	4808      	ldr	r0, [pc, #32]	@ (8018aa0 <USBD_HS_ProductStrDescriptor+0x38>)
 8018a80:	f7ff fde2 	bl	8018648 <USBD_GetString>
 8018a84:	e004      	b.n	8018a90 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018a86:	683a      	ldr	r2, [r7, #0]
 8018a88:	4904      	ldr	r1, [pc, #16]	@ (8018a9c <USBD_HS_ProductStrDescriptor+0x34>)
 8018a8a:	4805      	ldr	r0, [pc, #20]	@ (8018aa0 <USBD_HS_ProductStrDescriptor+0x38>)
 8018a8c:	f7ff fddc 	bl	8018648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a90:	4b02      	ldr	r3, [pc, #8]	@ (8018a9c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3708      	adds	r7, #8
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	2401cff0 	.word	0x2401cff0
 8018aa0:	0801e368 	.word	0x0801e368

08018aa4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b082      	sub	sp, #8
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	4603      	mov	r3, r0
 8018aac:	6039      	str	r1, [r7, #0]
 8018aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018ab0:	683a      	ldr	r2, [r7, #0]
 8018ab2:	4904      	ldr	r1, [pc, #16]	@ (8018ac4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8018ab4:	4804      	ldr	r0, [pc, #16]	@ (8018ac8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8018ab6:	f7ff fdc7 	bl	8018648 <USBD_GetString>
  return USBD_StrDesc;
 8018aba:	4b02      	ldr	r3, [pc, #8]	@ (8018ac4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018abc:	4618      	mov	r0, r3
 8018abe:	3708      	adds	r7, #8
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bd80      	pop	{r7, pc}
 8018ac4:	2401cff0 	.word	0x2401cff0
 8018ac8:	0801e374 	.word	0x0801e374

08018acc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	6039      	str	r1, [r7, #0]
 8018ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018ad8:	683b      	ldr	r3, [r7, #0]
 8018ada:	221a      	movs	r2, #26
 8018adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018ade:	f000 f843 	bl	8018b68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018ae2:	4b02      	ldr	r3, [pc, #8]	@ (8018aec <USBD_HS_SerialStrDescriptor+0x20>)
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3708      	adds	r7, #8
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}
 8018aec:	24000118 	.word	0x24000118

08018af0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b082      	sub	sp, #8
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	4603      	mov	r3, r0
 8018af8:	6039      	str	r1, [r7, #0]
 8018afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018afc:	79fb      	ldrb	r3, [r7, #7]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d105      	bne.n	8018b0e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018b02:	683a      	ldr	r2, [r7, #0]
 8018b04:	4907      	ldr	r1, [pc, #28]	@ (8018b24 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018b06:	4808      	ldr	r0, [pc, #32]	@ (8018b28 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018b08:	f7ff fd9e 	bl	8018648 <USBD_GetString>
 8018b0c:	e004      	b.n	8018b18 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8018b0e:	683a      	ldr	r2, [r7, #0]
 8018b10:	4904      	ldr	r1, [pc, #16]	@ (8018b24 <USBD_HS_ConfigStrDescriptor+0x34>)
 8018b12:	4805      	ldr	r0, [pc, #20]	@ (8018b28 <USBD_HS_ConfigStrDescriptor+0x38>)
 8018b14:	f7ff fd98 	bl	8018648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b18:	4b02      	ldr	r3, [pc, #8]	@ (8018b24 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3708      	adds	r7, #8
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bd80      	pop	{r7, pc}
 8018b22:	bf00      	nop
 8018b24:	2401cff0 	.word	0x2401cff0
 8018b28:	0801e380 	.word	0x0801e380

08018b2c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b082      	sub	sp, #8
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	4603      	mov	r3, r0
 8018b34:	6039      	str	r1, [r7, #0]
 8018b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b38:	79fb      	ldrb	r3, [r7, #7]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d105      	bne.n	8018b4a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018b3e:	683a      	ldr	r2, [r7, #0]
 8018b40:	4907      	ldr	r1, [pc, #28]	@ (8018b60 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018b42:	4808      	ldr	r0, [pc, #32]	@ (8018b64 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018b44:	f7ff fd80 	bl	8018648 <USBD_GetString>
 8018b48:	e004      	b.n	8018b54 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8018b4a:	683a      	ldr	r2, [r7, #0]
 8018b4c:	4904      	ldr	r1, [pc, #16]	@ (8018b60 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8018b4e:	4805      	ldr	r0, [pc, #20]	@ (8018b64 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8018b50:	f7ff fd7a 	bl	8018648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b54:	4b02      	ldr	r3, [pc, #8]	@ (8018b60 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8018b56:	4618      	mov	r0, r3
 8018b58:	3708      	adds	r7, #8
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	2401cff0 	.word	0x2401cff0
 8018b64:	0801e38c 	.word	0x0801e38c

08018b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b084      	sub	sp, #16
 8018b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8018bac <Get_SerialNum+0x44>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b74:	4b0e      	ldr	r3, [pc, #56]	@ (8018bb0 <Get_SerialNum+0x48>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8018bb4 <Get_SerialNum+0x4c>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018b80:	68fa      	ldr	r2, [r7, #12]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4413      	add	r3, r2
 8018b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d009      	beq.n	8018ba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018b8e:	2208      	movs	r2, #8
 8018b90:	4909      	ldr	r1, [pc, #36]	@ (8018bb8 <Get_SerialNum+0x50>)
 8018b92:	68f8      	ldr	r0, [r7, #12]
 8018b94:	f000 f814 	bl	8018bc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018b98:	2204      	movs	r2, #4
 8018b9a:	4908      	ldr	r1, [pc, #32]	@ (8018bbc <Get_SerialNum+0x54>)
 8018b9c:	68b8      	ldr	r0, [r7, #8]
 8018b9e:	f000 f80f 	bl	8018bc0 <IntToUnicode>
  }
}
 8018ba2:	bf00      	nop
 8018ba4:	3710      	adds	r7, #16
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	1ff1e800 	.word	0x1ff1e800
 8018bb0:	1ff1e804 	.word	0x1ff1e804
 8018bb4:	1ff1e808 	.word	0x1ff1e808
 8018bb8:	2400011a 	.word	0x2400011a
 8018bbc:	2400012a 	.word	0x2400012a

08018bc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	b087      	sub	sp, #28
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	60f8      	str	r0, [r7, #12]
 8018bc8:	60b9      	str	r1, [r7, #8]
 8018bca:	4613      	mov	r3, r2
 8018bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	75fb      	strb	r3, [r7, #23]
 8018bd6:	e027      	b.n	8018c28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	0f1b      	lsrs	r3, r3, #28
 8018bdc:	2b09      	cmp	r3, #9
 8018bde:	d80b      	bhi.n	8018bf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	0f1b      	lsrs	r3, r3, #28
 8018be4:	b2da      	uxtb	r2, r3
 8018be6:	7dfb      	ldrb	r3, [r7, #23]
 8018be8:	005b      	lsls	r3, r3, #1
 8018bea:	4619      	mov	r1, r3
 8018bec:	68bb      	ldr	r3, [r7, #8]
 8018bee:	440b      	add	r3, r1
 8018bf0:	3230      	adds	r2, #48	@ 0x30
 8018bf2:	b2d2      	uxtb	r2, r2
 8018bf4:	701a      	strb	r2, [r3, #0]
 8018bf6:	e00a      	b.n	8018c0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	0f1b      	lsrs	r3, r3, #28
 8018bfc:	b2da      	uxtb	r2, r3
 8018bfe:	7dfb      	ldrb	r3, [r7, #23]
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	4619      	mov	r1, r3
 8018c04:	68bb      	ldr	r3, [r7, #8]
 8018c06:	440b      	add	r3, r1
 8018c08:	3237      	adds	r2, #55	@ 0x37
 8018c0a:	b2d2      	uxtb	r2, r2
 8018c0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018c0e:	68fb      	ldr	r3, [r7, #12]
 8018c10:	011b      	lsls	r3, r3, #4
 8018c12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018c14:	7dfb      	ldrb	r3, [r7, #23]
 8018c16:	005b      	lsls	r3, r3, #1
 8018c18:	3301      	adds	r3, #1
 8018c1a:	68ba      	ldr	r2, [r7, #8]
 8018c1c:	4413      	add	r3, r2
 8018c1e:	2200      	movs	r2, #0
 8018c20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c22:	7dfb      	ldrb	r3, [r7, #23]
 8018c24:	3301      	adds	r3, #1
 8018c26:	75fb      	strb	r3, [r7, #23]
 8018c28:	7dfa      	ldrb	r2, [r7, #23]
 8018c2a:	79fb      	ldrb	r3, [r7, #7]
 8018c2c:	429a      	cmp	r2, r3
 8018c2e:	d3d3      	bcc.n	8018bd8 <IntToUnicode+0x18>
  }
}
 8018c30:	bf00      	nop
 8018c32:	bf00      	nop
 8018c34:	371c      	adds	r7, #28
 8018c36:	46bd      	mov	sp, r7
 8018c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3c:	4770      	bx	lr
	...

08018c40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b0b2      	sub	sp, #200	@ 0xc8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018c48:	f107 0310 	add.w	r3, r7, #16
 8018c4c:	22b8      	movs	r2, #184	@ 0xb8
 8018c4e:	2100      	movs	r1, #0
 8018c50:	4618      	mov	r0, r3
 8018c52:	f001 fea6 	bl	801a9a2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8018cc4 <HAL_PCD_MspInit+0x84>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d12c      	bne.n	8018cba <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018c60:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018c64:	f04f 0300 	mov.w	r3, #0
 8018c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018c6c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8018c70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018c74:	f107 0310 	add.w	r3, r7, #16
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f7f5 fe8d 	bl	800e998 <HAL_RCCEx_PeriphCLKConfig>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d001      	beq.n	8018c88 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8018c84:	f7e9 fa96 	bl	80021b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018c88:	f7f4 ff10 	bl	800daac <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8018c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8018cc8 <HAL_PCD_MspInit+0x88>)
 8018c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018c92:	4a0d      	ldr	r2, [pc, #52]	@ (8018cc8 <HAL_PCD_MspInit+0x88>)
 8018c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018c98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8018cc8 <HAL_PCD_MspInit+0x88>)
 8018c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018ca6:	60fb      	str	r3, [r7, #12]
 8018ca8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 1);
 8018caa:	2201      	movs	r2, #1
 8018cac:	2101      	movs	r1, #1
 8018cae:	204d      	movs	r0, #77	@ 0x4d
 8018cb0:	f7f0 fcc3 	bl	800963a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018cb4:	204d      	movs	r0, #77	@ 0x4d
 8018cb6:	f7f0 fcda 	bl	800966e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018cba:	bf00      	nop
 8018cbc:	37c8      	adds	r7, #200	@ 0xc8
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	40040000 	.word	0x40040000
 8018cc8:	58024400 	.word	0x58024400

08018ccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b082      	sub	sp, #8
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	4610      	mov	r0, r2
 8018ce4:	f7fe fb23 	bl	801732e <USBD_LL_SetupStage>
}
 8018ce8:	bf00      	nop
 8018cea:	3708      	adds	r7, #8
 8018cec:	46bd      	mov	sp, r7
 8018cee:	bd80      	pop	{r7, pc}

08018cf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b082      	sub	sp, #8
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
 8018cf8:	460b      	mov	r3, r1
 8018cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018d02:	78fa      	ldrb	r2, [r7, #3]
 8018d04:	6879      	ldr	r1, [r7, #4]
 8018d06:	4613      	mov	r3, r2
 8018d08:	00db      	lsls	r3, r3, #3
 8018d0a:	4413      	add	r3, r2
 8018d0c:	009b      	lsls	r3, r3, #2
 8018d0e:	440b      	add	r3, r1
 8018d10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018d14:	681a      	ldr	r2, [r3, #0]
 8018d16:	78fb      	ldrb	r3, [r7, #3]
 8018d18:	4619      	mov	r1, r3
 8018d1a:	f7fe fb5d 	bl	80173d8 <USBD_LL_DataOutStage>
}
 8018d1e:	bf00      	nop
 8018d20:	3708      	adds	r7, #8
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}

08018d26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d26:	b580      	push	{r7, lr}
 8018d28:	b082      	sub	sp, #8
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	6078      	str	r0, [r7, #4]
 8018d2e:	460b      	mov	r3, r1
 8018d30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018d38:	78fa      	ldrb	r2, [r7, #3]
 8018d3a:	6879      	ldr	r1, [r7, #4]
 8018d3c:	4613      	mov	r3, r2
 8018d3e:	00db      	lsls	r3, r3, #3
 8018d40:	4413      	add	r3, r2
 8018d42:	009b      	lsls	r3, r3, #2
 8018d44:	440b      	add	r3, r1
 8018d46:	3320      	adds	r3, #32
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	78fb      	ldrb	r3, [r7, #3]
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	f7fe fbf6 	bl	801753e <USBD_LL_DataInStage>
}
 8018d52:	bf00      	nop
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d5a:	b580      	push	{r7, lr}
 8018d5c:	b082      	sub	sp, #8
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7fe fd30 	bl	80177ce <USBD_LL_SOF>
}
 8018d6e:	bf00      	nop
 8018d70:	3708      	adds	r7, #8
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}

08018d76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d76:	b580      	push	{r7, lr}
 8018d78:	b084      	sub	sp, #16
 8018d7a:	af00      	add	r7, sp, #0
 8018d7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018d7e:	2301      	movs	r3, #1
 8018d80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	79db      	ldrb	r3, [r3, #7]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d102      	bne.n	8018d90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	73fb      	strb	r3, [r7, #15]
 8018d8e:	e008      	b.n	8018da2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	79db      	ldrb	r3, [r3, #7]
 8018d94:	2b02      	cmp	r3, #2
 8018d96:	d102      	bne.n	8018d9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	73fb      	strb	r3, [r7, #15]
 8018d9c:	e001      	b.n	8018da2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018d9e:	f7e9 fa09 	bl	80021b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018da8:	7bfa      	ldrb	r2, [r7, #15]
 8018daa:	4611      	mov	r1, r2
 8018dac:	4618      	mov	r0, r3
 8018dae:	f7fe fcca 	bl	8017746 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7fe fc72 	bl	80176a2 <USBD_LL_Reset>
}
 8018dbe:	bf00      	nop
 8018dc0:	3710      	adds	r7, #16
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}
	...

08018dc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f7fe fcc5 	bl	8017766 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	6812      	ldr	r2, [r2, #0]
 8018dea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018dee:	f043 0301 	orr.w	r3, r3, #1
 8018df2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	7adb      	ldrb	r3, [r3, #11]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d005      	beq.n	8018e08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018dfc:	4b04      	ldr	r3, [pc, #16]	@ (8018e10 <HAL_PCD_SuspendCallback+0x48>)
 8018dfe:	691b      	ldr	r3, [r3, #16]
 8018e00:	4a03      	ldr	r2, [pc, #12]	@ (8018e10 <HAL_PCD_SuspendCallback+0x48>)
 8018e02:	f043 0306 	orr.w	r3, r3, #6
 8018e06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018e08:	bf00      	nop
 8018e0a:	3708      	adds	r7, #8
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	e000ed00 	.word	0xe000ed00

08018e14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e22:	4618      	mov	r0, r3
 8018e24:	f7fe fcbb 	bl	801779e <USBD_LL_Resume>
}
 8018e28:	bf00      	nop
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	460b      	mov	r3, r1
 8018e3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e42:	78fa      	ldrb	r2, [r7, #3]
 8018e44:	4611      	mov	r1, r2
 8018e46:	4618      	mov	r0, r3
 8018e48:	f7fe fd13 	bl	8017872 <USBD_LL_IsoOUTIncomplete>
}
 8018e4c:	bf00      	nop
 8018e4e:	3708      	adds	r7, #8
 8018e50:	46bd      	mov	sp, r7
 8018e52:	bd80      	pop	{r7, pc}

08018e54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e66:	78fa      	ldrb	r2, [r7, #3]
 8018e68:	4611      	mov	r1, r2
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7fe fccf 	bl	801780e <USBD_LL_IsoINIncomplete>
}
 8018e70:	bf00      	nop
 8018e72:	3708      	adds	r7, #8
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}

08018e78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b082      	sub	sp, #8
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018e86:	4618      	mov	r0, r3
 8018e88:	f7fe fd25 	bl	80178d6 <USBD_LL_DevConnected>
}
 8018e8c:	bf00      	nop
 8018e8e:	3708      	adds	r7, #8
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd80      	pop	{r7, pc}

08018e94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b082      	sub	sp, #8
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7fe fd22 	bl	80178ec <USBD_LL_DevDisconnected>
}
 8018ea8:	bf00      	nop
 8018eaa:	3708      	adds	r7, #8
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}

08018eb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b082      	sub	sp, #8
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	781b      	ldrb	r3, [r3, #0]
 8018ebc:	2b01      	cmp	r3, #1
 8018ebe:	d140      	bne.n	8018f42 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8018ec0:	4a22      	ldr	r2, [pc, #136]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	4a20      	ldr	r2, [pc, #128]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ecc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8018ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8018f50 <USBD_LL_Init+0xa0>)
 8018ed4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8018ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ed8:	2209      	movs	r2, #9
 8018eda:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018edc:	4b1b      	ldr	r3, [pc, #108]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ede:	2202      	movs	r2, #2
 8018ee0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8018ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018ee8:	4b18      	ldr	r3, [pc, #96]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018eea:	2202      	movs	r2, #2
 8018eec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8018eee:	4b17      	ldr	r3, [pc, #92]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8018ef4:	4b15      	ldr	r3, [pc, #84]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018efa:	4b14      	ldr	r3, [pc, #80]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018efc:	2200      	movs	r2, #0
 8018efe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8018f00:	4b12      	ldr	r3, [pc, #72]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f02:	2200      	movs	r2, #0
 8018f04:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8018f06:	4b11      	ldr	r3, [pc, #68]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f08:	2200      	movs	r2, #0
 8018f0a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f0e:	2200      	movs	r2, #0
 8018f10:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8018f12:	480e      	ldr	r0, [pc, #56]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f14:	f7f3 faf1 	bl	800c4fa <HAL_PCD_Init>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d001      	beq.n	8018f22 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018f1e:	f7e9 f949 	bl	80021b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8018f22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018f26:	4809      	ldr	r0, [pc, #36]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f28:	f7f4 fd45 	bl	800d9b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8018f2c:	2280      	movs	r2, #128	@ 0x80
 8018f2e:	2100      	movs	r1, #0
 8018f30:	4806      	ldr	r0, [pc, #24]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f32:	f7f4 fcf9 	bl	800d928 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8018f36:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8018f3a:	2101      	movs	r1, #1
 8018f3c:	4803      	ldr	r0, [pc, #12]	@ (8018f4c <USBD_LL_Init+0x9c>)
 8018f3e:	f7f4 fcf3 	bl	800d928 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8018f42:	2300      	movs	r3, #0
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3708      	adds	r7, #8
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	2401d1f0 	.word	0x2401d1f0
 8018f50:	40040000 	.word	0x40040000

08018f54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f60:	2300      	movs	r3, #0
 8018f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7f3 fbd1 	bl	800c712 <HAL_PCD_Start>
 8018f70:	4603      	mov	r3, r0
 8018f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f74:	7bfb      	ldrb	r3, [r7, #15]
 8018f76:	4618      	mov	r0, r3
 8018f78:	f000 f942 	bl	8019200 <USBD_Get_USB_Status>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f82:	4618      	mov	r0, r3
 8018f84:	3710      	adds	r7, #16
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}

08018f8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018f8a:	b580      	push	{r7, lr}
 8018f8c:	b084      	sub	sp, #16
 8018f8e:	af00      	add	r7, sp, #0
 8018f90:	6078      	str	r0, [r7, #4]
 8018f92:	4608      	mov	r0, r1
 8018f94:	4611      	mov	r1, r2
 8018f96:	461a      	mov	r2, r3
 8018f98:	4603      	mov	r3, r0
 8018f9a:	70fb      	strb	r3, [r7, #3]
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	70bb      	strb	r3, [r7, #2]
 8018fa0:	4613      	mov	r3, r2
 8018fa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018fb2:	78bb      	ldrb	r3, [r7, #2]
 8018fb4:	883a      	ldrh	r2, [r7, #0]
 8018fb6:	78f9      	ldrb	r1, [r7, #3]
 8018fb8:	f7f4 f8d2 	bl	800d160 <HAL_PCD_EP_Open>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018fc0:	7bfb      	ldrb	r3, [r7, #15]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f000 f91c 	bl	8019200 <USBD_Get_USB_Status>
 8018fc8:	4603      	mov	r3, r0
 8018fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	3710      	adds	r7, #16
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}

08018fd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fd6:	b580      	push	{r7, lr}
 8018fd8:	b084      	sub	sp, #16
 8018fda:	af00      	add	r7, sp, #0
 8018fdc:	6078      	str	r0, [r7, #4]
 8018fde:	460b      	mov	r3, r1
 8018fe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ff0:	78fa      	ldrb	r2, [r7, #3]
 8018ff2:	4611      	mov	r1, r2
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7f4 f91b 	bl	800d230 <HAL_PCD_EP_Close>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ffe:	7bfb      	ldrb	r3, [r7, #15]
 8019000:	4618      	mov	r0, r3
 8019002:	f000 f8fd 	bl	8019200 <USBD_Get_USB_Status>
 8019006:	4603      	mov	r3, r0
 8019008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801900a:	7bbb      	ldrb	r3, [r7, #14]
}
 801900c:	4618      	mov	r0, r3
 801900e:	3710      	adds	r7, #16
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	460b      	mov	r3, r1
 801901e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019020:	2300      	movs	r3, #0
 8019022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019024:	2300      	movs	r3, #0
 8019026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801902e:	78fa      	ldrb	r2, [r7, #3]
 8019030:	4611      	mov	r1, r2
 8019032:	4618      	mov	r0, r3
 8019034:	f7f4 f9d3 	bl	800d3de <HAL_PCD_EP_SetStall>
 8019038:	4603      	mov	r3, r0
 801903a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801903c:	7bfb      	ldrb	r3, [r7, #15]
 801903e:	4618      	mov	r0, r3
 8019040:	f000 f8de 	bl	8019200 <USBD_Get_USB_Status>
 8019044:	4603      	mov	r3, r0
 8019046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019048:	7bbb      	ldrb	r3, [r7, #14]
}
 801904a:	4618      	mov	r0, r3
 801904c:	3710      	adds	r7, #16
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}

08019052 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019052:	b580      	push	{r7, lr}
 8019054:	b084      	sub	sp, #16
 8019056:	af00      	add	r7, sp, #0
 8019058:	6078      	str	r0, [r7, #4]
 801905a:	460b      	mov	r3, r1
 801905c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801905e:	2300      	movs	r3, #0
 8019060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019062:	2300      	movs	r3, #0
 8019064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801906c:	78fa      	ldrb	r2, [r7, #3]
 801906e:	4611      	mov	r1, r2
 8019070:	4618      	mov	r0, r3
 8019072:	f7f4 fa17 	bl	800d4a4 <HAL_PCD_EP_ClrStall>
 8019076:	4603      	mov	r3, r0
 8019078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801907a:	7bfb      	ldrb	r3, [r7, #15]
 801907c:	4618      	mov	r0, r3
 801907e:	f000 f8bf 	bl	8019200 <USBD_Get_USB_Status>
 8019082:	4603      	mov	r3, r0
 8019084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019086:	7bbb      	ldrb	r3, [r7, #14]
}
 8019088:	4618      	mov	r0, r3
 801908a:	3710      	adds	r7, #16
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019090:	b480      	push	{r7}
 8019092:	b085      	sub	sp, #20
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	460b      	mov	r3, r1
 801909a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80190a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	da0b      	bge.n	80190c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80190ac:	78fb      	ldrb	r3, [r7, #3]
 80190ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80190b2:	68f9      	ldr	r1, [r7, #12]
 80190b4:	4613      	mov	r3, r2
 80190b6:	00db      	lsls	r3, r3, #3
 80190b8:	4413      	add	r3, r2
 80190ba:	009b      	lsls	r3, r3, #2
 80190bc:	440b      	add	r3, r1
 80190be:	3316      	adds	r3, #22
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	e00b      	b.n	80190dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80190c4:	78fb      	ldrb	r3, [r7, #3]
 80190c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80190ca:	68f9      	ldr	r1, [r7, #12]
 80190cc:	4613      	mov	r3, r2
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	4413      	add	r3, r2
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	440b      	add	r3, r1
 80190d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80190da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80190dc:	4618      	mov	r0, r3
 80190de:	3714      	adds	r7, #20
 80190e0:	46bd      	mov	sp, r7
 80190e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e6:	4770      	bx	lr

080190e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b084      	sub	sp, #16
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
 80190f0:	460b      	mov	r3, r1
 80190f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190f4:	2300      	movs	r3, #0
 80190f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190f8:	2300      	movs	r3, #0
 80190fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019102:	78fa      	ldrb	r2, [r7, #3]
 8019104:	4611      	mov	r1, r2
 8019106:	4618      	mov	r0, r3
 8019108:	f7f4 f806 	bl	800d118 <HAL_PCD_SetAddress>
 801910c:	4603      	mov	r3, r0
 801910e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019110:	7bfb      	ldrb	r3, [r7, #15]
 8019112:	4618      	mov	r0, r3
 8019114:	f000 f874 	bl	8019200 <USBD_Get_USB_Status>
 8019118:	4603      	mov	r3, r0
 801911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801911c:	7bbb      	ldrb	r3, [r7, #14]
}
 801911e:	4618      	mov	r0, r3
 8019120:	3710      	adds	r7, #16
 8019122:	46bd      	mov	sp, r7
 8019124:	bd80      	pop	{r7, pc}

08019126 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019126:	b580      	push	{r7, lr}
 8019128:	b086      	sub	sp, #24
 801912a:	af00      	add	r7, sp, #0
 801912c:	60f8      	str	r0, [r7, #12]
 801912e:	607a      	str	r2, [r7, #4]
 8019130:	603b      	str	r3, [r7, #0]
 8019132:	460b      	mov	r3, r1
 8019134:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019136:	2300      	movs	r3, #0
 8019138:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801913a:	2300      	movs	r3, #0
 801913c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019144:	7af9      	ldrb	r1, [r7, #11]
 8019146:	683b      	ldr	r3, [r7, #0]
 8019148:	687a      	ldr	r2, [r7, #4]
 801914a:	f7f4 f90e 	bl	800d36a <HAL_PCD_EP_Transmit>
 801914e:	4603      	mov	r3, r0
 8019150:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019152:	7dfb      	ldrb	r3, [r7, #23]
 8019154:	4618      	mov	r0, r3
 8019156:	f000 f853 	bl	8019200 <USBD_Get_USB_Status>
 801915a:	4603      	mov	r3, r0
 801915c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801915e:	7dbb      	ldrb	r3, [r7, #22]
}
 8019160:	4618      	mov	r0, r3
 8019162:	3718      	adds	r7, #24
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}

08019168 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b086      	sub	sp, #24
 801916c:	af00      	add	r7, sp, #0
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	607a      	str	r2, [r7, #4]
 8019172:	603b      	str	r3, [r7, #0]
 8019174:	460b      	mov	r3, r1
 8019176:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019178:	2300      	movs	r3, #0
 801917a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801917c:	2300      	movs	r3, #0
 801917e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019186:	7af9      	ldrb	r1, [r7, #11]
 8019188:	683b      	ldr	r3, [r7, #0]
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	f7f4 f89a 	bl	800d2c4 <HAL_PCD_EP_Receive>
 8019190:	4603      	mov	r3, r0
 8019192:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019194:	7dfb      	ldrb	r3, [r7, #23]
 8019196:	4618      	mov	r0, r3
 8019198:	f000 f832 	bl	8019200 <USBD_Get_USB_Status>
 801919c:	4603      	mov	r3, r0
 801919e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80191a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80191a2:	4618      	mov	r0, r3
 80191a4:	3718      	adds	r7, #24
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}

080191aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191aa:	b580      	push	{r7, lr}
 80191ac:	b082      	sub	sp, #8
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
 80191b2:	460b      	mov	r3, r1
 80191b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191bc:	78fa      	ldrb	r2, [r7, #3]
 80191be:	4611      	mov	r1, r2
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7f4 f8ba 	bl	800d33a <HAL_PCD_EP_GetRxCount>
 80191c6:	4603      	mov	r3, r0
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	3708      	adds	r7, #8
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd80      	pop	{r7, pc}

080191d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80191d0:	b480      	push	{r7}
 80191d2:	b083      	sub	sp, #12
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80191d8:	4b03      	ldr	r3, [pc, #12]	@ (80191e8 <USBD_static_malloc+0x18>)
}
 80191da:	4618      	mov	r0, r3
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr
 80191e6:	bf00      	nop
 80191e8:	2401d6d4 	.word	0x2401d6d4

080191ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80191ec:	b480      	push	{r7}
 80191ee:	b083      	sub	sp, #12
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80191f4:	bf00      	nop
 80191f6:	370c      	adds	r7, #12
 80191f8:	46bd      	mov	sp, r7
 80191fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fe:	4770      	bx	lr

08019200 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019200:	b480      	push	{r7}
 8019202:	b085      	sub	sp, #20
 8019204:	af00      	add	r7, sp, #0
 8019206:	4603      	mov	r3, r0
 8019208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801920a:	2300      	movs	r3, #0
 801920c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801920e:	79fb      	ldrb	r3, [r7, #7]
 8019210:	2b03      	cmp	r3, #3
 8019212:	d817      	bhi.n	8019244 <USBD_Get_USB_Status+0x44>
 8019214:	a201      	add	r2, pc, #4	@ (adr r2, 801921c <USBD_Get_USB_Status+0x1c>)
 8019216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801921a:	bf00      	nop
 801921c:	0801922d 	.word	0x0801922d
 8019220:	08019233 	.word	0x08019233
 8019224:	08019239 	.word	0x08019239
 8019228:	0801923f 	.word	0x0801923f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801922c:	2300      	movs	r3, #0
 801922e:	73fb      	strb	r3, [r7, #15]
    break;
 8019230:	e00b      	b.n	801924a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019232:	2303      	movs	r3, #3
 8019234:	73fb      	strb	r3, [r7, #15]
    break;
 8019236:	e008      	b.n	801924a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019238:	2301      	movs	r3, #1
 801923a:	73fb      	strb	r3, [r7, #15]
    break;
 801923c:	e005      	b.n	801924a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801923e:	2303      	movs	r3, #3
 8019240:	73fb      	strb	r3, [r7, #15]
    break;
 8019242:	e002      	b.n	801924a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019244:	2303      	movs	r3, #3
 8019246:	73fb      	strb	r3, [r7, #15]
    break;
 8019248:	bf00      	nop
  }
  return usb_status;
 801924a:	7bfb      	ldrb	r3, [r7, #15]
}
 801924c:	4618      	mov	r0, r3
 801924e:	3714      	adds	r7, #20
 8019250:	46bd      	mov	sp, r7
 8019252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019256:	4770      	bx	lr

08019258 <atof>:
 8019258:	2100      	movs	r1, #0
 801925a:	f000 bdb7 	b.w	8019dcc <strtod>

0801925e <atoi>:
 801925e:	220a      	movs	r2, #10
 8019260:	2100      	movs	r1, #0
 8019262:	f000 be39 	b.w	8019ed8 <strtol>

08019266 <sulp>:
 8019266:	b570      	push	{r4, r5, r6, lr}
 8019268:	4604      	mov	r4, r0
 801926a:	460d      	mov	r5, r1
 801926c:	4616      	mov	r6, r2
 801926e:	ec45 4b10 	vmov	d0, r4, r5
 8019272:	f003 f9eb 	bl	801c64c <__ulp>
 8019276:	b17e      	cbz	r6, 8019298 <sulp+0x32>
 8019278:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801927c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019280:	2b00      	cmp	r3, #0
 8019282:	dd09      	ble.n	8019298 <sulp+0x32>
 8019284:	051b      	lsls	r3, r3, #20
 8019286:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801928a:	2000      	movs	r0, #0
 801928c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8019290:	ec41 0b17 	vmov	d7, r0, r1
 8019294:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019298:	bd70      	pop	{r4, r5, r6, pc}
 801929a:	0000      	movs	r0, r0
 801929c:	0000      	movs	r0, r0
	...

080192a0 <_strtod_l>:
 80192a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192a4:	ed2d 8b0a 	vpush	{d8-d12}
 80192a8:	b097      	sub	sp, #92	@ 0x5c
 80192aa:	4688      	mov	r8, r1
 80192ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80192ae:	2200      	movs	r2, #0
 80192b0:	9212      	str	r2, [sp, #72]	@ 0x48
 80192b2:	9005      	str	r0, [sp, #20]
 80192b4:	f04f 0a00 	mov.w	sl, #0
 80192b8:	f04f 0b00 	mov.w	fp, #0
 80192bc:	460a      	mov	r2, r1
 80192be:	9211      	str	r2, [sp, #68]	@ 0x44
 80192c0:	7811      	ldrb	r1, [r2, #0]
 80192c2:	292b      	cmp	r1, #43	@ 0x2b
 80192c4:	d04c      	beq.n	8019360 <_strtod_l+0xc0>
 80192c6:	d839      	bhi.n	801933c <_strtod_l+0x9c>
 80192c8:	290d      	cmp	r1, #13
 80192ca:	d833      	bhi.n	8019334 <_strtod_l+0x94>
 80192cc:	2908      	cmp	r1, #8
 80192ce:	d833      	bhi.n	8019338 <_strtod_l+0x98>
 80192d0:	2900      	cmp	r1, #0
 80192d2:	d03c      	beq.n	801934e <_strtod_l+0xae>
 80192d4:	2200      	movs	r2, #0
 80192d6:	9208      	str	r2, [sp, #32]
 80192d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80192da:	782a      	ldrb	r2, [r5, #0]
 80192dc:	2a30      	cmp	r2, #48	@ 0x30
 80192de:	f040 80b5 	bne.w	801944c <_strtod_l+0x1ac>
 80192e2:	786a      	ldrb	r2, [r5, #1]
 80192e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80192e8:	2a58      	cmp	r2, #88	@ 0x58
 80192ea:	d170      	bne.n	80193ce <_strtod_l+0x12e>
 80192ec:	9302      	str	r3, [sp, #8]
 80192ee:	9b08      	ldr	r3, [sp, #32]
 80192f0:	9301      	str	r3, [sp, #4]
 80192f2:	ab12      	add	r3, sp, #72	@ 0x48
 80192f4:	9300      	str	r3, [sp, #0]
 80192f6:	4a8b      	ldr	r2, [pc, #556]	@ (8019524 <_strtod_l+0x284>)
 80192f8:	9805      	ldr	r0, [sp, #20]
 80192fa:	ab13      	add	r3, sp, #76	@ 0x4c
 80192fc:	a911      	add	r1, sp, #68	@ 0x44
 80192fe:	f002 fa97 	bl	801b830 <__gethex>
 8019302:	f010 060f 	ands.w	r6, r0, #15
 8019306:	4604      	mov	r4, r0
 8019308:	d005      	beq.n	8019316 <_strtod_l+0x76>
 801930a:	2e06      	cmp	r6, #6
 801930c:	d12a      	bne.n	8019364 <_strtod_l+0xc4>
 801930e:	3501      	adds	r5, #1
 8019310:	2300      	movs	r3, #0
 8019312:	9511      	str	r5, [sp, #68]	@ 0x44
 8019314:	9308      	str	r3, [sp, #32]
 8019316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019318:	2b00      	cmp	r3, #0
 801931a:	f040 852f 	bne.w	8019d7c <_strtod_l+0xadc>
 801931e:	9b08      	ldr	r3, [sp, #32]
 8019320:	ec4b ab10 	vmov	d0, sl, fp
 8019324:	b1cb      	cbz	r3, 801935a <_strtod_l+0xba>
 8019326:	eeb1 0b40 	vneg.f64	d0, d0
 801932a:	b017      	add	sp, #92	@ 0x5c
 801932c:	ecbd 8b0a 	vpop	{d8-d12}
 8019330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019334:	2920      	cmp	r1, #32
 8019336:	d1cd      	bne.n	80192d4 <_strtod_l+0x34>
 8019338:	3201      	adds	r2, #1
 801933a:	e7c0      	b.n	80192be <_strtod_l+0x1e>
 801933c:	292d      	cmp	r1, #45	@ 0x2d
 801933e:	d1c9      	bne.n	80192d4 <_strtod_l+0x34>
 8019340:	2101      	movs	r1, #1
 8019342:	9108      	str	r1, [sp, #32]
 8019344:	1c51      	adds	r1, r2, #1
 8019346:	9111      	str	r1, [sp, #68]	@ 0x44
 8019348:	7852      	ldrb	r2, [r2, #1]
 801934a:	2a00      	cmp	r2, #0
 801934c:	d1c4      	bne.n	80192d8 <_strtod_l+0x38>
 801934e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019350:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019354:	2b00      	cmp	r3, #0
 8019356:	f040 850f 	bne.w	8019d78 <_strtod_l+0xad8>
 801935a:	ec4b ab10 	vmov	d0, sl, fp
 801935e:	e7e4      	b.n	801932a <_strtod_l+0x8a>
 8019360:	2100      	movs	r1, #0
 8019362:	e7ee      	b.n	8019342 <_strtod_l+0xa2>
 8019364:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019366:	b13a      	cbz	r2, 8019378 <_strtod_l+0xd8>
 8019368:	2135      	movs	r1, #53	@ 0x35
 801936a:	a814      	add	r0, sp, #80	@ 0x50
 801936c:	f003 fa65 	bl	801c83a <__copybits>
 8019370:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019372:	9805      	ldr	r0, [sp, #20]
 8019374:	f002 fe36 	bl	801bfe4 <_Bfree>
 8019378:	1e73      	subs	r3, r6, #1
 801937a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801937c:	2b04      	cmp	r3, #4
 801937e:	d806      	bhi.n	801938e <_strtod_l+0xee>
 8019380:	e8df f003 	tbb	[pc, r3]
 8019384:	201d0314 	.word	0x201d0314
 8019388:	14          	.byte	0x14
 8019389:	00          	.byte	0x00
 801938a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801938e:	05e3      	lsls	r3, r4, #23
 8019390:	bf48      	it	mi
 8019392:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801939a:	0d1b      	lsrs	r3, r3, #20
 801939c:	051b      	lsls	r3, r3, #20
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1b9      	bne.n	8019316 <_strtod_l+0x76>
 80193a2:	f001 fb6f 	bl	801aa84 <__errno>
 80193a6:	2322      	movs	r3, #34	@ 0x22
 80193a8:	6003      	str	r3, [r0, #0]
 80193aa:	e7b4      	b.n	8019316 <_strtod_l+0x76>
 80193ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80193b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80193b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80193b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80193bc:	e7e7      	b.n	801938e <_strtod_l+0xee>
 80193be:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 801952c <_strtod_l+0x28c>
 80193c2:	e7e4      	b.n	801938e <_strtod_l+0xee>
 80193c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80193c8:	f04f 3aff 	mov.w	sl, #4294967295
 80193cc:	e7df      	b.n	801938e <_strtod_l+0xee>
 80193ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80193d0:	1c5a      	adds	r2, r3, #1
 80193d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80193d4:	785b      	ldrb	r3, [r3, #1]
 80193d6:	2b30      	cmp	r3, #48	@ 0x30
 80193d8:	d0f9      	beq.n	80193ce <_strtod_l+0x12e>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d09b      	beq.n	8019316 <_strtod_l+0x76>
 80193de:	2301      	movs	r3, #1
 80193e0:	2600      	movs	r6, #0
 80193e2:	9307      	str	r3, [sp, #28]
 80193e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80193e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80193e8:	46b1      	mov	r9, r6
 80193ea:	4635      	mov	r5, r6
 80193ec:	220a      	movs	r2, #10
 80193ee:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80193f0:	7804      	ldrb	r4, [r0, #0]
 80193f2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80193f6:	b2d9      	uxtb	r1, r3
 80193f8:	2909      	cmp	r1, #9
 80193fa:	d929      	bls.n	8019450 <_strtod_l+0x1b0>
 80193fc:	494a      	ldr	r1, [pc, #296]	@ (8019528 <_strtod_l+0x288>)
 80193fe:	2201      	movs	r2, #1
 8019400:	f001 fae4 	bl	801a9cc <strncmp>
 8019404:	b378      	cbz	r0, 8019466 <_strtod_l+0x1c6>
 8019406:	2000      	movs	r0, #0
 8019408:	4622      	mov	r2, r4
 801940a:	462b      	mov	r3, r5
 801940c:	4607      	mov	r7, r0
 801940e:	9006      	str	r0, [sp, #24]
 8019410:	2a65      	cmp	r2, #101	@ 0x65
 8019412:	d001      	beq.n	8019418 <_strtod_l+0x178>
 8019414:	2a45      	cmp	r2, #69	@ 0x45
 8019416:	d117      	bne.n	8019448 <_strtod_l+0x1a8>
 8019418:	b91b      	cbnz	r3, 8019422 <_strtod_l+0x182>
 801941a:	9b07      	ldr	r3, [sp, #28]
 801941c:	4303      	orrs	r3, r0
 801941e:	d096      	beq.n	801934e <_strtod_l+0xae>
 8019420:	2300      	movs	r3, #0
 8019422:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8019426:	f108 0201 	add.w	r2, r8, #1
 801942a:	9211      	str	r2, [sp, #68]	@ 0x44
 801942c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019430:	2a2b      	cmp	r2, #43	@ 0x2b
 8019432:	d06b      	beq.n	801950c <_strtod_l+0x26c>
 8019434:	2a2d      	cmp	r2, #45	@ 0x2d
 8019436:	d071      	beq.n	801951c <_strtod_l+0x27c>
 8019438:	f04f 0e00 	mov.w	lr, #0
 801943c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019440:	2c09      	cmp	r4, #9
 8019442:	d979      	bls.n	8019538 <_strtod_l+0x298>
 8019444:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8019448:	2400      	movs	r4, #0
 801944a:	e094      	b.n	8019576 <_strtod_l+0x2d6>
 801944c:	2300      	movs	r3, #0
 801944e:	e7c7      	b.n	80193e0 <_strtod_l+0x140>
 8019450:	2d08      	cmp	r5, #8
 8019452:	f100 0001 	add.w	r0, r0, #1
 8019456:	bfd4      	ite	le
 8019458:	fb02 3909 	mlale	r9, r2, r9, r3
 801945c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8019460:	3501      	adds	r5, #1
 8019462:	9011      	str	r0, [sp, #68]	@ 0x44
 8019464:	e7c3      	b.n	80193ee <_strtod_l+0x14e>
 8019466:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019468:	1c5a      	adds	r2, r3, #1
 801946a:	9211      	str	r2, [sp, #68]	@ 0x44
 801946c:	785a      	ldrb	r2, [r3, #1]
 801946e:	b375      	cbz	r5, 80194ce <_strtod_l+0x22e>
 8019470:	4607      	mov	r7, r0
 8019472:	462b      	mov	r3, r5
 8019474:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019478:	2909      	cmp	r1, #9
 801947a:	d913      	bls.n	80194a4 <_strtod_l+0x204>
 801947c:	2101      	movs	r1, #1
 801947e:	9106      	str	r1, [sp, #24]
 8019480:	e7c6      	b.n	8019410 <_strtod_l+0x170>
 8019482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019484:	1c5a      	adds	r2, r3, #1
 8019486:	9211      	str	r2, [sp, #68]	@ 0x44
 8019488:	785a      	ldrb	r2, [r3, #1]
 801948a:	3001      	adds	r0, #1
 801948c:	2a30      	cmp	r2, #48	@ 0x30
 801948e:	d0f8      	beq.n	8019482 <_strtod_l+0x1e2>
 8019490:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019494:	2b08      	cmp	r3, #8
 8019496:	f200 8476 	bhi.w	8019d86 <_strtod_l+0xae6>
 801949a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801949c:	930a      	str	r3, [sp, #40]	@ 0x28
 801949e:	4607      	mov	r7, r0
 80194a0:	2000      	movs	r0, #0
 80194a2:	4603      	mov	r3, r0
 80194a4:	3a30      	subs	r2, #48	@ 0x30
 80194a6:	f100 0101 	add.w	r1, r0, #1
 80194aa:	d023      	beq.n	80194f4 <_strtod_l+0x254>
 80194ac:	440f      	add	r7, r1
 80194ae:	eb00 0c03 	add.w	ip, r0, r3
 80194b2:	4619      	mov	r1, r3
 80194b4:	240a      	movs	r4, #10
 80194b6:	4561      	cmp	r1, ip
 80194b8:	d10b      	bne.n	80194d2 <_strtod_l+0x232>
 80194ba:	1c5c      	adds	r4, r3, #1
 80194bc:	4403      	add	r3, r0
 80194be:	2b08      	cmp	r3, #8
 80194c0:	4404      	add	r4, r0
 80194c2:	dc11      	bgt.n	80194e8 <_strtod_l+0x248>
 80194c4:	230a      	movs	r3, #10
 80194c6:	fb03 2909 	mla	r9, r3, r9, r2
 80194ca:	2100      	movs	r1, #0
 80194cc:	e013      	b.n	80194f6 <_strtod_l+0x256>
 80194ce:	4628      	mov	r0, r5
 80194d0:	e7dc      	b.n	801948c <_strtod_l+0x1ec>
 80194d2:	2908      	cmp	r1, #8
 80194d4:	f101 0101 	add.w	r1, r1, #1
 80194d8:	dc02      	bgt.n	80194e0 <_strtod_l+0x240>
 80194da:	fb04 f909 	mul.w	r9, r4, r9
 80194de:	e7ea      	b.n	80194b6 <_strtod_l+0x216>
 80194e0:	2910      	cmp	r1, #16
 80194e2:	bfd8      	it	le
 80194e4:	4366      	mulle	r6, r4
 80194e6:	e7e6      	b.n	80194b6 <_strtod_l+0x216>
 80194e8:	2b0f      	cmp	r3, #15
 80194ea:	dcee      	bgt.n	80194ca <_strtod_l+0x22a>
 80194ec:	230a      	movs	r3, #10
 80194ee:	fb03 2606 	mla	r6, r3, r6, r2
 80194f2:	e7ea      	b.n	80194ca <_strtod_l+0x22a>
 80194f4:	461c      	mov	r4, r3
 80194f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194f8:	1c5a      	adds	r2, r3, #1
 80194fa:	9211      	str	r2, [sp, #68]	@ 0x44
 80194fc:	785a      	ldrb	r2, [r3, #1]
 80194fe:	4608      	mov	r0, r1
 8019500:	4623      	mov	r3, r4
 8019502:	e7b7      	b.n	8019474 <_strtod_l+0x1d4>
 8019504:	2301      	movs	r3, #1
 8019506:	2700      	movs	r7, #0
 8019508:	9306      	str	r3, [sp, #24]
 801950a:	e786      	b.n	801941a <_strtod_l+0x17a>
 801950c:	f04f 0e00 	mov.w	lr, #0
 8019510:	f108 0202 	add.w	r2, r8, #2
 8019514:	9211      	str	r2, [sp, #68]	@ 0x44
 8019516:	f898 2002 	ldrb.w	r2, [r8, #2]
 801951a:	e78f      	b.n	801943c <_strtod_l+0x19c>
 801951c:	f04f 0e01 	mov.w	lr, #1
 8019520:	e7f6      	b.n	8019510 <_strtod_l+0x270>
 8019522:	bf00      	nop
 8019524:	0801ee54 	.word	0x0801ee54
 8019528:	0801ee3c 	.word	0x0801ee3c
 801952c:	7ff00000 	.word	0x7ff00000
 8019530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019532:	1c54      	adds	r4, r2, #1
 8019534:	9411      	str	r4, [sp, #68]	@ 0x44
 8019536:	7852      	ldrb	r2, [r2, #1]
 8019538:	2a30      	cmp	r2, #48	@ 0x30
 801953a:	d0f9      	beq.n	8019530 <_strtod_l+0x290>
 801953c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8019540:	2c08      	cmp	r4, #8
 8019542:	d881      	bhi.n	8019448 <_strtod_l+0x1a8>
 8019544:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8019548:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801954a:	9209      	str	r2, [sp, #36]	@ 0x24
 801954c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801954e:	1c51      	adds	r1, r2, #1
 8019550:	9111      	str	r1, [sp, #68]	@ 0x44
 8019552:	7852      	ldrb	r2, [r2, #1]
 8019554:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8019558:	2c09      	cmp	r4, #9
 801955a:	d938      	bls.n	80195ce <_strtod_l+0x32e>
 801955c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801955e:	1b0c      	subs	r4, r1, r4
 8019560:	2c08      	cmp	r4, #8
 8019562:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8019566:	dc02      	bgt.n	801956e <_strtod_l+0x2ce>
 8019568:	4564      	cmp	r4, ip
 801956a:	bfa8      	it	ge
 801956c:	4664      	movge	r4, ip
 801956e:	f1be 0f00 	cmp.w	lr, #0
 8019572:	d000      	beq.n	8019576 <_strtod_l+0x2d6>
 8019574:	4264      	negs	r4, r4
 8019576:	2b00      	cmp	r3, #0
 8019578:	d14e      	bne.n	8019618 <_strtod_l+0x378>
 801957a:	9b07      	ldr	r3, [sp, #28]
 801957c:	4318      	orrs	r0, r3
 801957e:	f47f aeca 	bne.w	8019316 <_strtod_l+0x76>
 8019582:	9b06      	ldr	r3, [sp, #24]
 8019584:	2b00      	cmp	r3, #0
 8019586:	f47f aee2 	bne.w	801934e <_strtod_l+0xae>
 801958a:	2a69      	cmp	r2, #105	@ 0x69
 801958c:	d027      	beq.n	80195de <_strtod_l+0x33e>
 801958e:	dc24      	bgt.n	80195da <_strtod_l+0x33a>
 8019590:	2a49      	cmp	r2, #73	@ 0x49
 8019592:	d024      	beq.n	80195de <_strtod_l+0x33e>
 8019594:	2a4e      	cmp	r2, #78	@ 0x4e
 8019596:	f47f aeda 	bne.w	801934e <_strtod_l+0xae>
 801959a:	4997      	ldr	r1, [pc, #604]	@ (80197f8 <_strtod_l+0x558>)
 801959c:	a811      	add	r0, sp, #68	@ 0x44
 801959e:	f002 fb69 	bl	801bc74 <__match>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	f43f aed3 	beq.w	801934e <_strtod_l+0xae>
 80195a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	2b28      	cmp	r3, #40	@ 0x28
 80195ae:	d12d      	bne.n	801960c <_strtod_l+0x36c>
 80195b0:	4992      	ldr	r1, [pc, #584]	@ (80197fc <_strtod_l+0x55c>)
 80195b2:	aa14      	add	r2, sp, #80	@ 0x50
 80195b4:	a811      	add	r0, sp, #68	@ 0x44
 80195b6:	f002 fb71 	bl	801bc9c <__hexnan>
 80195ba:	2805      	cmp	r0, #5
 80195bc:	d126      	bne.n	801960c <_strtod_l+0x36c>
 80195be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80195c4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80195c8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80195cc:	e6a3      	b.n	8019316 <_strtod_l+0x76>
 80195ce:	240a      	movs	r4, #10
 80195d0:	fb04 2c0c 	mla	ip, r4, ip, r2
 80195d4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80195d8:	e7b8      	b.n	801954c <_strtod_l+0x2ac>
 80195da:	2a6e      	cmp	r2, #110	@ 0x6e
 80195dc:	e7db      	b.n	8019596 <_strtod_l+0x2f6>
 80195de:	4988      	ldr	r1, [pc, #544]	@ (8019800 <_strtod_l+0x560>)
 80195e0:	a811      	add	r0, sp, #68	@ 0x44
 80195e2:	f002 fb47 	bl	801bc74 <__match>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	f43f aeb1 	beq.w	801934e <_strtod_l+0xae>
 80195ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195ee:	4985      	ldr	r1, [pc, #532]	@ (8019804 <_strtod_l+0x564>)
 80195f0:	3b01      	subs	r3, #1
 80195f2:	a811      	add	r0, sp, #68	@ 0x44
 80195f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80195f6:	f002 fb3d 	bl	801bc74 <__match>
 80195fa:	b910      	cbnz	r0, 8019602 <_strtod_l+0x362>
 80195fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80195fe:	3301      	adds	r3, #1
 8019600:	9311      	str	r3, [sp, #68]	@ 0x44
 8019602:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8019818 <_strtod_l+0x578>
 8019606:	f04f 0a00 	mov.w	sl, #0
 801960a:	e684      	b.n	8019316 <_strtod_l+0x76>
 801960c:	487e      	ldr	r0, [pc, #504]	@ (8019808 <_strtod_l+0x568>)
 801960e:	f001 fa77 	bl	801ab00 <nan>
 8019612:	ec5b ab10 	vmov	sl, fp, d0
 8019616:	e67e      	b.n	8019316 <_strtod_l+0x76>
 8019618:	ee07 9a90 	vmov	s15, r9
 801961c:	1be2      	subs	r2, r4, r7
 801961e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019622:	2d00      	cmp	r5, #0
 8019624:	bf08      	it	eq
 8019626:	461d      	moveq	r5, r3
 8019628:	2b10      	cmp	r3, #16
 801962a:	9209      	str	r2, [sp, #36]	@ 0x24
 801962c:	461a      	mov	r2, r3
 801962e:	bfa8      	it	ge
 8019630:	2210      	movge	r2, #16
 8019632:	2b09      	cmp	r3, #9
 8019634:	ec5b ab17 	vmov	sl, fp, d7
 8019638:	dc15      	bgt.n	8019666 <_strtod_l+0x3c6>
 801963a:	1be1      	subs	r1, r4, r7
 801963c:	2900      	cmp	r1, #0
 801963e:	f43f ae6a 	beq.w	8019316 <_strtod_l+0x76>
 8019642:	eba4 0107 	sub.w	r1, r4, r7
 8019646:	dd72      	ble.n	801972e <_strtod_l+0x48e>
 8019648:	2916      	cmp	r1, #22
 801964a:	dc59      	bgt.n	8019700 <_strtod_l+0x460>
 801964c:	4b6f      	ldr	r3, [pc, #444]	@ (801980c <_strtod_l+0x56c>)
 801964e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019654:	ed93 7b00 	vldr	d7, [r3]
 8019658:	ec4b ab16 	vmov	d6, sl, fp
 801965c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019660:	ec5b ab17 	vmov	sl, fp, d7
 8019664:	e657      	b.n	8019316 <_strtod_l+0x76>
 8019666:	4969      	ldr	r1, [pc, #420]	@ (801980c <_strtod_l+0x56c>)
 8019668:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801966c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8019670:	ee06 6a90 	vmov	s13, r6
 8019674:	2b0f      	cmp	r3, #15
 8019676:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801967a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801967e:	ec5b ab16 	vmov	sl, fp, d6
 8019682:	ddda      	ble.n	801963a <_strtod_l+0x39a>
 8019684:	1a9a      	subs	r2, r3, r2
 8019686:	1be1      	subs	r1, r4, r7
 8019688:	440a      	add	r2, r1
 801968a:	2a00      	cmp	r2, #0
 801968c:	f340 8094 	ble.w	80197b8 <_strtod_l+0x518>
 8019690:	f012 000f 	ands.w	r0, r2, #15
 8019694:	d00a      	beq.n	80196ac <_strtod_l+0x40c>
 8019696:	495d      	ldr	r1, [pc, #372]	@ (801980c <_strtod_l+0x56c>)
 8019698:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801969c:	ed91 7b00 	vldr	d7, [r1]
 80196a0:	ec4b ab16 	vmov	d6, sl, fp
 80196a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80196a8:	ec5b ab17 	vmov	sl, fp, d7
 80196ac:	f032 020f 	bics.w	r2, r2, #15
 80196b0:	d073      	beq.n	801979a <_strtod_l+0x4fa>
 80196b2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80196b6:	dd47      	ble.n	8019748 <_strtod_l+0x4a8>
 80196b8:	2400      	movs	r4, #0
 80196ba:	4625      	mov	r5, r4
 80196bc:	9407      	str	r4, [sp, #28]
 80196be:	4626      	mov	r6, r4
 80196c0:	9a05      	ldr	r2, [sp, #20]
 80196c2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019818 <_strtod_l+0x578>
 80196c6:	2322      	movs	r3, #34	@ 0x22
 80196c8:	6013      	str	r3, [r2, #0]
 80196ca:	f04f 0a00 	mov.w	sl, #0
 80196ce:	9b07      	ldr	r3, [sp, #28]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f43f ae20 	beq.w	8019316 <_strtod_l+0x76>
 80196d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80196d8:	9805      	ldr	r0, [sp, #20]
 80196da:	f002 fc83 	bl	801bfe4 <_Bfree>
 80196de:	9805      	ldr	r0, [sp, #20]
 80196e0:	4631      	mov	r1, r6
 80196e2:	f002 fc7f 	bl	801bfe4 <_Bfree>
 80196e6:	9805      	ldr	r0, [sp, #20]
 80196e8:	4629      	mov	r1, r5
 80196ea:	f002 fc7b 	bl	801bfe4 <_Bfree>
 80196ee:	9907      	ldr	r1, [sp, #28]
 80196f0:	9805      	ldr	r0, [sp, #20]
 80196f2:	f002 fc77 	bl	801bfe4 <_Bfree>
 80196f6:	9805      	ldr	r0, [sp, #20]
 80196f8:	4621      	mov	r1, r4
 80196fa:	f002 fc73 	bl	801bfe4 <_Bfree>
 80196fe:	e60a      	b.n	8019316 <_strtod_l+0x76>
 8019700:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8019704:	1be0      	subs	r0, r4, r7
 8019706:	4281      	cmp	r1, r0
 8019708:	dbbc      	blt.n	8019684 <_strtod_l+0x3e4>
 801970a:	4a40      	ldr	r2, [pc, #256]	@ (801980c <_strtod_l+0x56c>)
 801970c:	f1c3 030f 	rsb	r3, r3, #15
 8019710:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019714:	ed91 7b00 	vldr	d7, [r1]
 8019718:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801971a:	ec4b ab16 	vmov	d6, sl, fp
 801971e:	1acb      	subs	r3, r1, r3
 8019720:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019724:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019728:	ed92 6b00 	vldr	d6, [r2]
 801972c:	e796      	b.n	801965c <_strtod_l+0x3bc>
 801972e:	3116      	adds	r1, #22
 8019730:	dba8      	blt.n	8019684 <_strtod_l+0x3e4>
 8019732:	4b36      	ldr	r3, [pc, #216]	@ (801980c <_strtod_l+0x56c>)
 8019734:	1b3c      	subs	r4, r7, r4
 8019736:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801973a:	ed94 7b00 	vldr	d7, [r4]
 801973e:	ec4b ab16 	vmov	d6, sl, fp
 8019742:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019746:	e78b      	b.n	8019660 <_strtod_l+0x3c0>
 8019748:	2000      	movs	r0, #0
 801974a:	ec4b ab17 	vmov	d7, sl, fp
 801974e:	4e30      	ldr	r6, [pc, #192]	@ (8019810 <_strtod_l+0x570>)
 8019750:	1112      	asrs	r2, r2, #4
 8019752:	4601      	mov	r1, r0
 8019754:	2a01      	cmp	r2, #1
 8019756:	dc23      	bgt.n	80197a0 <_strtod_l+0x500>
 8019758:	b108      	cbz	r0, 801975e <_strtod_l+0x4be>
 801975a:	ec5b ab17 	vmov	sl, fp, d7
 801975e:	4a2c      	ldr	r2, [pc, #176]	@ (8019810 <_strtod_l+0x570>)
 8019760:	482c      	ldr	r0, [pc, #176]	@ (8019814 <_strtod_l+0x574>)
 8019762:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019766:	ed92 7b00 	vldr	d7, [r2]
 801976a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801976e:	ec4b ab16 	vmov	d6, sl, fp
 8019772:	4a29      	ldr	r2, [pc, #164]	@ (8019818 <_strtod_l+0x578>)
 8019774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019778:	ee17 1a90 	vmov	r1, s15
 801977c:	400a      	ands	r2, r1
 801977e:	4282      	cmp	r2, r0
 8019780:	ec5b ab17 	vmov	sl, fp, d7
 8019784:	d898      	bhi.n	80196b8 <_strtod_l+0x418>
 8019786:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801978a:	4282      	cmp	r2, r0
 801978c:	bf86      	itte	hi
 801978e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801981c <_strtod_l+0x57c>
 8019792:	f04f 3aff 	movhi.w	sl, #4294967295
 8019796:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801979a:	2200      	movs	r2, #0
 801979c:	9206      	str	r2, [sp, #24]
 801979e:	e076      	b.n	801988e <_strtod_l+0x5ee>
 80197a0:	f012 0f01 	tst.w	r2, #1
 80197a4:	d004      	beq.n	80197b0 <_strtod_l+0x510>
 80197a6:	ed96 6b00 	vldr	d6, [r6]
 80197aa:	2001      	movs	r0, #1
 80197ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80197b0:	3101      	adds	r1, #1
 80197b2:	1052      	asrs	r2, r2, #1
 80197b4:	3608      	adds	r6, #8
 80197b6:	e7cd      	b.n	8019754 <_strtod_l+0x4b4>
 80197b8:	d0ef      	beq.n	801979a <_strtod_l+0x4fa>
 80197ba:	4252      	negs	r2, r2
 80197bc:	f012 000f 	ands.w	r0, r2, #15
 80197c0:	d00a      	beq.n	80197d8 <_strtod_l+0x538>
 80197c2:	4912      	ldr	r1, [pc, #72]	@ (801980c <_strtod_l+0x56c>)
 80197c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80197c8:	ed91 7b00 	vldr	d7, [r1]
 80197cc:	ec4b ab16 	vmov	d6, sl, fp
 80197d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80197d4:	ec5b ab17 	vmov	sl, fp, d7
 80197d8:	1112      	asrs	r2, r2, #4
 80197da:	d0de      	beq.n	801979a <_strtod_l+0x4fa>
 80197dc:	2a1f      	cmp	r2, #31
 80197de:	dd1f      	ble.n	8019820 <_strtod_l+0x580>
 80197e0:	2400      	movs	r4, #0
 80197e2:	4625      	mov	r5, r4
 80197e4:	9407      	str	r4, [sp, #28]
 80197e6:	4626      	mov	r6, r4
 80197e8:	9a05      	ldr	r2, [sp, #20]
 80197ea:	2322      	movs	r3, #34	@ 0x22
 80197ec:	f04f 0a00 	mov.w	sl, #0
 80197f0:	f04f 0b00 	mov.w	fp, #0
 80197f4:	6013      	str	r3, [r2, #0]
 80197f6:	e76a      	b.n	80196ce <_strtod_l+0x42e>
 80197f8:	0801ef9e 	.word	0x0801ef9e
 80197fc:	0801ee40 	.word	0x0801ee40
 8019800:	0801ef96 	.word	0x0801ef96
 8019804:	0801efd0 	.word	0x0801efd0
 8019808:	0801f25c 	.word	0x0801f25c
 801980c:	0801f148 	.word	0x0801f148
 8019810:	0801f120 	.word	0x0801f120
 8019814:	7ca00000 	.word	0x7ca00000
 8019818:	7ff00000 	.word	0x7ff00000
 801981c:	7fefffff 	.word	0x7fefffff
 8019820:	f012 0110 	ands.w	r1, r2, #16
 8019824:	bf18      	it	ne
 8019826:	216a      	movne	r1, #106	@ 0x6a
 8019828:	9106      	str	r1, [sp, #24]
 801982a:	ec4b ab17 	vmov	d7, sl, fp
 801982e:	49b0      	ldr	r1, [pc, #704]	@ (8019af0 <_strtod_l+0x850>)
 8019830:	2000      	movs	r0, #0
 8019832:	07d6      	lsls	r6, r2, #31
 8019834:	d504      	bpl.n	8019840 <_strtod_l+0x5a0>
 8019836:	ed91 6b00 	vldr	d6, [r1]
 801983a:	2001      	movs	r0, #1
 801983c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019840:	1052      	asrs	r2, r2, #1
 8019842:	f101 0108 	add.w	r1, r1, #8
 8019846:	d1f4      	bne.n	8019832 <_strtod_l+0x592>
 8019848:	b108      	cbz	r0, 801984e <_strtod_l+0x5ae>
 801984a:	ec5b ab17 	vmov	sl, fp, d7
 801984e:	9a06      	ldr	r2, [sp, #24]
 8019850:	b1b2      	cbz	r2, 8019880 <_strtod_l+0x5e0>
 8019852:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8019856:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801985a:	2a00      	cmp	r2, #0
 801985c:	4658      	mov	r0, fp
 801985e:	dd0f      	ble.n	8019880 <_strtod_l+0x5e0>
 8019860:	2a1f      	cmp	r2, #31
 8019862:	dd55      	ble.n	8019910 <_strtod_l+0x670>
 8019864:	2a34      	cmp	r2, #52	@ 0x34
 8019866:	bfde      	ittt	le
 8019868:	f04f 32ff 	movle.w	r2, #4294967295
 801986c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8019870:	408a      	lslle	r2, r1
 8019872:	f04f 0a00 	mov.w	sl, #0
 8019876:	bfcc      	ite	gt
 8019878:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801987c:	ea02 0b00 	andle.w	fp, r2, r0
 8019880:	ec4b ab17 	vmov	d7, sl, fp
 8019884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988c:	d0a8      	beq.n	80197e0 <_strtod_l+0x540>
 801988e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019890:	9805      	ldr	r0, [sp, #20]
 8019892:	f8cd 9000 	str.w	r9, [sp]
 8019896:	462a      	mov	r2, r5
 8019898:	f002 fc0c 	bl	801c0b4 <__s2b>
 801989c:	9007      	str	r0, [sp, #28]
 801989e:	2800      	cmp	r0, #0
 80198a0:	f43f af0a 	beq.w	80196b8 <_strtod_l+0x418>
 80198a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198a6:	1b3f      	subs	r7, r7, r4
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	bfb4      	ite	lt
 80198ac:	463b      	movlt	r3, r7
 80198ae:	2300      	movge	r3, #0
 80198b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80198b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198b4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8019ae0 <_strtod_l+0x840>
 80198b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198bc:	2400      	movs	r4, #0
 80198be:	930d      	str	r3, [sp, #52]	@ 0x34
 80198c0:	4625      	mov	r5, r4
 80198c2:	9b07      	ldr	r3, [sp, #28]
 80198c4:	9805      	ldr	r0, [sp, #20]
 80198c6:	6859      	ldr	r1, [r3, #4]
 80198c8:	f002 fb4c 	bl	801bf64 <_Balloc>
 80198cc:	4606      	mov	r6, r0
 80198ce:	2800      	cmp	r0, #0
 80198d0:	f43f aef6 	beq.w	80196c0 <_strtod_l+0x420>
 80198d4:	9b07      	ldr	r3, [sp, #28]
 80198d6:	691a      	ldr	r2, [r3, #16]
 80198d8:	ec4b ab19 	vmov	d9, sl, fp
 80198dc:	3202      	adds	r2, #2
 80198de:	f103 010c 	add.w	r1, r3, #12
 80198e2:	0092      	lsls	r2, r2, #2
 80198e4:	300c      	adds	r0, #12
 80198e6:	f001 f8fa 	bl	801aade <memcpy>
 80198ea:	eeb0 0b49 	vmov.f64	d0, d9
 80198ee:	9805      	ldr	r0, [sp, #20]
 80198f0:	aa14      	add	r2, sp, #80	@ 0x50
 80198f2:	a913      	add	r1, sp, #76	@ 0x4c
 80198f4:	f002 ff1a 	bl	801c72c <__d2b>
 80198f8:	9012      	str	r0, [sp, #72]	@ 0x48
 80198fa:	2800      	cmp	r0, #0
 80198fc:	f43f aee0 	beq.w	80196c0 <_strtod_l+0x420>
 8019900:	9805      	ldr	r0, [sp, #20]
 8019902:	2101      	movs	r1, #1
 8019904:	f002 fc6c 	bl	801c1e0 <__i2b>
 8019908:	4605      	mov	r5, r0
 801990a:	b940      	cbnz	r0, 801991e <_strtod_l+0x67e>
 801990c:	2500      	movs	r5, #0
 801990e:	e6d7      	b.n	80196c0 <_strtod_l+0x420>
 8019910:	f04f 31ff 	mov.w	r1, #4294967295
 8019914:	fa01 f202 	lsl.w	r2, r1, r2
 8019918:	ea02 0a0a 	and.w	sl, r2, sl
 801991c:	e7b0      	b.n	8019880 <_strtod_l+0x5e0>
 801991e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8019920:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019922:	2f00      	cmp	r7, #0
 8019924:	bfab      	itete	ge
 8019926:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8019928:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 801992a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801992e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8019932:	bfac      	ite	ge
 8019934:	eb07 0903 	addge.w	r9, r7, r3
 8019938:	eba3 0807 	sublt.w	r8, r3, r7
 801993c:	9b06      	ldr	r3, [sp, #24]
 801993e:	1aff      	subs	r7, r7, r3
 8019940:	4417      	add	r7, r2
 8019942:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8019946:	4a6b      	ldr	r2, [pc, #428]	@ (8019af4 <_strtod_l+0x854>)
 8019948:	3f01      	subs	r7, #1
 801994a:	4297      	cmp	r7, r2
 801994c:	da51      	bge.n	80199f2 <_strtod_l+0x752>
 801994e:	1bd1      	subs	r1, r2, r7
 8019950:	291f      	cmp	r1, #31
 8019952:	eba3 0301 	sub.w	r3, r3, r1
 8019956:	f04f 0201 	mov.w	r2, #1
 801995a:	dc3e      	bgt.n	80199da <_strtod_l+0x73a>
 801995c:	408a      	lsls	r2, r1
 801995e:	920c      	str	r2, [sp, #48]	@ 0x30
 8019960:	2200      	movs	r2, #0
 8019962:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019964:	eb09 0703 	add.w	r7, r9, r3
 8019968:	4498      	add	r8, r3
 801996a:	9b06      	ldr	r3, [sp, #24]
 801996c:	45b9      	cmp	r9, r7
 801996e:	4498      	add	r8, r3
 8019970:	464b      	mov	r3, r9
 8019972:	bfa8      	it	ge
 8019974:	463b      	movge	r3, r7
 8019976:	4543      	cmp	r3, r8
 8019978:	bfa8      	it	ge
 801997a:	4643      	movge	r3, r8
 801997c:	2b00      	cmp	r3, #0
 801997e:	bfc2      	ittt	gt
 8019980:	1aff      	subgt	r7, r7, r3
 8019982:	eba8 0803 	subgt.w	r8, r8, r3
 8019986:	eba9 0903 	subgt.w	r9, r9, r3
 801998a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801998c:	2b00      	cmp	r3, #0
 801998e:	dd16      	ble.n	80199be <_strtod_l+0x71e>
 8019990:	4629      	mov	r1, r5
 8019992:	9805      	ldr	r0, [sp, #20]
 8019994:	461a      	mov	r2, r3
 8019996:	f002 fce3 	bl	801c360 <__pow5mult>
 801999a:	4605      	mov	r5, r0
 801999c:	2800      	cmp	r0, #0
 801999e:	d0b5      	beq.n	801990c <_strtod_l+0x66c>
 80199a0:	4601      	mov	r1, r0
 80199a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80199a4:	9805      	ldr	r0, [sp, #20]
 80199a6:	f002 fc31 	bl	801c20c <__multiply>
 80199aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80199ac:	2800      	cmp	r0, #0
 80199ae:	f43f ae87 	beq.w	80196c0 <_strtod_l+0x420>
 80199b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80199b4:	9805      	ldr	r0, [sp, #20]
 80199b6:	f002 fb15 	bl	801bfe4 <_Bfree>
 80199ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80199bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80199be:	2f00      	cmp	r7, #0
 80199c0:	dc1b      	bgt.n	80199fa <_strtod_l+0x75a>
 80199c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	dd21      	ble.n	8019a0c <_strtod_l+0x76c>
 80199c8:	4631      	mov	r1, r6
 80199ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80199cc:	9805      	ldr	r0, [sp, #20]
 80199ce:	f002 fcc7 	bl	801c360 <__pow5mult>
 80199d2:	4606      	mov	r6, r0
 80199d4:	b9d0      	cbnz	r0, 8019a0c <_strtod_l+0x76c>
 80199d6:	2600      	movs	r6, #0
 80199d8:	e672      	b.n	80196c0 <_strtod_l+0x420>
 80199da:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80199de:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80199e2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80199e6:	37e2      	adds	r7, #226	@ 0xe2
 80199e8:	fa02 f107 	lsl.w	r1, r2, r7
 80199ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80199ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80199f0:	e7b8      	b.n	8019964 <_strtod_l+0x6c4>
 80199f2:	2200      	movs	r2, #0
 80199f4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80199f6:	2201      	movs	r2, #1
 80199f8:	e7f9      	b.n	80199ee <_strtod_l+0x74e>
 80199fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80199fc:	9805      	ldr	r0, [sp, #20]
 80199fe:	463a      	mov	r2, r7
 8019a00:	f002 fd08 	bl	801c414 <__lshift>
 8019a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8019a06:	2800      	cmp	r0, #0
 8019a08:	d1db      	bne.n	80199c2 <_strtod_l+0x722>
 8019a0a:	e659      	b.n	80196c0 <_strtod_l+0x420>
 8019a0c:	f1b8 0f00 	cmp.w	r8, #0
 8019a10:	dd07      	ble.n	8019a22 <_strtod_l+0x782>
 8019a12:	4631      	mov	r1, r6
 8019a14:	9805      	ldr	r0, [sp, #20]
 8019a16:	4642      	mov	r2, r8
 8019a18:	f002 fcfc 	bl	801c414 <__lshift>
 8019a1c:	4606      	mov	r6, r0
 8019a1e:	2800      	cmp	r0, #0
 8019a20:	d0d9      	beq.n	80199d6 <_strtod_l+0x736>
 8019a22:	f1b9 0f00 	cmp.w	r9, #0
 8019a26:	dd08      	ble.n	8019a3a <_strtod_l+0x79a>
 8019a28:	4629      	mov	r1, r5
 8019a2a:	9805      	ldr	r0, [sp, #20]
 8019a2c:	464a      	mov	r2, r9
 8019a2e:	f002 fcf1 	bl	801c414 <__lshift>
 8019a32:	4605      	mov	r5, r0
 8019a34:	2800      	cmp	r0, #0
 8019a36:	f43f ae43 	beq.w	80196c0 <_strtod_l+0x420>
 8019a3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019a3c:	9805      	ldr	r0, [sp, #20]
 8019a3e:	4632      	mov	r2, r6
 8019a40:	f002 fd70 	bl	801c524 <__mdiff>
 8019a44:	4604      	mov	r4, r0
 8019a46:	2800      	cmp	r0, #0
 8019a48:	f43f ae3a 	beq.w	80196c0 <_strtod_l+0x420>
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019a52:	60c3      	str	r3, [r0, #12]
 8019a54:	4629      	mov	r1, r5
 8019a56:	f002 fd49 	bl	801c4ec <__mcmp>
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	da4e      	bge.n	8019afc <_strtod_l+0x85c>
 8019a5e:	ea58 080a 	orrs.w	r8, r8, sl
 8019a62:	d174      	bne.n	8019b4e <_strtod_l+0x8ae>
 8019a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d170      	bne.n	8019b4e <_strtod_l+0x8ae>
 8019a6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019a70:	0d1b      	lsrs	r3, r3, #20
 8019a72:	051b      	lsls	r3, r3, #20
 8019a74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019a78:	d969      	bls.n	8019b4e <_strtod_l+0x8ae>
 8019a7a:	6963      	ldr	r3, [r4, #20]
 8019a7c:	b913      	cbnz	r3, 8019a84 <_strtod_l+0x7e4>
 8019a7e:	6923      	ldr	r3, [r4, #16]
 8019a80:	2b01      	cmp	r3, #1
 8019a82:	dd64      	ble.n	8019b4e <_strtod_l+0x8ae>
 8019a84:	4621      	mov	r1, r4
 8019a86:	2201      	movs	r2, #1
 8019a88:	9805      	ldr	r0, [sp, #20]
 8019a8a:	f002 fcc3 	bl	801c414 <__lshift>
 8019a8e:	4629      	mov	r1, r5
 8019a90:	4604      	mov	r4, r0
 8019a92:	f002 fd2b 	bl	801c4ec <__mcmp>
 8019a96:	2800      	cmp	r0, #0
 8019a98:	dd59      	ble.n	8019b4e <_strtod_l+0x8ae>
 8019a9a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019a9e:	9a06      	ldr	r2, [sp, #24]
 8019aa0:	0d1b      	lsrs	r3, r3, #20
 8019aa2:	051b      	lsls	r3, r3, #20
 8019aa4:	2a00      	cmp	r2, #0
 8019aa6:	d070      	beq.n	8019b8a <_strtod_l+0x8ea>
 8019aa8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019aac:	d86d      	bhi.n	8019b8a <_strtod_l+0x8ea>
 8019aae:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019ab2:	f67f ae99 	bls.w	80197e8 <_strtod_l+0x548>
 8019ab6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8019ae8 <_strtod_l+0x848>
 8019aba:	ec4b ab16 	vmov	d6, sl, fp
 8019abe:	4b0e      	ldr	r3, [pc, #56]	@ (8019af8 <_strtod_l+0x858>)
 8019ac0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019ac4:	ee17 2a90 	vmov	r2, s15
 8019ac8:	4013      	ands	r3, r2
 8019aca:	ec5b ab17 	vmov	sl, fp, d7
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	f47f ae01 	bne.w	80196d6 <_strtod_l+0x436>
 8019ad4:	9a05      	ldr	r2, [sp, #20]
 8019ad6:	2322      	movs	r3, #34	@ 0x22
 8019ad8:	6013      	str	r3, [r2, #0]
 8019ada:	e5fc      	b.n	80196d6 <_strtod_l+0x436>
 8019adc:	f3af 8000 	nop.w
 8019ae0:	ffc00000 	.word	0xffc00000
 8019ae4:	41dfffff 	.word	0x41dfffff
 8019ae8:	00000000 	.word	0x00000000
 8019aec:	39500000 	.word	0x39500000
 8019af0:	0801ee68 	.word	0x0801ee68
 8019af4:	fffffc02 	.word	0xfffffc02
 8019af8:	7ff00000 	.word	0x7ff00000
 8019afc:	46d9      	mov	r9, fp
 8019afe:	d15d      	bne.n	8019bbc <_strtod_l+0x91c>
 8019b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019b04:	f1b8 0f00 	cmp.w	r8, #0
 8019b08:	d02a      	beq.n	8019b60 <_strtod_l+0x8c0>
 8019b0a:	4aab      	ldr	r2, [pc, #684]	@ (8019db8 <_strtod_l+0xb18>)
 8019b0c:	4293      	cmp	r3, r2
 8019b0e:	d12a      	bne.n	8019b66 <_strtod_l+0x8c6>
 8019b10:	9b06      	ldr	r3, [sp, #24]
 8019b12:	4652      	mov	r2, sl
 8019b14:	b1fb      	cbz	r3, 8019b56 <_strtod_l+0x8b6>
 8019b16:	4ba9      	ldr	r3, [pc, #676]	@ (8019dbc <_strtod_l+0xb1c>)
 8019b18:	ea0b 0303 	and.w	r3, fp, r3
 8019b1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019b20:	f04f 31ff 	mov.w	r1, #4294967295
 8019b24:	d81a      	bhi.n	8019b5c <_strtod_l+0x8bc>
 8019b26:	0d1b      	lsrs	r3, r3, #20
 8019b28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d118      	bne.n	8019b66 <_strtod_l+0x8c6>
 8019b34:	4ba2      	ldr	r3, [pc, #648]	@ (8019dc0 <_strtod_l+0xb20>)
 8019b36:	4599      	cmp	r9, r3
 8019b38:	d102      	bne.n	8019b40 <_strtod_l+0x8a0>
 8019b3a:	3201      	adds	r2, #1
 8019b3c:	f43f adc0 	beq.w	80196c0 <_strtod_l+0x420>
 8019b40:	4b9e      	ldr	r3, [pc, #632]	@ (8019dbc <_strtod_l+0xb1c>)
 8019b42:	ea09 0303 	and.w	r3, r9, r3
 8019b46:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8019b4a:	f04f 0a00 	mov.w	sl, #0
 8019b4e:	9b06      	ldr	r3, [sp, #24]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d1b0      	bne.n	8019ab6 <_strtod_l+0x816>
 8019b54:	e5bf      	b.n	80196d6 <_strtod_l+0x436>
 8019b56:	f04f 33ff 	mov.w	r3, #4294967295
 8019b5a:	e7e9      	b.n	8019b30 <_strtod_l+0x890>
 8019b5c:	460b      	mov	r3, r1
 8019b5e:	e7e7      	b.n	8019b30 <_strtod_l+0x890>
 8019b60:	ea53 030a 	orrs.w	r3, r3, sl
 8019b64:	d099      	beq.n	8019a9a <_strtod_l+0x7fa>
 8019b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b68:	b1c3      	cbz	r3, 8019b9c <_strtod_l+0x8fc>
 8019b6a:	ea13 0f09 	tst.w	r3, r9
 8019b6e:	d0ee      	beq.n	8019b4e <_strtod_l+0x8ae>
 8019b70:	9a06      	ldr	r2, [sp, #24]
 8019b72:	4650      	mov	r0, sl
 8019b74:	4659      	mov	r1, fp
 8019b76:	f1b8 0f00 	cmp.w	r8, #0
 8019b7a:	d013      	beq.n	8019ba4 <_strtod_l+0x904>
 8019b7c:	f7ff fb73 	bl	8019266 <sulp>
 8019b80:	ee39 7b00 	vadd.f64	d7, d9, d0
 8019b84:	ec5b ab17 	vmov	sl, fp, d7
 8019b88:	e7e1      	b.n	8019b4e <_strtod_l+0x8ae>
 8019b8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8019b8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019b92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8019b96:	f04f 3aff 	mov.w	sl, #4294967295
 8019b9a:	e7d8      	b.n	8019b4e <_strtod_l+0x8ae>
 8019b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b9e:	ea13 0f0a 	tst.w	r3, sl
 8019ba2:	e7e4      	b.n	8019b6e <_strtod_l+0x8ce>
 8019ba4:	f7ff fb5f 	bl	8019266 <sulp>
 8019ba8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8019bac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8019bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb4:	ec5b ab10 	vmov	sl, fp, d0
 8019bb8:	d1c9      	bne.n	8019b4e <_strtod_l+0x8ae>
 8019bba:	e615      	b.n	80197e8 <_strtod_l+0x548>
 8019bbc:	4629      	mov	r1, r5
 8019bbe:	4620      	mov	r0, r4
 8019bc0:	f002 fe0c 	bl	801c7dc <__ratio>
 8019bc4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8019bc8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bd0:	d85d      	bhi.n	8019c8e <_strtod_l+0x9ee>
 8019bd2:	f1b8 0f00 	cmp.w	r8, #0
 8019bd6:	d164      	bne.n	8019ca2 <_strtod_l+0xa02>
 8019bd8:	f1ba 0f00 	cmp.w	sl, #0
 8019bdc:	d14b      	bne.n	8019c76 <_strtod_l+0x9d6>
 8019bde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019be2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d160      	bne.n	8019cac <_strtod_l+0xa0c>
 8019bea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8019bee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf6:	d401      	bmi.n	8019bfc <_strtod_l+0x95c>
 8019bf8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019bfc:	eeb1 ab48 	vneg.f64	d10, d8
 8019c00:	486e      	ldr	r0, [pc, #440]	@ (8019dbc <_strtod_l+0xb1c>)
 8019c02:	4970      	ldr	r1, [pc, #448]	@ (8019dc4 <_strtod_l+0xb24>)
 8019c04:	ea09 0700 	and.w	r7, r9, r0
 8019c08:	428f      	cmp	r7, r1
 8019c0a:	ec53 2b1a 	vmov	r2, r3, d10
 8019c0e:	d17d      	bne.n	8019d0c <_strtod_l+0xa6c>
 8019c10:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8019c14:	ec4b ab1c 	vmov	d12, sl, fp
 8019c18:	eeb0 0b4c 	vmov.f64	d0, d12
 8019c1c:	f002 fd16 	bl	801c64c <__ulp>
 8019c20:	4866      	ldr	r0, [pc, #408]	@ (8019dbc <_strtod_l+0xb1c>)
 8019c22:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8019c26:	ee1c 3a90 	vmov	r3, s25
 8019c2a:	4a67      	ldr	r2, [pc, #412]	@ (8019dc8 <_strtod_l+0xb28>)
 8019c2c:	ea03 0100 	and.w	r1, r3, r0
 8019c30:	4291      	cmp	r1, r2
 8019c32:	ec5b ab1c 	vmov	sl, fp, d12
 8019c36:	d93c      	bls.n	8019cb2 <_strtod_l+0xa12>
 8019c38:	ee19 2a90 	vmov	r2, s19
 8019c3c:	4b60      	ldr	r3, [pc, #384]	@ (8019dc0 <_strtod_l+0xb20>)
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	d104      	bne.n	8019c4c <_strtod_l+0x9ac>
 8019c42:	ee19 3a10 	vmov	r3, s18
 8019c46:	3301      	adds	r3, #1
 8019c48:	f43f ad3a 	beq.w	80196c0 <_strtod_l+0x420>
 8019c4c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8019dc0 <_strtod_l+0xb20>
 8019c50:	f04f 3aff 	mov.w	sl, #4294967295
 8019c54:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019c56:	9805      	ldr	r0, [sp, #20]
 8019c58:	f002 f9c4 	bl	801bfe4 <_Bfree>
 8019c5c:	9805      	ldr	r0, [sp, #20]
 8019c5e:	4631      	mov	r1, r6
 8019c60:	f002 f9c0 	bl	801bfe4 <_Bfree>
 8019c64:	9805      	ldr	r0, [sp, #20]
 8019c66:	4629      	mov	r1, r5
 8019c68:	f002 f9bc 	bl	801bfe4 <_Bfree>
 8019c6c:	9805      	ldr	r0, [sp, #20]
 8019c6e:	4621      	mov	r1, r4
 8019c70:	f002 f9b8 	bl	801bfe4 <_Bfree>
 8019c74:	e625      	b.n	80198c2 <_strtod_l+0x622>
 8019c76:	f1ba 0f01 	cmp.w	sl, #1
 8019c7a:	d103      	bne.n	8019c84 <_strtod_l+0x9e4>
 8019c7c:	f1bb 0f00 	cmp.w	fp, #0
 8019c80:	f43f adb2 	beq.w	80197e8 <_strtod_l+0x548>
 8019c84:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019c88:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8019c8c:	e7b8      	b.n	8019c00 <_strtod_l+0x960>
 8019c8e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8019c92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8019c96:	f1b8 0f00 	cmp.w	r8, #0
 8019c9a:	d0af      	beq.n	8019bfc <_strtod_l+0x95c>
 8019c9c:	eeb0 ab48 	vmov.f64	d10, d8
 8019ca0:	e7ae      	b.n	8019c00 <_strtod_l+0x960>
 8019ca2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8019ca6:	eeb0 8b4a 	vmov.f64	d8, d10
 8019caa:	e7a9      	b.n	8019c00 <_strtod_l+0x960>
 8019cac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8019cb0:	e7a6      	b.n	8019c00 <_strtod_l+0x960>
 8019cb2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8019cb6:	9b06      	ldr	r3, [sp, #24]
 8019cb8:	46d9      	mov	r9, fp
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d1ca      	bne.n	8019c54 <_strtod_l+0x9b4>
 8019cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019cc2:	0d1b      	lsrs	r3, r3, #20
 8019cc4:	051b      	lsls	r3, r3, #20
 8019cc6:	429f      	cmp	r7, r3
 8019cc8:	d1c4      	bne.n	8019c54 <_strtod_l+0x9b4>
 8019cca:	ec51 0b18 	vmov	r0, r1, d8
 8019cce:	f7e6 fd5b 	bl	8000788 <__aeabi_d2lz>
 8019cd2:	f7e6 fd13 	bl	80006fc <__aeabi_l2d>
 8019cd6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8019cda:	ec41 0b17 	vmov	d7, r0, r1
 8019cde:	ea49 090a 	orr.w	r9, r9, sl
 8019ce2:	ea59 0908 	orrs.w	r9, r9, r8
 8019ce6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019cea:	d03c      	beq.n	8019d66 <_strtod_l+0xac6>
 8019cec:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8019da0 <_strtod_l+0xb00>
 8019cf0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cf8:	f53f aced 	bmi.w	80196d6 <_strtod_l+0x436>
 8019cfc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019da8 <_strtod_l+0xb08>
 8019d00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d08:	dda4      	ble.n	8019c54 <_strtod_l+0x9b4>
 8019d0a:	e4e4      	b.n	80196d6 <_strtod_l+0x436>
 8019d0c:	9906      	ldr	r1, [sp, #24]
 8019d0e:	b1e1      	cbz	r1, 8019d4a <_strtod_l+0xaaa>
 8019d10:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8019d14:	d819      	bhi.n	8019d4a <_strtod_l+0xaaa>
 8019d16:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8019d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d1e:	d811      	bhi.n	8019d44 <_strtod_l+0xaa4>
 8019d20:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8019d24:	ee18 3a10 	vmov	r3, s16
 8019d28:	2b01      	cmp	r3, #1
 8019d2a:	bf38      	it	cc
 8019d2c:	2301      	movcc	r3, #1
 8019d2e:	ee08 3a10 	vmov	s16, r3
 8019d32:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8019d36:	f1b8 0f00 	cmp.w	r8, #0
 8019d3a:	d111      	bne.n	8019d60 <_strtod_l+0xac0>
 8019d3c:	eeb1 7b48 	vneg.f64	d7, d8
 8019d40:	ec53 2b17 	vmov	r2, r3, d7
 8019d44:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8019d48:	1bcb      	subs	r3, r1, r7
 8019d4a:	eeb0 0b49 	vmov.f64	d0, d9
 8019d4e:	ec43 2b1a 	vmov	d10, r2, r3
 8019d52:	f002 fc7b 	bl	801c64c <__ulp>
 8019d56:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8019d5a:	ec5b ab19 	vmov	sl, fp, d9
 8019d5e:	e7aa      	b.n	8019cb6 <_strtod_l+0xa16>
 8019d60:	eeb0 7b48 	vmov.f64	d7, d8
 8019d64:	e7ec      	b.n	8019d40 <_strtod_l+0xaa0>
 8019d66:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8019db0 <_strtod_l+0xb10>
 8019d6a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d72:	f57f af6f 	bpl.w	8019c54 <_strtod_l+0x9b4>
 8019d76:	e4ae      	b.n	80196d6 <_strtod_l+0x436>
 8019d78:	2300      	movs	r3, #0
 8019d7a:	9308      	str	r3, [sp, #32]
 8019d7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019d7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019d80:	6013      	str	r3, [r2, #0]
 8019d82:	f7ff bacc 	b.w	801931e <_strtod_l+0x7e>
 8019d86:	2a65      	cmp	r2, #101	@ 0x65
 8019d88:	f43f abbc 	beq.w	8019504 <_strtod_l+0x264>
 8019d8c:	2a45      	cmp	r2, #69	@ 0x45
 8019d8e:	f43f abb9 	beq.w	8019504 <_strtod_l+0x264>
 8019d92:	2301      	movs	r3, #1
 8019d94:	9306      	str	r3, [sp, #24]
 8019d96:	f7ff bbf0 	b.w	801957a <_strtod_l+0x2da>
 8019d9a:	bf00      	nop
 8019d9c:	f3af 8000 	nop.w
 8019da0:	94a03595 	.word	0x94a03595
 8019da4:	3fdfffff 	.word	0x3fdfffff
 8019da8:	35afe535 	.word	0x35afe535
 8019dac:	3fe00000 	.word	0x3fe00000
 8019db0:	94a03595 	.word	0x94a03595
 8019db4:	3fcfffff 	.word	0x3fcfffff
 8019db8:	000fffff 	.word	0x000fffff
 8019dbc:	7ff00000 	.word	0x7ff00000
 8019dc0:	7fefffff 	.word	0x7fefffff
 8019dc4:	7fe00000 	.word	0x7fe00000
 8019dc8:	7c9fffff 	.word	0x7c9fffff

08019dcc <strtod>:
 8019dcc:	460a      	mov	r2, r1
 8019dce:	4601      	mov	r1, r0
 8019dd0:	4802      	ldr	r0, [pc, #8]	@ (8019ddc <strtod+0x10>)
 8019dd2:	4b03      	ldr	r3, [pc, #12]	@ (8019de0 <strtod+0x14>)
 8019dd4:	6800      	ldr	r0, [r0, #0]
 8019dd6:	f7ff ba63 	b.w	80192a0 <_strtod_l>
 8019dda:	bf00      	nop
 8019ddc:	240002ac 	.word	0x240002ac
 8019de0:	24000140 	.word	0x24000140

08019de4 <_strtol_l.constprop.0>:
 8019de4:	2b24      	cmp	r3, #36	@ 0x24
 8019de6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dea:	4686      	mov	lr, r0
 8019dec:	4690      	mov	r8, r2
 8019dee:	d801      	bhi.n	8019df4 <_strtol_l.constprop.0+0x10>
 8019df0:	2b01      	cmp	r3, #1
 8019df2:	d106      	bne.n	8019e02 <_strtol_l.constprop.0+0x1e>
 8019df4:	f000 fe46 	bl	801aa84 <__errno>
 8019df8:	2316      	movs	r3, #22
 8019dfa:	6003      	str	r3, [r0, #0]
 8019dfc:	2000      	movs	r0, #0
 8019dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e02:	4834      	ldr	r0, [pc, #208]	@ (8019ed4 <_strtol_l.constprop.0+0xf0>)
 8019e04:	460d      	mov	r5, r1
 8019e06:	462a      	mov	r2, r5
 8019e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e0c:	5d06      	ldrb	r6, [r0, r4]
 8019e0e:	f016 0608 	ands.w	r6, r6, #8
 8019e12:	d1f8      	bne.n	8019e06 <_strtol_l.constprop.0+0x22>
 8019e14:	2c2d      	cmp	r4, #45	@ 0x2d
 8019e16:	d12d      	bne.n	8019e74 <_strtol_l.constprop.0+0x90>
 8019e18:	782c      	ldrb	r4, [r5, #0]
 8019e1a:	2601      	movs	r6, #1
 8019e1c:	1c95      	adds	r5, r2, #2
 8019e1e:	f033 0210 	bics.w	r2, r3, #16
 8019e22:	d109      	bne.n	8019e38 <_strtol_l.constprop.0+0x54>
 8019e24:	2c30      	cmp	r4, #48	@ 0x30
 8019e26:	d12a      	bne.n	8019e7e <_strtol_l.constprop.0+0x9a>
 8019e28:	782a      	ldrb	r2, [r5, #0]
 8019e2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019e2e:	2a58      	cmp	r2, #88	@ 0x58
 8019e30:	d125      	bne.n	8019e7e <_strtol_l.constprop.0+0x9a>
 8019e32:	786c      	ldrb	r4, [r5, #1]
 8019e34:	2310      	movs	r3, #16
 8019e36:	3502      	adds	r5, #2
 8019e38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019e3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e40:	2200      	movs	r2, #0
 8019e42:	fbbc f9f3 	udiv	r9, ip, r3
 8019e46:	4610      	mov	r0, r2
 8019e48:	fb03 ca19 	mls	sl, r3, r9, ip
 8019e4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019e50:	2f09      	cmp	r7, #9
 8019e52:	d81b      	bhi.n	8019e8c <_strtol_l.constprop.0+0xa8>
 8019e54:	463c      	mov	r4, r7
 8019e56:	42a3      	cmp	r3, r4
 8019e58:	dd27      	ble.n	8019eaa <_strtol_l.constprop.0+0xc6>
 8019e5a:	1c57      	adds	r7, r2, #1
 8019e5c:	d007      	beq.n	8019e6e <_strtol_l.constprop.0+0x8a>
 8019e5e:	4581      	cmp	r9, r0
 8019e60:	d320      	bcc.n	8019ea4 <_strtol_l.constprop.0+0xc0>
 8019e62:	d101      	bne.n	8019e68 <_strtol_l.constprop.0+0x84>
 8019e64:	45a2      	cmp	sl, r4
 8019e66:	db1d      	blt.n	8019ea4 <_strtol_l.constprop.0+0xc0>
 8019e68:	fb00 4003 	mla	r0, r0, r3, r4
 8019e6c:	2201      	movs	r2, #1
 8019e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e72:	e7eb      	b.n	8019e4c <_strtol_l.constprop.0+0x68>
 8019e74:	2c2b      	cmp	r4, #43	@ 0x2b
 8019e76:	bf04      	itt	eq
 8019e78:	782c      	ldrbeq	r4, [r5, #0]
 8019e7a:	1c95      	addeq	r5, r2, #2
 8019e7c:	e7cf      	b.n	8019e1e <_strtol_l.constprop.0+0x3a>
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d1da      	bne.n	8019e38 <_strtol_l.constprop.0+0x54>
 8019e82:	2c30      	cmp	r4, #48	@ 0x30
 8019e84:	bf0c      	ite	eq
 8019e86:	2308      	moveq	r3, #8
 8019e88:	230a      	movne	r3, #10
 8019e8a:	e7d5      	b.n	8019e38 <_strtol_l.constprop.0+0x54>
 8019e8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019e90:	2f19      	cmp	r7, #25
 8019e92:	d801      	bhi.n	8019e98 <_strtol_l.constprop.0+0xb4>
 8019e94:	3c37      	subs	r4, #55	@ 0x37
 8019e96:	e7de      	b.n	8019e56 <_strtol_l.constprop.0+0x72>
 8019e98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019e9c:	2f19      	cmp	r7, #25
 8019e9e:	d804      	bhi.n	8019eaa <_strtol_l.constprop.0+0xc6>
 8019ea0:	3c57      	subs	r4, #87	@ 0x57
 8019ea2:	e7d8      	b.n	8019e56 <_strtol_l.constprop.0+0x72>
 8019ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8019ea8:	e7e1      	b.n	8019e6e <_strtol_l.constprop.0+0x8a>
 8019eaa:	1c53      	adds	r3, r2, #1
 8019eac:	d108      	bne.n	8019ec0 <_strtol_l.constprop.0+0xdc>
 8019eae:	2322      	movs	r3, #34	@ 0x22
 8019eb0:	f8ce 3000 	str.w	r3, [lr]
 8019eb4:	4660      	mov	r0, ip
 8019eb6:	f1b8 0f00 	cmp.w	r8, #0
 8019eba:	d0a0      	beq.n	8019dfe <_strtol_l.constprop.0+0x1a>
 8019ebc:	1e69      	subs	r1, r5, #1
 8019ebe:	e006      	b.n	8019ece <_strtol_l.constprop.0+0xea>
 8019ec0:	b106      	cbz	r6, 8019ec4 <_strtol_l.constprop.0+0xe0>
 8019ec2:	4240      	negs	r0, r0
 8019ec4:	f1b8 0f00 	cmp.w	r8, #0
 8019ec8:	d099      	beq.n	8019dfe <_strtol_l.constprop.0+0x1a>
 8019eca:	2a00      	cmp	r2, #0
 8019ecc:	d1f6      	bne.n	8019ebc <_strtol_l.constprop.0+0xd8>
 8019ece:	f8c8 1000 	str.w	r1, [r8]
 8019ed2:	e794      	b.n	8019dfe <_strtol_l.constprop.0+0x1a>
 8019ed4:	0801ee91 	.word	0x0801ee91

08019ed8 <strtol>:
 8019ed8:	4613      	mov	r3, r2
 8019eda:	460a      	mov	r2, r1
 8019edc:	4601      	mov	r1, r0
 8019ede:	4802      	ldr	r0, [pc, #8]	@ (8019ee8 <strtol+0x10>)
 8019ee0:	6800      	ldr	r0, [r0, #0]
 8019ee2:	f7ff bf7f 	b.w	8019de4 <_strtol_l.constprop.0>
 8019ee6:	bf00      	nop
 8019ee8:	240002ac 	.word	0x240002ac

08019eec <__cvt>:
 8019eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eee:	ed2d 8b02 	vpush	{d8}
 8019ef2:	eeb0 8b40 	vmov.f64	d8, d0
 8019ef6:	b085      	sub	sp, #20
 8019ef8:	4617      	mov	r7, r2
 8019efa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019efc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019efe:	ee18 2a90 	vmov	r2, s17
 8019f02:	f025 0520 	bic.w	r5, r5, #32
 8019f06:	2a00      	cmp	r2, #0
 8019f08:	bfb6      	itet	lt
 8019f0a:	222d      	movlt	r2, #45	@ 0x2d
 8019f0c:	2200      	movge	r2, #0
 8019f0e:	eeb1 8b40 	vneglt.f64	d8, d0
 8019f12:	2d46      	cmp	r5, #70	@ 0x46
 8019f14:	460c      	mov	r4, r1
 8019f16:	701a      	strb	r2, [r3, #0]
 8019f18:	d004      	beq.n	8019f24 <__cvt+0x38>
 8019f1a:	2d45      	cmp	r5, #69	@ 0x45
 8019f1c:	d100      	bne.n	8019f20 <__cvt+0x34>
 8019f1e:	3401      	adds	r4, #1
 8019f20:	2102      	movs	r1, #2
 8019f22:	e000      	b.n	8019f26 <__cvt+0x3a>
 8019f24:	2103      	movs	r1, #3
 8019f26:	ab03      	add	r3, sp, #12
 8019f28:	9301      	str	r3, [sp, #4]
 8019f2a:	ab02      	add	r3, sp, #8
 8019f2c:	9300      	str	r3, [sp, #0]
 8019f2e:	4622      	mov	r2, r4
 8019f30:	4633      	mov	r3, r6
 8019f32:	eeb0 0b48 	vmov.f64	d0, d8
 8019f36:	f000 fe73 	bl	801ac20 <_dtoa_r>
 8019f3a:	2d47      	cmp	r5, #71	@ 0x47
 8019f3c:	d114      	bne.n	8019f68 <__cvt+0x7c>
 8019f3e:	07fb      	lsls	r3, r7, #31
 8019f40:	d50a      	bpl.n	8019f58 <__cvt+0x6c>
 8019f42:	1902      	adds	r2, r0, r4
 8019f44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f4c:	bf08      	it	eq
 8019f4e:	9203      	streq	r2, [sp, #12]
 8019f50:	2130      	movs	r1, #48	@ 0x30
 8019f52:	9b03      	ldr	r3, [sp, #12]
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d319      	bcc.n	8019f8c <__cvt+0xa0>
 8019f58:	9b03      	ldr	r3, [sp, #12]
 8019f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019f5c:	1a1b      	subs	r3, r3, r0
 8019f5e:	6013      	str	r3, [r2, #0]
 8019f60:	b005      	add	sp, #20
 8019f62:	ecbd 8b02 	vpop	{d8}
 8019f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f68:	2d46      	cmp	r5, #70	@ 0x46
 8019f6a:	eb00 0204 	add.w	r2, r0, r4
 8019f6e:	d1e9      	bne.n	8019f44 <__cvt+0x58>
 8019f70:	7803      	ldrb	r3, [r0, #0]
 8019f72:	2b30      	cmp	r3, #48	@ 0x30
 8019f74:	d107      	bne.n	8019f86 <__cvt+0x9a>
 8019f76:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f7e:	bf1c      	itt	ne
 8019f80:	f1c4 0401 	rsbne	r4, r4, #1
 8019f84:	6034      	strne	r4, [r6, #0]
 8019f86:	6833      	ldr	r3, [r6, #0]
 8019f88:	441a      	add	r2, r3
 8019f8a:	e7db      	b.n	8019f44 <__cvt+0x58>
 8019f8c:	1c5c      	adds	r4, r3, #1
 8019f8e:	9403      	str	r4, [sp, #12]
 8019f90:	7019      	strb	r1, [r3, #0]
 8019f92:	e7de      	b.n	8019f52 <__cvt+0x66>

08019f94 <__exponent>:
 8019f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f96:	2900      	cmp	r1, #0
 8019f98:	bfba      	itte	lt
 8019f9a:	4249      	neglt	r1, r1
 8019f9c:	232d      	movlt	r3, #45	@ 0x2d
 8019f9e:	232b      	movge	r3, #43	@ 0x2b
 8019fa0:	2909      	cmp	r1, #9
 8019fa2:	7002      	strb	r2, [r0, #0]
 8019fa4:	7043      	strb	r3, [r0, #1]
 8019fa6:	dd29      	ble.n	8019ffc <__exponent+0x68>
 8019fa8:	f10d 0307 	add.w	r3, sp, #7
 8019fac:	461d      	mov	r5, r3
 8019fae:	270a      	movs	r7, #10
 8019fb0:	461a      	mov	r2, r3
 8019fb2:	fbb1 f6f7 	udiv	r6, r1, r7
 8019fb6:	fb07 1416 	mls	r4, r7, r6, r1
 8019fba:	3430      	adds	r4, #48	@ 0x30
 8019fbc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019fc0:	460c      	mov	r4, r1
 8019fc2:	2c63      	cmp	r4, #99	@ 0x63
 8019fc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8019fc8:	4631      	mov	r1, r6
 8019fca:	dcf1      	bgt.n	8019fb0 <__exponent+0x1c>
 8019fcc:	3130      	adds	r1, #48	@ 0x30
 8019fce:	1e94      	subs	r4, r2, #2
 8019fd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019fd4:	1c41      	adds	r1, r0, #1
 8019fd6:	4623      	mov	r3, r4
 8019fd8:	42ab      	cmp	r3, r5
 8019fda:	d30a      	bcc.n	8019ff2 <__exponent+0x5e>
 8019fdc:	f10d 0309 	add.w	r3, sp, #9
 8019fe0:	1a9b      	subs	r3, r3, r2
 8019fe2:	42ac      	cmp	r4, r5
 8019fe4:	bf88      	it	hi
 8019fe6:	2300      	movhi	r3, #0
 8019fe8:	3302      	adds	r3, #2
 8019fea:	4403      	add	r3, r0
 8019fec:	1a18      	subs	r0, r3, r0
 8019fee:	b003      	add	sp, #12
 8019ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ff2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019ff6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019ffa:	e7ed      	b.n	8019fd8 <__exponent+0x44>
 8019ffc:	2330      	movs	r3, #48	@ 0x30
 8019ffe:	3130      	adds	r1, #48	@ 0x30
 801a000:	7083      	strb	r3, [r0, #2]
 801a002:	70c1      	strb	r1, [r0, #3]
 801a004:	1d03      	adds	r3, r0, #4
 801a006:	e7f1      	b.n	8019fec <__exponent+0x58>

0801a008 <_printf_float>:
 801a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	b08d      	sub	sp, #52	@ 0x34
 801a00e:	460c      	mov	r4, r1
 801a010:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a014:	4616      	mov	r6, r2
 801a016:	461f      	mov	r7, r3
 801a018:	4605      	mov	r5, r0
 801a01a:	f000 fce9 	bl	801a9f0 <_localeconv_r>
 801a01e:	f8d0 b000 	ldr.w	fp, [r0]
 801a022:	4658      	mov	r0, fp
 801a024:	f7e6 f9d4 	bl	80003d0 <strlen>
 801a028:	2300      	movs	r3, #0
 801a02a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a02c:	f8d8 3000 	ldr.w	r3, [r8]
 801a030:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a034:	6822      	ldr	r2, [r4, #0]
 801a036:	9005      	str	r0, [sp, #20]
 801a038:	3307      	adds	r3, #7
 801a03a:	f023 0307 	bic.w	r3, r3, #7
 801a03e:	f103 0108 	add.w	r1, r3, #8
 801a042:	f8c8 1000 	str.w	r1, [r8]
 801a046:	ed93 0b00 	vldr	d0, [r3]
 801a04a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801a2a8 <_printf_float+0x2a0>
 801a04e:	eeb0 7bc0 	vabs.f64	d7, d0
 801a052:	eeb4 7b46 	vcmp.f64	d7, d6
 801a056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a05a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801a05e:	dd24      	ble.n	801a0aa <_printf_float+0xa2>
 801a060:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a068:	d502      	bpl.n	801a070 <_printf_float+0x68>
 801a06a:	232d      	movs	r3, #45	@ 0x2d
 801a06c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a070:	498f      	ldr	r1, [pc, #572]	@ (801a2b0 <_printf_float+0x2a8>)
 801a072:	4b90      	ldr	r3, [pc, #576]	@ (801a2b4 <_printf_float+0x2ac>)
 801a074:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801a078:	bf94      	ite	ls
 801a07a:	4688      	movls	r8, r1
 801a07c:	4698      	movhi	r8, r3
 801a07e:	f022 0204 	bic.w	r2, r2, #4
 801a082:	2303      	movs	r3, #3
 801a084:	6123      	str	r3, [r4, #16]
 801a086:	6022      	str	r2, [r4, #0]
 801a088:	f04f 0a00 	mov.w	sl, #0
 801a08c:	9700      	str	r7, [sp, #0]
 801a08e:	4633      	mov	r3, r6
 801a090:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a092:	4621      	mov	r1, r4
 801a094:	4628      	mov	r0, r5
 801a096:	f000 f9d1 	bl	801a43c <_printf_common>
 801a09a:	3001      	adds	r0, #1
 801a09c:	f040 8089 	bne.w	801a1b2 <_printf_float+0x1aa>
 801a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a0a4:	b00d      	add	sp, #52	@ 0x34
 801a0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0aa:	eeb4 0b40 	vcmp.f64	d0, d0
 801a0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0b2:	d709      	bvc.n	801a0c8 <_printf_float+0xc0>
 801a0b4:	ee10 3a90 	vmov	r3, s1
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	bfbc      	itt	lt
 801a0bc:	232d      	movlt	r3, #45	@ 0x2d
 801a0be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a0c2:	497d      	ldr	r1, [pc, #500]	@ (801a2b8 <_printf_float+0x2b0>)
 801a0c4:	4b7d      	ldr	r3, [pc, #500]	@ (801a2bc <_printf_float+0x2b4>)
 801a0c6:	e7d5      	b.n	801a074 <_printf_float+0x6c>
 801a0c8:	6863      	ldr	r3, [r4, #4]
 801a0ca:	1c59      	adds	r1, r3, #1
 801a0cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801a0d0:	d139      	bne.n	801a146 <_printf_float+0x13e>
 801a0d2:	2306      	movs	r3, #6
 801a0d4:	6063      	str	r3, [r4, #4]
 801a0d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801a0da:	2300      	movs	r3, #0
 801a0dc:	6022      	str	r2, [r4, #0]
 801a0de:	9303      	str	r3, [sp, #12]
 801a0e0:	ab0a      	add	r3, sp, #40	@ 0x28
 801a0e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801a0e6:	ab09      	add	r3, sp, #36	@ 0x24
 801a0e8:	9300      	str	r3, [sp, #0]
 801a0ea:	6861      	ldr	r1, [r4, #4]
 801a0ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a0f0:	4628      	mov	r0, r5
 801a0f2:	f7ff fefb 	bl	8019eec <__cvt>
 801a0f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0fc:	4680      	mov	r8, r0
 801a0fe:	d129      	bne.n	801a154 <_printf_float+0x14c>
 801a100:	1cc8      	adds	r0, r1, #3
 801a102:	db02      	blt.n	801a10a <_printf_float+0x102>
 801a104:	6863      	ldr	r3, [r4, #4]
 801a106:	4299      	cmp	r1, r3
 801a108:	dd41      	ble.n	801a18e <_printf_float+0x186>
 801a10a:	f1a9 0902 	sub.w	r9, r9, #2
 801a10e:	fa5f f989 	uxtb.w	r9, r9
 801a112:	3901      	subs	r1, #1
 801a114:	464a      	mov	r2, r9
 801a116:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a11a:	9109      	str	r1, [sp, #36]	@ 0x24
 801a11c:	f7ff ff3a 	bl	8019f94 <__exponent>
 801a120:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a122:	1813      	adds	r3, r2, r0
 801a124:	2a01      	cmp	r2, #1
 801a126:	4682      	mov	sl, r0
 801a128:	6123      	str	r3, [r4, #16]
 801a12a:	dc02      	bgt.n	801a132 <_printf_float+0x12a>
 801a12c:	6822      	ldr	r2, [r4, #0]
 801a12e:	07d2      	lsls	r2, r2, #31
 801a130:	d501      	bpl.n	801a136 <_printf_float+0x12e>
 801a132:	3301      	adds	r3, #1
 801a134:	6123      	str	r3, [r4, #16]
 801a136:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d0a6      	beq.n	801a08c <_printf_float+0x84>
 801a13e:	232d      	movs	r3, #45	@ 0x2d
 801a140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a144:	e7a2      	b.n	801a08c <_printf_float+0x84>
 801a146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a14a:	d1c4      	bne.n	801a0d6 <_printf_float+0xce>
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d1c2      	bne.n	801a0d6 <_printf_float+0xce>
 801a150:	2301      	movs	r3, #1
 801a152:	e7bf      	b.n	801a0d4 <_printf_float+0xcc>
 801a154:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a158:	d9db      	bls.n	801a112 <_printf_float+0x10a>
 801a15a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801a15e:	d118      	bne.n	801a192 <_printf_float+0x18a>
 801a160:	2900      	cmp	r1, #0
 801a162:	6863      	ldr	r3, [r4, #4]
 801a164:	dd0b      	ble.n	801a17e <_printf_float+0x176>
 801a166:	6121      	str	r1, [r4, #16]
 801a168:	b913      	cbnz	r3, 801a170 <_printf_float+0x168>
 801a16a:	6822      	ldr	r2, [r4, #0]
 801a16c:	07d0      	lsls	r0, r2, #31
 801a16e:	d502      	bpl.n	801a176 <_printf_float+0x16e>
 801a170:	3301      	adds	r3, #1
 801a172:	440b      	add	r3, r1
 801a174:	6123      	str	r3, [r4, #16]
 801a176:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a178:	f04f 0a00 	mov.w	sl, #0
 801a17c:	e7db      	b.n	801a136 <_printf_float+0x12e>
 801a17e:	b913      	cbnz	r3, 801a186 <_printf_float+0x17e>
 801a180:	6822      	ldr	r2, [r4, #0]
 801a182:	07d2      	lsls	r2, r2, #31
 801a184:	d501      	bpl.n	801a18a <_printf_float+0x182>
 801a186:	3302      	adds	r3, #2
 801a188:	e7f4      	b.n	801a174 <_printf_float+0x16c>
 801a18a:	2301      	movs	r3, #1
 801a18c:	e7f2      	b.n	801a174 <_printf_float+0x16c>
 801a18e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801a192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a194:	4299      	cmp	r1, r3
 801a196:	db05      	blt.n	801a1a4 <_printf_float+0x19c>
 801a198:	6823      	ldr	r3, [r4, #0]
 801a19a:	6121      	str	r1, [r4, #16]
 801a19c:	07d8      	lsls	r0, r3, #31
 801a19e:	d5ea      	bpl.n	801a176 <_printf_float+0x16e>
 801a1a0:	1c4b      	adds	r3, r1, #1
 801a1a2:	e7e7      	b.n	801a174 <_printf_float+0x16c>
 801a1a4:	2900      	cmp	r1, #0
 801a1a6:	bfd4      	ite	le
 801a1a8:	f1c1 0202 	rsble	r2, r1, #2
 801a1ac:	2201      	movgt	r2, #1
 801a1ae:	4413      	add	r3, r2
 801a1b0:	e7e0      	b.n	801a174 <_printf_float+0x16c>
 801a1b2:	6823      	ldr	r3, [r4, #0]
 801a1b4:	055a      	lsls	r2, r3, #21
 801a1b6:	d407      	bmi.n	801a1c8 <_printf_float+0x1c0>
 801a1b8:	6923      	ldr	r3, [r4, #16]
 801a1ba:	4642      	mov	r2, r8
 801a1bc:	4631      	mov	r1, r6
 801a1be:	4628      	mov	r0, r5
 801a1c0:	47b8      	blx	r7
 801a1c2:	3001      	adds	r0, #1
 801a1c4:	d12a      	bne.n	801a21c <_printf_float+0x214>
 801a1c6:	e76b      	b.n	801a0a0 <_printf_float+0x98>
 801a1c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801a1cc:	f240 80e0 	bls.w	801a390 <_printf_float+0x388>
 801a1d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a1d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1dc:	d133      	bne.n	801a246 <_printf_float+0x23e>
 801a1de:	4a38      	ldr	r2, [pc, #224]	@ (801a2c0 <_printf_float+0x2b8>)
 801a1e0:	2301      	movs	r3, #1
 801a1e2:	4631      	mov	r1, r6
 801a1e4:	4628      	mov	r0, r5
 801a1e6:	47b8      	blx	r7
 801a1e8:	3001      	adds	r0, #1
 801a1ea:	f43f af59 	beq.w	801a0a0 <_printf_float+0x98>
 801a1ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a1f2:	4543      	cmp	r3, r8
 801a1f4:	db02      	blt.n	801a1fc <_printf_float+0x1f4>
 801a1f6:	6823      	ldr	r3, [r4, #0]
 801a1f8:	07d8      	lsls	r0, r3, #31
 801a1fa:	d50f      	bpl.n	801a21c <_printf_float+0x214>
 801a1fc:	9b05      	ldr	r3, [sp, #20]
 801a1fe:	465a      	mov	r2, fp
 801a200:	4631      	mov	r1, r6
 801a202:	4628      	mov	r0, r5
 801a204:	47b8      	blx	r7
 801a206:	3001      	adds	r0, #1
 801a208:	f43f af4a 	beq.w	801a0a0 <_printf_float+0x98>
 801a20c:	f04f 0900 	mov.w	r9, #0
 801a210:	f108 38ff 	add.w	r8, r8, #4294967295
 801a214:	f104 0a1a 	add.w	sl, r4, #26
 801a218:	45c8      	cmp	r8, r9
 801a21a:	dc09      	bgt.n	801a230 <_printf_float+0x228>
 801a21c:	6823      	ldr	r3, [r4, #0]
 801a21e:	079b      	lsls	r3, r3, #30
 801a220:	f100 8107 	bmi.w	801a432 <_printf_float+0x42a>
 801a224:	68e0      	ldr	r0, [r4, #12]
 801a226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a228:	4298      	cmp	r0, r3
 801a22a:	bfb8      	it	lt
 801a22c:	4618      	movlt	r0, r3
 801a22e:	e739      	b.n	801a0a4 <_printf_float+0x9c>
 801a230:	2301      	movs	r3, #1
 801a232:	4652      	mov	r2, sl
 801a234:	4631      	mov	r1, r6
 801a236:	4628      	mov	r0, r5
 801a238:	47b8      	blx	r7
 801a23a:	3001      	adds	r0, #1
 801a23c:	f43f af30 	beq.w	801a0a0 <_printf_float+0x98>
 801a240:	f109 0901 	add.w	r9, r9, #1
 801a244:	e7e8      	b.n	801a218 <_printf_float+0x210>
 801a246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a248:	2b00      	cmp	r3, #0
 801a24a:	dc3b      	bgt.n	801a2c4 <_printf_float+0x2bc>
 801a24c:	4a1c      	ldr	r2, [pc, #112]	@ (801a2c0 <_printf_float+0x2b8>)
 801a24e:	2301      	movs	r3, #1
 801a250:	4631      	mov	r1, r6
 801a252:	4628      	mov	r0, r5
 801a254:	47b8      	blx	r7
 801a256:	3001      	adds	r0, #1
 801a258:	f43f af22 	beq.w	801a0a0 <_printf_float+0x98>
 801a25c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a260:	ea59 0303 	orrs.w	r3, r9, r3
 801a264:	d102      	bne.n	801a26c <_printf_float+0x264>
 801a266:	6823      	ldr	r3, [r4, #0]
 801a268:	07d9      	lsls	r1, r3, #31
 801a26a:	d5d7      	bpl.n	801a21c <_printf_float+0x214>
 801a26c:	9b05      	ldr	r3, [sp, #20]
 801a26e:	465a      	mov	r2, fp
 801a270:	4631      	mov	r1, r6
 801a272:	4628      	mov	r0, r5
 801a274:	47b8      	blx	r7
 801a276:	3001      	adds	r0, #1
 801a278:	f43f af12 	beq.w	801a0a0 <_printf_float+0x98>
 801a27c:	f04f 0a00 	mov.w	sl, #0
 801a280:	f104 0b1a 	add.w	fp, r4, #26
 801a284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a286:	425b      	negs	r3, r3
 801a288:	4553      	cmp	r3, sl
 801a28a:	dc01      	bgt.n	801a290 <_printf_float+0x288>
 801a28c:	464b      	mov	r3, r9
 801a28e:	e794      	b.n	801a1ba <_printf_float+0x1b2>
 801a290:	2301      	movs	r3, #1
 801a292:	465a      	mov	r2, fp
 801a294:	4631      	mov	r1, r6
 801a296:	4628      	mov	r0, r5
 801a298:	47b8      	blx	r7
 801a29a:	3001      	adds	r0, #1
 801a29c:	f43f af00 	beq.w	801a0a0 <_printf_float+0x98>
 801a2a0:	f10a 0a01 	add.w	sl, sl, #1
 801a2a4:	e7ee      	b.n	801a284 <_printf_float+0x27c>
 801a2a6:	bf00      	nop
 801a2a8:	ffffffff 	.word	0xffffffff
 801a2ac:	7fefffff 	.word	0x7fefffff
 801a2b0:	0801ef91 	.word	0x0801ef91
 801a2b4:	0801ef95 	.word	0x0801ef95
 801a2b8:	0801ef99 	.word	0x0801ef99
 801a2bc:	0801ef9d 	.word	0x0801ef9d
 801a2c0:	0801efa1 	.word	0x0801efa1
 801a2c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a2c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a2ca:	4553      	cmp	r3, sl
 801a2cc:	bfa8      	it	ge
 801a2ce:	4653      	movge	r3, sl
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	4699      	mov	r9, r3
 801a2d4:	dc37      	bgt.n	801a346 <_printf_float+0x33e>
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	9307      	str	r3, [sp, #28]
 801a2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2de:	f104 021a 	add.w	r2, r4, #26
 801a2e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a2e4:	9907      	ldr	r1, [sp, #28]
 801a2e6:	9306      	str	r3, [sp, #24]
 801a2e8:	eba3 0309 	sub.w	r3, r3, r9
 801a2ec:	428b      	cmp	r3, r1
 801a2ee:	dc31      	bgt.n	801a354 <_printf_float+0x34c>
 801a2f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2f2:	459a      	cmp	sl, r3
 801a2f4:	dc3b      	bgt.n	801a36e <_printf_float+0x366>
 801a2f6:	6823      	ldr	r3, [r4, #0]
 801a2f8:	07da      	lsls	r2, r3, #31
 801a2fa:	d438      	bmi.n	801a36e <_printf_float+0x366>
 801a2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2fe:	ebaa 0903 	sub.w	r9, sl, r3
 801a302:	9b06      	ldr	r3, [sp, #24]
 801a304:	ebaa 0303 	sub.w	r3, sl, r3
 801a308:	4599      	cmp	r9, r3
 801a30a:	bfa8      	it	ge
 801a30c:	4699      	movge	r9, r3
 801a30e:	f1b9 0f00 	cmp.w	r9, #0
 801a312:	dc34      	bgt.n	801a37e <_printf_float+0x376>
 801a314:	f04f 0800 	mov.w	r8, #0
 801a318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a31c:	f104 0b1a 	add.w	fp, r4, #26
 801a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a322:	ebaa 0303 	sub.w	r3, sl, r3
 801a326:	eba3 0309 	sub.w	r3, r3, r9
 801a32a:	4543      	cmp	r3, r8
 801a32c:	f77f af76 	ble.w	801a21c <_printf_float+0x214>
 801a330:	2301      	movs	r3, #1
 801a332:	465a      	mov	r2, fp
 801a334:	4631      	mov	r1, r6
 801a336:	4628      	mov	r0, r5
 801a338:	47b8      	blx	r7
 801a33a:	3001      	adds	r0, #1
 801a33c:	f43f aeb0 	beq.w	801a0a0 <_printf_float+0x98>
 801a340:	f108 0801 	add.w	r8, r8, #1
 801a344:	e7ec      	b.n	801a320 <_printf_float+0x318>
 801a346:	4642      	mov	r2, r8
 801a348:	4631      	mov	r1, r6
 801a34a:	4628      	mov	r0, r5
 801a34c:	47b8      	blx	r7
 801a34e:	3001      	adds	r0, #1
 801a350:	d1c1      	bne.n	801a2d6 <_printf_float+0x2ce>
 801a352:	e6a5      	b.n	801a0a0 <_printf_float+0x98>
 801a354:	2301      	movs	r3, #1
 801a356:	4631      	mov	r1, r6
 801a358:	4628      	mov	r0, r5
 801a35a:	9206      	str	r2, [sp, #24]
 801a35c:	47b8      	blx	r7
 801a35e:	3001      	adds	r0, #1
 801a360:	f43f ae9e 	beq.w	801a0a0 <_printf_float+0x98>
 801a364:	9b07      	ldr	r3, [sp, #28]
 801a366:	9a06      	ldr	r2, [sp, #24]
 801a368:	3301      	adds	r3, #1
 801a36a:	9307      	str	r3, [sp, #28]
 801a36c:	e7b9      	b.n	801a2e2 <_printf_float+0x2da>
 801a36e:	9b05      	ldr	r3, [sp, #20]
 801a370:	465a      	mov	r2, fp
 801a372:	4631      	mov	r1, r6
 801a374:	4628      	mov	r0, r5
 801a376:	47b8      	blx	r7
 801a378:	3001      	adds	r0, #1
 801a37a:	d1bf      	bne.n	801a2fc <_printf_float+0x2f4>
 801a37c:	e690      	b.n	801a0a0 <_printf_float+0x98>
 801a37e:	9a06      	ldr	r2, [sp, #24]
 801a380:	464b      	mov	r3, r9
 801a382:	4442      	add	r2, r8
 801a384:	4631      	mov	r1, r6
 801a386:	4628      	mov	r0, r5
 801a388:	47b8      	blx	r7
 801a38a:	3001      	adds	r0, #1
 801a38c:	d1c2      	bne.n	801a314 <_printf_float+0x30c>
 801a38e:	e687      	b.n	801a0a0 <_printf_float+0x98>
 801a390:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801a394:	f1b9 0f01 	cmp.w	r9, #1
 801a398:	dc01      	bgt.n	801a39e <_printf_float+0x396>
 801a39a:	07db      	lsls	r3, r3, #31
 801a39c:	d536      	bpl.n	801a40c <_printf_float+0x404>
 801a39e:	2301      	movs	r3, #1
 801a3a0:	4642      	mov	r2, r8
 801a3a2:	4631      	mov	r1, r6
 801a3a4:	4628      	mov	r0, r5
 801a3a6:	47b8      	blx	r7
 801a3a8:	3001      	adds	r0, #1
 801a3aa:	f43f ae79 	beq.w	801a0a0 <_printf_float+0x98>
 801a3ae:	9b05      	ldr	r3, [sp, #20]
 801a3b0:	465a      	mov	r2, fp
 801a3b2:	4631      	mov	r1, r6
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	47b8      	blx	r7
 801a3b8:	3001      	adds	r0, #1
 801a3ba:	f43f ae71 	beq.w	801a0a0 <_printf_float+0x98>
 801a3be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801a3c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3ca:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3ce:	d018      	beq.n	801a402 <_printf_float+0x3fa>
 801a3d0:	464b      	mov	r3, r9
 801a3d2:	f108 0201 	add.w	r2, r8, #1
 801a3d6:	4631      	mov	r1, r6
 801a3d8:	4628      	mov	r0, r5
 801a3da:	47b8      	blx	r7
 801a3dc:	3001      	adds	r0, #1
 801a3de:	d10c      	bne.n	801a3fa <_printf_float+0x3f2>
 801a3e0:	e65e      	b.n	801a0a0 <_printf_float+0x98>
 801a3e2:	2301      	movs	r3, #1
 801a3e4:	465a      	mov	r2, fp
 801a3e6:	4631      	mov	r1, r6
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	47b8      	blx	r7
 801a3ec:	3001      	adds	r0, #1
 801a3ee:	f43f ae57 	beq.w	801a0a0 <_printf_float+0x98>
 801a3f2:	f108 0801 	add.w	r8, r8, #1
 801a3f6:	45c8      	cmp	r8, r9
 801a3f8:	dbf3      	blt.n	801a3e2 <_printf_float+0x3da>
 801a3fa:	4653      	mov	r3, sl
 801a3fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a400:	e6dc      	b.n	801a1bc <_printf_float+0x1b4>
 801a402:	f04f 0800 	mov.w	r8, #0
 801a406:	f104 0b1a 	add.w	fp, r4, #26
 801a40a:	e7f4      	b.n	801a3f6 <_printf_float+0x3ee>
 801a40c:	2301      	movs	r3, #1
 801a40e:	4642      	mov	r2, r8
 801a410:	e7e1      	b.n	801a3d6 <_printf_float+0x3ce>
 801a412:	2301      	movs	r3, #1
 801a414:	464a      	mov	r2, r9
 801a416:	4631      	mov	r1, r6
 801a418:	4628      	mov	r0, r5
 801a41a:	47b8      	blx	r7
 801a41c:	3001      	adds	r0, #1
 801a41e:	f43f ae3f 	beq.w	801a0a0 <_printf_float+0x98>
 801a422:	f108 0801 	add.w	r8, r8, #1
 801a426:	68e3      	ldr	r3, [r4, #12]
 801a428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a42a:	1a5b      	subs	r3, r3, r1
 801a42c:	4543      	cmp	r3, r8
 801a42e:	dcf0      	bgt.n	801a412 <_printf_float+0x40a>
 801a430:	e6f8      	b.n	801a224 <_printf_float+0x21c>
 801a432:	f04f 0800 	mov.w	r8, #0
 801a436:	f104 0919 	add.w	r9, r4, #25
 801a43a:	e7f4      	b.n	801a426 <_printf_float+0x41e>

0801a43c <_printf_common>:
 801a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a440:	4616      	mov	r6, r2
 801a442:	4698      	mov	r8, r3
 801a444:	688a      	ldr	r2, [r1, #8]
 801a446:	690b      	ldr	r3, [r1, #16]
 801a448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a44c:	4293      	cmp	r3, r2
 801a44e:	bfb8      	it	lt
 801a450:	4613      	movlt	r3, r2
 801a452:	6033      	str	r3, [r6, #0]
 801a454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a458:	4607      	mov	r7, r0
 801a45a:	460c      	mov	r4, r1
 801a45c:	b10a      	cbz	r2, 801a462 <_printf_common+0x26>
 801a45e:	3301      	adds	r3, #1
 801a460:	6033      	str	r3, [r6, #0]
 801a462:	6823      	ldr	r3, [r4, #0]
 801a464:	0699      	lsls	r1, r3, #26
 801a466:	bf42      	ittt	mi
 801a468:	6833      	ldrmi	r3, [r6, #0]
 801a46a:	3302      	addmi	r3, #2
 801a46c:	6033      	strmi	r3, [r6, #0]
 801a46e:	6825      	ldr	r5, [r4, #0]
 801a470:	f015 0506 	ands.w	r5, r5, #6
 801a474:	d106      	bne.n	801a484 <_printf_common+0x48>
 801a476:	f104 0a19 	add.w	sl, r4, #25
 801a47a:	68e3      	ldr	r3, [r4, #12]
 801a47c:	6832      	ldr	r2, [r6, #0]
 801a47e:	1a9b      	subs	r3, r3, r2
 801a480:	42ab      	cmp	r3, r5
 801a482:	dc26      	bgt.n	801a4d2 <_printf_common+0x96>
 801a484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a488:	6822      	ldr	r2, [r4, #0]
 801a48a:	3b00      	subs	r3, #0
 801a48c:	bf18      	it	ne
 801a48e:	2301      	movne	r3, #1
 801a490:	0692      	lsls	r2, r2, #26
 801a492:	d42b      	bmi.n	801a4ec <_printf_common+0xb0>
 801a494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a498:	4641      	mov	r1, r8
 801a49a:	4638      	mov	r0, r7
 801a49c:	47c8      	blx	r9
 801a49e:	3001      	adds	r0, #1
 801a4a0:	d01e      	beq.n	801a4e0 <_printf_common+0xa4>
 801a4a2:	6823      	ldr	r3, [r4, #0]
 801a4a4:	6922      	ldr	r2, [r4, #16]
 801a4a6:	f003 0306 	and.w	r3, r3, #6
 801a4aa:	2b04      	cmp	r3, #4
 801a4ac:	bf02      	ittt	eq
 801a4ae:	68e5      	ldreq	r5, [r4, #12]
 801a4b0:	6833      	ldreq	r3, [r6, #0]
 801a4b2:	1aed      	subeq	r5, r5, r3
 801a4b4:	68a3      	ldr	r3, [r4, #8]
 801a4b6:	bf0c      	ite	eq
 801a4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a4bc:	2500      	movne	r5, #0
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	bfc4      	itt	gt
 801a4c2:	1a9b      	subgt	r3, r3, r2
 801a4c4:	18ed      	addgt	r5, r5, r3
 801a4c6:	2600      	movs	r6, #0
 801a4c8:	341a      	adds	r4, #26
 801a4ca:	42b5      	cmp	r5, r6
 801a4cc:	d11a      	bne.n	801a504 <_printf_common+0xc8>
 801a4ce:	2000      	movs	r0, #0
 801a4d0:	e008      	b.n	801a4e4 <_printf_common+0xa8>
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	4652      	mov	r2, sl
 801a4d6:	4641      	mov	r1, r8
 801a4d8:	4638      	mov	r0, r7
 801a4da:	47c8      	blx	r9
 801a4dc:	3001      	adds	r0, #1
 801a4de:	d103      	bne.n	801a4e8 <_printf_common+0xac>
 801a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4e8:	3501      	adds	r5, #1
 801a4ea:	e7c6      	b.n	801a47a <_printf_common+0x3e>
 801a4ec:	18e1      	adds	r1, r4, r3
 801a4ee:	1c5a      	adds	r2, r3, #1
 801a4f0:	2030      	movs	r0, #48	@ 0x30
 801a4f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a4f6:	4422      	add	r2, r4
 801a4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a4fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a500:	3302      	adds	r3, #2
 801a502:	e7c7      	b.n	801a494 <_printf_common+0x58>
 801a504:	2301      	movs	r3, #1
 801a506:	4622      	mov	r2, r4
 801a508:	4641      	mov	r1, r8
 801a50a:	4638      	mov	r0, r7
 801a50c:	47c8      	blx	r9
 801a50e:	3001      	adds	r0, #1
 801a510:	d0e6      	beq.n	801a4e0 <_printf_common+0xa4>
 801a512:	3601      	adds	r6, #1
 801a514:	e7d9      	b.n	801a4ca <_printf_common+0x8e>
	...

0801a518 <_printf_i>:
 801a518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a51c:	7e0f      	ldrb	r7, [r1, #24]
 801a51e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a520:	2f78      	cmp	r7, #120	@ 0x78
 801a522:	4691      	mov	r9, r2
 801a524:	4680      	mov	r8, r0
 801a526:	460c      	mov	r4, r1
 801a528:	469a      	mov	sl, r3
 801a52a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a52e:	d807      	bhi.n	801a540 <_printf_i+0x28>
 801a530:	2f62      	cmp	r7, #98	@ 0x62
 801a532:	d80a      	bhi.n	801a54a <_printf_i+0x32>
 801a534:	2f00      	cmp	r7, #0
 801a536:	f000 80d2 	beq.w	801a6de <_printf_i+0x1c6>
 801a53a:	2f58      	cmp	r7, #88	@ 0x58
 801a53c:	f000 80b9 	beq.w	801a6b2 <_printf_i+0x19a>
 801a540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a548:	e03a      	b.n	801a5c0 <_printf_i+0xa8>
 801a54a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a54e:	2b15      	cmp	r3, #21
 801a550:	d8f6      	bhi.n	801a540 <_printf_i+0x28>
 801a552:	a101      	add	r1, pc, #4	@ (adr r1, 801a558 <_printf_i+0x40>)
 801a554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a558:	0801a5b1 	.word	0x0801a5b1
 801a55c:	0801a5c5 	.word	0x0801a5c5
 801a560:	0801a541 	.word	0x0801a541
 801a564:	0801a541 	.word	0x0801a541
 801a568:	0801a541 	.word	0x0801a541
 801a56c:	0801a541 	.word	0x0801a541
 801a570:	0801a5c5 	.word	0x0801a5c5
 801a574:	0801a541 	.word	0x0801a541
 801a578:	0801a541 	.word	0x0801a541
 801a57c:	0801a541 	.word	0x0801a541
 801a580:	0801a541 	.word	0x0801a541
 801a584:	0801a6c5 	.word	0x0801a6c5
 801a588:	0801a5ef 	.word	0x0801a5ef
 801a58c:	0801a67f 	.word	0x0801a67f
 801a590:	0801a541 	.word	0x0801a541
 801a594:	0801a541 	.word	0x0801a541
 801a598:	0801a6e7 	.word	0x0801a6e7
 801a59c:	0801a541 	.word	0x0801a541
 801a5a0:	0801a5ef 	.word	0x0801a5ef
 801a5a4:	0801a541 	.word	0x0801a541
 801a5a8:	0801a541 	.word	0x0801a541
 801a5ac:	0801a687 	.word	0x0801a687
 801a5b0:	6833      	ldr	r3, [r6, #0]
 801a5b2:	1d1a      	adds	r2, r3, #4
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	6032      	str	r2, [r6, #0]
 801a5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a5bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	e09d      	b.n	801a700 <_printf_i+0x1e8>
 801a5c4:	6833      	ldr	r3, [r6, #0]
 801a5c6:	6820      	ldr	r0, [r4, #0]
 801a5c8:	1d19      	adds	r1, r3, #4
 801a5ca:	6031      	str	r1, [r6, #0]
 801a5cc:	0606      	lsls	r6, r0, #24
 801a5ce:	d501      	bpl.n	801a5d4 <_printf_i+0xbc>
 801a5d0:	681d      	ldr	r5, [r3, #0]
 801a5d2:	e003      	b.n	801a5dc <_printf_i+0xc4>
 801a5d4:	0645      	lsls	r5, r0, #25
 801a5d6:	d5fb      	bpl.n	801a5d0 <_printf_i+0xb8>
 801a5d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a5dc:	2d00      	cmp	r5, #0
 801a5de:	da03      	bge.n	801a5e8 <_printf_i+0xd0>
 801a5e0:	232d      	movs	r3, #45	@ 0x2d
 801a5e2:	426d      	negs	r5, r5
 801a5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5e8:	4859      	ldr	r0, [pc, #356]	@ (801a750 <_printf_i+0x238>)
 801a5ea:	230a      	movs	r3, #10
 801a5ec:	e011      	b.n	801a612 <_printf_i+0xfa>
 801a5ee:	6821      	ldr	r1, [r4, #0]
 801a5f0:	6833      	ldr	r3, [r6, #0]
 801a5f2:	0608      	lsls	r0, r1, #24
 801a5f4:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5f8:	d402      	bmi.n	801a600 <_printf_i+0xe8>
 801a5fa:	0649      	lsls	r1, r1, #25
 801a5fc:	bf48      	it	mi
 801a5fe:	b2ad      	uxthmi	r5, r5
 801a600:	2f6f      	cmp	r7, #111	@ 0x6f
 801a602:	4853      	ldr	r0, [pc, #332]	@ (801a750 <_printf_i+0x238>)
 801a604:	6033      	str	r3, [r6, #0]
 801a606:	bf14      	ite	ne
 801a608:	230a      	movne	r3, #10
 801a60a:	2308      	moveq	r3, #8
 801a60c:	2100      	movs	r1, #0
 801a60e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a612:	6866      	ldr	r6, [r4, #4]
 801a614:	60a6      	str	r6, [r4, #8]
 801a616:	2e00      	cmp	r6, #0
 801a618:	bfa2      	ittt	ge
 801a61a:	6821      	ldrge	r1, [r4, #0]
 801a61c:	f021 0104 	bicge.w	r1, r1, #4
 801a620:	6021      	strge	r1, [r4, #0]
 801a622:	b90d      	cbnz	r5, 801a628 <_printf_i+0x110>
 801a624:	2e00      	cmp	r6, #0
 801a626:	d04b      	beq.n	801a6c0 <_printf_i+0x1a8>
 801a628:	4616      	mov	r6, r2
 801a62a:	fbb5 f1f3 	udiv	r1, r5, r3
 801a62e:	fb03 5711 	mls	r7, r3, r1, r5
 801a632:	5dc7      	ldrb	r7, [r0, r7]
 801a634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a638:	462f      	mov	r7, r5
 801a63a:	42bb      	cmp	r3, r7
 801a63c:	460d      	mov	r5, r1
 801a63e:	d9f4      	bls.n	801a62a <_printf_i+0x112>
 801a640:	2b08      	cmp	r3, #8
 801a642:	d10b      	bne.n	801a65c <_printf_i+0x144>
 801a644:	6823      	ldr	r3, [r4, #0]
 801a646:	07df      	lsls	r7, r3, #31
 801a648:	d508      	bpl.n	801a65c <_printf_i+0x144>
 801a64a:	6923      	ldr	r3, [r4, #16]
 801a64c:	6861      	ldr	r1, [r4, #4]
 801a64e:	4299      	cmp	r1, r3
 801a650:	bfde      	ittt	le
 801a652:	2330      	movle	r3, #48	@ 0x30
 801a654:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a658:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a65c:	1b92      	subs	r2, r2, r6
 801a65e:	6122      	str	r2, [r4, #16]
 801a660:	f8cd a000 	str.w	sl, [sp]
 801a664:	464b      	mov	r3, r9
 801a666:	aa03      	add	r2, sp, #12
 801a668:	4621      	mov	r1, r4
 801a66a:	4640      	mov	r0, r8
 801a66c:	f7ff fee6 	bl	801a43c <_printf_common>
 801a670:	3001      	adds	r0, #1
 801a672:	d14a      	bne.n	801a70a <_printf_i+0x1f2>
 801a674:	f04f 30ff 	mov.w	r0, #4294967295
 801a678:	b004      	add	sp, #16
 801a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a67e:	6823      	ldr	r3, [r4, #0]
 801a680:	f043 0320 	orr.w	r3, r3, #32
 801a684:	6023      	str	r3, [r4, #0]
 801a686:	4833      	ldr	r0, [pc, #204]	@ (801a754 <_printf_i+0x23c>)
 801a688:	2778      	movs	r7, #120	@ 0x78
 801a68a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a68e:	6823      	ldr	r3, [r4, #0]
 801a690:	6831      	ldr	r1, [r6, #0]
 801a692:	061f      	lsls	r7, r3, #24
 801a694:	f851 5b04 	ldr.w	r5, [r1], #4
 801a698:	d402      	bmi.n	801a6a0 <_printf_i+0x188>
 801a69a:	065f      	lsls	r7, r3, #25
 801a69c:	bf48      	it	mi
 801a69e:	b2ad      	uxthmi	r5, r5
 801a6a0:	6031      	str	r1, [r6, #0]
 801a6a2:	07d9      	lsls	r1, r3, #31
 801a6a4:	bf44      	itt	mi
 801a6a6:	f043 0320 	orrmi.w	r3, r3, #32
 801a6aa:	6023      	strmi	r3, [r4, #0]
 801a6ac:	b11d      	cbz	r5, 801a6b6 <_printf_i+0x19e>
 801a6ae:	2310      	movs	r3, #16
 801a6b0:	e7ac      	b.n	801a60c <_printf_i+0xf4>
 801a6b2:	4827      	ldr	r0, [pc, #156]	@ (801a750 <_printf_i+0x238>)
 801a6b4:	e7e9      	b.n	801a68a <_printf_i+0x172>
 801a6b6:	6823      	ldr	r3, [r4, #0]
 801a6b8:	f023 0320 	bic.w	r3, r3, #32
 801a6bc:	6023      	str	r3, [r4, #0]
 801a6be:	e7f6      	b.n	801a6ae <_printf_i+0x196>
 801a6c0:	4616      	mov	r6, r2
 801a6c2:	e7bd      	b.n	801a640 <_printf_i+0x128>
 801a6c4:	6833      	ldr	r3, [r6, #0]
 801a6c6:	6825      	ldr	r5, [r4, #0]
 801a6c8:	6961      	ldr	r1, [r4, #20]
 801a6ca:	1d18      	adds	r0, r3, #4
 801a6cc:	6030      	str	r0, [r6, #0]
 801a6ce:	062e      	lsls	r6, r5, #24
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	d501      	bpl.n	801a6d8 <_printf_i+0x1c0>
 801a6d4:	6019      	str	r1, [r3, #0]
 801a6d6:	e002      	b.n	801a6de <_printf_i+0x1c6>
 801a6d8:	0668      	lsls	r0, r5, #25
 801a6da:	d5fb      	bpl.n	801a6d4 <_printf_i+0x1bc>
 801a6dc:	8019      	strh	r1, [r3, #0]
 801a6de:	2300      	movs	r3, #0
 801a6e0:	6123      	str	r3, [r4, #16]
 801a6e2:	4616      	mov	r6, r2
 801a6e4:	e7bc      	b.n	801a660 <_printf_i+0x148>
 801a6e6:	6833      	ldr	r3, [r6, #0]
 801a6e8:	1d1a      	adds	r2, r3, #4
 801a6ea:	6032      	str	r2, [r6, #0]
 801a6ec:	681e      	ldr	r6, [r3, #0]
 801a6ee:	6862      	ldr	r2, [r4, #4]
 801a6f0:	2100      	movs	r1, #0
 801a6f2:	4630      	mov	r0, r6
 801a6f4:	f7e5 fe1c 	bl	8000330 <memchr>
 801a6f8:	b108      	cbz	r0, 801a6fe <_printf_i+0x1e6>
 801a6fa:	1b80      	subs	r0, r0, r6
 801a6fc:	6060      	str	r0, [r4, #4]
 801a6fe:	6863      	ldr	r3, [r4, #4]
 801a700:	6123      	str	r3, [r4, #16]
 801a702:	2300      	movs	r3, #0
 801a704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a708:	e7aa      	b.n	801a660 <_printf_i+0x148>
 801a70a:	6923      	ldr	r3, [r4, #16]
 801a70c:	4632      	mov	r2, r6
 801a70e:	4649      	mov	r1, r9
 801a710:	4640      	mov	r0, r8
 801a712:	47d0      	blx	sl
 801a714:	3001      	adds	r0, #1
 801a716:	d0ad      	beq.n	801a674 <_printf_i+0x15c>
 801a718:	6823      	ldr	r3, [r4, #0]
 801a71a:	079b      	lsls	r3, r3, #30
 801a71c:	d413      	bmi.n	801a746 <_printf_i+0x22e>
 801a71e:	68e0      	ldr	r0, [r4, #12]
 801a720:	9b03      	ldr	r3, [sp, #12]
 801a722:	4298      	cmp	r0, r3
 801a724:	bfb8      	it	lt
 801a726:	4618      	movlt	r0, r3
 801a728:	e7a6      	b.n	801a678 <_printf_i+0x160>
 801a72a:	2301      	movs	r3, #1
 801a72c:	4632      	mov	r2, r6
 801a72e:	4649      	mov	r1, r9
 801a730:	4640      	mov	r0, r8
 801a732:	47d0      	blx	sl
 801a734:	3001      	adds	r0, #1
 801a736:	d09d      	beq.n	801a674 <_printf_i+0x15c>
 801a738:	3501      	adds	r5, #1
 801a73a:	68e3      	ldr	r3, [r4, #12]
 801a73c:	9903      	ldr	r1, [sp, #12]
 801a73e:	1a5b      	subs	r3, r3, r1
 801a740:	42ab      	cmp	r3, r5
 801a742:	dcf2      	bgt.n	801a72a <_printf_i+0x212>
 801a744:	e7eb      	b.n	801a71e <_printf_i+0x206>
 801a746:	2500      	movs	r5, #0
 801a748:	f104 0619 	add.w	r6, r4, #25
 801a74c:	e7f5      	b.n	801a73a <_printf_i+0x222>
 801a74e:	bf00      	nop
 801a750:	0801efa3 	.word	0x0801efa3
 801a754:	0801efb4 	.word	0x0801efb4

0801a758 <std>:
 801a758:	2300      	movs	r3, #0
 801a75a:	b510      	push	{r4, lr}
 801a75c:	4604      	mov	r4, r0
 801a75e:	e9c0 3300 	strd	r3, r3, [r0]
 801a762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a766:	6083      	str	r3, [r0, #8]
 801a768:	8181      	strh	r1, [r0, #12]
 801a76a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a76c:	81c2      	strh	r2, [r0, #14]
 801a76e:	6183      	str	r3, [r0, #24]
 801a770:	4619      	mov	r1, r3
 801a772:	2208      	movs	r2, #8
 801a774:	305c      	adds	r0, #92	@ 0x5c
 801a776:	f000 f914 	bl	801a9a2 <memset>
 801a77a:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b0 <std+0x58>)
 801a77c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a77e:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b4 <std+0x5c>)
 801a780:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a782:	4b0d      	ldr	r3, [pc, #52]	@ (801a7b8 <std+0x60>)
 801a784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a786:	4b0d      	ldr	r3, [pc, #52]	@ (801a7bc <std+0x64>)
 801a788:	6323      	str	r3, [r4, #48]	@ 0x30
 801a78a:	4b0d      	ldr	r3, [pc, #52]	@ (801a7c0 <std+0x68>)
 801a78c:	6224      	str	r4, [r4, #32]
 801a78e:	429c      	cmp	r4, r3
 801a790:	d006      	beq.n	801a7a0 <std+0x48>
 801a792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a796:	4294      	cmp	r4, r2
 801a798:	d002      	beq.n	801a7a0 <std+0x48>
 801a79a:	33d0      	adds	r3, #208	@ 0xd0
 801a79c:	429c      	cmp	r4, r3
 801a79e:	d105      	bne.n	801a7ac <std+0x54>
 801a7a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7a8:	f000 b996 	b.w	801aad8 <__retarget_lock_init_recursive>
 801a7ac:	bd10      	pop	{r4, pc}
 801a7ae:	bf00      	nop
 801a7b0:	0801a91d 	.word	0x0801a91d
 801a7b4:	0801a93f 	.word	0x0801a93f
 801a7b8:	0801a977 	.word	0x0801a977
 801a7bc:	0801a99b 	.word	0x0801a99b
 801a7c0:	2401d8f4 	.word	0x2401d8f4

0801a7c4 <stdio_exit_handler>:
 801a7c4:	4a02      	ldr	r2, [pc, #8]	@ (801a7d0 <stdio_exit_handler+0xc>)
 801a7c6:	4903      	ldr	r1, [pc, #12]	@ (801a7d4 <stdio_exit_handler+0x10>)
 801a7c8:	4803      	ldr	r0, [pc, #12]	@ (801a7d8 <stdio_exit_handler+0x14>)
 801a7ca:	f000 b869 	b.w	801a8a0 <_fwalk_sglue>
 801a7ce:	bf00      	nop
 801a7d0:	24000134 	.word	0x24000134
 801a7d4:	0801cc95 	.word	0x0801cc95
 801a7d8:	240002b0 	.word	0x240002b0

0801a7dc <cleanup_stdio>:
 801a7dc:	6841      	ldr	r1, [r0, #4]
 801a7de:	4b0c      	ldr	r3, [pc, #48]	@ (801a810 <cleanup_stdio+0x34>)
 801a7e0:	4299      	cmp	r1, r3
 801a7e2:	b510      	push	{r4, lr}
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	d001      	beq.n	801a7ec <cleanup_stdio+0x10>
 801a7e8:	f002 fa54 	bl	801cc94 <_fflush_r>
 801a7ec:	68a1      	ldr	r1, [r4, #8]
 801a7ee:	4b09      	ldr	r3, [pc, #36]	@ (801a814 <cleanup_stdio+0x38>)
 801a7f0:	4299      	cmp	r1, r3
 801a7f2:	d002      	beq.n	801a7fa <cleanup_stdio+0x1e>
 801a7f4:	4620      	mov	r0, r4
 801a7f6:	f002 fa4d 	bl	801cc94 <_fflush_r>
 801a7fa:	68e1      	ldr	r1, [r4, #12]
 801a7fc:	4b06      	ldr	r3, [pc, #24]	@ (801a818 <cleanup_stdio+0x3c>)
 801a7fe:	4299      	cmp	r1, r3
 801a800:	d004      	beq.n	801a80c <cleanup_stdio+0x30>
 801a802:	4620      	mov	r0, r4
 801a804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a808:	f002 ba44 	b.w	801cc94 <_fflush_r>
 801a80c:	bd10      	pop	{r4, pc}
 801a80e:	bf00      	nop
 801a810:	2401d8f4 	.word	0x2401d8f4
 801a814:	2401d95c 	.word	0x2401d95c
 801a818:	2401d9c4 	.word	0x2401d9c4

0801a81c <global_stdio_init.part.0>:
 801a81c:	b510      	push	{r4, lr}
 801a81e:	4b0b      	ldr	r3, [pc, #44]	@ (801a84c <global_stdio_init.part.0+0x30>)
 801a820:	4c0b      	ldr	r4, [pc, #44]	@ (801a850 <global_stdio_init.part.0+0x34>)
 801a822:	4a0c      	ldr	r2, [pc, #48]	@ (801a854 <global_stdio_init.part.0+0x38>)
 801a824:	601a      	str	r2, [r3, #0]
 801a826:	4620      	mov	r0, r4
 801a828:	2200      	movs	r2, #0
 801a82a:	2104      	movs	r1, #4
 801a82c:	f7ff ff94 	bl	801a758 <std>
 801a830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a834:	2201      	movs	r2, #1
 801a836:	2109      	movs	r1, #9
 801a838:	f7ff ff8e 	bl	801a758 <std>
 801a83c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a840:	2202      	movs	r2, #2
 801a842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a846:	2112      	movs	r1, #18
 801a848:	f7ff bf86 	b.w	801a758 <std>
 801a84c:	2401da2c 	.word	0x2401da2c
 801a850:	2401d8f4 	.word	0x2401d8f4
 801a854:	0801a7c5 	.word	0x0801a7c5

0801a858 <__sfp_lock_acquire>:
 801a858:	4801      	ldr	r0, [pc, #4]	@ (801a860 <__sfp_lock_acquire+0x8>)
 801a85a:	f000 b93e 	b.w	801aada <__retarget_lock_acquire_recursive>
 801a85e:	bf00      	nop
 801a860:	2401da35 	.word	0x2401da35

0801a864 <__sfp_lock_release>:
 801a864:	4801      	ldr	r0, [pc, #4]	@ (801a86c <__sfp_lock_release+0x8>)
 801a866:	f000 b939 	b.w	801aadc <__retarget_lock_release_recursive>
 801a86a:	bf00      	nop
 801a86c:	2401da35 	.word	0x2401da35

0801a870 <__sinit>:
 801a870:	b510      	push	{r4, lr}
 801a872:	4604      	mov	r4, r0
 801a874:	f7ff fff0 	bl	801a858 <__sfp_lock_acquire>
 801a878:	6a23      	ldr	r3, [r4, #32]
 801a87a:	b11b      	cbz	r3, 801a884 <__sinit+0x14>
 801a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a880:	f7ff bff0 	b.w	801a864 <__sfp_lock_release>
 801a884:	4b04      	ldr	r3, [pc, #16]	@ (801a898 <__sinit+0x28>)
 801a886:	6223      	str	r3, [r4, #32]
 801a888:	4b04      	ldr	r3, [pc, #16]	@ (801a89c <__sinit+0x2c>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d1f5      	bne.n	801a87c <__sinit+0xc>
 801a890:	f7ff ffc4 	bl	801a81c <global_stdio_init.part.0>
 801a894:	e7f2      	b.n	801a87c <__sinit+0xc>
 801a896:	bf00      	nop
 801a898:	0801a7dd 	.word	0x0801a7dd
 801a89c:	2401da2c 	.word	0x2401da2c

0801a8a0 <_fwalk_sglue>:
 801a8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8a4:	4607      	mov	r7, r0
 801a8a6:	4688      	mov	r8, r1
 801a8a8:	4614      	mov	r4, r2
 801a8aa:	2600      	movs	r6, #0
 801a8ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a8b0:	f1b9 0901 	subs.w	r9, r9, #1
 801a8b4:	d505      	bpl.n	801a8c2 <_fwalk_sglue+0x22>
 801a8b6:	6824      	ldr	r4, [r4, #0]
 801a8b8:	2c00      	cmp	r4, #0
 801a8ba:	d1f7      	bne.n	801a8ac <_fwalk_sglue+0xc>
 801a8bc:	4630      	mov	r0, r6
 801a8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a8c2:	89ab      	ldrh	r3, [r5, #12]
 801a8c4:	2b01      	cmp	r3, #1
 801a8c6:	d907      	bls.n	801a8d8 <_fwalk_sglue+0x38>
 801a8c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a8cc:	3301      	adds	r3, #1
 801a8ce:	d003      	beq.n	801a8d8 <_fwalk_sglue+0x38>
 801a8d0:	4629      	mov	r1, r5
 801a8d2:	4638      	mov	r0, r7
 801a8d4:	47c0      	blx	r8
 801a8d6:	4306      	orrs	r6, r0
 801a8d8:	3568      	adds	r5, #104	@ 0x68
 801a8da:	e7e9      	b.n	801a8b0 <_fwalk_sglue+0x10>

0801a8dc <siprintf>:
 801a8dc:	b40e      	push	{r1, r2, r3}
 801a8de:	b500      	push	{lr}
 801a8e0:	b09c      	sub	sp, #112	@ 0x70
 801a8e2:	ab1d      	add	r3, sp, #116	@ 0x74
 801a8e4:	9002      	str	r0, [sp, #8]
 801a8e6:	9006      	str	r0, [sp, #24]
 801a8e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a8ec:	4809      	ldr	r0, [pc, #36]	@ (801a914 <siprintf+0x38>)
 801a8ee:	9107      	str	r1, [sp, #28]
 801a8f0:	9104      	str	r1, [sp, #16]
 801a8f2:	4909      	ldr	r1, [pc, #36]	@ (801a918 <siprintf+0x3c>)
 801a8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8f8:	9105      	str	r1, [sp, #20]
 801a8fa:	6800      	ldr	r0, [r0, #0]
 801a8fc:	9301      	str	r3, [sp, #4]
 801a8fe:	a902      	add	r1, sp, #8
 801a900:	f002 f848 	bl	801c994 <_svfiprintf_r>
 801a904:	9b02      	ldr	r3, [sp, #8]
 801a906:	2200      	movs	r2, #0
 801a908:	701a      	strb	r2, [r3, #0]
 801a90a:	b01c      	add	sp, #112	@ 0x70
 801a90c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a910:	b003      	add	sp, #12
 801a912:	4770      	bx	lr
 801a914:	240002ac 	.word	0x240002ac
 801a918:	ffff0208 	.word	0xffff0208

0801a91c <__sread>:
 801a91c:	b510      	push	{r4, lr}
 801a91e:	460c      	mov	r4, r1
 801a920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a924:	f000 f88a 	bl	801aa3c <_read_r>
 801a928:	2800      	cmp	r0, #0
 801a92a:	bfab      	itete	ge
 801a92c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a92e:	89a3      	ldrhlt	r3, [r4, #12]
 801a930:	181b      	addge	r3, r3, r0
 801a932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a936:	bfac      	ite	ge
 801a938:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a93a:	81a3      	strhlt	r3, [r4, #12]
 801a93c:	bd10      	pop	{r4, pc}

0801a93e <__swrite>:
 801a93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a942:	461f      	mov	r7, r3
 801a944:	898b      	ldrh	r3, [r1, #12]
 801a946:	05db      	lsls	r3, r3, #23
 801a948:	4605      	mov	r5, r0
 801a94a:	460c      	mov	r4, r1
 801a94c:	4616      	mov	r6, r2
 801a94e:	d505      	bpl.n	801a95c <__swrite+0x1e>
 801a950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a954:	2302      	movs	r3, #2
 801a956:	2200      	movs	r2, #0
 801a958:	f000 f85e 	bl	801aa18 <_lseek_r>
 801a95c:	89a3      	ldrh	r3, [r4, #12]
 801a95e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a966:	81a3      	strh	r3, [r4, #12]
 801a968:	4632      	mov	r2, r6
 801a96a:	463b      	mov	r3, r7
 801a96c:	4628      	mov	r0, r5
 801a96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a972:	f000 b875 	b.w	801aa60 <_write_r>

0801a976 <__sseek>:
 801a976:	b510      	push	{r4, lr}
 801a978:	460c      	mov	r4, r1
 801a97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a97e:	f000 f84b 	bl	801aa18 <_lseek_r>
 801a982:	1c43      	adds	r3, r0, #1
 801a984:	89a3      	ldrh	r3, [r4, #12]
 801a986:	bf15      	itete	ne
 801a988:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a98a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a98e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a992:	81a3      	strheq	r3, [r4, #12]
 801a994:	bf18      	it	ne
 801a996:	81a3      	strhne	r3, [r4, #12]
 801a998:	bd10      	pop	{r4, pc}

0801a99a <__sclose>:
 801a99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a99e:	f000 b82b 	b.w	801a9f8 <_close_r>

0801a9a2 <memset>:
 801a9a2:	4402      	add	r2, r0
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	4293      	cmp	r3, r2
 801a9a8:	d100      	bne.n	801a9ac <memset+0xa>
 801a9aa:	4770      	bx	lr
 801a9ac:	f803 1b01 	strb.w	r1, [r3], #1
 801a9b0:	e7f9      	b.n	801a9a6 <memset+0x4>

0801a9b2 <strchr>:
 801a9b2:	b2c9      	uxtb	r1, r1
 801a9b4:	4603      	mov	r3, r0
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9bc:	b112      	cbz	r2, 801a9c4 <strchr+0x12>
 801a9be:	428a      	cmp	r2, r1
 801a9c0:	d1f9      	bne.n	801a9b6 <strchr+0x4>
 801a9c2:	4770      	bx	lr
 801a9c4:	2900      	cmp	r1, #0
 801a9c6:	bf18      	it	ne
 801a9c8:	2000      	movne	r0, #0
 801a9ca:	4770      	bx	lr

0801a9cc <strncmp>:
 801a9cc:	b510      	push	{r4, lr}
 801a9ce:	b16a      	cbz	r2, 801a9ec <strncmp+0x20>
 801a9d0:	3901      	subs	r1, #1
 801a9d2:	1884      	adds	r4, r0, r2
 801a9d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a9dc:	429a      	cmp	r2, r3
 801a9de:	d103      	bne.n	801a9e8 <strncmp+0x1c>
 801a9e0:	42a0      	cmp	r0, r4
 801a9e2:	d001      	beq.n	801a9e8 <strncmp+0x1c>
 801a9e4:	2a00      	cmp	r2, #0
 801a9e6:	d1f5      	bne.n	801a9d4 <strncmp+0x8>
 801a9e8:	1ad0      	subs	r0, r2, r3
 801a9ea:	bd10      	pop	{r4, pc}
 801a9ec:	4610      	mov	r0, r2
 801a9ee:	e7fc      	b.n	801a9ea <strncmp+0x1e>

0801a9f0 <_localeconv_r>:
 801a9f0:	4800      	ldr	r0, [pc, #0]	@ (801a9f4 <_localeconv_r+0x4>)
 801a9f2:	4770      	bx	lr
 801a9f4:	24000230 	.word	0x24000230

0801a9f8 <_close_r>:
 801a9f8:	b538      	push	{r3, r4, r5, lr}
 801a9fa:	4d06      	ldr	r5, [pc, #24]	@ (801aa14 <_close_r+0x1c>)
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	4604      	mov	r4, r0
 801aa00:	4608      	mov	r0, r1
 801aa02:	602b      	str	r3, [r5, #0]
 801aa04:	f7e8 f9ec 	bl	8002de0 <_close>
 801aa08:	1c43      	adds	r3, r0, #1
 801aa0a:	d102      	bne.n	801aa12 <_close_r+0x1a>
 801aa0c:	682b      	ldr	r3, [r5, #0]
 801aa0e:	b103      	cbz	r3, 801aa12 <_close_r+0x1a>
 801aa10:	6023      	str	r3, [r4, #0]
 801aa12:	bd38      	pop	{r3, r4, r5, pc}
 801aa14:	2401da30 	.word	0x2401da30

0801aa18 <_lseek_r>:
 801aa18:	b538      	push	{r3, r4, r5, lr}
 801aa1a:	4d07      	ldr	r5, [pc, #28]	@ (801aa38 <_lseek_r+0x20>)
 801aa1c:	4604      	mov	r4, r0
 801aa1e:	4608      	mov	r0, r1
 801aa20:	4611      	mov	r1, r2
 801aa22:	2200      	movs	r2, #0
 801aa24:	602a      	str	r2, [r5, #0]
 801aa26:	461a      	mov	r2, r3
 801aa28:	f7e8 fa01 	bl	8002e2e <_lseek>
 801aa2c:	1c43      	adds	r3, r0, #1
 801aa2e:	d102      	bne.n	801aa36 <_lseek_r+0x1e>
 801aa30:	682b      	ldr	r3, [r5, #0]
 801aa32:	b103      	cbz	r3, 801aa36 <_lseek_r+0x1e>
 801aa34:	6023      	str	r3, [r4, #0]
 801aa36:	bd38      	pop	{r3, r4, r5, pc}
 801aa38:	2401da30 	.word	0x2401da30

0801aa3c <_read_r>:
 801aa3c:	b538      	push	{r3, r4, r5, lr}
 801aa3e:	4d07      	ldr	r5, [pc, #28]	@ (801aa5c <_read_r+0x20>)
 801aa40:	4604      	mov	r4, r0
 801aa42:	4608      	mov	r0, r1
 801aa44:	4611      	mov	r1, r2
 801aa46:	2200      	movs	r2, #0
 801aa48:	602a      	str	r2, [r5, #0]
 801aa4a:	461a      	mov	r2, r3
 801aa4c:	f7e8 f98f 	bl	8002d6e <_read>
 801aa50:	1c43      	adds	r3, r0, #1
 801aa52:	d102      	bne.n	801aa5a <_read_r+0x1e>
 801aa54:	682b      	ldr	r3, [r5, #0]
 801aa56:	b103      	cbz	r3, 801aa5a <_read_r+0x1e>
 801aa58:	6023      	str	r3, [r4, #0]
 801aa5a:	bd38      	pop	{r3, r4, r5, pc}
 801aa5c:	2401da30 	.word	0x2401da30

0801aa60 <_write_r>:
 801aa60:	b538      	push	{r3, r4, r5, lr}
 801aa62:	4d07      	ldr	r5, [pc, #28]	@ (801aa80 <_write_r+0x20>)
 801aa64:	4604      	mov	r4, r0
 801aa66:	4608      	mov	r0, r1
 801aa68:	4611      	mov	r1, r2
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	602a      	str	r2, [r5, #0]
 801aa6e:	461a      	mov	r2, r3
 801aa70:	f7e8 f99a 	bl	8002da8 <_write>
 801aa74:	1c43      	adds	r3, r0, #1
 801aa76:	d102      	bne.n	801aa7e <_write_r+0x1e>
 801aa78:	682b      	ldr	r3, [r5, #0]
 801aa7a:	b103      	cbz	r3, 801aa7e <_write_r+0x1e>
 801aa7c:	6023      	str	r3, [r4, #0]
 801aa7e:	bd38      	pop	{r3, r4, r5, pc}
 801aa80:	2401da30 	.word	0x2401da30

0801aa84 <__errno>:
 801aa84:	4b01      	ldr	r3, [pc, #4]	@ (801aa8c <__errno+0x8>)
 801aa86:	6818      	ldr	r0, [r3, #0]
 801aa88:	4770      	bx	lr
 801aa8a:	bf00      	nop
 801aa8c:	240002ac 	.word	0x240002ac

0801aa90 <__libc_init_array>:
 801aa90:	b570      	push	{r4, r5, r6, lr}
 801aa92:	4d0d      	ldr	r5, [pc, #52]	@ (801aac8 <__libc_init_array+0x38>)
 801aa94:	4c0d      	ldr	r4, [pc, #52]	@ (801aacc <__libc_init_array+0x3c>)
 801aa96:	1b64      	subs	r4, r4, r5
 801aa98:	10a4      	asrs	r4, r4, #2
 801aa9a:	2600      	movs	r6, #0
 801aa9c:	42a6      	cmp	r6, r4
 801aa9e:	d109      	bne.n	801aab4 <__libc_init_array+0x24>
 801aaa0:	4d0b      	ldr	r5, [pc, #44]	@ (801aad0 <__libc_init_array+0x40>)
 801aaa2:	4c0c      	ldr	r4, [pc, #48]	@ (801aad4 <__libc_init_array+0x44>)
 801aaa4:	f003 fb18 	bl	801e0d8 <_init>
 801aaa8:	1b64      	subs	r4, r4, r5
 801aaaa:	10a4      	asrs	r4, r4, #2
 801aaac:	2600      	movs	r6, #0
 801aaae:	42a6      	cmp	r6, r4
 801aab0:	d105      	bne.n	801aabe <__libc_init_array+0x2e>
 801aab2:	bd70      	pop	{r4, r5, r6, pc}
 801aab4:	f855 3b04 	ldr.w	r3, [r5], #4
 801aab8:	4798      	blx	r3
 801aaba:	3601      	adds	r6, #1
 801aabc:	e7ee      	b.n	801aa9c <__libc_init_array+0xc>
 801aabe:	f855 3b04 	ldr.w	r3, [r5], #4
 801aac2:	4798      	blx	r3
 801aac4:	3601      	adds	r6, #1
 801aac6:	e7f2      	b.n	801aaae <__libc_init_array+0x1e>
 801aac8:	0801f580 	.word	0x0801f580
 801aacc:	0801f580 	.word	0x0801f580
 801aad0:	0801f580 	.word	0x0801f580
 801aad4:	0801f584 	.word	0x0801f584

0801aad8 <__retarget_lock_init_recursive>:
 801aad8:	4770      	bx	lr

0801aada <__retarget_lock_acquire_recursive>:
 801aada:	4770      	bx	lr

0801aadc <__retarget_lock_release_recursive>:
 801aadc:	4770      	bx	lr

0801aade <memcpy>:
 801aade:	440a      	add	r2, r1
 801aae0:	4291      	cmp	r1, r2
 801aae2:	f100 33ff 	add.w	r3, r0, #4294967295
 801aae6:	d100      	bne.n	801aaea <memcpy+0xc>
 801aae8:	4770      	bx	lr
 801aaea:	b510      	push	{r4, lr}
 801aaec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aaf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aaf4:	4291      	cmp	r1, r2
 801aaf6:	d1f9      	bne.n	801aaec <memcpy+0xe>
 801aaf8:	bd10      	pop	{r4, pc}
 801aafa:	0000      	movs	r0, r0
 801aafc:	0000      	movs	r0, r0
	...

0801ab00 <nan>:
 801ab00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ab08 <nan+0x8>
 801ab04:	4770      	bx	lr
 801ab06:	bf00      	nop
 801ab08:	00000000 	.word	0x00000000
 801ab0c:	7ff80000 	.word	0x7ff80000

0801ab10 <quorem>:
 801ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab14:	6903      	ldr	r3, [r0, #16]
 801ab16:	690c      	ldr	r4, [r1, #16]
 801ab18:	42a3      	cmp	r3, r4
 801ab1a:	4607      	mov	r7, r0
 801ab1c:	db7e      	blt.n	801ac1c <quorem+0x10c>
 801ab1e:	3c01      	subs	r4, #1
 801ab20:	f101 0814 	add.w	r8, r1, #20
 801ab24:	00a3      	lsls	r3, r4, #2
 801ab26:	f100 0514 	add.w	r5, r0, #20
 801ab2a:	9300      	str	r3, [sp, #0]
 801ab2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ab30:	9301      	str	r3, [sp, #4]
 801ab32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ab36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	429a      	cmp	r2, r3
 801ab3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ab42:	fbb2 f6f3 	udiv	r6, r2, r3
 801ab46:	d32e      	bcc.n	801aba6 <quorem+0x96>
 801ab48:	f04f 0a00 	mov.w	sl, #0
 801ab4c:	46c4      	mov	ip, r8
 801ab4e:	46ae      	mov	lr, r5
 801ab50:	46d3      	mov	fp, sl
 801ab52:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ab56:	b298      	uxth	r0, r3
 801ab58:	fb06 a000 	mla	r0, r6, r0, sl
 801ab5c:	0c02      	lsrs	r2, r0, #16
 801ab5e:	0c1b      	lsrs	r3, r3, #16
 801ab60:	fb06 2303 	mla	r3, r6, r3, r2
 801ab64:	f8de 2000 	ldr.w	r2, [lr]
 801ab68:	b280      	uxth	r0, r0
 801ab6a:	b292      	uxth	r2, r2
 801ab6c:	1a12      	subs	r2, r2, r0
 801ab6e:	445a      	add	r2, fp
 801ab70:	f8de 0000 	ldr.w	r0, [lr]
 801ab74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ab7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ab82:	b292      	uxth	r2, r2
 801ab84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ab88:	45e1      	cmp	r9, ip
 801ab8a:	f84e 2b04 	str.w	r2, [lr], #4
 801ab8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ab92:	d2de      	bcs.n	801ab52 <quorem+0x42>
 801ab94:	9b00      	ldr	r3, [sp, #0]
 801ab96:	58eb      	ldr	r3, [r5, r3]
 801ab98:	b92b      	cbnz	r3, 801aba6 <quorem+0x96>
 801ab9a:	9b01      	ldr	r3, [sp, #4]
 801ab9c:	3b04      	subs	r3, #4
 801ab9e:	429d      	cmp	r5, r3
 801aba0:	461a      	mov	r2, r3
 801aba2:	d32f      	bcc.n	801ac04 <quorem+0xf4>
 801aba4:	613c      	str	r4, [r7, #16]
 801aba6:	4638      	mov	r0, r7
 801aba8:	f001 fca0 	bl	801c4ec <__mcmp>
 801abac:	2800      	cmp	r0, #0
 801abae:	db25      	blt.n	801abfc <quorem+0xec>
 801abb0:	4629      	mov	r1, r5
 801abb2:	2000      	movs	r0, #0
 801abb4:	f858 2b04 	ldr.w	r2, [r8], #4
 801abb8:	f8d1 c000 	ldr.w	ip, [r1]
 801abbc:	fa1f fe82 	uxth.w	lr, r2
 801abc0:	fa1f f38c 	uxth.w	r3, ip
 801abc4:	eba3 030e 	sub.w	r3, r3, lr
 801abc8:	4403      	add	r3, r0
 801abca:	0c12      	lsrs	r2, r2, #16
 801abcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801abd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801abd4:	b29b      	uxth	r3, r3
 801abd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801abda:	45c1      	cmp	r9, r8
 801abdc:	f841 3b04 	str.w	r3, [r1], #4
 801abe0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801abe4:	d2e6      	bcs.n	801abb4 <quorem+0xa4>
 801abe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801abea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801abee:	b922      	cbnz	r2, 801abfa <quorem+0xea>
 801abf0:	3b04      	subs	r3, #4
 801abf2:	429d      	cmp	r5, r3
 801abf4:	461a      	mov	r2, r3
 801abf6:	d30b      	bcc.n	801ac10 <quorem+0x100>
 801abf8:	613c      	str	r4, [r7, #16]
 801abfa:	3601      	adds	r6, #1
 801abfc:	4630      	mov	r0, r6
 801abfe:	b003      	add	sp, #12
 801ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac04:	6812      	ldr	r2, [r2, #0]
 801ac06:	3b04      	subs	r3, #4
 801ac08:	2a00      	cmp	r2, #0
 801ac0a:	d1cb      	bne.n	801aba4 <quorem+0x94>
 801ac0c:	3c01      	subs	r4, #1
 801ac0e:	e7c6      	b.n	801ab9e <quorem+0x8e>
 801ac10:	6812      	ldr	r2, [r2, #0]
 801ac12:	3b04      	subs	r3, #4
 801ac14:	2a00      	cmp	r2, #0
 801ac16:	d1ef      	bne.n	801abf8 <quorem+0xe8>
 801ac18:	3c01      	subs	r4, #1
 801ac1a:	e7ea      	b.n	801abf2 <quorem+0xe2>
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	e7ee      	b.n	801abfe <quorem+0xee>

0801ac20 <_dtoa_r>:
 801ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	ed2d 8b02 	vpush	{d8}
 801ac28:	69c7      	ldr	r7, [r0, #28]
 801ac2a:	b091      	sub	sp, #68	@ 0x44
 801ac2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ac30:	ec55 4b10 	vmov	r4, r5, d0
 801ac34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801ac36:	9107      	str	r1, [sp, #28]
 801ac38:	4681      	mov	r9, r0
 801ac3a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac3c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ac3e:	b97f      	cbnz	r7, 801ac60 <_dtoa_r+0x40>
 801ac40:	2010      	movs	r0, #16
 801ac42:	f001 f8c7 	bl	801bdd4 <malloc>
 801ac46:	4602      	mov	r2, r0
 801ac48:	f8c9 001c 	str.w	r0, [r9, #28]
 801ac4c:	b920      	cbnz	r0, 801ac58 <_dtoa_r+0x38>
 801ac4e:	4ba0      	ldr	r3, [pc, #640]	@ (801aed0 <_dtoa_r+0x2b0>)
 801ac50:	21ef      	movs	r1, #239	@ 0xef
 801ac52:	48a0      	ldr	r0, [pc, #640]	@ (801aed4 <_dtoa_r+0x2b4>)
 801ac54:	f002 f870 	bl	801cd38 <__assert_func>
 801ac58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ac5c:	6007      	str	r7, [r0, #0]
 801ac5e:	60c7      	str	r7, [r0, #12]
 801ac60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ac64:	6819      	ldr	r1, [r3, #0]
 801ac66:	b159      	cbz	r1, 801ac80 <_dtoa_r+0x60>
 801ac68:	685a      	ldr	r2, [r3, #4]
 801ac6a:	604a      	str	r2, [r1, #4]
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	4093      	lsls	r3, r2
 801ac70:	608b      	str	r3, [r1, #8]
 801ac72:	4648      	mov	r0, r9
 801ac74:	f001 f9b6 	bl	801bfe4 <_Bfree>
 801ac78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ac7c:	2200      	movs	r2, #0
 801ac7e:	601a      	str	r2, [r3, #0]
 801ac80:	1e2b      	subs	r3, r5, #0
 801ac82:	bfbb      	ittet	lt
 801ac84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ac88:	9303      	strlt	r3, [sp, #12]
 801ac8a:	2300      	movge	r3, #0
 801ac8c:	2201      	movlt	r2, #1
 801ac8e:	bfac      	ite	ge
 801ac90:	6033      	strge	r3, [r6, #0]
 801ac92:	6032      	strlt	r2, [r6, #0]
 801ac94:	4b90      	ldr	r3, [pc, #576]	@ (801aed8 <_dtoa_r+0x2b8>)
 801ac96:	9e03      	ldr	r6, [sp, #12]
 801ac98:	43b3      	bics	r3, r6
 801ac9a:	d110      	bne.n	801acbe <_dtoa_r+0x9e>
 801ac9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ac9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801aca2:	6013      	str	r3, [r2, #0]
 801aca4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801aca8:	4323      	orrs	r3, r4
 801acaa:	f000 84de 	beq.w	801b66a <_dtoa_r+0xa4a>
 801acae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801acb0:	4f8a      	ldr	r7, [pc, #552]	@ (801aedc <_dtoa_r+0x2bc>)
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f000 84e0 	beq.w	801b678 <_dtoa_r+0xa58>
 801acb8:	1cfb      	adds	r3, r7, #3
 801acba:	f000 bcdb 	b.w	801b674 <_dtoa_r+0xa54>
 801acbe:	ed9d 8b02 	vldr	d8, [sp, #8]
 801acc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801acc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acca:	d10a      	bne.n	801ace2 <_dtoa_r+0xc2>
 801accc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801acce:	2301      	movs	r3, #1
 801acd0:	6013      	str	r3, [r2, #0]
 801acd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801acd4:	b113      	cbz	r3, 801acdc <_dtoa_r+0xbc>
 801acd6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801acd8:	4b81      	ldr	r3, [pc, #516]	@ (801aee0 <_dtoa_r+0x2c0>)
 801acda:	6013      	str	r3, [r2, #0]
 801acdc:	4f81      	ldr	r7, [pc, #516]	@ (801aee4 <_dtoa_r+0x2c4>)
 801acde:	f000 bccb 	b.w	801b678 <_dtoa_r+0xa58>
 801ace2:	aa0e      	add	r2, sp, #56	@ 0x38
 801ace4:	a90f      	add	r1, sp, #60	@ 0x3c
 801ace6:	4648      	mov	r0, r9
 801ace8:	eeb0 0b48 	vmov.f64	d0, d8
 801acec:	f001 fd1e 	bl	801c72c <__d2b>
 801acf0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801acf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801acf6:	9001      	str	r0, [sp, #4]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d045      	beq.n	801ad88 <_dtoa_r+0x168>
 801acfc:	eeb0 7b48 	vmov.f64	d7, d8
 801ad00:	ee18 1a90 	vmov	r1, s17
 801ad04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ad08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801ad0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801ad10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801ad14:	2500      	movs	r5, #0
 801ad16:	ee07 1a90 	vmov	s15, r1
 801ad1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801ad1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801aeb8 <_dtoa_r+0x298>
 801ad22:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ad26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801aec0 <_dtoa_r+0x2a0>
 801ad2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801ad2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801aec8 <_dtoa_r+0x2a8>
 801ad32:	ee07 3a90 	vmov	s15, r3
 801ad36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ad3a:	eeb0 7b46 	vmov.f64	d7, d6
 801ad3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ad42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ad46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad4e:	ee16 8a90 	vmov	r8, s13
 801ad52:	d508      	bpl.n	801ad66 <_dtoa_r+0x146>
 801ad54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ad58:	eeb4 6b47 	vcmp.f64	d6, d7
 801ad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad60:	bf18      	it	ne
 801ad62:	f108 38ff 	addne.w	r8, r8, #4294967295
 801ad66:	f1b8 0f16 	cmp.w	r8, #22
 801ad6a:	d82b      	bhi.n	801adc4 <_dtoa_r+0x1a4>
 801ad6c:	495e      	ldr	r1, [pc, #376]	@ (801aee8 <_dtoa_r+0x2c8>)
 801ad6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801ad72:	ed91 7b00 	vldr	d7, [r1]
 801ad76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad7e:	d501      	bpl.n	801ad84 <_dtoa_r+0x164>
 801ad80:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad84:	2100      	movs	r1, #0
 801ad86:	e01e      	b.n	801adc6 <_dtoa_r+0x1a6>
 801ad88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad8a:	4413      	add	r3, r2
 801ad8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801ad90:	2920      	cmp	r1, #32
 801ad92:	bfc1      	itttt	gt
 801ad94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801ad98:	408e      	lslgt	r6, r1
 801ad9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801ad9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801ada2:	bfd6      	itet	le
 801ada4:	f1c1 0120 	rsble	r1, r1, #32
 801ada8:	4331      	orrgt	r1, r6
 801adaa:	fa04 f101 	lslle.w	r1, r4, r1
 801adae:	ee07 1a90 	vmov	s15, r1
 801adb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801adb6:	3b01      	subs	r3, #1
 801adb8:	ee17 1a90 	vmov	r1, s15
 801adbc:	2501      	movs	r5, #1
 801adbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801adc2:	e7a8      	b.n	801ad16 <_dtoa_r+0xf6>
 801adc4:	2101      	movs	r1, #1
 801adc6:	1ad2      	subs	r2, r2, r3
 801adc8:	1e53      	subs	r3, r2, #1
 801adca:	9306      	str	r3, [sp, #24]
 801adcc:	bf45      	ittet	mi
 801adce:	f1c2 0301 	rsbmi	r3, r2, #1
 801add2:	9305      	strmi	r3, [sp, #20]
 801add4:	2300      	movpl	r3, #0
 801add6:	2300      	movmi	r3, #0
 801add8:	bf4c      	ite	mi
 801adda:	9306      	strmi	r3, [sp, #24]
 801addc:	9305      	strpl	r3, [sp, #20]
 801adde:	f1b8 0f00 	cmp.w	r8, #0
 801ade2:	910c      	str	r1, [sp, #48]	@ 0x30
 801ade4:	db18      	blt.n	801ae18 <_dtoa_r+0x1f8>
 801ade6:	9b06      	ldr	r3, [sp, #24]
 801ade8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801adec:	4443      	add	r3, r8
 801adee:	9306      	str	r3, [sp, #24]
 801adf0:	2300      	movs	r3, #0
 801adf2:	9a07      	ldr	r2, [sp, #28]
 801adf4:	2a09      	cmp	r2, #9
 801adf6:	d849      	bhi.n	801ae8c <_dtoa_r+0x26c>
 801adf8:	2a05      	cmp	r2, #5
 801adfa:	bfc4      	itt	gt
 801adfc:	3a04      	subgt	r2, #4
 801adfe:	9207      	strgt	r2, [sp, #28]
 801ae00:	9a07      	ldr	r2, [sp, #28]
 801ae02:	f1a2 0202 	sub.w	r2, r2, #2
 801ae06:	bfcc      	ite	gt
 801ae08:	2400      	movgt	r4, #0
 801ae0a:	2401      	movle	r4, #1
 801ae0c:	2a03      	cmp	r2, #3
 801ae0e:	d848      	bhi.n	801aea2 <_dtoa_r+0x282>
 801ae10:	e8df f002 	tbb	[pc, r2]
 801ae14:	3a2c2e0b 	.word	0x3a2c2e0b
 801ae18:	9b05      	ldr	r3, [sp, #20]
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	eba3 0308 	sub.w	r3, r3, r8
 801ae20:	9305      	str	r3, [sp, #20]
 801ae22:	920a      	str	r2, [sp, #40]	@ 0x28
 801ae24:	f1c8 0300 	rsb	r3, r8, #0
 801ae28:	e7e3      	b.n	801adf2 <_dtoa_r+0x1d2>
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	9208      	str	r2, [sp, #32]
 801ae2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae30:	2a00      	cmp	r2, #0
 801ae32:	dc39      	bgt.n	801aea8 <_dtoa_r+0x288>
 801ae34:	f04f 0b01 	mov.w	fp, #1
 801ae38:	46da      	mov	sl, fp
 801ae3a:	465a      	mov	r2, fp
 801ae3c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801ae40:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801ae44:	2100      	movs	r1, #0
 801ae46:	2004      	movs	r0, #4
 801ae48:	f100 0614 	add.w	r6, r0, #20
 801ae4c:	4296      	cmp	r6, r2
 801ae4e:	d930      	bls.n	801aeb2 <_dtoa_r+0x292>
 801ae50:	6079      	str	r1, [r7, #4]
 801ae52:	4648      	mov	r0, r9
 801ae54:	9304      	str	r3, [sp, #16]
 801ae56:	f001 f885 	bl	801bf64 <_Balloc>
 801ae5a:	9b04      	ldr	r3, [sp, #16]
 801ae5c:	4607      	mov	r7, r0
 801ae5e:	2800      	cmp	r0, #0
 801ae60:	d146      	bne.n	801aef0 <_dtoa_r+0x2d0>
 801ae62:	4b22      	ldr	r3, [pc, #136]	@ (801aeec <_dtoa_r+0x2cc>)
 801ae64:	4602      	mov	r2, r0
 801ae66:	f240 11af 	movw	r1, #431	@ 0x1af
 801ae6a:	e6f2      	b.n	801ac52 <_dtoa_r+0x32>
 801ae6c:	2201      	movs	r2, #1
 801ae6e:	e7dd      	b.n	801ae2c <_dtoa_r+0x20c>
 801ae70:	2200      	movs	r2, #0
 801ae72:	9208      	str	r2, [sp, #32]
 801ae74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae76:	eb08 0b02 	add.w	fp, r8, r2
 801ae7a:	f10b 0a01 	add.w	sl, fp, #1
 801ae7e:	4652      	mov	r2, sl
 801ae80:	2a01      	cmp	r2, #1
 801ae82:	bfb8      	it	lt
 801ae84:	2201      	movlt	r2, #1
 801ae86:	e7db      	b.n	801ae40 <_dtoa_r+0x220>
 801ae88:	2201      	movs	r2, #1
 801ae8a:	e7f2      	b.n	801ae72 <_dtoa_r+0x252>
 801ae8c:	2401      	movs	r4, #1
 801ae8e:	2200      	movs	r2, #0
 801ae90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801ae94:	f04f 3bff 	mov.w	fp, #4294967295
 801ae98:	2100      	movs	r1, #0
 801ae9a:	46da      	mov	sl, fp
 801ae9c:	2212      	movs	r2, #18
 801ae9e:	9109      	str	r1, [sp, #36]	@ 0x24
 801aea0:	e7ce      	b.n	801ae40 <_dtoa_r+0x220>
 801aea2:	2201      	movs	r2, #1
 801aea4:	9208      	str	r2, [sp, #32]
 801aea6:	e7f5      	b.n	801ae94 <_dtoa_r+0x274>
 801aea8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801aeac:	46da      	mov	sl, fp
 801aeae:	465a      	mov	r2, fp
 801aeb0:	e7c6      	b.n	801ae40 <_dtoa_r+0x220>
 801aeb2:	3101      	adds	r1, #1
 801aeb4:	0040      	lsls	r0, r0, #1
 801aeb6:	e7c7      	b.n	801ae48 <_dtoa_r+0x228>
 801aeb8:	636f4361 	.word	0x636f4361
 801aebc:	3fd287a7 	.word	0x3fd287a7
 801aec0:	8b60c8b3 	.word	0x8b60c8b3
 801aec4:	3fc68a28 	.word	0x3fc68a28
 801aec8:	509f79fb 	.word	0x509f79fb
 801aecc:	3fd34413 	.word	0x3fd34413
 801aed0:	0801efda 	.word	0x0801efda
 801aed4:	0801eff1 	.word	0x0801eff1
 801aed8:	7ff00000 	.word	0x7ff00000
 801aedc:	0801efd6 	.word	0x0801efd6
 801aee0:	0801efa2 	.word	0x0801efa2
 801aee4:	0801efa1 	.word	0x0801efa1
 801aee8:	0801f148 	.word	0x0801f148
 801aeec:	0801f049 	.word	0x0801f049
 801aef0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801aef4:	f1ba 0f0e 	cmp.w	sl, #14
 801aef8:	6010      	str	r0, [r2, #0]
 801aefa:	d86f      	bhi.n	801afdc <_dtoa_r+0x3bc>
 801aefc:	2c00      	cmp	r4, #0
 801aefe:	d06d      	beq.n	801afdc <_dtoa_r+0x3bc>
 801af00:	f1b8 0f00 	cmp.w	r8, #0
 801af04:	f340 80c2 	ble.w	801b08c <_dtoa_r+0x46c>
 801af08:	4aca      	ldr	r2, [pc, #808]	@ (801b234 <_dtoa_r+0x614>)
 801af0a:	f008 010f 	and.w	r1, r8, #15
 801af0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801af12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801af16:	ed92 7b00 	vldr	d7, [r2]
 801af1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801af1e:	f000 80a9 	beq.w	801b074 <_dtoa_r+0x454>
 801af22:	4ac5      	ldr	r2, [pc, #788]	@ (801b238 <_dtoa_r+0x618>)
 801af24:	ed92 6b08 	vldr	d6, [r2, #32]
 801af28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801af2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801af30:	f001 010f 	and.w	r1, r1, #15
 801af34:	2203      	movs	r2, #3
 801af36:	48c0      	ldr	r0, [pc, #768]	@ (801b238 <_dtoa_r+0x618>)
 801af38:	2900      	cmp	r1, #0
 801af3a:	f040 809d 	bne.w	801b078 <_dtoa_r+0x458>
 801af3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801af42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801af46:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801af4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801af50:	2900      	cmp	r1, #0
 801af52:	f000 80c1 	beq.w	801b0d8 <_dtoa_r+0x4b8>
 801af56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801af5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801af5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af62:	f140 80b9 	bpl.w	801b0d8 <_dtoa_r+0x4b8>
 801af66:	f1ba 0f00 	cmp.w	sl, #0
 801af6a:	f000 80b5 	beq.w	801b0d8 <_dtoa_r+0x4b8>
 801af6e:	f1bb 0f00 	cmp.w	fp, #0
 801af72:	dd31      	ble.n	801afd8 <_dtoa_r+0x3b8>
 801af74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801af78:	ee27 7b06 	vmul.f64	d7, d7, d6
 801af7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af80:	f108 31ff 	add.w	r1, r8, #4294967295
 801af84:	9104      	str	r1, [sp, #16]
 801af86:	3201      	adds	r2, #1
 801af88:	465c      	mov	r4, fp
 801af8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801af8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801af92:	ee07 2a90 	vmov	s15, r2
 801af96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801af9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801af9e:	ee15 2a90 	vmov	r2, s11
 801afa2:	ec51 0b15 	vmov	r0, r1, d5
 801afa6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801afaa:	2c00      	cmp	r4, #0
 801afac:	f040 8098 	bne.w	801b0e0 <_dtoa_r+0x4c0>
 801afb0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801afb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801afb8:	ec41 0b17 	vmov	d7, r0, r1
 801afbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc4:	f300 8261 	bgt.w	801b48a <_dtoa_r+0x86a>
 801afc8:	eeb1 7b47 	vneg.f64	d7, d7
 801afcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801afd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afd4:	f100 80f5 	bmi.w	801b1c2 <_dtoa_r+0x5a2>
 801afd8:	ed8d 8b02 	vstr	d8, [sp, #8]
 801afdc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801afde:	2a00      	cmp	r2, #0
 801afe0:	f2c0 812c 	blt.w	801b23c <_dtoa_r+0x61c>
 801afe4:	f1b8 0f0e 	cmp.w	r8, #14
 801afe8:	f300 8128 	bgt.w	801b23c <_dtoa_r+0x61c>
 801afec:	4b91      	ldr	r3, [pc, #580]	@ (801b234 <_dtoa_r+0x614>)
 801afee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aff2:	ed93 6b00 	vldr	d6, [r3]
 801aff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aff8:	2b00      	cmp	r3, #0
 801affa:	da03      	bge.n	801b004 <_dtoa_r+0x3e4>
 801affc:	f1ba 0f00 	cmp.w	sl, #0
 801b000:	f340 80d2 	ble.w	801b1a8 <_dtoa_r+0x588>
 801b004:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801b008:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b00c:	463e      	mov	r6, r7
 801b00e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b012:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b016:	ee15 3a10 	vmov	r3, s10
 801b01a:	3330      	adds	r3, #48	@ 0x30
 801b01c:	f806 3b01 	strb.w	r3, [r6], #1
 801b020:	1bf3      	subs	r3, r6, r7
 801b022:	459a      	cmp	sl, r3
 801b024:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b028:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b02c:	f040 80f8 	bne.w	801b220 <_dtoa_r+0x600>
 801b030:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b034:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b03c:	f300 80dd 	bgt.w	801b1fa <_dtoa_r+0x5da>
 801b040:	eeb4 7b46 	vcmp.f64	d7, d6
 801b044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b048:	d104      	bne.n	801b054 <_dtoa_r+0x434>
 801b04a:	ee15 3a10 	vmov	r3, s10
 801b04e:	07db      	lsls	r3, r3, #31
 801b050:	f100 80d3 	bmi.w	801b1fa <_dtoa_r+0x5da>
 801b054:	9901      	ldr	r1, [sp, #4]
 801b056:	4648      	mov	r0, r9
 801b058:	f000 ffc4 	bl	801bfe4 <_Bfree>
 801b05c:	2300      	movs	r3, #0
 801b05e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b060:	7033      	strb	r3, [r6, #0]
 801b062:	f108 0301 	add.w	r3, r8, #1
 801b066:	6013      	str	r3, [r2, #0]
 801b068:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	f000 8304 	beq.w	801b678 <_dtoa_r+0xa58>
 801b070:	601e      	str	r6, [r3, #0]
 801b072:	e301      	b.n	801b678 <_dtoa_r+0xa58>
 801b074:	2202      	movs	r2, #2
 801b076:	e75e      	b.n	801af36 <_dtoa_r+0x316>
 801b078:	07cc      	lsls	r4, r1, #31
 801b07a:	d504      	bpl.n	801b086 <_dtoa_r+0x466>
 801b07c:	ed90 6b00 	vldr	d6, [r0]
 801b080:	3201      	adds	r2, #1
 801b082:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b086:	1049      	asrs	r1, r1, #1
 801b088:	3008      	adds	r0, #8
 801b08a:	e755      	b.n	801af38 <_dtoa_r+0x318>
 801b08c:	d022      	beq.n	801b0d4 <_dtoa_r+0x4b4>
 801b08e:	f1c8 0100 	rsb	r1, r8, #0
 801b092:	4a68      	ldr	r2, [pc, #416]	@ (801b234 <_dtoa_r+0x614>)
 801b094:	f001 000f 	and.w	r0, r1, #15
 801b098:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b09c:	ed92 7b00 	vldr	d7, [r2]
 801b0a0:	ee28 7b07 	vmul.f64	d7, d8, d7
 801b0a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b0a8:	4863      	ldr	r0, [pc, #396]	@ (801b238 <_dtoa_r+0x618>)
 801b0aa:	1109      	asrs	r1, r1, #4
 801b0ac:	2400      	movs	r4, #0
 801b0ae:	2202      	movs	r2, #2
 801b0b0:	b929      	cbnz	r1, 801b0be <_dtoa_r+0x49e>
 801b0b2:	2c00      	cmp	r4, #0
 801b0b4:	f43f af49 	beq.w	801af4a <_dtoa_r+0x32a>
 801b0b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b0bc:	e745      	b.n	801af4a <_dtoa_r+0x32a>
 801b0be:	07ce      	lsls	r6, r1, #31
 801b0c0:	d505      	bpl.n	801b0ce <_dtoa_r+0x4ae>
 801b0c2:	ed90 6b00 	vldr	d6, [r0]
 801b0c6:	3201      	adds	r2, #1
 801b0c8:	2401      	movs	r4, #1
 801b0ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b0ce:	1049      	asrs	r1, r1, #1
 801b0d0:	3008      	adds	r0, #8
 801b0d2:	e7ed      	b.n	801b0b0 <_dtoa_r+0x490>
 801b0d4:	2202      	movs	r2, #2
 801b0d6:	e738      	b.n	801af4a <_dtoa_r+0x32a>
 801b0d8:	f8cd 8010 	str.w	r8, [sp, #16]
 801b0dc:	4654      	mov	r4, sl
 801b0de:	e754      	b.n	801af8a <_dtoa_r+0x36a>
 801b0e0:	4a54      	ldr	r2, [pc, #336]	@ (801b234 <_dtoa_r+0x614>)
 801b0e2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801b0e6:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b0ea:	9a08      	ldr	r2, [sp, #32]
 801b0ec:	ec41 0b17 	vmov	d7, r0, r1
 801b0f0:	443c      	add	r4, r7
 801b0f2:	b34a      	cbz	r2, 801b148 <_dtoa_r+0x528>
 801b0f4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801b0f8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801b0fc:	463e      	mov	r6, r7
 801b0fe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b102:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b106:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b10a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b10e:	ee14 2a90 	vmov	r2, s9
 801b112:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b116:	3230      	adds	r2, #48	@ 0x30
 801b118:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b11c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b124:	f806 2b01 	strb.w	r2, [r6], #1
 801b128:	d438      	bmi.n	801b19c <_dtoa_r+0x57c>
 801b12a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b12e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b136:	d462      	bmi.n	801b1fe <_dtoa_r+0x5de>
 801b138:	42a6      	cmp	r6, r4
 801b13a:	f43f af4d 	beq.w	801afd8 <_dtoa_r+0x3b8>
 801b13e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b142:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b146:	e7e0      	b.n	801b10a <_dtoa_r+0x4ea>
 801b148:	4621      	mov	r1, r4
 801b14a:	463e      	mov	r6, r7
 801b14c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b150:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801b154:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b158:	ee14 2a90 	vmov	r2, s9
 801b15c:	3230      	adds	r2, #48	@ 0x30
 801b15e:	f806 2b01 	strb.w	r2, [r6], #1
 801b162:	42a6      	cmp	r6, r4
 801b164:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b168:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b16c:	d119      	bne.n	801b1a2 <_dtoa_r+0x582>
 801b16e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801b172:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b176:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b17e:	dc3e      	bgt.n	801b1fe <_dtoa_r+0x5de>
 801b180:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b184:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b18c:	f57f af24 	bpl.w	801afd8 <_dtoa_r+0x3b8>
 801b190:	460e      	mov	r6, r1
 801b192:	3901      	subs	r1, #1
 801b194:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b198:	2b30      	cmp	r3, #48	@ 0x30
 801b19a:	d0f9      	beq.n	801b190 <_dtoa_r+0x570>
 801b19c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b1a0:	e758      	b.n	801b054 <_dtoa_r+0x434>
 801b1a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b1a6:	e7d5      	b.n	801b154 <_dtoa_r+0x534>
 801b1a8:	d10b      	bne.n	801b1c2 <_dtoa_r+0x5a2>
 801b1aa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801b1ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b1b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b1b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1be:	f2c0 8161 	blt.w	801b484 <_dtoa_r+0x864>
 801b1c2:	2400      	movs	r4, #0
 801b1c4:	4625      	mov	r5, r4
 801b1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1c8:	43db      	mvns	r3, r3
 801b1ca:	9304      	str	r3, [sp, #16]
 801b1cc:	463e      	mov	r6, r7
 801b1ce:	f04f 0800 	mov.w	r8, #0
 801b1d2:	4621      	mov	r1, r4
 801b1d4:	4648      	mov	r0, r9
 801b1d6:	f000 ff05 	bl	801bfe4 <_Bfree>
 801b1da:	2d00      	cmp	r5, #0
 801b1dc:	d0de      	beq.n	801b19c <_dtoa_r+0x57c>
 801b1de:	f1b8 0f00 	cmp.w	r8, #0
 801b1e2:	d005      	beq.n	801b1f0 <_dtoa_r+0x5d0>
 801b1e4:	45a8      	cmp	r8, r5
 801b1e6:	d003      	beq.n	801b1f0 <_dtoa_r+0x5d0>
 801b1e8:	4641      	mov	r1, r8
 801b1ea:	4648      	mov	r0, r9
 801b1ec:	f000 fefa 	bl	801bfe4 <_Bfree>
 801b1f0:	4629      	mov	r1, r5
 801b1f2:	4648      	mov	r0, r9
 801b1f4:	f000 fef6 	bl	801bfe4 <_Bfree>
 801b1f8:	e7d0      	b.n	801b19c <_dtoa_r+0x57c>
 801b1fa:	f8cd 8010 	str.w	r8, [sp, #16]
 801b1fe:	4633      	mov	r3, r6
 801b200:	461e      	mov	r6, r3
 801b202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b206:	2a39      	cmp	r2, #57	@ 0x39
 801b208:	d106      	bne.n	801b218 <_dtoa_r+0x5f8>
 801b20a:	429f      	cmp	r7, r3
 801b20c:	d1f8      	bne.n	801b200 <_dtoa_r+0x5e0>
 801b20e:	9a04      	ldr	r2, [sp, #16]
 801b210:	3201      	adds	r2, #1
 801b212:	9204      	str	r2, [sp, #16]
 801b214:	2230      	movs	r2, #48	@ 0x30
 801b216:	703a      	strb	r2, [r7, #0]
 801b218:	781a      	ldrb	r2, [r3, #0]
 801b21a:	3201      	adds	r2, #1
 801b21c:	701a      	strb	r2, [r3, #0]
 801b21e:	e7bd      	b.n	801b19c <_dtoa_r+0x57c>
 801b220:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b22c:	f47f aeef 	bne.w	801b00e <_dtoa_r+0x3ee>
 801b230:	e710      	b.n	801b054 <_dtoa_r+0x434>
 801b232:	bf00      	nop
 801b234:	0801f148 	.word	0x0801f148
 801b238:	0801f120 	.word	0x0801f120
 801b23c:	9908      	ldr	r1, [sp, #32]
 801b23e:	2900      	cmp	r1, #0
 801b240:	f000 80e3 	beq.w	801b40a <_dtoa_r+0x7ea>
 801b244:	9907      	ldr	r1, [sp, #28]
 801b246:	2901      	cmp	r1, #1
 801b248:	f300 80c8 	bgt.w	801b3dc <_dtoa_r+0x7bc>
 801b24c:	2d00      	cmp	r5, #0
 801b24e:	f000 80c1 	beq.w	801b3d4 <_dtoa_r+0x7b4>
 801b252:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801b256:	9e05      	ldr	r6, [sp, #20]
 801b258:	461c      	mov	r4, r3
 801b25a:	9304      	str	r3, [sp, #16]
 801b25c:	9b05      	ldr	r3, [sp, #20]
 801b25e:	4413      	add	r3, r2
 801b260:	9305      	str	r3, [sp, #20]
 801b262:	9b06      	ldr	r3, [sp, #24]
 801b264:	2101      	movs	r1, #1
 801b266:	4413      	add	r3, r2
 801b268:	4648      	mov	r0, r9
 801b26a:	9306      	str	r3, [sp, #24]
 801b26c:	f000 ffb8 	bl	801c1e0 <__i2b>
 801b270:	9b04      	ldr	r3, [sp, #16]
 801b272:	4605      	mov	r5, r0
 801b274:	b166      	cbz	r6, 801b290 <_dtoa_r+0x670>
 801b276:	9a06      	ldr	r2, [sp, #24]
 801b278:	2a00      	cmp	r2, #0
 801b27a:	dd09      	ble.n	801b290 <_dtoa_r+0x670>
 801b27c:	42b2      	cmp	r2, r6
 801b27e:	9905      	ldr	r1, [sp, #20]
 801b280:	bfa8      	it	ge
 801b282:	4632      	movge	r2, r6
 801b284:	1a89      	subs	r1, r1, r2
 801b286:	9105      	str	r1, [sp, #20]
 801b288:	9906      	ldr	r1, [sp, #24]
 801b28a:	1ab6      	subs	r6, r6, r2
 801b28c:	1a8a      	subs	r2, r1, r2
 801b28e:	9206      	str	r2, [sp, #24]
 801b290:	b1fb      	cbz	r3, 801b2d2 <_dtoa_r+0x6b2>
 801b292:	9a08      	ldr	r2, [sp, #32]
 801b294:	2a00      	cmp	r2, #0
 801b296:	f000 80bc 	beq.w	801b412 <_dtoa_r+0x7f2>
 801b29a:	b19c      	cbz	r4, 801b2c4 <_dtoa_r+0x6a4>
 801b29c:	4629      	mov	r1, r5
 801b29e:	4622      	mov	r2, r4
 801b2a0:	4648      	mov	r0, r9
 801b2a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b2a4:	f001 f85c 	bl	801c360 <__pow5mult>
 801b2a8:	9a01      	ldr	r2, [sp, #4]
 801b2aa:	4601      	mov	r1, r0
 801b2ac:	4605      	mov	r5, r0
 801b2ae:	4648      	mov	r0, r9
 801b2b0:	f000 ffac 	bl	801c20c <__multiply>
 801b2b4:	9901      	ldr	r1, [sp, #4]
 801b2b6:	9004      	str	r0, [sp, #16]
 801b2b8:	4648      	mov	r0, r9
 801b2ba:	f000 fe93 	bl	801bfe4 <_Bfree>
 801b2be:	9a04      	ldr	r2, [sp, #16]
 801b2c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b2c2:	9201      	str	r2, [sp, #4]
 801b2c4:	1b1a      	subs	r2, r3, r4
 801b2c6:	d004      	beq.n	801b2d2 <_dtoa_r+0x6b2>
 801b2c8:	9901      	ldr	r1, [sp, #4]
 801b2ca:	4648      	mov	r0, r9
 801b2cc:	f001 f848 	bl	801c360 <__pow5mult>
 801b2d0:	9001      	str	r0, [sp, #4]
 801b2d2:	2101      	movs	r1, #1
 801b2d4:	4648      	mov	r0, r9
 801b2d6:	f000 ff83 	bl	801c1e0 <__i2b>
 801b2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2dc:	4604      	mov	r4, r0
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	f000 81d0 	beq.w	801b684 <_dtoa_r+0xa64>
 801b2e4:	461a      	mov	r2, r3
 801b2e6:	4601      	mov	r1, r0
 801b2e8:	4648      	mov	r0, r9
 801b2ea:	f001 f839 	bl	801c360 <__pow5mult>
 801b2ee:	9b07      	ldr	r3, [sp, #28]
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	f300 8095 	bgt.w	801b422 <_dtoa_r+0x802>
 801b2f8:	9b02      	ldr	r3, [sp, #8]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	f040 808b 	bne.w	801b416 <_dtoa_r+0x7f6>
 801b300:	9b03      	ldr	r3, [sp, #12]
 801b302:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b306:	2a00      	cmp	r2, #0
 801b308:	f040 8087 	bne.w	801b41a <_dtoa_r+0x7fa>
 801b30c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801b310:	0d12      	lsrs	r2, r2, #20
 801b312:	0512      	lsls	r2, r2, #20
 801b314:	2a00      	cmp	r2, #0
 801b316:	f000 8082 	beq.w	801b41e <_dtoa_r+0x7fe>
 801b31a:	9b05      	ldr	r3, [sp, #20]
 801b31c:	3301      	adds	r3, #1
 801b31e:	9305      	str	r3, [sp, #20]
 801b320:	9b06      	ldr	r3, [sp, #24]
 801b322:	3301      	adds	r3, #1
 801b324:	9306      	str	r3, [sp, #24]
 801b326:	2301      	movs	r3, #1
 801b328:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f000 81af 	beq.w	801b690 <_dtoa_r+0xa70>
 801b332:	6922      	ldr	r2, [r4, #16]
 801b334:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b338:	6910      	ldr	r0, [r2, #16]
 801b33a:	f000 ff05 	bl	801c148 <__hi0bits>
 801b33e:	f1c0 0020 	rsb	r0, r0, #32
 801b342:	9b06      	ldr	r3, [sp, #24]
 801b344:	4418      	add	r0, r3
 801b346:	f010 001f 	ands.w	r0, r0, #31
 801b34a:	d076      	beq.n	801b43a <_dtoa_r+0x81a>
 801b34c:	f1c0 0220 	rsb	r2, r0, #32
 801b350:	2a04      	cmp	r2, #4
 801b352:	dd69      	ble.n	801b428 <_dtoa_r+0x808>
 801b354:	9b05      	ldr	r3, [sp, #20]
 801b356:	f1c0 001c 	rsb	r0, r0, #28
 801b35a:	4403      	add	r3, r0
 801b35c:	9305      	str	r3, [sp, #20]
 801b35e:	9b06      	ldr	r3, [sp, #24]
 801b360:	4406      	add	r6, r0
 801b362:	4403      	add	r3, r0
 801b364:	9306      	str	r3, [sp, #24]
 801b366:	9b05      	ldr	r3, [sp, #20]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	dd05      	ble.n	801b378 <_dtoa_r+0x758>
 801b36c:	9901      	ldr	r1, [sp, #4]
 801b36e:	461a      	mov	r2, r3
 801b370:	4648      	mov	r0, r9
 801b372:	f001 f84f 	bl	801c414 <__lshift>
 801b376:	9001      	str	r0, [sp, #4]
 801b378:	9b06      	ldr	r3, [sp, #24]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	dd05      	ble.n	801b38a <_dtoa_r+0x76a>
 801b37e:	4621      	mov	r1, r4
 801b380:	461a      	mov	r2, r3
 801b382:	4648      	mov	r0, r9
 801b384:	f001 f846 	bl	801c414 <__lshift>
 801b388:	4604      	mov	r4, r0
 801b38a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d056      	beq.n	801b43e <_dtoa_r+0x81e>
 801b390:	9801      	ldr	r0, [sp, #4]
 801b392:	4621      	mov	r1, r4
 801b394:	f001 f8aa 	bl	801c4ec <__mcmp>
 801b398:	2800      	cmp	r0, #0
 801b39a:	da50      	bge.n	801b43e <_dtoa_r+0x81e>
 801b39c:	f108 33ff 	add.w	r3, r8, #4294967295
 801b3a0:	9304      	str	r3, [sp, #16]
 801b3a2:	9901      	ldr	r1, [sp, #4]
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	220a      	movs	r2, #10
 801b3a8:	4648      	mov	r0, r9
 801b3aa:	f000 fe3d 	bl	801c028 <__multadd>
 801b3ae:	9b08      	ldr	r3, [sp, #32]
 801b3b0:	9001      	str	r0, [sp, #4]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	f000 816e 	beq.w	801b694 <_dtoa_r+0xa74>
 801b3b8:	4629      	mov	r1, r5
 801b3ba:	2300      	movs	r3, #0
 801b3bc:	220a      	movs	r2, #10
 801b3be:	4648      	mov	r0, r9
 801b3c0:	f000 fe32 	bl	801c028 <__multadd>
 801b3c4:	f1bb 0f00 	cmp.w	fp, #0
 801b3c8:	4605      	mov	r5, r0
 801b3ca:	dc64      	bgt.n	801b496 <_dtoa_r+0x876>
 801b3cc:	9b07      	ldr	r3, [sp, #28]
 801b3ce:	2b02      	cmp	r3, #2
 801b3d0:	dc3e      	bgt.n	801b450 <_dtoa_r+0x830>
 801b3d2:	e060      	b.n	801b496 <_dtoa_r+0x876>
 801b3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801b3da:	e73c      	b.n	801b256 <_dtoa_r+0x636>
 801b3dc:	f10a 34ff 	add.w	r4, sl, #4294967295
 801b3e0:	42a3      	cmp	r3, r4
 801b3e2:	bfbf      	itttt	lt
 801b3e4:	1ae2      	sublt	r2, r4, r3
 801b3e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b3e8:	189b      	addlt	r3, r3, r2
 801b3ea:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801b3ec:	bfae      	itee	ge
 801b3ee:	1b1c      	subge	r4, r3, r4
 801b3f0:	4623      	movlt	r3, r4
 801b3f2:	2400      	movlt	r4, #0
 801b3f4:	f1ba 0f00 	cmp.w	sl, #0
 801b3f8:	bfb5      	itete	lt
 801b3fa:	9a05      	ldrlt	r2, [sp, #20]
 801b3fc:	9e05      	ldrge	r6, [sp, #20]
 801b3fe:	eba2 060a 	sublt.w	r6, r2, sl
 801b402:	4652      	movge	r2, sl
 801b404:	bfb8      	it	lt
 801b406:	2200      	movlt	r2, #0
 801b408:	e727      	b.n	801b25a <_dtoa_r+0x63a>
 801b40a:	9e05      	ldr	r6, [sp, #20]
 801b40c:	9d08      	ldr	r5, [sp, #32]
 801b40e:	461c      	mov	r4, r3
 801b410:	e730      	b.n	801b274 <_dtoa_r+0x654>
 801b412:	461a      	mov	r2, r3
 801b414:	e758      	b.n	801b2c8 <_dtoa_r+0x6a8>
 801b416:	2300      	movs	r3, #0
 801b418:	e786      	b.n	801b328 <_dtoa_r+0x708>
 801b41a:	9b02      	ldr	r3, [sp, #8]
 801b41c:	e784      	b.n	801b328 <_dtoa_r+0x708>
 801b41e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b420:	e783      	b.n	801b32a <_dtoa_r+0x70a>
 801b422:	2300      	movs	r3, #0
 801b424:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b426:	e784      	b.n	801b332 <_dtoa_r+0x712>
 801b428:	d09d      	beq.n	801b366 <_dtoa_r+0x746>
 801b42a:	9b05      	ldr	r3, [sp, #20]
 801b42c:	321c      	adds	r2, #28
 801b42e:	4413      	add	r3, r2
 801b430:	9305      	str	r3, [sp, #20]
 801b432:	9b06      	ldr	r3, [sp, #24]
 801b434:	4416      	add	r6, r2
 801b436:	4413      	add	r3, r2
 801b438:	e794      	b.n	801b364 <_dtoa_r+0x744>
 801b43a:	4602      	mov	r2, r0
 801b43c:	e7f5      	b.n	801b42a <_dtoa_r+0x80a>
 801b43e:	f1ba 0f00 	cmp.w	sl, #0
 801b442:	f8cd 8010 	str.w	r8, [sp, #16]
 801b446:	46d3      	mov	fp, sl
 801b448:	dc21      	bgt.n	801b48e <_dtoa_r+0x86e>
 801b44a:	9b07      	ldr	r3, [sp, #28]
 801b44c:	2b02      	cmp	r3, #2
 801b44e:	dd1e      	ble.n	801b48e <_dtoa_r+0x86e>
 801b450:	f1bb 0f00 	cmp.w	fp, #0
 801b454:	f47f aeb7 	bne.w	801b1c6 <_dtoa_r+0x5a6>
 801b458:	4621      	mov	r1, r4
 801b45a:	465b      	mov	r3, fp
 801b45c:	2205      	movs	r2, #5
 801b45e:	4648      	mov	r0, r9
 801b460:	f000 fde2 	bl	801c028 <__multadd>
 801b464:	4601      	mov	r1, r0
 801b466:	4604      	mov	r4, r0
 801b468:	9801      	ldr	r0, [sp, #4]
 801b46a:	f001 f83f 	bl	801c4ec <__mcmp>
 801b46e:	2800      	cmp	r0, #0
 801b470:	f77f aea9 	ble.w	801b1c6 <_dtoa_r+0x5a6>
 801b474:	463e      	mov	r6, r7
 801b476:	2331      	movs	r3, #49	@ 0x31
 801b478:	f806 3b01 	strb.w	r3, [r6], #1
 801b47c:	9b04      	ldr	r3, [sp, #16]
 801b47e:	3301      	adds	r3, #1
 801b480:	9304      	str	r3, [sp, #16]
 801b482:	e6a4      	b.n	801b1ce <_dtoa_r+0x5ae>
 801b484:	f8cd 8010 	str.w	r8, [sp, #16]
 801b488:	4654      	mov	r4, sl
 801b48a:	4625      	mov	r5, r4
 801b48c:	e7f2      	b.n	801b474 <_dtoa_r+0x854>
 801b48e:	9b08      	ldr	r3, [sp, #32]
 801b490:	2b00      	cmp	r3, #0
 801b492:	f000 8103 	beq.w	801b69c <_dtoa_r+0xa7c>
 801b496:	2e00      	cmp	r6, #0
 801b498:	dd05      	ble.n	801b4a6 <_dtoa_r+0x886>
 801b49a:	4629      	mov	r1, r5
 801b49c:	4632      	mov	r2, r6
 801b49e:	4648      	mov	r0, r9
 801b4a0:	f000 ffb8 	bl	801c414 <__lshift>
 801b4a4:	4605      	mov	r5, r0
 801b4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d058      	beq.n	801b55e <_dtoa_r+0x93e>
 801b4ac:	6869      	ldr	r1, [r5, #4]
 801b4ae:	4648      	mov	r0, r9
 801b4b0:	f000 fd58 	bl	801bf64 <_Balloc>
 801b4b4:	4606      	mov	r6, r0
 801b4b6:	b928      	cbnz	r0, 801b4c4 <_dtoa_r+0x8a4>
 801b4b8:	4b82      	ldr	r3, [pc, #520]	@ (801b6c4 <_dtoa_r+0xaa4>)
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b4c0:	f7ff bbc7 	b.w	801ac52 <_dtoa_r+0x32>
 801b4c4:	692a      	ldr	r2, [r5, #16]
 801b4c6:	3202      	adds	r2, #2
 801b4c8:	0092      	lsls	r2, r2, #2
 801b4ca:	f105 010c 	add.w	r1, r5, #12
 801b4ce:	300c      	adds	r0, #12
 801b4d0:	f7ff fb05 	bl	801aade <memcpy>
 801b4d4:	2201      	movs	r2, #1
 801b4d6:	4631      	mov	r1, r6
 801b4d8:	4648      	mov	r0, r9
 801b4da:	f000 ff9b 	bl	801c414 <__lshift>
 801b4de:	1c7b      	adds	r3, r7, #1
 801b4e0:	9305      	str	r3, [sp, #20]
 801b4e2:	eb07 030b 	add.w	r3, r7, fp
 801b4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b4e8:	9b02      	ldr	r3, [sp, #8]
 801b4ea:	f003 0301 	and.w	r3, r3, #1
 801b4ee:	46a8      	mov	r8, r5
 801b4f0:	9308      	str	r3, [sp, #32]
 801b4f2:	4605      	mov	r5, r0
 801b4f4:	9b05      	ldr	r3, [sp, #20]
 801b4f6:	9801      	ldr	r0, [sp, #4]
 801b4f8:	4621      	mov	r1, r4
 801b4fa:	f103 3bff 	add.w	fp, r3, #4294967295
 801b4fe:	f7ff fb07 	bl	801ab10 <quorem>
 801b502:	4641      	mov	r1, r8
 801b504:	9002      	str	r0, [sp, #8]
 801b506:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b50a:	9801      	ldr	r0, [sp, #4]
 801b50c:	f000 ffee 	bl	801c4ec <__mcmp>
 801b510:	462a      	mov	r2, r5
 801b512:	9006      	str	r0, [sp, #24]
 801b514:	4621      	mov	r1, r4
 801b516:	4648      	mov	r0, r9
 801b518:	f001 f804 	bl	801c524 <__mdiff>
 801b51c:	68c2      	ldr	r2, [r0, #12]
 801b51e:	4606      	mov	r6, r0
 801b520:	b9fa      	cbnz	r2, 801b562 <_dtoa_r+0x942>
 801b522:	4601      	mov	r1, r0
 801b524:	9801      	ldr	r0, [sp, #4]
 801b526:	f000 ffe1 	bl	801c4ec <__mcmp>
 801b52a:	4602      	mov	r2, r0
 801b52c:	4631      	mov	r1, r6
 801b52e:	4648      	mov	r0, r9
 801b530:	920a      	str	r2, [sp, #40]	@ 0x28
 801b532:	f000 fd57 	bl	801bfe4 <_Bfree>
 801b536:	9b07      	ldr	r3, [sp, #28]
 801b538:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b53a:	9e05      	ldr	r6, [sp, #20]
 801b53c:	ea43 0102 	orr.w	r1, r3, r2
 801b540:	9b08      	ldr	r3, [sp, #32]
 801b542:	4319      	orrs	r1, r3
 801b544:	d10f      	bne.n	801b566 <_dtoa_r+0x946>
 801b546:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b54a:	d028      	beq.n	801b59e <_dtoa_r+0x97e>
 801b54c:	9b06      	ldr	r3, [sp, #24]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	dd02      	ble.n	801b558 <_dtoa_r+0x938>
 801b552:	9b02      	ldr	r3, [sp, #8]
 801b554:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801b558:	f88b a000 	strb.w	sl, [fp]
 801b55c:	e639      	b.n	801b1d2 <_dtoa_r+0x5b2>
 801b55e:	4628      	mov	r0, r5
 801b560:	e7bd      	b.n	801b4de <_dtoa_r+0x8be>
 801b562:	2201      	movs	r2, #1
 801b564:	e7e2      	b.n	801b52c <_dtoa_r+0x90c>
 801b566:	9b06      	ldr	r3, [sp, #24]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	db04      	blt.n	801b576 <_dtoa_r+0x956>
 801b56c:	9907      	ldr	r1, [sp, #28]
 801b56e:	430b      	orrs	r3, r1
 801b570:	9908      	ldr	r1, [sp, #32]
 801b572:	430b      	orrs	r3, r1
 801b574:	d120      	bne.n	801b5b8 <_dtoa_r+0x998>
 801b576:	2a00      	cmp	r2, #0
 801b578:	ddee      	ble.n	801b558 <_dtoa_r+0x938>
 801b57a:	9901      	ldr	r1, [sp, #4]
 801b57c:	2201      	movs	r2, #1
 801b57e:	4648      	mov	r0, r9
 801b580:	f000 ff48 	bl	801c414 <__lshift>
 801b584:	4621      	mov	r1, r4
 801b586:	9001      	str	r0, [sp, #4]
 801b588:	f000 ffb0 	bl	801c4ec <__mcmp>
 801b58c:	2800      	cmp	r0, #0
 801b58e:	dc03      	bgt.n	801b598 <_dtoa_r+0x978>
 801b590:	d1e2      	bne.n	801b558 <_dtoa_r+0x938>
 801b592:	f01a 0f01 	tst.w	sl, #1
 801b596:	d0df      	beq.n	801b558 <_dtoa_r+0x938>
 801b598:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b59c:	d1d9      	bne.n	801b552 <_dtoa_r+0x932>
 801b59e:	2339      	movs	r3, #57	@ 0x39
 801b5a0:	f88b 3000 	strb.w	r3, [fp]
 801b5a4:	4633      	mov	r3, r6
 801b5a6:	461e      	mov	r6, r3
 801b5a8:	3b01      	subs	r3, #1
 801b5aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b5ae:	2a39      	cmp	r2, #57	@ 0x39
 801b5b0:	d053      	beq.n	801b65a <_dtoa_r+0xa3a>
 801b5b2:	3201      	adds	r2, #1
 801b5b4:	701a      	strb	r2, [r3, #0]
 801b5b6:	e60c      	b.n	801b1d2 <_dtoa_r+0x5b2>
 801b5b8:	2a00      	cmp	r2, #0
 801b5ba:	dd07      	ble.n	801b5cc <_dtoa_r+0x9ac>
 801b5bc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801b5c0:	d0ed      	beq.n	801b59e <_dtoa_r+0x97e>
 801b5c2:	f10a 0301 	add.w	r3, sl, #1
 801b5c6:	f88b 3000 	strb.w	r3, [fp]
 801b5ca:	e602      	b.n	801b1d2 <_dtoa_r+0x5b2>
 801b5cc:	9b05      	ldr	r3, [sp, #20]
 801b5ce:	9a05      	ldr	r2, [sp, #20]
 801b5d0:	f803 ac01 	strb.w	sl, [r3, #-1]
 801b5d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	d029      	beq.n	801b62e <_dtoa_r+0xa0e>
 801b5da:	9901      	ldr	r1, [sp, #4]
 801b5dc:	2300      	movs	r3, #0
 801b5de:	220a      	movs	r2, #10
 801b5e0:	4648      	mov	r0, r9
 801b5e2:	f000 fd21 	bl	801c028 <__multadd>
 801b5e6:	45a8      	cmp	r8, r5
 801b5e8:	9001      	str	r0, [sp, #4]
 801b5ea:	f04f 0300 	mov.w	r3, #0
 801b5ee:	f04f 020a 	mov.w	r2, #10
 801b5f2:	4641      	mov	r1, r8
 801b5f4:	4648      	mov	r0, r9
 801b5f6:	d107      	bne.n	801b608 <_dtoa_r+0x9e8>
 801b5f8:	f000 fd16 	bl	801c028 <__multadd>
 801b5fc:	4680      	mov	r8, r0
 801b5fe:	4605      	mov	r5, r0
 801b600:	9b05      	ldr	r3, [sp, #20]
 801b602:	3301      	adds	r3, #1
 801b604:	9305      	str	r3, [sp, #20]
 801b606:	e775      	b.n	801b4f4 <_dtoa_r+0x8d4>
 801b608:	f000 fd0e 	bl	801c028 <__multadd>
 801b60c:	4629      	mov	r1, r5
 801b60e:	4680      	mov	r8, r0
 801b610:	2300      	movs	r3, #0
 801b612:	220a      	movs	r2, #10
 801b614:	4648      	mov	r0, r9
 801b616:	f000 fd07 	bl	801c028 <__multadd>
 801b61a:	4605      	mov	r5, r0
 801b61c:	e7f0      	b.n	801b600 <_dtoa_r+0x9e0>
 801b61e:	f1bb 0f00 	cmp.w	fp, #0
 801b622:	bfcc      	ite	gt
 801b624:	465e      	movgt	r6, fp
 801b626:	2601      	movle	r6, #1
 801b628:	443e      	add	r6, r7
 801b62a:	f04f 0800 	mov.w	r8, #0
 801b62e:	9901      	ldr	r1, [sp, #4]
 801b630:	2201      	movs	r2, #1
 801b632:	4648      	mov	r0, r9
 801b634:	f000 feee 	bl	801c414 <__lshift>
 801b638:	4621      	mov	r1, r4
 801b63a:	9001      	str	r0, [sp, #4]
 801b63c:	f000 ff56 	bl	801c4ec <__mcmp>
 801b640:	2800      	cmp	r0, #0
 801b642:	dcaf      	bgt.n	801b5a4 <_dtoa_r+0x984>
 801b644:	d102      	bne.n	801b64c <_dtoa_r+0xa2c>
 801b646:	f01a 0f01 	tst.w	sl, #1
 801b64a:	d1ab      	bne.n	801b5a4 <_dtoa_r+0x984>
 801b64c:	4633      	mov	r3, r6
 801b64e:	461e      	mov	r6, r3
 801b650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b654:	2a30      	cmp	r2, #48	@ 0x30
 801b656:	d0fa      	beq.n	801b64e <_dtoa_r+0xa2e>
 801b658:	e5bb      	b.n	801b1d2 <_dtoa_r+0x5b2>
 801b65a:	429f      	cmp	r7, r3
 801b65c:	d1a3      	bne.n	801b5a6 <_dtoa_r+0x986>
 801b65e:	9b04      	ldr	r3, [sp, #16]
 801b660:	3301      	adds	r3, #1
 801b662:	9304      	str	r3, [sp, #16]
 801b664:	2331      	movs	r3, #49	@ 0x31
 801b666:	703b      	strb	r3, [r7, #0]
 801b668:	e5b3      	b.n	801b1d2 <_dtoa_r+0x5b2>
 801b66a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b66c:	4f16      	ldr	r7, [pc, #88]	@ (801b6c8 <_dtoa_r+0xaa8>)
 801b66e:	b11b      	cbz	r3, 801b678 <_dtoa_r+0xa58>
 801b670:	f107 0308 	add.w	r3, r7, #8
 801b674:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b676:	6013      	str	r3, [r2, #0]
 801b678:	4638      	mov	r0, r7
 801b67a:	b011      	add	sp, #68	@ 0x44
 801b67c:	ecbd 8b02 	vpop	{d8}
 801b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b684:	9b07      	ldr	r3, [sp, #28]
 801b686:	2b01      	cmp	r3, #1
 801b688:	f77f ae36 	ble.w	801b2f8 <_dtoa_r+0x6d8>
 801b68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b68e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b690:	2001      	movs	r0, #1
 801b692:	e656      	b.n	801b342 <_dtoa_r+0x722>
 801b694:	f1bb 0f00 	cmp.w	fp, #0
 801b698:	f77f aed7 	ble.w	801b44a <_dtoa_r+0x82a>
 801b69c:	463e      	mov	r6, r7
 801b69e:	9801      	ldr	r0, [sp, #4]
 801b6a0:	4621      	mov	r1, r4
 801b6a2:	f7ff fa35 	bl	801ab10 <quorem>
 801b6a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801b6aa:	f806 ab01 	strb.w	sl, [r6], #1
 801b6ae:	1bf2      	subs	r2, r6, r7
 801b6b0:	4593      	cmp	fp, r2
 801b6b2:	ddb4      	ble.n	801b61e <_dtoa_r+0x9fe>
 801b6b4:	9901      	ldr	r1, [sp, #4]
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	220a      	movs	r2, #10
 801b6ba:	4648      	mov	r0, r9
 801b6bc:	f000 fcb4 	bl	801c028 <__multadd>
 801b6c0:	9001      	str	r0, [sp, #4]
 801b6c2:	e7ec      	b.n	801b69e <_dtoa_r+0xa7e>
 801b6c4:	0801f049 	.word	0x0801f049
 801b6c8:	0801efcd 	.word	0x0801efcd

0801b6cc <_free_r>:
 801b6cc:	b538      	push	{r3, r4, r5, lr}
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	2900      	cmp	r1, #0
 801b6d2:	d041      	beq.n	801b758 <_free_r+0x8c>
 801b6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6d8:	1f0c      	subs	r4, r1, #4
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	bfb8      	it	lt
 801b6de:	18e4      	addlt	r4, r4, r3
 801b6e0:	f000 fc34 	bl	801bf4c <__malloc_lock>
 801b6e4:	4a1d      	ldr	r2, [pc, #116]	@ (801b75c <_free_r+0x90>)
 801b6e6:	6813      	ldr	r3, [r2, #0]
 801b6e8:	b933      	cbnz	r3, 801b6f8 <_free_r+0x2c>
 801b6ea:	6063      	str	r3, [r4, #4]
 801b6ec:	6014      	str	r4, [r2, #0]
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b6f4:	f000 bc30 	b.w	801bf58 <__malloc_unlock>
 801b6f8:	42a3      	cmp	r3, r4
 801b6fa:	d908      	bls.n	801b70e <_free_r+0x42>
 801b6fc:	6820      	ldr	r0, [r4, #0]
 801b6fe:	1821      	adds	r1, r4, r0
 801b700:	428b      	cmp	r3, r1
 801b702:	bf01      	itttt	eq
 801b704:	6819      	ldreq	r1, [r3, #0]
 801b706:	685b      	ldreq	r3, [r3, #4]
 801b708:	1809      	addeq	r1, r1, r0
 801b70a:	6021      	streq	r1, [r4, #0]
 801b70c:	e7ed      	b.n	801b6ea <_free_r+0x1e>
 801b70e:	461a      	mov	r2, r3
 801b710:	685b      	ldr	r3, [r3, #4]
 801b712:	b10b      	cbz	r3, 801b718 <_free_r+0x4c>
 801b714:	42a3      	cmp	r3, r4
 801b716:	d9fa      	bls.n	801b70e <_free_r+0x42>
 801b718:	6811      	ldr	r1, [r2, #0]
 801b71a:	1850      	adds	r0, r2, r1
 801b71c:	42a0      	cmp	r0, r4
 801b71e:	d10b      	bne.n	801b738 <_free_r+0x6c>
 801b720:	6820      	ldr	r0, [r4, #0]
 801b722:	4401      	add	r1, r0
 801b724:	1850      	adds	r0, r2, r1
 801b726:	4283      	cmp	r3, r0
 801b728:	6011      	str	r1, [r2, #0]
 801b72a:	d1e0      	bne.n	801b6ee <_free_r+0x22>
 801b72c:	6818      	ldr	r0, [r3, #0]
 801b72e:	685b      	ldr	r3, [r3, #4]
 801b730:	6053      	str	r3, [r2, #4]
 801b732:	4408      	add	r0, r1
 801b734:	6010      	str	r0, [r2, #0]
 801b736:	e7da      	b.n	801b6ee <_free_r+0x22>
 801b738:	d902      	bls.n	801b740 <_free_r+0x74>
 801b73a:	230c      	movs	r3, #12
 801b73c:	602b      	str	r3, [r5, #0]
 801b73e:	e7d6      	b.n	801b6ee <_free_r+0x22>
 801b740:	6820      	ldr	r0, [r4, #0]
 801b742:	1821      	adds	r1, r4, r0
 801b744:	428b      	cmp	r3, r1
 801b746:	bf04      	itt	eq
 801b748:	6819      	ldreq	r1, [r3, #0]
 801b74a:	685b      	ldreq	r3, [r3, #4]
 801b74c:	6063      	str	r3, [r4, #4]
 801b74e:	bf04      	itt	eq
 801b750:	1809      	addeq	r1, r1, r0
 801b752:	6021      	streq	r1, [r4, #0]
 801b754:	6054      	str	r4, [r2, #4]
 801b756:	e7ca      	b.n	801b6ee <_free_r+0x22>
 801b758:	bd38      	pop	{r3, r4, r5, pc}
 801b75a:	bf00      	nop
 801b75c:	2401da3c 	.word	0x2401da3c

0801b760 <rshift>:
 801b760:	6903      	ldr	r3, [r0, #16]
 801b762:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b76a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b76e:	f100 0414 	add.w	r4, r0, #20
 801b772:	dd45      	ble.n	801b800 <rshift+0xa0>
 801b774:	f011 011f 	ands.w	r1, r1, #31
 801b778:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b77c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b780:	d10c      	bne.n	801b79c <rshift+0x3c>
 801b782:	f100 0710 	add.w	r7, r0, #16
 801b786:	4629      	mov	r1, r5
 801b788:	42b1      	cmp	r1, r6
 801b78a:	d334      	bcc.n	801b7f6 <rshift+0x96>
 801b78c:	1a9b      	subs	r3, r3, r2
 801b78e:	009b      	lsls	r3, r3, #2
 801b790:	1eea      	subs	r2, r5, #3
 801b792:	4296      	cmp	r6, r2
 801b794:	bf38      	it	cc
 801b796:	2300      	movcc	r3, #0
 801b798:	4423      	add	r3, r4
 801b79a:	e015      	b.n	801b7c8 <rshift+0x68>
 801b79c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b7a0:	f1c1 0820 	rsb	r8, r1, #32
 801b7a4:	40cf      	lsrs	r7, r1
 801b7a6:	f105 0e04 	add.w	lr, r5, #4
 801b7aa:	46a1      	mov	r9, r4
 801b7ac:	4576      	cmp	r6, lr
 801b7ae:	46f4      	mov	ip, lr
 801b7b0:	d815      	bhi.n	801b7de <rshift+0x7e>
 801b7b2:	1a9a      	subs	r2, r3, r2
 801b7b4:	0092      	lsls	r2, r2, #2
 801b7b6:	3a04      	subs	r2, #4
 801b7b8:	3501      	adds	r5, #1
 801b7ba:	42ae      	cmp	r6, r5
 801b7bc:	bf38      	it	cc
 801b7be:	2200      	movcc	r2, #0
 801b7c0:	18a3      	adds	r3, r4, r2
 801b7c2:	50a7      	str	r7, [r4, r2]
 801b7c4:	b107      	cbz	r7, 801b7c8 <rshift+0x68>
 801b7c6:	3304      	adds	r3, #4
 801b7c8:	1b1a      	subs	r2, r3, r4
 801b7ca:	42a3      	cmp	r3, r4
 801b7cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b7d0:	bf08      	it	eq
 801b7d2:	2300      	moveq	r3, #0
 801b7d4:	6102      	str	r2, [r0, #16]
 801b7d6:	bf08      	it	eq
 801b7d8:	6143      	streq	r3, [r0, #20]
 801b7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7de:	f8dc c000 	ldr.w	ip, [ip]
 801b7e2:	fa0c fc08 	lsl.w	ip, ip, r8
 801b7e6:	ea4c 0707 	orr.w	r7, ip, r7
 801b7ea:	f849 7b04 	str.w	r7, [r9], #4
 801b7ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b7f2:	40cf      	lsrs	r7, r1
 801b7f4:	e7da      	b.n	801b7ac <rshift+0x4c>
 801b7f6:	f851 cb04 	ldr.w	ip, [r1], #4
 801b7fa:	f847 cf04 	str.w	ip, [r7, #4]!
 801b7fe:	e7c3      	b.n	801b788 <rshift+0x28>
 801b800:	4623      	mov	r3, r4
 801b802:	e7e1      	b.n	801b7c8 <rshift+0x68>

0801b804 <__hexdig_fun>:
 801b804:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801b808:	2b09      	cmp	r3, #9
 801b80a:	d802      	bhi.n	801b812 <__hexdig_fun+0xe>
 801b80c:	3820      	subs	r0, #32
 801b80e:	b2c0      	uxtb	r0, r0
 801b810:	4770      	bx	lr
 801b812:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801b816:	2b05      	cmp	r3, #5
 801b818:	d801      	bhi.n	801b81e <__hexdig_fun+0x1a>
 801b81a:	3847      	subs	r0, #71	@ 0x47
 801b81c:	e7f7      	b.n	801b80e <__hexdig_fun+0xa>
 801b81e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801b822:	2b05      	cmp	r3, #5
 801b824:	d801      	bhi.n	801b82a <__hexdig_fun+0x26>
 801b826:	3827      	subs	r0, #39	@ 0x27
 801b828:	e7f1      	b.n	801b80e <__hexdig_fun+0xa>
 801b82a:	2000      	movs	r0, #0
 801b82c:	4770      	bx	lr
	...

0801b830 <__gethex>:
 801b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b834:	b085      	sub	sp, #20
 801b836:	468a      	mov	sl, r1
 801b838:	9302      	str	r3, [sp, #8]
 801b83a:	680b      	ldr	r3, [r1, #0]
 801b83c:	9001      	str	r0, [sp, #4]
 801b83e:	4690      	mov	r8, r2
 801b840:	1c9c      	adds	r4, r3, #2
 801b842:	46a1      	mov	r9, r4
 801b844:	f814 0b01 	ldrb.w	r0, [r4], #1
 801b848:	2830      	cmp	r0, #48	@ 0x30
 801b84a:	d0fa      	beq.n	801b842 <__gethex+0x12>
 801b84c:	eba9 0303 	sub.w	r3, r9, r3
 801b850:	f1a3 0b02 	sub.w	fp, r3, #2
 801b854:	f7ff ffd6 	bl	801b804 <__hexdig_fun>
 801b858:	4605      	mov	r5, r0
 801b85a:	2800      	cmp	r0, #0
 801b85c:	d168      	bne.n	801b930 <__gethex+0x100>
 801b85e:	49a0      	ldr	r1, [pc, #640]	@ (801bae0 <__gethex+0x2b0>)
 801b860:	2201      	movs	r2, #1
 801b862:	4648      	mov	r0, r9
 801b864:	f7ff f8b2 	bl	801a9cc <strncmp>
 801b868:	4607      	mov	r7, r0
 801b86a:	2800      	cmp	r0, #0
 801b86c:	d167      	bne.n	801b93e <__gethex+0x10e>
 801b86e:	f899 0001 	ldrb.w	r0, [r9, #1]
 801b872:	4626      	mov	r6, r4
 801b874:	f7ff ffc6 	bl	801b804 <__hexdig_fun>
 801b878:	2800      	cmp	r0, #0
 801b87a:	d062      	beq.n	801b942 <__gethex+0x112>
 801b87c:	4623      	mov	r3, r4
 801b87e:	7818      	ldrb	r0, [r3, #0]
 801b880:	2830      	cmp	r0, #48	@ 0x30
 801b882:	4699      	mov	r9, r3
 801b884:	f103 0301 	add.w	r3, r3, #1
 801b888:	d0f9      	beq.n	801b87e <__gethex+0x4e>
 801b88a:	f7ff ffbb 	bl	801b804 <__hexdig_fun>
 801b88e:	fab0 f580 	clz	r5, r0
 801b892:	096d      	lsrs	r5, r5, #5
 801b894:	f04f 0b01 	mov.w	fp, #1
 801b898:	464a      	mov	r2, r9
 801b89a:	4616      	mov	r6, r2
 801b89c:	3201      	adds	r2, #1
 801b89e:	7830      	ldrb	r0, [r6, #0]
 801b8a0:	f7ff ffb0 	bl	801b804 <__hexdig_fun>
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	d1f8      	bne.n	801b89a <__gethex+0x6a>
 801b8a8:	498d      	ldr	r1, [pc, #564]	@ (801bae0 <__gethex+0x2b0>)
 801b8aa:	2201      	movs	r2, #1
 801b8ac:	4630      	mov	r0, r6
 801b8ae:	f7ff f88d 	bl	801a9cc <strncmp>
 801b8b2:	2800      	cmp	r0, #0
 801b8b4:	d13f      	bne.n	801b936 <__gethex+0x106>
 801b8b6:	b944      	cbnz	r4, 801b8ca <__gethex+0x9a>
 801b8b8:	1c74      	adds	r4, r6, #1
 801b8ba:	4622      	mov	r2, r4
 801b8bc:	4616      	mov	r6, r2
 801b8be:	3201      	adds	r2, #1
 801b8c0:	7830      	ldrb	r0, [r6, #0]
 801b8c2:	f7ff ff9f 	bl	801b804 <__hexdig_fun>
 801b8c6:	2800      	cmp	r0, #0
 801b8c8:	d1f8      	bne.n	801b8bc <__gethex+0x8c>
 801b8ca:	1ba4      	subs	r4, r4, r6
 801b8cc:	00a7      	lsls	r7, r4, #2
 801b8ce:	7833      	ldrb	r3, [r6, #0]
 801b8d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801b8d4:	2b50      	cmp	r3, #80	@ 0x50
 801b8d6:	d13e      	bne.n	801b956 <__gethex+0x126>
 801b8d8:	7873      	ldrb	r3, [r6, #1]
 801b8da:	2b2b      	cmp	r3, #43	@ 0x2b
 801b8dc:	d033      	beq.n	801b946 <__gethex+0x116>
 801b8de:	2b2d      	cmp	r3, #45	@ 0x2d
 801b8e0:	d034      	beq.n	801b94c <__gethex+0x11c>
 801b8e2:	1c71      	adds	r1, r6, #1
 801b8e4:	2400      	movs	r4, #0
 801b8e6:	7808      	ldrb	r0, [r1, #0]
 801b8e8:	f7ff ff8c 	bl	801b804 <__hexdig_fun>
 801b8ec:	1e43      	subs	r3, r0, #1
 801b8ee:	b2db      	uxtb	r3, r3
 801b8f0:	2b18      	cmp	r3, #24
 801b8f2:	d830      	bhi.n	801b956 <__gethex+0x126>
 801b8f4:	f1a0 0210 	sub.w	r2, r0, #16
 801b8f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b8fc:	f7ff ff82 	bl	801b804 <__hexdig_fun>
 801b900:	f100 3cff 	add.w	ip, r0, #4294967295
 801b904:	fa5f fc8c 	uxtb.w	ip, ip
 801b908:	f1bc 0f18 	cmp.w	ip, #24
 801b90c:	f04f 030a 	mov.w	r3, #10
 801b910:	d91e      	bls.n	801b950 <__gethex+0x120>
 801b912:	b104      	cbz	r4, 801b916 <__gethex+0xe6>
 801b914:	4252      	negs	r2, r2
 801b916:	4417      	add	r7, r2
 801b918:	f8ca 1000 	str.w	r1, [sl]
 801b91c:	b1ed      	cbz	r5, 801b95a <__gethex+0x12a>
 801b91e:	f1bb 0f00 	cmp.w	fp, #0
 801b922:	bf0c      	ite	eq
 801b924:	2506      	moveq	r5, #6
 801b926:	2500      	movne	r5, #0
 801b928:	4628      	mov	r0, r5
 801b92a:	b005      	add	sp, #20
 801b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b930:	2500      	movs	r5, #0
 801b932:	462c      	mov	r4, r5
 801b934:	e7b0      	b.n	801b898 <__gethex+0x68>
 801b936:	2c00      	cmp	r4, #0
 801b938:	d1c7      	bne.n	801b8ca <__gethex+0x9a>
 801b93a:	4627      	mov	r7, r4
 801b93c:	e7c7      	b.n	801b8ce <__gethex+0x9e>
 801b93e:	464e      	mov	r6, r9
 801b940:	462f      	mov	r7, r5
 801b942:	2501      	movs	r5, #1
 801b944:	e7c3      	b.n	801b8ce <__gethex+0x9e>
 801b946:	2400      	movs	r4, #0
 801b948:	1cb1      	adds	r1, r6, #2
 801b94a:	e7cc      	b.n	801b8e6 <__gethex+0xb6>
 801b94c:	2401      	movs	r4, #1
 801b94e:	e7fb      	b.n	801b948 <__gethex+0x118>
 801b950:	fb03 0002 	mla	r0, r3, r2, r0
 801b954:	e7ce      	b.n	801b8f4 <__gethex+0xc4>
 801b956:	4631      	mov	r1, r6
 801b958:	e7de      	b.n	801b918 <__gethex+0xe8>
 801b95a:	eba6 0309 	sub.w	r3, r6, r9
 801b95e:	3b01      	subs	r3, #1
 801b960:	4629      	mov	r1, r5
 801b962:	2b07      	cmp	r3, #7
 801b964:	dc0a      	bgt.n	801b97c <__gethex+0x14c>
 801b966:	9801      	ldr	r0, [sp, #4]
 801b968:	f000 fafc 	bl	801bf64 <_Balloc>
 801b96c:	4604      	mov	r4, r0
 801b96e:	b940      	cbnz	r0, 801b982 <__gethex+0x152>
 801b970:	4b5c      	ldr	r3, [pc, #368]	@ (801bae4 <__gethex+0x2b4>)
 801b972:	4602      	mov	r2, r0
 801b974:	21e4      	movs	r1, #228	@ 0xe4
 801b976:	485c      	ldr	r0, [pc, #368]	@ (801bae8 <__gethex+0x2b8>)
 801b978:	f001 f9de 	bl	801cd38 <__assert_func>
 801b97c:	3101      	adds	r1, #1
 801b97e:	105b      	asrs	r3, r3, #1
 801b980:	e7ef      	b.n	801b962 <__gethex+0x132>
 801b982:	f100 0a14 	add.w	sl, r0, #20
 801b986:	2300      	movs	r3, #0
 801b988:	4655      	mov	r5, sl
 801b98a:	469b      	mov	fp, r3
 801b98c:	45b1      	cmp	r9, r6
 801b98e:	d337      	bcc.n	801ba00 <__gethex+0x1d0>
 801b990:	f845 bb04 	str.w	fp, [r5], #4
 801b994:	eba5 050a 	sub.w	r5, r5, sl
 801b998:	10ad      	asrs	r5, r5, #2
 801b99a:	6125      	str	r5, [r4, #16]
 801b99c:	4658      	mov	r0, fp
 801b99e:	f000 fbd3 	bl	801c148 <__hi0bits>
 801b9a2:	016d      	lsls	r5, r5, #5
 801b9a4:	f8d8 6000 	ldr.w	r6, [r8]
 801b9a8:	1a2d      	subs	r5, r5, r0
 801b9aa:	42b5      	cmp	r5, r6
 801b9ac:	dd54      	ble.n	801ba58 <__gethex+0x228>
 801b9ae:	1bad      	subs	r5, r5, r6
 801b9b0:	4629      	mov	r1, r5
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	f000 ff64 	bl	801c880 <__any_on>
 801b9b8:	4681      	mov	r9, r0
 801b9ba:	b178      	cbz	r0, 801b9dc <__gethex+0x1ac>
 801b9bc:	1e6b      	subs	r3, r5, #1
 801b9be:	1159      	asrs	r1, r3, #5
 801b9c0:	f003 021f 	and.w	r2, r3, #31
 801b9c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b9c8:	f04f 0901 	mov.w	r9, #1
 801b9cc:	fa09 f202 	lsl.w	r2, r9, r2
 801b9d0:	420a      	tst	r2, r1
 801b9d2:	d003      	beq.n	801b9dc <__gethex+0x1ac>
 801b9d4:	454b      	cmp	r3, r9
 801b9d6:	dc36      	bgt.n	801ba46 <__gethex+0x216>
 801b9d8:	f04f 0902 	mov.w	r9, #2
 801b9dc:	4629      	mov	r1, r5
 801b9de:	4620      	mov	r0, r4
 801b9e0:	f7ff febe 	bl	801b760 <rshift>
 801b9e4:	442f      	add	r7, r5
 801b9e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b9ea:	42bb      	cmp	r3, r7
 801b9ec:	da42      	bge.n	801ba74 <__gethex+0x244>
 801b9ee:	9801      	ldr	r0, [sp, #4]
 801b9f0:	4621      	mov	r1, r4
 801b9f2:	f000 faf7 	bl	801bfe4 <_Bfree>
 801b9f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	6013      	str	r3, [r2, #0]
 801b9fc:	25a3      	movs	r5, #163	@ 0xa3
 801b9fe:	e793      	b.n	801b928 <__gethex+0xf8>
 801ba00:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ba04:	2a2e      	cmp	r2, #46	@ 0x2e
 801ba06:	d012      	beq.n	801ba2e <__gethex+0x1fe>
 801ba08:	2b20      	cmp	r3, #32
 801ba0a:	d104      	bne.n	801ba16 <__gethex+0x1e6>
 801ba0c:	f845 bb04 	str.w	fp, [r5], #4
 801ba10:	f04f 0b00 	mov.w	fp, #0
 801ba14:	465b      	mov	r3, fp
 801ba16:	7830      	ldrb	r0, [r6, #0]
 801ba18:	9303      	str	r3, [sp, #12]
 801ba1a:	f7ff fef3 	bl	801b804 <__hexdig_fun>
 801ba1e:	9b03      	ldr	r3, [sp, #12]
 801ba20:	f000 000f 	and.w	r0, r0, #15
 801ba24:	4098      	lsls	r0, r3
 801ba26:	ea4b 0b00 	orr.w	fp, fp, r0
 801ba2a:	3304      	adds	r3, #4
 801ba2c:	e7ae      	b.n	801b98c <__gethex+0x15c>
 801ba2e:	45b1      	cmp	r9, r6
 801ba30:	d8ea      	bhi.n	801ba08 <__gethex+0x1d8>
 801ba32:	492b      	ldr	r1, [pc, #172]	@ (801bae0 <__gethex+0x2b0>)
 801ba34:	9303      	str	r3, [sp, #12]
 801ba36:	2201      	movs	r2, #1
 801ba38:	4630      	mov	r0, r6
 801ba3a:	f7fe ffc7 	bl	801a9cc <strncmp>
 801ba3e:	9b03      	ldr	r3, [sp, #12]
 801ba40:	2800      	cmp	r0, #0
 801ba42:	d1e1      	bne.n	801ba08 <__gethex+0x1d8>
 801ba44:	e7a2      	b.n	801b98c <__gethex+0x15c>
 801ba46:	1ea9      	subs	r1, r5, #2
 801ba48:	4620      	mov	r0, r4
 801ba4a:	f000 ff19 	bl	801c880 <__any_on>
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d0c2      	beq.n	801b9d8 <__gethex+0x1a8>
 801ba52:	f04f 0903 	mov.w	r9, #3
 801ba56:	e7c1      	b.n	801b9dc <__gethex+0x1ac>
 801ba58:	da09      	bge.n	801ba6e <__gethex+0x23e>
 801ba5a:	1b75      	subs	r5, r6, r5
 801ba5c:	4621      	mov	r1, r4
 801ba5e:	9801      	ldr	r0, [sp, #4]
 801ba60:	462a      	mov	r2, r5
 801ba62:	f000 fcd7 	bl	801c414 <__lshift>
 801ba66:	1b7f      	subs	r7, r7, r5
 801ba68:	4604      	mov	r4, r0
 801ba6a:	f100 0a14 	add.w	sl, r0, #20
 801ba6e:	f04f 0900 	mov.w	r9, #0
 801ba72:	e7b8      	b.n	801b9e6 <__gethex+0x1b6>
 801ba74:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ba78:	42bd      	cmp	r5, r7
 801ba7a:	dd6f      	ble.n	801bb5c <__gethex+0x32c>
 801ba7c:	1bed      	subs	r5, r5, r7
 801ba7e:	42ae      	cmp	r6, r5
 801ba80:	dc34      	bgt.n	801baec <__gethex+0x2bc>
 801ba82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ba86:	2b02      	cmp	r3, #2
 801ba88:	d022      	beq.n	801bad0 <__gethex+0x2a0>
 801ba8a:	2b03      	cmp	r3, #3
 801ba8c:	d024      	beq.n	801bad8 <__gethex+0x2a8>
 801ba8e:	2b01      	cmp	r3, #1
 801ba90:	d115      	bne.n	801babe <__gethex+0x28e>
 801ba92:	42ae      	cmp	r6, r5
 801ba94:	d113      	bne.n	801babe <__gethex+0x28e>
 801ba96:	2e01      	cmp	r6, #1
 801ba98:	d10b      	bne.n	801bab2 <__gethex+0x282>
 801ba9a:	9a02      	ldr	r2, [sp, #8]
 801ba9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801baa0:	6013      	str	r3, [r2, #0]
 801baa2:	2301      	movs	r3, #1
 801baa4:	6123      	str	r3, [r4, #16]
 801baa6:	f8ca 3000 	str.w	r3, [sl]
 801baaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801baac:	2562      	movs	r5, #98	@ 0x62
 801baae:	601c      	str	r4, [r3, #0]
 801bab0:	e73a      	b.n	801b928 <__gethex+0xf8>
 801bab2:	1e71      	subs	r1, r6, #1
 801bab4:	4620      	mov	r0, r4
 801bab6:	f000 fee3 	bl	801c880 <__any_on>
 801baba:	2800      	cmp	r0, #0
 801babc:	d1ed      	bne.n	801ba9a <__gethex+0x26a>
 801babe:	9801      	ldr	r0, [sp, #4]
 801bac0:	4621      	mov	r1, r4
 801bac2:	f000 fa8f 	bl	801bfe4 <_Bfree>
 801bac6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bac8:	2300      	movs	r3, #0
 801baca:	6013      	str	r3, [r2, #0]
 801bacc:	2550      	movs	r5, #80	@ 0x50
 801bace:	e72b      	b.n	801b928 <__gethex+0xf8>
 801bad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d1f3      	bne.n	801babe <__gethex+0x28e>
 801bad6:	e7e0      	b.n	801ba9a <__gethex+0x26a>
 801bad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bada:	2b00      	cmp	r3, #0
 801badc:	d1dd      	bne.n	801ba9a <__gethex+0x26a>
 801bade:	e7ee      	b.n	801babe <__gethex+0x28e>
 801bae0:	0801ee3c 	.word	0x0801ee3c
 801bae4:	0801f049 	.word	0x0801f049
 801bae8:	0801f05a 	.word	0x0801f05a
 801baec:	1e6f      	subs	r7, r5, #1
 801baee:	f1b9 0f00 	cmp.w	r9, #0
 801baf2:	d130      	bne.n	801bb56 <__gethex+0x326>
 801baf4:	b127      	cbz	r7, 801bb00 <__gethex+0x2d0>
 801baf6:	4639      	mov	r1, r7
 801baf8:	4620      	mov	r0, r4
 801bafa:	f000 fec1 	bl	801c880 <__any_on>
 801bafe:	4681      	mov	r9, r0
 801bb00:	117a      	asrs	r2, r7, #5
 801bb02:	2301      	movs	r3, #1
 801bb04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801bb08:	f007 071f 	and.w	r7, r7, #31
 801bb0c:	40bb      	lsls	r3, r7
 801bb0e:	4213      	tst	r3, r2
 801bb10:	4629      	mov	r1, r5
 801bb12:	4620      	mov	r0, r4
 801bb14:	bf18      	it	ne
 801bb16:	f049 0902 	orrne.w	r9, r9, #2
 801bb1a:	f7ff fe21 	bl	801b760 <rshift>
 801bb1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801bb22:	1b76      	subs	r6, r6, r5
 801bb24:	2502      	movs	r5, #2
 801bb26:	f1b9 0f00 	cmp.w	r9, #0
 801bb2a:	d047      	beq.n	801bbbc <__gethex+0x38c>
 801bb2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bb30:	2b02      	cmp	r3, #2
 801bb32:	d015      	beq.n	801bb60 <__gethex+0x330>
 801bb34:	2b03      	cmp	r3, #3
 801bb36:	d017      	beq.n	801bb68 <__gethex+0x338>
 801bb38:	2b01      	cmp	r3, #1
 801bb3a:	d109      	bne.n	801bb50 <__gethex+0x320>
 801bb3c:	f019 0f02 	tst.w	r9, #2
 801bb40:	d006      	beq.n	801bb50 <__gethex+0x320>
 801bb42:	f8da 3000 	ldr.w	r3, [sl]
 801bb46:	ea49 0903 	orr.w	r9, r9, r3
 801bb4a:	f019 0f01 	tst.w	r9, #1
 801bb4e:	d10e      	bne.n	801bb6e <__gethex+0x33e>
 801bb50:	f045 0510 	orr.w	r5, r5, #16
 801bb54:	e032      	b.n	801bbbc <__gethex+0x38c>
 801bb56:	f04f 0901 	mov.w	r9, #1
 801bb5a:	e7d1      	b.n	801bb00 <__gethex+0x2d0>
 801bb5c:	2501      	movs	r5, #1
 801bb5e:	e7e2      	b.n	801bb26 <__gethex+0x2f6>
 801bb60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb62:	f1c3 0301 	rsb	r3, r3, #1
 801bb66:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bb68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d0f0      	beq.n	801bb50 <__gethex+0x320>
 801bb6e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bb72:	f104 0314 	add.w	r3, r4, #20
 801bb76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801bb7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bb7e:	f04f 0c00 	mov.w	ip, #0
 801bb82:	4618      	mov	r0, r3
 801bb84:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb88:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bb8c:	d01b      	beq.n	801bbc6 <__gethex+0x396>
 801bb8e:	3201      	adds	r2, #1
 801bb90:	6002      	str	r2, [r0, #0]
 801bb92:	2d02      	cmp	r5, #2
 801bb94:	f104 0314 	add.w	r3, r4, #20
 801bb98:	d13c      	bne.n	801bc14 <__gethex+0x3e4>
 801bb9a:	f8d8 2000 	ldr.w	r2, [r8]
 801bb9e:	3a01      	subs	r2, #1
 801bba0:	42b2      	cmp	r2, r6
 801bba2:	d109      	bne.n	801bbb8 <__gethex+0x388>
 801bba4:	1171      	asrs	r1, r6, #5
 801bba6:	2201      	movs	r2, #1
 801bba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bbac:	f006 061f 	and.w	r6, r6, #31
 801bbb0:	fa02 f606 	lsl.w	r6, r2, r6
 801bbb4:	421e      	tst	r6, r3
 801bbb6:	d13a      	bne.n	801bc2e <__gethex+0x3fe>
 801bbb8:	f045 0520 	orr.w	r5, r5, #32
 801bbbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bbbe:	601c      	str	r4, [r3, #0]
 801bbc0:	9b02      	ldr	r3, [sp, #8]
 801bbc2:	601f      	str	r7, [r3, #0]
 801bbc4:	e6b0      	b.n	801b928 <__gethex+0xf8>
 801bbc6:	4299      	cmp	r1, r3
 801bbc8:	f843 cc04 	str.w	ip, [r3, #-4]
 801bbcc:	d8d9      	bhi.n	801bb82 <__gethex+0x352>
 801bbce:	68a3      	ldr	r3, [r4, #8]
 801bbd0:	459b      	cmp	fp, r3
 801bbd2:	db17      	blt.n	801bc04 <__gethex+0x3d4>
 801bbd4:	6861      	ldr	r1, [r4, #4]
 801bbd6:	9801      	ldr	r0, [sp, #4]
 801bbd8:	3101      	adds	r1, #1
 801bbda:	f000 f9c3 	bl	801bf64 <_Balloc>
 801bbde:	4681      	mov	r9, r0
 801bbe0:	b918      	cbnz	r0, 801bbea <__gethex+0x3ba>
 801bbe2:	4b1a      	ldr	r3, [pc, #104]	@ (801bc4c <__gethex+0x41c>)
 801bbe4:	4602      	mov	r2, r0
 801bbe6:	2184      	movs	r1, #132	@ 0x84
 801bbe8:	e6c5      	b.n	801b976 <__gethex+0x146>
 801bbea:	6922      	ldr	r2, [r4, #16]
 801bbec:	3202      	adds	r2, #2
 801bbee:	f104 010c 	add.w	r1, r4, #12
 801bbf2:	0092      	lsls	r2, r2, #2
 801bbf4:	300c      	adds	r0, #12
 801bbf6:	f7fe ff72 	bl	801aade <memcpy>
 801bbfa:	4621      	mov	r1, r4
 801bbfc:	9801      	ldr	r0, [sp, #4]
 801bbfe:	f000 f9f1 	bl	801bfe4 <_Bfree>
 801bc02:	464c      	mov	r4, r9
 801bc04:	6923      	ldr	r3, [r4, #16]
 801bc06:	1c5a      	adds	r2, r3, #1
 801bc08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bc0c:	6122      	str	r2, [r4, #16]
 801bc0e:	2201      	movs	r2, #1
 801bc10:	615a      	str	r2, [r3, #20]
 801bc12:	e7be      	b.n	801bb92 <__gethex+0x362>
 801bc14:	6922      	ldr	r2, [r4, #16]
 801bc16:	455a      	cmp	r2, fp
 801bc18:	dd0b      	ble.n	801bc32 <__gethex+0x402>
 801bc1a:	2101      	movs	r1, #1
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	f7ff fd9f 	bl	801b760 <rshift>
 801bc22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bc26:	3701      	adds	r7, #1
 801bc28:	42bb      	cmp	r3, r7
 801bc2a:	f6ff aee0 	blt.w	801b9ee <__gethex+0x1be>
 801bc2e:	2501      	movs	r5, #1
 801bc30:	e7c2      	b.n	801bbb8 <__gethex+0x388>
 801bc32:	f016 061f 	ands.w	r6, r6, #31
 801bc36:	d0fa      	beq.n	801bc2e <__gethex+0x3fe>
 801bc38:	4453      	add	r3, sl
 801bc3a:	f1c6 0620 	rsb	r6, r6, #32
 801bc3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801bc42:	f000 fa81 	bl	801c148 <__hi0bits>
 801bc46:	42b0      	cmp	r0, r6
 801bc48:	dbe7      	blt.n	801bc1a <__gethex+0x3ea>
 801bc4a:	e7f0      	b.n	801bc2e <__gethex+0x3fe>
 801bc4c:	0801f049 	.word	0x0801f049

0801bc50 <L_shift>:
 801bc50:	f1c2 0208 	rsb	r2, r2, #8
 801bc54:	0092      	lsls	r2, r2, #2
 801bc56:	b570      	push	{r4, r5, r6, lr}
 801bc58:	f1c2 0620 	rsb	r6, r2, #32
 801bc5c:	6843      	ldr	r3, [r0, #4]
 801bc5e:	6804      	ldr	r4, [r0, #0]
 801bc60:	fa03 f506 	lsl.w	r5, r3, r6
 801bc64:	432c      	orrs	r4, r5
 801bc66:	40d3      	lsrs	r3, r2
 801bc68:	6004      	str	r4, [r0, #0]
 801bc6a:	f840 3f04 	str.w	r3, [r0, #4]!
 801bc6e:	4288      	cmp	r0, r1
 801bc70:	d3f4      	bcc.n	801bc5c <L_shift+0xc>
 801bc72:	bd70      	pop	{r4, r5, r6, pc}

0801bc74 <__match>:
 801bc74:	b530      	push	{r4, r5, lr}
 801bc76:	6803      	ldr	r3, [r0, #0]
 801bc78:	3301      	adds	r3, #1
 801bc7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc7e:	b914      	cbnz	r4, 801bc86 <__match+0x12>
 801bc80:	6003      	str	r3, [r0, #0]
 801bc82:	2001      	movs	r0, #1
 801bc84:	bd30      	pop	{r4, r5, pc}
 801bc86:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801bc8e:	2d19      	cmp	r5, #25
 801bc90:	bf98      	it	ls
 801bc92:	3220      	addls	r2, #32
 801bc94:	42a2      	cmp	r2, r4
 801bc96:	d0f0      	beq.n	801bc7a <__match+0x6>
 801bc98:	2000      	movs	r0, #0
 801bc9a:	e7f3      	b.n	801bc84 <__match+0x10>

0801bc9c <__hexnan>:
 801bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca0:	680b      	ldr	r3, [r1, #0]
 801bca2:	6801      	ldr	r1, [r0, #0]
 801bca4:	115e      	asrs	r6, r3, #5
 801bca6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bcaa:	f013 031f 	ands.w	r3, r3, #31
 801bcae:	b087      	sub	sp, #28
 801bcb0:	bf18      	it	ne
 801bcb2:	3604      	addne	r6, #4
 801bcb4:	2500      	movs	r5, #0
 801bcb6:	1f37      	subs	r7, r6, #4
 801bcb8:	4682      	mov	sl, r0
 801bcba:	4690      	mov	r8, r2
 801bcbc:	9301      	str	r3, [sp, #4]
 801bcbe:	f846 5c04 	str.w	r5, [r6, #-4]
 801bcc2:	46b9      	mov	r9, r7
 801bcc4:	463c      	mov	r4, r7
 801bcc6:	9502      	str	r5, [sp, #8]
 801bcc8:	46ab      	mov	fp, r5
 801bcca:	784a      	ldrb	r2, [r1, #1]
 801bccc:	1c4b      	adds	r3, r1, #1
 801bcce:	9303      	str	r3, [sp, #12]
 801bcd0:	b342      	cbz	r2, 801bd24 <__hexnan+0x88>
 801bcd2:	4610      	mov	r0, r2
 801bcd4:	9105      	str	r1, [sp, #20]
 801bcd6:	9204      	str	r2, [sp, #16]
 801bcd8:	f7ff fd94 	bl	801b804 <__hexdig_fun>
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	d151      	bne.n	801bd84 <__hexnan+0xe8>
 801bce0:	9a04      	ldr	r2, [sp, #16]
 801bce2:	9905      	ldr	r1, [sp, #20]
 801bce4:	2a20      	cmp	r2, #32
 801bce6:	d818      	bhi.n	801bd1a <__hexnan+0x7e>
 801bce8:	9b02      	ldr	r3, [sp, #8]
 801bcea:	459b      	cmp	fp, r3
 801bcec:	dd13      	ble.n	801bd16 <__hexnan+0x7a>
 801bcee:	454c      	cmp	r4, r9
 801bcf0:	d206      	bcs.n	801bd00 <__hexnan+0x64>
 801bcf2:	2d07      	cmp	r5, #7
 801bcf4:	dc04      	bgt.n	801bd00 <__hexnan+0x64>
 801bcf6:	462a      	mov	r2, r5
 801bcf8:	4649      	mov	r1, r9
 801bcfa:	4620      	mov	r0, r4
 801bcfc:	f7ff ffa8 	bl	801bc50 <L_shift>
 801bd00:	4544      	cmp	r4, r8
 801bd02:	d952      	bls.n	801bdaa <__hexnan+0x10e>
 801bd04:	2300      	movs	r3, #0
 801bd06:	f1a4 0904 	sub.w	r9, r4, #4
 801bd0a:	f844 3c04 	str.w	r3, [r4, #-4]
 801bd0e:	f8cd b008 	str.w	fp, [sp, #8]
 801bd12:	464c      	mov	r4, r9
 801bd14:	461d      	mov	r5, r3
 801bd16:	9903      	ldr	r1, [sp, #12]
 801bd18:	e7d7      	b.n	801bcca <__hexnan+0x2e>
 801bd1a:	2a29      	cmp	r2, #41	@ 0x29
 801bd1c:	d157      	bne.n	801bdce <__hexnan+0x132>
 801bd1e:	3102      	adds	r1, #2
 801bd20:	f8ca 1000 	str.w	r1, [sl]
 801bd24:	f1bb 0f00 	cmp.w	fp, #0
 801bd28:	d051      	beq.n	801bdce <__hexnan+0x132>
 801bd2a:	454c      	cmp	r4, r9
 801bd2c:	d206      	bcs.n	801bd3c <__hexnan+0xa0>
 801bd2e:	2d07      	cmp	r5, #7
 801bd30:	dc04      	bgt.n	801bd3c <__hexnan+0xa0>
 801bd32:	462a      	mov	r2, r5
 801bd34:	4649      	mov	r1, r9
 801bd36:	4620      	mov	r0, r4
 801bd38:	f7ff ff8a 	bl	801bc50 <L_shift>
 801bd3c:	4544      	cmp	r4, r8
 801bd3e:	d936      	bls.n	801bdae <__hexnan+0x112>
 801bd40:	f1a8 0204 	sub.w	r2, r8, #4
 801bd44:	4623      	mov	r3, r4
 801bd46:	f853 1b04 	ldr.w	r1, [r3], #4
 801bd4a:	f842 1f04 	str.w	r1, [r2, #4]!
 801bd4e:	429f      	cmp	r7, r3
 801bd50:	d2f9      	bcs.n	801bd46 <__hexnan+0xaa>
 801bd52:	1b3b      	subs	r3, r7, r4
 801bd54:	f023 0303 	bic.w	r3, r3, #3
 801bd58:	3304      	adds	r3, #4
 801bd5a:	3401      	adds	r4, #1
 801bd5c:	3e03      	subs	r6, #3
 801bd5e:	42b4      	cmp	r4, r6
 801bd60:	bf88      	it	hi
 801bd62:	2304      	movhi	r3, #4
 801bd64:	4443      	add	r3, r8
 801bd66:	2200      	movs	r2, #0
 801bd68:	f843 2b04 	str.w	r2, [r3], #4
 801bd6c:	429f      	cmp	r7, r3
 801bd6e:	d2fb      	bcs.n	801bd68 <__hexnan+0xcc>
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	b91b      	cbnz	r3, 801bd7c <__hexnan+0xe0>
 801bd74:	4547      	cmp	r7, r8
 801bd76:	d128      	bne.n	801bdca <__hexnan+0x12e>
 801bd78:	2301      	movs	r3, #1
 801bd7a:	603b      	str	r3, [r7, #0]
 801bd7c:	2005      	movs	r0, #5
 801bd7e:	b007      	add	sp, #28
 801bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd84:	3501      	adds	r5, #1
 801bd86:	2d08      	cmp	r5, #8
 801bd88:	f10b 0b01 	add.w	fp, fp, #1
 801bd8c:	dd06      	ble.n	801bd9c <__hexnan+0x100>
 801bd8e:	4544      	cmp	r4, r8
 801bd90:	d9c1      	bls.n	801bd16 <__hexnan+0x7a>
 801bd92:	2300      	movs	r3, #0
 801bd94:	f844 3c04 	str.w	r3, [r4, #-4]
 801bd98:	2501      	movs	r5, #1
 801bd9a:	3c04      	subs	r4, #4
 801bd9c:	6822      	ldr	r2, [r4, #0]
 801bd9e:	f000 000f 	and.w	r0, r0, #15
 801bda2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bda6:	6020      	str	r0, [r4, #0]
 801bda8:	e7b5      	b.n	801bd16 <__hexnan+0x7a>
 801bdaa:	2508      	movs	r5, #8
 801bdac:	e7b3      	b.n	801bd16 <__hexnan+0x7a>
 801bdae:	9b01      	ldr	r3, [sp, #4]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d0dd      	beq.n	801bd70 <__hexnan+0xd4>
 801bdb4:	f1c3 0320 	rsb	r3, r3, #32
 801bdb8:	f04f 32ff 	mov.w	r2, #4294967295
 801bdbc:	40da      	lsrs	r2, r3
 801bdbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bdc2:	4013      	ands	r3, r2
 801bdc4:	f846 3c04 	str.w	r3, [r6, #-4]
 801bdc8:	e7d2      	b.n	801bd70 <__hexnan+0xd4>
 801bdca:	3f04      	subs	r7, #4
 801bdcc:	e7d0      	b.n	801bd70 <__hexnan+0xd4>
 801bdce:	2004      	movs	r0, #4
 801bdd0:	e7d5      	b.n	801bd7e <__hexnan+0xe2>
	...

0801bdd4 <malloc>:
 801bdd4:	4b02      	ldr	r3, [pc, #8]	@ (801bde0 <malloc+0xc>)
 801bdd6:	4601      	mov	r1, r0
 801bdd8:	6818      	ldr	r0, [r3, #0]
 801bdda:	f000 b825 	b.w	801be28 <_malloc_r>
 801bdde:	bf00      	nop
 801bde0:	240002ac 	.word	0x240002ac

0801bde4 <sbrk_aligned>:
 801bde4:	b570      	push	{r4, r5, r6, lr}
 801bde6:	4e0f      	ldr	r6, [pc, #60]	@ (801be24 <sbrk_aligned+0x40>)
 801bde8:	460c      	mov	r4, r1
 801bdea:	6831      	ldr	r1, [r6, #0]
 801bdec:	4605      	mov	r5, r0
 801bdee:	b911      	cbnz	r1, 801bdf6 <sbrk_aligned+0x12>
 801bdf0:	f000 ff92 	bl	801cd18 <_sbrk_r>
 801bdf4:	6030      	str	r0, [r6, #0]
 801bdf6:	4621      	mov	r1, r4
 801bdf8:	4628      	mov	r0, r5
 801bdfa:	f000 ff8d 	bl	801cd18 <_sbrk_r>
 801bdfe:	1c43      	adds	r3, r0, #1
 801be00:	d103      	bne.n	801be0a <sbrk_aligned+0x26>
 801be02:	f04f 34ff 	mov.w	r4, #4294967295
 801be06:	4620      	mov	r0, r4
 801be08:	bd70      	pop	{r4, r5, r6, pc}
 801be0a:	1cc4      	adds	r4, r0, #3
 801be0c:	f024 0403 	bic.w	r4, r4, #3
 801be10:	42a0      	cmp	r0, r4
 801be12:	d0f8      	beq.n	801be06 <sbrk_aligned+0x22>
 801be14:	1a21      	subs	r1, r4, r0
 801be16:	4628      	mov	r0, r5
 801be18:	f000 ff7e 	bl	801cd18 <_sbrk_r>
 801be1c:	3001      	adds	r0, #1
 801be1e:	d1f2      	bne.n	801be06 <sbrk_aligned+0x22>
 801be20:	e7ef      	b.n	801be02 <sbrk_aligned+0x1e>
 801be22:	bf00      	nop
 801be24:	2401da38 	.word	0x2401da38

0801be28 <_malloc_r>:
 801be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be2c:	1ccd      	adds	r5, r1, #3
 801be2e:	f025 0503 	bic.w	r5, r5, #3
 801be32:	3508      	adds	r5, #8
 801be34:	2d0c      	cmp	r5, #12
 801be36:	bf38      	it	cc
 801be38:	250c      	movcc	r5, #12
 801be3a:	2d00      	cmp	r5, #0
 801be3c:	4606      	mov	r6, r0
 801be3e:	db01      	blt.n	801be44 <_malloc_r+0x1c>
 801be40:	42a9      	cmp	r1, r5
 801be42:	d904      	bls.n	801be4e <_malloc_r+0x26>
 801be44:	230c      	movs	r3, #12
 801be46:	6033      	str	r3, [r6, #0]
 801be48:	2000      	movs	r0, #0
 801be4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bf24 <_malloc_r+0xfc>
 801be52:	f000 f87b 	bl	801bf4c <__malloc_lock>
 801be56:	f8d8 3000 	ldr.w	r3, [r8]
 801be5a:	461c      	mov	r4, r3
 801be5c:	bb44      	cbnz	r4, 801beb0 <_malloc_r+0x88>
 801be5e:	4629      	mov	r1, r5
 801be60:	4630      	mov	r0, r6
 801be62:	f7ff ffbf 	bl	801bde4 <sbrk_aligned>
 801be66:	1c43      	adds	r3, r0, #1
 801be68:	4604      	mov	r4, r0
 801be6a:	d158      	bne.n	801bf1e <_malloc_r+0xf6>
 801be6c:	f8d8 4000 	ldr.w	r4, [r8]
 801be70:	4627      	mov	r7, r4
 801be72:	2f00      	cmp	r7, #0
 801be74:	d143      	bne.n	801befe <_malloc_r+0xd6>
 801be76:	2c00      	cmp	r4, #0
 801be78:	d04b      	beq.n	801bf12 <_malloc_r+0xea>
 801be7a:	6823      	ldr	r3, [r4, #0]
 801be7c:	4639      	mov	r1, r7
 801be7e:	4630      	mov	r0, r6
 801be80:	eb04 0903 	add.w	r9, r4, r3
 801be84:	f000 ff48 	bl	801cd18 <_sbrk_r>
 801be88:	4581      	cmp	r9, r0
 801be8a:	d142      	bne.n	801bf12 <_malloc_r+0xea>
 801be8c:	6821      	ldr	r1, [r4, #0]
 801be8e:	1a6d      	subs	r5, r5, r1
 801be90:	4629      	mov	r1, r5
 801be92:	4630      	mov	r0, r6
 801be94:	f7ff ffa6 	bl	801bde4 <sbrk_aligned>
 801be98:	3001      	adds	r0, #1
 801be9a:	d03a      	beq.n	801bf12 <_malloc_r+0xea>
 801be9c:	6823      	ldr	r3, [r4, #0]
 801be9e:	442b      	add	r3, r5
 801bea0:	6023      	str	r3, [r4, #0]
 801bea2:	f8d8 3000 	ldr.w	r3, [r8]
 801bea6:	685a      	ldr	r2, [r3, #4]
 801bea8:	bb62      	cbnz	r2, 801bf04 <_malloc_r+0xdc>
 801beaa:	f8c8 7000 	str.w	r7, [r8]
 801beae:	e00f      	b.n	801bed0 <_malloc_r+0xa8>
 801beb0:	6822      	ldr	r2, [r4, #0]
 801beb2:	1b52      	subs	r2, r2, r5
 801beb4:	d420      	bmi.n	801bef8 <_malloc_r+0xd0>
 801beb6:	2a0b      	cmp	r2, #11
 801beb8:	d917      	bls.n	801beea <_malloc_r+0xc2>
 801beba:	1961      	adds	r1, r4, r5
 801bebc:	42a3      	cmp	r3, r4
 801bebe:	6025      	str	r5, [r4, #0]
 801bec0:	bf18      	it	ne
 801bec2:	6059      	strne	r1, [r3, #4]
 801bec4:	6863      	ldr	r3, [r4, #4]
 801bec6:	bf08      	it	eq
 801bec8:	f8c8 1000 	streq.w	r1, [r8]
 801becc:	5162      	str	r2, [r4, r5]
 801bece:	604b      	str	r3, [r1, #4]
 801bed0:	4630      	mov	r0, r6
 801bed2:	f000 f841 	bl	801bf58 <__malloc_unlock>
 801bed6:	f104 000b 	add.w	r0, r4, #11
 801beda:	1d23      	adds	r3, r4, #4
 801bedc:	f020 0007 	bic.w	r0, r0, #7
 801bee0:	1ac2      	subs	r2, r0, r3
 801bee2:	bf1c      	itt	ne
 801bee4:	1a1b      	subne	r3, r3, r0
 801bee6:	50a3      	strne	r3, [r4, r2]
 801bee8:	e7af      	b.n	801be4a <_malloc_r+0x22>
 801beea:	6862      	ldr	r2, [r4, #4]
 801beec:	42a3      	cmp	r3, r4
 801beee:	bf0c      	ite	eq
 801bef0:	f8c8 2000 	streq.w	r2, [r8]
 801bef4:	605a      	strne	r2, [r3, #4]
 801bef6:	e7eb      	b.n	801bed0 <_malloc_r+0xa8>
 801bef8:	4623      	mov	r3, r4
 801befa:	6864      	ldr	r4, [r4, #4]
 801befc:	e7ae      	b.n	801be5c <_malloc_r+0x34>
 801befe:	463c      	mov	r4, r7
 801bf00:	687f      	ldr	r7, [r7, #4]
 801bf02:	e7b6      	b.n	801be72 <_malloc_r+0x4a>
 801bf04:	461a      	mov	r2, r3
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	42a3      	cmp	r3, r4
 801bf0a:	d1fb      	bne.n	801bf04 <_malloc_r+0xdc>
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	6053      	str	r3, [r2, #4]
 801bf10:	e7de      	b.n	801bed0 <_malloc_r+0xa8>
 801bf12:	230c      	movs	r3, #12
 801bf14:	6033      	str	r3, [r6, #0]
 801bf16:	4630      	mov	r0, r6
 801bf18:	f000 f81e 	bl	801bf58 <__malloc_unlock>
 801bf1c:	e794      	b.n	801be48 <_malloc_r+0x20>
 801bf1e:	6005      	str	r5, [r0, #0]
 801bf20:	e7d6      	b.n	801bed0 <_malloc_r+0xa8>
 801bf22:	bf00      	nop
 801bf24:	2401da3c 	.word	0x2401da3c

0801bf28 <__ascii_mbtowc>:
 801bf28:	b082      	sub	sp, #8
 801bf2a:	b901      	cbnz	r1, 801bf2e <__ascii_mbtowc+0x6>
 801bf2c:	a901      	add	r1, sp, #4
 801bf2e:	b142      	cbz	r2, 801bf42 <__ascii_mbtowc+0x1a>
 801bf30:	b14b      	cbz	r3, 801bf46 <__ascii_mbtowc+0x1e>
 801bf32:	7813      	ldrb	r3, [r2, #0]
 801bf34:	600b      	str	r3, [r1, #0]
 801bf36:	7812      	ldrb	r2, [r2, #0]
 801bf38:	1e10      	subs	r0, r2, #0
 801bf3a:	bf18      	it	ne
 801bf3c:	2001      	movne	r0, #1
 801bf3e:	b002      	add	sp, #8
 801bf40:	4770      	bx	lr
 801bf42:	4610      	mov	r0, r2
 801bf44:	e7fb      	b.n	801bf3e <__ascii_mbtowc+0x16>
 801bf46:	f06f 0001 	mvn.w	r0, #1
 801bf4a:	e7f8      	b.n	801bf3e <__ascii_mbtowc+0x16>

0801bf4c <__malloc_lock>:
 801bf4c:	4801      	ldr	r0, [pc, #4]	@ (801bf54 <__malloc_lock+0x8>)
 801bf4e:	f7fe bdc4 	b.w	801aada <__retarget_lock_acquire_recursive>
 801bf52:	bf00      	nop
 801bf54:	2401da34 	.word	0x2401da34

0801bf58 <__malloc_unlock>:
 801bf58:	4801      	ldr	r0, [pc, #4]	@ (801bf60 <__malloc_unlock+0x8>)
 801bf5a:	f7fe bdbf 	b.w	801aadc <__retarget_lock_release_recursive>
 801bf5e:	bf00      	nop
 801bf60:	2401da34 	.word	0x2401da34

0801bf64 <_Balloc>:
 801bf64:	b570      	push	{r4, r5, r6, lr}
 801bf66:	69c6      	ldr	r6, [r0, #28]
 801bf68:	4604      	mov	r4, r0
 801bf6a:	460d      	mov	r5, r1
 801bf6c:	b976      	cbnz	r6, 801bf8c <_Balloc+0x28>
 801bf6e:	2010      	movs	r0, #16
 801bf70:	f7ff ff30 	bl	801bdd4 <malloc>
 801bf74:	4602      	mov	r2, r0
 801bf76:	61e0      	str	r0, [r4, #28]
 801bf78:	b920      	cbnz	r0, 801bf84 <_Balloc+0x20>
 801bf7a:	4b18      	ldr	r3, [pc, #96]	@ (801bfdc <_Balloc+0x78>)
 801bf7c:	4818      	ldr	r0, [pc, #96]	@ (801bfe0 <_Balloc+0x7c>)
 801bf7e:	216b      	movs	r1, #107	@ 0x6b
 801bf80:	f000 feda 	bl	801cd38 <__assert_func>
 801bf84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bf88:	6006      	str	r6, [r0, #0]
 801bf8a:	60c6      	str	r6, [r0, #12]
 801bf8c:	69e6      	ldr	r6, [r4, #28]
 801bf8e:	68f3      	ldr	r3, [r6, #12]
 801bf90:	b183      	cbz	r3, 801bfb4 <_Balloc+0x50>
 801bf92:	69e3      	ldr	r3, [r4, #28]
 801bf94:	68db      	ldr	r3, [r3, #12]
 801bf96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bf9a:	b9b8      	cbnz	r0, 801bfcc <_Balloc+0x68>
 801bf9c:	2101      	movs	r1, #1
 801bf9e:	fa01 f605 	lsl.w	r6, r1, r5
 801bfa2:	1d72      	adds	r2, r6, #5
 801bfa4:	0092      	lsls	r2, r2, #2
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	f000 fee4 	bl	801cd74 <_calloc_r>
 801bfac:	b160      	cbz	r0, 801bfc8 <_Balloc+0x64>
 801bfae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bfb2:	e00e      	b.n	801bfd2 <_Balloc+0x6e>
 801bfb4:	2221      	movs	r2, #33	@ 0x21
 801bfb6:	2104      	movs	r1, #4
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f000 fedb 	bl	801cd74 <_calloc_r>
 801bfbe:	69e3      	ldr	r3, [r4, #28]
 801bfc0:	60f0      	str	r0, [r6, #12]
 801bfc2:	68db      	ldr	r3, [r3, #12]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d1e4      	bne.n	801bf92 <_Balloc+0x2e>
 801bfc8:	2000      	movs	r0, #0
 801bfca:	bd70      	pop	{r4, r5, r6, pc}
 801bfcc:	6802      	ldr	r2, [r0, #0]
 801bfce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bfd8:	e7f7      	b.n	801bfca <_Balloc+0x66>
 801bfda:	bf00      	nop
 801bfdc:	0801efda 	.word	0x0801efda
 801bfe0:	0801f0ba 	.word	0x0801f0ba

0801bfe4 <_Bfree>:
 801bfe4:	b570      	push	{r4, r5, r6, lr}
 801bfe6:	69c6      	ldr	r6, [r0, #28]
 801bfe8:	4605      	mov	r5, r0
 801bfea:	460c      	mov	r4, r1
 801bfec:	b976      	cbnz	r6, 801c00c <_Bfree+0x28>
 801bfee:	2010      	movs	r0, #16
 801bff0:	f7ff fef0 	bl	801bdd4 <malloc>
 801bff4:	4602      	mov	r2, r0
 801bff6:	61e8      	str	r0, [r5, #28]
 801bff8:	b920      	cbnz	r0, 801c004 <_Bfree+0x20>
 801bffa:	4b09      	ldr	r3, [pc, #36]	@ (801c020 <_Bfree+0x3c>)
 801bffc:	4809      	ldr	r0, [pc, #36]	@ (801c024 <_Bfree+0x40>)
 801bffe:	218f      	movs	r1, #143	@ 0x8f
 801c000:	f000 fe9a 	bl	801cd38 <__assert_func>
 801c004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c008:	6006      	str	r6, [r0, #0]
 801c00a:	60c6      	str	r6, [r0, #12]
 801c00c:	b13c      	cbz	r4, 801c01e <_Bfree+0x3a>
 801c00e:	69eb      	ldr	r3, [r5, #28]
 801c010:	6862      	ldr	r2, [r4, #4]
 801c012:	68db      	ldr	r3, [r3, #12]
 801c014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c018:	6021      	str	r1, [r4, #0]
 801c01a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c01e:	bd70      	pop	{r4, r5, r6, pc}
 801c020:	0801efda 	.word	0x0801efda
 801c024:	0801f0ba 	.word	0x0801f0ba

0801c028 <__multadd>:
 801c028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c02c:	690d      	ldr	r5, [r1, #16]
 801c02e:	4607      	mov	r7, r0
 801c030:	460c      	mov	r4, r1
 801c032:	461e      	mov	r6, r3
 801c034:	f101 0c14 	add.w	ip, r1, #20
 801c038:	2000      	movs	r0, #0
 801c03a:	f8dc 3000 	ldr.w	r3, [ip]
 801c03e:	b299      	uxth	r1, r3
 801c040:	fb02 6101 	mla	r1, r2, r1, r6
 801c044:	0c1e      	lsrs	r6, r3, #16
 801c046:	0c0b      	lsrs	r3, r1, #16
 801c048:	fb02 3306 	mla	r3, r2, r6, r3
 801c04c:	b289      	uxth	r1, r1
 801c04e:	3001      	adds	r0, #1
 801c050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c054:	4285      	cmp	r5, r0
 801c056:	f84c 1b04 	str.w	r1, [ip], #4
 801c05a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c05e:	dcec      	bgt.n	801c03a <__multadd+0x12>
 801c060:	b30e      	cbz	r6, 801c0a6 <__multadd+0x7e>
 801c062:	68a3      	ldr	r3, [r4, #8]
 801c064:	42ab      	cmp	r3, r5
 801c066:	dc19      	bgt.n	801c09c <__multadd+0x74>
 801c068:	6861      	ldr	r1, [r4, #4]
 801c06a:	4638      	mov	r0, r7
 801c06c:	3101      	adds	r1, #1
 801c06e:	f7ff ff79 	bl	801bf64 <_Balloc>
 801c072:	4680      	mov	r8, r0
 801c074:	b928      	cbnz	r0, 801c082 <__multadd+0x5a>
 801c076:	4602      	mov	r2, r0
 801c078:	4b0c      	ldr	r3, [pc, #48]	@ (801c0ac <__multadd+0x84>)
 801c07a:	480d      	ldr	r0, [pc, #52]	@ (801c0b0 <__multadd+0x88>)
 801c07c:	21ba      	movs	r1, #186	@ 0xba
 801c07e:	f000 fe5b 	bl	801cd38 <__assert_func>
 801c082:	6922      	ldr	r2, [r4, #16]
 801c084:	3202      	adds	r2, #2
 801c086:	f104 010c 	add.w	r1, r4, #12
 801c08a:	0092      	lsls	r2, r2, #2
 801c08c:	300c      	adds	r0, #12
 801c08e:	f7fe fd26 	bl	801aade <memcpy>
 801c092:	4621      	mov	r1, r4
 801c094:	4638      	mov	r0, r7
 801c096:	f7ff ffa5 	bl	801bfe4 <_Bfree>
 801c09a:	4644      	mov	r4, r8
 801c09c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c0a0:	3501      	adds	r5, #1
 801c0a2:	615e      	str	r6, [r3, #20]
 801c0a4:	6125      	str	r5, [r4, #16]
 801c0a6:	4620      	mov	r0, r4
 801c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0ac:	0801f049 	.word	0x0801f049
 801c0b0:	0801f0ba 	.word	0x0801f0ba

0801c0b4 <__s2b>:
 801c0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0b8:	460c      	mov	r4, r1
 801c0ba:	4615      	mov	r5, r2
 801c0bc:	461f      	mov	r7, r3
 801c0be:	2209      	movs	r2, #9
 801c0c0:	3308      	adds	r3, #8
 801c0c2:	4606      	mov	r6, r0
 801c0c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c0c8:	2100      	movs	r1, #0
 801c0ca:	2201      	movs	r2, #1
 801c0cc:	429a      	cmp	r2, r3
 801c0ce:	db09      	blt.n	801c0e4 <__s2b+0x30>
 801c0d0:	4630      	mov	r0, r6
 801c0d2:	f7ff ff47 	bl	801bf64 <_Balloc>
 801c0d6:	b940      	cbnz	r0, 801c0ea <__s2b+0x36>
 801c0d8:	4602      	mov	r2, r0
 801c0da:	4b19      	ldr	r3, [pc, #100]	@ (801c140 <__s2b+0x8c>)
 801c0dc:	4819      	ldr	r0, [pc, #100]	@ (801c144 <__s2b+0x90>)
 801c0de:	21d3      	movs	r1, #211	@ 0xd3
 801c0e0:	f000 fe2a 	bl	801cd38 <__assert_func>
 801c0e4:	0052      	lsls	r2, r2, #1
 801c0e6:	3101      	adds	r1, #1
 801c0e8:	e7f0      	b.n	801c0cc <__s2b+0x18>
 801c0ea:	9b08      	ldr	r3, [sp, #32]
 801c0ec:	6143      	str	r3, [r0, #20]
 801c0ee:	2d09      	cmp	r5, #9
 801c0f0:	f04f 0301 	mov.w	r3, #1
 801c0f4:	6103      	str	r3, [r0, #16]
 801c0f6:	dd16      	ble.n	801c126 <__s2b+0x72>
 801c0f8:	f104 0909 	add.w	r9, r4, #9
 801c0fc:	46c8      	mov	r8, r9
 801c0fe:	442c      	add	r4, r5
 801c100:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c104:	4601      	mov	r1, r0
 801c106:	3b30      	subs	r3, #48	@ 0x30
 801c108:	220a      	movs	r2, #10
 801c10a:	4630      	mov	r0, r6
 801c10c:	f7ff ff8c 	bl	801c028 <__multadd>
 801c110:	45a0      	cmp	r8, r4
 801c112:	d1f5      	bne.n	801c100 <__s2b+0x4c>
 801c114:	f1a5 0408 	sub.w	r4, r5, #8
 801c118:	444c      	add	r4, r9
 801c11a:	1b2d      	subs	r5, r5, r4
 801c11c:	1963      	adds	r3, r4, r5
 801c11e:	42bb      	cmp	r3, r7
 801c120:	db04      	blt.n	801c12c <__s2b+0x78>
 801c122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c126:	340a      	adds	r4, #10
 801c128:	2509      	movs	r5, #9
 801c12a:	e7f6      	b.n	801c11a <__s2b+0x66>
 801c12c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c130:	4601      	mov	r1, r0
 801c132:	3b30      	subs	r3, #48	@ 0x30
 801c134:	220a      	movs	r2, #10
 801c136:	4630      	mov	r0, r6
 801c138:	f7ff ff76 	bl	801c028 <__multadd>
 801c13c:	e7ee      	b.n	801c11c <__s2b+0x68>
 801c13e:	bf00      	nop
 801c140:	0801f049 	.word	0x0801f049
 801c144:	0801f0ba 	.word	0x0801f0ba

0801c148 <__hi0bits>:
 801c148:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c14c:	4603      	mov	r3, r0
 801c14e:	bf36      	itet	cc
 801c150:	0403      	lslcc	r3, r0, #16
 801c152:	2000      	movcs	r0, #0
 801c154:	2010      	movcc	r0, #16
 801c156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c15a:	bf3c      	itt	cc
 801c15c:	021b      	lslcc	r3, r3, #8
 801c15e:	3008      	addcc	r0, #8
 801c160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c164:	bf3c      	itt	cc
 801c166:	011b      	lslcc	r3, r3, #4
 801c168:	3004      	addcc	r0, #4
 801c16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c16e:	bf3c      	itt	cc
 801c170:	009b      	lslcc	r3, r3, #2
 801c172:	3002      	addcc	r0, #2
 801c174:	2b00      	cmp	r3, #0
 801c176:	db05      	blt.n	801c184 <__hi0bits+0x3c>
 801c178:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c17c:	f100 0001 	add.w	r0, r0, #1
 801c180:	bf08      	it	eq
 801c182:	2020      	moveq	r0, #32
 801c184:	4770      	bx	lr

0801c186 <__lo0bits>:
 801c186:	6803      	ldr	r3, [r0, #0]
 801c188:	4602      	mov	r2, r0
 801c18a:	f013 0007 	ands.w	r0, r3, #7
 801c18e:	d00b      	beq.n	801c1a8 <__lo0bits+0x22>
 801c190:	07d9      	lsls	r1, r3, #31
 801c192:	d421      	bmi.n	801c1d8 <__lo0bits+0x52>
 801c194:	0798      	lsls	r0, r3, #30
 801c196:	bf49      	itett	mi
 801c198:	085b      	lsrmi	r3, r3, #1
 801c19a:	089b      	lsrpl	r3, r3, #2
 801c19c:	2001      	movmi	r0, #1
 801c19e:	6013      	strmi	r3, [r2, #0]
 801c1a0:	bf5c      	itt	pl
 801c1a2:	6013      	strpl	r3, [r2, #0]
 801c1a4:	2002      	movpl	r0, #2
 801c1a6:	4770      	bx	lr
 801c1a8:	b299      	uxth	r1, r3
 801c1aa:	b909      	cbnz	r1, 801c1b0 <__lo0bits+0x2a>
 801c1ac:	0c1b      	lsrs	r3, r3, #16
 801c1ae:	2010      	movs	r0, #16
 801c1b0:	b2d9      	uxtb	r1, r3
 801c1b2:	b909      	cbnz	r1, 801c1b8 <__lo0bits+0x32>
 801c1b4:	3008      	adds	r0, #8
 801c1b6:	0a1b      	lsrs	r3, r3, #8
 801c1b8:	0719      	lsls	r1, r3, #28
 801c1ba:	bf04      	itt	eq
 801c1bc:	091b      	lsreq	r3, r3, #4
 801c1be:	3004      	addeq	r0, #4
 801c1c0:	0799      	lsls	r1, r3, #30
 801c1c2:	bf04      	itt	eq
 801c1c4:	089b      	lsreq	r3, r3, #2
 801c1c6:	3002      	addeq	r0, #2
 801c1c8:	07d9      	lsls	r1, r3, #31
 801c1ca:	d403      	bmi.n	801c1d4 <__lo0bits+0x4e>
 801c1cc:	085b      	lsrs	r3, r3, #1
 801c1ce:	f100 0001 	add.w	r0, r0, #1
 801c1d2:	d003      	beq.n	801c1dc <__lo0bits+0x56>
 801c1d4:	6013      	str	r3, [r2, #0]
 801c1d6:	4770      	bx	lr
 801c1d8:	2000      	movs	r0, #0
 801c1da:	4770      	bx	lr
 801c1dc:	2020      	movs	r0, #32
 801c1de:	4770      	bx	lr

0801c1e0 <__i2b>:
 801c1e0:	b510      	push	{r4, lr}
 801c1e2:	460c      	mov	r4, r1
 801c1e4:	2101      	movs	r1, #1
 801c1e6:	f7ff febd 	bl	801bf64 <_Balloc>
 801c1ea:	4602      	mov	r2, r0
 801c1ec:	b928      	cbnz	r0, 801c1fa <__i2b+0x1a>
 801c1ee:	4b05      	ldr	r3, [pc, #20]	@ (801c204 <__i2b+0x24>)
 801c1f0:	4805      	ldr	r0, [pc, #20]	@ (801c208 <__i2b+0x28>)
 801c1f2:	f240 1145 	movw	r1, #325	@ 0x145
 801c1f6:	f000 fd9f 	bl	801cd38 <__assert_func>
 801c1fa:	2301      	movs	r3, #1
 801c1fc:	6144      	str	r4, [r0, #20]
 801c1fe:	6103      	str	r3, [r0, #16]
 801c200:	bd10      	pop	{r4, pc}
 801c202:	bf00      	nop
 801c204:	0801f049 	.word	0x0801f049
 801c208:	0801f0ba 	.word	0x0801f0ba

0801c20c <__multiply>:
 801c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c210:	4614      	mov	r4, r2
 801c212:	690a      	ldr	r2, [r1, #16]
 801c214:	6923      	ldr	r3, [r4, #16]
 801c216:	429a      	cmp	r2, r3
 801c218:	bfa8      	it	ge
 801c21a:	4623      	movge	r3, r4
 801c21c:	460f      	mov	r7, r1
 801c21e:	bfa4      	itt	ge
 801c220:	460c      	movge	r4, r1
 801c222:	461f      	movge	r7, r3
 801c224:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c228:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c22c:	68a3      	ldr	r3, [r4, #8]
 801c22e:	6861      	ldr	r1, [r4, #4]
 801c230:	eb0a 0609 	add.w	r6, sl, r9
 801c234:	42b3      	cmp	r3, r6
 801c236:	b085      	sub	sp, #20
 801c238:	bfb8      	it	lt
 801c23a:	3101      	addlt	r1, #1
 801c23c:	f7ff fe92 	bl	801bf64 <_Balloc>
 801c240:	b930      	cbnz	r0, 801c250 <__multiply+0x44>
 801c242:	4602      	mov	r2, r0
 801c244:	4b44      	ldr	r3, [pc, #272]	@ (801c358 <__multiply+0x14c>)
 801c246:	4845      	ldr	r0, [pc, #276]	@ (801c35c <__multiply+0x150>)
 801c248:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c24c:	f000 fd74 	bl	801cd38 <__assert_func>
 801c250:	f100 0514 	add.w	r5, r0, #20
 801c254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c258:	462b      	mov	r3, r5
 801c25a:	2200      	movs	r2, #0
 801c25c:	4543      	cmp	r3, r8
 801c25e:	d321      	bcc.n	801c2a4 <__multiply+0x98>
 801c260:	f107 0114 	add.w	r1, r7, #20
 801c264:	f104 0214 	add.w	r2, r4, #20
 801c268:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c26c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c270:	9302      	str	r3, [sp, #8]
 801c272:	1b13      	subs	r3, r2, r4
 801c274:	3b15      	subs	r3, #21
 801c276:	f023 0303 	bic.w	r3, r3, #3
 801c27a:	3304      	adds	r3, #4
 801c27c:	f104 0715 	add.w	r7, r4, #21
 801c280:	42ba      	cmp	r2, r7
 801c282:	bf38      	it	cc
 801c284:	2304      	movcc	r3, #4
 801c286:	9301      	str	r3, [sp, #4]
 801c288:	9b02      	ldr	r3, [sp, #8]
 801c28a:	9103      	str	r1, [sp, #12]
 801c28c:	428b      	cmp	r3, r1
 801c28e:	d80c      	bhi.n	801c2aa <__multiply+0x9e>
 801c290:	2e00      	cmp	r6, #0
 801c292:	dd03      	ble.n	801c29c <__multiply+0x90>
 801c294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d05b      	beq.n	801c354 <__multiply+0x148>
 801c29c:	6106      	str	r6, [r0, #16]
 801c29e:	b005      	add	sp, #20
 801c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a4:	f843 2b04 	str.w	r2, [r3], #4
 801c2a8:	e7d8      	b.n	801c25c <__multiply+0x50>
 801c2aa:	f8b1 a000 	ldrh.w	sl, [r1]
 801c2ae:	f1ba 0f00 	cmp.w	sl, #0
 801c2b2:	d024      	beq.n	801c2fe <__multiply+0xf2>
 801c2b4:	f104 0e14 	add.w	lr, r4, #20
 801c2b8:	46a9      	mov	r9, r5
 801c2ba:	f04f 0c00 	mov.w	ip, #0
 801c2be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c2c2:	f8d9 3000 	ldr.w	r3, [r9]
 801c2c6:	fa1f fb87 	uxth.w	fp, r7
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	fb0a 330b 	mla	r3, sl, fp, r3
 801c2d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c2d4:	f8d9 7000 	ldr.w	r7, [r9]
 801c2d8:	4463      	add	r3, ip
 801c2da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c2de:	fb0a c70b 	mla	r7, sl, fp, ip
 801c2e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c2ec:	4572      	cmp	r2, lr
 801c2ee:	f849 3b04 	str.w	r3, [r9], #4
 801c2f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c2f6:	d8e2      	bhi.n	801c2be <__multiply+0xb2>
 801c2f8:	9b01      	ldr	r3, [sp, #4]
 801c2fa:	f845 c003 	str.w	ip, [r5, r3]
 801c2fe:	9b03      	ldr	r3, [sp, #12]
 801c300:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c304:	3104      	adds	r1, #4
 801c306:	f1b9 0f00 	cmp.w	r9, #0
 801c30a:	d021      	beq.n	801c350 <__multiply+0x144>
 801c30c:	682b      	ldr	r3, [r5, #0]
 801c30e:	f104 0c14 	add.w	ip, r4, #20
 801c312:	46ae      	mov	lr, r5
 801c314:	f04f 0a00 	mov.w	sl, #0
 801c318:	f8bc b000 	ldrh.w	fp, [ip]
 801c31c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c320:	fb09 770b 	mla	r7, r9, fp, r7
 801c324:	4457      	add	r7, sl
 801c326:	b29b      	uxth	r3, r3
 801c328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c32c:	f84e 3b04 	str.w	r3, [lr], #4
 801c330:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c338:	f8be 3000 	ldrh.w	r3, [lr]
 801c33c:	fb09 330a 	mla	r3, r9, sl, r3
 801c340:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c344:	4562      	cmp	r2, ip
 801c346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c34a:	d8e5      	bhi.n	801c318 <__multiply+0x10c>
 801c34c:	9f01      	ldr	r7, [sp, #4]
 801c34e:	51eb      	str	r3, [r5, r7]
 801c350:	3504      	adds	r5, #4
 801c352:	e799      	b.n	801c288 <__multiply+0x7c>
 801c354:	3e01      	subs	r6, #1
 801c356:	e79b      	b.n	801c290 <__multiply+0x84>
 801c358:	0801f049 	.word	0x0801f049
 801c35c:	0801f0ba 	.word	0x0801f0ba

0801c360 <__pow5mult>:
 801c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c364:	4615      	mov	r5, r2
 801c366:	f012 0203 	ands.w	r2, r2, #3
 801c36a:	4607      	mov	r7, r0
 801c36c:	460e      	mov	r6, r1
 801c36e:	d007      	beq.n	801c380 <__pow5mult+0x20>
 801c370:	4c25      	ldr	r4, [pc, #148]	@ (801c408 <__pow5mult+0xa8>)
 801c372:	3a01      	subs	r2, #1
 801c374:	2300      	movs	r3, #0
 801c376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c37a:	f7ff fe55 	bl	801c028 <__multadd>
 801c37e:	4606      	mov	r6, r0
 801c380:	10ad      	asrs	r5, r5, #2
 801c382:	d03d      	beq.n	801c400 <__pow5mult+0xa0>
 801c384:	69fc      	ldr	r4, [r7, #28]
 801c386:	b97c      	cbnz	r4, 801c3a8 <__pow5mult+0x48>
 801c388:	2010      	movs	r0, #16
 801c38a:	f7ff fd23 	bl	801bdd4 <malloc>
 801c38e:	4602      	mov	r2, r0
 801c390:	61f8      	str	r0, [r7, #28]
 801c392:	b928      	cbnz	r0, 801c3a0 <__pow5mult+0x40>
 801c394:	4b1d      	ldr	r3, [pc, #116]	@ (801c40c <__pow5mult+0xac>)
 801c396:	481e      	ldr	r0, [pc, #120]	@ (801c410 <__pow5mult+0xb0>)
 801c398:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c39c:	f000 fccc 	bl	801cd38 <__assert_func>
 801c3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c3a4:	6004      	str	r4, [r0, #0]
 801c3a6:	60c4      	str	r4, [r0, #12]
 801c3a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c3b0:	b94c      	cbnz	r4, 801c3c6 <__pow5mult+0x66>
 801c3b2:	f240 2171 	movw	r1, #625	@ 0x271
 801c3b6:	4638      	mov	r0, r7
 801c3b8:	f7ff ff12 	bl	801c1e0 <__i2b>
 801c3bc:	2300      	movs	r3, #0
 801c3be:	f8c8 0008 	str.w	r0, [r8, #8]
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	6003      	str	r3, [r0, #0]
 801c3c6:	f04f 0900 	mov.w	r9, #0
 801c3ca:	07eb      	lsls	r3, r5, #31
 801c3cc:	d50a      	bpl.n	801c3e4 <__pow5mult+0x84>
 801c3ce:	4631      	mov	r1, r6
 801c3d0:	4622      	mov	r2, r4
 801c3d2:	4638      	mov	r0, r7
 801c3d4:	f7ff ff1a 	bl	801c20c <__multiply>
 801c3d8:	4631      	mov	r1, r6
 801c3da:	4680      	mov	r8, r0
 801c3dc:	4638      	mov	r0, r7
 801c3de:	f7ff fe01 	bl	801bfe4 <_Bfree>
 801c3e2:	4646      	mov	r6, r8
 801c3e4:	106d      	asrs	r5, r5, #1
 801c3e6:	d00b      	beq.n	801c400 <__pow5mult+0xa0>
 801c3e8:	6820      	ldr	r0, [r4, #0]
 801c3ea:	b938      	cbnz	r0, 801c3fc <__pow5mult+0x9c>
 801c3ec:	4622      	mov	r2, r4
 801c3ee:	4621      	mov	r1, r4
 801c3f0:	4638      	mov	r0, r7
 801c3f2:	f7ff ff0b 	bl	801c20c <__multiply>
 801c3f6:	6020      	str	r0, [r4, #0]
 801c3f8:	f8c0 9000 	str.w	r9, [r0]
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	e7e4      	b.n	801c3ca <__pow5mult+0x6a>
 801c400:	4630      	mov	r0, r6
 801c402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c406:	bf00      	nop
 801c408:	0801f114 	.word	0x0801f114
 801c40c:	0801efda 	.word	0x0801efda
 801c410:	0801f0ba 	.word	0x0801f0ba

0801c414 <__lshift>:
 801c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c418:	460c      	mov	r4, r1
 801c41a:	6849      	ldr	r1, [r1, #4]
 801c41c:	6923      	ldr	r3, [r4, #16]
 801c41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c422:	68a3      	ldr	r3, [r4, #8]
 801c424:	4607      	mov	r7, r0
 801c426:	4691      	mov	r9, r2
 801c428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c42c:	f108 0601 	add.w	r6, r8, #1
 801c430:	42b3      	cmp	r3, r6
 801c432:	db0b      	blt.n	801c44c <__lshift+0x38>
 801c434:	4638      	mov	r0, r7
 801c436:	f7ff fd95 	bl	801bf64 <_Balloc>
 801c43a:	4605      	mov	r5, r0
 801c43c:	b948      	cbnz	r0, 801c452 <__lshift+0x3e>
 801c43e:	4602      	mov	r2, r0
 801c440:	4b28      	ldr	r3, [pc, #160]	@ (801c4e4 <__lshift+0xd0>)
 801c442:	4829      	ldr	r0, [pc, #164]	@ (801c4e8 <__lshift+0xd4>)
 801c444:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c448:	f000 fc76 	bl	801cd38 <__assert_func>
 801c44c:	3101      	adds	r1, #1
 801c44e:	005b      	lsls	r3, r3, #1
 801c450:	e7ee      	b.n	801c430 <__lshift+0x1c>
 801c452:	2300      	movs	r3, #0
 801c454:	f100 0114 	add.w	r1, r0, #20
 801c458:	f100 0210 	add.w	r2, r0, #16
 801c45c:	4618      	mov	r0, r3
 801c45e:	4553      	cmp	r3, sl
 801c460:	db33      	blt.n	801c4ca <__lshift+0xb6>
 801c462:	6920      	ldr	r0, [r4, #16]
 801c464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c468:	f104 0314 	add.w	r3, r4, #20
 801c46c:	f019 091f 	ands.w	r9, r9, #31
 801c470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c478:	d02b      	beq.n	801c4d2 <__lshift+0xbe>
 801c47a:	f1c9 0e20 	rsb	lr, r9, #32
 801c47e:	468a      	mov	sl, r1
 801c480:	2200      	movs	r2, #0
 801c482:	6818      	ldr	r0, [r3, #0]
 801c484:	fa00 f009 	lsl.w	r0, r0, r9
 801c488:	4310      	orrs	r0, r2
 801c48a:	f84a 0b04 	str.w	r0, [sl], #4
 801c48e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c492:	459c      	cmp	ip, r3
 801c494:	fa22 f20e 	lsr.w	r2, r2, lr
 801c498:	d8f3      	bhi.n	801c482 <__lshift+0x6e>
 801c49a:	ebac 0304 	sub.w	r3, ip, r4
 801c49e:	3b15      	subs	r3, #21
 801c4a0:	f023 0303 	bic.w	r3, r3, #3
 801c4a4:	3304      	adds	r3, #4
 801c4a6:	f104 0015 	add.w	r0, r4, #21
 801c4aa:	4584      	cmp	ip, r0
 801c4ac:	bf38      	it	cc
 801c4ae:	2304      	movcc	r3, #4
 801c4b0:	50ca      	str	r2, [r1, r3]
 801c4b2:	b10a      	cbz	r2, 801c4b8 <__lshift+0xa4>
 801c4b4:	f108 0602 	add.w	r6, r8, #2
 801c4b8:	3e01      	subs	r6, #1
 801c4ba:	4638      	mov	r0, r7
 801c4bc:	612e      	str	r6, [r5, #16]
 801c4be:	4621      	mov	r1, r4
 801c4c0:	f7ff fd90 	bl	801bfe4 <_Bfree>
 801c4c4:	4628      	mov	r0, r5
 801c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4ca:	f842 0f04 	str.w	r0, [r2, #4]!
 801c4ce:	3301      	adds	r3, #1
 801c4d0:	e7c5      	b.n	801c45e <__lshift+0x4a>
 801c4d2:	3904      	subs	r1, #4
 801c4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 801c4dc:	459c      	cmp	ip, r3
 801c4de:	d8f9      	bhi.n	801c4d4 <__lshift+0xc0>
 801c4e0:	e7ea      	b.n	801c4b8 <__lshift+0xa4>
 801c4e2:	bf00      	nop
 801c4e4:	0801f049 	.word	0x0801f049
 801c4e8:	0801f0ba 	.word	0x0801f0ba

0801c4ec <__mcmp>:
 801c4ec:	690a      	ldr	r2, [r1, #16]
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	6900      	ldr	r0, [r0, #16]
 801c4f2:	1a80      	subs	r0, r0, r2
 801c4f4:	b530      	push	{r4, r5, lr}
 801c4f6:	d10e      	bne.n	801c516 <__mcmp+0x2a>
 801c4f8:	3314      	adds	r3, #20
 801c4fa:	3114      	adds	r1, #20
 801c4fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c50c:	4295      	cmp	r5, r2
 801c50e:	d003      	beq.n	801c518 <__mcmp+0x2c>
 801c510:	d205      	bcs.n	801c51e <__mcmp+0x32>
 801c512:	f04f 30ff 	mov.w	r0, #4294967295
 801c516:	bd30      	pop	{r4, r5, pc}
 801c518:	42a3      	cmp	r3, r4
 801c51a:	d3f3      	bcc.n	801c504 <__mcmp+0x18>
 801c51c:	e7fb      	b.n	801c516 <__mcmp+0x2a>
 801c51e:	2001      	movs	r0, #1
 801c520:	e7f9      	b.n	801c516 <__mcmp+0x2a>
	...

0801c524 <__mdiff>:
 801c524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c528:	4689      	mov	r9, r1
 801c52a:	4606      	mov	r6, r0
 801c52c:	4611      	mov	r1, r2
 801c52e:	4648      	mov	r0, r9
 801c530:	4614      	mov	r4, r2
 801c532:	f7ff ffdb 	bl	801c4ec <__mcmp>
 801c536:	1e05      	subs	r5, r0, #0
 801c538:	d112      	bne.n	801c560 <__mdiff+0x3c>
 801c53a:	4629      	mov	r1, r5
 801c53c:	4630      	mov	r0, r6
 801c53e:	f7ff fd11 	bl	801bf64 <_Balloc>
 801c542:	4602      	mov	r2, r0
 801c544:	b928      	cbnz	r0, 801c552 <__mdiff+0x2e>
 801c546:	4b3f      	ldr	r3, [pc, #252]	@ (801c644 <__mdiff+0x120>)
 801c548:	f240 2137 	movw	r1, #567	@ 0x237
 801c54c:	483e      	ldr	r0, [pc, #248]	@ (801c648 <__mdiff+0x124>)
 801c54e:	f000 fbf3 	bl	801cd38 <__assert_func>
 801c552:	2301      	movs	r3, #1
 801c554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c558:	4610      	mov	r0, r2
 801c55a:	b003      	add	sp, #12
 801c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c560:	bfbc      	itt	lt
 801c562:	464b      	movlt	r3, r9
 801c564:	46a1      	movlt	r9, r4
 801c566:	4630      	mov	r0, r6
 801c568:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c56c:	bfba      	itte	lt
 801c56e:	461c      	movlt	r4, r3
 801c570:	2501      	movlt	r5, #1
 801c572:	2500      	movge	r5, #0
 801c574:	f7ff fcf6 	bl	801bf64 <_Balloc>
 801c578:	4602      	mov	r2, r0
 801c57a:	b918      	cbnz	r0, 801c584 <__mdiff+0x60>
 801c57c:	4b31      	ldr	r3, [pc, #196]	@ (801c644 <__mdiff+0x120>)
 801c57e:	f240 2145 	movw	r1, #581	@ 0x245
 801c582:	e7e3      	b.n	801c54c <__mdiff+0x28>
 801c584:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c588:	6926      	ldr	r6, [r4, #16]
 801c58a:	60c5      	str	r5, [r0, #12]
 801c58c:	f109 0310 	add.w	r3, r9, #16
 801c590:	f109 0514 	add.w	r5, r9, #20
 801c594:	f104 0e14 	add.w	lr, r4, #20
 801c598:	f100 0b14 	add.w	fp, r0, #20
 801c59c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c5a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c5a4:	9301      	str	r3, [sp, #4]
 801c5a6:	46d9      	mov	r9, fp
 801c5a8:	f04f 0c00 	mov.w	ip, #0
 801c5ac:	9b01      	ldr	r3, [sp, #4]
 801c5ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c5b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c5b6:	9301      	str	r3, [sp, #4]
 801c5b8:	fa1f f38a 	uxth.w	r3, sl
 801c5bc:	4619      	mov	r1, r3
 801c5be:	b283      	uxth	r3, r0
 801c5c0:	1acb      	subs	r3, r1, r3
 801c5c2:	0c00      	lsrs	r0, r0, #16
 801c5c4:	4463      	add	r3, ip
 801c5c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c5ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c5ce:	b29b      	uxth	r3, r3
 801c5d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c5d4:	4576      	cmp	r6, lr
 801c5d6:	f849 3b04 	str.w	r3, [r9], #4
 801c5da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c5de:	d8e5      	bhi.n	801c5ac <__mdiff+0x88>
 801c5e0:	1b33      	subs	r3, r6, r4
 801c5e2:	3b15      	subs	r3, #21
 801c5e4:	f023 0303 	bic.w	r3, r3, #3
 801c5e8:	3415      	adds	r4, #21
 801c5ea:	3304      	adds	r3, #4
 801c5ec:	42a6      	cmp	r6, r4
 801c5ee:	bf38      	it	cc
 801c5f0:	2304      	movcc	r3, #4
 801c5f2:	441d      	add	r5, r3
 801c5f4:	445b      	add	r3, fp
 801c5f6:	461e      	mov	r6, r3
 801c5f8:	462c      	mov	r4, r5
 801c5fa:	4544      	cmp	r4, r8
 801c5fc:	d30e      	bcc.n	801c61c <__mdiff+0xf8>
 801c5fe:	f108 0103 	add.w	r1, r8, #3
 801c602:	1b49      	subs	r1, r1, r5
 801c604:	f021 0103 	bic.w	r1, r1, #3
 801c608:	3d03      	subs	r5, #3
 801c60a:	45a8      	cmp	r8, r5
 801c60c:	bf38      	it	cc
 801c60e:	2100      	movcc	r1, #0
 801c610:	440b      	add	r3, r1
 801c612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c616:	b191      	cbz	r1, 801c63e <__mdiff+0x11a>
 801c618:	6117      	str	r7, [r2, #16]
 801c61a:	e79d      	b.n	801c558 <__mdiff+0x34>
 801c61c:	f854 1b04 	ldr.w	r1, [r4], #4
 801c620:	46e6      	mov	lr, ip
 801c622:	0c08      	lsrs	r0, r1, #16
 801c624:	fa1c fc81 	uxtah	ip, ip, r1
 801c628:	4471      	add	r1, lr
 801c62a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c62e:	b289      	uxth	r1, r1
 801c630:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c634:	f846 1b04 	str.w	r1, [r6], #4
 801c638:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c63c:	e7dd      	b.n	801c5fa <__mdiff+0xd6>
 801c63e:	3f01      	subs	r7, #1
 801c640:	e7e7      	b.n	801c612 <__mdiff+0xee>
 801c642:	bf00      	nop
 801c644:	0801f049 	.word	0x0801f049
 801c648:	0801f0ba 	.word	0x0801f0ba

0801c64c <__ulp>:
 801c64c:	b082      	sub	sp, #8
 801c64e:	ed8d 0b00 	vstr	d0, [sp]
 801c652:	9a01      	ldr	r2, [sp, #4]
 801c654:	4b0f      	ldr	r3, [pc, #60]	@ (801c694 <__ulp+0x48>)
 801c656:	4013      	ands	r3, r2
 801c658:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	dc08      	bgt.n	801c672 <__ulp+0x26>
 801c660:	425b      	negs	r3, r3
 801c662:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c666:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c66a:	da04      	bge.n	801c676 <__ulp+0x2a>
 801c66c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c670:	4113      	asrs	r3, r2
 801c672:	2200      	movs	r2, #0
 801c674:	e008      	b.n	801c688 <__ulp+0x3c>
 801c676:	f1a2 0314 	sub.w	r3, r2, #20
 801c67a:	2b1e      	cmp	r3, #30
 801c67c:	bfda      	itte	le
 801c67e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c682:	40da      	lsrle	r2, r3
 801c684:	2201      	movgt	r2, #1
 801c686:	2300      	movs	r3, #0
 801c688:	4619      	mov	r1, r3
 801c68a:	4610      	mov	r0, r2
 801c68c:	ec41 0b10 	vmov	d0, r0, r1
 801c690:	b002      	add	sp, #8
 801c692:	4770      	bx	lr
 801c694:	7ff00000 	.word	0x7ff00000

0801c698 <__b2d>:
 801c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c69c:	6906      	ldr	r6, [r0, #16]
 801c69e:	f100 0814 	add.w	r8, r0, #20
 801c6a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c6a6:	1f37      	subs	r7, r6, #4
 801c6a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c6ac:	4610      	mov	r0, r2
 801c6ae:	f7ff fd4b 	bl	801c148 <__hi0bits>
 801c6b2:	f1c0 0320 	rsb	r3, r0, #32
 801c6b6:	280a      	cmp	r0, #10
 801c6b8:	600b      	str	r3, [r1, #0]
 801c6ba:	491b      	ldr	r1, [pc, #108]	@ (801c728 <__b2d+0x90>)
 801c6bc:	dc15      	bgt.n	801c6ea <__b2d+0x52>
 801c6be:	f1c0 0c0b 	rsb	ip, r0, #11
 801c6c2:	fa22 f30c 	lsr.w	r3, r2, ip
 801c6c6:	45b8      	cmp	r8, r7
 801c6c8:	ea43 0501 	orr.w	r5, r3, r1
 801c6cc:	bf34      	ite	cc
 801c6ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c6d2:	2300      	movcs	r3, #0
 801c6d4:	3015      	adds	r0, #21
 801c6d6:	fa02 f000 	lsl.w	r0, r2, r0
 801c6da:	fa23 f30c 	lsr.w	r3, r3, ip
 801c6de:	4303      	orrs	r3, r0
 801c6e0:	461c      	mov	r4, r3
 801c6e2:	ec45 4b10 	vmov	d0, r4, r5
 801c6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ea:	45b8      	cmp	r8, r7
 801c6ec:	bf3a      	itte	cc
 801c6ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c6f2:	f1a6 0708 	subcc.w	r7, r6, #8
 801c6f6:	2300      	movcs	r3, #0
 801c6f8:	380b      	subs	r0, #11
 801c6fa:	d012      	beq.n	801c722 <__b2d+0x8a>
 801c6fc:	f1c0 0120 	rsb	r1, r0, #32
 801c700:	fa23 f401 	lsr.w	r4, r3, r1
 801c704:	4082      	lsls	r2, r0
 801c706:	4322      	orrs	r2, r4
 801c708:	4547      	cmp	r7, r8
 801c70a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c70e:	bf8c      	ite	hi
 801c710:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c714:	2200      	movls	r2, #0
 801c716:	4083      	lsls	r3, r0
 801c718:	40ca      	lsrs	r2, r1
 801c71a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c71e:	4313      	orrs	r3, r2
 801c720:	e7de      	b.n	801c6e0 <__b2d+0x48>
 801c722:	ea42 0501 	orr.w	r5, r2, r1
 801c726:	e7db      	b.n	801c6e0 <__b2d+0x48>
 801c728:	3ff00000 	.word	0x3ff00000

0801c72c <__d2b>:
 801c72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c730:	460f      	mov	r7, r1
 801c732:	2101      	movs	r1, #1
 801c734:	ec59 8b10 	vmov	r8, r9, d0
 801c738:	4616      	mov	r6, r2
 801c73a:	f7ff fc13 	bl	801bf64 <_Balloc>
 801c73e:	4604      	mov	r4, r0
 801c740:	b930      	cbnz	r0, 801c750 <__d2b+0x24>
 801c742:	4602      	mov	r2, r0
 801c744:	4b23      	ldr	r3, [pc, #140]	@ (801c7d4 <__d2b+0xa8>)
 801c746:	4824      	ldr	r0, [pc, #144]	@ (801c7d8 <__d2b+0xac>)
 801c748:	f240 310f 	movw	r1, #783	@ 0x30f
 801c74c:	f000 faf4 	bl	801cd38 <__assert_func>
 801c750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c758:	b10d      	cbz	r5, 801c75e <__d2b+0x32>
 801c75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c75e:	9301      	str	r3, [sp, #4]
 801c760:	f1b8 0300 	subs.w	r3, r8, #0
 801c764:	d023      	beq.n	801c7ae <__d2b+0x82>
 801c766:	4668      	mov	r0, sp
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	f7ff fd0c 	bl	801c186 <__lo0bits>
 801c76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c772:	b1d0      	cbz	r0, 801c7aa <__d2b+0x7e>
 801c774:	f1c0 0320 	rsb	r3, r0, #32
 801c778:	fa02 f303 	lsl.w	r3, r2, r3
 801c77c:	430b      	orrs	r3, r1
 801c77e:	40c2      	lsrs	r2, r0
 801c780:	6163      	str	r3, [r4, #20]
 801c782:	9201      	str	r2, [sp, #4]
 801c784:	9b01      	ldr	r3, [sp, #4]
 801c786:	61a3      	str	r3, [r4, #24]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	bf0c      	ite	eq
 801c78c:	2201      	moveq	r2, #1
 801c78e:	2202      	movne	r2, #2
 801c790:	6122      	str	r2, [r4, #16]
 801c792:	b1a5      	cbz	r5, 801c7be <__d2b+0x92>
 801c794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c798:	4405      	add	r5, r0
 801c79a:	603d      	str	r5, [r7, #0]
 801c79c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c7a0:	6030      	str	r0, [r6, #0]
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	b003      	add	sp, #12
 801c7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c7aa:	6161      	str	r1, [r4, #20]
 801c7ac:	e7ea      	b.n	801c784 <__d2b+0x58>
 801c7ae:	a801      	add	r0, sp, #4
 801c7b0:	f7ff fce9 	bl	801c186 <__lo0bits>
 801c7b4:	9b01      	ldr	r3, [sp, #4]
 801c7b6:	6163      	str	r3, [r4, #20]
 801c7b8:	3020      	adds	r0, #32
 801c7ba:	2201      	movs	r2, #1
 801c7bc:	e7e8      	b.n	801c790 <__d2b+0x64>
 801c7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c7c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c7c6:	6038      	str	r0, [r7, #0]
 801c7c8:	6918      	ldr	r0, [r3, #16]
 801c7ca:	f7ff fcbd 	bl	801c148 <__hi0bits>
 801c7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c7d2:	e7e5      	b.n	801c7a0 <__d2b+0x74>
 801c7d4:	0801f049 	.word	0x0801f049
 801c7d8:	0801f0ba 	.word	0x0801f0ba

0801c7dc <__ratio>:
 801c7dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e0:	4688      	mov	r8, r1
 801c7e2:	4669      	mov	r1, sp
 801c7e4:	4681      	mov	r9, r0
 801c7e6:	f7ff ff57 	bl	801c698 <__b2d>
 801c7ea:	a901      	add	r1, sp, #4
 801c7ec:	4640      	mov	r0, r8
 801c7ee:	ec55 4b10 	vmov	r4, r5, d0
 801c7f2:	f7ff ff51 	bl	801c698 <__b2d>
 801c7f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c7fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801c7fe:	1ad2      	subs	r2, r2, r3
 801c800:	e9dd 3100 	ldrd	r3, r1, [sp]
 801c804:	1a5b      	subs	r3, r3, r1
 801c806:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801c80a:	ec57 6b10 	vmov	r6, r7, d0
 801c80e:	2b00      	cmp	r3, #0
 801c810:	bfd6      	itet	le
 801c812:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c816:	462a      	movgt	r2, r5
 801c818:	463a      	movle	r2, r7
 801c81a:	46ab      	mov	fp, r5
 801c81c:	46a2      	mov	sl, r4
 801c81e:	bfce      	itee	gt
 801c820:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801c824:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801c828:	ee00 3a90 	vmovle	s1, r3
 801c82c:	ec4b ab17 	vmov	d7, sl, fp
 801c830:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801c834:	b003      	add	sp, #12
 801c836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c83a <__copybits>:
 801c83a:	3901      	subs	r1, #1
 801c83c:	b570      	push	{r4, r5, r6, lr}
 801c83e:	1149      	asrs	r1, r1, #5
 801c840:	6914      	ldr	r4, [r2, #16]
 801c842:	3101      	adds	r1, #1
 801c844:	f102 0314 	add.w	r3, r2, #20
 801c848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c850:	1f05      	subs	r5, r0, #4
 801c852:	42a3      	cmp	r3, r4
 801c854:	d30c      	bcc.n	801c870 <__copybits+0x36>
 801c856:	1aa3      	subs	r3, r4, r2
 801c858:	3b11      	subs	r3, #17
 801c85a:	f023 0303 	bic.w	r3, r3, #3
 801c85e:	3211      	adds	r2, #17
 801c860:	42a2      	cmp	r2, r4
 801c862:	bf88      	it	hi
 801c864:	2300      	movhi	r3, #0
 801c866:	4418      	add	r0, r3
 801c868:	2300      	movs	r3, #0
 801c86a:	4288      	cmp	r0, r1
 801c86c:	d305      	bcc.n	801c87a <__copybits+0x40>
 801c86e:	bd70      	pop	{r4, r5, r6, pc}
 801c870:	f853 6b04 	ldr.w	r6, [r3], #4
 801c874:	f845 6f04 	str.w	r6, [r5, #4]!
 801c878:	e7eb      	b.n	801c852 <__copybits+0x18>
 801c87a:	f840 3b04 	str.w	r3, [r0], #4
 801c87e:	e7f4      	b.n	801c86a <__copybits+0x30>

0801c880 <__any_on>:
 801c880:	f100 0214 	add.w	r2, r0, #20
 801c884:	6900      	ldr	r0, [r0, #16]
 801c886:	114b      	asrs	r3, r1, #5
 801c888:	4298      	cmp	r0, r3
 801c88a:	b510      	push	{r4, lr}
 801c88c:	db11      	blt.n	801c8b2 <__any_on+0x32>
 801c88e:	dd0a      	ble.n	801c8a6 <__any_on+0x26>
 801c890:	f011 011f 	ands.w	r1, r1, #31
 801c894:	d007      	beq.n	801c8a6 <__any_on+0x26>
 801c896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c89a:	fa24 f001 	lsr.w	r0, r4, r1
 801c89e:	fa00 f101 	lsl.w	r1, r0, r1
 801c8a2:	428c      	cmp	r4, r1
 801c8a4:	d10b      	bne.n	801c8be <__any_on+0x3e>
 801c8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c8aa:	4293      	cmp	r3, r2
 801c8ac:	d803      	bhi.n	801c8b6 <__any_on+0x36>
 801c8ae:	2000      	movs	r0, #0
 801c8b0:	bd10      	pop	{r4, pc}
 801c8b2:	4603      	mov	r3, r0
 801c8b4:	e7f7      	b.n	801c8a6 <__any_on+0x26>
 801c8b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c8ba:	2900      	cmp	r1, #0
 801c8bc:	d0f5      	beq.n	801c8aa <__any_on+0x2a>
 801c8be:	2001      	movs	r0, #1
 801c8c0:	e7f6      	b.n	801c8b0 <__any_on+0x30>

0801c8c2 <__ascii_wctomb>:
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	4608      	mov	r0, r1
 801c8c6:	b141      	cbz	r1, 801c8da <__ascii_wctomb+0x18>
 801c8c8:	2aff      	cmp	r2, #255	@ 0xff
 801c8ca:	d904      	bls.n	801c8d6 <__ascii_wctomb+0x14>
 801c8cc:	228a      	movs	r2, #138	@ 0x8a
 801c8ce:	601a      	str	r2, [r3, #0]
 801c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 801c8d4:	4770      	bx	lr
 801c8d6:	700a      	strb	r2, [r1, #0]
 801c8d8:	2001      	movs	r0, #1
 801c8da:	4770      	bx	lr

0801c8dc <__ssputs_r>:
 801c8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8e0:	688e      	ldr	r6, [r1, #8]
 801c8e2:	461f      	mov	r7, r3
 801c8e4:	42be      	cmp	r6, r7
 801c8e6:	680b      	ldr	r3, [r1, #0]
 801c8e8:	4682      	mov	sl, r0
 801c8ea:	460c      	mov	r4, r1
 801c8ec:	4690      	mov	r8, r2
 801c8ee:	d82d      	bhi.n	801c94c <__ssputs_r+0x70>
 801c8f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c8f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c8f8:	d026      	beq.n	801c948 <__ssputs_r+0x6c>
 801c8fa:	6965      	ldr	r5, [r4, #20]
 801c8fc:	6909      	ldr	r1, [r1, #16]
 801c8fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c902:	eba3 0901 	sub.w	r9, r3, r1
 801c906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c90a:	1c7b      	adds	r3, r7, #1
 801c90c:	444b      	add	r3, r9
 801c90e:	106d      	asrs	r5, r5, #1
 801c910:	429d      	cmp	r5, r3
 801c912:	bf38      	it	cc
 801c914:	461d      	movcc	r5, r3
 801c916:	0553      	lsls	r3, r2, #21
 801c918:	d527      	bpl.n	801c96a <__ssputs_r+0x8e>
 801c91a:	4629      	mov	r1, r5
 801c91c:	f7ff fa84 	bl	801be28 <_malloc_r>
 801c920:	4606      	mov	r6, r0
 801c922:	b360      	cbz	r0, 801c97e <__ssputs_r+0xa2>
 801c924:	6921      	ldr	r1, [r4, #16]
 801c926:	464a      	mov	r2, r9
 801c928:	f7fe f8d9 	bl	801aade <memcpy>
 801c92c:	89a3      	ldrh	r3, [r4, #12]
 801c92e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c936:	81a3      	strh	r3, [r4, #12]
 801c938:	6126      	str	r6, [r4, #16]
 801c93a:	6165      	str	r5, [r4, #20]
 801c93c:	444e      	add	r6, r9
 801c93e:	eba5 0509 	sub.w	r5, r5, r9
 801c942:	6026      	str	r6, [r4, #0]
 801c944:	60a5      	str	r5, [r4, #8]
 801c946:	463e      	mov	r6, r7
 801c948:	42be      	cmp	r6, r7
 801c94a:	d900      	bls.n	801c94e <__ssputs_r+0x72>
 801c94c:	463e      	mov	r6, r7
 801c94e:	6820      	ldr	r0, [r4, #0]
 801c950:	4632      	mov	r2, r6
 801c952:	4641      	mov	r1, r8
 801c954:	f000 f9c6 	bl	801cce4 <memmove>
 801c958:	68a3      	ldr	r3, [r4, #8]
 801c95a:	1b9b      	subs	r3, r3, r6
 801c95c:	60a3      	str	r3, [r4, #8]
 801c95e:	6823      	ldr	r3, [r4, #0]
 801c960:	4433      	add	r3, r6
 801c962:	6023      	str	r3, [r4, #0]
 801c964:	2000      	movs	r0, #0
 801c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c96a:	462a      	mov	r2, r5
 801c96c:	f000 fa16 	bl	801cd9c <_realloc_r>
 801c970:	4606      	mov	r6, r0
 801c972:	2800      	cmp	r0, #0
 801c974:	d1e0      	bne.n	801c938 <__ssputs_r+0x5c>
 801c976:	6921      	ldr	r1, [r4, #16]
 801c978:	4650      	mov	r0, sl
 801c97a:	f7fe fea7 	bl	801b6cc <_free_r>
 801c97e:	230c      	movs	r3, #12
 801c980:	f8ca 3000 	str.w	r3, [sl]
 801c984:	89a3      	ldrh	r3, [r4, #12]
 801c986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c98a:	81a3      	strh	r3, [r4, #12]
 801c98c:	f04f 30ff 	mov.w	r0, #4294967295
 801c990:	e7e9      	b.n	801c966 <__ssputs_r+0x8a>
	...

0801c994 <_svfiprintf_r>:
 801c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c998:	4698      	mov	r8, r3
 801c99a:	898b      	ldrh	r3, [r1, #12]
 801c99c:	061b      	lsls	r3, r3, #24
 801c99e:	b09d      	sub	sp, #116	@ 0x74
 801c9a0:	4607      	mov	r7, r0
 801c9a2:	460d      	mov	r5, r1
 801c9a4:	4614      	mov	r4, r2
 801c9a6:	d510      	bpl.n	801c9ca <_svfiprintf_r+0x36>
 801c9a8:	690b      	ldr	r3, [r1, #16]
 801c9aa:	b973      	cbnz	r3, 801c9ca <_svfiprintf_r+0x36>
 801c9ac:	2140      	movs	r1, #64	@ 0x40
 801c9ae:	f7ff fa3b 	bl	801be28 <_malloc_r>
 801c9b2:	6028      	str	r0, [r5, #0]
 801c9b4:	6128      	str	r0, [r5, #16]
 801c9b6:	b930      	cbnz	r0, 801c9c6 <_svfiprintf_r+0x32>
 801c9b8:	230c      	movs	r3, #12
 801c9ba:	603b      	str	r3, [r7, #0]
 801c9bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c9c0:	b01d      	add	sp, #116	@ 0x74
 801c9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c6:	2340      	movs	r3, #64	@ 0x40
 801c9c8:	616b      	str	r3, [r5, #20]
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9ce:	2320      	movs	r3, #32
 801c9d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c9d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9d8:	2330      	movs	r3, #48	@ 0x30
 801c9da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cb78 <_svfiprintf_r+0x1e4>
 801c9de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c9e2:	f04f 0901 	mov.w	r9, #1
 801c9e6:	4623      	mov	r3, r4
 801c9e8:	469a      	mov	sl, r3
 801c9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9ee:	b10a      	cbz	r2, 801c9f4 <_svfiprintf_r+0x60>
 801c9f0:	2a25      	cmp	r2, #37	@ 0x25
 801c9f2:	d1f9      	bne.n	801c9e8 <_svfiprintf_r+0x54>
 801c9f4:	ebba 0b04 	subs.w	fp, sl, r4
 801c9f8:	d00b      	beq.n	801ca12 <_svfiprintf_r+0x7e>
 801c9fa:	465b      	mov	r3, fp
 801c9fc:	4622      	mov	r2, r4
 801c9fe:	4629      	mov	r1, r5
 801ca00:	4638      	mov	r0, r7
 801ca02:	f7ff ff6b 	bl	801c8dc <__ssputs_r>
 801ca06:	3001      	adds	r0, #1
 801ca08:	f000 80a7 	beq.w	801cb5a <_svfiprintf_r+0x1c6>
 801ca0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca0e:	445a      	add	r2, fp
 801ca10:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca12:	f89a 3000 	ldrb.w	r3, [sl]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	f000 809f 	beq.w	801cb5a <_svfiprintf_r+0x1c6>
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	f04f 32ff 	mov.w	r2, #4294967295
 801ca22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca26:	f10a 0a01 	add.w	sl, sl, #1
 801ca2a:	9304      	str	r3, [sp, #16]
 801ca2c:	9307      	str	r3, [sp, #28]
 801ca2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca32:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca34:	4654      	mov	r4, sl
 801ca36:	2205      	movs	r2, #5
 801ca38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca3c:	484e      	ldr	r0, [pc, #312]	@ (801cb78 <_svfiprintf_r+0x1e4>)
 801ca3e:	f7e3 fc77 	bl	8000330 <memchr>
 801ca42:	9a04      	ldr	r2, [sp, #16]
 801ca44:	b9d8      	cbnz	r0, 801ca7e <_svfiprintf_r+0xea>
 801ca46:	06d0      	lsls	r0, r2, #27
 801ca48:	bf44      	itt	mi
 801ca4a:	2320      	movmi	r3, #32
 801ca4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca50:	0711      	lsls	r1, r2, #28
 801ca52:	bf44      	itt	mi
 801ca54:	232b      	movmi	r3, #43	@ 0x2b
 801ca56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca5a:	f89a 3000 	ldrb.w	r3, [sl]
 801ca5e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca60:	d015      	beq.n	801ca8e <_svfiprintf_r+0xfa>
 801ca62:	9a07      	ldr	r2, [sp, #28]
 801ca64:	4654      	mov	r4, sl
 801ca66:	2000      	movs	r0, #0
 801ca68:	f04f 0c0a 	mov.w	ip, #10
 801ca6c:	4621      	mov	r1, r4
 801ca6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca72:	3b30      	subs	r3, #48	@ 0x30
 801ca74:	2b09      	cmp	r3, #9
 801ca76:	d94b      	bls.n	801cb10 <_svfiprintf_r+0x17c>
 801ca78:	b1b0      	cbz	r0, 801caa8 <_svfiprintf_r+0x114>
 801ca7a:	9207      	str	r2, [sp, #28]
 801ca7c:	e014      	b.n	801caa8 <_svfiprintf_r+0x114>
 801ca7e:	eba0 0308 	sub.w	r3, r0, r8
 801ca82:	fa09 f303 	lsl.w	r3, r9, r3
 801ca86:	4313      	orrs	r3, r2
 801ca88:	9304      	str	r3, [sp, #16]
 801ca8a:	46a2      	mov	sl, r4
 801ca8c:	e7d2      	b.n	801ca34 <_svfiprintf_r+0xa0>
 801ca8e:	9b03      	ldr	r3, [sp, #12]
 801ca90:	1d19      	adds	r1, r3, #4
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	9103      	str	r1, [sp, #12]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	bfbb      	ittet	lt
 801ca9a:	425b      	neglt	r3, r3
 801ca9c:	f042 0202 	orrlt.w	r2, r2, #2
 801caa0:	9307      	strge	r3, [sp, #28]
 801caa2:	9307      	strlt	r3, [sp, #28]
 801caa4:	bfb8      	it	lt
 801caa6:	9204      	strlt	r2, [sp, #16]
 801caa8:	7823      	ldrb	r3, [r4, #0]
 801caaa:	2b2e      	cmp	r3, #46	@ 0x2e
 801caac:	d10a      	bne.n	801cac4 <_svfiprintf_r+0x130>
 801caae:	7863      	ldrb	r3, [r4, #1]
 801cab0:	2b2a      	cmp	r3, #42	@ 0x2a
 801cab2:	d132      	bne.n	801cb1a <_svfiprintf_r+0x186>
 801cab4:	9b03      	ldr	r3, [sp, #12]
 801cab6:	1d1a      	adds	r2, r3, #4
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	9203      	str	r2, [sp, #12]
 801cabc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cac0:	3402      	adds	r4, #2
 801cac2:	9305      	str	r3, [sp, #20]
 801cac4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cb88 <_svfiprintf_r+0x1f4>
 801cac8:	7821      	ldrb	r1, [r4, #0]
 801caca:	2203      	movs	r2, #3
 801cacc:	4650      	mov	r0, sl
 801cace:	f7e3 fc2f 	bl	8000330 <memchr>
 801cad2:	b138      	cbz	r0, 801cae4 <_svfiprintf_r+0x150>
 801cad4:	9b04      	ldr	r3, [sp, #16]
 801cad6:	eba0 000a 	sub.w	r0, r0, sl
 801cada:	2240      	movs	r2, #64	@ 0x40
 801cadc:	4082      	lsls	r2, r0
 801cade:	4313      	orrs	r3, r2
 801cae0:	3401      	adds	r4, #1
 801cae2:	9304      	str	r3, [sp, #16]
 801cae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cae8:	4824      	ldr	r0, [pc, #144]	@ (801cb7c <_svfiprintf_r+0x1e8>)
 801caea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801caee:	2206      	movs	r2, #6
 801caf0:	f7e3 fc1e 	bl	8000330 <memchr>
 801caf4:	2800      	cmp	r0, #0
 801caf6:	d036      	beq.n	801cb66 <_svfiprintf_r+0x1d2>
 801caf8:	4b21      	ldr	r3, [pc, #132]	@ (801cb80 <_svfiprintf_r+0x1ec>)
 801cafa:	bb1b      	cbnz	r3, 801cb44 <_svfiprintf_r+0x1b0>
 801cafc:	9b03      	ldr	r3, [sp, #12]
 801cafe:	3307      	adds	r3, #7
 801cb00:	f023 0307 	bic.w	r3, r3, #7
 801cb04:	3308      	adds	r3, #8
 801cb06:	9303      	str	r3, [sp, #12]
 801cb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb0a:	4433      	add	r3, r6
 801cb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb0e:	e76a      	b.n	801c9e6 <_svfiprintf_r+0x52>
 801cb10:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb14:	460c      	mov	r4, r1
 801cb16:	2001      	movs	r0, #1
 801cb18:	e7a8      	b.n	801ca6c <_svfiprintf_r+0xd8>
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	3401      	adds	r4, #1
 801cb1e:	9305      	str	r3, [sp, #20]
 801cb20:	4619      	mov	r1, r3
 801cb22:	f04f 0c0a 	mov.w	ip, #10
 801cb26:	4620      	mov	r0, r4
 801cb28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb2c:	3a30      	subs	r2, #48	@ 0x30
 801cb2e:	2a09      	cmp	r2, #9
 801cb30:	d903      	bls.n	801cb3a <_svfiprintf_r+0x1a6>
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d0c6      	beq.n	801cac4 <_svfiprintf_r+0x130>
 801cb36:	9105      	str	r1, [sp, #20]
 801cb38:	e7c4      	b.n	801cac4 <_svfiprintf_r+0x130>
 801cb3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb3e:	4604      	mov	r4, r0
 801cb40:	2301      	movs	r3, #1
 801cb42:	e7f0      	b.n	801cb26 <_svfiprintf_r+0x192>
 801cb44:	ab03      	add	r3, sp, #12
 801cb46:	9300      	str	r3, [sp, #0]
 801cb48:	462a      	mov	r2, r5
 801cb4a:	4b0e      	ldr	r3, [pc, #56]	@ (801cb84 <_svfiprintf_r+0x1f0>)
 801cb4c:	a904      	add	r1, sp, #16
 801cb4e:	4638      	mov	r0, r7
 801cb50:	f7fd fa5a 	bl	801a008 <_printf_float>
 801cb54:	1c42      	adds	r2, r0, #1
 801cb56:	4606      	mov	r6, r0
 801cb58:	d1d6      	bne.n	801cb08 <_svfiprintf_r+0x174>
 801cb5a:	89ab      	ldrh	r3, [r5, #12]
 801cb5c:	065b      	lsls	r3, r3, #25
 801cb5e:	f53f af2d 	bmi.w	801c9bc <_svfiprintf_r+0x28>
 801cb62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cb64:	e72c      	b.n	801c9c0 <_svfiprintf_r+0x2c>
 801cb66:	ab03      	add	r3, sp, #12
 801cb68:	9300      	str	r3, [sp, #0]
 801cb6a:	462a      	mov	r2, r5
 801cb6c:	4b05      	ldr	r3, [pc, #20]	@ (801cb84 <_svfiprintf_r+0x1f0>)
 801cb6e:	a904      	add	r1, sp, #16
 801cb70:	4638      	mov	r0, r7
 801cb72:	f7fd fcd1 	bl	801a518 <_printf_i>
 801cb76:	e7ed      	b.n	801cb54 <_svfiprintf_r+0x1c0>
 801cb78:	0801f210 	.word	0x0801f210
 801cb7c:	0801f21a 	.word	0x0801f21a
 801cb80:	0801a009 	.word	0x0801a009
 801cb84:	0801c8dd 	.word	0x0801c8dd
 801cb88:	0801f216 	.word	0x0801f216

0801cb8c <__sflush_r>:
 801cb8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb94:	0716      	lsls	r6, r2, #28
 801cb96:	4605      	mov	r5, r0
 801cb98:	460c      	mov	r4, r1
 801cb9a:	d454      	bmi.n	801cc46 <__sflush_r+0xba>
 801cb9c:	684b      	ldr	r3, [r1, #4]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	dc02      	bgt.n	801cba8 <__sflush_r+0x1c>
 801cba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	dd48      	ble.n	801cc3a <__sflush_r+0xae>
 801cba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbaa:	2e00      	cmp	r6, #0
 801cbac:	d045      	beq.n	801cc3a <__sflush_r+0xae>
 801cbae:	2300      	movs	r3, #0
 801cbb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cbb4:	682f      	ldr	r7, [r5, #0]
 801cbb6:	6a21      	ldr	r1, [r4, #32]
 801cbb8:	602b      	str	r3, [r5, #0]
 801cbba:	d030      	beq.n	801cc1e <__sflush_r+0x92>
 801cbbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cbbe:	89a3      	ldrh	r3, [r4, #12]
 801cbc0:	0759      	lsls	r1, r3, #29
 801cbc2:	d505      	bpl.n	801cbd0 <__sflush_r+0x44>
 801cbc4:	6863      	ldr	r3, [r4, #4]
 801cbc6:	1ad2      	subs	r2, r2, r3
 801cbc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbca:	b10b      	cbz	r3, 801cbd0 <__sflush_r+0x44>
 801cbcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cbce:	1ad2      	subs	r2, r2, r3
 801cbd0:	2300      	movs	r3, #0
 801cbd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbd4:	6a21      	ldr	r1, [r4, #32]
 801cbd6:	4628      	mov	r0, r5
 801cbd8:	47b0      	blx	r6
 801cbda:	1c43      	adds	r3, r0, #1
 801cbdc:	89a3      	ldrh	r3, [r4, #12]
 801cbde:	d106      	bne.n	801cbee <__sflush_r+0x62>
 801cbe0:	6829      	ldr	r1, [r5, #0]
 801cbe2:	291d      	cmp	r1, #29
 801cbe4:	d82b      	bhi.n	801cc3e <__sflush_r+0xb2>
 801cbe6:	4a2a      	ldr	r2, [pc, #168]	@ (801cc90 <__sflush_r+0x104>)
 801cbe8:	410a      	asrs	r2, r1
 801cbea:	07d6      	lsls	r6, r2, #31
 801cbec:	d427      	bmi.n	801cc3e <__sflush_r+0xb2>
 801cbee:	2200      	movs	r2, #0
 801cbf0:	6062      	str	r2, [r4, #4]
 801cbf2:	04d9      	lsls	r1, r3, #19
 801cbf4:	6922      	ldr	r2, [r4, #16]
 801cbf6:	6022      	str	r2, [r4, #0]
 801cbf8:	d504      	bpl.n	801cc04 <__sflush_r+0x78>
 801cbfa:	1c42      	adds	r2, r0, #1
 801cbfc:	d101      	bne.n	801cc02 <__sflush_r+0x76>
 801cbfe:	682b      	ldr	r3, [r5, #0]
 801cc00:	b903      	cbnz	r3, 801cc04 <__sflush_r+0x78>
 801cc02:	6560      	str	r0, [r4, #84]	@ 0x54
 801cc04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cc06:	602f      	str	r7, [r5, #0]
 801cc08:	b1b9      	cbz	r1, 801cc3a <__sflush_r+0xae>
 801cc0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cc0e:	4299      	cmp	r1, r3
 801cc10:	d002      	beq.n	801cc18 <__sflush_r+0x8c>
 801cc12:	4628      	mov	r0, r5
 801cc14:	f7fe fd5a 	bl	801b6cc <_free_r>
 801cc18:	2300      	movs	r3, #0
 801cc1a:	6363      	str	r3, [r4, #52]	@ 0x34
 801cc1c:	e00d      	b.n	801cc3a <__sflush_r+0xae>
 801cc1e:	2301      	movs	r3, #1
 801cc20:	4628      	mov	r0, r5
 801cc22:	47b0      	blx	r6
 801cc24:	4602      	mov	r2, r0
 801cc26:	1c50      	adds	r0, r2, #1
 801cc28:	d1c9      	bne.n	801cbbe <__sflush_r+0x32>
 801cc2a:	682b      	ldr	r3, [r5, #0]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d0c6      	beq.n	801cbbe <__sflush_r+0x32>
 801cc30:	2b1d      	cmp	r3, #29
 801cc32:	d001      	beq.n	801cc38 <__sflush_r+0xac>
 801cc34:	2b16      	cmp	r3, #22
 801cc36:	d11e      	bne.n	801cc76 <__sflush_r+0xea>
 801cc38:	602f      	str	r7, [r5, #0]
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	e022      	b.n	801cc84 <__sflush_r+0xf8>
 801cc3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc42:	b21b      	sxth	r3, r3
 801cc44:	e01b      	b.n	801cc7e <__sflush_r+0xf2>
 801cc46:	690f      	ldr	r7, [r1, #16]
 801cc48:	2f00      	cmp	r7, #0
 801cc4a:	d0f6      	beq.n	801cc3a <__sflush_r+0xae>
 801cc4c:	0793      	lsls	r3, r2, #30
 801cc4e:	680e      	ldr	r6, [r1, #0]
 801cc50:	bf08      	it	eq
 801cc52:	694b      	ldreq	r3, [r1, #20]
 801cc54:	600f      	str	r7, [r1, #0]
 801cc56:	bf18      	it	ne
 801cc58:	2300      	movne	r3, #0
 801cc5a:	eba6 0807 	sub.w	r8, r6, r7
 801cc5e:	608b      	str	r3, [r1, #8]
 801cc60:	f1b8 0f00 	cmp.w	r8, #0
 801cc64:	dde9      	ble.n	801cc3a <__sflush_r+0xae>
 801cc66:	6a21      	ldr	r1, [r4, #32]
 801cc68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cc6a:	4643      	mov	r3, r8
 801cc6c:	463a      	mov	r2, r7
 801cc6e:	4628      	mov	r0, r5
 801cc70:	47b0      	blx	r6
 801cc72:	2800      	cmp	r0, #0
 801cc74:	dc08      	bgt.n	801cc88 <__sflush_r+0xfc>
 801cc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc7e:	81a3      	strh	r3, [r4, #12]
 801cc80:	f04f 30ff 	mov.w	r0, #4294967295
 801cc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc88:	4407      	add	r7, r0
 801cc8a:	eba8 0800 	sub.w	r8, r8, r0
 801cc8e:	e7e7      	b.n	801cc60 <__sflush_r+0xd4>
 801cc90:	dfbffffe 	.word	0xdfbffffe

0801cc94 <_fflush_r>:
 801cc94:	b538      	push	{r3, r4, r5, lr}
 801cc96:	690b      	ldr	r3, [r1, #16]
 801cc98:	4605      	mov	r5, r0
 801cc9a:	460c      	mov	r4, r1
 801cc9c:	b913      	cbnz	r3, 801cca4 <_fflush_r+0x10>
 801cc9e:	2500      	movs	r5, #0
 801cca0:	4628      	mov	r0, r5
 801cca2:	bd38      	pop	{r3, r4, r5, pc}
 801cca4:	b118      	cbz	r0, 801ccae <_fflush_r+0x1a>
 801cca6:	6a03      	ldr	r3, [r0, #32]
 801cca8:	b90b      	cbnz	r3, 801ccae <_fflush_r+0x1a>
 801ccaa:	f7fd fde1 	bl	801a870 <__sinit>
 801ccae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d0f3      	beq.n	801cc9e <_fflush_r+0xa>
 801ccb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ccb8:	07d0      	lsls	r0, r2, #31
 801ccba:	d404      	bmi.n	801ccc6 <_fflush_r+0x32>
 801ccbc:	0599      	lsls	r1, r3, #22
 801ccbe:	d402      	bmi.n	801ccc6 <_fflush_r+0x32>
 801ccc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ccc2:	f7fd ff0a 	bl	801aada <__retarget_lock_acquire_recursive>
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	4621      	mov	r1, r4
 801ccca:	f7ff ff5f 	bl	801cb8c <__sflush_r>
 801ccce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ccd0:	07da      	lsls	r2, r3, #31
 801ccd2:	4605      	mov	r5, r0
 801ccd4:	d4e4      	bmi.n	801cca0 <_fflush_r+0xc>
 801ccd6:	89a3      	ldrh	r3, [r4, #12]
 801ccd8:	059b      	lsls	r3, r3, #22
 801ccda:	d4e1      	bmi.n	801cca0 <_fflush_r+0xc>
 801ccdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ccde:	f7fd fefd 	bl	801aadc <__retarget_lock_release_recursive>
 801cce2:	e7dd      	b.n	801cca0 <_fflush_r+0xc>

0801cce4 <memmove>:
 801cce4:	4288      	cmp	r0, r1
 801cce6:	b510      	push	{r4, lr}
 801cce8:	eb01 0402 	add.w	r4, r1, r2
 801ccec:	d902      	bls.n	801ccf4 <memmove+0x10>
 801ccee:	4284      	cmp	r4, r0
 801ccf0:	4623      	mov	r3, r4
 801ccf2:	d807      	bhi.n	801cd04 <memmove+0x20>
 801ccf4:	1e43      	subs	r3, r0, #1
 801ccf6:	42a1      	cmp	r1, r4
 801ccf8:	d008      	beq.n	801cd0c <memmove+0x28>
 801ccfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ccfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cd02:	e7f8      	b.n	801ccf6 <memmove+0x12>
 801cd04:	4402      	add	r2, r0
 801cd06:	4601      	mov	r1, r0
 801cd08:	428a      	cmp	r2, r1
 801cd0a:	d100      	bne.n	801cd0e <memmove+0x2a>
 801cd0c:	bd10      	pop	{r4, pc}
 801cd0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cd12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cd16:	e7f7      	b.n	801cd08 <memmove+0x24>

0801cd18 <_sbrk_r>:
 801cd18:	b538      	push	{r3, r4, r5, lr}
 801cd1a:	4d06      	ldr	r5, [pc, #24]	@ (801cd34 <_sbrk_r+0x1c>)
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	4604      	mov	r4, r0
 801cd20:	4608      	mov	r0, r1
 801cd22:	602b      	str	r3, [r5, #0]
 801cd24:	f7e6 f890 	bl	8002e48 <_sbrk>
 801cd28:	1c43      	adds	r3, r0, #1
 801cd2a:	d102      	bne.n	801cd32 <_sbrk_r+0x1a>
 801cd2c:	682b      	ldr	r3, [r5, #0]
 801cd2e:	b103      	cbz	r3, 801cd32 <_sbrk_r+0x1a>
 801cd30:	6023      	str	r3, [r4, #0]
 801cd32:	bd38      	pop	{r3, r4, r5, pc}
 801cd34:	2401da30 	.word	0x2401da30

0801cd38 <__assert_func>:
 801cd38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd3a:	4614      	mov	r4, r2
 801cd3c:	461a      	mov	r2, r3
 801cd3e:	4b09      	ldr	r3, [pc, #36]	@ (801cd64 <__assert_func+0x2c>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	4605      	mov	r5, r0
 801cd44:	68d8      	ldr	r0, [r3, #12]
 801cd46:	b954      	cbnz	r4, 801cd5e <__assert_func+0x26>
 801cd48:	4b07      	ldr	r3, [pc, #28]	@ (801cd68 <__assert_func+0x30>)
 801cd4a:	461c      	mov	r4, r3
 801cd4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd50:	9100      	str	r1, [sp, #0]
 801cd52:	462b      	mov	r3, r5
 801cd54:	4905      	ldr	r1, [pc, #20]	@ (801cd6c <__assert_func+0x34>)
 801cd56:	f000 f84f 	bl	801cdf8 <fiprintf>
 801cd5a:	f000 f85f 	bl	801ce1c <abort>
 801cd5e:	4b04      	ldr	r3, [pc, #16]	@ (801cd70 <__assert_func+0x38>)
 801cd60:	e7f4      	b.n	801cd4c <__assert_func+0x14>
 801cd62:	bf00      	nop
 801cd64:	240002ac 	.word	0x240002ac
 801cd68:	0801f25c 	.word	0x0801f25c
 801cd6c:	0801f22e 	.word	0x0801f22e
 801cd70:	0801f221 	.word	0x0801f221

0801cd74 <_calloc_r>:
 801cd74:	b570      	push	{r4, r5, r6, lr}
 801cd76:	fba1 5402 	umull	r5, r4, r1, r2
 801cd7a:	b93c      	cbnz	r4, 801cd8c <_calloc_r+0x18>
 801cd7c:	4629      	mov	r1, r5
 801cd7e:	f7ff f853 	bl	801be28 <_malloc_r>
 801cd82:	4606      	mov	r6, r0
 801cd84:	b928      	cbnz	r0, 801cd92 <_calloc_r+0x1e>
 801cd86:	2600      	movs	r6, #0
 801cd88:	4630      	mov	r0, r6
 801cd8a:	bd70      	pop	{r4, r5, r6, pc}
 801cd8c:	220c      	movs	r2, #12
 801cd8e:	6002      	str	r2, [r0, #0]
 801cd90:	e7f9      	b.n	801cd86 <_calloc_r+0x12>
 801cd92:	462a      	mov	r2, r5
 801cd94:	4621      	mov	r1, r4
 801cd96:	f7fd fe04 	bl	801a9a2 <memset>
 801cd9a:	e7f5      	b.n	801cd88 <_calloc_r+0x14>

0801cd9c <_realloc_r>:
 801cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cda0:	4680      	mov	r8, r0
 801cda2:	4615      	mov	r5, r2
 801cda4:	460c      	mov	r4, r1
 801cda6:	b921      	cbnz	r1, 801cdb2 <_realloc_r+0x16>
 801cda8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cdac:	4611      	mov	r1, r2
 801cdae:	f7ff b83b 	b.w	801be28 <_malloc_r>
 801cdb2:	b92a      	cbnz	r2, 801cdc0 <_realloc_r+0x24>
 801cdb4:	f7fe fc8a 	bl	801b6cc <_free_r>
 801cdb8:	2400      	movs	r4, #0
 801cdba:	4620      	mov	r0, r4
 801cdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdc0:	f000 f833 	bl	801ce2a <_malloc_usable_size_r>
 801cdc4:	4285      	cmp	r5, r0
 801cdc6:	4606      	mov	r6, r0
 801cdc8:	d802      	bhi.n	801cdd0 <_realloc_r+0x34>
 801cdca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801cdce:	d8f4      	bhi.n	801cdba <_realloc_r+0x1e>
 801cdd0:	4629      	mov	r1, r5
 801cdd2:	4640      	mov	r0, r8
 801cdd4:	f7ff f828 	bl	801be28 <_malloc_r>
 801cdd8:	4607      	mov	r7, r0
 801cdda:	2800      	cmp	r0, #0
 801cddc:	d0ec      	beq.n	801cdb8 <_realloc_r+0x1c>
 801cdde:	42b5      	cmp	r5, r6
 801cde0:	462a      	mov	r2, r5
 801cde2:	4621      	mov	r1, r4
 801cde4:	bf28      	it	cs
 801cde6:	4632      	movcs	r2, r6
 801cde8:	f7fd fe79 	bl	801aade <memcpy>
 801cdec:	4621      	mov	r1, r4
 801cdee:	4640      	mov	r0, r8
 801cdf0:	f7fe fc6c 	bl	801b6cc <_free_r>
 801cdf4:	463c      	mov	r4, r7
 801cdf6:	e7e0      	b.n	801cdba <_realloc_r+0x1e>

0801cdf8 <fiprintf>:
 801cdf8:	b40e      	push	{r1, r2, r3}
 801cdfa:	b503      	push	{r0, r1, lr}
 801cdfc:	4601      	mov	r1, r0
 801cdfe:	ab03      	add	r3, sp, #12
 801ce00:	4805      	ldr	r0, [pc, #20]	@ (801ce18 <fiprintf+0x20>)
 801ce02:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce06:	6800      	ldr	r0, [r0, #0]
 801ce08:	9301      	str	r3, [sp, #4]
 801ce0a:	f000 f83f 	bl	801ce8c <_vfiprintf_r>
 801ce0e:	b002      	add	sp, #8
 801ce10:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce14:	b003      	add	sp, #12
 801ce16:	4770      	bx	lr
 801ce18:	240002ac 	.word	0x240002ac

0801ce1c <abort>:
 801ce1c:	b508      	push	{r3, lr}
 801ce1e:	2006      	movs	r0, #6
 801ce20:	f000 fa08 	bl	801d234 <raise>
 801ce24:	2001      	movs	r0, #1
 801ce26:	f7e5 ff97 	bl	8002d58 <_exit>

0801ce2a <_malloc_usable_size_r>:
 801ce2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce2e:	1f18      	subs	r0, r3, #4
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	bfbc      	itt	lt
 801ce34:	580b      	ldrlt	r3, [r1, r0]
 801ce36:	18c0      	addlt	r0, r0, r3
 801ce38:	4770      	bx	lr

0801ce3a <__sfputc_r>:
 801ce3a:	6893      	ldr	r3, [r2, #8]
 801ce3c:	3b01      	subs	r3, #1
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	b410      	push	{r4}
 801ce42:	6093      	str	r3, [r2, #8]
 801ce44:	da08      	bge.n	801ce58 <__sfputc_r+0x1e>
 801ce46:	6994      	ldr	r4, [r2, #24]
 801ce48:	42a3      	cmp	r3, r4
 801ce4a:	db01      	blt.n	801ce50 <__sfputc_r+0x16>
 801ce4c:	290a      	cmp	r1, #10
 801ce4e:	d103      	bne.n	801ce58 <__sfputc_r+0x1e>
 801ce50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce54:	f000 b932 	b.w	801d0bc <__swbuf_r>
 801ce58:	6813      	ldr	r3, [r2, #0]
 801ce5a:	1c58      	adds	r0, r3, #1
 801ce5c:	6010      	str	r0, [r2, #0]
 801ce5e:	7019      	strb	r1, [r3, #0]
 801ce60:	4608      	mov	r0, r1
 801ce62:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce66:	4770      	bx	lr

0801ce68 <__sfputs_r>:
 801ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce6a:	4606      	mov	r6, r0
 801ce6c:	460f      	mov	r7, r1
 801ce6e:	4614      	mov	r4, r2
 801ce70:	18d5      	adds	r5, r2, r3
 801ce72:	42ac      	cmp	r4, r5
 801ce74:	d101      	bne.n	801ce7a <__sfputs_r+0x12>
 801ce76:	2000      	movs	r0, #0
 801ce78:	e007      	b.n	801ce8a <__sfputs_r+0x22>
 801ce7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce7e:	463a      	mov	r2, r7
 801ce80:	4630      	mov	r0, r6
 801ce82:	f7ff ffda 	bl	801ce3a <__sfputc_r>
 801ce86:	1c43      	adds	r3, r0, #1
 801ce88:	d1f3      	bne.n	801ce72 <__sfputs_r+0xa>
 801ce8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ce8c <_vfiprintf_r>:
 801ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce90:	460d      	mov	r5, r1
 801ce92:	b09d      	sub	sp, #116	@ 0x74
 801ce94:	4614      	mov	r4, r2
 801ce96:	4698      	mov	r8, r3
 801ce98:	4606      	mov	r6, r0
 801ce9a:	b118      	cbz	r0, 801cea4 <_vfiprintf_r+0x18>
 801ce9c:	6a03      	ldr	r3, [r0, #32]
 801ce9e:	b90b      	cbnz	r3, 801cea4 <_vfiprintf_r+0x18>
 801cea0:	f7fd fce6 	bl	801a870 <__sinit>
 801cea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cea6:	07d9      	lsls	r1, r3, #31
 801cea8:	d405      	bmi.n	801ceb6 <_vfiprintf_r+0x2a>
 801ceaa:	89ab      	ldrh	r3, [r5, #12]
 801ceac:	059a      	lsls	r2, r3, #22
 801ceae:	d402      	bmi.n	801ceb6 <_vfiprintf_r+0x2a>
 801ceb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ceb2:	f7fd fe12 	bl	801aada <__retarget_lock_acquire_recursive>
 801ceb6:	89ab      	ldrh	r3, [r5, #12]
 801ceb8:	071b      	lsls	r3, r3, #28
 801ceba:	d501      	bpl.n	801cec0 <_vfiprintf_r+0x34>
 801cebc:	692b      	ldr	r3, [r5, #16]
 801cebe:	b99b      	cbnz	r3, 801cee8 <_vfiprintf_r+0x5c>
 801cec0:	4629      	mov	r1, r5
 801cec2:	4630      	mov	r0, r6
 801cec4:	f000 f938 	bl	801d138 <__swsetup_r>
 801cec8:	b170      	cbz	r0, 801cee8 <_vfiprintf_r+0x5c>
 801ceca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cecc:	07dc      	lsls	r4, r3, #31
 801cece:	d504      	bpl.n	801ceda <_vfiprintf_r+0x4e>
 801ced0:	f04f 30ff 	mov.w	r0, #4294967295
 801ced4:	b01d      	add	sp, #116	@ 0x74
 801ced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceda:	89ab      	ldrh	r3, [r5, #12]
 801cedc:	0598      	lsls	r0, r3, #22
 801cede:	d4f7      	bmi.n	801ced0 <_vfiprintf_r+0x44>
 801cee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cee2:	f7fd fdfb 	bl	801aadc <__retarget_lock_release_recursive>
 801cee6:	e7f3      	b.n	801ced0 <_vfiprintf_r+0x44>
 801cee8:	2300      	movs	r3, #0
 801ceea:	9309      	str	r3, [sp, #36]	@ 0x24
 801ceec:	2320      	movs	r3, #32
 801ceee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cef2:	f8cd 800c 	str.w	r8, [sp, #12]
 801cef6:	2330      	movs	r3, #48	@ 0x30
 801cef8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d0a8 <_vfiprintf_r+0x21c>
 801cefc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cf00:	f04f 0901 	mov.w	r9, #1
 801cf04:	4623      	mov	r3, r4
 801cf06:	469a      	mov	sl, r3
 801cf08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf0c:	b10a      	cbz	r2, 801cf12 <_vfiprintf_r+0x86>
 801cf0e:	2a25      	cmp	r2, #37	@ 0x25
 801cf10:	d1f9      	bne.n	801cf06 <_vfiprintf_r+0x7a>
 801cf12:	ebba 0b04 	subs.w	fp, sl, r4
 801cf16:	d00b      	beq.n	801cf30 <_vfiprintf_r+0xa4>
 801cf18:	465b      	mov	r3, fp
 801cf1a:	4622      	mov	r2, r4
 801cf1c:	4629      	mov	r1, r5
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7ff ffa2 	bl	801ce68 <__sfputs_r>
 801cf24:	3001      	adds	r0, #1
 801cf26:	f000 80a7 	beq.w	801d078 <_vfiprintf_r+0x1ec>
 801cf2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf2c:	445a      	add	r2, fp
 801cf2e:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf30:	f89a 3000 	ldrb.w	r3, [sl]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	f000 809f 	beq.w	801d078 <_vfiprintf_r+0x1ec>
 801cf3a:	2300      	movs	r3, #0
 801cf3c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf44:	f10a 0a01 	add.w	sl, sl, #1
 801cf48:	9304      	str	r3, [sp, #16]
 801cf4a:	9307      	str	r3, [sp, #28]
 801cf4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cf50:	931a      	str	r3, [sp, #104]	@ 0x68
 801cf52:	4654      	mov	r4, sl
 801cf54:	2205      	movs	r2, #5
 801cf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf5a:	4853      	ldr	r0, [pc, #332]	@ (801d0a8 <_vfiprintf_r+0x21c>)
 801cf5c:	f7e3 f9e8 	bl	8000330 <memchr>
 801cf60:	9a04      	ldr	r2, [sp, #16]
 801cf62:	b9d8      	cbnz	r0, 801cf9c <_vfiprintf_r+0x110>
 801cf64:	06d1      	lsls	r1, r2, #27
 801cf66:	bf44      	itt	mi
 801cf68:	2320      	movmi	r3, #32
 801cf6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cf6e:	0713      	lsls	r3, r2, #28
 801cf70:	bf44      	itt	mi
 801cf72:	232b      	movmi	r3, #43	@ 0x2b
 801cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cf78:	f89a 3000 	ldrb.w	r3, [sl]
 801cf7c:	2b2a      	cmp	r3, #42	@ 0x2a
 801cf7e:	d015      	beq.n	801cfac <_vfiprintf_r+0x120>
 801cf80:	9a07      	ldr	r2, [sp, #28]
 801cf82:	4654      	mov	r4, sl
 801cf84:	2000      	movs	r0, #0
 801cf86:	f04f 0c0a 	mov.w	ip, #10
 801cf8a:	4621      	mov	r1, r4
 801cf8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf90:	3b30      	subs	r3, #48	@ 0x30
 801cf92:	2b09      	cmp	r3, #9
 801cf94:	d94b      	bls.n	801d02e <_vfiprintf_r+0x1a2>
 801cf96:	b1b0      	cbz	r0, 801cfc6 <_vfiprintf_r+0x13a>
 801cf98:	9207      	str	r2, [sp, #28]
 801cf9a:	e014      	b.n	801cfc6 <_vfiprintf_r+0x13a>
 801cf9c:	eba0 0308 	sub.w	r3, r0, r8
 801cfa0:	fa09 f303 	lsl.w	r3, r9, r3
 801cfa4:	4313      	orrs	r3, r2
 801cfa6:	9304      	str	r3, [sp, #16]
 801cfa8:	46a2      	mov	sl, r4
 801cfaa:	e7d2      	b.n	801cf52 <_vfiprintf_r+0xc6>
 801cfac:	9b03      	ldr	r3, [sp, #12]
 801cfae:	1d19      	adds	r1, r3, #4
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	9103      	str	r1, [sp, #12]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	bfbb      	ittet	lt
 801cfb8:	425b      	neglt	r3, r3
 801cfba:	f042 0202 	orrlt.w	r2, r2, #2
 801cfbe:	9307      	strge	r3, [sp, #28]
 801cfc0:	9307      	strlt	r3, [sp, #28]
 801cfc2:	bfb8      	it	lt
 801cfc4:	9204      	strlt	r2, [sp, #16]
 801cfc6:	7823      	ldrb	r3, [r4, #0]
 801cfc8:	2b2e      	cmp	r3, #46	@ 0x2e
 801cfca:	d10a      	bne.n	801cfe2 <_vfiprintf_r+0x156>
 801cfcc:	7863      	ldrb	r3, [r4, #1]
 801cfce:	2b2a      	cmp	r3, #42	@ 0x2a
 801cfd0:	d132      	bne.n	801d038 <_vfiprintf_r+0x1ac>
 801cfd2:	9b03      	ldr	r3, [sp, #12]
 801cfd4:	1d1a      	adds	r2, r3, #4
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	9203      	str	r2, [sp, #12]
 801cfda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cfde:	3402      	adds	r4, #2
 801cfe0:	9305      	str	r3, [sp, #20]
 801cfe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d0b8 <_vfiprintf_r+0x22c>
 801cfe6:	7821      	ldrb	r1, [r4, #0]
 801cfe8:	2203      	movs	r2, #3
 801cfea:	4650      	mov	r0, sl
 801cfec:	f7e3 f9a0 	bl	8000330 <memchr>
 801cff0:	b138      	cbz	r0, 801d002 <_vfiprintf_r+0x176>
 801cff2:	9b04      	ldr	r3, [sp, #16]
 801cff4:	eba0 000a 	sub.w	r0, r0, sl
 801cff8:	2240      	movs	r2, #64	@ 0x40
 801cffa:	4082      	lsls	r2, r0
 801cffc:	4313      	orrs	r3, r2
 801cffe:	3401      	adds	r4, #1
 801d000:	9304      	str	r3, [sp, #16]
 801d002:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d006:	4829      	ldr	r0, [pc, #164]	@ (801d0ac <_vfiprintf_r+0x220>)
 801d008:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d00c:	2206      	movs	r2, #6
 801d00e:	f7e3 f98f 	bl	8000330 <memchr>
 801d012:	2800      	cmp	r0, #0
 801d014:	d03f      	beq.n	801d096 <_vfiprintf_r+0x20a>
 801d016:	4b26      	ldr	r3, [pc, #152]	@ (801d0b0 <_vfiprintf_r+0x224>)
 801d018:	bb1b      	cbnz	r3, 801d062 <_vfiprintf_r+0x1d6>
 801d01a:	9b03      	ldr	r3, [sp, #12]
 801d01c:	3307      	adds	r3, #7
 801d01e:	f023 0307 	bic.w	r3, r3, #7
 801d022:	3308      	adds	r3, #8
 801d024:	9303      	str	r3, [sp, #12]
 801d026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d028:	443b      	add	r3, r7
 801d02a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d02c:	e76a      	b.n	801cf04 <_vfiprintf_r+0x78>
 801d02e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d032:	460c      	mov	r4, r1
 801d034:	2001      	movs	r0, #1
 801d036:	e7a8      	b.n	801cf8a <_vfiprintf_r+0xfe>
 801d038:	2300      	movs	r3, #0
 801d03a:	3401      	adds	r4, #1
 801d03c:	9305      	str	r3, [sp, #20]
 801d03e:	4619      	mov	r1, r3
 801d040:	f04f 0c0a 	mov.w	ip, #10
 801d044:	4620      	mov	r0, r4
 801d046:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d04a:	3a30      	subs	r2, #48	@ 0x30
 801d04c:	2a09      	cmp	r2, #9
 801d04e:	d903      	bls.n	801d058 <_vfiprintf_r+0x1cc>
 801d050:	2b00      	cmp	r3, #0
 801d052:	d0c6      	beq.n	801cfe2 <_vfiprintf_r+0x156>
 801d054:	9105      	str	r1, [sp, #20]
 801d056:	e7c4      	b.n	801cfe2 <_vfiprintf_r+0x156>
 801d058:	fb0c 2101 	mla	r1, ip, r1, r2
 801d05c:	4604      	mov	r4, r0
 801d05e:	2301      	movs	r3, #1
 801d060:	e7f0      	b.n	801d044 <_vfiprintf_r+0x1b8>
 801d062:	ab03      	add	r3, sp, #12
 801d064:	9300      	str	r3, [sp, #0]
 801d066:	462a      	mov	r2, r5
 801d068:	4b12      	ldr	r3, [pc, #72]	@ (801d0b4 <_vfiprintf_r+0x228>)
 801d06a:	a904      	add	r1, sp, #16
 801d06c:	4630      	mov	r0, r6
 801d06e:	f7fc ffcb 	bl	801a008 <_printf_float>
 801d072:	4607      	mov	r7, r0
 801d074:	1c78      	adds	r0, r7, #1
 801d076:	d1d6      	bne.n	801d026 <_vfiprintf_r+0x19a>
 801d078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d07a:	07d9      	lsls	r1, r3, #31
 801d07c:	d405      	bmi.n	801d08a <_vfiprintf_r+0x1fe>
 801d07e:	89ab      	ldrh	r3, [r5, #12]
 801d080:	059a      	lsls	r2, r3, #22
 801d082:	d402      	bmi.n	801d08a <_vfiprintf_r+0x1fe>
 801d084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d086:	f7fd fd29 	bl	801aadc <__retarget_lock_release_recursive>
 801d08a:	89ab      	ldrh	r3, [r5, #12]
 801d08c:	065b      	lsls	r3, r3, #25
 801d08e:	f53f af1f 	bmi.w	801ced0 <_vfiprintf_r+0x44>
 801d092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d094:	e71e      	b.n	801ced4 <_vfiprintf_r+0x48>
 801d096:	ab03      	add	r3, sp, #12
 801d098:	9300      	str	r3, [sp, #0]
 801d09a:	462a      	mov	r2, r5
 801d09c:	4b05      	ldr	r3, [pc, #20]	@ (801d0b4 <_vfiprintf_r+0x228>)
 801d09e:	a904      	add	r1, sp, #16
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	f7fd fa39 	bl	801a518 <_printf_i>
 801d0a6:	e7e4      	b.n	801d072 <_vfiprintf_r+0x1e6>
 801d0a8:	0801f210 	.word	0x0801f210
 801d0ac:	0801f21a 	.word	0x0801f21a
 801d0b0:	0801a009 	.word	0x0801a009
 801d0b4:	0801ce69 	.word	0x0801ce69
 801d0b8:	0801f216 	.word	0x0801f216

0801d0bc <__swbuf_r>:
 801d0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0be:	460e      	mov	r6, r1
 801d0c0:	4614      	mov	r4, r2
 801d0c2:	4605      	mov	r5, r0
 801d0c4:	b118      	cbz	r0, 801d0ce <__swbuf_r+0x12>
 801d0c6:	6a03      	ldr	r3, [r0, #32]
 801d0c8:	b90b      	cbnz	r3, 801d0ce <__swbuf_r+0x12>
 801d0ca:	f7fd fbd1 	bl	801a870 <__sinit>
 801d0ce:	69a3      	ldr	r3, [r4, #24]
 801d0d0:	60a3      	str	r3, [r4, #8]
 801d0d2:	89a3      	ldrh	r3, [r4, #12]
 801d0d4:	071a      	lsls	r2, r3, #28
 801d0d6:	d501      	bpl.n	801d0dc <__swbuf_r+0x20>
 801d0d8:	6923      	ldr	r3, [r4, #16]
 801d0da:	b943      	cbnz	r3, 801d0ee <__swbuf_r+0x32>
 801d0dc:	4621      	mov	r1, r4
 801d0de:	4628      	mov	r0, r5
 801d0e0:	f000 f82a 	bl	801d138 <__swsetup_r>
 801d0e4:	b118      	cbz	r0, 801d0ee <__swbuf_r+0x32>
 801d0e6:	f04f 37ff 	mov.w	r7, #4294967295
 801d0ea:	4638      	mov	r0, r7
 801d0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0ee:	6823      	ldr	r3, [r4, #0]
 801d0f0:	6922      	ldr	r2, [r4, #16]
 801d0f2:	1a98      	subs	r0, r3, r2
 801d0f4:	6963      	ldr	r3, [r4, #20]
 801d0f6:	b2f6      	uxtb	r6, r6
 801d0f8:	4283      	cmp	r3, r0
 801d0fa:	4637      	mov	r7, r6
 801d0fc:	dc05      	bgt.n	801d10a <__swbuf_r+0x4e>
 801d0fe:	4621      	mov	r1, r4
 801d100:	4628      	mov	r0, r5
 801d102:	f7ff fdc7 	bl	801cc94 <_fflush_r>
 801d106:	2800      	cmp	r0, #0
 801d108:	d1ed      	bne.n	801d0e6 <__swbuf_r+0x2a>
 801d10a:	68a3      	ldr	r3, [r4, #8]
 801d10c:	3b01      	subs	r3, #1
 801d10e:	60a3      	str	r3, [r4, #8]
 801d110:	6823      	ldr	r3, [r4, #0]
 801d112:	1c5a      	adds	r2, r3, #1
 801d114:	6022      	str	r2, [r4, #0]
 801d116:	701e      	strb	r6, [r3, #0]
 801d118:	6962      	ldr	r2, [r4, #20]
 801d11a:	1c43      	adds	r3, r0, #1
 801d11c:	429a      	cmp	r2, r3
 801d11e:	d004      	beq.n	801d12a <__swbuf_r+0x6e>
 801d120:	89a3      	ldrh	r3, [r4, #12]
 801d122:	07db      	lsls	r3, r3, #31
 801d124:	d5e1      	bpl.n	801d0ea <__swbuf_r+0x2e>
 801d126:	2e0a      	cmp	r6, #10
 801d128:	d1df      	bne.n	801d0ea <__swbuf_r+0x2e>
 801d12a:	4621      	mov	r1, r4
 801d12c:	4628      	mov	r0, r5
 801d12e:	f7ff fdb1 	bl	801cc94 <_fflush_r>
 801d132:	2800      	cmp	r0, #0
 801d134:	d0d9      	beq.n	801d0ea <__swbuf_r+0x2e>
 801d136:	e7d6      	b.n	801d0e6 <__swbuf_r+0x2a>

0801d138 <__swsetup_r>:
 801d138:	b538      	push	{r3, r4, r5, lr}
 801d13a:	4b29      	ldr	r3, [pc, #164]	@ (801d1e0 <__swsetup_r+0xa8>)
 801d13c:	4605      	mov	r5, r0
 801d13e:	6818      	ldr	r0, [r3, #0]
 801d140:	460c      	mov	r4, r1
 801d142:	b118      	cbz	r0, 801d14c <__swsetup_r+0x14>
 801d144:	6a03      	ldr	r3, [r0, #32]
 801d146:	b90b      	cbnz	r3, 801d14c <__swsetup_r+0x14>
 801d148:	f7fd fb92 	bl	801a870 <__sinit>
 801d14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d150:	0719      	lsls	r1, r3, #28
 801d152:	d422      	bmi.n	801d19a <__swsetup_r+0x62>
 801d154:	06da      	lsls	r2, r3, #27
 801d156:	d407      	bmi.n	801d168 <__swsetup_r+0x30>
 801d158:	2209      	movs	r2, #9
 801d15a:	602a      	str	r2, [r5, #0]
 801d15c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d160:	81a3      	strh	r3, [r4, #12]
 801d162:	f04f 30ff 	mov.w	r0, #4294967295
 801d166:	e033      	b.n	801d1d0 <__swsetup_r+0x98>
 801d168:	0758      	lsls	r0, r3, #29
 801d16a:	d512      	bpl.n	801d192 <__swsetup_r+0x5a>
 801d16c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d16e:	b141      	cbz	r1, 801d182 <__swsetup_r+0x4a>
 801d170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d174:	4299      	cmp	r1, r3
 801d176:	d002      	beq.n	801d17e <__swsetup_r+0x46>
 801d178:	4628      	mov	r0, r5
 801d17a:	f7fe faa7 	bl	801b6cc <_free_r>
 801d17e:	2300      	movs	r3, #0
 801d180:	6363      	str	r3, [r4, #52]	@ 0x34
 801d182:	89a3      	ldrh	r3, [r4, #12]
 801d184:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d188:	81a3      	strh	r3, [r4, #12]
 801d18a:	2300      	movs	r3, #0
 801d18c:	6063      	str	r3, [r4, #4]
 801d18e:	6923      	ldr	r3, [r4, #16]
 801d190:	6023      	str	r3, [r4, #0]
 801d192:	89a3      	ldrh	r3, [r4, #12]
 801d194:	f043 0308 	orr.w	r3, r3, #8
 801d198:	81a3      	strh	r3, [r4, #12]
 801d19a:	6923      	ldr	r3, [r4, #16]
 801d19c:	b94b      	cbnz	r3, 801d1b2 <__swsetup_r+0x7a>
 801d19e:	89a3      	ldrh	r3, [r4, #12]
 801d1a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d1a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d1a8:	d003      	beq.n	801d1b2 <__swsetup_r+0x7a>
 801d1aa:	4621      	mov	r1, r4
 801d1ac:	4628      	mov	r0, r5
 801d1ae:	f000 f883 	bl	801d2b8 <__smakebuf_r>
 801d1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1b6:	f013 0201 	ands.w	r2, r3, #1
 801d1ba:	d00a      	beq.n	801d1d2 <__swsetup_r+0x9a>
 801d1bc:	2200      	movs	r2, #0
 801d1be:	60a2      	str	r2, [r4, #8]
 801d1c0:	6962      	ldr	r2, [r4, #20]
 801d1c2:	4252      	negs	r2, r2
 801d1c4:	61a2      	str	r2, [r4, #24]
 801d1c6:	6922      	ldr	r2, [r4, #16]
 801d1c8:	b942      	cbnz	r2, 801d1dc <__swsetup_r+0xa4>
 801d1ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d1ce:	d1c5      	bne.n	801d15c <__swsetup_r+0x24>
 801d1d0:	bd38      	pop	{r3, r4, r5, pc}
 801d1d2:	0799      	lsls	r1, r3, #30
 801d1d4:	bf58      	it	pl
 801d1d6:	6962      	ldrpl	r2, [r4, #20]
 801d1d8:	60a2      	str	r2, [r4, #8]
 801d1da:	e7f4      	b.n	801d1c6 <__swsetup_r+0x8e>
 801d1dc:	2000      	movs	r0, #0
 801d1de:	e7f7      	b.n	801d1d0 <__swsetup_r+0x98>
 801d1e0:	240002ac 	.word	0x240002ac

0801d1e4 <_raise_r>:
 801d1e4:	291f      	cmp	r1, #31
 801d1e6:	b538      	push	{r3, r4, r5, lr}
 801d1e8:	4605      	mov	r5, r0
 801d1ea:	460c      	mov	r4, r1
 801d1ec:	d904      	bls.n	801d1f8 <_raise_r+0x14>
 801d1ee:	2316      	movs	r3, #22
 801d1f0:	6003      	str	r3, [r0, #0]
 801d1f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d1f6:	bd38      	pop	{r3, r4, r5, pc}
 801d1f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d1fa:	b112      	cbz	r2, 801d202 <_raise_r+0x1e>
 801d1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d200:	b94b      	cbnz	r3, 801d216 <_raise_r+0x32>
 801d202:	4628      	mov	r0, r5
 801d204:	f000 f830 	bl	801d268 <_getpid_r>
 801d208:	4622      	mov	r2, r4
 801d20a:	4601      	mov	r1, r0
 801d20c:	4628      	mov	r0, r5
 801d20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d212:	f000 b817 	b.w	801d244 <_kill_r>
 801d216:	2b01      	cmp	r3, #1
 801d218:	d00a      	beq.n	801d230 <_raise_r+0x4c>
 801d21a:	1c59      	adds	r1, r3, #1
 801d21c:	d103      	bne.n	801d226 <_raise_r+0x42>
 801d21e:	2316      	movs	r3, #22
 801d220:	6003      	str	r3, [r0, #0]
 801d222:	2001      	movs	r0, #1
 801d224:	e7e7      	b.n	801d1f6 <_raise_r+0x12>
 801d226:	2100      	movs	r1, #0
 801d228:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d22c:	4620      	mov	r0, r4
 801d22e:	4798      	blx	r3
 801d230:	2000      	movs	r0, #0
 801d232:	e7e0      	b.n	801d1f6 <_raise_r+0x12>

0801d234 <raise>:
 801d234:	4b02      	ldr	r3, [pc, #8]	@ (801d240 <raise+0xc>)
 801d236:	4601      	mov	r1, r0
 801d238:	6818      	ldr	r0, [r3, #0]
 801d23a:	f7ff bfd3 	b.w	801d1e4 <_raise_r>
 801d23e:	bf00      	nop
 801d240:	240002ac 	.word	0x240002ac

0801d244 <_kill_r>:
 801d244:	b538      	push	{r3, r4, r5, lr}
 801d246:	4d07      	ldr	r5, [pc, #28]	@ (801d264 <_kill_r+0x20>)
 801d248:	2300      	movs	r3, #0
 801d24a:	4604      	mov	r4, r0
 801d24c:	4608      	mov	r0, r1
 801d24e:	4611      	mov	r1, r2
 801d250:	602b      	str	r3, [r5, #0]
 801d252:	f7e5 fd71 	bl	8002d38 <_kill>
 801d256:	1c43      	adds	r3, r0, #1
 801d258:	d102      	bne.n	801d260 <_kill_r+0x1c>
 801d25a:	682b      	ldr	r3, [r5, #0]
 801d25c:	b103      	cbz	r3, 801d260 <_kill_r+0x1c>
 801d25e:	6023      	str	r3, [r4, #0]
 801d260:	bd38      	pop	{r3, r4, r5, pc}
 801d262:	bf00      	nop
 801d264:	2401da30 	.word	0x2401da30

0801d268 <_getpid_r>:
 801d268:	f7e5 bd5e 	b.w	8002d28 <_getpid>

0801d26c <__swhatbuf_r>:
 801d26c:	b570      	push	{r4, r5, r6, lr}
 801d26e:	460c      	mov	r4, r1
 801d270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d274:	2900      	cmp	r1, #0
 801d276:	b096      	sub	sp, #88	@ 0x58
 801d278:	4615      	mov	r5, r2
 801d27a:	461e      	mov	r6, r3
 801d27c:	da0d      	bge.n	801d29a <__swhatbuf_r+0x2e>
 801d27e:	89a3      	ldrh	r3, [r4, #12]
 801d280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d284:	f04f 0100 	mov.w	r1, #0
 801d288:	bf14      	ite	ne
 801d28a:	2340      	movne	r3, #64	@ 0x40
 801d28c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d290:	2000      	movs	r0, #0
 801d292:	6031      	str	r1, [r6, #0]
 801d294:	602b      	str	r3, [r5, #0]
 801d296:	b016      	add	sp, #88	@ 0x58
 801d298:	bd70      	pop	{r4, r5, r6, pc}
 801d29a:	466a      	mov	r2, sp
 801d29c:	f000 f848 	bl	801d330 <_fstat_r>
 801d2a0:	2800      	cmp	r0, #0
 801d2a2:	dbec      	blt.n	801d27e <__swhatbuf_r+0x12>
 801d2a4:	9901      	ldr	r1, [sp, #4]
 801d2a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d2aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d2ae:	4259      	negs	r1, r3
 801d2b0:	4159      	adcs	r1, r3
 801d2b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d2b6:	e7eb      	b.n	801d290 <__swhatbuf_r+0x24>

0801d2b8 <__smakebuf_r>:
 801d2b8:	898b      	ldrh	r3, [r1, #12]
 801d2ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d2bc:	079d      	lsls	r5, r3, #30
 801d2be:	4606      	mov	r6, r0
 801d2c0:	460c      	mov	r4, r1
 801d2c2:	d507      	bpl.n	801d2d4 <__smakebuf_r+0x1c>
 801d2c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d2c8:	6023      	str	r3, [r4, #0]
 801d2ca:	6123      	str	r3, [r4, #16]
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	6163      	str	r3, [r4, #20]
 801d2d0:	b003      	add	sp, #12
 801d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2d4:	ab01      	add	r3, sp, #4
 801d2d6:	466a      	mov	r2, sp
 801d2d8:	f7ff ffc8 	bl	801d26c <__swhatbuf_r>
 801d2dc:	9f00      	ldr	r7, [sp, #0]
 801d2de:	4605      	mov	r5, r0
 801d2e0:	4639      	mov	r1, r7
 801d2e2:	4630      	mov	r0, r6
 801d2e4:	f7fe fda0 	bl	801be28 <_malloc_r>
 801d2e8:	b948      	cbnz	r0, 801d2fe <__smakebuf_r+0x46>
 801d2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2ee:	059a      	lsls	r2, r3, #22
 801d2f0:	d4ee      	bmi.n	801d2d0 <__smakebuf_r+0x18>
 801d2f2:	f023 0303 	bic.w	r3, r3, #3
 801d2f6:	f043 0302 	orr.w	r3, r3, #2
 801d2fa:	81a3      	strh	r3, [r4, #12]
 801d2fc:	e7e2      	b.n	801d2c4 <__smakebuf_r+0xc>
 801d2fe:	89a3      	ldrh	r3, [r4, #12]
 801d300:	6020      	str	r0, [r4, #0]
 801d302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d306:	81a3      	strh	r3, [r4, #12]
 801d308:	9b01      	ldr	r3, [sp, #4]
 801d30a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d30e:	b15b      	cbz	r3, 801d328 <__smakebuf_r+0x70>
 801d310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d314:	4630      	mov	r0, r6
 801d316:	f000 f81d 	bl	801d354 <_isatty_r>
 801d31a:	b128      	cbz	r0, 801d328 <__smakebuf_r+0x70>
 801d31c:	89a3      	ldrh	r3, [r4, #12]
 801d31e:	f023 0303 	bic.w	r3, r3, #3
 801d322:	f043 0301 	orr.w	r3, r3, #1
 801d326:	81a3      	strh	r3, [r4, #12]
 801d328:	89a3      	ldrh	r3, [r4, #12]
 801d32a:	431d      	orrs	r5, r3
 801d32c:	81a5      	strh	r5, [r4, #12]
 801d32e:	e7cf      	b.n	801d2d0 <__smakebuf_r+0x18>

0801d330 <_fstat_r>:
 801d330:	b538      	push	{r3, r4, r5, lr}
 801d332:	4d07      	ldr	r5, [pc, #28]	@ (801d350 <_fstat_r+0x20>)
 801d334:	2300      	movs	r3, #0
 801d336:	4604      	mov	r4, r0
 801d338:	4608      	mov	r0, r1
 801d33a:	4611      	mov	r1, r2
 801d33c:	602b      	str	r3, [r5, #0]
 801d33e:	f7e5 fd5b 	bl	8002df8 <_fstat>
 801d342:	1c43      	adds	r3, r0, #1
 801d344:	d102      	bne.n	801d34c <_fstat_r+0x1c>
 801d346:	682b      	ldr	r3, [r5, #0]
 801d348:	b103      	cbz	r3, 801d34c <_fstat_r+0x1c>
 801d34a:	6023      	str	r3, [r4, #0]
 801d34c:	bd38      	pop	{r3, r4, r5, pc}
 801d34e:	bf00      	nop
 801d350:	2401da30 	.word	0x2401da30

0801d354 <_isatty_r>:
 801d354:	b538      	push	{r3, r4, r5, lr}
 801d356:	4d06      	ldr	r5, [pc, #24]	@ (801d370 <_isatty_r+0x1c>)
 801d358:	2300      	movs	r3, #0
 801d35a:	4604      	mov	r4, r0
 801d35c:	4608      	mov	r0, r1
 801d35e:	602b      	str	r3, [r5, #0]
 801d360:	f7e5 fd5a 	bl	8002e18 <_isatty>
 801d364:	1c43      	adds	r3, r0, #1
 801d366:	d102      	bne.n	801d36e <_isatty_r+0x1a>
 801d368:	682b      	ldr	r3, [r5, #0]
 801d36a:	b103      	cbz	r3, 801d36e <_isatty_r+0x1a>
 801d36c:	6023      	str	r3, [r4, #0]
 801d36e:	bd38      	pop	{r3, r4, r5, pc}
 801d370:	2401da30 	.word	0x2401da30
 801d374:	00000000 	.word	0x00000000

0801d378 <sin>:
 801d378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d37a:	eeb0 7b40 	vmov.f64	d7, d0
 801d37e:	ee17 3a90 	vmov	r3, s15
 801d382:	4a21      	ldr	r2, [pc, #132]	@ (801d408 <sin+0x90>)
 801d384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d388:	4293      	cmp	r3, r2
 801d38a:	d807      	bhi.n	801d39c <sin+0x24>
 801d38c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801d400 <sin+0x88>
 801d390:	2000      	movs	r0, #0
 801d392:	b005      	add	sp, #20
 801d394:	f85d eb04 	ldr.w	lr, [sp], #4
 801d398:	f000 b986 	b.w	801d6a8 <__kernel_sin>
 801d39c:	4a1b      	ldr	r2, [pc, #108]	@ (801d40c <sin+0x94>)
 801d39e:	4293      	cmp	r3, r2
 801d3a0:	d904      	bls.n	801d3ac <sin+0x34>
 801d3a2:	ee30 0b40 	vsub.f64	d0, d0, d0
 801d3a6:	b005      	add	sp, #20
 801d3a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3ac:	4668      	mov	r0, sp
 801d3ae:	f000 f9d3 	bl	801d758 <__ieee754_rem_pio2>
 801d3b2:	f000 0003 	and.w	r0, r0, #3
 801d3b6:	2801      	cmp	r0, #1
 801d3b8:	d00a      	beq.n	801d3d0 <sin+0x58>
 801d3ba:	2802      	cmp	r0, #2
 801d3bc:	d00f      	beq.n	801d3de <sin+0x66>
 801d3be:	b9c0      	cbnz	r0, 801d3f2 <sin+0x7a>
 801d3c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d3c4:	ed9d 0b00 	vldr	d0, [sp]
 801d3c8:	2001      	movs	r0, #1
 801d3ca:	f000 f96d 	bl	801d6a8 <__kernel_sin>
 801d3ce:	e7ea      	b.n	801d3a6 <sin+0x2e>
 801d3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d3d4:	ed9d 0b00 	vldr	d0, [sp]
 801d3d8:	f000 f8fe 	bl	801d5d8 <__kernel_cos>
 801d3dc:	e7e3      	b.n	801d3a6 <sin+0x2e>
 801d3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d3e2:	ed9d 0b00 	vldr	d0, [sp]
 801d3e6:	2001      	movs	r0, #1
 801d3e8:	f000 f95e 	bl	801d6a8 <__kernel_sin>
 801d3ec:	eeb1 0b40 	vneg.f64	d0, d0
 801d3f0:	e7d9      	b.n	801d3a6 <sin+0x2e>
 801d3f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801d3f6:	ed9d 0b00 	vldr	d0, [sp]
 801d3fa:	f000 f8ed 	bl	801d5d8 <__kernel_cos>
 801d3fe:	e7f5      	b.n	801d3ec <sin+0x74>
	...
 801d408:	3fe921fb 	.word	0x3fe921fb
 801d40c:	7fefffff 	.word	0x7fefffff

0801d410 <sinf_poly>:
 801d410:	07cb      	lsls	r3, r1, #31
 801d412:	d412      	bmi.n	801d43a <sinf_poly+0x2a>
 801d414:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d418:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801d41c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801d420:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d424:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801d428:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d42c:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d430:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d434:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d438:	4770      	bx	lr
 801d43a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801d43e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d442:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801d446:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801d44a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d44e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801d452:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d456:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801d45a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d45e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d462:	e7e5      	b.n	801d430 <sinf_poly+0x20>
 801d464:	0000      	movs	r0, r0
	...

0801d468 <sinf>:
 801d468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d46a:	ee10 4a10 	vmov	r4, s0
 801d46e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d472:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801d476:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d47a:	eef0 7a40 	vmov.f32	s15, s0
 801d47e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801d482:	d218      	bcs.n	801d4b6 <sinf+0x4e>
 801d484:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d488:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801d48c:	d20a      	bcs.n	801d4a4 <sinf+0x3c>
 801d48e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801d492:	d103      	bne.n	801d49c <sinf+0x34>
 801d494:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801d498:	ed8d 1a01 	vstr	s2, [sp, #4]
 801d49c:	eeb0 0a67 	vmov.f32	s0, s15
 801d4a0:	b003      	add	sp, #12
 801d4a2:	bd30      	pop	{r4, r5, pc}
 801d4a4:	483a      	ldr	r0, [pc, #232]	@ (801d590 <sinf+0x128>)
 801d4a6:	eeb0 0b46 	vmov.f64	d0, d6
 801d4aa:	2100      	movs	r1, #0
 801d4ac:	b003      	add	sp, #12
 801d4ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d4b2:	f7ff bfad 	b.w	801d410 <sinf_poly>
 801d4b6:	f240 422e 	movw	r2, #1070	@ 0x42e
 801d4ba:	4293      	cmp	r3, r2
 801d4bc:	d824      	bhi.n	801d508 <sinf+0xa0>
 801d4be:	4b34      	ldr	r3, [pc, #208]	@ (801d590 <sinf+0x128>)
 801d4c0:	ed93 7b08 	vldr	d7, [r3, #32]
 801d4c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d4c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d4cc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801d4d0:	ee17 1a90 	vmov	r1, s15
 801d4d4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801d4d8:	1609      	asrs	r1, r1, #24
 801d4da:	ee07 1a90 	vmov	s15, r1
 801d4de:	f001 0203 	and.w	r2, r1, #3
 801d4e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d4e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d4ea:	ed92 0b00 	vldr	d0, [r2]
 801d4ee:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801d4f2:	f011 0f02 	tst.w	r1, #2
 801d4f6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801d4fa:	bf08      	it	eq
 801d4fc:	4618      	moveq	r0, r3
 801d4fe:	ee26 1b06 	vmul.f64	d1, d6, d6
 801d502:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d506:	e7d1      	b.n	801d4ac <sinf+0x44>
 801d508:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801d50c:	d237      	bcs.n	801d57e <sinf+0x116>
 801d50e:	4921      	ldr	r1, [pc, #132]	@ (801d594 <sinf+0x12c>)
 801d510:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801d514:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801d518:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d51c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801d520:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d524:	6a10      	ldr	r0, [r2, #32]
 801d526:	6912      	ldr	r2, [r2, #16]
 801d528:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d52c:	40ab      	lsls	r3, r5
 801d52e:	fba0 5003 	umull	r5, r0, r0, r3
 801d532:	4359      	muls	r1, r3
 801d534:	fbe3 0102 	umlal	r0, r1, r3, r2
 801d538:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801d53c:	0f9d      	lsrs	r5, r3, #30
 801d53e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801d542:	1ac9      	subs	r1, r1, r3
 801d544:	f7e3 f8da 	bl	80006fc <__aeabi_l2d>
 801d548:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d54c:	4b10      	ldr	r3, [pc, #64]	@ (801d590 <sinf+0x128>)
 801d54e:	f004 0203 	and.w	r2, r4, #3
 801d552:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d556:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801d588 <sinf+0x120>
 801d55a:	ed92 0b00 	vldr	d0, [r2]
 801d55e:	ec41 0b17 	vmov	d7, r0, r1
 801d562:	f014 0f02 	tst.w	r4, #2
 801d566:	ee27 7b06 	vmul.f64	d7, d7, d6
 801d56a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801d56e:	4629      	mov	r1, r5
 801d570:	bf08      	it	eq
 801d572:	4618      	moveq	r0, r3
 801d574:	ee27 1b07 	vmul.f64	d1, d7, d7
 801d578:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d57c:	e796      	b.n	801d4ac <sinf+0x44>
 801d57e:	b003      	add	sp, #12
 801d580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d584:	f000 b816 	b.w	801d5b4 <__math_invalidf>
 801d588:	54442d18 	.word	0x54442d18
 801d58c:	3c1921fb 	.word	0x3c1921fb
 801d590:	0801f2c0 	.word	0x0801f2c0
 801d594:	0801f260 	.word	0x0801f260

0801d598 <with_errnof>:
 801d598:	b510      	push	{r4, lr}
 801d59a:	ed2d 8b02 	vpush	{d8}
 801d59e:	eeb0 8a40 	vmov.f32	s16, s0
 801d5a2:	4604      	mov	r4, r0
 801d5a4:	f7fd fa6e 	bl	801aa84 <__errno>
 801d5a8:	eeb0 0a48 	vmov.f32	s0, s16
 801d5ac:	ecbd 8b02 	vpop	{d8}
 801d5b0:	6004      	str	r4, [r0, #0]
 801d5b2:	bd10      	pop	{r4, pc}

0801d5b4 <__math_invalidf>:
 801d5b4:	eef0 7a40 	vmov.f32	s15, s0
 801d5b8:	ee30 7a40 	vsub.f32	s14, s0, s0
 801d5bc:	eef4 7a67 	vcmp.f32	s15, s15
 801d5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801d5c8:	d602      	bvs.n	801d5d0 <__math_invalidf+0x1c>
 801d5ca:	2021      	movs	r0, #33	@ 0x21
 801d5cc:	f7ff bfe4 	b.w	801d598 <with_errnof>
 801d5d0:	4770      	bx	lr
 801d5d2:	0000      	movs	r0, r0
 801d5d4:	0000      	movs	r0, r0
	...

0801d5d8 <__kernel_cos>:
 801d5d8:	eeb0 5b40 	vmov.f64	d5, d0
 801d5dc:	ee15 1a90 	vmov	r1, s11
 801d5e0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d5e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d5e8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801d5ec:	d204      	bcs.n	801d5f8 <__kernel_cos+0x20>
 801d5ee:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801d5f2:	ee17 3a90 	vmov	r3, s15
 801d5f6:	b343      	cbz	r3, 801d64a <__kernel_cos+0x72>
 801d5f8:	ee25 6b05 	vmul.f64	d6, d5, d5
 801d5fc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801d600:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801d670 <__kernel_cos+0x98>
 801d604:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d678 <__kernel_cos+0xa0>
 801d608:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d60c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d680 <__kernel_cos+0xa8>
 801d610:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d614:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d688 <__kernel_cos+0xb0>
 801d618:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d61c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801d690 <__kernel_cos+0xb8>
 801d620:	4b1f      	ldr	r3, [pc, #124]	@ (801d6a0 <__kernel_cos+0xc8>)
 801d622:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d626:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801d698 <__kernel_cos+0xc0>
 801d62a:	4299      	cmp	r1, r3
 801d62c:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d630:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d634:	ee24 4b06 	vmul.f64	d4, d4, d6
 801d638:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d63c:	eea6 1b04 	vfma.f64	d1, d6, d4
 801d640:	d804      	bhi.n	801d64c <__kernel_cos+0x74>
 801d642:	ee37 7b41 	vsub.f64	d7, d7, d1
 801d646:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d64a:	4770      	bx	lr
 801d64c:	4b15      	ldr	r3, [pc, #84]	@ (801d6a4 <__kernel_cos+0xcc>)
 801d64e:	4299      	cmp	r1, r3
 801d650:	d809      	bhi.n	801d666 <__kernel_cos+0x8e>
 801d652:	2200      	movs	r2, #0
 801d654:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801d658:	ec43 2b16 	vmov	d6, r2, r3
 801d65c:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d660:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d664:	e7ed      	b.n	801d642 <__kernel_cos+0x6a>
 801d666:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801d66a:	e7f7      	b.n	801d65c <__kernel_cos+0x84>
 801d66c:	f3af 8000 	nop.w
 801d670:	be8838d4 	.word	0xbe8838d4
 801d674:	bda8fae9 	.word	0xbda8fae9
 801d678:	bdb4b1c4 	.word	0xbdb4b1c4
 801d67c:	3e21ee9e 	.word	0x3e21ee9e
 801d680:	809c52ad 	.word	0x809c52ad
 801d684:	be927e4f 	.word	0xbe927e4f
 801d688:	19cb1590 	.word	0x19cb1590
 801d68c:	3efa01a0 	.word	0x3efa01a0
 801d690:	16c15177 	.word	0x16c15177
 801d694:	bf56c16c 	.word	0xbf56c16c
 801d698:	5555554c 	.word	0x5555554c
 801d69c:	3fa55555 	.word	0x3fa55555
 801d6a0:	3fd33332 	.word	0x3fd33332
 801d6a4:	3fe90000 	.word	0x3fe90000

0801d6a8 <__kernel_sin>:
 801d6a8:	ee10 3a90 	vmov	r3, s1
 801d6ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d6b0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801d6b4:	d204      	bcs.n	801d6c0 <__kernel_sin+0x18>
 801d6b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801d6ba:	ee17 3a90 	vmov	r3, s15
 801d6be:	b35b      	cbz	r3, 801d718 <__kernel_sin+0x70>
 801d6c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 801d6c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 801d6c8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801d720 <__kernel_sin+0x78>
 801d6cc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d728 <__kernel_sin+0x80>
 801d6d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d6d4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d730 <__kernel_sin+0x88>
 801d6d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d6dc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d738 <__kernel_sin+0x90>
 801d6e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 801d6e4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801d740 <__kernel_sin+0x98>
 801d6e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 801d6ec:	b930      	cbnz	r0, 801d6fc <__kernel_sin+0x54>
 801d6ee:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801d748 <__kernel_sin+0xa0>
 801d6f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 801d6f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801d6fa:	4770      	bx	lr
 801d6fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801d700:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801d704:	eea1 7b04 	vfma.f64	d7, d1, d4
 801d708:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801d70c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d750 <__kernel_sin+0xa8>
 801d710:	eea5 1b07 	vfma.f64	d1, d5, d7
 801d714:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d718:	4770      	bx	lr
 801d71a:	bf00      	nop
 801d71c:	f3af 8000 	nop.w
 801d720:	5acfd57c 	.word	0x5acfd57c
 801d724:	3de5d93a 	.word	0x3de5d93a
 801d728:	8a2b9ceb 	.word	0x8a2b9ceb
 801d72c:	be5ae5e6 	.word	0xbe5ae5e6
 801d730:	57b1fe7d 	.word	0x57b1fe7d
 801d734:	3ec71de3 	.word	0x3ec71de3
 801d738:	19c161d5 	.word	0x19c161d5
 801d73c:	bf2a01a0 	.word	0xbf2a01a0
 801d740:	1110f8a6 	.word	0x1110f8a6
 801d744:	3f811111 	.word	0x3f811111
 801d748:	55555549 	.word	0x55555549
 801d74c:	bfc55555 	.word	0xbfc55555
 801d750:	55555549 	.word	0x55555549
 801d754:	3fc55555 	.word	0x3fc55555

0801d758 <__ieee754_rem_pio2>:
 801d758:	b570      	push	{r4, r5, r6, lr}
 801d75a:	eeb0 7b40 	vmov.f64	d7, d0
 801d75e:	ee17 5a90 	vmov	r5, s15
 801d762:	4b99      	ldr	r3, [pc, #612]	@ (801d9c8 <__ieee754_rem_pio2+0x270>)
 801d764:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801d768:	429e      	cmp	r6, r3
 801d76a:	b088      	sub	sp, #32
 801d76c:	4604      	mov	r4, r0
 801d76e:	d807      	bhi.n	801d780 <__ieee754_rem_pio2+0x28>
 801d770:	2200      	movs	r2, #0
 801d772:	2300      	movs	r3, #0
 801d774:	ed84 0b00 	vstr	d0, [r4]
 801d778:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d77c:	2000      	movs	r0, #0
 801d77e:	e01b      	b.n	801d7b8 <__ieee754_rem_pio2+0x60>
 801d780:	4b92      	ldr	r3, [pc, #584]	@ (801d9cc <__ieee754_rem_pio2+0x274>)
 801d782:	429e      	cmp	r6, r3
 801d784:	d83b      	bhi.n	801d7fe <__ieee754_rem_pio2+0xa6>
 801d786:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801d78a:	2d00      	cmp	r5, #0
 801d78c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d988 <__ieee754_rem_pio2+0x230>
 801d790:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801d794:	dd19      	ble.n	801d7ca <__ieee754_rem_pio2+0x72>
 801d796:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d79a:	429e      	cmp	r6, r3
 801d79c:	d00e      	beq.n	801d7bc <__ieee754_rem_pio2+0x64>
 801d79e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d990 <__ieee754_rem_pio2+0x238>
 801d7a2:	ee37 6b45 	vsub.f64	d6, d7, d5
 801d7a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7aa:	ed84 6b00 	vstr	d6, [r4]
 801d7ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d7b2:	ed84 7b02 	vstr	d7, [r4, #8]
 801d7b6:	2001      	movs	r0, #1
 801d7b8:	b008      	add	sp, #32
 801d7ba:	bd70      	pop	{r4, r5, r6, pc}
 801d7bc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d998 <__ieee754_rem_pio2+0x240>
 801d7c0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d9a0 <__ieee754_rem_pio2+0x248>
 801d7c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7c8:	e7eb      	b.n	801d7a2 <__ieee754_rem_pio2+0x4a>
 801d7ca:	429e      	cmp	r6, r3
 801d7cc:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d7d0:	d00e      	beq.n	801d7f0 <__ieee754_rem_pio2+0x98>
 801d7d2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d990 <__ieee754_rem_pio2+0x238>
 801d7d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d7da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7de:	ed84 6b00 	vstr	d6, [r4]
 801d7e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d7e6:	f04f 30ff 	mov.w	r0, #4294967295
 801d7ea:	ed84 7b02 	vstr	d7, [r4, #8]
 801d7ee:	e7e3      	b.n	801d7b8 <__ieee754_rem_pio2+0x60>
 801d7f0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d998 <__ieee754_rem_pio2+0x240>
 801d7f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d9a0 <__ieee754_rem_pio2+0x248>
 801d7f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d7fc:	e7eb      	b.n	801d7d6 <__ieee754_rem_pio2+0x7e>
 801d7fe:	4b74      	ldr	r3, [pc, #464]	@ (801d9d0 <__ieee754_rem_pio2+0x278>)
 801d800:	429e      	cmp	r6, r3
 801d802:	d870      	bhi.n	801d8e6 <__ieee754_rem_pio2+0x18e>
 801d804:	f000 f8ec 	bl	801d9e0 <fabs>
 801d808:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d80c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d9a8 <__ieee754_rem_pio2+0x250>
 801d810:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d814:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d818:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d81c:	ee17 0a90 	vmov	r0, s15
 801d820:	eeb1 4b45 	vneg.f64	d4, d5
 801d824:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d988 <__ieee754_rem_pio2+0x230>
 801d828:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d82c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d990 <__ieee754_rem_pio2+0x238>
 801d830:	281f      	cmp	r0, #31
 801d832:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d836:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d83a:	dc05      	bgt.n	801d848 <__ieee754_rem_pio2+0xf0>
 801d83c:	4b65      	ldr	r3, [pc, #404]	@ (801d9d4 <__ieee754_rem_pio2+0x27c>)
 801d83e:	1e42      	subs	r2, r0, #1
 801d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d844:	42b3      	cmp	r3, r6
 801d846:	d109      	bne.n	801d85c <__ieee754_rem_pio2+0x104>
 801d848:	ee16 3a90 	vmov	r3, s13
 801d84c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d850:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d854:	2b10      	cmp	r3, #16
 801d856:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d85a:	dc02      	bgt.n	801d862 <__ieee754_rem_pio2+0x10a>
 801d85c:	ed84 6b00 	vstr	d6, [r4]
 801d860:	e01a      	b.n	801d898 <__ieee754_rem_pio2+0x140>
 801d862:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d998 <__ieee754_rem_pio2+0x240>
 801d866:	eeb0 6b40 	vmov.f64	d6, d0
 801d86a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d86e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d872:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d876:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d9a0 <__ieee754_rem_pio2+0x248>
 801d87a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d87e:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d882:	ee13 3a90 	vmov	r3, s7
 801d886:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d88a:	1ad3      	subs	r3, r2, r3
 801d88c:	2b31      	cmp	r3, #49	@ 0x31
 801d88e:	dc17      	bgt.n	801d8c0 <__ieee754_rem_pio2+0x168>
 801d890:	eeb0 0b46 	vmov.f64	d0, d6
 801d894:	ed84 3b00 	vstr	d3, [r4]
 801d898:	ed94 6b00 	vldr	d6, [r4]
 801d89c:	2d00      	cmp	r5, #0
 801d89e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d8a2:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d8a6:	ed84 0b02 	vstr	d0, [r4, #8]
 801d8aa:	da85      	bge.n	801d7b8 <__ieee754_rem_pio2+0x60>
 801d8ac:	eeb1 6b46 	vneg.f64	d6, d6
 801d8b0:	eeb1 0b40 	vneg.f64	d0, d0
 801d8b4:	ed84 6b00 	vstr	d6, [r4]
 801d8b8:	ed84 0b02 	vstr	d0, [r4, #8]
 801d8bc:	4240      	negs	r0, r0
 801d8be:	e77b      	b.n	801d7b8 <__ieee754_rem_pio2+0x60>
 801d8c0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d9b0 <__ieee754_rem_pio2+0x258>
 801d8c4:	eeb0 0b46 	vmov.f64	d0, d6
 801d8c8:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d8cc:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d8d0:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d8d4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d9b8 <__ieee754_rem_pio2+0x260>
 801d8d8:	eeb0 7b46 	vmov.f64	d7, d6
 801d8dc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d8e0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d8e4:	e7ba      	b.n	801d85c <__ieee754_rem_pio2+0x104>
 801d8e6:	4b3c      	ldr	r3, [pc, #240]	@ (801d9d8 <__ieee754_rem_pio2+0x280>)
 801d8e8:	429e      	cmp	r6, r3
 801d8ea:	d906      	bls.n	801d8fa <__ieee754_rem_pio2+0x1a2>
 801d8ec:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d8f0:	ed80 7b02 	vstr	d7, [r0, #8]
 801d8f4:	ed80 7b00 	vstr	d7, [r0]
 801d8f8:	e740      	b.n	801d77c <__ieee754_rem_pio2+0x24>
 801d8fa:	ee10 3a10 	vmov	r3, s0
 801d8fe:	1532      	asrs	r2, r6, #20
 801d900:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d904:	4618      	mov	r0, r3
 801d906:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d90a:	ec41 0b17 	vmov	d7, r0, r1
 801d90e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d912:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d9c0 <__ieee754_rem_pio2+0x268>
 801d916:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d91a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d91e:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d922:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d926:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d92a:	a808      	add	r0, sp, #32
 801d92c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d930:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d934:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d938:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d93c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d940:	2103      	movs	r1, #3
 801d942:	ed30 7b02 	vldmdb	r0!, {d7}
 801d946:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d94e:	460b      	mov	r3, r1
 801d950:	f101 31ff 	add.w	r1, r1, #4294967295
 801d954:	d0f5      	beq.n	801d942 <__ieee754_rem_pio2+0x1ea>
 801d956:	4921      	ldr	r1, [pc, #132]	@ (801d9dc <__ieee754_rem_pio2+0x284>)
 801d958:	9101      	str	r1, [sp, #4]
 801d95a:	2102      	movs	r1, #2
 801d95c:	9100      	str	r1, [sp, #0]
 801d95e:	a802      	add	r0, sp, #8
 801d960:	4621      	mov	r1, r4
 801d962:	f000 f845 	bl	801d9f0 <__kernel_rem_pio2>
 801d966:	2d00      	cmp	r5, #0
 801d968:	f6bf af26 	bge.w	801d7b8 <__ieee754_rem_pio2+0x60>
 801d96c:	ed94 7b00 	vldr	d7, [r4]
 801d970:	eeb1 7b47 	vneg.f64	d7, d7
 801d974:	ed84 7b00 	vstr	d7, [r4]
 801d978:	ed94 7b02 	vldr	d7, [r4, #8]
 801d97c:	eeb1 7b47 	vneg.f64	d7, d7
 801d980:	ed84 7b02 	vstr	d7, [r4, #8]
 801d984:	e79a      	b.n	801d8bc <__ieee754_rem_pio2+0x164>
 801d986:	bf00      	nop
 801d988:	54400000 	.word	0x54400000
 801d98c:	3ff921fb 	.word	0x3ff921fb
 801d990:	1a626331 	.word	0x1a626331
 801d994:	3dd0b461 	.word	0x3dd0b461
 801d998:	1a600000 	.word	0x1a600000
 801d99c:	3dd0b461 	.word	0x3dd0b461
 801d9a0:	2e037073 	.word	0x2e037073
 801d9a4:	3ba3198a 	.word	0x3ba3198a
 801d9a8:	6dc9c883 	.word	0x6dc9c883
 801d9ac:	3fe45f30 	.word	0x3fe45f30
 801d9b0:	2e000000 	.word	0x2e000000
 801d9b4:	3ba3198a 	.word	0x3ba3198a
 801d9b8:	252049c1 	.word	0x252049c1
 801d9bc:	397b839a 	.word	0x397b839a
 801d9c0:	00000000 	.word	0x00000000
 801d9c4:	41700000 	.word	0x41700000
 801d9c8:	3fe921fb 	.word	0x3fe921fb
 801d9cc:	4002d97b 	.word	0x4002d97b
 801d9d0:	413921fb 	.word	0x413921fb
 801d9d4:	0801f3a0 	.word	0x0801f3a0
 801d9d8:	7fefffff 	.word	0x7fefffff
 801d9dc:	0801f420 	.word	0x0801f420

0801d9e0 <fabs>:
 801d9e0:	ec51 0b10 	vmov	r0, r1, d0
 801d9e4:	4602      	mov	r2, r0
 801d9e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d9ea:	ec43 2b10 	vmov	d0, r2, r3
 801d9ee:	4770      	bx	lr

0801d9f0 <__kernel_rem_pio2>:
 801d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9f4:	ed2d 8b06 	vpush	{d8-d10}
 801d9f8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d9fc:	469b      	mov	fp, r3
 801d9fe:	9001      	str	r0, [sp, #4]
 801da00:	4bbb      	ldr	r3, [pc, #748]	@ (801dcf0 <__kernel_rem_pio2+0x300>)
 801da02:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801da04:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801da08:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801da0c:	f112 0f14 	cmn.w	r2, #20
 801da10:	bfa8      	it	ge
 801da12:	1ed3      	subge	r3, r2, #3
 801da14:	f10b 3aff 	add.w	sl, fp, #4294967295
 801da18:	bfb8      	it	lt
 801da1a:	2300      	movlt	r3, #0
 801da1c:	f06f 0517 	mvn.w	r5, #23
 801da20:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801dcd8 <__kernel_rem_pio2+0x2e8>
 801da24:	bfa4      	itt	ge
 801da26:	2018      	movge	r0, #24
 801da28:	fb93 f3f0 	sdivge	r3, r3, r0
 801da2c:	fb03 5505 	mla	r5, r3, r5, r5
 801da30:	eba3 040a 	sub.w	r4, r3, sl
 801da34:	4415      	add	r5, r2
 801da36:	460f      	mov	r7, r1
 801da38:	eb09 060a 	add.w	r6, r9, sl
 801da3c:	a81a      	add	r0, sp, #104	@ 0x68
 801da3e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801da42:	2200      	movs	r2, #0
 801da44:	42b2      	cmp	r2, r6
 801da46:	dd0e      	ble.n	801da66 <__kernel_rem_pio2+0x76>
 801da48:	aa1a      	add	r2, sp, #104	@ 0x68
 801da4a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801da4e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801da52:	2600      	movs	r6, #0
 801da54:	454e      	cmp	r6, r9
 801da56:	dc25      	bgt.n	801daa4 <__kernel_rem_pio2+0xb4>
 801da58:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801dcd8 <__kernel_rem_pio2+0x2e8>
 801da5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801da60:	4614      	mov	r4, r2
 801da62:	2000      	movs	r0, #0
 801da64:	e015      	b.n	801da92 <__kernel_rem_pio2+0xa2>
 801da66:	42d4      	cmn	r4, r2
 801da68:	d409      	bmi.n	801da7e <__kernel_rem_pio2+0x8e>
 801da6a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801da6e:	ee07 1a90 	vmov	s15, r1
 801da72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801da76:	eca0 7b02 	vstmia	r0!, {d7}
 801da7a:	3201      	adds	r2, #1
 801da7c:	e7e2      	b.n	801da44 <__kernel_rem_pio2+0x54>
 801da7e:	eeb0 7b46 	vmov.f64	d7, d6
 801da82:	e7f8      	b.n	801da76 <__kernel_rem_pio2+0x86>
 801da84:	ecbc 5b02 	vldmia	ip!, {d5}
 801da88:	ed94 6b00 	vldr	d6, [r4]
 801da8c:	3001      	adds	r0, #1
 801da8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801da92:	4550      	cmp	r0, sl
 801da94:	f1a4 0408 	sub.w	r4, r4, #8
 801da98:	ddf4      	ble.n	801da84 <__kernel_rem_pio2+0x94>
 801da9a:	ecae 7b02 	vstmia	lr!, {d7}
 801da9e:	3601      	adds	r6, #1
 801daa0:	3208      	adds	r2, #8
 801daa2:	e7d7      	b.n	801da54 <__kernel_rem_pio2+0x64>
 801daa4:	aa06      	add	r2, sp, #24
 801daa6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801dce0 <__kernel_rem_pio2+0x2f0>
 801daaa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801dce8 <__kernel_rem_pio2+0x2f8>
 801daae:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801dab2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801dab6:	9203      	str	r2, [sp, #12]
 801dab8:	9302      	str	r3, [sp, #8]
 801daba:	464c      	mov	r4, r9
 801dabc:	00e3      	lsls	r3, r4, #3
 801dabe:	9304      	str	r3, [sp, #16]
 801dac0:	ab92      	add	r3, sp, #584	@ 0x248
 801dac2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dac6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801daca:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801dacc:	ab06      	add	r3, sp, #24
 801dace:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801dad2:	461e      	mov	r6, r3
 801dad4:	4620      	mov	r0, r4
 801dad6:	2800      	cmp	r0, #0
 801dad8:	f1a2 0208 	sub.w	r2, r2, #8
 801dadc:	dc4a      	bgt.n	801db74 <__kernel_rem_pio2+0x184>
 801dade:	4628      	mov	r0, r5
 801dae0:	9305      	str	r3, [sp, #20]
 801dae2:	f000 fa01 	bl	801dee8 <scalbn>
 801dae6:	eeb0 8b40 	vmov.f64	d8, d0
 801daea:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801daee:	ee28 0b00 	vmul.f64	d0, d8, d0
 801daf2:	f000 fa79 	bl	801dfe8 <floor>
 801daf6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801dafa:	eea0 8b47 	vfms.f64	d8, d0, d7
 801dafe:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801db02:	2d00      	cmp	r5, #0
 801db04:	ee17 8a90 	vmov	r8, s15
 801db08:	9b05      	ldr	r3, [sp, #20]
 801db0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801db0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801db12:	dd41      	ble.n	801db98 <__kernel_rem_pio2+0x1a8>
 801db14:	1e60      	subs	r0, r4, #1
 801db16:	aa06      	add	r2, sp, #24
 801db18:	f1c5 0c18 	rsb	ip, r5, #24
 801db1c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801db20:	fa46 f20c 	asr.w	r2, r6, ip
 801db24:	4490      	add	r8, r2
 801db26:	fa02 f20c 	lsl.w	r2, r2, ip
 801db2a:	1ab6      	subs	r6, r6, r2
 801db2c:	aa06      	add	r2, sp, #24
 801db2e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801db32:	f1c5 0217 	rsb	r2, r5, #23
 801db36:	4116      	asrs	r6, r2
 801db38:	2e00      	cmp	r6, #0
 801db3a:	dd3c      	ble.n	801dbb6 <__kernel_rem_pio2+0x1c6>
 801db3c:	f04f 0c00 	mov.w	ip, #0
 801db40:	f108 0801 	add.w	r8, r8, #1
 801db44:	4660      	mov	r0, ip
 801db46:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801db4a:	4564      	cmp	r4, ip
 801db4c:	dc66      	bgt.n	801dc1c <__kernel_rem_pio2+0x22c>
 801db4e:	2d00      	cmp	r5, #0
 801db50:	dd03      	ble.n	801db5a <__kernel_rem_pio2+0x16a>
 801db52:	2d01      	cmp	r5, #1
 801db54:	d072      	beq.n	801dc3c <__kernel_rem_pio2+0x24c>
 801db56:	2d02      	cmp	r5, #2
 801db58:	d07a      	beq.n	801dc50 <__kernel_rem_pio2+0x260>
 801db5a:	2e02      	cmp	r6, #2
 801db5c:	d12b      	bne.n	801dbb6 <__kernel_rem_pio2+0x1c6>
 801db5e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801db62:	ee30 8b48 	vsub.f64	d8, d0, d8
 801db66:	b330      	cbz	r0, 801dbb6 <__kernel_rem_pio2+0x1c6>
 801db68:	4628      	mov	r0, r5
 801db6a:	f000 f9bd 	bl	801dee8 <scalbn>
 801db6e:	ee38 8b40 	vsub.f64	d8, d8, d0
 801db72:	e020      	b.n	801dbb6 <__kernel_rem_pio2+0x1c6>
 801db74:	ee20 7b09 	vmul.f64	d7, d0, d9
 801db78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801db7c:	3801      	subs	r0, #1
 801db7e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801db82:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801db86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801db8a:	eca6 0a01 	vstmia	r6!, {s0}
 801db8e:	ed92 0b00 	vldr	d0, [r2]
 801db92:	ee37 0b00 	vadd.f64	d0, d7, d0
 801db96:	e79e      	b.n	801dad6 <__kernel_rem_pio2+0xe6>
 801db98:	d105      	bne.n	801dba6 <__kernel_rem_pio2+0x1b6>
 801db9a:	1e62      	subs	r2, r4, #1
 801db9c:	a906      	add	r1, sp, #24
 801db9e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801dba2:	15f6      	asrs	r6, r6, #23
 801dba4:	e7c8      	b.n	801db38 <__kernel_rem_pio2+0x148>
 801dba6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801dbaa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbb2:	da31      	bge.n	801dc18 <__kernel_rem_pio2+0x228>
 801dbb4:	2600      	movs	r6, #0
 801dbb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbbe:	f040 809b 	bne.w	801dcf8 <__kernel_rem_pio2+0x308>
 801dbc2:	1e62      	subs	r2, r4, #1
 801dbc4:	2000      	movs	r0, #0
 801dbc6:	454a      	cmp	r2, r9
 801dbc8:	da49      	bge.n	801dc5e <__kernel_rem_pio2+0x26e>
 801dbca:	2800      	cmp	r0, #0
 801dbcc:	d062      	beq.n	801dc94 <__kernel_rem_pio2+0x2a4>
 801dbce:	3c01      	subs	r4, #1
 801dbd0:	ab06      	add	r3, sp, #24
 801dbd2:	3d18      	subs	r5, #24
 801dbd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d0f8      	beq.n	801dbce <__kernel_rem_pio2+0x1de>
 801dbdc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dbe0:	4628      	mov	r0, r5
 801dbe2:	f000 f981 	bl	801dee8 <scalbn>
 801dbe6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801dce0 <__kernel_rem_pio2+0x2f0>
 801dbea:	1c62      	adds	r2, r4, #1
 801dbec:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dbee:	00d3      	lsls	r3, r2, #3
 801dbf0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801dbf4:	4622      	mov	r2, r4
 801dbf6:	2a00      	cmp	r2, #0
 801dbf8:	f280 80a8 	bge.w	801dd4c <__kernel_rem_pio2+0x35c>
 801dbfc:	4622      	mov	r2, r4
 801dbfe:	2a00      	cmp	r2, #0
 801dc00:	f2c0 80c6 	blt.w	801dd90 <__kernel_rem_pio2+0x3a0>
 801dc04:	a96a      	add	r1, sp, #424	@ 0x1a8
 801dc06:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801dc0a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801dcd8 <__kernel_rem_pio2+0x2e8>
 801dc0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801dcf4 <__kernel_rem_pio2+0x304>
 801dc12:	2000      	movs	r0, #0
 801dc14:	1aa1      	subs	r1, r4, r2
 801dc16:	e0b0      	b.n	801dd7a <__kernel_rem_pio2+0x38a>
 801dc18:	2602      	movs	r6, #2
 801dc1a:	e78f      	b.n	801db3c <__kernel_rem_pio2+0x14c>
 801dc1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc20:	b948      	cbnz	r0, 801dc36 <__kernel_rem_pio2+0x246>
 801dc22:	b122      	cbz	r2, 801dc2e <__kernel_rem_pio2+0x23e>
 801dc24:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801dc28:	f843 2c04 	str.w	r2, [r3, #-4]
 801dc2c:	2201      	movs	r2, #1
 801dc2e:	f10c 0c01 	add.w	ip, ip, #1
 801dc32:	4610      	mov	r0, r2
 801dc34:	e789      	b.n	801db4a <__kernel_rem_pio2+0x15a>
 801dc36:	ebae 0202 	sub.w	r2, lr, r2
 801dc3a:	e7f5      	b.n	801dc28 <__kernel_rem_pio2+0x238>
 801dc3c:	1e62      	subs	r2, r4, #1
 801dc3e:	ab06      	add	r3, sp, #24
 801dc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dc48:	a906      	add	r1, sp, #24
 801dc4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801dc4e:	e784      	b.n	801db5a <__kernel_rem_pio2+0x16a>
 801dc50:	1e62      	subs	r2, r4, #1
 801dc52:	ab06      	add	r3, sp, #24
 801dc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801dc5c:	e7f4      	b.n	801dc48 <__kernel_rem_pio2+0x258>
 801dc5e:	ab06      	add	r3, sp, #24
 801dc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc64:	3a01      	subs	r2, #1
 801dc66:	4318      	orrs	r0, r3
 801dc68:	e7ad      	b.n	801dbc6 <__kernel_rem_pio2+0x1d6>
 801dc6a:	3301      	adds	r3, #1
 801dc6c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801dc70:	2800      	cmp	r0, #0
 801dc72:	d0fa      	beq.n	801dc6a <__kernel_rem_pio2+0x27a>
 801dc74:	9a04      	ldr	r2, [sp, #16]
 801dc76:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801dc7a:	446a      	add	r2, sp
 801dc7c:	eb04 000b 	add.w	r0, r4, fp
 801dc80:	a91a      	add	r1, sp, #104	@ 0x68
 801dc82:	1c66      	adds	r6, r4, #1
 801dc84:	3a98      	subs	r2, #152	@ 0x98
 801dc86:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801dc8a:	4423      	add	r3, r4
 801dc8c:	42b3      	cmp	r3, r6
 801dc8e:	da04      	bge.n	801dc9a <__kernel_rem_pio2+0x2aa>
 801dc90:	461c      	mov	r4, r3
 801dc92:	e713      	b.n	801dabc <__kernel_rem_pio2+0xcc>
 801dc94:	9a03      	ldr	r2, [sp, #12]
 801dc96:	2301      	movs	r3, #1
 801dc98:	e7e8      	b.n	801dc6c <__kernel_rem_pio2+0x27c>
 801dc9a:	9902      	ldr	r1, [sp, #8]
 801dc9c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801dca0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801dca4:	9104      	str	r1, [sp, #16]
 801dca6:	ee07 1a90 	vmov	s15, r1
 801dcaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dcae:	2400      	movs	r4, #0
 801dcb0:	eca0 7b02 	vstmia	r0!, {d7}
 801dcb4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801dcd8 <__kernel_rem_pio2+0x2e8>
 801dcb8:	4686      	mov	lr, r0
 801dcba:	4554      	cmp	r4, sl
 801dcbc:	dd03      	ble.n	801dcc6 <__kernel_rem_pio2+0x2d6>
 801dcbe:	eca2 7b02 	vstmia	r2!, {d7}
 801dcc2:	3601      	adds	r6, #1
 801dcc4:	e7e2      	b.n	801dc8c <__kernel_rem_pio2+0x29c>
 801dcc6:	ecbc 5b02 	vldmia	ip!, {d5}
 801dcca:	ed3e 6b02 	vldmdb	lr!, {d6}
 801dcce:	3401      	adds	r4, #1
 801dcd0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dcd4:	e7f1      	b.n	801dcba <__kernel_rem_pio2+0x2ca>
 801dcd6:	bf00      	nop
	...
 801dce4:	3e700000 	.word	0x3e700000
 801dce8:	00000000 	.word	0x00000000
 801dcec:	41700000 	.word	0x41700000
 801dcf0:	0801f568 	.word	0x0801f568
 801dcf4:	0801f528 	.word	0x0801f528
 801dcf8:	4268      	negs	r0, r5
 801dcfa:	eeb0 0b48 	vmov.f64	d0, d8
 801dcfe:	f000 f8f3 	bl	801dee8 <scalbn>
 801dd02:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801ded0 <__kernel_rem_pio2+0x4e0>
 801dd06:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd0e:	db17      	blt.n	801dd40 <__kernel_rem_pio2+0x350>
 801dd10:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801ded8 <__kernel_rem_pio2+0x4e8>
 801dd14:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dd18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801dd1c:	aa06      	add	r2, sp, #24
 801dd1e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801dd22:	eea5 0b46 	vfms.f64	d0, d5, d6
 801dd26:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dd2a:	3518      	adds	r5, #24
 801dd2c:	ee10 3a10 	vmov	r3, s0
 801dd30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801dd34:	ee17 3a10 	vmov	r3, s14
 801dd38:	3401      	adds	r4, #1
 801dd3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801dd3e:	e74d      	b.n	801dbdc <__kernel_rem_pio2+0x1ec>
 801dd40:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dd44:	aa06      	add	r2, sp, #24
 801dd46:	ee10 3a10 	vmov	r3, s0
 801dd4a:	e7f6      	b.n	801dd3a <__kernel_rem_pio2+0x34a>
 801dd4c:	a806      	add	r0, sp, #24
 801dd4e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801dd52:	9001      	str	r0, [sp, #4]
 801dd54:	ee07 0a90 	vmov	s15, r0
 801dd58:	3a01      	subs	r2, #1
 801dd5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dd5e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801dd62:	ee20 0b06 	vmul.f64	d0, d0, d6
 801dd66:	ed21 7b02 	vstmdb	r1!, {d7}
 801dd6a:	e744      	b.n	801dbf6 <__kernel_rem_pio2+0x206>
 801dd6c:	ecbc 5b02 	vldmia	ip!, {d5}
 801dd70:	ecb5 6b02 	vldmia	r5!, {d6}
 801dd74:	3001      	adds	r0, #1
 801dd76:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dd7a:	4548      	cmp	r0, r9
 801dd7c:	dc01      	bgt.n	801dd82 <__kernel_rem_pio2+0x392>
 801dd7e:	4281      	cmp	r1, r0
 801dd80:	daf4      	bge.n	801dd6c <__kernel_rem_pio2+0x37c>
 801dd82:	a842      	add	r0, sp, #264	@ 0x108
 801dd84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801dd88:	ed81 7b00 	vstr	d7, [r1]
 801dd8c:	3a01      	subs	r2, #1
 801dd8e:	e736      	b.n	801dbfe <__kernel_rem_pio2+0x20e>
 801dd90:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801dd92:	2a02      	cmp	r2, #2
 801dd94:	dc0a      	bgt.n	801ddac <__kernel_rem_pio2+0x3bc>
 801dd96:	2a00      	cmp	r2, #0
 801dd98:	dc2d      	bgt.n	801ddf6 <__kernel_rem_pio2+0x406>
 801dd9a:	d046      	beq.n	801de2a <__kernel_rem_pio2+0x43a>
 801dd9c:	f008 0007 	and.w	r0, r8, #7
 801dda0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801dda4:	ecbd 8b06 	vpop	{d8-d10}
 801dda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddac:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801ddae:	2a03      	cmp	r2, #3
 801ddb0:	d1f4      	bne.n	801dd9c <__kernel_rem_pio2+0x3ac>
 801ddb2:	a942      	add	r1, sp, #264	@ 0x108
 801ddb4:	f1a3 0208 	sub.w	r2, r3, #8
 801ddb8:	440a      	add	r2, r1
 801ddba:	4611      	mov	r1, r2
 801ddbc:	4620      	mov	r0, r4
 801ddbe:	2800      	cmp	r0, #0
 801ddc0:	f1a1 0108 	sub.w	r1, r1, #8
 801ddc4:	dc52      	bgt.n	801de6c <__kernel_rem_pio2+0x47c>
 801ddc6:	4621      	mov	r1, r4
 801ddc8:	2901      	cmp	r1, #1
 801ddca:	f1a2 0208 	sub.w	r2, r2, #8
 801ddce:	dc5d      	bgt.n	801de8c <__kernel_rem_pio2+0x49c>
 801ddd0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801dee0 <__kernel_rem_pio2+0x4f0>
 801ddd4:	aa42      	add	r2, sp, #264	@ 0x108
 801ddd6:	4413      	add	r3, r2
 801ddd8:	2c01      	cmp	r4, #1
 801ddda:	dc67      	bgt.n	801deac <__kernel_rem_pio2+0x4bc>
 801dddc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801dde0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801dde4:	2e00      	cmp	r6, #0
 801dde6:	d167      	bne.n	801deb8 <__kernel_rem_pio2+0x4c8>
 801dde8:	ed87 5b00 	vstr	d5, [r7]
 801ddec:	ed87 6b02 	vstr	d6, [r7, #8]
 801ddf0:	ed87 7b04 	vstr	d7, [r7, #16]
 801ddf4:	e7d2      	b.n	801dd9c <__kernel_rem_pio2+0x3ac>
 801ddf6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801dee0 <__kernel_rem_pio2+0x4f0>
 801ddfa:	aa42      	add	r2, sp, #264	@ 0x108
 801ddfc:	4413      	add	r3, r2
 801ddfe:	4622      	mov	r2, r4
 801de00:	2a00      	cmp	r2, #0
 801de02:	da24      	bge.n	801de4e <__kernel_rem_pio2+0x45e>
 801de04:	b34e      	cbz	r6, 801de5a <__kernel_rem_pio2+0x46a>
 801de06:	eeb1 7b46 	vneg.f64	d7, d6
 801de0a:	ed87 7b00 	vstr	d7, [r7]
 801de0e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801de12:	aa44      	add	r2, sp, #272	@ 0x110
 801de14:	2301      	movs	r3, #1
 801de16:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de1a:	429c      	cmp	r4, r3
 801de1c:	da20      	bge.n	801de60 <__kernel_rem_pio2+0x470>
 801de1e:	b10e      	cbz	r6, 801de24 <__kernel_rem_pio2+0x434>
 801de20:	eeb1 7b47 	vneg.f64	d7, d7
 801de24:	ed87 7b02 	vstr	d7, [r7, #8]
 801de28:	e7b8      	b.n	801dd9c <__kernel_rem_pio2+0x3ac>
 801de2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801dee0 <__kernel_rem_pio2+0x4f0>
 801de2e:	aa42      	add	r2, sp, #264	@ 0x108
 801de30:	4413      	add	r3, r2
 801de32:	2c00      	cmp	r4, #0
 801de34:	da05      	bge.n	801de42 <__kernel_rem_pio2+0x452>
 801de36:	b10e      	cbz	r6, 801de3c <__kernel_rem_pio2+0x44c>
 801de38:	eeb1 7b47 	vneg.f64	d7, d7
 801de3c:	ed87 7b00 	vstr	d7, [r7]
 801de40:	e7ac      	b.n	801dd9c <__kernel_rem_pio2+0x3ac>
 801de42:	ed33 6b02 	vldmdb	r3!, {d6}
 801de46:	3c01      	subs	r4, #1
 801de48:	ee37 7b06 	vadd.f64	d7, d7, d6
 801de4c:	e7f1      	b.n	801de32 <__kernel_rem_pio2+0x442>
 801de4e:	ed33 7b02 	vldmdb	r3!, {d7}
 801de52:	3a01      	subs	r2, #1
 801de54:	ee36 6b07 	vadd.f64	d6, d6, d7
 801de58:	e7d2      	b.n	801de00 <__kernel_rem_pio2+0x410>
 801de5a:	eeb0 7b46 	vmov.f64	d7, d6
 801de5e:	e7d4      	b.n	801de0a <__kernel_rem_pio2+0x41a>
 801de60:	ecb2 6b02 	vldmia	r2!, {d6}
 801de64:	3301      	adds	r3, #1
 801de66:	ee37 7b06 	vadd.f64	d7, d7, d6
 801de6a:	e7d6      	b.n	801de1a <__kernel_rem_pio2+0x42a>
 801de6c:	ed91 7b00 	vldr	d7, [r1]
 801de70:	ed91 5b02 	vldr	d5, [r1, #8]
 801de74:	3801      	subs	r0, #1
 801de76:	ee37 6b05 	vadd.f64	d6, d7, d5
 801de7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de7e:	ed81 6b00 	vstr	d6, [r1]
 801de82:	ee37 7b05 	vadd.f64	d7, d7, d5
 801de86:	ed81 7b02 	vstr	d7, [r1, #8]
 801de8a:	e798      	b.n	801ddbe <__kernel_rem_pio2+0x3ce>
 801de8c:	ed92 7b00 	vldr	d7, [r2]
 801de90:	ed92 5b02 	vldr	d5, [r2, #8]
 801de94:	3901      	subs	r1, #1
 801de96:	ee37 6b05 	vadd.f64	d6, d7, d5
 801de9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801de9e:	ed82 6b00 	vstr	d6, [r2]
 801dea2:	ee37 7b05 	vadd.f64	d7, d7, d5
 801dea6:	ed82 7b02 	vstr	d7, [r2, #8]
 801deaa:	e78d      	b.n	801ddc8 <__kernel_rem_pio2+0x3d8>
 801deac:	ed33 6b02 	vldmdb	r3!, {d6}
 801deb0:	3c01      	subs	r4, #1
 801deb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801deb6:	e78f      	b.n	801ddd8 <__kernel_rem_pio2+0x3e8>
 801deb8:	eeb1 5b45 	vneg.f64	d5, d5
 801debc:	eeb1 6b46 	vneg.f64	d6, d6
 801dec0:	ed87 5b00 	vstr	d5, [r7]
 801dec4:	eeb1 7b47 	vneg.f64	d7, d7
 801dec8:	ed87 6b02 	vstr	d6, [r7, #8]
 801decc:	e790      	b.n	801ddf0 <__kernel_rem_pio2+0x400>
 801dece:	bf00      	nop
 801ded0:	00000000 	.word	0x00000000
 801ded4:	41700000 	.word	0x41700000
 801ded8:	00000000 	.word	0x00000000
 801dedc:	3e700000 	.word	0x3e700000
	...

0801dee8 <scalbn>:
 801dee8:	ee10 1a90 	vmov	r1, s1
 801deec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801def0:	b98b      	cbnz	r3, 801df16 <scalbn+0x2e>
 801def2:	ee10 3a10 	vmov	r3, s0
 801def6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801defa:	4319      	orrs	r1, r3
 801defc:	d00a      	beq.n	801df14 <scalbn+0x2c>
 801defe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801dfb0 <scalbn+0xc8>
 801df02:	4b37      	ldr	r3, [pc, #220]	@ (801dfe0 <scalbn+0xf8>)
 801df04:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df08:	4298      	cmp	r0, r3
 801df0a:	da0b      	bge.n	801df24 <scalbn+0x3c>
 801df0c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801dfb8 <scalbn+0xd0>
 801df10:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df14:	4770      	bx	lr
 801df16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801df1a:	4293      	cmp	r3, r2
 801df1c:	d107      	bne.n	801df2e <scalbn+0x46>
 801df1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801df22:	4770      	bx	lr
 801df24:	ee10 1a90 	vmov	r1, s1
 801df28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801df2c:	3b36      	subs	r3, #54	@ 0x36
 801df2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801df32:	4290      	cmp	r0, r2
 801df34:	dd0d      	ble.n	801df52 <scalbn+0x6a>
 801df36:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801dfc0 <scalbn+0xd8>
 801df3a:	ee10 3a90 	vmov	r3, s1
 801df3e:	eeb0 6b47 	vmov.f64	d6, d7
 801df42:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801dfc8 <scalbn+0xe0>
 801df46:	2b00      	cmp	r3, #0
 801df48:	fe27 7b05 	vselge.f64	d7, d7, d5
 801df4c:	ee27 0b06 	vmul.f64	d0, d7, d6
 801df50:	4770      	bx	lr
 801df52:	4418      	add	r0, r3
 801df54:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801df58:	4298      	cmp	r0, r3
 801df5a:	dcec      	bgt.n	801df36 <scalbn+0x4e>
 801df5c:	2800      	cmp	r0, #0
 801df5e:	dd0a      	ble.n	801df76 <scalbn+0x8e>
 801df60:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801df64:	ec53 2b10 	vmov	r2, r3, d0
 801df68:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801df6c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801df70:	ec43 2b10 	vmov	d0, r2, r3
 801df74:	4770      	bx	lr
 801df76:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801df7a:	da09      	bge.n	801df90 <scalbn+0xa8>
 801df7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801dfb8 <scalbn+0xd0>
 801df80:	ee10 3a90 	vmov	r3, s1
 801df84:	eeb0 6b47 	vmov.f64	d6, d7
 801df88:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801dfd0 <scalbn+0xe8>
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	e7db      	b.n	801df48 <scalbn+0x60>
 801df90:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801df94:	ec53 2b10 	vmov	r2, r3, d0
 801df98:	3036      	adds	r0, #54	@ 0x36
 801df9a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801df9e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801dfa2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801dfd8 <scalbn+0xf0>
 801dfa6:	ec43 2b10 	vmov	d0, r2, r3
 801dfaa:	e7b1      	b.n	801df10 <scalbn+0x28>
 801dfac:	f3af 8000 	nop.w
 801dfb0:	00000000 	.word	0x00000000
 801dfb4:	43500000 	.word	0x43500000
 801dfb8:	c2f8f359 	.word	0xc2f8f359
 801dfbc:	01a56e1f 	.word	0x01a56e1f
 801dfc0:	8800759c 	.word	0x8800759c
 801dfc4:	7e37e43c 	.word	0x7e37e43c
 801dfc8:	8800759c 	.word	0x8800759c
 801dfcc:	fe37e43c 	.word	0xfe37e43c
 801dfd0:	c2f8f359 	.word	0xc2f8f359
 801dfd4:	81a56e1f 	.word	0x81a56e1f
 801dfd8:	00000000 	.word	0x00000000
 801dfdc:	3c900000 	.word	0x3c900000
 801dfe0:	ffff3cb0 	.word	0xffff3cb0
 801dfe4:	00000000 	.word	0x00000000

0801dfe8 <floor>:
 801dfe8:	ee10 3a90 	vmov	r3, s1
 801dfec:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801dff0:	ee10 2a10 	vmov	r2, s0
 801dff4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801dff8:	2913      	cmp	r1, #19
 801dffa:	b530      	push	{r4, r5, lr}
 801dffc:	4615      	mov	r5, r2
 801dffe:	dc33      	bgt.n	801e068 <floor+0x80>
 801e000:	2900      	cmp	r1, #0
 801e002:	da18      	bge.n	801e036 <floor+0x4e>
 801e004:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801e0c8 <floor+0xe0>
 801e008:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e00c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e014:	dd0a      	ble.n	801e02c <floor+0x44>
 801e016:	2b00      	cmp	r3, #0
 801e018:	da50      	bge.n	801e0bc <floor+0xd4>
 801e01a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e01e:	4313      	orrs	r3, r2
 801e020:	2200      	movs	r2, #0
 801e022:	4293      	cmp	r3, r2
 801e024:	4b2a      	ldr	r3, [pc, #168]	@ (801e0d0 <floor+0xe8>)
 801e026:	bf08      	it	eq
 801e028:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801e02c:	4619      	mov	r1, r3
 801e02e:	4610      	mov	r0, r2
 801e030:	ec41 0b10 	vmov	d0, r0, r1
 801e034:	e01f      	b.n	801e076 <floor+0x8e>
 801e036:	4827      	ldr	r0, [pc, #156]	@ (801e0d4 <floor+0xec>)
 801e038:	4108      	asrs	r0, r1
 801e03a:	ea03 0400 	and.w	r4, r3, r0
 801e03e:	4314      	orrs	r4, r2
 801e040:	d019      	beq.n	801e076 <floor+0x8e>
 801e042:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801e0c8 <floor+0xe0>
 801e046:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e04a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e052:	ddeb      	ble.n	801e02c <floor+0x44>
 801e054:	2b00      	cmp	r3, #0
 801e056:	bfbe      	ittt	lt
 801e058:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801e05c:	410a      	asrlt	r2, r1
 801e05e:	189b      	addlt	r3, r3, r2
 801e060:	ea23 0300 	bic.w	r3, r3, r0
 801e064:	2200      	movs	r2, #0
 801e066:	e7e1      	b.n	801e02c <floor+0x44>
 801e068:	2933      	cmp	r1, #51	@ 0x33
 801e06a:	dd05      	ble.n	801e078 <floor+0x90>
 801e06c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e070:	d101      	bne.n	801e076 <floor+0x8e>
 801e072:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e076:	bd30      	pop	{r4, r5, pc}
 801e078:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801e07c:	f04f 30ff 	mov.w	r0, #4294967295
 801e080:	40e0      	lsrs	r0, r4
 801e082:	4210      	tst	r0, r2
 801e084:	d0f7      	beq.n	801e076 <floor+0x8e>
 801e086:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e0c8 <floor+0xe0>
 801e08a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e08e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e096:	ddc9      	ble.n	801e02c <floor+0x44>
 801e098:	2b00      	cmp	r3, #0
 801e09a:	da02      	bge.n	801e0a2 <floor+0xba>
 801e09c:	2914      	cmp	r1, #20
 801e09e:	d103      	bne.n	801e0a8 <floor+0xc0>
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	ea22 0200 	bic.w	r2, r2, r0
 801e0a6:	e7c1      	b.n	801e02c <floor+0x44>
 801e0a8:	2401      	movs	r4, #1
 801e0aa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801e0ae:	fa04 f101 	lsl.w	r1, r4, r1
 801e0b2:	440a      	add	r2, r1
 801e0b4:	42aa      	cmp	r2, r5
 801e0b6:	bf38      	it	cc
 801e0b8:	191b      	addcc	r3, r3, r4
 801e0ba:	e7f2      	b.n	801e0a2 <floor+0xba>
 801e0bc:	2200      	movs	r2, #0
 801e0be:	4613      	mov	r3, r2
 801e0c0:	e7b4      	b.n	801e02c <floor+0x44>
 801e0c2:	bf00      	nop
 801e0c4:	f3af 8000 	nop.w
 801e0c8:	8800759c 	.word	0x8800759c
 801e0cc:	7e37e43c 	.word	0x7e37e43c
 801e0d0:	bff00000 	.word	0xbff00000
 801e0d4:	000fffff 	.word	0x000fffff

0801e0d8 <_init>:
 801e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0da:	bf00      	nop
 801e0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0de:	bc08      	pop	{r3}
 801e0e0:	469e      	mov	lr, r3
 801e0e2:	4770      	bx	lr

0801e0e4 <_fini>:
 801e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0e6:	bf00      	nop
 801e0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0ea:	bc08      	pop	{r3}
 801e0ec:	469e      	mov	lr, r3
 801e0ee:	4770      	bx	lr
